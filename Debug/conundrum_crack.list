
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010590  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08010830  08010830  00011830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011028  08011028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011030  08011030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011034  08011034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  08011038  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000554  24000200  08011238  00013200  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000754  08011238  00013754  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a43a  00000000  00000000  0001322e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c17  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001243  00000000  00000000  00032a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b633  00000000  00000000  00033c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f249  00000000  00000000  0006f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166fe1  00000000  00000000  0008e4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f54d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007738  00000000  00000000  001f551c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001fcc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010818 	.word	0x08010818

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	08010818 	.word	0x08010818

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	801a      	strh	r2, [r3, #0]
  *y = temp;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	89fa      	ldrh	r2, [r7, #14]
 8000796:	801a      	strh	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <RA8875_soft_reset>:
/*!
 Performs a SW-based reset of the RA8875
 */
/**************************************************************************/
void RA8875_soft_reset (void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_SOFTRESET);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 fa12 	bl	8000bd4 <RA8875_write_reg>
  HAL_Delay (10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f003 fc97 	bl	80040e4 <HAL_Delay>
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fa0b 	bl	8000bd4 <RA8875_write_reg>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <RA885_pll_init>:
/*!
 Initialise the PLL
 */
/**************************************************************************/
static void RA885_pll_init (void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  if (_size == RA8875_480x80 || _size == RA8875_480x128 || _size == RA8875_480x272)
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <RA885_pll_init+0x5c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d007      	beq.n	80007e0 <RA885_pll_init+0x1c>
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <RA885_pll_init+0x5c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d003      	beq.n	80007e0 <RA885_pll_init+0x1c>
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <RA885_pll_init+0x5c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d10e      	bne.n	80007fe <RA885_pll_init+0x3a>
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 8);
 80007e0:	2108      	movs	r1, #8
 80007e2:	2088      	movs	r0, #136	@ 0x88
 80007e4:	f000 f9f6 	bl	8000bd4 <RA8875_write_reg>
    HAL_Delay (1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f003 fc7b 	bl	80040e4 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 80007ee:	2102      	movs	r1, #2
 80007f0:	2089      	movs	r0, #137	@ 0x89
 80007f2:	f000 f9ef 	bl	8000bd4 <RA8875_write_reg>
    HAL_Delay (1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f003 fc74 	bl	80040e4 <HAL_Delay>
 80007fc:	e00e      	b.n	800081c <RA885_pll_init+0x58>
  }
  else /* (_size == RA8875_800x480) */
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 11);
 80007fe:	210b      	movs	r1, #11
 8000800:	2088      	movs	r0, #136	@ 0x88
 8000802:	f000 f9e7 	bl	8000bd4 <RA8875_write_reg>
    HAL_Delay (1);
 8000806:	2001      	movs	r0, #1
 8000808:	f003 fc6c 	bl	80040e4 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 800080c:	2102      	movs	r1, #2
 800080e:	2089      	movs	r0, #137	@ 0x89
 8000810:	f000 f9e0 	bl	8000bd4 <RA8875_write_reg>
    HAL_Delay (1);
 8000814:	2001      	movs	r0, #1
 8000816:	f003 fc65 	bl	80040e4 <HAL_Delay>
  }
}
 800081a:	bf00      	nop
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2400021c 	.word	0x2400021c

08000824 <RA8875_init>:
/*!
 Initialises the driver IC (clock setup, etc.)
 */
/**************************************************************************/
static void RA8875_init (uint16_t color_depth, uint16_t mcu_bus)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	80bb      	strh	r3, [r7, #4]

  RA885_pll_init ();
 8000834:	f7ff ffc6 	bl	80007c4 <RA885_pll_init>
  RA8875_write_reg (RA8875_SYSR, RA8875_SYSR_16BPP | RA8875_SYSR_MCU8);
 8000838:	210c      	movs	r1, #12
 800083a:	2010      	movs	r0, #16
 800083c:	f000 f9ca 	bl	8000bd4 <RA8875_write_reg>
  uint8_t vsync_pw;
  uint16_t vsync_nondisp;
  uint16_t vsync_start;

  /* Set the correct values for the display being used */
  if (_size == RA8875_480x80)
 8000840:	4b8e      	ldr	r3, [pc, #568]	@ (8000a7c <RA8875_init+0x258>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d113      	bne.n	8000870 <RA8875_init+0x4c>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000848:	2382      	movs	r3, #130	@ 0x82
 800084a:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 800084c:	230a      	movs	r3, #10
 800084e:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000850:	2308      	movs	r3, #8
 8000852:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 8000854:	2330      	movs	r3, #48	@ 0x30
 8000856:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 800085c:	2303      	movs	r3, #3
 800085e:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000860:	2308      	movs	r3, #8
 8000862:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 8000864:	230a      	movs	r3, #10
 8000866:	74bb      	strb	r3, [r7, #18]
    _voffset = 192; // This uses the bottom 80 pixels of a 272 pixel controller
 8000868:	4b85      	ldr	r3, [pc, #532]	@ (8000a80 <RA8875_init+0x25c>)
 800086a:	22c0      	movs	r2, #192	@ 0xc0
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e02e      	b.n	80008ce <RA8875_init+0xaa>
  }
  else if (_size == RA8875_480x128 || _size == RA8875_480x272)
 8000870:	4b82      	ldr	r3, [pc, #520]	@ (8000a7c <RA8875_init+0x258>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d003      	beq.n	8000880 <RA8875_init+0x5c>
 8000878:	4b80      	ldr	r3, [pc, #512]	@ (8000a7c <RA8875_init+0x258>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d113      	bne.n	80008a8 <RA8875_init+0x84>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000880:	2382      	movs	r3, #130	@ 0x82
 8000882:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000884:	230a      	movs	r3, #10
 8000886:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 800088c:	2330      	movs	r3, #48	@ 0x30
 800088e:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000894:	2303      	movs	r3, #3
 8000896:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 800089c:	230a      	movs	r3, #10
 800089e:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80008a0:	4b77      	ldr	r3, [pc, #476]	@ (8000a80 <RA8875_init+0x25c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e012      	b.n	80008ce <RA8875_init+0xaa>
  }
  else // (_size == RA8875_800x480)
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80008a8:	2381      	movs	r3, #129	@ 0x81
 80008aa:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 26;
 80008ac:	231a      	movs	r3, #26
 80008ae:	74fb      	strb	r3, [r7, #19]
    hsync_start = 32;
 80008b0:	2320      	movs	r3, #32
 80008b2:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 96;
 80008b4:	2360      	movs	r3, #96	@ 0x60
 80008b6:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 32;
 80008bc:	2320      	movs	r3, #32
 80008be:	823b      	strh	r3, [r7, #16]
    vsync_start = 23;
 80008c0:	2317      	movs	r3, #23
 80008c2:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80008c8:	4b6d      	ldr	r3, [pc, #436]	@ (8000a80 <RA8875_init+0x25c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Set color dept and MCU Bus
   */
  RA8875_write_reg (RA8875_SYSR, color_depth | mcu_bus);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	88bb      	ldrh	r3, [r7, #4]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	2010      	movs	r0, #16
 80008de:	f000 f979 	bl	8000bd4 <RA8875_write_reg>

  RA8875_write_reg (RA8875_PCSR, pixclk);
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	4619      	mov	r1, r3
 80008e6:	2004      	movs	r0, #4
 80008e8:	f000 f974 	bl	8000bd4 <RA8875_write_reg>
  HAL_Delay (1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 fbf9 	bl	80040e4 <HAL_Delay>

  /* Horizontal settings registers */
  RA8875_write_reg (RA8875_HDWR, (_width / 8) - 1); // H width: (HDWR + 1) * 8 = 480
 80008f2:	4b64      	ldr	r3, [pc, #400]	@ (8000a84 <RA8875_init+0x260>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	3b01      	subs	r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	2014      	movs	r0, #20
 8000904:	f000 f966 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDFTR, RA8875_HNDFTR_DE_HIGH + hsync_finetune);
 8000908:	7d3b      	ldrb	r3, [r7, #20]
 800090a:	4619      	mov	r1, r3
 800090c:	2015      	movs	r0, #21
 800090e:	f000 f961 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDR, (hsync_nondisp - hsync_finetune - 2) / 8); // H non-display: HNDR * 8 + HNDFTR + 2 = 10
 8000912:	7cfa      	ldrb	r2, [r7, #19]
 8000914:	7d3b      	ldrb	r3, [r7, #20]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	3b02      	subs	r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	da00      	bge.n	8000920 <RA8875_init+0xfc>
 800091e:	3307      	adds	r3, #7
 8000920:	10db      	asrs	r3, r3, #3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	2016      	movs	r0, #22
 8000928:	f000 f954 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSTR, hsync_start / 8 - 1); // Hsync start: (HSTR + 1)*8
 800092c:	7dbb      	ldrb	r3, [r7, #22]
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	3b01      	subs	r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	2017      	movs	r0, #23
 800093a:	f000 f94b 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HPWR,
 800093e:	7d7b      	ldrb	r3, [r7, #21]
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3b01      	subs	r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	2018      	movs	r0, #24
 800094c:	f000 f942 	bl	8000bd4 <RA8875_write_reg>
  RA8875_HPWR_LOW + (hsync_pw / 8 - 1)); // HSync pulse width = (HPWR+1) * 8

  /* Vertical settings registers */
  RA8875_write_reg (RA8875_VDHR0, (uint16_t) (_height - 1 + _voffset) & 0xFF);
 8000950:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <RA8875_init+0x264>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b4a      	ldr	r3, [pc, #296]	@ (8000a80 <RA8875_init+0x25c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	2019      	movs	r0, #25
 8000966:	f000 f935 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VDHR1, (uint16_t) (_height - 1 + _voffset) >> 8);
 800096a:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <RA8875_init+0x25c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4b45      	ldr	r3, [pc, #276]	@ (8000a88 <RA8875_init+0x264>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	3b01      	subs	r3, #1
 800097a:	b29b      	uxth	r3, r3
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	201a      	movs	r0, #26
 8000986:	f000 f925 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR0, vsync_nondisp - 1); // V non-display period = VNDR + 1
 800098a:	8a3b      	ldrh	r3, [r7, #16]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	201b      	movs	r0, #27
 8000996:	f000 f91d 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR1, vsync_nondisp >> 8);
 800099a:	8a3b      	ldrh	r3, [r7, #16]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4619      	mov	r1, r3
 80009a4:	201c      	movs	r0, #28
 80009a6:	f000 f915 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR0, vsync_start - 1); // Vsync start position = VSTR + 1
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	201d      	movs	r0, #29
 80009b6:	f000 f90d 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR1, vsync_start >> 8);
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4619      	mov	r1, r3
 80009c4:	201e      	movs	r0, #30
 80009c6:	f000 f905 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VPWR,
 80009ca:	7cbb      	ldrb	r3, [r7, #18]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	201f      	movs	r0, #31
 80009d4:	f000 f8fe 	bl	8000bd4 <RA8875_write_reg>
  RA8875_VPWR_LOW + vsync_pw - 1); // Vsync pulse width = VPWR + 1

  /* Set active window X */
  RA8875_write_reg (RA8875_HSAW0, 0); // horizontal start point
 80009d8:	2100      	movs	r1, #0
 80009da:	2030      	movs	r0, #48	@ 0x30
 80009dc:	f000 f8fa 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSAW1, 0);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2031      	movs	r0, #49	@ 0x31
 80009e4:	f000 f8f6 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW0, (uint16_t) (_width - 1) & 0xFF); // horizontal end point
 80009e8:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <RA8875_init+0x260>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	3b01      	subs	r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	2034      	movs	r0, #52	@ 0x34
 80009f6:	f000 f8ed 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW1, (uint16_t) (_width - 1) >> 8);
 80009fa:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <RA8875_init+0x260>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2035      	movs	r0, #53	@ 0x35
 8000a0c:	f000 f8e2 	bl	8000bd4 <RA8875_write_reg>

  /* Set active window Y */
  RA8875_write_reg (RA8875_VSAW0, 0 + _voffset); // vertical start point
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <RA8875_init+0x25c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	2032      	movs	r0, #50	@ 0x32
 8000a18:	f000 f8dc 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSAW1, 0 + _voffset);
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <RA8875_init+0x25c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	2033      	movs	r0, #51	@ 0x33
 8000a24:	f000 f8d6 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW0, (uint16_t) (_height - 1 + _voffset) & 0xFF); // vertical end point
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <RA8875_init+0x264>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <RA8875_init+0x25c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	3b01      	subs	r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2036      	movs	r0, #54	@ 0x36
 8000a3e:	f000 f8c9 	bl	8000bd4 <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW1, (uint16_t) (_height - 1 + _voffset) >> 8);
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <RA8875_init+0x25c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <RA8875_init+0x264>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2037      	movs	r0, #55	@ 0x37
 8000a5e:	f000 f8b9 	bl	8000bd4 <RA8875_write_reg>

  /* Clear the entire window */
  RA8875_write_reg (RA8875_MCLR, RA8875_MCLR_START | RA8875_MCLR_FULL);
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	208e      	movs	r0, #142	@ 0x8e
 8000a66:	f000 f8b5 	bl	8000bd4 <RA8875_write_reg>
  HAL_Delay (500);
 8000a6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a6e:	f003 fb39 	bl	80040e4 <HAL_Delay>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2400021c 	.word	0x2400021c
 8000a80:	24000224 	.word	0x24000224
 8000a84:	2400021e 	.word	0x2400021e
 8000a88:	24000220 	.word	0x24000220

08000a8c <RA8875_begin>:
 'RA8875_800x480' (5" and 7" displays)
 @return 1 if we reached the end 0 if some error occurs
 */
/**************************************************************************/
uint8_t RA8875_begin (GPIO_TypeDef *reset_port, uint16_t reset_pin, GPIO_TypeDef *wait_port, uint16_t wait_pin, RA8875_sizes_e s, RA8875_bpp_e bpp)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	817b      	strh	r3, [r7, #10]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]
  _reset_port = reset_port;
 8000aa0:	4a38      	ldr	r2, [pc, #224]	@ (8000b84 <RA8875_begin+0xf8>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6013      	str	r3, [r2, #0]
  _reset_pin = reset_pin;
 8000aa6:	4a38      	ldr	r2, [pc, #224]	@ (8000b88 <RA8875_begin+0xfc>)
 8000aa8:	897b      	ldrh	r3, [r7, #10]
 8000aaa:	8013      	strh	r3, [r2, #0]
  _size = s;
 8000aac:	4a37      	ldr	r2, [pc, #220]	@ (8000b8c <RA8875_begin+0x100>)
 8000aae:	7e3b      	ldrb	r3, [r7, #24]
 8000ab0:	7013      	strb	r3, [r2, #0]
  _wait_port = wait_port;
 8000ab2:	4a37      	ldr	r2, [pc, #220]	@ (8000b90 <RA8875_begin+0x104>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
  _wait_pin = wait_pin;
 8000ab8:	4a36      	ldr	r2, [pc, #216]	@ (8000b94 <RA8875_begin+0x108>)
 8000aba:	893b      	ldrh	r3, [r7, #8]
 8000abc:	8013      	strh	r3, [r2, #0]
  _color_depth = bpp;
 8000abe:	4a36      	ldr	r2, [pc, #216]	@ (8000b98 <RA8875_begin+0x10c>)
 8000ac0:	7f3b      	ldrb	r3, [r7, #28]
 8000ac2:	7013      	strb	r3, [r2, #0]
  //Wait 50 ms
  HAL_Delay (50);
 8000ac4:	2032      	movs	r0, #50	@ 0x32
 8000ac6:	f003 fb0d 	bl	80040e4 <HAL_Delay>

  if (_size == RA8875_480x80)
 8000aca:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <RA8875_begin+0x100>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d107      	bne.n	8000ae2 <RA8875_begin+0x56>
  {
    _width = 480;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <RA8875_begin+0x110>)
 8000ad4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ad8:	801a      	strh	r2, [r3, #0]
    _height = 80;
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <RA8875_begin+0x114>)
 8000adc:	2250      	movs	r2, #80	@ 0x50
 8000ade:	801a      	strh	r2, [r3, #0]
 8000ae0:	e027      	b.n	8000b32 <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x128)
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <RA8875_begin+0x100>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d107      	bne.n	8000afa <RA8875_begin+0x6e>
  {
    _width = 480;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <RA8875_begin+0x110>)
 8000aec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000af0:	801a      	strh	r2, [r3, #0]
    _height = 128;
 8000af2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <RA8875_begin+0x114>)
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	801a      	strh	r2, [r3, #0]
 8000af8:	e01b      	b.n	8000b32 <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x272)
 8000afa:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <RA8875_begin+0x100>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d108      	bne.n	8000b14 <RA8875_begin+0x88>
  {
    _width = 480;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <RA8875_begin+0x110>)
 8000b04:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000b08:	801a      	strh	r2, [r3, #0]
    _height = 272;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <RA8875_begin+0x114>)
 8000b0c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000b10:	801a      	strh	r2, [r3, #0]
 8000b12:	e00e      	b.n	8000b32 <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_800x480)
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <RA8875_begin+0x100>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d108      	bne.n	8000b2e <RA8875_begin+0xa2>
  {
    _width = 800;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <RA8875_begin+0x110>)
 8000b1e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000b22:	801a      	strh	r2, [r3, #0]
    _height = 480;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <RA8875_begin+0x114>)
 8000b26:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000b2a:	801a      	strh	r2, [r3, #0]
 8000b2c:	e001      	b.n	8000b32 <RA8875_begin+0xa6>
  }
  else
  {
    return 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e024      	b.n	8000b7c <RA8875_begin+0xf0>
  }
  _rotation = 0;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <RA8875_begin+0x118>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

  //Display hardware reset. Reset is active LOW
  LCD_RESET_OFF
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <RA8875_begin+0xfc>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <RA8875_begin+0xf8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0412      	lsls	r2, r2, #16
 8000b44:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f003 facc 	bl	80040e4 <HAL_Delay>
  LCD_RESET_ON
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <RA8875_begin+0xfc>)
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <RA8875_begin+0xf8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f003 fac4 	bl	80040e4 <HAL_Delay>
  RA8875_soft_reset ();
 8000b5c:	f7ff fe22 	bl	80007a4 <RA8875_soft_reset>
  HAL_Delay (10);
 8000b60:	200a      	movs	r0, #10
 8000b62:	f003 fabf 	bl	80040e4 <HAL_Delay>
  RA8875_init (((bpp == RA8875_8BPP) ? RA8875_SYSR_8BPP : RA8875_SYSR_16BPP), RA8875_SYSR_MCU8);
 8000b66:	7f3b      	ldrb	r3, [r7, #28]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <RA8875_begin+0xe4>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e000      	b.n	8000b72 <RA8875_begin+0xe6>
 8000b70:	230c      	movs	r3, #12
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe55 	bl	8000824 <RA8875_init>

  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000228 	.word	0x24000228
 8000b88:	2400022c 	.word	0x2400022c
 8000b8c:	2400021c 	.word	0x2400021c
 8000b90:	24000230 	.word	0x24000230
 8000b94:	24000234 	.word	0x24000234
 8000b98:	24000236 	.word	0x24000236
 8000b9c:	2400021e 	.word	0x2400021e
 8000ba0:	24000220 	.word	0x24000220
 8000ba4:	24000223 	.word	0x24000223

08000ba8 <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 8000bac:	bf00      	nop
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <RA8875_BUS_FREE+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <RA8875_BUS_FREE+0x28>)
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f7      	beq.n	8000bae <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	24000230 	.word	0x24000230
 8000bd0:	24000234 	.word	0x24000234

08000bd4 <RA8875_write_reg>:
 @param reg Register to write to
 @param val Value to write
 */
/**************************************************************************/
void RA8875_write_reg (uint8_t reg, uint8_t val)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
  RA8875_write_command (reg);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f894 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (val);
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f814 	bl	8000c1c <RA8875_write_data>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f883 	bl	8000d14 <RA8875_write_command>
  return RA8875_read_data ();
 8000c0e:	f000 f843 	bl	8000c98 <RA8875_read_data>
 8000c12:	4603      	mov	r3, r0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <RA8875_write_data+0x6c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	@ (8000c8c <RA8875_write_data+0x70>)
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff ffb6 	bl	8000ba8 <RA8875_BUS_FREE>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d01d      	beq.n	8000c7e <RA8875_write_data+0x62>
  }
  uint8_t rs_rw_info = 0b00000000;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4c:	4810      	ldr	r0, [pc, #64]	@ (8000c90 <RA8875_write_data+0x74>)
 8000c4e:	f003 fd51 	bl	80046f4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000c52:	f107 010f 	add.w	r1, r7, #15
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <RA8875_write_data+0x78>)
 8000c5e:	f007 fcb1 	bl	80085c4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 8000c62:	1df9      	adds	r1, r7, #7
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2201      	movs	r2, #1
 8000c6a:	480a      	ldr	r0, [pc, #40]	@ (8000c94 <RA8875_write_data+0x78>)
 8000c6c:	f007 fcaa 	bl	80085c4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c76:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <RA8875_write_data+0x74>)
 8000c78:	f003 fd3c 	bl	80046f4 <HAL_GPIO_WritePin>
 8000c7c:	e000      	b.n	8000c80 <RA8875_write_data+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 8000c7e:	bf00      	nop
}
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000230 	.word	0x24000230
 8000c8c:	24000234 	.word	0x24000234
 8000c90:	58020c00 	.word	0x58020c00
 8000c94:	2400045c 	.word	0x2400045c

08000c98 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <RA8875_read_data+0x6c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <RA8875_read_data+0x70>)
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d107      	bne.n	8000cc2 <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff78 	bl	8000ba8 <RA8875_BUS_FREE>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <RA8875_read_data+0x2a>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e01c      	b.n	8000cfc <RA8875_read_data+0x64>
  }
  uint8_t rs_rw_info = 0b01000000;
 8000cc2:	2340      	movs	r3, #64	@ 0x40
 8000cc4:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ccc:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <RA8875_read_data+0x74>)
 8000cce:	f003 fd11 	bl	80046f4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000cd2:	1db9      	adds	r1, r7, #6
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2201      	movs	r2, #1
 8000cda:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <RA8875_read_data+0x78>)
 8000cdc:	f007 fc72 	bl	80085c4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000ce0:	1df9      	adds	r1, r7, #7
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <RA8875_read_data+0x78>)
 8000cea:	f007 fe59 	bl	80089a0 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <RA8875_read_data+0x74>)
 8000cf6:	f003 fcfd 	bl	80046f4 <HAL_GPIO_WritePin>
  return data;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000230 	.word	0x24000230
 8000d08:	24000234 	.word	0x24000234
 8000d0c:	58020c00 	.word	0x58020c00
 8000d10:	2400045c 	.word	0x2400045c

08000d14 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <RA8875_write_command+0x6c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	4a17      	ldr	r2, [pc, #92]	@ (8000d84 <RA8875_write_command+0x70>)
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ff3a 	bl	8000ba8 <RA8875_BUS_FREE>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d01d      	beq.n	8000d76 <RA8875_write_command+0x62>
  }
  uint8_t rs_rw_info = 0b10000000;
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d44:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <RA8875_write_command+0x74>)
 8000d46:	f003 fcd5 	bl	80046f4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000d4a:	f107 010f 	add.w	r1, r7, #15
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2201      	movs	r2, #1
 8000d54:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <RA8875_write_command+0x78>)
 8000d56:	f007 fc35 	bl	80085c4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 8000d5a:	1df9      	adds	r1, r7, #7
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	2201      	movs	r2, #1
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <RA8875_write_command+0x78>)
 8000d64:	f007 fc2e 	bl	80085c4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <RA8875_write_command+0x74>)
 8000d70:	f003 fcc0 	bl	80046f4 <HAL_GPIO_WritePin>
 8000d74:	e000      	b.n	8000d78 <RA8875_write_command+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 8000d76:	bf00      	nop
}
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000230 	.word	0x24000230
 8000d84:	24000234 	.word	0x24000234
 8000d88:	58020c00 	.word	0x58020c00
 8000d8c:	2400045c 	.word	0x2400045c

08000d90 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000d96:	2040      	movs	r0, #64	@ 0x40
 8000d98:	f7ff ffbc 	bl	8000d14 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000d9c:	f7ff ff7c 	bl	8000c98 <RA8875_read_data>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000daa:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff34 	bl	8000c1c <RA8875_write_data>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff14 	bl	8000bfc <RA8875_read_reg>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 8000dd8:	7bfa      	ldrb	r2, [r7, #15]
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f3      	bne.n	8000dcc <RA8875_wait_poll+0x10>
 8000de4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <RA8875_apply_rotation_x+0x34>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d108      	bne.n	8000e14 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <RA8875_apply_rotation_x+0x38>)
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	80fb      	strh	r3, [r7, #6]
      break;
 8000e12:	bf00      	nop
  }

  return x;
 8000e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	24000223 	.word	0x24000223
 8000e28:	2400021e 	.word	0x2400021e

08000e2c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <RA8875_apply_rotation_y+0x40>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d108      	bne.n	8000e50 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <RA8875_apply_rotation_y+0x44>)
 8000e40:	881a      	ldrh	r2, [r3, #0]
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	80fb      	strh	r3, [r7, #6]
      break;
 8000e4e:	bf00      	nop
  }

  return y + _voffset;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <RA8875_apply_rotation_y+0x48>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b21b      	sxth	r3, r3
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	24000223 	.word	0x24000223
 8000e70:	24000220 	.word	0x24000220
 8000e74:	24000224 	.word	0x24000224

08000e78 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffa8 	bl	8000df0 <RA8875_apply_rotation_x>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ea4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffbf 	bl	8000e2c <RA8875_apply_rotation_y>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000eb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff9a 	bl	8000df0 <RA8875_apply_rotation_x>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000ec0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ffb1 	bl	8000e2c <RA8875_apply_rotation_y>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 8000ece:	2091      	movs	r0, #145	@ 0x91
 8000ed0:	f7ff ff20 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x);
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe9f 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x92);
 8000ede:	2092      	movs	r0, #146	@ 0x92
 8000ee0:	f7ff ff18 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee8:	121b      	asrs	r3, r3, #8
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe94 	bl	8000c1c <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000ef4:	2093      	movs	r0, #147	@ 0x93
 8000ef6:	f7ff ff0d 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y);
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe8c 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x94);
 8000f04:	2094      	movs	r0, #148	@ 0x94
 8000f06:	f7ff ff05 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000f0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0e:	121b      	asrs	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe81 	bl	8000c1c <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000f1a:	2095      	movs	r0, #149	@ 0x95
 8000f1c:	f7ff fefa 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (w);
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fe79 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x96);
 8000f2a:	2096      	movs	r0, #150	@ 0x96
 8000f2c:	f7ff fef2 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f34:	121b      	asrs	r3, r3, #8
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fe6e 	bl	8000c1c <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000f40:	2097      	movs	r0, #151	@ 0x97
 8000f42:	f7ff fee7 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (h);
 8000f46:	883b      	ldrh	r3, [r7, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fe66 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x98);
 8000f50:	2098      	movs	r0, #152	@ 0x98
 8000f52:	f7ff fedf 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000f56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f5a:	121b      	asrs	r3, r3, #8
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe5b 	bl	8000c1c <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000f66:	2063      	movs	r0, #99	@ 0x63
 8000f68:	f7ff fed4 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000f6c:	8b3b      	ldrh	r3, [r7, #24]
 8000f6e:	0adb      	lsrs	r3, r3, #11
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe51 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f7a:	2064      	movs	r0, #100	@ 0x64
 8000f7c:	f7ff feca 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000f80:	8b3b      	ldrh	r3, [r7, #24]
 8000f82:	115b      	asrs	r3, r3, #5
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe45 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f92:	2065      	movs	r0, #101	@ 0x65
 8000f94:	f7ff febe 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe3a 	bl	8000c1c <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000fa8:	2090      	movs	r0, #144	@ 0x90
 8000faa:	f7ff feb3 	bl	8000d14 <RA8875_write_command>
  if (filled)
 8000fae:	7f3b      	ldrb	r3, [r7, #28]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000fb4:	20b0      	movs	r0, #176	@ 0xb0
 8000fb6:	f7ff fe31 	bl	8000c1c <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 8000fba:	e002      	b.n	8000fc2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 8000fbc:	2090      	movs	r0, #144	@ 0x90
 8000fbe:	f7ff fe2d 	bl	8000c1c <RA8875_write_data>
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}

08000fca <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 8000fca:	b590      	push	{r4, r7, lr}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4623      	mov	r3, r4
 8000fda:	80fb      	strh	r3, [r7, #6]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	80bb      	strh	r3, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff feff 	bl	8000df0 <RA8875_apply_rotation_x>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 8000ff6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff16 	bl	8000e2c <RA8875_apply_rotation_y>
 8001000:	4603      	mov	r3, r0
 8001002:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 8001004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fef1 	bl	8000df0 <RA8875_apply_rotation_x>
 800100e:	4603      	mov	r3, r0
 8001010:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 8001012:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff08 	bl	8000e2c <RA8875_apply_rotation_y>
 800101c:	4603      	mov	r3, r0
 800101e:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8001020:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fee3 	bl	8000df0 <RA8875_apply_rotation_x>
 800102a:	4603      	mov	r3, r0
 800102c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800102e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fefa 	bl	8000e2c <RA8875_apply_rotation_y>
 8001038:	4603      	mov	r3, r0
 800103a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800103c:	2091      	movs	r0, #145	@ 0x91
 800103e:	f7ff fe69 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x0);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fde8 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x92);
 800104c:	2092      	movs	r0, #146	@ 0x92
 800104e:	f7ff fe61 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	121b      	asrs	r3, r3, #8
 8001058:	b21b      	sxth	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fddd 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x93);
 8001062:	2093      	movs	r0, #147	@ 0x93
 8001064:	f7ff fe56 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y0);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fdd5 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x94);
 8001072:	2094      	movs	r0, #148	@ 0x94
 8001074:	f7ff fe4e 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8001078:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800107c:	121b      	asrs	r3, r3, #8
 800107e:	b21b      	sxth	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fdca 	bl	8000c1c <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8001088:	2095      	movs	r0, #149	@ 0x95
 800108a:	f7ff fe43 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x1);
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fdc2 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x96);
 8001098:	2096      	movs	r0, #150	@ 0x96
 800109a:	f7ff fe3b 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800109e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a2:	121b      	asrs	r3, r3, #8
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fdb7 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x97);
 80010ae:	2097      	movs	r0, #151	@ 0x97
 80010b0:	f7ff fe30 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y1);
 80010b4:	883b      	ldrh	r3, [r7, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fdaf 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x98);
 80010be:	2098      	movs	r0, #152	@ 0x98
 80010c0:	f7ff fe28 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80010c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010c8:	121b      	asrs	r3, r3, #8
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fda4 	bl	8000c1c <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80010d4:	20a9      	movs	r0, #169	@ 0xa9
 80010d6:	f7ff fe1d 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x2);
 80010da:	8b3b      	ldrh	r3, [r7, #24]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fd9c 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xAA);
 80010e4:	20aa      	movs	r0, #170	@ 0xaa
 80010e6:	f7ff fe15 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80010ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010ee:	121b      	asrs	r3, r3, #8
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd91 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xAB);
 80010fa:	20ab      	movs	r0, #171	@ 0xab
 80010fc:	f7ff fe0a 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y2);
 8001100:	8bbb      	ldrh	r3, [r7, #28]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fd89 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xAC);
 800110a:	20ac      	movs	r0, #172	@ 0xac
 800110c:	f7ff fe02 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 8001110:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001114:	121b      	asrs	r3, r3, #8
 8001116:	b21b      	sxth	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fd7e 	bl	8000c1c <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8001120:	2063      	movs	r0, #99	@ 0x63
 8001122:	f7ff fdf7 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8001126:	8c3b      	ldrh	r3, [r7, #32]
 8001128:	0adb      	lsrs	r3, r3, #11
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd74 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x64);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f7ff fded 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	115b      	asrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd68 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x65);
 800114c:	2065      	movs	r0, #101	@ 0x65
 800114e:	f7ff fde1 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8001152:	8c3b      	ldrh	r3, [r7, #32]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fd5d 	bl	8000c1c <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8001162:	2090      	movs	r0, #144	@ 0x90
 8001164:	f7ff fdd6 	bl	8000d14 <RA8875_write_command>
  if (filled)
 8001168:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8001170:	20a1      	movs	r0, #161	@ 0xa1
 8001172:	f7ff fd53 	bl	8000c1c <RA8875_write_data>
 8001176:	e002      	b.n	800117e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8001178:	2081      	movs	r0, #129	@ 0x81
 800117a:	f7ff fd4f 	bl	8000c1c <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800117e:	2180      	movs	r1, #128	@ 0x80
 8001180:	2090      	movs	r0, #144	@ 0x90
 8001182:	f7ff fe1b 	bl	8000dbc <RA8875_wait_poll>
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800118e:	b590      	push	{r4, r7, lr}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	4604      	mov	r4, r0
 8001196:	4608      	mov	r0, r1
 8001198:	4611      	mov	r1, r2
 800119a:	461a      	mov	r2, r3
 800119c:	4623      	mov	r3, r4
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	4603      	mov	r3, r0
 80011a2:	80bb      	strh	r3, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 80011ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe1d 	bl	8000df0 <RA8875_apply_rotation_x>
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 80011ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe34 	bl	8000e2c <RA8875_apply_rotation_y>
 80011c4:	4603      	mov	r3, r0
 80011c6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80011c8:	20a5      	movs	r0, #165	@ 0xa5
 80011ca:	f7ff fda3 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fd22 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA6);
 80011d8:	20a6      	movs	r0, #166	@ 0xa6
 80011da:	f7ff fd9b 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80011de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e2:	121b      	asrs	r3, r3, #8
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd17 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA7);
 80011ee:	20a7      	movs	r0, #167	@ 0xa7
 80011f0:	f7ff fd90 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd0f 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA8);
 80011fe:	20a8      	movs	r0, #168	@ 0xa8
 8001200:	f7ff fd88 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 8001204:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001208:	121b      	asrs	r3, r3, #8
 800120a:	b21b      	sxth	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd04 	bl	8000c1c <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 8001214:	20a1      	movs	r0, #161	@ 0xa1
 8001216:	f7ff fd7d 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (longAxis);
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fcfc 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA2);
 8001224:	20a2      	movs	r0, #162	@ 0xa2
 8001226:	f7ff fd75 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 800122a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b21b      	sxth	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fcf1 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA3);
 800123a:	20a3      	movs	r0, #163	@ 0xa3
 800123c:	f7ff fd6a 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8001240:	883b      	ldrh	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fce9 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA4);
 800124a:	20a4      	movs	r0, #164	@ 0xa4
 800124c:	f7ff fd62 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8001250:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b21b      	sxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fcde 	bl	8000c1c <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8001260:	2063      	movs	r0, #99	@ 0x63
 8001262:	f7ff fd57 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8001266:	8b3b      	ldrh	r3, [r7, #24]
 8001268:	0adb      	lsrs	r3, r3, #11
 800126a:	b29b      	uxth	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcd4 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x64);
 8001274:	2064      	movs	r0, #100	@ 0x64
 8001276:	f7ff fd4d 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800127a:	8b3b      	ldrh	r3, [r7, #24]
 800127c:	115b      	asrs	r3, r3, #5
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcc8 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x65);
 800128c:	2065      	movs	r0, #101	@ 0x65
 800128e:	f7ff fd41 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8001292:	8b3b      	ldrh	r3, [r7, #24]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fcbd 	bl	8000c1c <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 80012a2:	20a0      	movs	r0, #160	@ 0xa0
 80012a4:	f7ff fd36 	bl	8000d14 <RA8875_write_command>
  if (filled)
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 80012ae:	20c0      	movs	r0, #192	@ 0xc0
 80012b0:	f7ff fcb4 	bl	8000c1c <RA8875_write_data>
 80012b4:	e002      	b.n	80012bc <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 80012b6:	2080      	movs	r0, #128	@ 0x80
 80012b8:	f7ff fcb0 	bl	8000c1c <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	20a0      	movs	r0, #160	@ 0xa0
 80012c0:	f7ff fd7c 	bl	8000dbc <RA8875_wait_poll>
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd7e 	bl	8000df0 <RA8875_apply_rotation_x>
 80012f4:	4603      	mov	r3, r0
 80012f6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 80012f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fd95 	bl	8000e2c <RA8875_apply_rotation_y>
 8001302:	4603      	mov	r3, r0
 8001304:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8001306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd70 	bl	8000df0 <RA8875_apply_rotation_x>
 8001310:	4603      	mov	r3, r0
 8001312:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8001314:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd87 	bl	8000e2c <RA8875_apply_rotation_y>
 800131e:	4603      	mov	r3, r0
 8001320:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8001322:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800132a:	429a      	cmp	r2, r3
 800132c:	dd05      	ble.n	800133a <roundRectHelper+0x6e>
 800132e:	1cba      	adds	r2, r7, #2
 8001330:	1dbb      	adds	r3, r7, #6
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fa1f 	bl	8000778 <swap>
  if (y > h) swap (&y, &h);
 800133a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800133e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001342:	429a      	cmp	r2, r3
 8001344:	dd05      	ble.n	8001352 <roundRectHelper+0x86>
 8001346:	463a      	mov	r2, r7
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fa13 	bl	8000778 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8001352:	2091      	movs	r0, #145	@ 0x91
 8001354:	f7ff fcde 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x);
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fc5c 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x92);
 8001364:	2092      	movs	r0, #146	@ 0x92
 8001366:	f7ff fcd5 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	121b      	asrs	r3, r3, #8
 8001370:	b21b      	sxth	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fc51 	bl	8000c1c <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 800137a:	2093      	movs	r0, #147	@ 0x93
 800137c:	f7ff fcca 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y);
 8001380:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc48 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x94);
 800138c:	2094      	movs	r0, #148	@ 0x94
 800138e:	f7ff fcc1 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8001392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001396:	121b      	asrs	r3, r3, #8
 8001398:	b21b      	sxth	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc3d 	bl	8000c1c <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80013a2:	2095      	movs	r0, #149	@ 0x95
 80013a4:	f7ff fcb6 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (w);
 80013a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc34 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x96);
 80013b4:	2096      	movs	r0, #150	@ 0x96
 80013b6:	f7ff fcad 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 80013ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013be:	121b      	asrs	r3, r3, #8
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc29 	bl	8000c1c <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 80013ca:	2097      	movs	r0, #151	@ 0x97
 80013cc:	f7ff fca2 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (h);
 80013d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc20 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x98);
 80013dc:	2098      	movs	r0, #152	@ 0x98
 80013de:	f7ff fc99 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 80013e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013e6:	121b      	asrs	r3, r3, #8
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc15 	bl	8000c1c <RA8875_write_data>

  RA8875_write_command (0xA1);
 80013f2:	20a1      	movs	r0, #161	@ 0xa1
 80013f4:	f7ff fc8e 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (r);
 80013f8:	8b3b      	ldrh	r3, [r7, #24]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fc0d 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA2);
 8001402:	20a2      	movs	r0, #162	@ 0xa2
 8001404:	f7ff fc86 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8001408:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800140c:	121b      	asrs	r3, r3, #8
 800140e:	b21b      	sxth	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fc02 	bl	8000c1c <RA8875_write_data>

  RA8875_write_command (0xA3);
 8001418:	20a3      	movs	r0, #163	@ 0xa3
 800141a:	f7ff fc7b 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (r);
 800141e:	8b3b      	ldrh	r3, [r7, #24]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fbfa 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0xA4);
 8001428:	20a4      	movs	r0, #164	@ 0xa4
 800142a:	f7ff fc73 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 800142e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	b21b      	sxth	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fbef 	bl	8000c1c <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 800143e:	2063      	movs	r0, #99	@ 0x63
 8001440:	f7ff fc68 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8001444:	8bbb      	ldrh	r3, [r7, #28]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	b29b      	uxth	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fbe5 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x64);
 8001452:	2064      	movs	r0, #100	@ 0x64
 8001454:	f7ff fc5e 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8001458:	8bbb      	ldrh	r3, [r7, #28]
 800145a:	115b      	asrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fbd9 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x65);
 800146a:	2065      	movs	r0, #101	@ 0x65
 800146c:	f7ff fc52 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8001470:	8bbb      	ldrh	r3, [r7, #28]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fbce 	bl	8000c1c <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8001480:	20a0      	movs	r0, #160	@ 0xa0
 8001482:	f7ff fc47 	bl	8000d14 <RA8875_write_command>
  if (filled)
 8001486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 800148e:	20e0      	movs	r0, #224	@ 0xe0
 8001490:	f7ff fbc4 	bl	8000c1c <RA8875_write_data>
 8001494:	e002      	b.n	800149c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8001496:	20a0      	movs	r0, #160	@ 0xa0
 8001498:	f7ff fbc0 	bl	8000c1c <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	20a0      	movs	r0, #160	@ 0xa0
 80014a0:	f7ff fc8c 	bl	8000dbc <RA8875_wait_poll>
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}

080014ac <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4623      	mov	r3, r4
 80014bc:	80fb      	strh	r3, [r7, #6]
 80014be:	4603      	mov	r3, r0
 80014c0:	80bb      	strh	r3, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]
 80014c6:	4613      	mov	r3, r2
 80014c8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21c      	sxth	r4, r3
 80014d8:	88ba      	ldrh	r2, [r7, #4]
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	8b3b      	ldrh	r3, [r7, #24]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	4622      	mov	r2, r4
 80014fa:	f7ff fcbd 	bl	8000e78 <rectHelper>
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
	...

08001508 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af02      	add	r7, sp, #8
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <RA8875_fill_screen+0x38>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3b01      	subs	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <RA8875_fill_screen+0x3c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	b219      	sxth	r1, r3
 8001526:	2301      	movs	r3, #1
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	460b      	mov	r3, r1
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fca0 	bl	8000e78 <rectHelper>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2400021e 	.word	0x2400021e
 8001544:	24000220 	.word	0x24000220

08001548 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af04      	add	r7, sp, #16
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4623      	mov	r3, r4
 8001558:	80fb      	strh	r3, [r7, #6]
 800155a:	4603      	mov	r3, r0
 800155c:	80bb      	strh	r3, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	807b      	strh	r3, [r7, #2]
 8001562:	4613      	mov	r3, r2
 8001564:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8001566:	f9b7 4000 	ldrsh.w	r4, [r7]
 800156a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800156e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001572:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001576:	2301      	movs	r3, #1
 8001578:	9303      	str	r3, [sp, #12]
 800157a:	8c3b      	ldrh	r3, [r7, #32]
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4623      	mov	r3, r4
 800158c:	f7ff fd1d 	bl	8000fca <triangleHelper>
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}

08001598 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af02      	add	r7, sp, #8
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4623      	mov	r3, r4
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4603      	mov	r3, r0
 80015ac:	80bb      	strh	r3, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 80015b6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80015ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c6:	2301      	movs	r3, #1
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	8b3b      	ldrh	r3, [r7, #24]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4623      	mov	r3, r4
 80015d0:	f7ff fddd 	bl	800118e <ellipseHelper>
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}

080015dc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af04      	add	r7, sp, #16
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	4413      	add	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	b21c      	sxth	r4, r3
 8001604:	88ba      	ldrh	r2, [r7, #4]
 8001606:	883b      	ldrh	r3, [r7, #0]
 8001608:	4413      	add	r3, r2
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001612:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	8bbb      	ldrh	r3, [r7, #28]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	4622      	mov	r2, r4
 8001628:	f7ff fe50 	bl	80012cc <roundRectHelper>
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	0000      	movs	r0, r0
	...

08001638 <RA8875_draw_hexagon>:

/**************************************************************************/
void RA8875_draw_hexagon(int16_t centerX, int16_t centerY, int16_t radius, uint16_t color) {
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	ed2d 8b04 	vpush	{d8-d9}
 800163e:	b099      	sub	sp, #100	@ 0x64
 8001640:	af04      	add	r7, sp, #16
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	4603      	mov	r3, r0
 8001650:	80bb      	strh	r3, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	807b      	strh	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	803b      	strh	r3, [r7, #0]
    int x[6], y[6];
    for (int i = 0; i < 6; ++i) {
 800165a:	2300      	movs	r3, #0
 800165c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800165e:	e051      	b.n	8001704 <RA8875_draw_hexagon+0xcc>
        double angle = 2 * M_PI * i / 6;
 8001660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800166a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001798 <RA8875_draw_hexagon+0x160>
 800166e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001672:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 8001676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800167a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        x[i] = centerX + radius * cos(angle);
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800168a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8001696:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800169a:	f00e faa5 	bl	800fbe8 <cos>
 800169e:	eeb0 7b40 	vmov.f64	d7, d0
 80016a2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016ae:	ee17 2a90 	vmov	r2, s15
 80016b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	3350      	adds	r3, #80	@ 0x50
 80016b8:	443b      	add	r3, r7
 80016ba:	f843 2c30 	str.w	r2, [r3, #-48]
        y[i] = centerY + radius * sin(angle);
 80016be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80016ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80016d6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80016da:	f00e fad1 	bl	800fc80 <sin>
 80016de:	eeb0 7b40 	vmov.f64	d7, d0
 80016e2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80016e6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3350      	adds	r3, #80	@ 0x50
 80016f8:	443b      	add	r3, r7
 80016fa:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < 6; ++i) {
 80016fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001700:	3301      	adds	r3, #1
 8001702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001706:	2b05      	cmp	r3, #5
 8001708:	ddaa      	ble.n	8001660 <RA8875_draw_hexagon+0x28>
    }

    for (int i = 0; i < 6; ++i) {
 800170a:	2300      	movs	r3, #0
 800170c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800170e:	e038      	b.n	8001782 <RA8875_draw_hexagon+0x14a>
        int next = (i + 1) % 6;
 8001710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <RA8875_draw_hexagon+0x168>)
 8001716:	fb83 3102 	smull	r3, r1, r3, r2
 800171a:	17d3      	asrs	r3, r2, #31
 800171c:	1ac9      	subs	r1, r1, r3
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	647b      	str	r3, [r7, #68]	@ 0x44
        // Draw triangles to form the hexagon
        RA8875_draw_fill_triangle(centerX, centerY, x[i], y[i], x[next], y[next], color);
 800172a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	3350      	adds	r3, #80	@ 0x50
 8001730:	443b      	add	r3, r7
 8001732:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001736:	b21d      	sxth	r5, r3
 8001738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	3350      	adds	r3, #80	@ 0x50
 800173e:	443b      	add	r3, r7
 8001740:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001744:	b21e      	sxth	r6, r3
 8001746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	3350      	adds	r3, #80	@ 0x50
 800174c:	443b      	add	r3, r7
 800174e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001752:	b21a      	sxth	r2, r3
 8001754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	3350      	adds	r3, #80	@ 0x50
 800175a:	443b      	add	r3, r7
 800175c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001760:	b21b      	sxth	r3, r3
 8001762:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001766:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800176a:	8839      	ldrh	r1, [r7, #0]
 800176c:	9102      	str	r1, [sp, #8]
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	9200      	str	r2, [sp, #0]
 8001772:	4633      	mov	r3, r6
 8001774:	462a      	mov	r2, r5
 8001776:	4621      	mov	r1, r4
 8001778:	f7ff fee6 	bl	8001548 <RA8875_draw_fill_triangle>
    for (int i = 0; i < 6; ++i) {
 800177c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800177e:	3301      	adds	r3, #1
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001784:	2b05      	cmp	r3, #5
 8001786:	ddc3      	ble.n	8001710 <RA8875_draw_hexagon+0xd8>
    }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3754      	adds	r7, #84	@ 0x54
 800178e:	46bd      	mov	sp, r7
 8001790:	ecbd 8b04 	vpop	{d8-d9}
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001796:	bf00      	nop
 8001798:	54442d18 	.word	0x54442d18
 800179c:	401921fb 	.word	0x401921fb
 80017a0:	2aaaaaab 	.word	0x2aaaaaab

080017a4 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 80017aa:	2040      	movs	r0, #64	@ 0x40
 80017ac:	f7ff fab2 	bl	8000d14 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 80017b0:	f7ff fa72 	bl	8000c98 <RA8875_read_data>
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017be:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fa2a 	bl	8000c1c <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 80017c8:	2021      	movs	r0, #33	@ 0x21
 80017ca:	f7ff faa3 	bl	8000d14 <RA8875_write_command>
  temp = RA8875_read_data ();
 80017ce:	f7ff fa63 	bl	8000c98 <RA8875_read_data>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 80017dc:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fa1b 	bl	8000c1c <RA8875_write_data>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	460a      	mov	r2, r1
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	4613      	mov	r3, r2
 80017fc:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff faf4 	bl	8000df0 <RA8875_apply_rotation_x>
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 800180c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fb0b 	bl	8000e2c <RA8875_apply_rotation_y>
 8001816:	4603      	mov	r3, r0
 8001818:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 800181a:	202a      	movs	r0, #42	@ 0x2a
 800181c:	f7ff fa7a 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f9f9 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x2B);
 800182a:	202b      	movs	r0, #43	@ 0x2b
 800182c:	f7ff fa72 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	b29b      	uxth	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f9ef 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x2C);
 800183e:	202c      	movs	r0, #44	@ 0x2c
 8001840:	f7ff fa68 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f9e7 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x2D);
 800184e:	202d      	movs	r0, #45	@ 0x2d
 8001850:	f7ff fa60 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f9dd 	bl	8000c1c <RA8875_write_data>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	460a      	mov	r2, r1
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4613      	mov	r3, r2
 8001878:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 800187a:	2063      	movs	r0, #99	@ 0x63
 800187c:	f7ff fa4a 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	0adb      	lsrs	r3, r3, #11
 8001884:	b29b      	uxth	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9c7 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x64);
 800188e:	2064      	movs	r0, #100	@ 0x64
 8001890:	f7ff fa40 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	115b      	asrs	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f9bb 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x65);
 80018a6:	2065      	movs	r0, #101	@ 0x65
 80018a8:	f7ff fa34 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9b0 	bl	8000c1c <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 80018bc:	2060      	movs	r0, #96	@ 0x60
 80018be:	f7ff fa29 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	0adb      	lsrs	r3, r3, #11
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f9a6 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x61);
 80018d0:	2061      	movs	r0, #97	@ 0x61
 80018d2:	f7ff fa1f 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	115b      	asrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f99a 	bl	8000c1c <RA8875_write_data>
  RA8875_write_command (0x62);
 80018e8:	2062      	movs	r0, #98	@ 0x62
 80018ea:	f7ff fa13 	bl	8000d14 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f98f 	bl	8000c1c <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 80018fe:	2022      	movs	r0, #34	@ 0x22
 8001900:	f7ff fa08 	bl	8000d14 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8001904:	f7ff f9c8 	bl	8000c98 <RA8875_read_data>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001912:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f980 	bl	8000c1c <RA8875_write_data>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d901      	bls.n	8001938 <RA8875_text_scale+0x14>
 8001934:	2303      	movs	r3, #3
 8001936:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8001938:	2022      	movs	r0, #34	@ 0x22
 800193a:	f7ff f9eb 	bl	8000d14 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800193e:	f7ff f9ab 	bl	8000c98 <RA8875_read_data>
 8001942:	4603      	mov	r3, r0
 8001944:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	f023 030f 	bic.w	r3, r3, #15
 800194c:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4313      	orrs	r3, r2
 800195a:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f95c 	bl	8000c1c <RA8875_write_data>

  _textScale = scale;
 8001964:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <RA8875_text_scale+0x50>)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	7013      	strb	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24000222 	.word	0x24000222

08001978 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <RA8875_text_write+0x1c>
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fca8 	bl	80002e0 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001994:	2002      	movs	r0, #2
 8001996:	f7ff f9bd 	bl	8000d14 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	81fb      	strh	r3, [r7, #14]
 800199e:	e010      	b.n	80019c2 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f937 	bl	8000c1c <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <RA8875_text_write+0x5c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <RA8875_text_write+0x44>
 80019b6:	2001      	movs	r0, #1
 80019b8:	f002 fb94 	bl	80040e4 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	3301      	adds	r3, #1
 80019c0:	81fb      	strh	r3, [r7, #14]
 80019c2:	89fa      	ldrh	r2, [r7, #14]
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3ea      	bcc.n	80019a0 <RA8875_text_write+0x28>
  }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24000222 	.word	0x24000222

080019d8 <RA8875_pwm1_out>:
 Set the duty cycle of the PWM 1 Clock
 @param p The duty Cycle (0-255)
 */
/**************************************************************************/
void RA8875_pwm1_out (uint8_t p)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_reg (RA8875_P1DCR, p);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4619      	mov	r1, r3
 80019e6:	208b      	movs	r0, #139	@ 0x8b
 80019e8:	f7ff f8f4 	bl	8000bd4 <RA8875_write_reg>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <RA8875_pwm1_config>:
 @param on Whether to enable the clock
 @param clock The Clock Divider
 */
/**************************************************************************/
void RA8875_pwm1_config (uint8_t on, uint8_t clock)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
  if (on)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <RA8875_pwm1_config+0x32>
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_ENABLE | (clock & 0xF));
 8001a0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	208a      	movs	r0, #138	@ 0x8a
 8001a20:	f7ff f8d8 	bl	8000bd4 <RA8875_write_reg>
  }
  else
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
  }
}
 8001a24:	e007      	b.n	8001a36 <RA8875_pwm1_config+0x42>
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	208a      	movs	r0, #138	@ 0x8a
 8001a32:	f7ff f8cf 	bl	8000bd4 <RA8875_write_reg>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <RA8875_display_on>:
 Turns the display on or off
 @param on Whether to turn the display on or not
 */
/**************************************************************************/
void RA8875_display_on (uint8_t on)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  if (on) RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <RA8875_display_on+0x1a>
 8001a4e:	2180      	movs	r1, #128	@ 0x80
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff f8bf 	bl	8000bd4 <RA8875_write_reg>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
}
 8001a56:	e003      	b.n	8001a60 <RA8875_display_on+0x22>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff f8ba 	bl	8000bd4 <RA8875_write_reg>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <parse_word_data>:
  }

  return res;
}

void parse_word_data(char* line, WordVector* word_vector) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]

    //extract the word
    char* token = strtok(line, ",");
 8001a72:	491a      	ldr	r1, [pc, #104]	@ (8001adc <parse_word_data+0x74>)
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f00b ffeb 	bl	800da50 <strtok>
 8001a7a:	60b8      	str	r0, [r7, #8]
    if (token != NULL) {
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <parse_word_data+0x2c>
        strncpy(word_vector->word, token, MAX_WORD_LENGTH - 1);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2205      	movs	r2, #5
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00b ffce 	bl	800da2a <strncpy>
        word_vector->word[MAX_WORD_LENGTH - 1] = '\0';
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	715a      	strb	r2, [r3, #5]
    }

    //extract word vector
    for (int i = 0; i < VECTOR_SIZE; i++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e018      	b.n	8001acc <parse_word_data+0x64>
        token = strtok(NULL, ",");
 8001a9a:	4910      	ldr	r1, [pc, #64]	@ (8001adc <parse_word_data+0x74>)
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f00b ffd7 	bl	800da50 <strtok>
 8001aa2:	60b8      	str	r0, [r7, #8]
        if (token != NULL) {
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <parse_word_data+0x5e>
            word_vector->vector[i] = atof(token);
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	f00b f8bd 	bl	800cc2a <atof>
 8001ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ab4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3302      	adds	r3, #2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < VECTOR_SIZE; i++) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	dde3      	ble.n	8001a9a <parse_word_data+0x32>
        }
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08010830 	.word	0x08010830

08001ae0 <get_word_matrix>:

void get_word_matrix(WordVector* word_matrix)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001aec:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001af0:	6018      	str	r0, [r3, #0]
	HAL_Delay(1000);
 8001af2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af6:	f002 faf5 	bl	80040e4 <HAL_Delay>
    FATFS fs;
    FIL file;
    FRESULT fr;
    char line[MAX_LINE_LENGTH];

    fr = f_mount(&fs, "", 1);
 8001afa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001afe:	2201      	movs	r2, #1
 8001b00:	492d      	ldr	r1, [pc, #180]	@ (8001bb8 <get_word_matrix+0xd8>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00a fc10 	bl	800c328 <f_mount>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 34eb 	strb.w	r3, [r7, #1259]	@ 0x4eb
    if (fr != FR_OK) {		//1 means now
 8001b0e:	f897 34eb 	ldrb.w	r3, [r7, #1259]	@ 0x4eb
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d148      	bne.n	8001ba8 <get_word_matrix+0xc8>
    	return;
    }

    fr = f_open(&file, "worddata.csv", FA_READ);
 8001b16:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4927      	ldr	r1, [pc, #156]	@ (8001bbc <get_word_matrix+0xdc>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00a fc48 	bl	800c3b4 <f_open>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f887 34eb 	strb.w	r3, [r7, #1259]	@ 0x4eb
    if (fr != FR_OK) {
 8001b2a:	f897 34eb 	ldrb.w	r3, [r7, #1259]	@ 0x4eb
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d13c      	bne.n	8001bac <get_word_matrix+0xcc>
    	return;
    }

    //read and discard the first line (header and BOM line)
    f_gets(line, sizeof(line), &file);
 8001b32:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00a ffda 	bl	800caf6 <f_gets>

    // Read lines from the file and parse them
    for(int i = 0; i < NUM_WORDS; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001b48:	e01f      	b.n	8001b8a <get_word_matrix+0xaa>
    	f_gets(line, sizeof(line), &file);
 8001b4a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2180      	movs	r1, #128	@ 0x80
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a ffce 	bl	800caf6 <f_gets>
        parse_word_data(line, &word_matrix[i]);
 8001b5a:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	@ 0x4ec
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	461a      	mov	r2, r3
 8001b68:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b6c:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	441a      	add	r2, r3
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff74 	bl	8001a68 <parse_word_data>
    for(int i = 0; i < NUM_WORDS; i++) {
 8001b80:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 8001b84:	3301      	adds	r3, #1
 8001b86:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001b8a:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	dddb      	ble.n	8001b4a <get_word_matrix+0x6a>
//
//        totalFloats += numFloats; // Keep track of the total floats processed
//    }

    //close the file
    f_close(&file);
 8001b92:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00a ff83 	bl	800caa2 <f_close>

    //unmount the SD card
    f_mount(NULL, "", 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4906      	ldr	r1, [pc, #24]	@ (8001bb8 <get_word_matrix+0xd8>)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f00a fbc1 	bl	800c328 <f_mount>

    return;
 8001ba6:	e002      	b.n	8001bae <get_word_matrix+0xce>
    	return;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <get_word_matrix+0xce>
    	return;
 8001bac:	bf00      	nop
}
 8001bae:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08010834 	.word	0x08010834
 8001bbc:	08010838 	.word	0x08010838

08001bc0 <show_menu>:
	RA8875_fill_screen(RA8875_BLACK);

	return;
}

void show_menu(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af04      	add	r7, sp, #16
	mode = GAME_MODE_MENU;
 8001bc6:	4bd9      	ldr	r3, [pc, #868]	@ (8001f2c <show_menu+0x36c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]

	//background
	RA8875_pwm1_out(current_b);
 8001bcc:	4bd8      	ldr	r3, [pc, #864]	@ (8001f30 <show_menu+0x370>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff00 	bl	80019d8 <RA8875_pwm1_out>
	RA8875_fill_screen(RA8875_BLUE);
 8001bd8:	201f      	movs	r0, #31
 8001bda:	f7ff fc95 	bl	8001508 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001bde:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	230a      	movs	r3, #10
 8001be6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bea:	215a      	movs	r1, #90	@ 0x5a
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff fc5d 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bfc:	2164      	movs	r1, #100	@ 0x64
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fc54 	bl	80014ac <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8001c04:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c1a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001c1e:	21b4      	movs	r1, #180	@ 0xb4
 8001c20:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001c24:	f7ff fc90 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8001c28:	231f      	movs	r3, #31
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c3c:	f240 22da 	movw	r2, #730	@ 0x2da
 8001c40:	21b4      	movs	r1, #180	@ 0xb4
 8001c42:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8001c46:	f7ff fc7f 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 8001c4a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	f240 238a 	movw	r3, #650	@ 0x28a
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c60:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001c64:	21b4      	movs	r1, #180	@ 0xb4
 8001c66:	f240 208a 	movw	r0, #650	@ 0x28a
 8001c6a:	f7ff fc6d 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8001c6e:	231f      	movs	r3, #31
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f240 2376 	movw	r3, #630	@ 0x276
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c82:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8001c86:	21b4      	movs	r1, #180	@ 0xb4
 8001c88:	f240 2076 	movw	r0, #630	@ 0x276
 8001c8c:	f7ff fc5c 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8001c90:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2346      	movs	r3, #70	@ 0x46
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001ca4:	2214      	movs	r2, #20
 8001ca6:	21b4      	movs	r1, #180	@ 0xb4
 8001ca8:	2046      	movs	r0, #70	@ 0x46
 8001caa:	f7ff fc4d 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8001cae:	231f      	movs	r3, #31
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	235a      	movs	r3, #90	@ 0x5a
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001cc0:	2228      	movs	r2, #40	@ 0x28
 8001cc2:	21b4      	movs	r1, #180	@ 0xb4
 8001cc4:	205a      	movs	r0, #90	@ 0x5a
 8001cc6:	f7ff fc3f 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8001cca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2378      	movs	r3, #120	@ 0x78
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001cde:	2246      	movs	r2, #70	@ 0x46
 8001ce0:	21b4      	movs	r1, #180	@ 0xb4
 8001ce2:	2078      	movs	r0, #120	@ 0x78
 8001ce4:	f7ff fc30 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8001ce8:	231f      	movs	r3, #31
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	238c      	movs	r3, #140	@ 0x8c
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001cfa:	225a      	movs	r2, #90	@ 0x5a
 8001cfc:	21b4      	movs	r1, #180	@ 0xb4
 8001cfe:	208c      	movs	r0, #140	@ 0x8c
 8001d00:	f7ff fc22 	bl	8001548 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8001d04:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2378      	movs	r3, #120	@ 0x78
 8001d0c:	22c8      	movs	r2, #200	@ 0xc8
 8001d0e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001d12:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d16:	f7ff fc3f 	bl	8001598 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 8001d1a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	f240 237e 	movw	r3, #638	@ 0x27e
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001d30:	f240 224e 	movw	r2, #590	@ 0x24e
 8001d34:	21fa      	movs	r1, #250	@ 0xfa
 8001d36:	f240 204e 	movw	r0, #590	@ 0x24e
 8001d3a:	f7ff fc05 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 8001d3e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	23ae      	movs	r3, #174	@ 0xae
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001d52:	22d4      	movs	r2, #212	@ 0xd4
 8001d54:	21fa      	movs	r1, #250	@ 0xfa
 8001d56:	20d4      	movs	r0, #212	@ 0xd4
 8001d58:	f7ff fbf6 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 8001d5c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	2382      	movs	r3, #130	@ 0x82
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	f240 13db 	movw	r3, #475	@ 0x1db
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	23c0      	movs	r3, #192	@ 0xc0
 8001d6e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001d72:	21af      	movs	r1, #175	@ 0xaf
 8001d74:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d78:	f7ff fbe6 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001d7c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2382      	movs	r3, #130	@ 0x82
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	f240 1345 	movw	r3, #325	@ 0x145
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	23c0      	movs	r3, #192	@ 0xc0
 8001d8e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001d92:	21af      	movs	r1, #175	@ 0xaf
 8001d94:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d98:	f7ff fbd6 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001d9c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001db2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001db6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001dba:	f240 200a 	movw	r0, #522	@ 0x20a
 8001dbe:	f7ff fbc3 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8001dc2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001dd8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001ddc:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001de0:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001de4:	f7ff fbb0 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 8001de8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	23be      	movs	r3, #190	@ 0xbe
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	23c0      	movs	r3, #192	@ 0xc0
 8001dfa:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001dfe:	21fa      	movs	r1, #250	@ 0xfa
 8001e00:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001e04:	f7ff fba0 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 8001e08:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	23be      	movs	r3, #190	@ 0xbe
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	23dc      	movs	r3, #220	@ 0xdc
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	23c0      	movs	r3, #192	@ 0xc0
 8001e18:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001e1c:	21fa      	movs	r1, #250	@ 0xfa
 8001e1e:	20d4      	movs	r0, #212	@ 0xd4
 8001e20:	f7ff fb92 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8001e24:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8001e3a:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001e3e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001e42:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001e46:	f7ff fb7f 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 8001e4a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001e60:	22d4      	movs	r2, #212	@ 0xd4
 8001e62:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001e66:	20dc      	movs	r0, #220	@ 0xdc
 8001e68:	f7ff fb6e 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 8001e6c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	237c      	movs	r3, #124	@ 0x7c
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001e80:	22e8      	movs	r2, #232	@ 0xe8
 8001e82:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001e86:	20ca      	movs	r0, #202	@ 0xca
 8001e88:	f7ff fb5e 	bl	8001548 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	230a      	movs	r3, #10
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2346      	movs	r3, #70	@ 0x46
 8001e98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e9c:	21cd      	movs	r1, #205	@ 0xcd
 8001e9e:	20fa      	movs	r0, #250	@ 0xfa
 8001ea0:	f7ff fb9c 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	230a      	movs	r3, #10
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2346      	movs	r3, #70	@ 0x46
 8001eb0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001eb4:	f240 1127 	movw	r1, #295	@ 0x127
 8001eb8:	20fa      	movs	r0, #250	@ 0xfa
 8001eba:	f7ff fb8f 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2332      	movs	r3, #50	@ 0x32
 8001ec8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001ecc:	21d7      	movs	r1, #215	@ 0xd7
 8001ece:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001ed2:	f7ff fb83 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2307      	movs	r3, #7
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2332      	movs	r3, #50	@ 0x32
 8001ee0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001ee4:	f240 1131 	movw	r1, #305	@ 0x131
 8001ee8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001eec:	f7ff fb76 	bl	80015dc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8001ef0:	f7ff fc58 	bl	80017a4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001efa:	f7ff fcb6 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 8001efe:	21d7      	movs	r1, #215	@ 0xd7
 8001f00:	f240 1063 	movw	r0, #355	@ 0x163
 8001f04:	f7ff fc73 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f7ff fd0b 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Play", 5);
 8001f0e:	2105      	movs	r1, #5
 8001f10:	4808      	ldr	r0, [pc, #32]	@ (8001f34 <show_menu+0x374>)
 8001f12:	f7ff fd31 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 8001f16:	f240 1131 	movw	r1, #305	@ 0x131
 8001f1a:	f240 1031 	movw	r0, #305	@ 0x131
 8001f1e:	f7ff fc66 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Settings", 9);
 8001f22:	2109      	movs	r1, #9
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <show_menu+0x378>)
 8001f26:	f7ff fd27 	bl	8001978 <RA8875_text_write>
 8001f2a:	e007      	b.n	8001f3c <show_menu+0x37c>
 8001f2c:	240003f8 	.word	0x240003f8
 8001f30:	24000000 	.word	0x24000000
 8001f34:	08010878 	.word	0x08010878
 8001f38:	08010880 	.word	0x08010880
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8001f3c:	211f      	movs	r1, #31
 8001f3e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001f42:	f7ff fc92 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-53, 20);
 8001f46:	2114      	movs	r1, #20
 8001f48:	f240 105b 	movw	r0, #347	@ 0x15b
 8001f4c:	f7ff fc4f 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f7ff fce7 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("MENU", 5);
 8001f56:	2105      	movs	r1, #5
 8001f58:	4838      	ldr	r0, [pc, #224]	@ (800203c <show_menu+0x47c>)
 8001f5a:	f7ff fd0d 	bl	8001978 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8001f5e:	211f      	movs	r1, #31
 8001f60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f64:	f7ff fc81 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f7ff fc3f 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fcd7 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 8001f76:	2109      	movs	r1, #9
 8001f78:	4831      	ldr	r0, [pc, #196]	@ (8002040 <show_menu+0x480>)
 8001f7a:	f7ff fcfd 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-90, 0);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8001f84:	f7ff fc33 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 5);
 8001f88:	2105      	movs	r1, #5
 8001f8a:	482e      	ldr	r0, [pc, #184]	@ (8002044 <show_menu+0x484>)
 8001f8c:	f7ff fcf4 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8001f90:	2137      	movs	r1, #55	@ 0x37
 8001f92:	200a      	movs	r0, #10
 8001f94:	f7ff fc2b 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("ECE", 3);
 8001f98:	2103      	movs	r1, #3
 8001f9a:	482b      	ldr	r0, [pc, #172]	@ (8002048 <show_menu+0x488>)
 8001f9c:	f7ff fcec 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8001fa0:	2137      	movs	r1, #55	@ 0x37
 8001fa2:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001fa6:	f7ff fc22 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("477", 3);
 8001faa:	2103      	movs	r1, #3
 8001fac:	4827      	ldr	r0, [pc, #156]	@ (800204c <show_menu+0x48c>)
 8001fae:	f7ff fce3 	bl	8001978 <RA8875_text_write>
	RA8875_graphic_mode();
 8001fb2:	f7fe feed 	bl	8000d90 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-79, 10, CENTER_X-72, 50, CENTER_X-87, 50, RA8875_YELLOW);
 8001fb6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fba:	9302      	str	r3, [sp, #8]
 8001fbc:	2332      	movs	r3, #50	@ 0x32
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	f240 1339 	movw	r3, #313	@ 0x139
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2332      	movs	r3, #50	@ 0x32
 8001fc8:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8001fcc:	210a      	movs	r1, #10
 8001fce:	f240 1041 	movw	r0, #321	@ 0x141
 8001fd2:	f7ff fab9 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-72, 85, CENTER_X-65, 50, CENTER_X-80, 50, RA8875_YELLOW);
 8001fd6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	2332      	movs	r3, #50	@ 0x32
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2332      	movs	r3, #50	@ 0x32
 8001fe8:	f240 124f 	movw	r2, #335	@ 0x14f
 8001fec:	2155      	movs	r1, #85	@ 0x55
 8001fee:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8001ff2:	f7ff faa9 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+99, 10, CENTER_X+92, 50, CENTER_X+107, 50, RA8875_YELLOW);
 8001ff6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	2332      	movs	r3, #50	@ 0x32
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f240 13fb 	movw	r3, #507	@ 0x1fb
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2332      	movs	r3, #50	@ 0x32
 8002008:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 800200c:	210a      	movs	r1, #10
 800200e:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8002012:	f7ff fa99 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+92, 85, CENTER_X+85, 50, CENTER_X+100, 50, RA8875_YELLOW);
 8002016:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2332      	movs	r3, #50	@ 0x32
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2332      	movs	r3, #50	@ 0x32
 8002028:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800202c:	2155      	movs	r1, #85	@ 0x55
 800202e:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
 8002032:	f7ff fa89 	bl	8001548 <RA8875_draw_fill_triangle>

	return;
 8002036:	bf00      	nop
}
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	0801088c 	.word	0x0801088c
 8002040:	0801086c 	.word	0x0801086c
 8002044:	0801085c 	.word	0x0801085c
 8002048:	08010894 	.word	0x08010894
 800204c:	08010898 	.word	0x08010898

08002050 <game_matrix>:

void game_matrix(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
	mode = GAME_MODE_PLAY;
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <game_matrix+0x188>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
	get_word_matrix(word_matrix);
 800205c:	485f      	ldr	r0, [pc, #380]	@ (80021dc <game_matrix+0x18c>)
 800205e:	f7ff fd3f 	bl	8001ae0 <get_word_matrix>

	//background
	RA8875_fill_screen(RA8875_BLUE);
 8002062:	201f      	movs	r0, #31
 8002064:	f7ff fa50 	bl	8001508 <RA8875_fill_screen>
	//4x4 square matrix with words
	for (int row = 0; row < ROWS; row++) {
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e066      	b.n	800213c <game_matrix+0xec>
	  for (int col = 0; col < COLS; col++) {
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e05d      	b.n	8002130 <game_matrix+0xe0>
		  int x = MARGIN + col * (SQWIDTH + SPACE);
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	3314      	adds	r3, #20
 8002080:	60fb      	str	r3, [r7, #12]
		  int y = HEADER + MARGIN + row * (SQHEIGHT + SPACE);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800208c:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80021c0 <game_matrix+0x170>
 8002090:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002094:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80021c8 <game_matrix+0x178>
 8002098:	ee37 7b06 	vadd.f64	d7, d7, d6
 800209c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	60bb      	str	r3, [r7, #8]

		  RA8875_draw_fill_rect(x, y, SQWIDTH, SQHEIGHT, RA8875_WHITE);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b218      	sxth	r0, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	b219      	sxth	r1, r3
 80020ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	234e      	movs	r3, #78	@ 0x4e
 80020b6:	22b6      	movs	r2, #182	@ 0xb6
 80020b8:	f7ff f9f8 	bl	80014ac <RA8875_draw_fill_rect>

		  int textX = x + SQWIDTH / 2 - 40;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3333      	adds	r3, #51	@ 0x33
 80020c0:	607b      	str	r3, [r7, #4]
		  int textY = y + SQHEIGHT / 2 - 15;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020cc:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80021d0 <game_matrix+0x180>
 80020d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020d4:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 80020d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020e0:	ee17 3a90 	vmov	r3, s15
 80020e4:	603b      	str	r3, [r7, #0]

		  RA8875_text_mode();
 80020e6:	f7ff fb5d 	bl	80017a4 <RA8875_text_mode>
		  RA8875_text_cursor_position(textX, textY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	b292      	uxth	r2, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fb7a 	bl	80017ee <RA8875_text_cursor_position>
		  RA8875_text_color (RA8875_BLACK, RA8875_WHITE);
 80020fa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fbb3 	bl	800186a <RA8875_text_color>
		  RA8875_text_scale(1);
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff fc0d 	bl	8001924 <RA8875_text_scale>

		  RA8875_text_write(word_matrix[4*row + col].word, 6);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	009a      	lsls	r2, r3, #2
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	441a      	add	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <game_matrix+0x18c>)
 800211c:	4413      	add	r3, r2
 800211e:	2106      	movs	r1, #6
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc29 	bl	8001978 <RA8875_text_write>
		  RA8875_graphic_mode();
 8002126:	f7fe fe33 	bl	8000d90 <RA8875_graphic_mode>
	  for (int col = 0; col < COLS; col++) {
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	3301      	adds	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b03      	cmp	r3, #3
 8002134:	dd9e      	ble.n	8002074 <game_matrix+0x24>
	for (int row = 0; row < ROWS; row++) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b03      	cmp	r3, #3
 8002140:	dd95      	ble.n	800206e <game_matrix+0x1e>
	  }
	}
	//timer
	RA8875_text_mode();
 8002142:	f7ff fb2f 	bl	80017a4 <RA8875_text_mode>
	RA8875_text_cursor_position(CENTER_X-200, 50);
 8002146:	2132      	movs	r1, #50	@ 0x32
 8002148:	20c8      	movs	r0, #200	@ 0xc8
 800214a:	f7ff fb50 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800214e:	211f      	movs	r1, #31
 8002150:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002154:	f7ff fb89 	bl	800186a <RA8875_text_color>
	RA8875_text_scale(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f7ff fbe3 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("10", 3);
 800215e:	2103      	movs	r1, #3
 8002160:	481f      	ldr	r0, [pc, #124]	@ (80021e0 <game_matrix+0x190>)
 8002162:	f7ff fc09 	bl	8001978 <RA8875_text_write>
	//score
	RA8875_text_cursor_position(CENTER_X+190, 50);
 8002166:	2132      	movs	r1, #50	@ 0x32
 8002168:	f240 204e 	movw	r0, #590	@ 0x24e
 800216c:	f7ff fb3f 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002170:	211f      	movs	r1, #31
 8002172:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002176:	f7ff fb78 	bl	800186a <RA8875_text_color>
	RA8875_text_scale(1);
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff fbd2 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Score: 0", 9);
 8002180:	2109      	movs	r1, #9
 8002182:	4818      	ldr	r0, [pc, #96]	@ (80021e4 <game_matrix+0x194>)
 8002184:	f7ff fbf8 	bl	8001978 <RA8875_text_write>
	//clue
	RA8875_text_cursor_position(CENTER_X, 50);
 8002188:	2132      	movs	r1, #50	@ 0x32
 800218a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800218e:	f7ff fb2e 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002192:	211f      	movs	r1, #31
 8002194:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002198:	f7ff fb67 	bl	800186a <RA8875_text_color>
	RA8875_text_scale(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f7ff fbc1 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("kitchen", 8);
 80021a2:	2108      	movs	r1, #8
 80021a4:	4810      	ldr	r0, [pc, #64]	@ (80021e8 <game_matrix+0x198>)
 80021a6:	f7ff fbe7 	bl	8001978 <RA8875_text_write>
	RA8875_graphic_mode();
 80021aa:	f7fe fdf1 	bl	8000d90 <RA8875_graphic_mode>

	HAL_TIM_Base_Start_IT(&htim6);
 80021ae:	480f      	ldr	r0, [pc, #60]	@ (80021ec <game_matrix+0x19c>)
 80021b0:	f007 fae2 	bl	8009778 <HAL_TIM_Base_Start_IT>

	return;
 80021b4:	bf00      	nop
}
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	f3af 8000 	nop.w
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40562000 	.word	0x40562000
 80021c8:	00000000 	.word	0x00000000
 80021cc:	405d0000 	.word	0x405d0000
 80021d0:	00000000 	.word	0x00000000
 80021d4:	4043a000 	.word	0x4043a000
 80021d8:	240003f8 	.word	0x240003f8
 80021dc:	24000238 	.word	0x24000238
 80021e0:	0801089c 	.word	0x0801089c
 80021e4:	080108a0 	.word	0x080108a0
 80021e8:	080108ac 	.word	0x080108ac
 80021ec:	2400056c 	.word	0x2400056c

080021f0 <process_input>:

void process_input(int key) {
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b094      	sub	sp, #80	@ 0x50
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]

					//   0  1  2  3   4   5  6  7  8   9   10 11 12  13  14  15 16 17  18  19
	uint8_t mapping[] = {0, 4, 8, 12, -1, 1, 5, 9, 13, -1, 2, 6, 10, 14, -1, 3, 7, 11, 15, -1};
 80021f8:	4bc9      	ldr	r3, [pc, #804]	@ (8002520 <process_input+0x330>)
 80021fa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021fe:	461d      	mov	r5, r3
 8002200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	6023      	str	r3, [r4, #0]
	switch(mode) {
 8002208:	4bc6      	ldr	r3, [pc, #792]	@ (8002524 <process_input+0x334>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b04      	cmp	r3, #4
 800220e:	f200 8313 	bhi.w	8002838 <process_input+0x648>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <process_input+0x28>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	0800230d 	.word	0x0800230d
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800249b 	.word	0x0800249b
 8002224:	080025c1 	.word	0x080025c1
 8002228:	08002827 	.word	0x08002827
		case GAME_MODE_TITLE:
			break;
		case GAME_MODE_MENU:
			if(key == 4) {
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d132      	bne.n	8002298 <process_input+0xa8>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 8002232:	2300      	movs	r3, #0
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	230a      	movs	r3, #10
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2346      	movs	r3, #70	@ 0x46
 800223c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002240:	21cd      	movs	r1, #205	@ 0xcd
 8002242:	20fa      	movs	r0, #250	@ 0xfa
 8002244:	f7ff f9ca 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 8002248:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2307      	movs	r3, #7
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2332      	movs	r3, #50	@ 0x32
 8002254:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002258:	21d7      	movs	r1, #215	@ 0xd7
 800225a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800225e:	f7ff f9bd 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002262:	f7ff fa9f 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002266:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fafd 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 8002270:	21d7      	movs	r1, #215	@ 0xd7
 8002272:	f240 1063 	movw	r0, #355	@ 0x163
 8002276:	f7ff faba 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 800227a:	2002      	movs	r0, #2
 800227c:	f7ff fb52 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write("Play", 5);
 8002280:	2105      	movs	r1, #5
 8002282:	48a9      	ldr	r0, [pc, #676]	@ (8002528 <process_input+0x338>)
 8002284:	f7ff fb78 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 8002288:	f7fe fd82 	bl	8000d90 <RA8875_graphic_mode>

				HAL_Delay(250);
 800228c:	20fa      	movs	r0, #250	@ 0xfa
 800228e:	f001 ff29 	bl	80040e4 <HAL_Delay>
				game_matrix();
 8002292:	f7ff fedd 	bl	8002050 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				settings();
			}
			break;
 8002296:	e2c8      	b.n	800282a <process_input+0x63a>
			else if(key == 9) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b09      	cmp	r3, #9
 800229c:	f040 82c5 	bne.w	800282a <process_input+0x63a>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	230a      	movs	r3, #10
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2346      	movs	r3, #70	@ 0x46
 80022aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ae:	f240 1127 	movw	r1, #295	@ 0x127
 80022b2:	20fa      	movs	r0, #250	@ 0xfa
 80022b4:	f7ff f992 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 80022b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2307      	movs	r3, #7
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2332      	movs	r3, #50	@ 0x32
 80022c4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80022c8:	f240 1131 	movw	r1, #305	@ 0x131
 80022cc:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80022d0:	f7ff f984 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 80022d4:	f7ff fa66 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80022d8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fac4 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 80022e2:	f240 1131 	movw	r1, #305	@ 0x131
 80022e6:	f240 1031 	movw	r0, #305	@ 0x131
 80022ea:	f7ff fa80 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7ff fb18 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write("Settings", 9);
 80022f4:	2109      	movs	r1, #9
 80022f6:	488d      	ldr	r0, [pc, #564]	@ (800252c <process_input+0x33c>)
 80022f8:	f7ff fb3e 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 80022fc:	f7fe fd48 	bl	8000d90 <RA8875_graphic_mode>
				HAL_Delay(250);
 8002300:	20fa      	movs	r0, #250	@ 0xfa
 8002302:	f001 feef 	bl	80040e4 <HAL_Delay>
				settings();
 8002306:	f000 fd13 	bl	8002d30 <settings>
			break;
 800230a:	e28e      	b.n	800282a <process_input+0x63a>
		case GAME_MODE_PLAY:
			if(0 <= key && (key+6) % 5 && key != picked) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f2c0 828d 	blt.w	800282e <process_input+0x63e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1d99      	adds	r1, r3, #6
 8002318:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <process_input+0x340>)
 800231a:	fb83 2301 	smull	r2, r3, r3, r1
 800231e:	105a      	asrs	r2, r3, #1
 8002320:	17cb      	asrs	r3, r1, #31
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	1aca      	subs	r2, r1, r3
 800232c:	2a00      	cmp	r2, #0
 800232e:	f000 827e 	beq.w	800282e <process_input+0x63e>
 8002332:	4b80      	ldr	r3, [pc, #512]	@ (8002534 <process_input+0x344>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	f000 8278 	beq.w	800282e <process_input+0x63e>
				key = mapping[key];
 800233e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	607b      	str	r3, [r7, #4]
				guess_remain--;
 800234a:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <process_input+0x348>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3b01      	subs	r3, #1
 8002350:	4a79      	ldr	r2, [pc, #484]	@ (8002538 <process_input+0x348>)
 8002352:	6013      	str	r3, [r2, #0]
				int x = MARGIN + (key % 4) * (SQWIDTH + SPACE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4259      	negs	r1, r3
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	f001 0303 	and.w	r3, r1, #3
 8002360:	bf58      	it	pl
 8002362:	425a      	negpl	r2, r3
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	3314      	adds	r3, #20
 800236e:	647b      	str	r3, [r7, #68]	@ 0x44
				int y = HEADER + MARGIN + (key / 4) * (SQHEIGHT + SPACE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da00      	bge.n	8002378 <process_input+0x188>
 8002376:	3303      	adds	r3, #3
 8002378:	109b      	asrs	r3, r3, #2
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002382:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8002508 <process_input+0x318>
 8002386:	ee27 7b06 	vmul.f64	d7, d7, d6
 800238a:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8002510 <process_input+0x320>
 800238e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002392:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002396:	ee17 3a90 	vmov	r3, s15
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40
			    int textX = x + SQWIDTH / 2 - 40;
 800239c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800239e:	3333      	adds	r3, #51	@ 0x33
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			    int textY = y + SQHEIGHT / 2 - 15;
 80023a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023ac:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8002518 <process_input+0x328>
 80023b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023b4:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 80023b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023c0:	ee17 3a90 	vmov	r3, s15
 80023c4:	63bb      	str	r3, [r7, #56]	@ 0x38
				RA8875_draw_fill_rect(x, y, SQWIDTH, SQHEIGHT, RA8875_GREEN);
 80023c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c8:	b218      	sxth	r0, r3
 80023ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023cc:	b219      	sxth	r1, r3
 80023ce:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	234e      	movs	r3, #78	@ 0x4e
 80023d6:	22b6      	movs	r2, #182	@ 0xb6
 80023d8:	f7ff f868 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_text_mode();
 80023dc:	f7ff f9e2 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80023e0:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fa40 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(textX, textY);
 80023ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023f0:	b292      	uxth	r2, r2
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9fa 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff fa92 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write(word_matrix[key].word, 6);
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4a4c      	ldr	r2, [pc, #304]	@ (800253c <process_input+0x34c>)
 800240c:	4413      	add	r3, r2
 800240e:	2106      	movs	r1, #6
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fab1 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 8002416:	f7fe fcbb 	bl	8000d90 <RA8875_graphic_mode>
				if(guess_remain) {
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <process_input+0x348>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <process_input+0x23a>
					picked = key;
 8002422:	4a44      	ldr	r2, [pc, #272]	@ (8002534 <process_input+0x344>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]
					RA8875_graphic_mode();
					picked = -1;
					guess_remain = 2;
				}
			}
			break;
 8002428:	e201      	b.n	800282e <process_input+0x63e>
					int guess_list[2] = {picked, key};
 800242a:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <process_input+0x344>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	623b      	str	r3, [r7, #32]
					int gt[2] = {0, 1};
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	2301      	movs	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
					calc_score(guess_list, gt);
 800243c:	f107 0214 	add.w	r2, r7, #20
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fde2 	bl	8003010 <calc_score>
					sprintf(buffer, "Score: %d", score);
 800244c:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <process_input+0x350>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	493b      	ldr	r1, [pc, #236]	@ (8002544 <process_input+0x354>)
 8002456:	4618      	mov	r0, r3
 8002458:	f00b fa6a 	bl	800d930 <siprintf>
					RA8875_text_mode();
 800245c:	f7ff f9a2 	bl	80017a4 <RA8875_text_mode>
					RA8875_text_cursor_position(CENTER_X+190, 50);
 8002460:	2132      	movs	r1, #50	@ 0x32
 8002462:	f240 204e 	movw	r0, #590	@ 0x24e
 8002466:	f7ff f9c2 	bl	80017ee <RA8875_text_cursor_position>
					RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800246a:	211f      	movs	r1, #31
 800246c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002470:	f7ff f9fb 	bl	800186a <RA8875_text_color>
					RA8875_text_scale(1);
 8002474:	2001      	movs	r0, #1
 8002476:	f7ff fa55 	bl	8001924 <RA8875_text_scale>
					RA8875_text_write(buffer, 9);
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2109      	movs	r1, #9
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fa79 	bl	8001978 <RA8875_text_write>
					RA8875_graphic_mode();
 8002486:	f7fe fc83 	bl	8000d90 <RA8875_graphic_mode>
					picked = -1;
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <process_input+0x344>)
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	601a      	str	r2, [r3, #0]
					guess_remain = 2;
 8002492:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <process_input+0x348>)
 8002494:	2202      	movs	r2, #2
 8002496:	601a      	str	r2, [r3, #0]
			break;
 8002498:	e1c9      	b.n	800282e <process_input+0x63e>
		case GAME_MODE_END:
			if(key == 4) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d155      	bne.n	800254c <process_input+0x35c>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 80024a0:	2300      	movs	r3, #0
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	230a      	movs	r3, #10
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2346      	movs	r3, #70	@ 0x46
 80024aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024ae:	21cd      	movs	r1, #205	@ 0xcd
 80024b0:	20fa      	movs	r0, #250	@ 0xfa
 80024b2:	f7ff f893 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 80024b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2307      	movs	r3, #7
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2332      	movs	r3, #50	@ 0x32
 80024c2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80024c6:	21d7      	movs	r1, #215	@ 0xd7
 80024c8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80024cc:	f7ff f886 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 80024d0:	f7ff f968 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80024d4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff f9c6 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-23);
 80024de:	21d9      	movs	r1, #217	@ 0xd9
 80024e0:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80024e4:	f7ff f983 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 80024e8:	2002      	movs	r0, #2
 80024ea:	f7ff fa1b 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write("Play Again", 10);
 80024ee:	210a      	movs	r1, #10
 80024f0:	4815      	ldr	r0, [pc, #84]	@ (8002548 <process_input+0x358>)
 80024f2:	f7ff fa41 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 80024f6:	f7fe fc4b 	bl	8000d90 <RA8875_graphic_mode>

				HAL_Delay(250);
 80024fa:	20fa      	movs	r0, #250	@ 0xfa
 80024fc:	f001 fdf2 	bl	80040e4 <HAL_Delay>
				game_matrix();
 8002500:	f7ff fda6 	bl	8002050 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				show_menu();
			}
			break;
 8002504:	e195      	b.n	8002832 <process_input+0x642>
 8002506:	bf00      	nop
 8002508:	00000000 	.word	0x00000000
 800250c:	40562000 	.word	0x40562000
 8002510:	00000000 	.word	0x00000000
 8002514:	405d0000 	.word	0x405d0000
 8002518:	00000000 	.word	0x00000000
 800251c:	4043a000 	.word	0x4043a000
 8002520:	080108fc 	.word	0x080108fc
 8002524:	240003f8 	.word	0x240003f8
 8002528:	08010878 	.word	0x08010878
 800252c:	08010880 	.word	0x08010880
 8002530:	66666667 	.word	0x66666667
 8002534:	24000008 	.word	0x24000008
 8002538:	24000004 	.word	0x24000004
 800253c:	24000238 	.word	0x24000238
 8002540:	24000400 	.word	0x24000400
 8002544:	080108b4 	.word	0x080108b4
 8002548:	080108c0 	.word	0x080108c0
			else if(key == 9) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b09      	cmp	r3, #9
 8002550:	f040 816f 	bne.w	8002832 <process_input+0x642>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 8002554:	2300      	movs	r3, #0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	230a      	movs	r3, #10
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2346      	movs	r3, #70	@ 0x46
 800255e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002562:	f240 1127 	movw	r1, #295	@ 0x127
 8002566:	20fa      	movs	r0, #250	@ 0xfa
 8002568:	f7ff f838 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 800256c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2307      	movs	r3, #7
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2332      	movs	r3, #50	@ 0x32
 8002578:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800257c:	f240 1131 	movw	r1, #305	@ 0x131
 8002580:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002584:	f7ff f82a 	bl	80015dc <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002588:	f7ff f90c 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 800258c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff f96a 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8002596:	f240 1131 	movw	r1, #305	@ 0x131
 800259a:	f240 1063 	movw	r0, #355	@ 0x163
 800259e:	f7ff f926 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff f9be 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write("Menu", 5);
 80025a8:	2105      	movs	r1, #5
 80025aa:	48a5      	ldr	r0, [pc, #660]	@ (8002840 <process_input+0x650>)
 80025ac:	f7ff f9e4 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 80025b0:	f7fe fbee 	bl	8000d90 <RA8875_graphic_mode>
				HAL_Delay(250);
 80025b4:	20fa      	movs	r0, #250	@ 0xfa
 80025b6:	f001 fd95 	bl	80040e4 <HAL_Delay>
				show_menu();
 80025ba:	f7ff fb01 	bl	8001bc0 <show_menu>
			break;
 80025be:	e138      	b.n	8002832 <process_input+0x642>
		case GAME_MODE_SETTINGS:
			if(key == 4) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d13d      	bne.n	8002642 <process_input+0x452>
				RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_GREEN);
 80025c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2332      	movs	r3, #50	@ 0x32
 80025ce:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80025d2:	21c8      	movs	r1, #200	@ 0xc8
 80025d4:	200a      	movs	r0, #10
 80025d6:	f7fe ff69 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_text_mode();
 80025da:	f7ff f8e3 	bl	80017a4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80025de:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff f941 	bl	800186a <RA8875_text_color>
				RA8875_text_cursor_position(30, CENTER_Y-40);
 80025e8:	21c8      	movs	r1, #200	@ 0xc8
 80025ea:	201e      	movs	r0, #30
 80025ec:	f7ff f8ff 	bl	80017ee <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7ff f997 	bl	8001924 <RA8875_text_scale>
				RA8875_text_write("Brightness", 10);
 80025f6:	210a      	movs	r1, #10
 80025f8:	4892      	ldr	r0, [pc, #584]	@ (8002844 <process_input+0x654>)
 80025fa:	f7ff f9bd 	bl	8001978 <RA8875_text_write>
				RA8875_graphic_mode();
 80025fe:	f7fe fbc7 	bl	8000d90 <RA8875_graphic_mode>

				set_b = 1;
 8002602:	4b91      	ldr	r3, [pc, #580]	@ (8002848 <process_input+0x658>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
				RA8875_draw_fill_rect(CENTER_X+50, CENTER_Y-28, 256, 25, RA8875_YELLOW);
 8002608:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2319      	movs	r3, #25
 8002610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002614:	21d4      	movs	r1, #212	@ 0xd4
 8002616:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800261a:	f7fe ff47 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+50+current_b, CENTER_Y-34, 10, 37, RA8875_BLACK);
 800261e:	4b8b      	ldr	r3, [pc, #556]	@ (800284c <process_input+0x65c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 8002628:	b29b      	uxth	r3, r3
 800262a:	b218      	sxth	r0, r3
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2325      	movs	r3, #37	@ 0x25
 8002632:	220a      	movs	r2, #10
 8002634:	21ce      	movs	r1, #206	@ 0xce
 8002636:	f7fe ff39 	bl	80014ac <RA8875_draw_fill_rect>

				HAL_Delay(250);
 800263a:	20fa      	movs	r0, #250	@ 0xfa
 800263c:	f001 fd52 	bl	80040e4 <HAL_Delay>
				RA8875_pwm1_out(current_b);
				RA8875_draw_fill_rect(CENTER_X+40, CENTER_Y-35, 280, 40, RA8875_BLUE);
				RA8875_draw_fill_rect(CENTER_X+50, CENTER_Y-28, 256, 25, RA8875_YELLOW);
				RA8875_draw_fill_rect(CENTER_X+45+current_b, CENTER_Y-34, 10, 37, RA8875_BLACK);
			}
			break;
 8002640:	e0f9      	b.n	8002836 <process_input+0x646>
			else if(key == 9) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d174      	bne.n	8002732 <process_input+0x542>
				if(set_b) {
 8002648:	4b7f      	ldr	r3, [pc, #508]	@ (8002848 <process_input+0x658>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03b      	beq.n	80026c8 <process_input+0x4d8>
					set_b = 0;
 8002650:	4b7d      	ldr	r3, [pc, #500]	@ (8002848 <process_input+0x658>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
					RA8875_draw_fill_rect(CENTER_X+40, CENTER_Y-35, 280, 40, RA8875_BLUE);
 8002656:	231f      	movs	r3, #31
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2328      	movs	r3, #40	@ 0x28
 800265c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002660:	21cd      	movs	r1, #205	@ 0xcd
 8002662:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8002666:	f7fe ff21 	bl	80014ac <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 150, RA8875_BLACK);
 800266a:	2300      	movs	r3, #0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2396      	movs	r3, #150	@ 0x96
 8002670:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002674:	21c8      	movs	r1, #200	@ 0xc8
 8002676:	200a      	movs	r0, #10
 8002678:	f7fe ff18 	bl	80014ac <RA8875_draw_fill_rect>
					RA8875_text_mode();
 800267c:	f7ff f892 	bl	80017a4 <RA8875_text_mode>
					RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002680:	2100      	movs	r1, #0
 8002682:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002686:	f7ff f8f0 	bl	800186a <RA8875_text_color>
					RA8875_text_cursor_position(30, CENTER_Y-40);
 800268a:	21c8      	movs	r1, #200	@ 0xc8
 800268c:	201e      	movs	r0, #30
 800268e:	f7ff f8ae 	bl	80017ee <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 8002692:	2002      	movs	r0, #2
 8002694:	f7ff f946 	bl	8001924 <RA8875_text_scale>
					RA8875_text_write("Brightness", 10);
 8002698:	210a      	movs	r1, #10
 800269a:	486a      	ldr	r0, [pc, #424]	@ (8002844 <process_input+0x654>)
 800269c:	f7ff f96c 	bl	8001978 <RA8875_text_write>
					RA8875_text_cursor_position(80, CENTER_Y+10);
 80026a0:	21fa      	movs	r1, #250	@ 0xfa
 80026a2:	2050      	movs	r0, #80	@ 0x50
 80026a4:	f7ff f8a3 	bl	80017ee <RA8875_text_cursor_position>
					RA8875_text_write("Volume", 6);
 80026a8:	2106      	movs	r1, #6
 80026aa:	4869      	ldr	r0, [pc, #420]	@ (8002850 <process_input+0x660>)
 80026ac:	f7ff f964 	bl	8001978 <RA8875_text_write>
					RA8875_text_cursor_position(30, CENTER_Y+60);
 80026b0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80026b4:	201e      	movs	r0, #30
 80026b6:	f7ff f89a 	bl	80017ee <RA8875_text_cursor_position>
					RA8875_text_write("Difficulty", 10);
 80026ba:	210a      	movs	r1, #10
 80026bc:	4865      	ldr	r0, [pc, #404]	@ (8002854 <process_input+0x664>)
 80026be:	f7ff f95b 	bl	8001978 <RA8875_text_write>
					RA8875_graphic_mode();
 80026c2:	f7fe fb65 	bl	8000d90 <RA8875_graphic_mode>
			break;
 80026c6:	e0b6      	b.n	8002836 <process_input+0x646>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_BLACK);
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	230a      	movs	r3, #10
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2346      	movs	r3, #70	@ 0x46
 80026d2:	22b4      	movs	r2, #180	@ 0xb4
 80026d4:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80026d8:	f240 204e 	movw	r0, #590	@ 0x24e
 80026dc:	f7fe ff7e 	bl	80015dc <RA8875_draw_fill_round_rect>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_GREEN);
 80026e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2307      	movs	r3, #7
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2332      	movs	r3, #50	@ 0x32
 80026ec:	22a0      	movs	r2, #160	@ 0xa0
 80026ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80026f2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80026f6:	f7fe ff71 	bl	80015dc <RA8875_draw_fill_round_rect>
					RA8875_text_mode();
 80026fa:	f7ff f853 	bl	80017a4 <RA8875_text_mode>
					RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80026fe:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff f8b1 	bl	800186a <RA8875_text_color>
					RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 8002708:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800270c:	f240 207b 	movw	r0, #635	@ 0x27b
 8002710:	f7ff f86d 	bl	80017ee <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 8002714:	2002      	movs	r0, #2
 8002716:	f7ff f905 	bl	8001924 <RA8875_text_scale>
					RA8875_text_write("Back", 5);
 800271a:	2105      	movs	r1, #5
 800271c:	484e      	ldr	r0, [pc, #312]	@ (8002858 <process_input+0x668>)
 800271e:	f7ff f92b 	bl	8001978 <RA8875_text_write>
					RA8875_graphic_mode();
 8002722:	f7fe fb35 	bl	8000d90 <RA8875_graphic_mode>
					HAL_Delay(250);
 8002726:	20fa      	movs	r0, #250	@ 0xfa
 8002728:	f001 fcdc 	bl	80040e4 <HAL_Delay>
					show_menu();
 800272c:	f7ff fa48 	bl	8001bc0 <show_menu>
			break;
 8002730:	e081      	b.n	8002836 <process_input+0x646>
			else if((key == 19) && set_b) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b13      	cmp	r3, #19
 8002736:	d139      	bne.n	80027ac <process_input+0x5bc>
 8002738:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <process_input+0x658>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d035      	beq.n	80027ac <process_input+0x5bc>
				current_b += 8;
 8002740:	4b42      	ldr	r3, [pc, #264]	@ (800284c <process_input+0x65c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3308      	adds	r3, #8
 8002746:	4a41      	ldr	r2, [pc, #260]	@ (800284c <process_input+0x65c>)
 8002748:	6013      	str	r3, [r2, #0]
				if (current_b > 255) {
 800274a:	4b40      	ldr	r3, [pc, #256]	@ (800284c <process_input+0x65c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	dd02      	ble.n	8002758 <process_input+0x568>
					current_b = 255;
 8002752:	4b3e      	ldr	r3, [pc, #248]	@ (800284c <process_input+0x65c>)
 8002754:	22ff      	movs	r2, #255	@ 0xff
 8002756:	601a      	str	r2, [r3, #0]
				RA8875_pwm1_out(current_b);
 8002758:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <process_input+0x65c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff f93a 	bl	80019d8 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+40, CENTER_Y-35, 280, 40, RA8875_BLUE);
 8002764:	231f      	movs	r3, #31
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2328      	movs	r3, #40	@ 0x28
 800276a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800276e:	21cd      	movs	r1, #205	@ 0xcd
 8002770:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8002774:	f7fe fe9a 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+50, CENTER_Y-28, 256, 25, RA8875_YELLOW);
 8002778:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002784:	21d4      	movs	r1, #212	@ 0xd4
 8002786:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800278a:	f7fe fe8f 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+45+current_b, CENTER_Y-34, 10, 37, RA8875_BLACK);
 800278e:	4b2f      	ldr	r3, [pc, #188]	@ (800284c <process_input+0x65c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f203 13bd 	addw	r3, r3, #445	@ 0x1bd
 8002798:	b29b      	uxth	r3, r3
 800279a:	b218      	sxth	r0, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2325      	movs	r3, #37	@ 0x25
 80027a2:	220a      	movs	r2, #10
 80027a4:	21ce      	movs	r1, #206	@ 0xce
 80027a6:	f7fe fe81 	bl	80014ac <RA8875_draw_fill_rect>
			break;
 80027aa:	e044      	b.n	8002836 <process_input+0x646>
			else if((key == 14) && set_b) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b0e      	cmp	r3, #14
 80027b0:	d141      	bne.n	8002836 <process_input+0x646>
 80027b2:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <process_input+0x658>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d03d      	beq.n	8002836 <process_input+0x646>
				current_b -= 8;
 80027ba:	4b24      	ldr	r3, [pc, #144]	@ (800284c <process_input+0x65c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3b08      	subs	r3, #8
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <process_input+0x65c>)
 80027c2:	6013      	str	r3, [r2, #0]
				if (current_b < 10) {
 80027c4:	4b21      	ldr	r3, [pc, #132]	@ (800284c <process_input+0x65c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	dc02      	bgt.n	80027d2 <process_input+0x5e2>
					current_b = 10;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	@ (800284c <process_input+0x65c>)
 80027ce:	220a      	movs	r2, #10
 80027d0:	601a      	str	r2, [r3, #0]
				RA8875_pwm1_out(current_b);
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <process_input+0x65c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f8fd 	bl	80019d8 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+40, CENTER_Y-35, 280, 40, RA8875_BLUE);
 80027de:	231f      	movs	r3, #31
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2328      	movs	r3, #40	@ 0x28
 80027e4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80027e8:	21cd      	movs	r1, #205	@ 0xcd
 80027ea:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80027ee:	f7fe fe5d 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+50, CENTER_Y-28, 256, 25, RA8875_YELLOW);
 80027f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2319      	movs	r3, #25
 80027fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fe:	21d4      	movs	r1, #212	@ 0xd4
 8002800:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8002804:	f7fe fe52 	bl	80014ac <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+45+current_b, CENTER_Y-34, 10, 37, RA8875_BLACK);
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <process_input+0x65c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f203 13bd 	addw	r3, r3, #445	@ 0x1bd
 8002812:	b29b      	uxth	r3, r3
 8002814:	b218      	sxth	r0, r3
 8002816:	2300      	movs	r3, #0
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2325      	movs	r3, #37	@ 0x25
 800281c:	220a      	movs	r2, #10
 800281e:	21ce      	movs	r1, #206	@ 0xce
 8002820:	f7fe fe44 	bl	80014ac <RA8875_draw_fill_rect>
			break;
 8002824:	e007      	b.n	8002836 <process_input+0x646>
			break;
 8002826:	bf00      	nop
 8002828:	e006      	b.n	8002838 <process_input+0x648>
			break;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <process_input+0x648>
			break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <process_input+0x648>
			break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <process_input+0x648>
			break;
 8002836:	bf00      	nop
	}
}
 8002838:	bf00      	nop
 800283a:	3748      	adds	r7, #72	@ 0x48
 800283c:	46bd      	mov	sp, r7
 800283e:	bdb0      	pop	{r4, r5, r7, pc}
 8002840:	080108cc 	.word	0x080108cc
 8002844:	080108d4 	.word	0x080108d4
 8002848:	240003fc 	.word	0x240003fc
 800284c:	24000000 	.word	0x24000000
 8002850:	080108e0 	.word	0x080108e0
 8002854:	080108e8 	.word	0x080108e8
 8002858:	080108f4 	.word	0x080108f4

0800285c <end_game>:

void end_game(void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 8002862:	4bdb      	ldr	r3, [pc, #876]	@ (8002bd0 <end_game+0x374>)
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8002868:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800286c:	f001 fc3a 	bl	80040e4 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8002870:	201f      	movs	r0, #31
 8002872:	f7fe fe49 	bl	8001508 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8002876:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	230a      	movs	r3, #10
 800287e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002882:	215a      	movs	r1, #90	@ 0x5a
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe fe11 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	230a      	movs	r3, #10
 8002890:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002894:	2164      	movs	r1, #100	@ 0x64
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe fe08 	bl	80014ac <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 800289c:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80028b2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80028b6:	21b4      	movs	r1, #180	@ 0xb4
 80028b8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80028bc:	f7fe fe44 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 80028c0:	231f      	movs	r3, #31
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80028d4:	f240 22da 	movw	r2, #730	@ 0x2da
 80028d8:	21b4      	movs	r1, #180	@ 0xb4
 80028da:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80028de:	f7fe fe33 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80028e2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	f240 238a 	movw	r3, #650	@ 0x28a
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80028f8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80028fc:	21b4      	movs	r1, #180	@ 0xb4
 80028fe:	f240 208a 	movw	r0, #650	@ 0x28a
 8002902:	f7fe fe21 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8002906:	231f      	movs	r3, #31
 8002908:	9302      	str	r3, [sp, #8]
 800290a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	f240 2376 	movw	r3, #630	@ 0x276
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800291a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800291e:	21b4      	movs	r1, #180	@ 0xb4
 8002920:	f240 2076 	movw	r0, #630	@ 0x276
 8002924:	f7fe fe10 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8002928:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	2346      	movs	r3, #70	@ 0x46
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800293c:	2214      	movs	r2, #20
 800293e:	21b4      	movs	r1, #180	@ 0xb4
 8002940:	2046      	movs	r0, #70	@ 0x46
 8002942:	f7fe fe01 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8002946:	231f      	movs	r3, #31
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	235a      	movs	r3, #90	@ 0x5a
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002958:	2228      	movs	r2, #40	@ 0x28
 800295a:	21b4      	movs	r1, #180	@ 0xb4
 800295c:	205a      	movs	r0, #90	@ 0x5a
 800295e:	f7fe fdf3 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8002962:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2378      	movs	r3, #120	@ 0x78
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002976:	2246      	movs	r2, #70	@ 0x46
 8002978:	21b4      	movs	r1, #180	@ 0xb4
 800297a:	2078      	movs	r0, #120	@ 0x78
 800297c:	f7fe fde4 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8002980:	231f      	movs	r3, #31
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	238c      	movs	r3, #140	@ 0x8c
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002992:	225a      	movs	r2, #90	@ 0x5a
 8002994:	21b4      	movs	r1, #180	@ 0xb4
 8002996:	208c      	movs	r0, #140	@ 0x8c
 8002998:	f7fe fdd6 	bl	8001548 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 800299c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2378      	movs	r3, #120	@ 0x78
 80029a4:	22c8      	movs	r2, #200	@ 0xc8
 80029a6:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80029aa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80029ae:	f7fe fdf3 	bl	8001598 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 80029b2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f240 237e 	movw	r3, #638	@ 0x27e
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80029c8:	f240 224e 	movw	r2, #590	@ 0x24e
 80029cc:	21fa      	movs	r1, #250	@ 0xfa
 80029ce:	f240 204e 	movw	r0, #590	@ 0x24e
 80029d2:	f7fe fdb9 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 80029d6:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	23ae      	movs	r3, #174	@ 0xae
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80029ea:	22d4      	movs	r2, #212	@ 0xd4
 80029ec:	21fa      	movs	r1, #250	@ 0xfa
 80029ee:	20d4      	movs	r0, #212	@ 0xd4
 80029f0:	f7fe fdaa 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 80029f4:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80029f8:	9302      	str	r3, [sp, #8]
 80029fa:	2382      	movs	r3, #130	@ 0x82
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	f240 13db 	movw	r3, #475	@ 0x1db
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	23c0      	movs	r3, #192	@ 0xc0
 8002a06:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002a0a:	21af      	movs	r1, #175	@ 0xaf
 8002a0c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a10:	f7fe fd9a 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8002a14:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	2382      	movs	r3, #130	@ 0x82
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	f240 1345 	movw	r3, #325	@ 0x145
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	23c0      	movs	r3, #192	@ 0xc0
 8002a26:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002a2a:	21af      	movs	r1, #175	@ 0xaf
 8002a2c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a30:	f7fe fd8a 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8002a34:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8002a4a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002a4e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002a52:	f240 200a 	movw	r0, #522	@ 0x20a
 8002a56:	f7fe fd77 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8002a5a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8002a70:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002a74:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002a78:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002a7c:	f7fe fd64 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 8002a80:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	23be      	movs	r3, #190	@ 0xbe
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	23c0      	movs	r3, #192	@ 0xc0
 8002a92:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002a96:	21fa      	movs	r1, #250	@ 0xfa
 8002a98:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002a9c:	f7fe fd54 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 8002aa0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	23be      	movs	r3, #190	@ 0xbe
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	23dc      	movs	r3, #220	@ 0xdc
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	23c0      	movs	r3, #192	@ 0xc0
 8002ab0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002ab4:	21fa      	movs	r1, #250	@ 0xfa
 8002ab6:	20d4      	movs	r0, #212	@ 0xd4
 8002ab8:	f7fe fd46 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8002abc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002ad2:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8002ad6:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002ada:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002ade:	f7fe fd33 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 8002ae2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002af8:	22d4      	movs	r2, #212	@ 0xd4
 8002afa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002afe:	20dc      	movs	r0, #220	@ 0xdc
 8002b00:	f7fe fd22 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 8002b04:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002b08:	9302      	str	r3, [sp, #8]
 8002b0a:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	237c      	movs	r3, #124	@ 0x7c
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002b18:	22e8      	movs	r2, #232	@ 0xe8
 8002b1a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002b1e:	20ca      	movs	r0, #202	@ 0xca
 8002b20:	f7fe fd12 	bl	8001548 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8002b24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2346      	movs	r3, #70	@ 0x46
 8002b30:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b34:	21cd      	movs	r1, #205	@ 0xcd
 8002b36:	20fa      	movs	r0, #250	@ 0xfa
 8002b38:	f7fe fd50 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8002b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	230a      	movs	r3, #10
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2346      	movs	r3, #70	@ 0x46
 8002b48:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4c:	f240 1127 	movw	r1, #295	@ 0x127
 8002b50:	20fa      	movs	r0, #250	@ 0xfa
 8002b52:	f7fe fd43 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8002b56:	2300      	movs	r3, #0
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2332      	movs	r3, #50	@ 0x32
 8002b60:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002b64:	21d7      	movs	r1, #215	@ 0xd7
 8002b66:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002b6a:	f7fe fd37 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2307      	movs	r3, #7
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2332      	movs	r3, #50	@ 0x32
 8002b78:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002b7c:	f240 1131 	movw	r1, #305	@ 0x131
 8002b80:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002b84:	f7fe fd2a 	bl	80015dc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8002b88:	f7fe fe0c 	bl	80017a4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002b92:	f7fe fe6a 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8002b96:	21d7      	movs	r1, #215	@ 0xd7
 8002b98:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002b9c:	f7fe fe27 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fe febf 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8002ba6:	210a      	movs	r1, #10
 8002ba8:	480a      	ldr	r0, [pc, #40]	@ (8002bd4 <end_game+0x378>)
 8002baa:	f7fe fee5 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8002bae:	f240 1131 	movw	r1, #305	@ 0x131
 8002bb2:	f240 1063 	movw	r0, #355	@ 0x163
 8002bb6:	f7fe fe1a 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8002bba:	2104      	movs	r1, #4
 8002bbc:	4806      	ldr	r0, [pc, #24]	@ (8002bd8 <end_game+0x37c>)
 8002bbe:	f7fe fedb 	bl	8001978 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8002bc2:	211f      	movs	r1, #31
 8002bc4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002bc8:	f7fe fe4f 	bl	800186a <RA8875_text_color>
 8002bcc:	e006      	b.n	8002bdc <end_game+0x380>
 8002bce:	bf00      	nop
 8002bd0:	240003f8 	.word	0x240003f8
 8002bd4:	080108c0 	.word	0x080108c0
 8002bd8:	080108cc 	.word	0x080108cc
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8002bdc:	2114      	movs	r1, #20
 8002bde:	f240 1001 	movw	r0, #257	@ 0x101
 8002be2:	f7fe fe04 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8002be6:	2003      	movs	r0, #3
 8002be8:	f7fe fe9c 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8002bec:	2104      	movs	r1, #4
 8002bee:	4849      	ldr	r0, [pc, #292]	@ (8002d14 <end_game+0x4b8>)
 8002bf0:	f7fe fec2 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 8002bf4:	2114      	movs	r1, #20
 8002bf6:	f240 1095 	movw	r0, #405	@ 0x195
 8002bfa:	f7fe fdf8 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 8002bfe:	2104      	movs	r1, #4
 8002c00:	4845      	ldr	r0, [pc, #276]	@ (8002d18 <end_game+0x4bc>)
 8002c02:	f7fe feb9 	bl	8001978 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002c06:	211f      	movs	r1, #31
 8002c08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0c:	f7fe fe2d 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	200a      	movs	r0, #10
 8002c14:	f7fe fdeb 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f7fe fe83 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 8002c1e:	2106      	movs	r1, #6
 8002c20:	483e      	ldr	r0, [pc, #248]	@ (8002d1c <end_game+0x4c0>)
 8002c22:	f7fe fea9 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 8002c26:	2100      	movs	r1, #0
 8002c28:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8002c2c:	f7fe fddf 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 8002c30:	210b      	movs	r1, #11
 8002c32:	483b      	ldr	r0, [pc, #236]	@ (8002d20 <end_game+0x4c4>)
 8002c34:	f7fe fea0 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002c38:	2137      	movs	r1, #55	@ 0x37
 8002c3a:	200a      	movs	r0, #10
 8002c3c:	f7fe fdd7 	bl	80017ee <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 8002c40:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <end_game+0x4c8>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	4938      	ldr	r1, [pc, #224]	@ (8002d28 <end_game+0x4cc>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00a fe71 	bl	800d930 <siprintf>
	RA8875_text_write(buffer, 3);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fe90 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8002c58:	2137      	movs	r1, #55	@ 0x37
 8002c5a:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8002c5e:	f7fe fdc6 	bl	80017ee <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 8002c62:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <end_game+0x4c8>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <end_game+0x4d0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dd03      	ble.n	8002c76 <end_game+0x41a>
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <end_game+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2e      	ldr	r2, [pc, #184]	@ (8002d2c <end_game+0x4d0>)
 8002c74:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <end_game+0x4d0>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	492a      	ldr	r1, [pc, #168]	@ (8002d28 <end_game+0x4cc>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f00a fe56 	bl	800d930 <siprintf>
	RA8875_text_write(buffer, 3);
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2103      	movs	r1, #3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fe75 	bl	8001978 <RA8875_text_write>
	RA8875_graphic_mode();
 8002c8e:	f7fe f87f 	bl	8000d90 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 8002c92:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	2332      	movs	r3, #50	@ 0x32
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	23df      	movs	r3, #223	@ 0xdf
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2332      	movs	r3, #50	@ 0x32
 8002ca2:	22ee      	movs	r2, #238	@ 0xee
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	20e7      	movs	r0, #231	@ 0xe7
 8002ca8:	f7fe fc4e 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8002cac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	2332      	movs	r3, #50	@ 0x32
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	23e6      	movs	r3, #230	@ 0xe6
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2332      	movs	r3, #50	@ 0x32
 8002cbc:	22f5      	movs	r2, #245	@ 0xf5
 8002cbe:	2155      	movs	r1, #85	@ 0x55
 8002cc0:	20ee      	movs	r0, #238	@ 0xee
 8002cc2:	f7fe fc41 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8002cc6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	2332      	movs	r3, #50	@ 0x32
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	f240 2337 	movw	r3, #567	@ 0x237
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2332      	movs	r3, #50	@ 0x32
 8002cd8:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8002cdc:	210a      	movs	r1, #10
 8002cde:	f240 202f 	movw	r0, #559	@ 0x22f
 8002ce2:	f7fe fc31 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 8002ce6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2332      	movs	r3, #50	@ 0x32
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2332      	movs	r3, #50	@ 0x32
 8002cf8:	f240 2221 	movw	r2, #545	@ 0x221
 8002cfc:	2155      	movs	r1, #85	@ 0x55
 8002cfe:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8002d02:	f7fe fc21 	bl	8001548 <RA8875_draw_fill_triangle>

	score = 0;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <end_game+0x4c8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

	return;
 8002d0c:	bf00      	nop
}
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	08010910 	.word	0x08010910
 8002d18:	08010918 	.word	0x08010918
 8002d1c:	08010920 	.word	0x08010920
 8002d20:	08010928 	.word	0x08010928
 8002d24:	24000400 	.word	0x24000400
 8002d28:	08010934 	.word	0x08010934
 8002d2c:	24000404 	.word	0x24000404

08002d30 <settings>:

void settings(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af04      	add	r7, sp, #16
	mode = GAME_MODE_SETTINGS;
 8002d36:	4bac      	ldr	r3, [pc, #688]	@ (8002fe8 <settings+0x2b8>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8002d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d40:	f001 f9d0 	bl	80040e4 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8002d44:	201f      	movs	r0, #31
 8002d46:	f7fe fbdf 	bl	8001508 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8002d4a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	230a      	movs	r3, #10
 8002d52:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002d56:	215a      	movs	r1, #90	@ 0x5a
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe fba7 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	230a      	movs	r3, #10
 8002d64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002d68:	2164      	movs	r1, #100	@ 0x64
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7fe fb9e 	bl	80014ac <RA8875_draw_fill_rect>
	//buttons
	RA8875_draw_fill_rect(0, CENTER_Y-50, 300, 170, RA8875_WHITE);
 8002d70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	23aa      	movs	r3, #170	@ 0xaa
 8002d78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d7c:	21be      	movs	r1, #190	@ 0xbe
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe fb94 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_BLACK);
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2332      	movs	r3, #50	@ 0x32
 8002d8a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d8e:	21c8      	movs	r1, #200	@ 0xc8
 8002d90:	200a      	movs	r0, #10
 8002d92:	f7fe fb8b 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+10, 280, 50, RA8875_BLACK);
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2332      	movs	r3, #50	@ 0x32
 8002d9c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002da0:	21fa      	movs	r1, #250	@ 0xfa
 8002da2:	200a      	movs	r0, #10
 8002da4:	f7fe fb82 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+60, 280, 50, RA8875_BLACK);
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2332      	movs	r3, #50	@ 0x32
 8002dae:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002db2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002db6:	200a      	movs	r0, #10
 8002db8:	f7fe fb78 	bl	80014ac <RA8875_draw_fill_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_WHITE);
 8002dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	2346      	movs	r3, #70	@ 0x46
 8002dc8:	22b4      	movs	r2, #180	@ 0xb4
 8002dca:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002dce:	f240 204e 	movw	r0, #590	@ 0x24e
 8002dd2:	f7fe fc03 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_BLACK);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	2307      	movs	r3, #7
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2332      	movs	r3, #50	@ 0x32
 8002de0:	22a0      	movs	r2, #160	@ 0xa0
 8002de2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002de6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002dea:	f7fe fbf7 	bl	80015dc <RA8875_draw_fill_round_rect>
	RA8875_draw_hexagon(CENTER_X+200, CENTER_Y+10, 120, 0x94b3);
 8002dee:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002df2:	2278      	movs	r2, #120	@ 0x78
 8002df4:	21fa      	movs	r1, #250	@ 0xfa
 8002df6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002dfa:	f7fe fc1d 	bl	8001638 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X+100, CENTER_Y+10, 120, 0x94b3);
 8002dfe:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002e02:	2278      	movs	r2, #120	@ 0x78
 8002e04:	21fa      	movs	r1, #250	@ 0xfa
 8002e06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e0a:	f7fe fc15 	bl	8001638 <RA8875_draw_hexagon>
	//trapezoid
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 310, SCREEN_HEIGHT-95, 0, SCREEN_HEIGHT-30, RA8875_YELLOW);
 8002e0e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f240 1381 	movw	r3, #385	@ 0x181
 8002e22:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8002e26:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe fb8c 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 290, SCREEN_HEIGHT-100, 0, SCREEN_HEIGHT-50, RA8875_BLUE);
 8002e30:	231f      	movs	r3, #31
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8002e42:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002e46:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fe fb7c 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 310, CENTER_Y-75, 0, CENTER_Y-140, RA8875_YELLOW);
 8002e50:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	2364      	movs	r3, #100	@ 0x64
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	23a5      	movs	r3, #165	@ 0xa5
 8002e60:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8002e64:	21aa      	movs	r1, #170	@ 0xaa
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fe fb6e 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 290, CENTER_Y-70, 0, CENTER_Y-120, RA8875_BLUE);
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	9302      	str	r3, [sp, #8]
 8002e70:	2378      	movs	r3, #120	@ 0x78
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	2300      	movs	r3, #0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	23aa      	movs	r3, #170	@ 0xaa
 8002e7a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002e7e:	21aa      	movs	r1, #170	@ 0xaa
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fe fb61 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_rect(300, CENTER_Y-75, 12, 220, RA8875_YELLOW);
 8002e86:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	23dc      	movs	r3, #220	@ 0xdc
 8002e8e:	220c      	movs	r2, #12
 8002e90:	21a5      	movs	r1, #165	@ 0xa5
 8002e92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e96:	f7fe fb09 	bl	80014ac <RA8875_draw_fill_rect>

	//button text
	RA8875_text_mode();
 8002e9a:	f7fe fc83 	bl	80017a4 <RA8875_text_mode>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002ea4:	f7fe fce1 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(30, CENTER_Y-40);
 8002ea8:	21c8      	movs	r1, #200	@ 0xc8
 8002eaa:	201e      	movs	r0, #30
 8002eac:	f7fe fc9f 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f7fe fd37 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Brightness", 10);
 8002eb6:	210a      	movs	r1, #10
 8002eb8:	484c      	ldr	r0, [pc, #304]	@ (8002fec <settings+0x2bc>)
 8002eba:	f7fe fd5d 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(80, CENTER_Y+10);
 8002ebe:	21fa      	movs	r1, #250	@ 0xfa
 8002ec0:	2050      	movs	r0, #80	@ 0x50
 8002ec2:	f7fe fc94 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Volume", 6);
 8002ec6:	2106      	movs	r1, #6
 8002ec8:	4849      	ldr	r0, [pc, #292]	@ (8002ff0 <settings+0x2c0>)
 8002eca:	f7fe fd55 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(30, CENTER_Y+60);
 8002ece:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002ed2:	201e      	movs	r0, #30
 8002ed4:	f7fe fc8b 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Difficulty", 10);
 8002ed8:	210a      	movs	r1, #10
 8002eda:	4846      	ldr	r0, [pc, #280]	@ (8002ff4 <settings+0x2c4>)
 8002edc:	f7fe fd4c 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 8002ee0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002ee4:	f240 207b 	movw	r0, #635	@ 0x27b
 8002ee8:	f7fe fc81 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Back", 4);
 8002eec:	2104      	movs	r1, #4
 8002eee:	4842      	ldr	r0, [pc, #264]	@ (8002ff8 <settings+0x2c8>)
 8002ef0:	f7fe fd42 	bl	8001978 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8002ef4:	211f      	movs	r1, #31
 8002ef6:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002efa:	f7fe fcb6 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-128, 20);
 8002efe:	2114      	movs	r1, #20
 8002f00:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8002f04:	f7fe fc73 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f7fe fd0b 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("SETTINGS", 8);
 8002f0e:	2108      	movs	r1, #8
 8002f10:	483a      	ldr	r0, [pc, #232]	@ (8002ffc <settings+0x2cc>)
 8002f12:	f7fe fd31 	bl	8001978 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002f16:	211f      	movs	r1, #31
 8002f18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f1c:	f7fe fca5 	bl	800186a <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002f20:	2100      	movs	r1, #0
 8002f22:	200a      	movs	r0, #10
 8002f24:	f7fe fc63 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7fe fcfb 	bl	8001924 <RA8875_text_scale>
	RA8875_text_write("Brightness:", 11);
 8002f2e:	210b      	movs	r1, #11
 8002f30:	4833      	ldr	r0, [pc, #204]	@ (8003000 <settings+0x2d0>)
 8002f32:	f7fe fd21 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-120, 0);
 8002f36:	2100      	movs	r1, #0
 8002f38:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002f3c:	f7fe fc57 	bl	80017ee <RA8875_text_cursor_position>
	RA8875_text_write("Volume:", 7);
 8002f40:	2107      	movs	r1, #7
 8002f42:	4830      	ldr	r0, [pc, #192]	@ (8003004 <settings+0x2d4>)
 8002f44:	f7fe fd18 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002f48:	2137      	movs	r1, #55	@ 0x37
 8002f4a:	200a      	movs	r0, #10
 8002f4c:	f7fe fc4f 	bl	80017ee <RA8875_text_cursor_position>
//	char buffer[3];
//	sprintf(buffer, "%d", score);
//	RA8875_text_write(buffer, 3);
	RA8875_text_write("254", 3);
 8002f50:	2103      	movs	r1, #3
 8002f52:	482d      	ldr	r0, [pc, #180]	@ (8003008 <settings+0x2d8>)
 8002f54:	f7fe fd10 	bl	8001978 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8002f58:	2137      	movs	r1, #55	@ 0x37
 8002f5a:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8002f5e:	f7fe fc46 	bl	80017ee <RA8875_text_cursor_position>
//	sprintf(buffer, "%d", hi_score);
//	RA8875_text_write(buffer, 3);
	RA8875_text_write("100", 3);
 8002f62:	2103      	movs	r1, #3
 8002f64:	4829      	ldr	r0, [pc, #164]	@ (800300c <settings+0x2dc>)
 8002f66:	f7fe fd07 	bl	8001978 <RA8875_text_write>
	RA8875_graphic_mode();
 8002f6a:	f7fd ff11 	bl	8000d90 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-159, 10, CENTER_X-152, 50, CENTER_X-167, 50, RA8875_YELLOW);
 8002f6e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f72:	9302      	str	r3, [sp, #8]
 8002f74:	2332      	movs	r3, #50	@ 0x32
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	23e9      	movs	r3, #233	@ 0xe9
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2332      	movs	r3, #50	@ 0x32
 8002f7e:	22f8      	movs	r2, #248	@ 0xf8
 8002f80:	210a      	movs	r1, #10
 8002f82:	20f1      	movs	r0, #241	@ 0xf1
 8002f84:	f7fe fae0 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-152, 85, CENTER_X-145, 50, CENTER_X-160, 50, RA8875_YELLOW);
 8002f88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	2332      	movs	r3, #50	@ 0x32
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	23f0      	movs	r3, #240	@ 0xf0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2332      	movs	r3, #50	@ 0x32
 8002f98:	22ff      	movs	r2, #255	@ 0xff
 8002f9a:	2155      	movs	r1, #85	@ 0x55
 8002f9c:	20f8      	movs	r0, #248	@ 0xf8
 8002f9e:	f7fe fad3 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8002fa2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	2332      	movs	r3, #50	@ 0x32
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	f240 2337 	movw	r3, #567	@ 0x237
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2332      	movs	r3, #50	@ 0x32
 8002fb4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8002fb8:	210a      	movs	r1, #10
 8002fba:	f240 202f 	movw	r0, #559	@ 0x22f
 8002fbe:	f7fe fac3 	bl	8001548 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 8002fc2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	2332      	movs	r3, #50	@ 0x32
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2332      	movs	r3, #50	@ 0x32
 8002fd4:	f240 2221 	movw	r2, #545	@ 0x221
 8002fd8:	2155      	movs	r1, #85	@ 0x55
 8002fda:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8002fde:	f7fe fab3 	bl	8001548 <RA8875_draw_fill_triangle>

	return;
 8002fe2:	bf00      	nop
}
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	240003f8 	.word	0x240003f8
 8002fec:	080108d4 	.word	0x080108d4
 8002ff0:	080108e0 	.word	0x080108e0
 8002ff4:	080108e8 	.word	0x080108e8
 8002ff8:	080108f4 	.word	0x080108f4
 8002ffc:	08010938 	.word	0x08010938
 8003000:	08010944 	.word	0x08010944
 8003004:	08010950 	.word	0x08010950
 8003008:	08010958 	.word	0x08010958
 800300c:	0801095c 	.word	0x0801095c

08003010 <calc_score>:

void calc_score(int* guesses, int* truths) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	int round_score = -1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	60fb      	str	r3, [r7, #12]

	if((guesses[0] == truths[0] || guesses[0] == truths[1]) && (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d006      	beq.n	800303a <calc_score+0x2a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d111      	bne.n	800305e <calc_score+0x4e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d007      	beq.n	8003058 <calc_score+0x48>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d102      	bne.n	800305e <calc_score+0x4e>
		round_score = 3;
 8003058:	2303      	movs	r3, #3
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e01d      	b.n	800309a <calc_score+0x8a>
	}
	else if((guesses[0] == truths[0] || guesses[0] == truths[1]) || (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d015      	beq.n	8003096 <calc_score+0x86>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3304      	adds	r3, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d00e      	beq.n	8003096 <calc_score+0x86>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d007      	beq.n	8003096 <calc_score+0x86>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3304      	adds	r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d101      	bne.n	800309a <calc_score+0x8a>
		round_score = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
	}

	score += round_score;
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <calc_score+0xb4>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a08      	ldr	r2, [pc, #32]	@ (80030c4 <calc_score+0xb4>)
 80030a4:	6013      	str	r3, [r2, #0]
	if(score < 0) {
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <calc_score+0xb4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da03      	bge.n	80030b6 <calc_score+0xa6>
		score = 0;
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <calc_score+0xb4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
	}

	return;
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
}
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	24000400 	.word	0x24000400

080030c8 <read_keypad>:
 */

#include "main.h"
#include "keyboard_io.h"

int read_keypad(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0

	for(int i = 0; i < 4; i++) { // Set current column as output and low
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e0a5      	b.n	8003220 <read_keypad+0x158>
		if(i == 0) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d115      	bne.n	8003106 <read_keypad+0x3e>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2120      	movs	r1, #32
 80030de:	4855      	ldr	r0, [pc, #340]	@ (8003234 <read_keypad+0x16c>)
 80030e0:	f001 fb08 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 80030e4:	2201      	movs	r2, #1
 80030e6:	2140      	movs	r1, #64	@ 0x40
 80030e8:	4852      	ldr	r0, [pc, #328]	@ (8003234 <read_keypad+0x16c>)
 80030ea:	f001 fb03 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2180      	movs	r1, #128	@ 0x80
 80030f2:	4850      	ldr	r0, [pc, #320]	@ (8003234 <read_keypad+0x16c>)
 80030f4:	f001 fafe 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 80030f8:	2201      	movs	r2, #1
 80030fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030fe:	484e      	ldr	r0, [pc, #312]	@ (8003238 <read_keypad+0x170>)
 8003100:	f001 faf8 	bl	80046f4 <HAL_GPIO_WritePin>
 8003104:	e049      	b.n	800319a <read_keypad+0xd2>
		}
		else if(i == 1) {
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d115      	bne.n	8003138 <read_keypad+0x70>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	2120      	movs	r1, #32
 8003110:	4848      	ldr	r0, [pc, #288]	@ (8003234 <read_keypad+0x16c>)
 8003112:	f001 faef 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	2140      	movs	r1, #64	@ 0x40
 800311a:	4846      	ldr	r0, [pc, #280]	@ (8003234 <read_keypad+0x16c>)
 800311c:	f001 faea 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003120:	2201      	movs	r2, #1
 8003122:	2180      	movs	r1, #128	@ 0x80
 8003124:	4843      	ldr	r0, [pc, #268]	@ (8003234 <read_keypad+0x16c>)
 8003126:	f001 fae5 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 800312a:	2201      	movs	r2, #1
 800312c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003130:	4841      	ldr	r0, [pc, #260]	@ (8003238 <read_keypad+0x170>)
 8003132:	f001 fadf 	bl	80046f4 <HAL_GPIO_WritePin>
 8003136:	e030      	b.n	800319a <read_keypad+0xd2>
		}
		else if(i == 2) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d115      	bne.n	800316a <read_keypad+0xa2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800313e:	2201      	movs	r2, #1
 8003140:	2120      	movs	r1, #32
 8003142:	483c      	ldr	r0, [pc, #240]	@ (8003234 <read_keypad+0x16c>)
 8003144:	f001 fad6 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003148:	2201      	movs	r2, #1
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	4839      	ldr	r0, [pc, #228]	@ (8003234 <read_keypad+0x16c>)
 800314e:	f001 fad1 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	2180      	movs	r1, #128	@ 0x80
 8003156:	4837      	ldr	r0, [pc, #220]	@ (8003234 <read_keypad+0x16c>)
 8003158:	f001 facc 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003162:	4835      	ldr	r0, [pc, #212]	@ (8003238 <read_keypad+0x170>)
 8003164:	f001 fac6 	bl	80046f4 <HAL_GPIO_WritePin>
 8003168:	e017      	b.n	800319a <read_keypad+0xd2>
		}
		else if(i == 3) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d114      	bne.n	800319a <read_keypad+0xd2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8003170:	2201      	movs	r2, #1
 8003172:	2120      	movs	r1, #32
 8003174:	482f      	ldr	r0, [pc, #188]	@ (8003234 <read_keypad+0x16c>)
 8003176:	f001 fabd 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
 800317c:	2140      	movs	r1, #64	@ 0x40
 800317e:	482d      	ldr	r0, [pc, #180]	@ (8003234 <read_keypad+0x16c>)
 8003180:	f001 fab8 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003184:	2201      	movs	r2, #1
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	482a      	ldr	r0, [pc, #168]	@ (8003234 <read_keypad+0x16c>)
 800318a:	f001 fab3 	bl	80046f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 800318e:	2200      	movs	r2, #0
 8003190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003194:	4828      	ldr	r0, [pc, #160]	@ (8003238 <read_keypad+0x170>)
 8003196:	f001 faad 	bl	80046f4 <HAL_GPIO_WritePin>
		}

		// Read current rows
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_RESET) return i*5 + 0;
 800319a:	2102      	movs	r1, #2
 800319c:	4825      	ldr	r0, [pc, #148]	@ (8003234 <read_keypad+0x16c>)
 800319e:	f001 fa91 	bl	80046c4 <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <read_keypad+0xea>
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	e03c      	b.n	800322c <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_RESET) return i*5 + 1;
 80031b2:	2104      	movs	r1, #4
 80031b4:	481f      	ldr	r0, [pc, #124]	@ (8003234 <read_keypad+0x16c>)
 80031b6:	f001 fa85 	bl	80046c4 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <read_keypad+0x104>
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	3301      	adds	r3, #1
 80031ca:	e02f      	b.n	800322c <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_RESET) return i*5 + 2;
 80031cc:	2108      	movs	r1, #8
 80031ce:	4819      	ldr	r0, [pc, #100]	@ (8003234 <read_keypad+0x16c>)
 80031d0:	f001 fa78 	bl	80046c4 <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <read_keypad+0x11e>
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	3302      	adds	r3, #2
 80031e4:	e022      	b.n	800322c <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin) == GPIO_PIN_RESET) return i*5 + 3;
 80031e6:	2110      	movs	r1, #16
 80031e8:	4812      	ldr	r0, [pc, #72]	@ (8003234 <read_keypad+0x16c>)
 80031ea:	f001 fa6b 	bl	80046c4 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <read_keypad+0x138>
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3303      	adds	r3, #3
 80031fe:	e015      	b.n	800322c <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW5_GPIO_Port, ROW5_Pin) == GPIO_PIN_RESET) return i*5 + 4;
 8003200:	2101      	movs	r1, #1
 8003202:	480c      	ldr	r0, [pc, #48]	@ (8003234 <read_keypad+0x16c>)
 8003204:	f001 fa5e 	bl	80046c4 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <read_keypad+0x152>
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	e008      	b.n	800322c <read_keypad+0x164>
	for(int i = 0; i < 4; i++) { // Set current column as output and low
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3301      	adds	r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	f77f af56 	ble.w	80030d4 <read_keypad+0xc>
	}

	return -1; // No key pressed
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58020c00 	.word	0x58020c00
 8003238:	58020400 	.word	0x58020400

0800323c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003242:	f000 febd 	bl	8003fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003246:	f000 f82b 	bl	80032a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800324a:	f000 f893 	bl	8003374 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800324e:	f000 f9c7 	bl	80035e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003252:	f000 f8df 	bl	8003414 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003256:	f000 f935 	bl	80034c4 <MX_SPI2_Init>
  MX_FATFS_Init();
 800325a:	f006 fdbf 	bl	8009ddc <MX_FATFS_Init>
  MX_TIM6_Init();
 800325e:	f000 f987 	bl	8003570 <MX_TIM6_Init>
  MX_I2S3_Init();
 8003262:	f000 f8a5 	bl	80033b0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  //Init display with 480x272 and set color as 16-bit per pixel
  RA8875_begin(LCD_RESET_GPIO_Port,LCD_RESET_Pin,LCD_WAIT_GPIO_Port,LCD_WAIT_Pin,RA8875_800x480,RA8875_16BPP);
 8003266:	2301      	movs	r3, #1
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	2303      	movs	r3, #3
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2310      	movs	r3, #16
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <main+0x60>)
 8003272:	2120      	movs	r1, #32
 8003274:	4809      	ldr	r0, [pc, #36]	@ (800329c <main+0x60>)
 8003276:	f7fd fc09 	bl	8000a8c <RA8875_begin>

  //Power on the dispaly
  RA8875_display_on(1);
 800327a:	2001      	movs	r0, #1
 800327c:	f7fe fbdf 	bl	8001a3e <RA8875_display_on>

  //Backlight on
  RA8875_pwm1_config(1,RA8875_PWM_CLK_DIV1);
 8003280:	2100      	movs	r1, #0
 8003282:	2001      	movs	r0, #1
 8003284:	f7fe fbb6 	bl	80019f4 <RA8875_pwm1_config>

//  title_screen();
//
//  HAL_Delay(1000);

  show_menu();
 8003288:	f7fe fc9a 	bl	8001bc0 <show_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	k = read_keypad();
 800328c:	f7ff ff1c 	bl	80030c8 <read_keypad>
 8003290:	6078      	str	r0, [r7, #4]
	process_input(k);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe ffac 	bl	80021f0 <process_input>
	k = read_keypad();
 8003298:	bf00      	nop
 800329a:	e7f7      	b.n	800328c <main+0x50>
 800329c:	58020800 	.word	0x58020800

080032a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b09c      	sub	sp, #112	@ 0x70
 80032a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032aa:	224c      	movs	r2, #76	@ 0x4c
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f00a fba1 	bl	800d9f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2220      	movs	r2, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00a fb9b 	bl	800d9f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032c0:	2002      	movs	r0, #2
 80032c2:	f001 fb53 	bl	800496c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4b28      	ldr	r3, [pc, #160]	@ (800336c <SystemClock_Config+0xcc>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <SystemClock_Config+0xcc>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80032d6:	4b25      	ldr	r3, [pc, #148]	@ (800336c <SystemClock_Config+0xcc>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <SystemClock_Config+0xd0>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80032e8:	4a21      	ldr	r2, [pc, #132]	@ (8003370 <SystemClock_Config+0xd0>)
 80032ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ee:	6193      	str	r3, [r2, #24]
 80032f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <SystemClock_Config+0xd0>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80032fc:	bf00      	nop
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <SystemClock_Config+0xd0>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330a:	d1f8      	bne.n	80032fe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800330c:	2302      	movs	r3, #2
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8003310:	2311      	movs	r3, #17
 8003312:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003314:	2340      	movs	r3, #64	@ 0x40
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003318:	2300      	movs	r3, #0
 800331a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb5d 	bl	80049e0 <HAL_RCC_OscConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800332c:	f000 fa5a 	bl	80037e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003330:	233f      	movs	r3, #63	@ 0x3f
 8003332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f001 ff9d 	bl	8005294 <HAL_RCC_ClockConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003360:	f000 fa40 	bl	80037e4 <Error_Handler>
  }
}
 8003364:	bf00      	nop
 8003366:	3770      	adds	r7, #112	@ 0x70
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58000400 	.word	0x58000400
 8003370:	58024800 	.word	0x58024800

08003374 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0b0      	sub	sp, #192	@ 0xc0
 8003378:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800337a:	463b      	mov	r3, r7
 800337c:	22c0      	movs	r2, #192	@ 0xc0
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f00a fb38 	bl	800d9f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003386:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003392:	2300      	movs	r3, #0
 8003394:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003396:	463b      	mov	r3, r7
 8003398:	4618      	mov	r0, r3
 800339a:	f002 faf1 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80033a4:	f000 fa1e 	bl	80037e4 <Error_Handler>
  }
}
 80033a8:	bf00      	nop
 80033aa:	37c0      	adds	r7, #192	@ 0xc0
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80033b4:	4b15      	ldr	r3, [pc, #84]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033b6:	4a16      	ldr	r2, [pc, #88]	@ (8003410 <MX_I2S3_Init+0x60>)
 80033b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80033ba:	4b14      	ldr	r3, [pc, #80]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033bc:	220a      	movs	r2, #10
 80033be:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80033c0:	4b12      	ldr	r3, [pc, #72]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033d4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80033d8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80033da:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80033f8:	4804      	ldr	r0, [pc, #16]	@ (800340c <MX_I2S3_Init+0x5c>)
 80033fa:	f001 f995 	bl	8004728 <HAL_I2S_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8003404:	f000 f9ee 	bl	80037e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	24000408 	.word	0x24000408
 8003410:	40003c00 	.word	0x40003c00

08003414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003418:	4b28      	ldr	r3, [pc, #160]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800341a:	4a29      	ldr	r2, [pc, #164]	@ (80034c0 <MX_SPI1_Init+0xac>)
 800341c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341e:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003420:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003426:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800342c:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800342e:	2207      	movs	r2, #7
 8003430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003432:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800343c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003444:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800344a:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800344c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003454:	2200      	movs	r2, #0
 8003456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003458:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003460:	2200      	movs	r2, #0
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003464:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003466:	2200      	movs	r2, #0
 8003468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800346a:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800346c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003474:	2200      	movs	r2, #0
 8003476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003478:	4b10      	ldr	r3, [pc, #64]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800347a:	2200      	movs	r2, #0
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800347e:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800348a:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800348c:	2200      	movs	r2, #0
 800348e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003490:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003492:	2200      	movs	r2, #0
 8003494:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <MX_SPI1_Init+0xa8>)
 8003498:	2200      	movs	r2, #0
 800349a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800349c:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <MX_SPI1_Init+0xa8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <MX_SPI1_Init+0xa8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034a8:	4804      	ldr	r0, [pc, #16]	@ (80034bc <MX_SPI1_Init+0xa8>)
 80034aa:	f004 ff67 	bl	800837c <HAL_SPI_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80034b4:	f000 f996 	bl	80037e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2400045c 	.word	0x2400045c
 80034c0:	40013000 	.word	0x40013000

080034c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034c8:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034ca:	4a28      	ldr	r2, [pc, #160]	@ (800356c <MX_SPI2_Init+0xa8>)
 80034cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034ce:	4b26      	ldr	r3, [pc, #152]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80034d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034de:	2207      	movs	r2, #7
 80034e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e2:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80034f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <MX_SPI2_Init+0xa4>)
 80034f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80034fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003504:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003506:	2200      	movs	r2, #0
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350a:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <MX_SPI2_Init+0xa4>)
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003510:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003512:	2200      	movs	r2, #0
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003518:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003520:	2200      	movs	r2, #0
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003524:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003526:	2200      	movs	r2, #0
 8003528:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800352a:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <MX_SPI2_Init+0xa4>)
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003538:	2200      	movs	r2, #0
 800353a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800353c:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <MX_SPI2_Init+0xa4>)
 800353e:	2200      	movs	r2, #0
 8003540:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003544:	2200      	movs	r2, #0
 8003546:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <MX_SPI2_Init+0xa4>)
 800354a:	2200      	movs	r2, #0
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003550:	2200      	movs	r2, #0
 8003552:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003554:	4804      	ldr	r0, [pc, #16]	@ (8003568 <MX_SPI2_Init+0xa4>)
 8003556:	f004 ff11 	bl	800837c <HAL_SPI_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003560:	f000 f940 	bl	80037e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	240004e4 	.word	0x240004e4
 800356c:	40003800 	.word	0x40003800

08003570 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <MX_TIM6_Init+0x68>)
 8003582:	4a16      	ldr	r2, [pc, #88]	@ (80035dc <MX_TIM6_Init+0x6c>)
 8003584:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <MX_TIM6_Init+0x68>)
 8003588:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800358c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <MX_TIM6_Init+0x68>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003594:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <MX_TIM6_Init+0x68>)
 8003596:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800359a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <MX_TIM6_Init+0x68>)
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035a2:	480d      	ldr	r0, [pc, #52]	@ (80035d8 <MX_TIM6_Init+0x68>)
 80035a4:	f006 f891 	bl	80096ca <HAL_TIM_Base_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80035ae:	f000 f919 	bl	80037e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035b2:	2320      	movs	r3, #32
 80035b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4806      	ldr	r0, [pc, #24]	@ (80035d8 <MX_TIM6_Init+0x68>)
 80035c0:	f006 fb60 	bl	8009c84 <HAL_TIMEx_MasterConfigSynchronization>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80035ca:	f000 f90b 	bl	80037e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2400056c 	.word	0x2400056c
 80035dc:	40001000 	.word	0x40001000

080035e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	@ 0x28
 80035e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	4b75      	ldr	r3, [pc, #468]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fc:	4a73      	ldr	r2, [pc, #460]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003606:	4b71      	ldr	r3, [pc, #452]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	4b6d      	ldr	r3, [pc, #436]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361a:	4a6c      	ldr	r2, [pc, #432]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003624:	4b69      	ldr	r3, [pc, #420]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003638:	4a64      	ldr	r2, [pc, #400]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003642:	4b62      	ldr	r3, [pc, #392]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003650:	4b5e      	ldr	r3, [pc, #376]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003656:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003660:	4b5a      	ldr	r3, [pc, #360]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800366e:	4b57      	ldr	r3, [pc, #348]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003674:	4a55      	ldr	r2, [pc, #340]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800367e:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <MX_GPIO_Init+0x1ec>)
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800368c:	2200      	movs	r2, #0
 800368e:	2120      	movs	r1, #32
 8003690:	484f      	ldr	r0, [pc, #316]	@ (80037d0 <MX_GPIO_Init+0x1f0>)
 8003692:	f001 f82f 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8003696:	2201      	movs	r2, #1
 8003698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800369c:	484d      	ldr	r0, [pc, #308]	@ (80037d4 <MX_GPIO_Init+0x1f4>)
 800369e:	f001 f829 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036a8:	484b      	ldr	r0, [pc, #300]	@ (80037d8 <MX_GPIO_Init+0x1f8>)
 80036aa:	f001 f823 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80036ae:	2200      	movs	r2, #0
 80036b0:	21e0      	movs	r1, #224	@ 0xe0
 80036b2:	4849      	ldr	r0, [pc, #292]	@ (80037d8 <MX_GPIO_Init+0x1f8>)
 80036b4:	f001 f81e 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036be:	4845      	ldr	r0, [pc, #276]	@ (80037d4 <MX_GPIO_Init+0x1f4>)
 80036c0:	f001 f818 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2103      	movs	r1, #3
 80036c8:	4844      	ldr	r0, [pc, #272]	@ (80037dc <MX_GPIO_Init+0x1fc>)
 80036ca:	f001 f813 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dummy_HiZ_Pin */
  GPIO_InitStruct.Pin = Dummy_HiZ_Pin;
 80036ce:	2310      	movs	r3, #16
 80036d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Dummy_HiZ_GPIO_Port, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	483f      	ldr	r0, [pc, #252]	@ (80037e0 <MX_GPIO_Init+0x200>)
 80036e2:	f000 fe3f 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 80036e6:	2310      	movs	r3, #16
 80036e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	4835      	ldr	r0, [pc, #212]	@ (80037d0 <MX_GPIO_Init+0x1f0>)
 80036fa:	f000 fe33 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80036fe:	2320      	movs	r3, #32
 8003700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003706:	2302      	movs	r3, #2
 8003708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	4619      	mov	r1, r3
 8003714:	482e      	ldr	r0, [pc, #184]	@ (80037d0 <MX_GPIO_Init+0x1f0>)
 8003716:	f000 fe25 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800371a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800371e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003720:	2301      	movs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4619      	mov	r1, r3
 8003732:	4828      	ldr	r0, [pc, #160]	@ (80037d4 <MX_GPIO_Init+0x1f4>)
 8003734:	f000 fe16 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800373c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003746:	2303      	movs	r3, #3
 8003748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	4821      	ldr	r0, [pc, #132]	@ (80037d8 <MX_GPIO_Init+0x1f8>)
 8003752:	f000 fe07 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8003756:	231f      	movs	r3, #31
 8003758:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	4619      	mov	r1, r3
 8003768:	481b      	ldr	r0, [pc, #108]	@ (80037d8 <MX_GPIO_Init+0x1f8>)
 800376a:	f000 fdfb 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 800376e:	23e0      	movs	r3, #224	@ 0xe0
 8003770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4814      	ldr	r0, [pc, #80]	@ (80037d8 <MX_GPIO_Init+0x1f8>)
 8003786:	f000 fded 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 800378a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800378e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003790:	2301      	movs	r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	480c      	ldr	r0, [pc, #48]	@ (80037d4 <MX_GPIO_Init+0x1f4>)
 80037a4:	f000 fdde 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 80037a8:	2303      	movs	r3, #3
 80037aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	2300      	movs	r3, #0
 80037b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4807      	ldr	r0, [pc, #28]	@ (80037dc <MX_GPIO_Init+0x1fc>)
 80037c0:	f000 fdd0 	bl	8004364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037c4:	bf00      	nop
 80037c6:	3728      	adds	r7, #40	@ 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	58024400 	.word	0x58024400
 80037d0:	58020800 	.word	0x58020800
 80037d4:	58020400 	.word	0x58020400
 80037d8:	58020c00 	.word	0x58020c00
 80037dc:	58021000 	.word	0x58021000
 80037e0:	58020000 	.word	0x58020000

080037e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037e8:	b672      	cpsid	i
}
 80037ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <Error_Handler+0x8>

080037f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_MspInit+0x30>)
 80037f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037fc:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_MspInit+0x30>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_MspInit+0x30>)
 8003808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	58024400 	.word	0x58024400

08003824 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0bc      	sub	sp, #240	@ 0xf0
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	22c0      	movs	r2, #192	@ 0xc0
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f00a f8d6 	bl	800d9f6 <memset>
  if(hi2s->Instance==SPI3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4c      	ldr	r2, [pc, #304]	@ (8003980 <HAL_I2S_MspInit+0x15c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	f040 8090 	bne.w	8003976 <HAL_I2S_MspInit+0x152>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003856:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003862:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003866:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f002 f887 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8003878:	f7ff ffb4 	bl	80037e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800387c:	4b41      	ldr	r3, [pc, #260]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 800387e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003882:	4a40      	ldr	r2, [pc, #256]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 8003884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003888:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 800388e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	4b3a      	ldr	r3, [pc, #232]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 800389c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a0:	4a38      	ldr	r2, [pc, #224]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038aa:	4b36      	ldr	r3, [pc, #216]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b8:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038be:	4a31      	ldr	r2, [pc, #196]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038dc:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038e6:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <HAL_I2S_MspInit+0x160>)
 80038e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038f4:	2304      	movs	r3, #4
 80038f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800390c:	2307      	movs	r3, #7
 800390e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003916:	4619      	mov	r1, r3
 8003918:	481b      	ldr	r0, [pc, #108]	@ (8003988 <HAL_I2S_MspInit+0x164>)
 800391a:	f000 fd23 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800391e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003938:	2306      	movs	r3, #6
 800393a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003942:	4619      	mov	r1, r3
 8003944:	4811      	ldr	r0, [pc, #68]	@ (800398c <HAL_I2S_MspInit+0x168>)
 8003946:	f000 fd0d 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800394a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003964:	2306      	movs	r3, #6
 8003966:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800396e:	4619      	mov	r1, r3
 8003970:	4807      	ldr	r0, [pc, #28]	@ (8003990 <HAL_I2S_MspInit+0x16c>)
 8003972:	f000 fcf7 	bl	8004364 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003976:	bf00      	nop
 8003978:	37f0      	adds	r7, #240	@ 0xf0
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40003c00 	.word	0x40003c00
 8003984:	58024400 	.word	0x58024400
 8003988:	58020400 	.word	0x58020400
 800398c:	58020000 	.word	0x58020000
 8003990:	58020800 	.word	0x58020800

08003994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0be      	sub	sp, #248	@ 0xf8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039ac:	f107 0320 	add.w	r3, r7, #32
 80039b0:	22c0      	movs	r2, #192	@ 0xc0
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00a f81e 	bl	800d9f6 <memset>
  if(hspi->Instance==SPI1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	@ (8003b88 <HAL_SPI_MspInit+0x1f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d16b      	bne.n	8003a9c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80039c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80039d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 ffcf 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80039e8:	f7ff fefc 	bl	80037e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039ec:	4b67      	ldr	r3, [pc, #412]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 80039ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039f2:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 80039f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039fc:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 80039fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0a:	4b60      	ldr	r3, [pc, #384]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a10:	4a5e      	ldr	r2, [pc, #376]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a28:	4b58      	ldr	r3, [pc, #352]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a2e:	4a57      	ldr	r2, [pc, #348]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a38:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a46:	23c0      	movs	r3, #192	@ 0xc0
 8003a48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5e:	2305      	movs	r3, #5
 8003a60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4849      	ldr	r0, [pc, #292]	@ (8003b90 <HAL_SPI_MspInit+0x1fc>)
 8003a6c:	f000 fc7a 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a70:	2308      	movs	r3, #8
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a88:	2305      	movs	r3, #5
 8003a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003a92:	4619      	mov	r1, r3
 8003a94:	483f      	ldr	r0, [pc, #252]	@ (8003b94 <HAL_SPI_MspInit+0x200>)
 8003a96:	f000 fc65 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a9a:	e070      	b.n	8003b7e <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8003b98 <HAL_SPI_MspInit+0x204>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d16b      	bne.n	8003b7e <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003aa6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003ab2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 ff5e 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8003aca:	f7ff fe8b 	bl	80037e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ada:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ade:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003af2:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003afc:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b10:	4a1e      	ldr	r2, [pc, #120]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <HAL_SPI_MspInit+0x1f8>)
 8003b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003b28:	2306      	movs	r3, #6
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b40:	2305      	movs	r3, #5
 8003b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b46:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4813      	ldr	r0, [pc, #76]	@ (8003b9c <HAL_SPI_MspInit+0x208>)
 8003b4e:	f000 fc09 	bl	8004364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b6c:	2305      	movs	r3, #5
 8003b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b72:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4806      	ldr	r0, [pc, #24]	@ (8003b94 <HAL_SPI_MspInit+0x200>)
 8003b7a:	f000 fbf3 	bl	8004364 <HAL_GPIO_Init>
}
 8003b7e:	bf00      	nop
 8003b80:	37f8      	adds	r7, #248	@ 0xf8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40013000 	.word	0x40013000
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58020000 	.word	0x58020000
 8003b94:	58020400 	.word	0x58020400
 8003b98:	40003800 	.word	0x40003800
 8003b9c:	58020800 	.word	0x58020800

08003ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	@ (8003be8 <HAL_TIM_Base_MspInit+0x48>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d116      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <HAL_TIM_Base_MspInit+0x4c>)
 8003bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bec <HAL_TIM_Base_MspInit+0x4c>)
 8003bba:	f043 0310 	orr.w	r3, r3, #16
 8003bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_TIM_Base_MspInit+0x4c>)
 8003bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	2036      	movs	r0, #54	@ 0x36
 8003bd6:	f000 fb90 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bda:	2036      	movs	r0, #54	@ 0x36
 8003bdc:	f000 fba7 	bl	800432e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40001000 	.word	0x40001000
 8003bec:	58024400 	.word	0x58024400

08003bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <NMI_Handler+0x4>

08003bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfc:	bf00      	nop
 8003bfe:	e7fd      	b.n	8003bfc <HardFault_Handler+0x4>

08003c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <MemManage_Handler+0x4>

08003c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <BusFault_Handler+0x4>

08003c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <UsageFault_Handler+0x4>

08003c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c46:	f000 fa2d 	bl	80040a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c56:	481b      	ldr	r0, [pc, #108]	@ (8003cc4 <TIM6_DAC_IRQHandler+0x74>)
 8003c58:	f005 fe35 	bl	80098c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc8 <TIM6_DAC_IRQHandler+0x78>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <TIM6_DAC_IRQHandler+0x78>)
 8003c66:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <TIM6_DAC_IRQHandler+0x78>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	4916      	ldr	r1, [pc, #88]	@ (8003ccc <TIM6_DAC_IRQHandler+0x7c>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f009 fe5c 	bl	800d930 <siprintf>
  RA8875_text_mode();
 8003c78:	f7fd fd94 	bl	80017a4 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8003c7c:	2132      	movs	r1, #50	@ 0x32
 8003c7e:	20c8      	movs	r0, #200	@ 0xc8
 8003c80:	f7fd fdb5 	bl	80017ee <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8003c84:	211f      	movs	r1, #31
 8003c86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c8a:	f7fd fdee 	bl	800186a <RA8875_text_color>
  RA8875_text_scale(1);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f7fd fe48 	bl	8001924 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd fe6d 	bl	8001978 <RA8875_text_write>
  RA8875_graphic_mode();
 8003c9e:	f7fd f877 	bl	8000d90 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 8003ca2:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <TIM6_DAC_IRQHandler+0x78>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 8003caa:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <TIM6_DAC_IRQHandler+0x78>)
 8003cac:	220a      	movs	r2, #10
 8003cae:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 8003cb0:	4804      	ldr	r0, [pc, #16]	@ (8003cc4 <TIM6_DAC_IRQHandler+0x74>)
 8003cb2:	f005 fdd9 	bl	8009868 <HAL_TIM_Base_Stop_IT>
	  end_game();
 8003cb6:	f7fe fdd1 	bl	800285c <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2400056c 	.word	0x2400056c
 8003cc8:	2400000c 	.word	0x2400000c
 8003ccc:	08010960 	.word	0x08010960

08003cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return 1;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_kill>:

int _kill(int pid, int sig)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cea:	f009 ff53 	bl	800db94 <__errno>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2216      	movs	r2, #22
 8003cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_exit>:

void _exit (int status)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ffe7 	bl	8003ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <_exit+0x12>

08003d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e00a      	b.n	8003d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d28:	f3af 8000 	nop.w
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	60ba      	str	r2, [r7, #8]
 8003d34:	b2ca      	uxtb	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dbf0      	blt.n	8003d28 <_read+0x12>
  }

  return len;
 8003d46:	687b      	ldr	r3, [r7, #4]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e009      	b.n	8003d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	60ba      	str	r2, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3301      	adds	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dbf1      	blt.n	8003d62 <_write+0x12>
  }
  return len;
 8003d7e:	687b      	ldr	r3, [r7, #4]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_close>:

int _close(int file)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003db0:	605a      	str	r2, [r3, #4]
  return 0;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_isatty>:

int _isatty(int file)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dc8:	2301      	movs	r3, #1
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003df8:	4a14      	ldr	r2, [pc, #80]	@ (8003e4c <_sbrk+0x5c>)
 8003dfa:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <_sbrk+0x60>)
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <_sbrk+0x64>)
 8003e0e:	4a12      	ldr	r2, [pc, #72]	@ (8003e58 <_sbrk+0x68>)
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <_sbrk+0x64>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d207      	bcs.n	8003e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e20:	f009 feb8 	bl	800db94 <__errno>
 8003e24:	4603      	mov	r3, r0
 8003e26:	220c      	movs	r2, #12
 8003e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e009      	b.n	8003e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e30:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <_sbrk+0x64>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4a05      	ldr	r2, [pc, #20]	@ (8003e54 <_sbrk+0x64>)
 8003e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	24080000 	.word	0x24080000
 8003e50:	00000400 	.word	0x00000400
 8003e54:	240005b8 	.word	0x240005b8
 8003e58:	24000758 	.word	0x24000758

08003e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e60:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <SystemInit+0xe4>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	4a36      	ldr	r2, [pc, #216]	@ (8003f40 <SystemInit+0xe4>)
 8003e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e70:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <SystemInit+0xe8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2b06      	cmp	r3, #6
 8003e7a:	d807      	bhi.n	8003e8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e7c:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <SystemInit+0xe8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 030f 	bic.w	r3, r3, #15
 8003e84:	4a2f      	ldr	r2, [pc, #188]	@ (8003f44 <SystemInit+0xe8>)
 8003e86:	f043 0307 	orr.w	r3, r3, #7
 8003e8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <SystemInit+0xec>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2d      	ldr	r2, [pc, #180]	@ (8003f48 <SystemInit+0xec>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <SystemInit+0xec>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f48 <SystemInit+0xec>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4929      	ldr	r1, [pc, #164]	@ (8003f48 <SystemInit+0xec>)
 8003ea4:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <SystemInit+0xf0>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003eaa:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <SystemInit+0xe8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003eb6:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <SystemInit+0xe8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <SystemInit+0xe8>)
 8003ec0:	f043 0307 	orr.w	r3, r3, #7
 8003ec4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ec6:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <SystemInit+0xec>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <SystemInit+0xec>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <SystemInit+0xec>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <SystemInit+0xec>)
 8003eda:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <SystemInit+0xf4>)
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <SystemInit+0xec>)
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <SystemInit+0xf8>)
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ee4:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <SystemInit+0xec>)
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f58 <SystemInit+0xfc>)
 8003ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003eea:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <SystemInit+0xec>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <SystemInit+0xec>)
 8003ef2:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <SystemInit+0xfc>)
 8003ef4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <SystemInit+0xec>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <SystemInit+0xec>)
 8003efe:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <SystemInit+0xfc>)
 8003f00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <SystemInit+0xec>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <SystemInit+0xec>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f48 <SystemInit+0xec>)
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <SystemInit+0xec>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <SystemInit+0x100>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <SystemInit+0x104>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f26:	d202      	bcs.n	8003f2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <SystemInit+0x108>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <SystemInit+0x10c>)
 8003f30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003f34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00
 8003f44:	52002000 	.word	0x52002000
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f50:	02020200 	.word	0x02020200
 8003f54:	01ff0000 	.word	0x01ff0000
 8003f58:	01010280 	.word	0x01010280
 8003f5c:	5c001000 	.word	0x5c001000
 8003f60:	ffff0000 	.word	0xffff0000
 8003f64:	51008108 	.word	0x51008108
 8003f68:	52004000 	.word	0x52004000

08003f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f70:	f7ff ff74 	bl	8003e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f74:	480c      	ldr	r0, [pc, #48]	@ (8003fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f76:	490d      	ldr	r1, [pc, #52]	@ (8003fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f78:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f7c:	e002      	b.n	8003f84 <LoopCopyDataInit>

08003f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f82:	3304      	adds	r3, #4

08003f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f88:	d3f9      	bcc.n	8003f7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f90:	e001      	b.n	8003f96 <LoopFillZerobss>

08003f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f94:	3204      	adds	r2, #4

08003f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f98:	d3fb      	bcc.n	8003f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f009 fe01 	bl	800dba0 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 8003f9e:	f7ff f94d 	bl	800323c <main>
  bx  lr
 8003fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fa4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003fa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003fac:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 8003fb0:	08011038 	.word	0x08011038
  ldr r2, =_sbss
 8003fb4:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 8003fb8:	24000754 	.word	0x24000754

08003fbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <ADC3_IRQHandler>
	...

08003fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc6:	2003      	movs	r0, #3
 8003fc8:	f000 f98c 	bl	80042e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fcc:	f001 fb18 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b15      	ldr	r3, [pc, #84]	@ (8004028 <HAL_Init+0x68>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	4913      	ldr	r1, [pc, #76]	@ (800402c <HAL_Init+0x6c>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fea:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <HAL_Init+0x68>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800402c <HAL_Init+0x6c>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <HAL_Init+0x70>)
 8004002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004004:	4a0b      	ldr	r2, [pc, #44]	@ (8004034 <HAL_Init+0x74>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800400a:	2000      	movs	r0, #0
 800400c:	f000 f814 	bl	8004038 <HAL_InitTick>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e002      	b.n	8004020 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800401a:	f7ff fbe9 	bl	80037f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58024400 	.word	0x58024400
 800402c:	080109a8 	.word	0x080109a8
 8004030:	24000014 	.word	0x24000014
 8004034:	24000010 	.word	0x24000010

08004038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004040:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_InitTick+0x60>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e021      	b.n	8004090 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <HAL_InitTick+0x64>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <HAL_InitTick+0x60>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800405a:	fbb3 f3f1 	udiv	r3, r3, r1
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f971 	bl	800434a <HAL_SYSTICK_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00e      	b.n	8004090 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d80a      	bhi.n	800408e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004078:	2200      	movs	r2, #0
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	f000 f93b 	bl	80042fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004084:	4a06      	ldr	r2, [pc, #24]	@ (80040a0 <HAL_InitTick+0x68>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2400001c 	.word	0x2400001c
 800409c:	24000010 	.word	0x24000010
 80040a0:	24000018 	.word	0x24000018

080040a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_IncTick+0x20>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_IncTick+0x24>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_IncTick+0x24>)
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2400001c 	.word	0x2400001c
 80040c8:	240005bc 	.word	0x240005bc

080040cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return uwTick;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <HAL_GetTick+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	240005bc 	.word	0x240005bc

080040e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7ff ffee 	bl	80040cc <HAL_GetTick>
 80040f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d005      	beq.n	800410a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_Delay+0x44>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800410a:	bf00      	nop
 800410c:	f7ff ffde 	bl	80040cc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	429a      	cmp	r2, r3
 800411a:	d8f7      	bhi.n	800410c <HAL_Delay+0x28>
  {
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2400001c 	.word	0x2400001c

0800412c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004130:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <HAL_GetREVID+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0c1b      	lsrs	r3, r3, #16
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	5c001000 	.word	0x5c001000

08004144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <__NVIC_SetPriorityGrouping+0x40>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004160:	4013      	ands	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004172:	4a04      	ldr	r2, [pc, #16]	@ (8004184 <__NVIC_SetPriorityGrouping+0x40>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	60d3      	str	r3, [r2, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00
 8004188:	05fa0000 	.word	0x05fa0000

0800418c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004190:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f003 0307 	and.w	r3, r3, #7
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db0b      	blt.n	80041d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	f003 021f 	and.w	r2, r3, #31
 80041c0:	4907      	ldr	r1, [pc, #28]	@ (80041e0 <__NVIC_EnableIRQ+0x38>)
 80041c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2001      	movs	r0, #1
 80041ca:	fa00 f202 	lsl.w	r2, r0, r2
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e100 	.word	0xe000e100

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	@ (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	@ (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	@ 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	bf28      	it	cs
 8004256:	2304      	movcs	r3, #4
 8004258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3304      	adds	r3, #4
 800425e:	2b06      	cmp	r3, #6
 8004260:	d902      	bls.n	8004268 <NVIC_EncodePriority+0x30>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b03      	subs	r3, #3
 8004266:	e000      	b.n	800426a <NVIC_EncodePriority+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	f04f 32ff 	mov.w	r2, #4294967295
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43d9      	mvns	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	4313      	orrs	r3, r2
         );
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	@ 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b0:	d301      	bcc.n	80042b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00f      	b.n	80042d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b6:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <SysTick_Config+0x40>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042be:	210f      	movs	r1, #15
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	f7ff ff8e 	bl	80041e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <SysTick_Config+0x40>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ce:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <SysTick_Config+0x40>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000e010 	.word	0xe000e010

080042e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff29 	bl	8004144 <__NVIC_SetPriorityGrouping>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	4603      	mov	r3, r0
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004308:	f7ff ff40 	bl	800418c <__NVIC_GetPriorityGrouping>
 800430c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7ff ff90 	bl	8004238 <NVIC_EncodePriority>
 8004318:	4602      	mov	r2, r0
 800431a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff5f 	bl	80041e4 <__NVIC_SetPriority>
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	4603      	mov	r3, r0
 8004336:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff33 	bl	80041a8 <__NVIC_EnableIRQ>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ffa4 	bl	80042a0 <SysTick_Config>
 8004358:	4603      	mov	r3, r0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	@ 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004372:	4b89      	ldr	r3, [pc, #548]	@ (8004598 <HAL_GPIO_Init+0x234>)
 8004374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004376:	e194      	b.n	80046a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8186 	beq.w	800469c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d005      	beq.n	80043a8 <HAL_GPIO_Init+0x44>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d130      	bne.n	800440a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043de:	2201      	movs	r2, #1
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 0201 	and.w	r2, r3, #1
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b03      	cmp	r3, #3
 8004414:	d017      	beq.n	8004446 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	2203      	movs	r2, #3
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d123      	bne.n	800449a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	08da      	lsrs	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3208      	adds	r2, #8
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80e0 	beq.w	800469c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	4b2f      	ldr	r3, [pc, #188]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044e2:	4a2e      	ldr	r2, [pc, #184]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80044ec:	4b2b      	ldr	r3, [pc, #172]	@ (800459c <HAL_GPIO_Init+0x238>)
 80044ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a29      	ldr	r2, [pc, #164]	@ (80045a0 <HAL_GPIO_Init+0x23c>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a20      	ldr	r2, [pc, #128]	@ (80045a4 <HAL_GPIO_Init+0x240>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d052      	beq.n	80045cc <HAL_GPIO_Init+0x268>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1f      	ldr	r2, [pc, #124]	@ (80045a8 <HAL_GPIO_Init+0x244>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d031      	beq.n	8004592 <HAL_GPIO_Init+0x22e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	@ (80045ac <HAL_GPIO_Init+0x248>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x22a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <HAL_GPIO_Init+0x24c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x226>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_GPIO_Init+0x250>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1b      	ldr	r2, [pc, #108]	@ (80045b8 <HAL_GPIO_Init+0x254>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <HAL_GPIO_Init+0x258>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x21a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_GPIO_Init+0x25c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x216>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_GPIO_Init+0x260>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x212>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <HAL_GPIO_Init+0x264>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x20e>
 800456e:	2309      	movs	r3, #9
 8004570:	e02d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004572:	230a      	movs	r3, #10
 8004574:	e02b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004576:	2308      	movs	r3, #8
 8004578:	e029      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457a:	2307      	movs	r3, #7
 800457c:	e027      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457e:	2306      	movs	r3, #6
 8004580:	e025      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004582:	2305      	movs	r3, #5
 8004584:	e023      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004586:	2304      	movs	r3, #4
 8004588:	e021      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458a:	2303      	movs	r3, #3
 800458c:	e01f      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458e:	2302      	movs	r3, #2
 8004590:	e01d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004592:	2301      	movs	r3, #1
 8004594:	e01b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004596:	bf00      	nop
 8004598:	58000080 	.word	0x58000080
 800459c:	58024400 	.word	0x58024400
 80045a0:	58000400 	.word	0x58000400
 80045a4:	58020000 	.word	0x58020000
 80045a8:	58020400 	.word	0x58020400
 80045ac:	58020800 	.word	0x58020800
 80045b0:	58020c00 	.word	0x58020c00
 80045b4:	58021000 	.word	0x58021000
 80045b8:	58021400 	.word	0x58021400
 80045bc:	58021800 	.word	0x58021800
 80045c0:	58021c00 	.word	0x58021c00
 80045c4:	58022000 	.word	0x58022000
 80045c8:	58022400 	.word	0x58022400
 80045cc:	2300      	movs	r3, #0
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045de:	4938      	ldr	r1, [pc, #224]	@ (80046c0 <HAL_GPIO_Init+0x35c>)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f ae63 	bne.w	8004378 <HAL_GPIO_Init+0x14>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	@ 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58000400 	.word	0x58000400

080046c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	e001      	b.n	80046e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
 8004700:	4613      	mov	r3, r2
 8004702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004704:	787b      	ldrb	r3, [r7, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004710:	e003      	b.n	800471a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	041a      	lsls	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e10d      	b.n	8004956 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff f868 	bl	8003824 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d107      	bne.n	800477a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d008      	beq.n	800479c <HAL_I2S_Init+0x74>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d004      	beq.n	800479c <HAL_I2S_Init+0x74>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b0a      	cmp	r3, #10
 8004798:	f040 8087 	bne.w	80048aa <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d05a      	beq.n	800485a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80047ac:	2302      	movs	r3, #2
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e001      	b.n	80047b6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80047b2:	2301      	movs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b30      	cmp	r3, #48	@ 0x30
 80047bc:	d003      	beq.n	80047c6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80047c2:	2bb0      	cmp	r3, #176	@ 0xb0
 80047c4:	d102      	bne.n	80047cc <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80047c6:	2301      	movs	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e001      	b.n	80047d0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80047d0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f002 fadc 	bl	8006d94 <HAL_RCCEx_GetPeriphCLKFreq>
 80047dc:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047e6:	d113      	bne.n	8004810 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80047e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	3305      	adds	r3, #5
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e014      	b.n	800483a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004810:	2220      	movs	r2, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	fbb2 f2f3 	udiv	r2, r2, r3
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	3305      	adds	r3, #5
 8004838:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4a48      	ldr	r2, [pc, #288]	@ (8004960 <HAL_I2S_Init+0x238>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	08db      	lsrs	r3, r3, #3
 8004844:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e003      	b.n	8004862 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800485a:	2302      	movs	r3, #2
 800485c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <HAL_I2S_Init+0x146>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d002      	beq.n	8004874 <HAL_I2S_Init+0x14c>
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2bff      	cmp	r3, #255	@ 0xff
 8004872:	d907      	bls.n	8004884 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	f043 0210 	orr.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e068      	b.n	8004956 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 800488a:	2301      	movs	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004894:	4b33      	ldr	r3, [pc, #204]	@ (8004964 <HAL_I2S_Init+0x23c>)
 8004896:	4013      	ands	r3, r2
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	0411      	lsls	r1, r2, #16
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0612      	lsls	r2, r2, #24
 80048a0:	4311      	orrs	r1, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004968 <HAL_I2S_Init+0x240>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6851      	ldr	r1, [r2, #4]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6992      	ldr	r2, [r2, #24]
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6a12      	ldr	r2, [r2, #32]
 80048ce:	4311      	orrs	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6912      	ldr	r2, [r2, #16]
 80048da:	430a      	orrs	r2, r1
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80048f0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004900:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d007      	beq.n	8004930 <HAL_I2S_Init+0x208>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d003      	beq.n	8004930 <HAL_I2S_Init+0x208>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b0a      	cmp	r3, #10
 800492e:	d10a      	bne.n	8004946 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	cccccccd 	.word	0xcccccccd
 8004964:	fe00ffff 	.word	0xfe00ffff
 8004968:	fdff9040 	.word	0xfdff9040

0800496c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004974:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <HAL_PWREx_ConfigSupply+0x70>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d00a      	beq.n	8004996 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004980:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <HAL_PWREx_ConfigSupply+0x70>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e01f      	b.n	80049d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e01d      	b.n	80049d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004996:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <HAL_PWREx_ConfigSupply+0x70>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f023 0207 	bic.w	r2, r3, #7
 800499e:	490f      	ldr	r1, [pc, #60]	@ (80049dc <HAL_PWREx_ConfigSupply+0x70>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049a6:	f7ff fb91 	bl	80040cc <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049ac:	e009      	b.n	80049c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ae:	f7ff fb8d 	bl	80040cc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049bc:	d901      	bls.n	80049c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e007      	b.n	80049d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_PWREx_ConfigSupply+0x70>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ce:	d1ee      	bne.n	80049ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	58024800 	.word	0x58024800

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f000 bc48 	b.w	8005284 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8088 	beq.w	8004b12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	4b99      	ldr	r3, [pc, #612]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a0c:	4b96      	ldr	r3, [pc, #600]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d007      	beq.n	8004a28 <HAL_RCC_OscConfig+0x48>
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	d111      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62>
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4b8f      	ldr	r3, [pc, #572]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d06d      	beq.n	8004b10 <HAL_RCC_OscConfig+0x130>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d169      	bne.n	8004b10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f000 bc21 	b.w	8005284 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x7a>
 8004a4c:	4b86      	ldr	r3, [pc, #536]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a85      	ldr	r2, [pc, #532]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e02e      	b.n	8004ab8 <HAL_RCC_OscConfig+0xd8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x9c>
 8004a62:	4b81      	ldr	r3, [pc, #516]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a80      	ldr	r2, [pc, #512]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7d      	ldr	r2, [pc, #500]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e01d      	b.n	8004ab8 <HAL_RCC_OscConfig+0xd8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004a86:	4b78      	ldr	r3, [pc, #480]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a77      	ldr	r2, [pc, #476]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b75      	ldr	r3, [pc, #468]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a74      	ldr	r2, [pc, #464]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0xd8>
 8004aa0:	4b71      	ldr	r3, [pc, #452]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a70      	ldr	r2, [pc, #448]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b6e      	ldr	r3, [pc, #440]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7ff fb04 	bl	80040cc <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7ff fb00 	bl	80040cc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e3d4      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ada:	4b63      	ldr	r3, [pc, #396]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7ff faf0 	bl	80040cc <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7ff faec 	bl	80040cc <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e3c0      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b02:	4b59      	ldr	r3, [pc, #356]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x110>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80ca 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b20:	4b51      	ldr	r3, [pc, #324]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_RCC_OscConfig+0x166>
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b18      	cmp	r3, #24
 8004b3a:	d156      	bne.n	8004bea <HAL_RCC_OscConfig+0x20a>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d151      	bne.n	8004bea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b46:	4b48      	ldr	r3, [pc, #288]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_RCC_OscConfig+0x17e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e392      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5e:	4b42      	ldr	r3, [pc, #264]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 0219 	bic.w	r2, r3, #25
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	493f      	ldr	r1, [pc, #252]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7ff faac 	bl	80040cc <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7ff faa8 	bl	80040cc <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e37c      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b8a:	4b37      	ldr	r3, [pc, #220]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	f7ff fac9 	bl	800412c <HAL_GetREVID>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d817      	bhi.n	8004bd4 <HAL_RCC_OscConfig+0x1f4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d108      	bne.n	8004bbe <HAL_RCC_OscConfig+0x1de>
 8004bac:	4b2e      	ldr	r3, [pc, #184]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	e07a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	4926      	ldr	r1, [pc, #152]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd2:	e06f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	4921      	ldr	r1, [pc, #132]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be8:	e064      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d047      	beq.n	8004c82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0219 	bic.w	r2, r3, #25
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	491a      	ldr	r1, [pc, #104]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7ff fa62 	bl	80040cc <HAL_GetTick>
 8004c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0c:	f7ff fa5e 	bl	80040cc <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e332      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2a:	f7ff fa7f 	bl	800412c <HAL_GetREVID>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d819      	bhi.n	8004c6c <HAL_RCC_OscConfig+0x28c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d108      	bne.n	8004c52 <HAL_RCC_OscConfig+0x272>
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c48:	4a07      	ldr	r2, [pc, #28]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4e:	6053      	str	r3, [r2, #4]
 8004c50:	e030      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
 8004c52:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	031b      	lsls	r3, r3, #12
 8004c60:	4901      	ldr	r1, [pc, #4]	@ (8004c68 <HAL_RCC_OscConfig+0x288>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
 8004c66:	e025      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	4997      	ldr	r1, [pc, #604]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e018      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b95      	ldr	r3, [pc, #596]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a94      	ldr	r2, [pc, #592]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7ff fa1d 	bl	80040cc <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7ff fa19 	bl	80040cc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e2ed      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a9 	beq.w	8004e14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc2:	4b85      	ldr	r3, [pc, #532]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ccc:	4b82      	ldr	r3, [pc, #520]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d007      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x308>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	d13a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x374>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d135      	bne.n	8004d54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_OscConfig+0x320>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b80      	cmp	r3, #128	@ 0x80
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e2c1      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d00:	f7ff fa14 	bl	800412c <HAL_GetREVID>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d817      	bhi.n	8004d3e <HAL_RCC_OscConfig+0x35e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d108      	bne.n	8004d28 <HAL_RCC_OscConfig+0x348>
 8004d16:	4b70      	ldr	r3, [pc, #448]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d26:	e075      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d28:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	069b      	lsls	r3, r3, #26
 8004d36:	4968      	ldr	r1, [pc, #416]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d3c:	e06a      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d3e:	4b66      	ldr	r3, [pc, #408]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	4962      	ldr	r1, [pc, #392]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d52:	e05f      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d042      	beq.n	8004de2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7ff f9b0 	bl	80040cc <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d70:	f7ff f9ac 	bl	80040cc <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e280      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d82:	4b55      	ldr	r3, [pc, #340]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8e:	f7ff f9cd 	bl	800412c <HAL_GetREVID>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d817      	bhi.n	8004dcc <HAL_RCC_OscConfig+0x3ec>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d108      	bne.n	8004db6 <HAL_RCC_OscConfig+0x3d6>
 8004da4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004dac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004db2:	6053      	str	r3, [r2, #4]
 8004db4:	e02e      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
 8004db6:	4b48      	ldr	r3, [pc, #288]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	069b      	lsls	r3, r3, #26
 8004dc4:	4944      	ldr	r1, [pc, #272]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	604b      	str	r3, [r1, #4]
 8004dca:	e023      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
 8004dcc:	4b42      	ldr	r3, [pc, #264]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	493f      	ldr	r1, [pc, #252]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60cb      	str	r3, [r1, #12]
 8004de0:	e018      	b.n	8004e14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7ff f96d 	bl	80040cc <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004df6:	f7ff f969 	bl	80040cc <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e23d      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e08:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d036      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7ff f94a 	bl	80040cc <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7ff f946 	bl	80040cc <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e21a      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e4e:	4b22      	ldr	r3, [pc, #136]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x45c>
 8004e5a:	e018      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e60:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7ff f930 	bl	80040cc <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e70:	f7ff f92c 	bl	80040cc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e200      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e82:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d039      	beq.n	8004f0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01c      	beq.n	8004edc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004eac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eae:	f7ff f90d 	bl	80040cc <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb6:	f7ff f909 	bl	80040cc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1dd      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCC_OscConfig+0x4f8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
 8004ed4:	e01b      	b.n	8004f0e <HAL_RCC_OscConfig+0x52e>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004edc:	4b9b      	ldr	r3, [pc, #620]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a9a      	ldr	r2, [pc, #616]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ee8:	f7ff f8f0 	bl	80040cc <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ef0:	f7ff f8ec 	bl	80040cc <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1c0      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f02:	4b92      	ldr	r3, [pc, #584]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8081 	beq.w	800501e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a8b      	ldr	r2, [pc, #556]	@ (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f28:	f7ff f8d0 	bl	80040cc <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f30:	f7ff f8cc 	bl	80040cc <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1a0      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f42:	4b83      	ldr	r3, [pc, #524]	@ (8005150 <HAL_RCC_OscConfig+0x770>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x584>
 8004f56:	4b7d      	ldr	r3, [pc, #500]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f62:	e02d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x5a6>
 8004f6c:	4b77      	ldr	r3, [pc, #476]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a76      	ldr	r2, [pc, #472]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f78:	4b74      	ldr	r3, [pc, #464]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a73      	ldr	r2, [pc, #460]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f84:	e01c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c8>
 8004f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5e0>
 8004fa8:	4b68      	ldr	r3, [pc, #416]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fac:	4a67      	ldr	r2, [pc, #412]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb4:	4b65      	ldr	r3, [pc, #404]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a64      	ldr	r2, [pc, #400]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7ff f880 	bl	80040cc <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7ff f87c 	bl	80040cc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e14e      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe6:	4b59      	ldr	r3, [pc, #356]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x5f0>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7ff f86a 	bl	80040cc <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7ff f866 	bl	80040cc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e138      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005012:	4b4e      	ldr	r3, [pc, #312]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ee      	bne.n	8004ffc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 812d 	beq.w	8005282 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005028:	4b48      	ldr	r3, [pc, #288]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005030:	2b18      	cmp	r3, #24
 8005032:	f000 80bd 	beq.w	80051b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	2b02      	cmp	r3, #2
 800503c:	f040 809e 	bne.w	800517c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b42      	ldr	r3, [pc, #264]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a41      	ldr	r2, [pc, #260]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7ff f83e 	bl	80040cc <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7ff f83a 	bl	80040cc <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e10e      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005066:	4b39      	ldr	r3, [pc, #228]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005072:	4b36      	ldr	r3, [pc, #216]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005076:	4b37      	ldr	r3, [pc, #220]	@ (8005154 <HAL_RCC_OscConfig+0x774>)
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005082:	0112      	lsls	r2, r2, #4
 8005084:	430a      	orrs	r2, r1
 8005086:	4931      	ldr	r1, [pc, #196]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	628b      	str	r3, [r1, #40]	@ 0x28
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	3b01      	subs	r3, #1
 8005092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509a:	3b01      	subs	r3, #1
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	b29b      	uxth	r3, r3
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	3b01      	subs	r3, #1
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	3b01      	subs	r3, #1
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050bc:	4923      	ldr	r1, [pc, #140]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050c2:	4b22      	ldr	r3, [pc, #136]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	4a21      	ldr	r2, [pc, #132]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ce:	4b1f      	ldr	r3, [pc, #124]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d2:	4b21      	ldr	r3, [pc, #132]	@ (8005158 <HAL_RCC_OscConfig+0x778>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050da:	00d2      	lsls	r2, r2, #3
 80050dc:	491b      	ldr	r1, [pc, #108]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050e2:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	f023 020c 	bic.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	4917      	ldr	r1, [pc, #92]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050f4:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	f023 0202 	bic.w	r2, r3, #2
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005100:	4912      	ldr	r1, [pc, #72]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005106:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	4a10      	ldr	r2, [pc, #64]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005112:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a0d      	ldr	r2, [pc, #52]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800511e:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_RCC_OscConfig+0x76c>)
 800513c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fe ffc3 	bl	80040cc <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005148:	e011      	b.n	800516e <HAL_RCC_OscConfig+0x78e>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	58024800 	.word	0x58024800
 8005154:	fffffc0c 	.word	0xfffffc0c
 8005158:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fe ffb6 	bl	80040cc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e08a      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516e:	4b47      	ldr	r3, [pc, #284]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x77c>
 800517a:	e082      	b.n	8005282 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b43      	ldr	r3, [pc, #268]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a42      	ldr	r2, [pc, #264]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fe ffa0 	bl	80040cc <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7fe ff9c 	bl	80040cc <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e070      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051a2:	4b3a      	ldr	r3, [pc, #232]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x7b0>
 80051ae:	e068      	b.n	8005282 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051b0:	4b36      	ldr	r3, [pc, #216]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051b6:	4b35      	ldr	r3, [pc, #212]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d031      	beq.n	8005228 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f003 0203 	and.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d12a      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d122      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	0a5b      	lsrs	r3, r3, #9
 80051f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d108      	bne.n	8005228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e02b      	b.n	8005284 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800522c:	4b17      	ldr	r3, [pc, #92]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005236:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d01f      	beq.n	8005282 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	4a11      	ldr	r2, [pc, #68]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800524e:	f7fe ff3d 	bl	80040cc <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005254:	bf00      	nop
 8005256:	f7fe ff39 	bl	80040cc <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	4293      	cmp	r3, r2
 8005260:	d0f9      	beq.n	8005256 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005266:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <HAL_RCC_OscConfig+0x8b0>)
 8005268:	4013      	ands	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800526e:	00d2      	lsls	r2, r2, #3
 8005270:	4906      	ldr	r1, [pc, #24]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005272:	4313      	orrs	r3, r2
 8005274:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005276:	4b05      	ldr	r3, [pc, #20]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	4a04      	ldr	r2, [pc, #16]	@ (800528c <HAL_RCC_OscConfig+0x8ac>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3730      	adds	r7, #48	@ 0x30
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	58024400 	.word	0x58024400
 8005290:	ffff0007 	.word	0xffff0007

08005294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e19c      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b8a      	ldr	r3, [pc, #552]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d910      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b87      	ldr	r3, [pc, #540]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 020f 	bic.w	r2, r3, #15
 80052be:	4985      	ldr	r1, [pc, #532]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b83      	ldr	r3, [pc, #524]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e184      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	4b7b      	ldr	r3, [pc, #492]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d908      	bls.n	8005306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052f4:	4b78      	ldr	r3, [pc, #480]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4975      	ldr	r1, [pc, #468]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005302:	4313      	orrs	r3, r2
 8005304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	4b70      	ldr	r3, [pc, #448]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531e:	429a      	cmp	r2, r3
 8005320:	d908      	bls.n	8005334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005322:	4b6d      	ldr	r3, [pc, #436]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	496a      	ldr	r1, [pc, #424]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005330:	4313      	orrs	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	4b64      	ldr	r3, [pc, #400]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800534c:	429a      	cmp	r2, r3
 800534e:	d908      	bls.n	8005362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005350:	4b61      	ldr	r3, [pc, #388]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	495e      	ldr	r1, [pc, #376]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 800535e:	4313      	orrs	r3, r2
 8005360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	4b59      	ldr	r3, [pc, #356]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800537a:	429a      	cmp	r2, r3
 800537c:	d908      	bls.n	8005390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800537e:	4b56      	ldr	r3, [pc, #344]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4953      	ldr	r1, [pc, #332]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 800538c:	4313      	orrs	r3, r2
 800538e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d010      	beq.n	80053be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ac:	4b4a      	ldr	r3, [pc, #296]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f023 020f 	bic.w	r2, r3, #15
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4947      	ldr	r1, [pc, #284]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d055      	beq.n	8005476 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053ca:	4b43      	ldr	r3, [pc, #268]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4940      	ldr	r1, [pc, #256]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053e4:	4b3c      	ldr	r3, [pc, #240]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d121      	bne.n	8005434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0f6      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d107      	bne.n	800540c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fc:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d115      	bne.n	8005434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0ea      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d107      	bne.n	8005424 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005414:	4b30      	ldr	r3, [pc, #192]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0de      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005424:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0d6      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005434:	4b28      	ldr	r3, [pc, #160]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f023 0207 	bic.w	r2, r3, #7
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4925      	ldr	r1, [pc, #148]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005442:	4313      	orrs	r3, r2
 8005444:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fe fe41 	bl	80040cc <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544c:	e00a      	b.n	8005464 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544e:	f7fe fe3d 	bl	80040cc <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e0be      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005464:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	429a      	cmp	r2, r3
 8005474:	d1eb      	bne.n	800544e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d010      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	4b14      	ldr	r3, [pc, #80]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	429a      	cmp	r2, r3
 8005490:	d208      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f023 020f 	bic.w	r2, r3, #15
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	490e      	ldr	r1, [pc, #56]	@ (80054d8 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a4:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d214      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 020f 	bic.w	r2, r3, #15
 80054ba:	4906      	ldr	r1, [pc, #24]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c2:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <HAL_RCC_ClockConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e086      	b.n	80055e2 <HAL_RCC_ClockConfig+0x34e>
 80054d4:	52002000 	.word	0x52002000
 80054d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d010      	beq.n	800550a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	4b3f      	ldr	r3, [pc, #252]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d208      	bcs.n	800550a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054f8:	4b3c      	ldr	r3, [pc, #240]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	4939      	ldr	r1, [pc, #228]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005506:	4313      	orrs	r3, r2
 8005508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d010      	beq.n	8005538 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	4b34      	ldr	r3, [pc, #208]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005522:	429a      	cmp	r2, r3
 8005524:	d208      	bcs.n	8005538 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005526:	4b31      	ldr	r3, [pc, #196]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	492e      	ldr	r1, [pc, #184]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005534:	4313      	orrs	r3, r2
 8005536:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	4b28      	ldr	r3, [pc, #160]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005550:	429a      	cmp	r2, r3
 8005552:	d208      	bcs.n	8005566 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005554:	4b25      	ldr	r3, [pc, #148]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	4922      	ldr	r1, [pc, #136]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005562:	4313      	orrs	r3, r2
 8005564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d010      	beq.n	8005594 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	4b1d      	ldr	r3, [pc, #116]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800557e:	429a      	cmp	r2, r3
 8005580:	d208      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005582:	4b1a      	ldr	r3, [pc, #104]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	4917      	ldr	r1, [pc, #92]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 8005590:	4313      	orrs	r3, r2
 8005592:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005594:	f000 f834 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b14      	ldr	r3, [pc, #80]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	4912      	ldr	r1, [pc, #72]	@ (80055f0 <HAL_RCC_ClockConfig+0x35c>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
 80055b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055b2:	4b0e      	ldr	r3, [pc, #56]	@ (80055ec <HAL_RCC_ClockConfig+0x358>)
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <HAL_RCC_ClockConfig+0x35c>)
 80055bc:	5cd3      	ldrb	r3, [r2, r3]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	4a0a      	ldr	r2, [pc, #40]	@ (80055f4 <HAL_RCC_ClockConfig+0x360>)
 80055ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055cc:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <HAL_RCC_ClockConfig+0x364>)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <HAL_RCC_ClockConfig+0x368>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fd2e 	bl	8004038 <HAL_InitTick>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	58024400 	.word	0x58024400
 80055f0:	080109a8 	.word	0x080109a8
 80055f4:	24000014 	.word	0x24000014
 80055f8:	24000010 	.word	0x24000010
 80055fc:	24000018 	.word	0x24000018

08005600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	b089      	sub	sp, #36	@ 0x24
 8005604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005606:	4bb3      	ldr	r3, [pc, #716]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560e:	2b18      	cmp	r3, #24
 8005610:	f200 8155 	bhi.w	80058be <HAL_RCC_GetSysClockFreq+0x2be>
 8005614:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005681 	.word	0x08005681
 8005620:	080058bf 	.word	0x080058bf
 8005624:	080058bf 	.word	0x080058bf
 8005628:	080058bf 	.word	0x080058bf
 800562c:	080058bf 	.word	0x080058bf
 8005630:	080058bf 	.word	0x080058bf
 8005634:	080058bf 	.word	0x080058bf
 8005638:	080058bf 	.word	0x080058bf
 800563c:	080056a7 	.word	0x080056a7
 8005640:	080058bf 	.word	0x080058bf
 8005644:	080058bf 	.word	0x080058bf
 8005648:	080058bf 	.word	0x080058bf
 800564c:	080058bf 	.word	0x080058bf
 8005650:	080058bf 	.word	0x080058bf
 8005654:	080058bf 	.word	0x080058bf
 8005658:	080058bf 	.word	0x080058bf
 800565c:	080056ad 	.word	0x080056ad
 8005660:	080058bf 	.word	0x080058bf
 8005664:	080058bf 	.word	0x080058bf
 8005668:	080058bf 	.word	0x080058bf
 800566c:	080058bf 	.word	0x080058bf
 8005670:	080058bf 	.word	0x080058bf
 8005674:	080058bf 	.word	0x080058bf
 8005678:	080058bf 	.word	0x080058bf
 800567c:	080056b3 	.word	0x080056b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005680:	4b94      	ldr	r3, [pc, #592]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800568c:	4b91      	ldr	r3, [pc, #580]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a90      	ldr	r2, [pc, #576]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800569e:	e111      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056a0:	4b8d      	ldr	r3, [pc, #564]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056a2:	61bb      	str	r3, [r7, #24]
      break;
 80056a4:	e10e      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056a6:	4b8d      	ldr	r3, [pc, #564]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a8:	61bb      	str	r3, [r7, #24]
      break;
 80056aa:	e10b      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056ac:	4b8c      	ldr	r3, [pc, #560]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056ae:	61bb      	str	r3, [r7, #24]
      break;
 80056b0:	e108      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056b2:	4b88      	ldr	r3, [pc, #544]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056bc:	4b85      	ldr	r3, [pc, #532]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056c8:	4b82      	ldr	r3, [pc, #520]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056d2:	4b80      	ldr	r3, [pc, #512]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d6:	08db      	lsrs	r3, r3, #3
 80056d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80e1 	beq.w	80058b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	f000 8083 	beq.w	8005804 <HAL_RCC_GetSysClockFreq+0x204>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b02      	cmp	r3, #2
 8005702:	f200 80a1 	bhi.w	8005848 <HAL_RCC_GetSysClockFreq+0x248>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x114>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d056      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005712:	e099      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005714:	4b6f      	ldr	r3, [pc, #444]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d02d      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005720:	4b6c      	ldr	r3, [pc, #432]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a6b      	ldr	r2, [pc, #428]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b62      	ldr	r3, [pc, #392]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a02 	vldr	s12, [r7, #8]
 800575e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800577a:	e087      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b51      	ldr	r3, [pc, #324]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a02 	vldr	s12, [r7, #8]
 80057a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057be:	e065      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b40      	ldr	r3, [pc, #256]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005802:	e043      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b2f      	ldr	r3, [pc, #188]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a02 	vldr	s12, [r7, #8]
 800582a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005846:	e021      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b1e      	ldr	r3, [pc, #120]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a02 	vldr	s12, [r7, #8]
 800586e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800588a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800588c:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	0a5b      	lsrs	r3, r3, #9
 8005892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005896:	3301      	adds	r3, #1
 8005898:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b0:	ee17 3a90 	vmov	r3, s15
 80058b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
      break;
 80058bc:	e002      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058be:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058c0:	61bb      	str	r3, [r7, #24]
      break;
 80058c2:	bf00      	nop
  }

  return sysclockfreq;
 80058c4:	69bb      	ldr	r3, [r7, #24]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3724      	adds	r7, #36	@ 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
 80058d8:	03d09000 	.word	0x03d09000
 80058dc:	003d0900 	.word	0x003d0900
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	46000000 	.word	0x46000000
 80058e8:	4c742400 	.word	0x4c742400
 80058ec:	4a742400 	.word	0x4a742400
 80058f0:	4b742400 	.word	0x4b742400

080058f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058fa:	f7ff fe81 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <HAL_RCC_GetHCLKFreq+0x50>)
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	490f      	ldr	r1, [pc, #60]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x54>)
 800590c:	5ccb      	ldrb	r3, [r1, r3]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	fa22 f303 	lsr.w	r3, r2, r3
 8005916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <HAL_RCC_GetHCLKFreq+0x50>)
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	4a09      	ldr	r2, [pc, #36]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x54>)
 8005922:	5cd3      	ldrb	r3, [r2, r3]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	4a07      	ldr	r2, [pc, #28]	@ (800594c <HAL_RCC_GetHCLKFreq+0x58>)
 8005930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005932:	4a07      	ldr	r2, [pc, #28]	@ (8005950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005938:	4b04      	ldr	r3, [pc, #16]	@ (800594c <HAL_RCC_GetHCLKFreq+0x58>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	58024400 	.word	0x58024400
 8005948:	080109a8 	.word	0x080109a8
 800594c:	24000014 	.word	0x24000014
 8005950:	24000010 	.word	0x24000010

08005954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005958:	f7ff ffcc 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4904      	ldr	r1, [pc, #16]	@ (800597c <HAL_RCC_GetPCLK1Freq+0x28>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	58024400 	.word	0x58024400
 800597c:	080109a8 	.word	0x080109a8

08005980 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b0ca      	sub	sp, #296	@ 0x128
 8005986:	af00      	add	r7, sp, #0
 8005988:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005992:	2300      	movs	r3, #0
 8005994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059a4:	2500      	movs	r5, #0
 80059a6:	ea54 0305 	orrs.w	r3, r4, r5
 80059aa:	d049      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059b6:	d02f      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059bc:	d828      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c2:	d01a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c8:	d822      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d2:	d007      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059d4:	e01c      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d6:	4bb8      	ldr	r3, [pc, #736]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	4ab7      	ldr	r2, [pc, #732]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059e2:	e01a      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	3308      	adds	r3, #8
 80059ea:	2102      	movs	r1, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fb61 	bl	80080b4 <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059f8:	e00f      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	3328      	adds	r3, #40	@ 0x28
 8005a00:	2102      	movs	r1, #2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f002 fc08 	bl	8008218 <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a0e:	e004      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a22:	4ba5      	ldr	r3, [pc, #660]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a30:	4aa1      	ldr	r2, [pc, #644]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a36:	e003      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a4c:	f04f 0900 	mov.w	r9, #0
 8005a50:	ea58 0309 	orrs.w	r3, r8, r9
 8005a54:	d047      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d82a      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a7d 	.word	0x08005a7d
 8005a6c:	08005a8b 	.word	0x08005a8b
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005abf 	.word	0x08005abf
 8005a78:	08005abf 	.word	0x08005abf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a8d      	ldr	r2, [pc, #564]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a88:	e01a      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 fb0e 	bl	80080b4 <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e00f      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	3328      	adds	r3, #40	@ 0x28
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 fbb5 	bl	8008218 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e004      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005abc:	e000      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ac8:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	f023 0107 	bic.w	r1, r3, #7
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad6:	4a78      	ldr	r2, [pc, #480]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005af2:	f04f 0b00 	mov.w	fp, #0
 8005af6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005afa:	d04c      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b06:	d030      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0c:	d829      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b10:	d02d      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b14:	d825      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d018      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b1a:	2b80      	cmp	r3, #128	@ 0x80
 8005b1c:	d821      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b22:	2b40      	cmp	r3, #64	@ 0x40
 8005b24:	d007      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b26:	e01c      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b63      	ldr	r3, [pc, #396]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a62      	ldr	r2, [pc, #392]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b34:	e01c      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 fab8 	bl	80080b4 <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e011      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f002 fb5f 	bl	8008218 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b60:	e006      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b68:	e002      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b78:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b86:	4a4c      	ldr	r2, [pc, #304]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b8c:	e003      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ba2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005bac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d053      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bc2:	d035      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bc8:	d82e      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bce:	d031      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005bd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bd4:	d828      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bda:	d01a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005be0:	d822      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bea:	d007      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005bec:	e01c      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bee:	4b32      	ldr	r3, [pc, #200]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	4a31      	ldr	r2, [pc, #196]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bfa:	e01c      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	3308      	adds	r3, #8
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f002 fa55 	bl	80080b4 <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c10:	e011      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	3328      	adds	r3, #40	@ 0x28
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 fafc 	bl	8008218 <RCCEx_PLL3_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c26:	e006      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c2e:	e002      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c54:	e003      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	d056      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c8a:	d038      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c90:	d831      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c96:	d034      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c9c:	d82b      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca8:	d825      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cb4:	e01f      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cb6:	bf00      	nop
 8005cb8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbc:	4ba2      	ldr	r3, [pc, #648]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cc8:	e01c      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	3308      	adds	r3, #8
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f002 f9ee 	bl	80080b4 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cde:	e011      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	3328      	adds	r3, #40	@ 0x28
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f002 fa95 	bl	8008218 <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d1c:	4a8a      	ldr	r2, [pc, #552]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d46:	460b      	mov	r3, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d03a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d01f      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d819      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d00c      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d815      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d111      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6a:	4b77      	ldr	r3, [pc, #476]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	4a76      	ldr	r2, [pc, #472]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d76:	e011      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 f997 	bl	80080b4 <RCCEx_PLL2_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d8c:	e006      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005da4:	4b68      	ldr	r3, [pc, #416]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	4a65      	ldr	r2, [pc, #404]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d051      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dec:	d035      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df2:	d82e      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005df4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005df8:	d031      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005dfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dfe:	d828      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d01a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0a:	d822      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d007      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e16:	e01c      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e18:	4b4b      	ldr	r3, [pc, #300]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e24:	e01c      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 f940 	bl	80080b4 <RCCEx_PLL2_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e3a:	e011      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e40:	3328      	adds	r3, #40	@ 0x28
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f002 f9e7 	bl	8008218 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e68:	4b37      	ldr	r3, [pc, #220]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e76:	4a34      	ldr	r2, [pc, #208]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d056      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005eb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb6:	d82c      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ebc:	d02f      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ec2:	d826      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ec8:	d02b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ece:	d820      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed4:	d012      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eda:	d81a      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee4:	d115      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	3308      	adds	r3, #8
 8005eec:	2101      	movs	r1, #1
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f002 f8e0 	bl	80080b4 <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005efa:	e015      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f002 f987 	bl	8008218 <RCCEx_PLL3_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f10:	e00a      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f18:	e006      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10d      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f30:	4b05      	ldr	r3, [pc, #20]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f3e:	4a02      	ldr	r2, [pc, #8]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f44:	e006      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f46:	bf00      	nop
 8005f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4313      	orrs	r3, r2
 8005f72:	d055      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f80:	d033      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f86:	d82c      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8c:	d02f      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d826      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f98:	d02b      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f9e:	d820      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa4:	d012      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005faa:	d81a      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d022      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb4:	d115      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fba:	3308      	adds	r3, #8
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f002 f878 	bl	80080b4 <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fca:	e015      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	3328      	adds	r3, #40	@ 0x28
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 f91f 	bl	8008218 <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006000:	4ba3      	ldr	r3, [pc, #652]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006004:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006010:	4a9f      	ldr	r2, [pc, #636]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006012:	430b      	orrs	r3, r1
 8006014:	6593      	str	r3, [r2, #88]	@ 0x58
 8006016:	e003      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800602c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800603a:	460b      	mov	r3, r1
 800603c:	4313      	orrs	r3, r2
 800603e:	d037      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d00e      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d816      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605a:	d111      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800605c:	4b8c      	ldr	r3, [pc, #560]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	4a8b      	ldr	r2, [pc, #556]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006068:	e00f      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	3308      	adds	r3, #8
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f002 f81e 	bl	80080b4 <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800607e:	e004      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006086:	e000      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800608a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006092:	4b7f      	ldr	r3, [pc, #508]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006096:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a0:	4a7b      	ldr	r2, [pc, #492]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060a6:	e003      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4313      	orrs	r3, r2
 80060ce:	d039      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d81c      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	0800611d 	.word	0x0800611d
 80060e4:	080060f1 	.word	0x080060f1
 80060e8:	080060ff 	.word	0x080060ff
 80060ec:	0800611d 	.word	0x0800611d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f0:	4b67      	ldr	r3, [pc, #412]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	4a66      	ldr	r2, [pc, #408]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060fc:	e00f      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	3308      	adds	r3, #8
 8006104:	2102      	movs	r1, #2
 8006106:	4618      	mov	r0, r3
 8006108:	f001 ffd4 	bl	80080b4 <RCCEx_PLL2_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800611c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006126:	4b5a      	ldr	r3, [pc, #360]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612a:	f023 0103 	bic.w	r1, r3, #3
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006134:	4a56      	ldr	r2, [pc, #344]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006136:	430b      	orrs	r3, r1
 8006138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800615a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	f000 809f 	beq.w	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006166:	4b4b      	ldr	r3, [pc, #300]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4a      	ldr	r2, [pc, #296]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006172:	f7fd ffab 	bl	80040cc <HAL_GetTick>
 8006176:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800617a:	e00b      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617c:	f7fd ffa6 	bl	80040cc <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b64      	cmp	r3, #100	@ 0x64
 800618a:	d903      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006192:	e005      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006194:	4b3f      	ldr	r3, [pc, #252]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ed      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d179      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061a8:	4b39      	ldr	r3, [pc, #228]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061b4:	4053      	eors	r3, r2
 80061b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d015      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061be:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ca:	4b31      	ldr	r3, [pc, #196]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ce:	4a30      	ldr	r2, [pc, #192]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061da:	4a2d      	ldr	r2, [pc, #180]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f6:	d118      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fd ff68 	bl	80040cc <HAL_GetTick>
 80061fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006200:	e00d      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006202:	f7fd ff63 	bl	80040cc <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800621c:	e005      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800621e:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0eb      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800622a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622e:	2b00      	cmp	r3, #0
 8006230:	d129      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800623a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800623e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006242:	d10e      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006244:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006254:	091a      	lsrs	r2, r3, #4
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006258:	4013      	ands	r3, r2
 800625a:	4a0d      	ldr	r2, [pc, #52]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625c:	430b      	orrs	r3, r1
 800625e:	6113      	str	r3, [r2, #16]
 8006260:	e005      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006262:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	4a0a      	ldr	r2, [pc, #40]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006268:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800626c:	6113      	str	r3, [r2, #16]
 800626e:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006270:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800627a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627e:	4a04      	ldr	r2, [pc, #16]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6713      	str	r3, [r2, #112]	@ 0x70
 8006284:	e00e      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006290:	58024400 	.word	0x58024400
 8006294:	58024800 	.word	0x58024800
 8006298:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f002 0301 	and.w	r3, r2, #1
 80062b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f000 8089 	beq.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062cc:	2b28      	cmp	r3, #40	@ 0x28
 80062ce:	d86b      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80062d0:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080063b1 	.word	0x080063b1
 80062dc:	080063a9 	.word	0x080063a9
 80062e0:	080063a9 	.word	0x080063a9
 80062e4:	080063a9 	.word	0x080063a9
 80062e8:	080063a9 	.word	0x080063a9
 80062ec:	080063a9 	.word	0x080063a9
 80062f0:	080063a9 	.word	0x080063a9
 80062f4:	080063a9 	.word	0x080063a9
 80062f8:	0800637d 	.word	0x0800637d
 80062fc:	080063a9 	.word	0x080063a9
 8006300:	080063a9 	.word	0x080063a9
 8006304:	080063a9 	.word	0x080063a9
 8006308:	080063a9 	.word	0x080063a9
 800630c:	080063a9 	.word	0x080063a9
 8006310:	080063a9 	.word	0x080063a9
 8006314:	080063a9 	.word	0x080063a9
 8006318:	08006393 	.word	0x08006393
 800631c:	080063a9 	.word	0x080063a9
 8006320:	080063a9 	.word	0x080063a9
 8006324:	080063a9 	.word	0x080063a9
 8006328:	080063a9 	.word	0x080063a9
 800632c:	080063a9 	.word	0x080063a9
 8006330:	080063a9 	.word	0x080063a9
 8006334:	080063a9 	.word	0x080063a9
 8006338:	080063b1 	.word	0x080063b1
 800633c:	080063a9 	.word	0x080063a9
 8006340:	080063a9 	.word	0x080063a9
 8006344:	080063a9 	.word	0x080063a9
 8006348:	080063a9 	.word	0x080063a9
 800634c:	080063a9 	.word	0x080063a9
 8006350:	080063a9 	.word	0x080063a9
 8006354:	080063a9 	.word	0x080063a9
 8006358:	080063b1 	.word	0x080063b1
 800635c:	080063a9 	.word	0x080063a9
 8006360:	080063a9 	.word	0x080063a9
 8006364:	080063a9 	.word	0x080063a9
 8006368:	080063a9 	.word	0x080063a9
 800636c:	080063a9 	.word	0x080063a9
 8006370:	080063a9 	.word	0x080063a9
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063b1 	.word	0x080063b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	3308      	adds	r3, #8
 8006382:	2101      	movs	r1, #1
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fe95 	bl	80080b4 <RCCEx_PLL2_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006390:	e00f      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	3328      	adds	r3, #40	@ 0x28
 8006398:	2101      	movs	r1, #1
 800639a:	4618      	mov	r0, r3
 800639c:	f001 ff3c 	bl	8008218 <RCCEx_PLL3_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063a6:	e004      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ae:	e000      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063ba:	4bbf      	ldr	r3, [pc, #764]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063c8:	4abb      	ldr	r2, [pc, #748]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80063ce:	e003      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f002 0302 	and.w	r3, r2, #2
 80063e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d041      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d824      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006455 	.word	0x08006455
 800640c:	08006421 	.word	0x08006421
 8006410:	08006437 	.word	0x08006437
 8006414:	08006455 	.word	0x08006455
 8006418:	08006455 	.word	0x08006455
 800641c:	08006455 	.word	0x08006455
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	3308      	adds	r3, #8
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fe43 	bl	80080b4 <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006434:	e00f      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	3328      	adds	r3, #40	@ 0x28
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f001 feea 	bl	8008218 <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800644a:	e004      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800645e:	4b96      	ldr	r3, [pc, #600]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	f023 0107 	bic.w	r1, r3, #7
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800646c:	4a92      	ldr	r2, [pc, #584]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800646e:	430b      	orrs	r3, r1
 8006470:	6553      	str	r3, [r2, #84]	@ 0x54
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0304 	and.w	r3, r2, #4
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006492:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d044      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d825      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064c9 	.word	0x080064c9
 80064b8:	080064df 	.word	0x080064df
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064cc:	3308      	adds	r3, #8
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fdef 	bl	80080b4 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064dc:	e00f      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	3328      	adds	r3, #40	@ 0x28
 80064e4:	2101      	movs	r1, #1
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fe96 	bl	8008218 <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064f2:	e004      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fa:	e000      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80064fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006506:	4b6c      	ldr	r3, [pc, #432]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650a:	f023 0107 	bic.w	r1, r3, #7
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006516:	4a68      	ldr	r2, [pc, #416]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006518:	430b      	orrs	r3, r1
 800651a:	6593      	str	r3, [r2, #88]	@ 0x58
 800651c:	e003      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f002 0320 	and.w	r3, r2, #32
 8006532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006536:	2300      	movs	r3, #0
 8006538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800653c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006540:	460b      	mov	r3, r1
 8006542:	4313      	orrs	r3, r2
 8006544:	d055      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006552:	d033      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006558:	d82c      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800655e:	d02f      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006564:	d826      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006566:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800656a:	d02b      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800656c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006570:	d820      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006576:	d012      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800657c:	d81a      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d022      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006586:	d115      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	3308      	adds	r3, #8
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fd8f 	bl	80080b4 <RCCEx_PLL2_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800659c:	e015      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	3328      	adds	r3, #40	@ 0x28
 80065a4:	2102      	movs	r1, #2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fe36 	bl	8008218 <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065b2:	e00a      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ba:	e006      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065bc:	bf00      	nop
 80065be:	e004      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d2:	4b39      	ldr	r3, [pc, #228]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	4a35      	ldr	r2, [pc, #212]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006602:	2300      	movs	r3, #0
 8006604:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006608:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d058      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800661e:	d033      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006620:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006624:	d82c      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800662a:	d02f      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006630:	d826      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006636:	d02b      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006638:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800663c:	d820      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006642:	d012      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006648:	d81a      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d022      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006652:	d115      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	3308      	adds	r3, #8
 800665a:	2100      	movs	r1, #0
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fd29 	bl	80080b4 <RCCEx_PLL2_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006668:	e015      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666e:	3328      	adds	r3, #40	@ 0x28
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f001 fdd0 	bl	8008218 <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800667e:	e00a      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006686:	e006      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006688:	bf00      	nop
 800668a:	e004      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800668c:	bf00      	nop
 800668e:	e002      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10e      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ae:	4a02      	ldr	r2, [pc, #8]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80066b4:	e006      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066b6:	bf00      	nop
 80066b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066d4:	2300      	movs	r3, #0
 80066d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066de:	460b      	mov	r3, r1
 80066e0:	4313      	orrs	r3, r2
 80066e2:	d055      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066f0:	d033      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80066f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066f6:	d82c      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066fc:	d02f      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006702:	d826      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006704:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006708:	d02b      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800670a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800670e:	d820      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006714:	d012      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800671a:	d81a      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d022      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006724:	d115      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	3308      	adds	r3, #8
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f001 fcc0 	bl	80080b4 <RCCEx_PLL2_Config>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800673a:	e015      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	3328      	adds	r3, #40	@ 0x28
 8006742:	2102      	movs	r1, #2
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fd67 	bl	8008218 <RCCEx_PLL3_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006750:	e00a      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006758:	e006      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800675a:	bf00      	nop
 800675c:	e004      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006770:	4ba1      	ldr	r3, [pc, #644]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006774:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006780:	4a9d      	ldr	r2, [pc, #628]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006782:	430b      	orrs	r3, r1
 8006784:	6593      	str	r3, [r2, #88]	@ 0x58
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f002 0308 	and.w	r3, r2, #8
 800679c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d01e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fd26 	bl	8008218 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067d8:	4b87      	ldr	r3, [pc, #540]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e8:	4a83      	ldr	r2, [pc, #524]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ea:	430b      	orrs	r3, r1
 80067ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f002 0310 	and.w	r3, r2, #16
 80067fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006804:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d01e      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800681a:	d10c      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006820:	3328      	adds	r3, #40	@ 0x28
 8006822:	2102      	movs	r1, #2
 8006824:	4618      	mov	r0, r3
 8006826:	f001 fcf7 	bl	8008218 <RCCEx_PLL3_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006836:	4b70      	ldr	r3, [pc, #448]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800683a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006846:	4a6c      	ldr	r2, [pc, #432]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006848:	430b      	orrs	r3, r1
 800684a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800685c:	2300      	movs	r3, #0
 800685e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006862:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d03e      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006878:	d022      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687e:	d81b      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006888:	d00b      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800688a:	e015      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	3308      	adds	r3, #8
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fc0d 	bl	80080b4 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068a0:	e00f      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3328      	adds	r3, #40	@ 0x28
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fcb4 	bl	8008218 <RCCEx_PLL3_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068ca:	4b4b      	ldr	r3, [pc, #300]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068da:	4a47      	ldr	r2, [pc, #284]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068f8:	2300      	movs	r3, #0
 80068fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d03b      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006912:	d01f      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006914:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006918:	d818      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800691a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691e:	d003      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006920:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006924:	d007      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006926:	e011      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006928:	4b33      	ldr	r3, [pc, #204]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	4a32      	ldr	r2, [pc, #200]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800692e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006934:	e00f      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	3328      	adds	r3, #40	@ 0x28
 800693c:	2101      	movs	r1, #1
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fc6a 	bl	8008218 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800694a:	e004      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006952:	e000      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800695e:	4b26      	ldr	r3, [pc, #152]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	4a22      	ldr	r2, [pc, #136]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6553      	str	r3, [r2, #84]	@ 0x54
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800698a:	673b      	str	r3, [r7, #112]	@ 0x70
 800698c:	2300      	movs	r3, #0
 800698e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006990:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d034      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a8:	d007      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80069aa:	e011      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ac:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069b8:	e00e      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3308      	adds	r3, #8
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fb76 	bl	80080b4 <RCCEx_PLL2_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069ce:	e003      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10d      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069e0:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ee:	4a02      	ldr	r2, [pc, #8]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069f4:	e006      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a12:	2300      	movs	r3, #0
 8006a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d00c      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	3328      	adds	r3, #40	@ 0x28
 8006a26:	2102      	movs	r1, #2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fbf5 	bl	8008218 <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a48:	2300      	movs	r3, #0
 8006a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a50:	460b      	mov	r3, r1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	d038      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a62:	d018      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a68:	d811      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a6e:	d014      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a74:	d80b      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d011      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4bc3      	ldr	r3, [pc, #780]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	4ac2      	ldr	r2, [pc, #776]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a94:	e004      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aa8:	4bb9      	ldr	r3, [pc, #740]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab8:	4ab5      	ldr	r2, [pc, #724]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ada:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ae4:	4baa      	ldr	r3, [pc, #680]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	4aa7      	ldr	r2, [pc, #668]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b06:	2300      	movs	r3, #0
 8006b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d00a      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b14:	4b9e      	ldr	r3, [pc, #632]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b24:	4a9a      	ldr	r2, [pc, #616]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b38:	2300      	movs	r3, #0
 8006b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b46:	4b92      	ldr	r3, [pc, #584]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b54:	4a8e      	ldr	r2, [pc, #568]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b68:	2300      	movs	r3, #0
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b70:	460b      	mov	r3, r1
 8006b72:	4313      	orrs	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b76:	4b86      	ldr	r3, [pc, #536]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	4a85      	ldr	r2, [pc, #532]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b80:	6113      	str	r3, [r2, #16]
 8006b82:	4b83      	ldr	r3, [pc, #524]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b8e:	4a80      	ldr	r2, [pc, #512]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ba6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006baa:	460b      	mov	r3, r1
 8006bac:	4313      	orrs	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bb0:	4b77      	ldr	r3, [pc, #476]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbe:	4a74      	ldr	r2, [pc, #464]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d00a      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006be0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bf0:	4a67      	ldr	r2, [pc, #412]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	2100      	movs	r1, #0
 8006c00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	d011      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	3308      	adds	r3, #8
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fa4a 	bl	80080b4 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6239      	str	r1, [r7, #32]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d011      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	3308      	adds	r3, #8
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fa2a 	bl	80080b4 <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	61b9      	str	r1, [r7, #24]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d011      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c96:	3308      	adds	r3, #8
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fa0a 	bl	80080b4 <RCCEx_PLL2_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	6139      	str	r1, [r7, #16]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d011      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	3328      	adds	r3, #40	@ 0x28
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fa9c 	bl	8008218 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	2100      	movs	r1, #0
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d011      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d16:	3328      	adds	r3, #40	@ 0x28
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fa7c 	bl	8008218 <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	d011      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	3328      	adds	r3, #40	@ 0x28
 8006d58:	2102      	movs	r1, #2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fa5c 	bl	8008218 <RCCEx_PLL3_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d76:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d90:	58024400 	.word	0x58024400

08006d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b090      	sub	sp, #64	@ 0x40
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006da6:	430b      	orrs	r3, r1
 8006da8:	f040 8094 	bne.w	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006dac:	4b9e      	ldr	r3, [pc, #632]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	f200 8087 	bhi.w	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006dd9 	.word	0x08006dd9
 8006dc8:	08006e01 	.word	0x08006e01
 8006dcc:	08006e29 	.word	0x08006e29
 8006dd0:	08006ec5 	.word	0x08006ec5
 8006dd4:	08006e51 	.word	0x08006e51
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dd8:	4b93      	ldr	r3, [pc, #588]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de4:	d108      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 f810 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df4:	f000 bd45 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfc:	f000 bd41 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e00:	4b89      	ldr	r3, [pc, #548]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0c:	d108      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fd54 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1c:	f000 bd31 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e24:	f000 bd2d 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e28:	4b7f      	ldr	r3, [pc, #508]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e34:	d108      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e36:	f107 030c 	add.w	r3, r7, #12
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fe94 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e44:	f000 bd1d 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	f000 bd19 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e50:	4b75      	ldr	r3, [pc, #468]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e5a:	4b73      	ldr	r3, [pc, #460]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e6c:	4b6e      	ldr	r3, [pc, #440]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	08db      	lsrs	r3, r3, #3
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	4a6d      	ldr	r2, [pc, #436]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e7e:	e01f      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e80:	4b69      	ldr	r3, [pc, #420]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8c:	d106      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e94:	d102      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e96:	4b66      	ldr	r3, [pc, #408]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e9c:	4b62      	ldr	r3, [pc, #392]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea8:	d106      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eb2:	4b60      	ldr	r3, [pc, #384]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ebc:	f000 bce1 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ec0:	f000 bcdf 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec8:	f000 bcdb 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	f000 bcd7 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006edc:	430b      	orrs	r3, r1
 8006ede:	f040 80ad 	bne.w	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006ee2:	4b51      	ldr	r3, [pc, #324]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef2:	d056      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006efa:	f200 8090 	bhi.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f02:	f000 8088 	beq.w	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f0a:	f200 8088 	bhi.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2b80      	cmp	r3, #128	@ 0x80
 8006f12:	d032      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	2b80      	cmp	r3, #128	@ 0x80
 8006f18:	f200 8081 	bhi.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d014      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f28:	e079      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f36:	d108      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 ff67 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f46:	f000 bc9c 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4e:	f000 bc98 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f52:	4b35      	ldr	r3, [pc, #212]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f60:	f107 0318 	add.w	r3, r7, #24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fcab 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6e:	f000 bc88 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f76:	f000 bc84 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f86:	d108      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f88:	f107 030c 	add.w	r3, r7, #12
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fdeb 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	f000 bc74 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9e:	f000 bc70 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fa2:	4b21      	ldr	r3, [pc, #132]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fac:	4b1e      	ldr	r3, [pc, #120]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	08db      	lsrs	r3, r3, #3
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	4a18      	ldr	r2, [pc, #96]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fca:	fa22 f303 	lsr.w	r3, r2, r3
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd0:	e01f      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fd2:	4b15      	ldr	r3, [pc, #84]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fde:	d106      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fe6:	d102      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fe8:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fec:	e011      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fee:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ffa:	d106      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007002:	d102      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007004:	4b0b      	ldr	r3, [pc, #44]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007008:	e003      	b.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800700e:	f000 bc38 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007012:	f000 bc36 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007016:	4b08      	ldr	r3, [pc, #32]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701a:	f000 bc32 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	f000 bc2e 	b.w	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007026:	bf00      	nop
 8007028:	58024400 	.word	0x58024400
 800702c:	03d09000 	.word	0x03d09000
 8007030:	003d0900 	.word	0x003d0900
 8007034:	00f42400 	.word	0x00f42400
 8007038:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800703c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007040:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007044:	430b      	orrs	r3, r1
 8007046:	f040 809c 	bne.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800704a:	4b9e      	ldr	r3, [pc, #632]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007052:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800705a:	d054      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007062:	f200 808b 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800706c:	f000 8083 	beq.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007076:	f200 8081 	bhi.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007080:	d02f      	beq.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007088:	d878      	bhi.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007096:	d012      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007098:	e070      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800709a:	4b8a      	ldr	r3, [pc, #552]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070a6:	d107      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 feaf 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070b6:	e3e4      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070bc:	e3e1      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070be:	4b81      	ldr	r3, [pc, #516]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ca:	d107      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070cc:	f107 0318 	add.w	r3, r7, #24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fbf5 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070da:	e3d2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e0:	e3cf      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070e2:	4b78      	ldr	r3, [pc, #480]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ee:	d107      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fd37 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070fe:	e3c0      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007104:	e3bd      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007106:	4b6f      	ldr	r3, [pc, #444]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007110:	4b6c      	ldr	r3, [pc, #432]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d10c      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800711c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007122:	4b68      	ldr	r3, [pc, #416]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	4a66      	ldr	r2, [pc, #408]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800712e:	fa22 f303 	lsr.w	r3, r2, r3
 8007132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007134:	e01e      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007136:	4b63      	ldr	r3, [pc, #396]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007142:	d106      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800714a:	d102      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800714c:	4b5f      	ldr	r3, [pc, #380]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007150:	e010      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007152:	4b5c      	ldr	r3, [pc, #368]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800715e:	d106      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007166:	d102      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007168:	4b59      	ldr	r3, [pc, #356]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716c:	e002      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007172:	e386      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007174:	e385      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007176:	4b57      	ldr	r3, [pc, #348]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800717a:	e382      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007180:	e37f      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007186:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800718a:	430b      	orrs	r3, r1
 800718c:	f040 80a7 	bne.w	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007190:	4b4c      	ldr	r3, [pc, #304]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007194:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007198:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071a0:	d055      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071a8:	f200 8096 	bhi.w	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071b2:	f000 8084 	beq.w	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071bc:	f200 808c 	bhi.w	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c6:	d030      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ce:	f200 8083 	bhi.w	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071de:	d012      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80071e0:	e07a      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071e2:	4b38      	ldr	r3, [pc, #224]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ee:	d107      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fe0b 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071fe:	e340      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007204:	e33d      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007206:	4b2f      	ldr	r3, [pc, #188]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800720e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007212:	d107      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007214:	f107 0318 	add.w	r3, r7, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fb51 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007222:	e32e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007228:	e32b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800722a:	4b26      	ldr	r3, [pc, #152]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007236:	d107      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fc93 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007246:	e31c      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e319      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800724e:	4b1d      	ldr	r3, [pc, #116]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007258:	4b1a      	ldr	r3, [pc, #104]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d10c      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800726a:	4b16      	ldr	r3, [pc, #88]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	4a14      	ldr	r2, [pc, #80]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800727c:	e01e      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800727e:	4b11      	ldr	r3, [pc, #68]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800728a:	d106      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007294:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007298:	e010      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800729a:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a6:	d106      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80072a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b4:	e002      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072ba:	e2e2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072bc:	e2e1      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072be:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c2:	e2de      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072c4:	58024400 	.word	0x58024400
 80072c8:	03d09000 	.word	0x03d09000
 80072cc:	003d0900 	.word	0x003d0900
 80072d0:	00f42400 	.word	0x00f42400
 80072d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072dc:	e2d1      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80072e6:	430b      	orrs	r3, r1
 80072e8:	f040 809c 	bne.w	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80072ec:	4b93      	ldr	r3, [pc, #588]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072fc:	d054      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007304:	f200 808b 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800730e:	f000 8083 	beq.w	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007318:	f200 8081 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800731c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007322:	d02f      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800732a:	d878      	bhi.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007338:	d012      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800733a:	e070      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800733c:	4b7f      	ldr	r3, [pc, #508]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007344:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007348:	d107      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800734a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd5e 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007358:	e293      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800735e:	e290      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007360:	4b76      	ldr	r3, [pc, #472]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736c:	d107      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	4618      	mov	r0, r3
 8007374:	f000 faa4 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800737c:	e281      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007382:	e27e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007384:	4b6d      	ldr	r3, [pc, #436]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800738c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007390:	d107      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007392:	f107 030c 	add.w	r3, r7, #12
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fbe6 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a0:	e26f      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a6:	e26c      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073a8:	4b64      	ldr	r3, [pc, #400]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073b2:	4b62      	ldr	r3, [pc, #392]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80073be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073c4:	4b5d      	ldr	r3, [pc, #372]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	4a5c      	ldr	r2, [pc, #368]	@ (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
 80073d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d6:	e01e      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d8:	4b58      	ldr	r3, [pc, #352]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073e4:	d106      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ec:	d102      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073ee:	4b55      	ldr	r3, [pc, #340]	@ (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f2:	e010      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073f4:	4b51      	ldr	r3, [pc, #324]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007400:	d106      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007408:	d102      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800740a:	4b4f      	ldr	r3, [pc, #316]	@ (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800740e:	e002      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007414:	e235      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007416:	e234      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007418:	4b4c      	ldr	r3, [pc, #304]	@ (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800741a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800741c:	e231      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007422:	e22e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007428:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800742c:	430b      	orrs	r3, r1
 800742e:	f040 808f 	bne.w	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007432:	4b42      	ldr	r3, [pc, #264]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007436:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800743a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007442:	d06b      	beq.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800744a:	d874      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800744c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007452:	d056      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800745a:	d86c      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007462:	d03b      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800746a:	d864      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007472:	d021      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800747a:	d85c      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007488:	d004      	beq.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800748a:	e054      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe fa62 	bl	8005954 <HAL_RCC_GetPCLK1Freq>
 8007490:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007492:	e1f6      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007494:	4b29      	ldr	r3, [pc, #164]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a0:	d107      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a2:	f107 0318 	add.w	r3, r7, #24
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fa0a 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074b0:	e1e7      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b6:	e1e4      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074b8:	4b20      	ldr	r3, [pc, #128]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c4:	d107      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c6:	f107 030c 	add.w	r3, r7, #12
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fb4c 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d4:	e1d5      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074da:	e1d2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074dc:	4b17      	ldr	r3, [pc, #92]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d109      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e8:	4b14      	ldr	r3, [pc, #80]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a13      	ldr	r2, [pc, #76]	@ (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074fa:	e1c2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007500:	e1bf      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007502:	4b0e      	ldr	r3, [pc, #56]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800750e:	d102      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007510:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007514:	e1b5      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751a:	e1b2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800751c:	4b07      	ldr	r3, [pc, #28]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007528:	d102      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800752a:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752e:	e1a8      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007534:	e1a5      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753a:	e1a2      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800753c:	58024400 	.word	0x58024400
 8007540:	03d09000 	.word	0x03d09000
 8007544:	003d0900 	.word	0x003d0900
 8007548:	00f42400 	.word	0x00f42400
 800754c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007554:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007558:	430b      	orrs	r3, r1
 800755a:	d173      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800755c:	4b9c      	ldr	r3, [pc, #624]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007564:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800756c:	d02f      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007574:	d863      	bhi.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007582:	d012      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007584:	e05b      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007586:	4b92      	ldr	r3, [pc, #584]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800758e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007592:	d107      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007594:	f107 0318 	add.w	r3, r7, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f991 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a2:	e16e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a8:	e16b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075aa:	4b89      	ldr	r3, [pc, #548]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b6:	d107      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b8:	f107 030c 	add.w	r3, r7, #12
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fad3 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c6:	e15c      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	e159      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ce:	4b80      	ldr	r3, [pc, #512]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075d8:	4b7d      	ldr	r3, [pc, #500]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d10c      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ea:	4b79      	ldr	r3, [pc, #484]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	4a77      	ldr	r2, [pc, #476]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80075f6:	fa22 f303 	lsr.w	r3, r2, r3
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075fc:	e01e      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075fe:	4b74      	ldr	r3, [pc, #464]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800760a:	d106      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007614:	4b70      	ldr	r3, [pc, #448]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007618:	e010      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800761a:	4b6d      	ldr	r3, [pc, #436]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d106      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d102      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007630:	4b6a      	ldr	r3, [pc, #424]	@ (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007634:	e002      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800763a:	e122      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800763c:	e121      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007642:	e11e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007648:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800764c:	430b      	orrs	r3, r1
 800764e:	d133      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007650:	4b5f      	ldr	r3, [pc, #380]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007658:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007666:	d012      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007668:	e023      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800766a:	4b59      	ldr	r3, [pc, #356]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007676:	d107      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fbc7 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007686:	e0fc      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768c:	e0f9      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800768e:	4b50      	ldr	r3, [pc, #320]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800769a:	d107      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800769c:	f107 0318 	add.w	r3, r7, #24
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f90d 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076aa:	e0ea      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b0:	e0e7      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b6:	e0e4      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076c0:	430b      	orrs	r3, r1
 80076c2:	f040 808d 	bne.w	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80076c6:	4b42      	ldr	r3, [pc, #264]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076d6:	d06b      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076de:	d874      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d056      	beq.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d86c      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076f6:	d03b      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076fe:	d864      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007706:	d021      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800770e:	d85c      	bhi.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800771c:	d004      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800771e:	e054      	b.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007720:	f000 f8b8 	bl	8007894 <HAL_RCCEx_GetD3PCLK1Freq>
 8007724:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007726:	e0ac      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007728:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007734:	d107      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007736:	f107 0318 	add.w	r3, r7, #24
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f8c0 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007744:	e09d      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800774a:	e09a      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800774c:	4b20      	ldr	r3, [pc, #128]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007758:	d107      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775a:	f107 030c 	add.w	r3, r7, #12
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fa02 	bl	8007b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007768:	e08b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776e:	e088      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007770:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b04      	cmp	r3, #4
 800777a:	d109      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800777c:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	08db      	lsrs	r3, r3, #3
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	4a13      	ldr	r2, [pc, #76]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800778e:	e078      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007794:	e075      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007796:	4b0e      	ldr	r3, [pc, #56]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800779e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077a2:	d102      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a8:	e06b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ae:	e068      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077b0:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077bc:	d102      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c2:	e05e      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c8:	e05b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ce:	e058      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077d0:	58024400 	.word	0x58024400
 80077d4:	03d09000 	.word	0x03d09000
 80077d8:	003d0900 	.word	0x003d0900
 80077dc:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80077e8:	430b      	orrs	r3, r1
 80077ea:	d148      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077ec:	4b27      	ldr	r3, [pc, #156]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80077ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077fc:	d02a      	beq.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007804:	d838      	bhi.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007812:	d00d      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007814:	e030      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007816:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007822:	d102      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007824:	4b1a      	ldr	r3, [pc, #104]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007828:	e02b      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800782e:	e028      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007830:	4b16      	ldr	r3, [pc, #88]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783c:	d107      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fae4 	bl	8007e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784c:	e019      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007852:	e016      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007854:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007860:	d107      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f82a 	bl	80078c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007870:	e007      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007876:	e004      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787c:	e001      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007884:	4618      	mov	r0, r3
 8007886:	3740      	adds	r7, #64	@ 0x40
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	58024400 	.word	0x58024400
 8007890:	00f42400 	.word	0x00f42400

08007894 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007898:	f7fe f82c 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 800789c:	4602      	mov	r2, r0
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	4904      	ldr	r1, [pc, #16]	@ (80078bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078aa:	5ccb      	ldrb	r3, [r1, r3]
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	58024400 	.word	0x58024400
 80078bc:	080109a8 	.word	0x080109a8

080078c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b089      	sub	sp, #36	@ 0x24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	0b1b      	lsrs	r3, r3, #12
 80078d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078de:	4b9c      	ldr	r3, [pc, #624]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078ea:	4b99      	ldr	r3, [pc, #612]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8111 	beq.w	8007b30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f000 8083 	beq.w	8007a1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b02      	cmp	r3, #2
 800791a:	f200 80a1 	bhi.w	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d056      	beq.n	80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800792a:	e099      	b.n	8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792c:	4b88      	ldr	r3, [pc, #544]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02d      	beq.n	8007994 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007938:	4b85      	ldr	r3, [pc, #532]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	08db      	lsrs	r3, r3, #3
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	4a84      	ldr	r2, [pc, #528]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
 8007948:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b7b      	ldr	r3, [pc, #492]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a03 	vldr	s12, [r7, #12]
 8007976:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007992:	e087      	b.n	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d6:	e065      	b.n	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b59      	ldr	r3, [pc, #356]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1a:	e043      	b.n	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b48      	ldr	r3, [pc, #288]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5e:	e021      	b.n	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	0a5b      	lsrs	r3, r3, #9
 8007aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aca:	ee17 2a90 	vmov	r2, s15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	0c1b      	lsrs	r3, r3, #16
 8007ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af8:	ee17 2a90 	vmov	r2, s15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b00:	4b13      	ldr	r3, [pc, #76]	@ (8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b04:	0e1b      	lsrs	r3, r3, #24
 8007b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b26:	ee17 2a90 	vmov	r2, s15
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b2e:	e008      	b.n	8007b42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
}
 8007b42:	bf00      	nop
 8007b44:	3724      	adds	r7, #36	@ 0x24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
 8007b54:	03d09000 	.word	0x03d09000
 8007b58:	46000000 	.word	0x46000000
 8007b5c:	4c742400 	.word	0x4c742400
 8007b60:	4a742400 	.word	0x4a742400
 8007b64:	4b742400 	.word	0x4b742400

08007b68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b089      	sub	sp, #36	@ 0x24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b70:	4ba1      	ldr	r3, [pc, #644]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7e:	0d1b      	lsrs	r3, r3, #20
 8007b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b86:	4b9c      	ldr	r3, [pc, #624]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b92:	4b99      	ldr	r3, [pc, #612]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b96:	08db      	lsrs	r3, r3, #3
 8007b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8111 	beq.w	8007dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f000 8083 	beq.w	8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	f200 80a1 	bhi.w	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d056      	beq.n	8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007bd2:	e099      	b.n	8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd4:	4b88      	ldr	r3, [pc, #544]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d02d      	beq.n	8007c3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be0:	4b85      	ldr	r3, [pc, #532]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	08db      	lsrs	r3, r3, #3
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	4a84      	ldr	r2, [pc, #528]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007bec:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c3a:	e087      	b.n	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c7e:	e065      	b.n	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b59      	ldr	r3, [pc, #356]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc2:	e043      	b.n	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b48      	ldr	r3, [pc, #288]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d06:	e021      	b.n	8007d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1a:	4b37      	ldr	r3, [pc, #220]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d50:	0a5b      	lsrs	r3, r3, #9
 8007d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d72:	ee17 2a90 	vmov	r2, s15
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da0:	ee17 2a90 	vmov	r2, s15
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007da8:	4b13      	ldr	r3, [pc, #76]	@ (8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dce:	ee17 2a90 	vmov	r2, s15
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dd6:	e008      	b.n	8007dea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	609a      	str	r2, [r3, #8]
}
 8007dea:	bf00      	nop
 8007dec:	3724      	adds	r7, #36	@ 0x24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	46000000 	.word	0x46000000
 8007e04:	4c742400 	.word	0x4c742400
 8007e08:	4a742400 	.word	0x4a742400
 8007e0c:	4b742400 	.word	0x4b742400

08007e10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b089      	sub	sp, #36	@ 0x24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e18:	4ba0      	ldr	r3, [pc, #640]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e22:	4b9e      	ldr	r3, [pc, #632]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e2e:	4b9b      	ldr	r3, [pc, #620]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e38:	4b98      	ldr	r3, [pc, #608]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3c:	08db      	lsrs	r3, r3, #3
 8007e3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8111 	beq.w	800807e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	f000 8083 	beq.w	8007f6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	f200 80a1 	bhi.w	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d056      	beq.n	8007f26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e78:	e099      	b.n	8007fae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e7a:	4b88      	ldr	r3, [pc, #544]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d02d      	beq.n	8007ee2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e86:	4b85      	ldr	r3, [pc, #532]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a83      	ldr	r2, [pc, #524]	@ (80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007edc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ee0:	e087      	b.n	8007ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef4:	4b69      	ldr	r3, [pc, #420]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f08:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f24:	e065      	b.n	8007ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f30:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f38:	4b58      	ldr	r3, [pc, #352]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f68:	e043      	b.n	8007ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f74:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7c:	4b47      	ldr	r3, [pc, #284]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f90:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fac:	e021      	b.n	8007ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc0:	4b36      	ldr	r3, [pc, #216]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc8:	ee07 3a90 	vmov	s15, r3
 8007fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ff0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff6:	0a5b      	lsrs	r3, r3, #9
 8007ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800800c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008018:	ee17 2a90 	vmov	r2, s15
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008020:	4b1e      	ldr	r3, [pc, #120]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800803a:	edd7 6a07 	vldr	s13, [r7, #28]
 800803e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008046:	ee17 2a90 	vmov	r2, s15
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800804e:	4b13      	ldr	r3, [pc, #76]	@ (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	0e1b      	lsrs	r3, r3, #24
 8008054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008068:	edd7 6a07 	vldr	s13, [r7, #28]
 800806c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008074:	ee17 2a90 	vmov	r2, s15
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800807c:	e008      	b.n	8008090 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	609a      	str	r2, [r3, #8]
}
 8008090:	bf00      	nop
 8008092:	3724      	adds	r7, #36	@ 0x24
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	58024400 	.word	0x58024400
 80080a0:	03d09000 	.word	0x03d09000
 80080a4:	46000000 	.word	0x46000000
 80080a8:	4c742400 	.word	0x4c742400
 80080ac:	4a742400 	.word	0x4a742400
 80080b0:	4b742400 	.word	0x4b742400

080080b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080c2:	4b53      	ldr	r3, [pc, #332]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d101      	bne.n	80080d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e099      	b.n	8008206 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080d2:	4b4f      	ldr	r3, [pc, #316]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a4e      	ldr	r2, [pc, #312]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080de:	f7fb fff5 	bl	80040cc <HAL_GetTick>
 80080e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080e4:	e008      	b.n	80080f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080e6:	f7fb fff1 	bl	80040cc <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e086      	b.n	8008206 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080f8:	4b45      	ldr	r3, [pc, #276]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008104:	4b42      	ldr	r3, [pc, #264]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	493f      	ldr	r1, [pc, #252]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008114:	4313      	orrs	r3, r2
 8008116:	628b      	str	r3, [r1, #40]	@ 0x28
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	3b01      	subs	r3, #1
 800811e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	3b01      	subs	r3, #1
 8008128:	025b      	lsls	r3, r3, #9
 800812a:	b29b      	uxth	r3, r3
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800813a:	431a      	orrs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	3b01      	subs	r3, #1
 8008142:	061b      	lsls	r3, r3, #24
 8008144:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008148:	4931      	ldr	r1, [pc, #196]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800814e:	4b30      	ldr	r3, [pc, #192]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	492d      	ldr	r1, [pc, #180]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 800815c:	4313      	orrs	r3, r2
 800815e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008160:	4b2b      	ldr	r3, [pc, #172]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	f023 0220 	bic.w	r2, r3, #32
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	4928      	ldr	r1, [pc, #160]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 800816e:	4313      	orrs	r3, r2
 8008170:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008172:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	4a26      	ldr	r2, [pc, #152]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008178:	f023 0310 	bic.w	r3, r3, #16
 800817c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800817e:	4b24      	ldr	r3, [pc, #144]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008182:	4b24      	ldr	r3, [pc, #144]	@ (8008214 <RCCEx_PLL2_Config+0x160>)
 8008184:	4013      	ands	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	69d2      	ldr	r2, [r2, #28]
 800818a:	00d2      	lsls	r2, r2, #3
 800818c:	4920      	ldr	r1, [pc, #128]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 800818e:	4313      	orrs	r3, r2
 8008190:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008192:	4b1f      	ldr	r3, [pc, #124]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a1e      	ldr	r2, [pc, #120]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 8008198:	f043 0310 	orr.w	r3, r3, #16
 800819c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081b0:	e00f      	b.n	80081d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d106      	bne.n	80081c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081b8:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	4a14      	ldr	r2, [pc, #80]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081c4:	e005      	b.n	80081d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081c6:	4b12      	ldr	r3, [pc, #72]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ca:	4a11      	ldr	r2, [pc, #68]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a0e      	ldr	r2, [pc, #56]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081de:	f7fb ff75 	bl	80040cc <HAL_GetTick>
 80081e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081e4:	e008      	b.n	80081f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081e6:	f7fb ff71 	bl	80040cc <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e006      	b.n	8008206 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081f8:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <RCCEx_PLL2_Config+0x15c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0f0      	beq.n	80081e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
 8008214:	ffff0007 	.word	0xffff0007

08008218 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008226:	4b53      	ldr	r3, [pc, #332]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d101      	bne.n	8008236 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e099      	b.n	800836a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008236:	4b4f      	ldr	r3, [pc, #316]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a4e      	ldr	r2, [pc, #312]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800823c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008242:	f7fb ff43 	bl	80040cc <HAL_GetTick>
 8008246:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008248:	e008      	b.n	800825c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800824a:	f7fb ff3f 	bl	80040cc <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d901      	bls.n	800825c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e086      	b.n	800836a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800825c:	4b45      	ldr	r3, [pc, #276]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1f0      	bne.n	800824a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008268:	4b42      	ldr	r3, [pc, #264]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800826a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	051b      	lsls	r3, r3, #20
 8008276:	493f      	ldr	r1, [pc, #252]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008278:	4313      	orrs	r3, r2
 800827a:	628b      	str	r3, [r1, #40]	@ 0x28
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	3b01      	subs	r3, #1
 8008282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	3b01      	subs	r3, #1
 800828c:	025b      	lsls	r3, r3, #9
 800828e:	b29b      	uxth	r3, r3
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	3b01      	subs	r3, #1
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	061b      	lsls	r3, r3, #24
 80082a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082ac:	4931      	ldr	r1, [pc, #196]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082b2:	4b30      	ldr	r3, [pc, #192]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	492d      	ldr	r1, [pc, #180]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	4928      	ldr	r1, [pc, #160]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082d6:	4b27      	ldr	r3, [pc, #156]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	4a26      	ldr	r2, [pc, #152]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082e2:	4b24      	ldr	r3, [pc, #144]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e6:	4b24      	ldr	r3, [pc, #144]	@ (8008378 <RCCEx_PLL3_Config+0x160>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	69d2      	ldr	r2, [r2, #28]
 80082ee:	00d2      	lsls	r2, r2, #3
 80082f0:	4920      	ldr	r1, [pc, #128]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 80082fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008300:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008308:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	4a19      	ldr	r2, [pc, #100]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800830e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008312:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008314:	e00f      	b.n	8008336 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d106      	bne.n	800832a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800831c:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	4a14      	ldr	r2, [pc, #80]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008322:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008326:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008328:	e005      	b.n	8008336 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800832a:	4b12      	ldr	r3, [pc, #72]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008330:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008334:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008336:	4b0f      	ldr	r3, [pc, #60]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a0e      	ldr	r2, [pc, #56]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008342:	f7fb fec3 	bl	80040cc <HAL_GetTick>
 8008346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008348:	e008      	b.n	800835c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800834a:	f7fb febf 	bl	80040cc <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d901      	bls.n	800835c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e006      	b.n	800836a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <RCCEx_PLL3_Config+0x15c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0f0      	beq.n	800834a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
 8008378:	ffff0007 	.word	0xffff0007

0800837c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e10f      	b.n	80085ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a87      	ldr	r2, [pc, #540]	@ (80085b8 <HAL_SPI_Init+0x23c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00f      	beq.n	80083be <HAL_SPI_Init+0x42>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a86      	ldr	r2, [pc, #536]	@ (80085bc <HAL_SPI_Init+0x240>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00a      	beq.n	80083be <HAL_SPI_Init+0x42>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a84      	ldr	r2, [pc, #528]	@ (80085c0 <HAL_SPI_Init+0x244>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d005      	beq.n	80083be <HAL_SPI_Init+0x42>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d901      	bls.n	80083be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0f7      	b.n	80085ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 f968 	bl	8009694 <SPI_GetPacketSize>
 80083c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a7b      	ldr	r2, [pc, #492]	@ (80085b8 <HAL_SPI_Init+0x23c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00c      	beq.n	80083ea <HAL_SPI_Init+0x6e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a79      	ldr	r2, [pc, #484]	@ (80085bc <HAL_SPI_Init+0x240>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <HAL_SPI_Init+0x6e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a78      	ldr	r2, [pc, #480]	@ (80085c0 <HAL_SPI_Init+0x244>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Init+0x6e>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b08      	cmp	r3, #8
 80083e8:	d811      	bhi.n	800840e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083ee:	4a72      	ldr	r2, [pc, #456]	@ (80085b8 <HAL_SPI_Init+0x23c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d009      	beq.n	8008408 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a70      	ldr	r2, [pc, #448]	@ (80085bc <HAL_SPI_Init+0x240>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <HAL_SPI_Init+0x8c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a6f      	ldr	r2, [pc, #444]	@ (80085c0 <HAL_SPI_Init+0x244>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d104      	bne.n	8008412 <HAL_SPI_Init+0x96>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b10      	cmp	r3, #16
 800840c:	d901      	bls.n	8008412 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0cd      	b.n	80085ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fb fab4 	bl	8003994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800844e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008458:	d119      	bne.n	800848e <HAL_SPI_Init+0x112>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008462:	d103      	bne.n	800846c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008468:	2b00      	cmp	r3, #0
 800846a:	d008      	beq.n	800847e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10c      	bne.n	800848e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800847c:	d107      	bne.n	800848e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800848c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00f      	beq.n	80084ba <HAL_SPI_Init+0x13e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b06      	cmp	r3, #6
 80084a0:	d90b      	bls.n	80084ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e007      	b.n	80084ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69da      	ldr	r2, [r3, #28]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084dc:	ea42 0103 	orr.w	r1, r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800852a:	ea42 0103 	orr.w	r1, r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d113      	bne.n	800856a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008554:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008568:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40013000 	.word	0x40013000
 80085bc:	40003800 	.word	0x40003800
 80085c0:	40003c00 	.word	0x40003c00

080085c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3320      	adds	r3, #32
 80085da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085dc:	f7fb fd76 	bl	80040cc <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d001      	beq.n	80085f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80085ee:	2302      	movs	r3, #2
 80085f0:	e1d1      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_SPI_Transmit+0x3a>
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e1c9      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_SPI_Transmit+0x4c>
 800860c:	2302      	movs	r3, #2
 800860e:	e1c2      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2203      	movs	r2, #3
 800861c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008668:	d108      	bne.n	800867c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e009      	b.n	8008690 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800868e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4b96      	ldr	r3, [pc, #600]	@ (80088f0 <HAL_SPI_Transmit+0x32c>)
 8008698:	4013      	ands	r3, r2
 800869a:	88f9      	ldrh	r1, [r7, #6]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086bc:	d107      	bne.n	80086ce <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d947      	bls.n	8008766 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086d6:	e03f      	b.n	8008758 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d114      	bne.n	8008710 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f6:	1d1a      	adds	r2, r3, #4
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800870e:	e023      	b.n	8008758 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008710:	f7fb fcdc 	bl	80040cc <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d803      	bhi.n	8008728 <HAL_SPI_Transmit+0x164>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008726:	d102      	bne.n	800872e <HAL_SPI_Transmit+0x16a>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d114      	bne.n	8008758 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fee2 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e11e      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1b9      	bne.n	80086d8 <HAL_SPI_Transmit+0x114>
 8008764:	e0f1      	b.n	800894a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b07      	cmp	r3, #7
 800876c:	f240 80e6 	bls.w	800893c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008770:	e05d      	b.n	800882e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b02      	cmp	r3, #2
 800877e:	d132      	bne.n	80087e6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d918      	bls.n	80087be <HAL_SPI_Transmit+0x1fa>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d014      	beq.n	80087be <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a4:	1d1a      	adds	r2, r3, #4
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b02      	subs	r3, #2
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087bc:	e037      	b.n	800882e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087c2:	881a      	ldrh	r2, [r3, #0]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087cc:	1c9a      	adds	r2, r3, #2
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087e4:	e023      	b.n	800882e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087e6:	f7fb fc71 	bl	80040cc <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d803      	bhi.n	80087fe <HAL_SPI_Transmit+0x23a>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d102      	bne.n	8008804 <HAL_SPI_Transmit+0x240>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d114      	bne.n	800882e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fe77 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008810:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e0b3      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d19b      	bne.n	8008772 <HAL_SPI_Transmit+0x1ae>
 800883a:	e086      	b.n	800894a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	d154      	bne.n	80088f4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d918      	bls.n	8008888 <HAL_SPI_Transmit+0x2c4>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885a:	2b40      	cmp	r3, #64	@ 0x40
 800885c:	d914      	bls.n	8008888 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800886e:	1d1a      	adds	r2, r3, #4
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b04      	subs	r3, #4
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008886:	e059      	b.n	800893c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d917      	bls.n	80088c4 <HAL_SPI_Transmit+0x300>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d013      	beq.n	80088c4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088a0:	881a      	ldrh	r2, [r3, #0]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088aa:	1c9a      	adds	r2, r3, #2
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b02      	subs	r3, #2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088c2:	e03b      	b.n	800893c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3320      	adds	r3, #32
 80088ce:	7812      	ldrb	r2, [r2, #0]
 80088d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088ee:	e025      	b.n	800893c <HAL_SPI_Transmit+0x378>
 80088f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088f4:	f7fb fbea 	bl	80040cc <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d803      	bhi.n	800890c <HAL_SPI_Transmit+0x348>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890a:	d102      	bne.n	8008912 <HAL_SPI_Transmit+0x34e>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d114      	bne.n	800893c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fdf0 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800891e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e02c      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008942:	b29b      	uxth	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	f47f af79 	bne.w	800883c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2200      	movs	r2, #0
 8008952:	2108      	movs	r1, #8
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fe6f 	bl	8009638 <SPI_WaitOnFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008966:	f043 0220 	orr.w	r2, r3, #32
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fdc1 	bl	80094f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008994:	2300      	movs	r3, #0
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop

080089a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3301      	adds	r3, #1
 80089ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3330      	adds	r3, #48	@ 0x30
 80089c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089c4:	f7fb fb82 	bl	80040cc <HAL_GetTick>
 80089c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d001      	beq.n	80089da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
 80089d8:	e250      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_SPI_Receive+0x46>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e248      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_SPI_Receive+0x58>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e241      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2204      	movs	r2, #4
 8008a04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	88fa      	ldrh	r2, [r7, #6]
 8008a22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a50:	d108      	bne.n	8008a64 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e009      	b.n	8008a78 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4b95      	ldr	r3, [pc, #596]	@ (8008cd4 <HAL_SPI_Receive+0x334>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	88f9      	ldrh	r1, [r7, #6]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa4:	d107      	bne.n	8008ab6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ab4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d96c      	bls.n	8008b98 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008abe:	e064      	b.n	8008b8a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d114      	bne.n	8008b00 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ade:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ae0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae6:	1d1a      	adds	r2, r3, #4
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008afe:	e044      	b.n	8008b8a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	8bfa      	ldrh	r2, [r7, #30]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d919      	bls.n	8008b42 <HAL_SPI_Receive+0x1a2>
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d014      	beq.n	8008b42 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b22:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b40:	e023      	b.n	8008b8a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b42:	f7fb fac3 	bl	80040cc <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d803      	bhi.n	8008b5a <HAL_SPI_Receive+0x1ba>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d102      	bne.n	8008b60 <HAL_SPI_Receive+0x1c0>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d114      	bne.n	8008b8a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fcc9 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e178      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d194      	bne.n	8008ac0 <HAL_SPI_Receive+0x120>
 8008b96:	e15e      	b.n	8008e56 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b07      	cmp	r3, #7
 8008b9e:	f240 8153 	bls.w	8008e48 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ba2:	e08f      	b.n	8008cc4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d114      	bne.n	8008be4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	8812      	ldrh	r2, [r2, #0]
 8008bc2:	b292      	uxth	r2, r2
 8008bc4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bca:	1c9a      	adds	r2, r3, #2
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008be2:	e06f      	b.n	8008cc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8bfa      	ldrh	r2, [r7, #30]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d924      	bls.n	8008c3c <HAL_SPI_Receive+0x29c>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	8812      	ldrh	r2, [r2, #0]
 8008c04:	b292      	uxth	r2, r2
 8008c06:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0c:	1c9a      	adds	r2, r3, #2
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	8812      	ldrh	r2, [r2, #0]
 8008c1a:	b292      	uxth	r2, r2
 8008c1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c22:	1c9a      	adds	r2, r3, #2
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b02      	subs	r3, #2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c3a:	e043      	b.n	8008cc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d119      	bne.n	8008c7c <HAL_SPI_Receive+0x2dc>
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d014      	beq.n	8008c7c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	8812      	ldrh	r2, [r2, #0]
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c62:	1c9a      	adds	r2, r3, #2
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c7a:	e023      	b.n	8008cc4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7c:	f7fb fa26 	bl	80040cc <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d803      	bhi.n	8008c94 <HAL_SPI_Receive+0x2f4>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d102      	bne.n	8008c9a <HAL_SPI_Receive+0x2fa>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d114      	bne.n	8008cc4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fc2c 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e0db      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f af69 	bne.w	8008ba4 <HAL_SPI_Receive+0x204>
 8008cd2:	e0c0      	b.n	8008e56 <HAL_SPI_Receive+0x4b6>
 8008cd4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d117      	bne.n	8008d1e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d1c:	e094      	b.n	8008e48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8bfa      	ldrh	r2, [r7, #30]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d946      	bls.n	8008dba <HAL_SPI_Receive+0x41a>
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d041      	beq.n	8008dba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d42:	7812      	ldrb	r2, [r2, #0]
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d5e:	7812      	ldrb	r2, [r2, #0]
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d96:	7812      	ldrb	r2, [r2, #0]
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	3b04      	subs	r3, #4
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008db8:	e046      	b.n	8008e48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d81c      	bhi.n	8008e00 <HAL_SPI_Receive+0x460>
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d017      	beq.n	8008e00 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dfe:	e023      	b.n	8008e48 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e00:	f7fb f964 	bl	80040cc <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d803      	bhi.n	8008e18 <HAL_SPI_Receive+0x478>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d102      	bne.n	8008e1e <HAL_SPI_Receive+0x47e>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d114      	bne.n	8008e48 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 fb6a 	bl	80094f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e019      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f47f af41 	bne.w	8008cd8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fb4e 	bl	80094f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
  }
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08e      	sub	sp, #56	@ 0x38
 8008e88:	af02      	add	r7, sp, #8
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3320      	adds	r3, #32
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3330      	adds	r3, #48	@ 0x30
 8008ea0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3301      	adds	r3, #1
 8008eac:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008eae:	f7fb f90d 	bl	80040cc <HAL_GetTick>
 8008eb2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8008eb4:	887b      	ldrh	r3, [r7, #2]
 8008eb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8008eb8:	887b      	ldrh	r3, [r7, #2]
 8008eba:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e310      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_SPI_TransmitReceive+0x5a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_SPI_TransmitReceive+0x5a>
 8008ed8:	887b      	ldrh	r3, [r7, #2]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e305      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x6c>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e2fe      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2205      	movs	r2, #5
 8008efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	887a      	ldrh	r2, [r7, #2]
 8008f12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	887a      	ldrh	r2, [r7, #2]
 8008f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	887a      	ldrh	r2, [r7, #2]
 8008f28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	887a      	ldrh	r2, [r7, #2]
 8008f30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008f4e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a70      	ldr	r2, [pc, #448]	@ (8009118 <HAL_SPI_TransmitReceive+0x294>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d009      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0xea>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800911c <HAL_SPI_TransmitReceive+0x298>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d004      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0xea>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a6d      	ldr	r2, [pc, #436]	@ (8009120 <HAL_SPI_TransmitReceive+0x29c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d102      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008f6e:	2310      	movs	r3, #16
 8008f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f72:	e001      	b.n	8008f78 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008f74:	2308      	movs	r3, #8
 8008f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	4b69      	ldr	r3, [pc, #420]	@ (8009124 <HAL_SPI_TransmitReceive+0x2a0>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	8879      	ldrh	r1, [r7, #2]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	6812      	ldr	r2, [r2, #0]
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fa4:	d107      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	f240 80a2 	bls.w	8009104 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc2:	089b      	lsrs	r3, r3, #2
 8008fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008fc6:	e094      	b.n	80090f2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d120      	bne.n	8009018 <HAL_SPI_TransmitReceive+0x194>
 8008fd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01d      	beq.n	8009018 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008fdc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008fde:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d217      	bcs.n	8009018 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009016:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009020:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d065      	beq.n	80090f2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b01      	cmp	r3, #1
 8009032:	d118      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800903c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800903e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009044:	1d1a      	adds	r2, r3, #4
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009062:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009064:	e045      	b.n	80090f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009066:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009068:	8bfb      	ldrh	r3, [r7, #30]
 800906a:	429a      	cmp	r2, r3
 800906c:	d21d      	bcs.n	80090aa <HAL_SPI_TransmitReceive+0x226>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d018      	beq.n	80090aa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009082:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80090a8:	e023      	b.n	80090f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090aa:	f7fb f80f 	bl	80040cc <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d803      	bhi.n	80090c2 <HAL_SPI_TransmitReceive+0x23e>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d102      	bne.n	80090c8 <HAL_SPI_TransmitReceive+0x244>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d114      	bne.n	80090f2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fa15 	bl	80094f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e1fd      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80090f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f af67 	bne.w	8008fc8 <HAL_SPI_TransmitReceive+0x144>
 80090fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f47f af63 	bne.w	8008fc8 <HAL_SPI_TransmitReceive+0x144>
 8009102:	e1ce      	b.n	80094a2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b07      	cmp	r3, #7
 800910a:	f240 81c2 	bls.w	8009492 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009114:	e0c9      	b.n	80092aa <HAL_SPI_TransmitReceive+0x426>
 8009116:	bf00      	nop
 8009118:	40013000 	.word	0x40013000
 800911c:	40003800 	.word	0x40003800
 8009120:	40003c00 	.word	0x40003c00
 8009124:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d11f      	bne.n	8009176 <HAL_SPI_TransmitReceive+0x2f2>
 8009136:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01c      	beq.n	8009176 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800913c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800913e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009142:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009144:	429a      	cmp	r2, r3
 8009146:	d216      	bcs.n	8009176 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009156:	1c9a      	adds	r2, r3, #2
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009162:	b29b      	uxth	r3, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	b29a      	uxth	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009174:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800917e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8092 	beq.w	80092aa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b01      	cmp	r3, #1
 8009192:	d118      	bne.n	80091c6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009198:	6a3a      	ldr	r2, [r7, #32]
 800919a:	8812      	ldrh	r2, [r2, #0]
 800919c:	b292      	uxth	r2, r2
 800919e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091a4:	1c9a      	adds	r2, r3, #2
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80091c4:	e071      	b.n	80092aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80091c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80091c8:	8bfb      	ldrh	r3, [r7, #30]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d228      	bcs.n	8009220 <HAL_SPI_TransmitReceive+0x39c>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d023      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091dc:	6a3a      	ldr	r2, [r7, #32]
 80091de:	8812      	ldrh	r2, [r2, #0]
 80091e0:	b292      	uxth	r2, r2
 80091e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e8:	1c9a      	adds	r2, r3, #2
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091f2:	6a3a      	ldr	r2, [r7, #32]
 80091f4:	8812      	ldrh	r2, [r2, #0]
 80091f6:	b292      	uxth	r2, r2
 80091f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800920a:	b29b      	uxth	r3, r3
 800920c:	3b02      	subs	r3, #2
 800920e:	b29a      	uxth	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800921c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800921e:	e044      	b.n	80092aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009220:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009222:	2b01      	cmp	r3, #1
 8009224:	d11d      	bne.n	8009262 <HAL_SPI_TransmitReceive+0x3de>
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d018      	beq.n	8009262 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009234:	6a3a      	ldr	r2, [r7, #32]
 8009236:	8812      	ldrh	r2, [r2, #0]
 8009238:	b292      	uxth	r2, r2
 800923a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800925e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009260:	e023      	b.n	80092aa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009262:	f7fa ff33 	bl	80040cc <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800926e:	429a      	cmp	r2, r3
 8009270:	d803      	bhi.n	800927a <HAL_SPI_TransmitReceive+0x3f6>
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d102      	bne.n	8009280 <HAL_SPI_TransmitReceive+0x3fc>
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	2b00      	cmp	r3, #0
 800927e:	d114      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f939 	bl	80094f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800928c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e121      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80092aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f47f af3b 	bne.w	8009128 <HAL_SPI_TransmitReceive+0x2a4>
 80092b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f47f af37 	bne.w	8009128 <HAL_SPI_TransmitReceive+0x2a4>
 80092ba:	e0f2      	b.n	80094a2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d121      	bne.n	800930e <HAL_SPI_TransmitReceive+0x48a>
 80092ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01e      	beq.n	800930e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80092d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80092d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80092d8:	429a      	cmp	r2, r3
 80092da:	d218      	bcs.n	800930e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3320      	adds	r3, #32
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800930c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009316:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 80ba 	beq.w	8009492 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b01      	cmp	r3, #1
 800932a:	d11b      	bne.n	8009364 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009338:	7812      	ldrb	r2, [r2, #0]
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009360:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009362:	e096      	b.n	8009492 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009364:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009366:	8bfb      	ldrh	r3, [r7, #30]
 8009368:	429a      	cmp	r2, r3
 800936a:	d24a      	bcs.n	8009402 <HAL_SPI_TransmitReceive+0x57e>
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d045      	beq.n	8009402 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	b2d2      	uxtb	r2, r2
 8009386:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	b2d2      	uxtb	r2, r2
 80093a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ba:	7812      	ldrb	r2, [r2, #0]
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c4:	1c5a      	adds	r2, r3, #1
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b04      	subs	r3, #4
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009400:	e047      	b.n	8009492 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009402:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009404:	2b03      	cmp	r3, #3
 8009406:	d820      	bhi.n	800944a <HAL_SPI_TransmitReceive+0x5c6>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d01b      	beq.n	800944a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	b2d2      	uxtb	r2, r2
 8009422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009446:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009448:	e023      	b.n	8009492 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800944a:	f7fa fe3f 	bl	80040cc <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009456:	429a      	cmp	r2, r3
 8009458:	d803      	bhi.n	8009462 <HAL_SPI_TransmitReceive+0x5de>
 800945a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d102      	bne.n	8009468 <HAL_SPI_TransmitReceive+0x5e4>
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	d114      	bne.n	8009492 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f845 	bl	80094f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009474:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e02d      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009492:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009494:	2b00      	cmp	r3, #0
 8009496:	f47f af11 	bne.w	80092bc <HAL_SPI_TransmitReceive+0x438>
 800949a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	f47f af0d 	bne.w	80092bc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	2200      	movs	r2, #0
 80094aa:	2108      	movs	r1, #8
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f8c3 	bl	8009638 <SPI_WaitOnFlagUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094be:	f043 0220 	orr.w	r2, r3, #32
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f815 	bl	80094f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3730      	adds	r7, #48	@ 0x30
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop

080094f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699a      	ldr	r2, [r3, #24]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0208 	orr.w	r2, r2, #8
 8009516:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699a      	ldr	r2, [r3, #24]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0210 	orr.w	r2, r2, #16
 8009526:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0201 	bic.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6919      	ldr	r1, [r3, #16]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b3c      	ldr	r3, [pc, #240]	@ (8009634 <SPI_CloseTransfer+0x13c>)
 8009544:	400b      	ands	r3, r1
 8009546:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009556:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b04      	cmp	r3, #4
 8009562:	d014      	beq.n	800958e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00f      	beq.n	800958e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009574:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	699a      	ldr	r2, [r3, #24]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f042 0220 	orr.w	r2, r2, #32
 800958c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b03      	cmp	r3, #3
 8009598:	d014      	beq.n	80095c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00f      	beq.n	80095c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00f      	beq.n	80095ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d4:	f043 0201 	orr.w	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00f      	beq.n	8009618 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095fe:	f043 0208 	orr.w	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699a      	ldr	r2, [r3, #24]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009616:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009628:	bf00      	nop
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	fffffc90 	.word	0xfffffc90

08009638 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	4613      	mov	r3, r2
 8009646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009648:	e010      	b.n	800966c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800964a:	f7fa fd3f 	bl	80040cc <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d803      	bhi.n	8009662 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d102      	bne.n	8009668 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e00f      	b.n	800968c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4013      	ands	r3, r2
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	429a      	cmp	r2, r3
 800967a:	bf0c      	ite	eq
 800967c:	2301      	moveq	r3, #1
 800967e:	2300      	movne	r3, #0
 8009680:	b2db      	uxtb	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	429a      	cmp	r2, r3
 8009688:	d0df      	beq.n	800964a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a0:	095b      	lsrs	r3, r3, #5
 80096a2:	3301      	adds	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	3301      	adds	r3, #1
 80096ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	3307      	adds	r3, #7
 80096b2:	08db      	lsrs	r3, r3, #3
 80096b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e049      	b.n	8009770 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d106      	bne.n	80096f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7fa fa55 	bl	8003ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2202      	movs	r2, #2
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3304      	adds	r3, #4
 8009706:	4619      	mov	r1, r3
 8009708:	4610      	mov	r0, r2
 800970a:	f000 fa15 	bl	8009b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	d001      	beq.n	8009790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e054      	b.n	800983a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a26      	ldr	r2, [pc, #152]	@ (8009848 <HAL_TIM_Base_Start_IT+0xd0>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d022      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ba:	d01d      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a22      	ldr	r2, [pc, #136]	@ (800984c <HAL_TIM_Base_Start_IT+0xd4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d018      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a21      	ldr	r2, [pc, #132]	@ (8009850 <HAL_TIM_Base_Start_IT+0xd8>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d013      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009854 <HAL_TIM_Base_Start_IT+0xdc>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00e      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a1e      	ldr	r2, [pc, #120]	@ (8009858 <HAL_TIM_Base_Start_IT+0xe0>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d009      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1c      	ldr	r2, [pc, #112]	@ (800985c <HAL_TIM_Base_Start_IT+0xe4>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0x80>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009860 <HAL_TIM_Base_Start_IT+0xe8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d115      	bne.n	8009824 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	4b19      	ldr	r3, [pc, #100]	@ (8009864 <HAL_TIM_Base_Start_IT+0xec>)
 8009800:	4013      	ands	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b06      	cmp	r3, #6
 8009808:	d015      	beq.n	8009836 <HAL_TIM_Base_Start_IT+0xbe>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009810:	d011      	beq.n	8009836 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009822:	e008      	b.n	8009836 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e000      	b.n	8009838 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40010000 	.word	0x40010000
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40000c00 	.word	0x40000c00
 8009858:	40010400 	.word	0x40010400
 800985c:	40001800 	.word	0x40001800
 8009860:	40014000 	.word	0x40014000
 8009864:	00010007 	.word	0x00010007

08009868 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a1a      	ldr	r2, [r3, #32]
 8009886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10f      	bne.n	80098b0 <HAL_TIM_Base_Stop_IT+0x48>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	f240 4344 	movw	r3, #1092	@ 0x444
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_TIM_Base_Stop_IT+0x48>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0201 	bic.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d020      	beq.n	800992a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d01b      	beq.n	800992a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f06f 0202 	mvn.w	r2, #2
 80098fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8f3 	bl	8009afc <HAL_TIM_IC_CaptureCallback>
 8009916:	e005      	b.n	8009924 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8e5 	bl	8009ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8f6 	bl	8009b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d020      	beq.n	8009976 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01b      	beq.n	8009976 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0204 	mvn.w	r2, #4
 8009946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f8cd 	bl	8009afc <HAL_TIM_IC_CaptureCallback>
 8009962:	e005      	b.n	8009970 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f8bf 	bl	8009ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f8d0 	bl	8009b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d020      	beq.n	80099c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f003 0308 	and.w	r3, r3, #8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d01b      	beq.n	80099c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f06f 0208 	mvn.w	r2, #8
 8009992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2204      	movs	r2, #4
 8009998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f8a7 	bl	8009afc <HAL_TIM_IC_CaptureCallback>
 80099ae:	e005      	b.n	80099bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f899 	bl	8009ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f8aa 	bl	8009b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d020      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01b      	beq.n	8009a0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f06f 0210 	mvn.w	r2, #16
 80099de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2208      	movs	r2, #8
 80099e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f881 	bl	8009afc <HAL_TIM_IC_CaptureCallback>
 80099fa:	e005      	b.n	8009a08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f873 	bl	8009ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f884 	bl	8009b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00c      	beq.n	8009a32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f06f 0201 	mvn.w	r2, #1
 8009a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f851 	bl	8009ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00c      	beq.n	8009a60 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9aa 	bl	8009db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00c      	beq.n	8009a84 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d007      	beq.n	8009a84 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f9a2 	bl	8009dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00c      	beq.n	8009aa8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d007      	beq.n	8009aa8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f83e 	bl	8009b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d007      	beq.n	8009acc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0220 	mvn.w	r2, #32
 8009ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f96a 	bl	8009da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a46      	ldr	r2, [pc, #280]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d013      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b56:	d00f      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a43      	ldr	r2, [pc, #268]	@ (8009c68 <TIM_Base_SetConfig+0x130>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00b      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a42      	ldr	r2, [pc, #264]	@ (8009c6c <TIM_Base_SetConfig+0x134>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d007      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a41      	ldr	r2, [pc, #260]	@ (8009c70 <TIM_Base_SetConfig+0x138>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d003      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a40      	ldr	r2, [pc, #256]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d108      	bne.n	8009b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a35      	ldr	r2, [pc, #212]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d01f      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b98:	d01b      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a32      	ldr	r2, [pc, #200]	@ (8009c68 <TIM_Base_SetConfig+0x130>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d017      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a31      	ldr	r2, [pc, #196]	@ (8009c6c <TIM_Base_SetConfig+0x134>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d013      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a30      	ldr	r2, [pc, #192]	@ (8009c70 <TIM_Base_SetConfig+0x138>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00f      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00b      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8009c78 <TIM_Base_SetConfig+0x140>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d007      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c7c <TIM_Base_SetConfig+0x144>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d003      	beq.n	8009bd2 <TIM_Base_SetConfig+0x9a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8009c80 <TIM_Base_SetConfig+0x148>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d108      	bne.n	8009be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a16      	ldr	r2, [pc, #88]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00f      	beq.n	8009c30 <TIM_Base_SetConfig+0xf8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a18      	ldr	r2, [pc, #96]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00b      	beq.n	8009c30 <TIM_Base_SetConfig+0xf8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	@ (8009c78 <TIM_Base_SetConfig+0x140>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_Base_SetConfig+0xf8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a16      	ldr	r2, [pc, #88]	@ (8009c7c <TIM_Base_SetConfig+0x144>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_Base_SetConfig+0xf8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a15      	ldr	r2, [pc, #84]	@ (8009c80 <TIM_Base_SetConfig+0x148>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d103      	bne.n	8009c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d105      	bne.n	8009c56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	611a      	str	r2, [r3, #16]
  }
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	40010400 	.word	0x40010400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800

08009c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e06d      	b.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a30      	ldr	r2, [pc, #192]	@ (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d004      	beq.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a2f      	ldr	r2, [pc, #188]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d108      	bne.n	8009ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a20      	ldr	r2, [pc, #128]	@ (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d022      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d0e:	d01d      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1d      	ldr	r2, [pc, #116]	@ (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d018      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d013      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1a      	ldr	r2, [pc, #104]	@ (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00e      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a15      	ldr	r2, [pc, #84]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d009      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a16      	ldr	r2, [pc, #88]	@ (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d004      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a15      	ldr	r2, [pc, #84]	@ (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d10c      	bne.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40010400 	.word	0x40010400
 8009d8c:	40000400 	.word	0x40000400
 8009d90:	40000800 	.word	0x40000800
 8009d94:	40000c00 	.word	0x40000c00
 8009d98:	40001800 	.word	0x40001800
 8009d9c:	40014000 	.word	0x40014000

08009da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009de0:	4904      	ldr	r1, [pc, #16]	@ (8009df4 <MX_FATFS_Init+0x18>)
 8009de2:	4805      	ldr	r0, [pc, #20]	@ (8009df8 <MX_FATFS_Init+0x1c>)
 8009de4:	f002 ff12 	bl	800cc0c <FATFS_LinkDriver>
 8009de8:	4603      	mov	r3, r0
 8009dea:	461a      	mov	r2, r3
 8009dec:	4b03      	ldr	r3, [pc, #12]	@ (8009dfc <MX_FATFS_Init+0x20>)
 8009dee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009df0:	bf00      	nop
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	240005c4 	.word	0x240005c4
 8009df8:	24000020 	.word	0x24000020
 8009dfc:	240005c0 	.word	0x240005c0

08009e00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f9fd 	bl	800a21c <USER_SPI_initialize>
 8009e22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fad1 	bl	800a3e0 <USER_SPI_status>
 8009e3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	607a      	str	r2, [r7, #4]
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009e58:	7bf8      	ldrb	r0, [r7, #15]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	f000 fad4 	bl	800a40c <USER_SPI_read>
 8009e64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009e7e:	7bf8      	ldrb	r0, [r7, #15]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	f000 fb27 	bl	800a4d8 <USER_SPI_write>
 8009e8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	603a      	str	r2, [r7, #0]
 8009e9e:	71fb      	strb	r3, [r7, #7]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009ea4:	79b9      	ldrb	r1, [r7, #6]
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fb90 	bl	800a5d0 <USER_SPI_ioctl>
 8009eb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 8009eba:	b480      	push	{r7}
 8009ebc:	b083      	sub	sp, #12
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0201 	bic.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	071a      	lsls	r2, r3, #28
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0201 	orr.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
}
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
	...

08009f08 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009f10:	f7fa f8dc 	bl	80040cc <HAL_GetTick>
 8009f14:	4603      	mov	r3, r0
 8009f16:	4a04      	ldr	r2, [pc, #16]	@ (8009f28 <SPI_Timer_On+0x20>)
 8009f18:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009f1a:	4a04      	ldr	r2, [pc, #16]	@ (8009f2c <SPI_Timer_On+0x24>)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6013      	str	r3, [r2, #0]
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	240005cc 	.word	0x240005cc
 8009f2c:	240005d0 	.word	0x240005d0

08009f30 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009f34:	f7fa f8ca 	bl	80040cc <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <SPI_Timer_Status+0x24>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	4b05      	ldr	r3, [pc, #20]	@ (8009f58 <SPI_Timer_Status+0x28>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	bf34      	ite	cc
 8009f48:	2301      	movcc	r3, #1
 8009f4a:	2300      	movcs	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	240005cc 	.word	0x240005cc
 8009f58:	240005d0 	.word	0x240005d0

08009f5c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	4603      	mov	r3, r0
 8009f64:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f66:	f107 020f 	add.w	r2, r7, #15
 8009f6a:	1df9      	adds	r1, r7, #7
 8009f6c:	2332      	movs	r3, #50	@ 0x32
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2301      	movs	r3, #1
 8009f72:	4804      	ldr	r0, [pc, #16]	@ (8009f84 <xchg_spi+0x28>)
 8009f74:	f7fe ff86 	bl	8008e84 <HAL_SPI_TransmitReceive>

    return rxDat;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	240004e4 	.word	0x240004e4

08009f88 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009f88:	b590      	push	{r4, r7, lr}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009f92:	2300      	movs	r3, #0
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	e00a      	b.n	8009fae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	18d4      	adds	r4, r2, r3
 8009f9e:	20ff      	movs	r0, #255	@ 0xff
 8009fa0:	f7ff ffdc 	bl	8009f5c <xchg_spi>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3301      	adds	r3, #1
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3f0      	bcc.n	8009f98 <rcvr_spi_multi+0x10>
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd90      	pop	{r4, r7, pc}

08009fc0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4803      	ldr	r0, [pc, #12]	@ (8009fe4 <xmit_spi_multi+0x24>)
 8009fd6:	f7fe faf5 	bl	80085c4 <HAL_SPI_Transmit>
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	240004e4 	.word	0x240004e4

08009fe8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009ff0:	f7fa f86c 	bl	80040cc <HAL_GetTick>
 8009ff4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009ffa:	20ff      	movs	r0, #255	@ 0xff
 8009ffc:	f7ff ffae 	bl	8009f5c <xchg_spi>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2bff      	cmp	r3, #255	@ 0xff
 800a008:	d007      	beq.n	800a01a <wait_ready+0x32>
 800a00a:	f7fa f85f 	bl	80040cc <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d8ef      	bhi.n	8009ffa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	2bff      	cmp	r3, #255	@ 0xff
 800a01e:	bf0c      	ite	eq
 800a020:	2301      	moveq	r3, #1
 800a022:	2300      	movne	r3, #0
 800a024:	b2db      	uxtb	r3, r3
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a034:	2201      	movs	r2, #1
 800a036:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a03a:	4804      	ldr	r0, [pc, #16]	@ (800a04c <despiselect+0x1c>)
 800a03c:	f7fa fb5a 	bl	80046f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a040:	20ff      	movs	r0, #255	@ 0xff
 800a042:	f7ff ff8b 	bl	8009f5c <xchg_spi>

}
 800a046:	bf00      	nop
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	58020400 	.word	0x58020400

0800a050 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a05a:	480a      	ldr	r0, [pc, #40]	@ (800a084 <spiselect+0x34>)
 800a05c:	f7fa fb4a 	bl	80046f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a060:	20ff      	movs	r0, #255	@ 0xff
 800a062:	f7ff ff7b 	bl	8009f5c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a066:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a06a:	f7ff ffbd 	bl	8009fe8 <wait_ready>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <spiselect+0x28>
 800a074:	2301      	movs	r3, #1
 800a076:	e002      	b.n	800a07e <spiselect+0x2e>

	despiselect();
 800a078:	f7ff ffda 	bl	800a030 <despiselect>
	return 0;	/* Timeout */
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	58020400 	.word	0x58020400

0800a088 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a092:	20c8      	movs	r0, #200	@ 0xc8
 800a094:	f7ff ff38 	bl	8009f08 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a098:	20ff      	movs	r0, #255	@ 0xff
 800a09a:	f7ff ff5f 	bl	8009f5c <xchg_spi>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	2bff      	cmp	r3, #255	@ 0xff
 800a0a6:	d104      	bne.n	800a0b2 <rcvr_datablock+0x2a>
 800a0a8:	f7ff ff42 	bl	8009f30 <SPI_Timer_Status>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f2      	bne.n	800a098 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2bfe      	cmp	r3, #254	@ 0xfe
 800a0b6:	d001      	beq.n	800a0bc <rcvr_datablock+0x34>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e00a      	b.n	800a0d2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ff62 	bl	8009f88 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a0c4:	20ff      	movs	r0, #255	@ 0xff
 800a0c6:	f7ff ff49 	bl	8009f5c <xchg_spi>
 800a0ca:	20ff      	movs	r0, #255	@ 0xff
 800a0cc:	f7ff ff46 	bl	8009f5c <xchg_spi>

	return 1;						/* Function succeeded */
 800a0d0:	2301      	movs	r3, #1
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a0e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a0ea:	f7ff ff7d 	bl	8009fe8 <wait_ready>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <xmit_datablock+0x1e>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e01e      	b.n	800a136 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff ff2e 	bl	8009f5c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	2bfd      	cmp	r3, #253	@ 0xfd
 800a104:	d016      	beq.n	800a134 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a106:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff ff58 	bl	8009fc0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a110:	20ff      	movs	r0, #255	@ 0xff
 800a112:	f7ff ff23 	bl	8009f5c <xchg_spi>
 800a116:	20ff      	movs	r0, #255	@ 0xff
 800a118:	f7ff ff20 	bl	8009f5c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a11c:	20ff      	movs	r0, #255	@ 0xff
 800a11e:	f7ff ff1d 	bl	8009f5c <xchg_spi>
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	2b05      	cmp	r3, #5
 800a12e:	d001      	beq.n	800a134 <xmit_datablock+0x5a>
 800a130:	2300      	movs	r3, #0
 800a132:	e000      	b.n	800a136 <xmit_datablock+0x5c>
	}
	return 1;
 800a134:	2301      	movs	r3, #1
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	4603      	mov	r3, r0
 800a146:	6039      	str	r1, [r7, #0]
 800a148:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da0e      	bge.n	800a170 <send_cmd+0x32>
		cmd &= 0x7F;
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a158:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a15a:	2100      	movs	r1, #0
 800a15c:	2037      	movs	r0, #55	@ 0x37
 800a15e:	f7ff ffee 	bl	800a13e <send_cmd>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d901      	bls.n	800a170 <send_cmd+0x32>
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	e051      	b.n	800a214 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	2b0c      	cmp	r3, #12
 800a174:	d008      	beq.n	800a188 <send_cmd+0x4a>
		despiselect();
 800a176:	f7ff ff5b 	bl	800a030 <despiselect>
		if (!spiselect()) return 0xFF;
 800a17a:	f7ff ff69 	bl	800a050 <spiselect>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <send_cmd+0x4a>
 800a184:	23ff      	movs	r3, #255	@ 0xff
 800a186:	e045      	b.n	800a214 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a188:	79fb      	ldrb	r3, [r7, #7]
 800a18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fee3 	bl	8009f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff fedd 	bl	8009f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fed7 	bl	8009f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fed1 	bl	8009f5c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff fecc 	bl	8009f5c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <send_cmd+0x94>
 800a1ce:	2395      	movs	r3, #149	@ 0x95
 800a1d0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d101      	bne.n	800a1dc <send_cmd+0x9e>
 800a1d8:	2387      	movs	r3, #135	@ 0x87
 800a1da:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff febc 	bl	8009f5c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b0c      	cmp	r3, #12
 800a1e8:	d102      	bne.n	800a1f0 <send_cmd+0xb2>
 800a1ea:	20ff      	movs	r0, #255	@ 0xff
 800a1ec:	f7ff feb6 	bl	8009f5c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a1f4:	20ff      	movs	r0, #255	@ 0xff
 800a1f6:	f7ff feb1 	bl	8009f5c <xchg_spi>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a1fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a202:	2b00      	cmp	r3, #0
 800a204:	da05      	bge.n	800a212 <send_cmd+0xd4>
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	3b01      	subs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f0      	bne.n	800a1f4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <USER_SPI_initialize+0x14>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e0cc      	b.n	800a3ca <USER_SPI_initialize+0x1ae>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a230:	4b68      	ldr	r3, [pc, #416]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <USER_SPI_initialize+0x2a>
 800a23e:	4b65      	ldr	r3, [pc, #404]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e0c1      	b.n	800a3ca <USER_SPI_initialize+0x1ae>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_64);
 800a246:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800a24a:	4863      	ldr	r0, [pc, #396]	@ (800a3d8 <USER_SPI_initialize+0x1bc>)
 800a24c:	f7ff fe35 	bl	8009eba <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a250:	230a      	movs	r3, #10
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	e005      	b.n	800a262 <USER_SPI_initialize+0x46>
 800a256:	20ff      	movs	r0, #255	@ 0xff
 800a258:	f7ff fe80 	bl	8009f5c <xchg_spi>
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	3b01      	subs	r3, #1
 800a260:	73fb      	strb	r3, [r7, #15]
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1f6      	bne.n	800a256 <USER_SPI_initialize+0x3a>

	ty = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a26c:	2100      	movs	r1, #0
 800a26e:	2000      	movs	r0, #0
 800a270:	f7ff ff65 	bl	800a13e <send_cmd>
 800a274:	4603      	mov	r3, r0
 800a276:	2b01      	cmp	r3, #1
 800a278:	f040 808b 	bne.w	800a392 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a27c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a280:	f7ff fe42 	bl	8009f08 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a284:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a288:	2008      	movs	r0, #8
 800a28a:	f7ff ff58 	bl	800a13e <send_cmd>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b01      	cmp	r3, #1
 800a292:	d151      	bne.n	800a338 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
 800a298:	e00d      	b.n	800a2b6 <USER_SPI_initialize+0x9a>
 800a29a:	7bfc      	ldrb	r4, [r7, #15]
 800a29c:	20ff      	movs	r0, #255	@ 0xff
 800a29e:	f7ff fe5d 	bl	8009f5c <xchg_spi>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f104 0310 	add.w	r3, r4, #16
 800a2aa:	443b      	add	r3, r7
 800a2ac:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d9ee      	bls.n	800a29a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a2bc:	7abb      	ldrb	r3, [r7, #10]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d167      	bne.n	800a392 <USER_SPI_initialize+0x176>
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	2baa      	cmp	r3, #170	@ 0xaa
 800a2c6:	d164      	bne.n	800a392 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a2c8:	bf00      	nop
 800a2ca:	f7ff fe31 	bl	8009f30 <SPI_Timer_Status>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <USER_SPI_initialize+0xc8>
 800a2d4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a2d8:	20a9      	movs	r0, #169	@ 0xa9
 800a2da:	f7ff ff30 	bl	800a13e <send_cmd>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f2      	bne.n	800a2ca <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a2e4:	f7ff fe24 	bl	8009f30 <SPI_Timer_Status>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d051      	beq.n	800a392 <USER_SPI_initialize+0x176>
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	203a      	movs	r0, #58	@ 0x3a
 800a2f2:	f7ff ff24 	bl	800a13e <send_cmd>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d14a      	bne.n	800a392 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	e00d      	b.n	800a31e <USER_SPI_initialize+0x102>
 800a302:	7bfc      	ldrb	r4, [r7, #15]
 800a304:	20ff      	movs	r0, #255	@ 0xff
 800a306:	f7ff fe29 	bl	8009f5c <xchg_spi>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	f104 0310 	add.w	r3, r4, #16
 800a312:	443b      	add	r3, r7
 800a314:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	3301      	adds	r3, #1
 800a31c:	73fb      	strb	r3, [r7, #15]
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d9ee      	bls.n	800a302 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a324:	7a3b      	ldrb	r3, [r7, #8]
 800a326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <USER_SPI_initialize+0x116>
 800a32e:	230c      	movs	r3, #12
 800a330:	e000      	b.n	800a334 <USER_SPI_initialize+0x118>
 800a332:	2304      	movs	r3, #4
 800a334:	737b      	strb	r3, [r7, #13]
 800a336:	e02c      	b.n	800a392 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a338:	2100      	movs	r1, #0
 800a33a:	20a9      	movs	r0, #169	@ 0xa9
 800a33c:	f7ff feff 	bl	800a13e <send_cmd>
 800a340:	4603      	mov	r3, r0
 800a342:	2b01      	cmp	r3, #1
 800a344:	d804      	bhi.n	800a350 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a346:	2302      	movs	r3, #2
 800a348:	737b      	strb	r3, [r7, #13]
 800a34a:	23a9      	movs	r3, #169	@ 0xa9
 800a34c:	73bb      	strb	r3, [r7, #14]
 800a34e:	e003      	b.n	800a358 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a350:	2301      	movs	r3, #1
 800a352:	737b      	strb	r3, [r7, #13]
 800a354:	2301      	movs	r3, #1
 800a356:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a358:	bf00      	nop
 800a35a:	f7ff fde9 	bl	8009f30 <SPI_Timer_Status>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <USER_SPI_initialize+0x158>
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	2100      	movs	r1, #0
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fee8 	bl	800a13e <send_cmd>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f2      	bne.n	800a35a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a374:	f7ff fddc 	bl	8009f30 <SPI_Timer_Status>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d007      	beq.n	800a38e <USER_SPI_initialize+0x172>
 800a37e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a382:	2010      	movs	r0, #16
 800a384:	f7ff fedb 	bl	800a13e <send_cmd>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <USER_SPI_initialize+0x176>
				ty = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a392:	4a12      	ldr	r2, [pc, #72]	@ (800a3dc <USER_SPI_initialize+0x1c0>)
 800a394:	7b7b      	ldrb	r3, [r7, #13]
 800a396:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a398:	f7ff fe4a 	bl	800a030 <despiselect>

	if (ty) {			/* OK */
 800a39c:	7b7b      	ldrb	r3, [r7, #13]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00d      	beq.n	800a3be <USER_SPI_initialize+0x1a2>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_4);	/* Set fast clock */
 800a3a2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800a3a6:	480c      	ldr	r0, [pc, #48]	@ (800a3d8 <USER_SPI_initialize+0x1bc>)
 800a3a8:	f7ff fd87 	bl	8009eba <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a3ac:	4b09      	ldr	r3, [pc, #36]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f023 0301 	bic.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	4b06      	ldr	r3, [pc, #24]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a3ba:	701a      	strb	r2, [r3, #0]
 800a3bc:	e002      	b.n	800a3c4 <USER_SPI_initialize+0x1a8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a3be:	4b05      	ldr	r3, [pc, #20]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <USER_SPI_initialize+0x1b8>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	b2db      	uxtb	r3, r3
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd90      	pop	{r4, r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	24000034 	.word	0x24000034
 800a3d8:	240004e4 	.word	0x240004e4
 800a3dc:	240005c8 	.word	0x240005c8

0800a3e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USER_SPI_status+0x14>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e002      	b.n	800a3fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a3f4:	4b04      	ldr	r3, [pc, #16]	@ (800a408 <USER_SPI_status+0x28>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	b2db      	uxtb	r3, r3
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	24000034 	.word	0x24000034

0800a40c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <USER_SPI_read+0x1c>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <USER_SPI_read+0x20>
 800a428:	2304      	movs	r3, #4
 800a42a:	e04d      	b.n	800a4c8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a42c:	4b28      	ldr	r3, [pc, #160]	@ (800a4d0 <USER_SPI_read+0xc4>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <USER_SPI_read+0x32>
 800a43a:	2303      	movs	r3, #3
 800a43c:	e044      	b.n	800a4c8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a43e:	4b25      	ldr	r3, [pc, #148]	@ (800a4d4 <USER_SPI_read+0xc8>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	f003 0308 	and.w	r3, r3, #8
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <USER_SPI_read+0x44>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	025b      	lsls	r3, r3, #9
 800a44e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d111      	bne.n	800a47a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	2011      	movs	r0, #17
 800a45a:	f7ff fe70 	bl	800a13e <send_cmd>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d129      	bne.n	800a4b8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f7ff fe0d 	bl	800a088 <rcvr_datablock>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d021      	beq.n	800a4b8 <USER_SPI_read+0xac>
			count = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	e01e      	b.n	800a4b8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	2012      	movs	r0, #18
 800a47e:	f7ff fe5e 	bl	800a13e <send_cmd>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d117      	bne.n	800a4b8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a48c:	68b8      	ldr	r0, [r7, #8]
 800a48e:	f7ff fdfb 	bl	800a088 <rcvr_datablock>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <USER_SPI_read+0xa2>
				buff += 512;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a49e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1ed      	bne.n	800a488 <USER_SPI_read+0x7c>
 800a4ac:	e000      	b.n	800a4b0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a4ae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	200c      	movs	r0, #12
 800a4b4:	f7ff fe43 	bl	800a13e <send_cmd>
		}
	}
	despiselect();
 800a4b8:	f7ff fdba 	bl	800a030 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bf14      	ite	ne
 800a4c2:	2301      	movne	r3, #1
 800a4c4:	2300      	moveq	r3, #0
 800a4c6:	b2db      	uxtb	r3, r3
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	24000034 	.word	0x24000034
 800a4d4:	240005c8 	.word	0x240005c8

0800a4d8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <USER_SPI_write+0x1c>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <USER_SPI_write+0x20>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	e063      	b.n	800a5c0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a4f8:	4b33      	ldr	r3, [pc, #204]	@ (800a5c8 <USER_SPI_write+0xf0>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <USER_SPI_write+0x32>
 800a506:	2303      	movs	r3, #3
 800a508:	e05a      	b.n	800a5c0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a50a:	4b2f      	ldr	r3, [pc, #188]	@ (800a5c8 <USER_SPI_write+0xf0>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <USER_SPI_write+0x44>
 800a518:	2302      	movs	r3, #2
 800a51a:	e051      	b.n	800a5c0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a51c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5cc <USER_SPI_write+0xf4>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	f003 0308 	and.w	r3, r3, #8
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <USER_SPI_write+0x56>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	025b      	lsls	r3, r3, #9
 800a52c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d110      	bne.n	800a556 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	2018      	movs	r0, #24
 800a538:	f7ff fe01 	bl	800a13e <send_cmd>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d136      	bne.n	800a5b0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a542:	21fe      	movs	r1, #254	@ 0xfe
 800a544:	68b8      	ldr	r0, [r7, #8]
 800a546:	f7ff fdc8 	bl	800a0da <xmit_datablock>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d02f      	beq.n	800a5b0 <USER_SPI_write+0xd8>
			count = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	e02c      	b.n	800a5b0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a556:	4b1d      	ldr	r3, [pc, #116]	@ (800a5cc <USER_SPI_write+0xf4>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f003 0306 	and.w	r3, r3, #6
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <USER_SPI_write+0x92>
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	2097      	movs	r0, #151	@ 0x97
 800a566:	f7ff fdea 	bl	800a13e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	2019      	movs	r0, #25
 800a56e:	f7ff fde6 	bl	800a13e <send_cmd>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11b      	bne.n	800a5b0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a578:	21fc      	movs	r1, #252	@ 0xfc
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f7ff fdad 	bl	800a0da <xmit_datablock>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <USER_SPI_write+0xc4>
				buff += 512;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a58c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3b01      	subs	r3, #1
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1ee      	bne.n	800a578 <USER_SPI_write+0xa0>
 800a59a:	e000      	b.n	800a59e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a59c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a59e:	21fd      	movs	r1, #253	@ 0xfd
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	f7ff fd9a 	bl	800a0da <xmit_datablock>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <USER_SPI_write+0xd8>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a5b0:	f7ff fd3e 	bl	800a030 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bf14      	ite	ne
 800a5ba:	2301      	movne	r3, #1
 800a5bc:	2300      	moveq	r3, #0
 800a5be:	b2db      	uxtb	r3, r3
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	24000034 	.word	0x24000034
 800a5cc:	240005c8 	.word	0x240005c8

0800a5d0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	@ 0x30
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	603a      	str	r2, [r7, #0]
 800a5da:	71fb      	strb	r3, [r7, #7]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <USER_SPI_ioctl+0x1a>
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	e15a      	b.n	800a8a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a5ea:	4baf      	ldr	r3, [pc, #700]	@ (800a8a8 <USER_SPI_ioctl+0x2d8>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <USER_SPI_ioctl+0x2c>
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e151      	b.n	800a8a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800a602:	79bb      	ldrb	r3, [r7, #6]
 800a604:	2b04      	cmp	r3, #4
 800a606:	f200 8136 	bhi.w	800a876 <USER_SPI_ioctl+0x2a6>
 800a60a:	a201      	add	r2, pc, #4	@ (adr r2, 800a610 <USER_SPI_ioctl+0x40>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a625 	.word	0x0800a625
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a877 	.word	0x0800a877
 800a61c:	0800a6e5 	.word	0x0800a6e5
 800a620:	0800a7db 	.word	0x0800a7db
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a624:	f7ff fd14 	bl	800a050 <spiselect>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 8127 	beq.w	800a87e <USER_SPI_ioctl+0x2ae>
 800a630:	2300      	movs	r3, #0
 800a632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800a636:	e122      	b.n	800a87e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a638:	2100      	movs	r1, #0
 800a63a:	2009      	movs	r0, #9
 800a63c:	f7ff fd7f 	bl	800a13e <send_cmd>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	f040 811d 	bne.w	800a882 <USER_SPI_ioctl+0x2b2>
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	2110      	movs	r1, #16
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fd1a 	bl	800a088 <rcvr_datablock>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 8113 	beq.w	800a882 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a65c:	7b3b      	ldrb	r3, [r7, #12]
 800a65e:	099b      	lsrs	r3, r3, #6
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	d111      	bne.n	800a68a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a666:	7d7b      	ldrb	r3, [r7, #21]
 800a668:	461a      	mov	r2, r3
 800a66a:	7d3b      	ldrb	r3, [r7, #20]
 800a66c:	021b      	lsls	r3, r3, #8
 800a66e:	4413      	add	r3, r2
 800a670:	461a      	mov	r2, r3
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	041b      	lsls	r3, r3, #16
 800a676:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800a67a:	4413      	add	r3, r2
 800a67c:	3301      	adds	r3, #1
 800a67e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	029a      	lsls	r2, r3, #10
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	e028      	b.n	800a6dc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a68a:	7c7b      	ldrb	r3, [r7, #17]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	b2da      	uxtb	r2, r3
 800a692:	7dbb      	ldrb	r3, [r7, #22]
 800a694:	09db      	lsrs	r3, r3, #7
 800a696:	b2db      	uxtb	r3, r3
 800a698:	4413      	add	r3, r2
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	7d7b      	ldrb	r3, [r7, #21]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0306 	and.w	r3, r3, #6
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	4413      	add	r3, r2
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	3302      	adds	r3, #2
 800a6ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a6b2:	7d3b      	ldrb	r3, [r7, #20]
 800a6b4:	099b      	lsrs	r3, r3, #6
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	7cfb      	ldrb	r3, [r7, #19]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	441a      	add	r2, r3
 800a6c0:	7cbb      	ldrb	r3, [r7, #18]
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a6ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6d2:	3b09      	subs	r3, #9
 800a6d4:	69fa      	ldr	r2, [r7, #28]
 800a6d6:	409a      	lsls	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800a6e2:	e0ce      	b.n	800a882 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a6e4:	4b71      	ldr	r3, [pc, #452]	@ (800a8ac <USER_SPI_ioctl+0x2dc>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d031      	beq.n	800a754 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	208d      	movs	r0, #141	@ 0x8d
 800a6f4:	f7ff fd23 	bl	800a13e <send_cmd>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 80c3 	bne.w	800a886 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a700:	20ff      	movs	r0, #255	@ 0xff
 800a702:	f7ff fc2b 	bl	8009f5c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	2110      	movs	r1, #16
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff fcbb 	bl	800a088 <rcvr_datablock>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80b6 	beq.w	800a886 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a71a:	2330      	movs	r3, #48	@ 0x30
 800a71c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800a720:	e007      	b.n	800a732 <USER_SPI_ioctl+0x162>
 800a722:	20ff      	movs	r0, #255	@ 0xff
 800a724:	f7ff fc1a 	bl	8009f5c <xchg_spi>
 800a728:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a72c:	3b01      	subs	r3, #1
 800a72e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800a732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1f3      	bne.n	800a722 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
 800a73c:	091b      	lsrs	r3, r3, #4
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	461a      	mov	r2, r3
 800a742:	2310      	movs	r3, #16
 800a744:	fa03 f202 	lsl.w	r2, r3, r2
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a752:	e098      	b.n	800a886 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a754:	2100      	movs	r1, #0
 800a756:	2009      	movs	r0, #9
 800a758:	f7ff fcf1 	bl	800a13e <send_cmd>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f040 8091 	bne.w	800a886 <USER_SPI_ioctl+0x2b6>
 800a764:	f107 030c 	add.w	r3, r7, #12
 800a768:	2110      	movs	r1, #16
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fc8c 	bl	800a088 <rcvr_datablock>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 8087 	beq.w	800a886 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a778:	4b4c      	ldr	r3, [pc, #304]	@ (800a8ac <USER_SPI_ioctl+0x2dc>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d012      	beq.n	800a7aa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800a78c:	7dfa      	ldrb	r2, [r7, #23]
 800a78e:	09d2      	lsrs	r2, r2, #7
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	4413      	add	r3, r2
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	7e7b      	ldrb	r3, [r7, #25]
 800a798:	099b      	lsrs	r3, r3, #6
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	3b01      	subs	r3, #1
 800a79e:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e013      	b.n	800a7d2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a7aa:	7dbb      	ldrb	r3, [r7, #22]
 800a7ac:	109b      	asrs	r3, r3, #2
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f003 031f 	and.w	r3, r3, #31
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	7dfa      	ldrb	r2, [r7, #23]
 800a7b8:	00d2      	lsls	r2, r2, #3
 800a7ba:	f002 0218 	and.w	r2, r2, #24
 800a7be:	7df9      	ldrb	r1, [r7, #23]
 800a7c0:	0949      	lsrs	r1, r1, #5
 800a7c2:	b2c9      	uxtb	r1, r1
 800a7c4:	440a      	add	r2, r1
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	fb02 f303 	mul.w	r3, r2, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800a7d8:	e055      	b.n	800a886 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a7da:	4b34      	ldr	r3, [pc, #208]	@ (800a8ac <USER_SPI_ioctl+0x2dc>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 0306 	and.w	r3, r3, #6
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d051      	beq.n	800a88a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a7e6:	f107 020c 	add.w	r2, r7, #12
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	210b      	movs	r1, #11
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff feee 	bl	800a5d0 <USER_SPI_ioctl>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d149      	bne.n	800a88e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a7fa:	7b3b      	ldrb	r3, [r7, #12]
 800a7fc:	099b      	lsrs	r3, r3, #6
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <USER_SPI_ioctl+0x23e>
 800a804:	7dbb      	ldrb	r3, [r7, #22]
 800a806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d041      	beq.n	800a892 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	623b      	str	r3, [r7, #32]
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800a81e:	4b23      	ldr	r3, [pc, #140]	@ (800a8ac <USER_SPI_ioctl+0x2dc>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	f003 0308 	and.w	r3, r3, #8
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82c:	025b      	lsls	r3, r3, #9
 800a82e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a832:	025b      	lsls	r3, r3, #9
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a838:	2020      	movs	r0, #32
 800a83a:	f7ff fc80 	bl	800a13e <send_cmd>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d128      	bne.n	800a896 <USER_SPI_ioctl+0x2c6>
 800a844:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a846:	2021      	movs	r0, #33	@ 0x21
 800a848:	f7ff fc79 	bl	800a13e <send_cmd>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d121      	bne.n	800a896 <USER_SPI_ioctl+0x2c6>
 800a852:	2100      	movs	r1, #0
 800a854:	2026      	movs	r0, #38	@ 0x26
 800a856:	f7ff fc72 	bl	800a13e <send_cmd>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d11a      	bne.n	800a896 <USER_SPI_ioctl+0x2c6>
 800a860:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a864:	f7ff fbc0 	bl	8009fe8 <wait_ready>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a86e:	2300      	movs	r3, #0
 800a870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800a874:	e00f      	b.n	800a896 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a876:	2304      	movs	r3, #4
 800a878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a87c:	e00c      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		break;
 800a87e:	bf00      	nop
 800a880:	e00a      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		break;
 800a882:	bf00      	nop
 800a884:	e008      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		break;
 800a886:	bf00      	nop
 800a888:	e006      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a88a:	bf00      	nop
 800a88c:	e004      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <USER_SPI_ioctl+0x2c8>
		break;
 800a896:	bf00      	nop
	}

	despiselect();
 800a898:	f7ff fbca 	bl	800a030 <despiselect>

	return res;
 800a89c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3730      	adds	r7, #48	@ 0x30
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	24000034 	.word	0x24000034
 800a8ac:	240005c8 	.word	0x240005c8

0800a8b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	@ (800a8e0 <disk_status+0x30>)
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	79fa      	ldrb	r2, [r7, #7]
 800a8c8:	4905      	ldr	r1, [pc, #20]	@ (800a8e0 <disk_status+0x30>)
 800a8ca:	440a      	add	r2, r1
 800a8cc:	7a12      	ldrb	r2, [r2, #8]
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4798      	blx	r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	240005fc 	.word	0x240005fc

0800a8e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a8f2:	79fb      	ldrb	r3, [r7, #7]
 800a8f4:	4a0e      	ldr	r2, [pc, #56]	@ (800a930 <disk_initialize+0x4c>)
 800a8f6:	5cd3      	ldrb	r3, [r2, r3]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d114      	bne.n	800a926 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a930 <disk_initialize+0x4c>)
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	79fa      	ldrb	r2, [r7, #7]
 800a90a:	4909      	ldr	r1, [pc, #36]	@ (800a930 <disk_initialize+0x4c>)
 800a90c:	440a      	add	r2, r1
 800a90e:	7a12      	ldrb	r2, [r2, #8]
 800a910:	4610      	mov	r0, r2
 800a912:	4798      	blx	r3
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	4a03      	ldr	r2, [pc, #12]	@ (800a930 <disk_initialize+0x4c>)
 800a922:	2101      	movs	r1, #1
 800a924:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	240005fc 	.word	0x240005fc

0800a934 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	607a      	str	r2, [r7, #4]
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4a0a      	ldr	r2, [pc, #40]	@ (800a970 <disk_read+0x3c>)
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	689c      	ldr	r4, [r3, #8]
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4a07      	ldr	r2, [pc, #28]	@ (800a970 <disk_read+0x3c>)
 800a954:	4413      	add	r3, r2
 800a956:	7a18      	ldrb	r0, [r3, #8]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	47a0      	blx	r4
 800a960:	4603      	mov	r3, r0
 800a962:	75fb      	strb	r3, [r7, #23]
  return res;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
}
 800a966:	4618      	mov	r0, r3
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}
 800a96e:	bf00      	nop
 800a970:	240005fc 	.word	0x240005fc

0800a974 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	607a      	str	r2, [r7, #4]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b0 <disk_write+0x3c>)
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	68dc      	ldr	r4, [r3, #12]
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4a07      	ldr	r2, [pc, #28]	@ (800a9b0 <disk_write+0x3c>)
 800a994:	4413      	add	r3, r2
 800a996:	7a18      	ldrb	r0, [r3, #8]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	47a0      	blx	r4
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd90      	pop	{r4, r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	240005fc 	.word	0x240005fc

0800a9b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	603a      	str	r2, [r7, #0]
 800a9be:	71fb      	strb	r3, [r7, #7]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	4a09      	ldr	r2, [pc, #36]	@ (800a9ec <disk_ioctl+0x38>)
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	79fa      	ldrb	r2, [r7, #7]
 800a9d2:	4906      	ldr	r1, [pc, #24]	@ (800a9ec <disk_ioctl+0x38>)
 800a9d4:	440a      	add	r2, r1
 800a9d6:	7a10      	ldrb	r0, [r2, #8]
 800a9d8:	79b9      	ldrb	r1, [r7, #6]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
  return res;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	240005fc 	.word	0x240005fc

0800a9f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	b21a      	sxth	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b21b      	sxth	r3, r3
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	b21b      	sxth	r3, r3
 800aa10:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa12:	89fb      	ldrh	r3, [r7, #14]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3303      	adds	r3, #3
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	3202      	adds	r2, #2
 800aa38:	7812      	ldrb	r2, [r2, #0]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	3201      	adds	r2, #1
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	021b      	lsls	r3, r3, #8
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
	return rv;
 800aa58:	68fb      	ldr	r3, [r7, #12]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	887a      	ldrh	r2, [r7, #2]
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	887b      	ldrh	r3, [r7, #2]
 800aa80:	0a1b      	lsrs	r3, r3, #8
 800aa82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	607a      	str	r2, [r7, #4]
 800aa8a:	887a      	ldrh	r2, [r7, #2]
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	0a1b      	lsrs	r3, r3, #8
 800aab6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	607a      	str	r2, [r7, #4]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	b2d2      	uxtb	r2, r2
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	0a1b      	lsrs	r3, r3, #8
 800aada:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	701a      	strb	r2, [r3, #0]
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00d      	beq.n	800ab2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	1c53      	adds	r3, r2, #1
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1c59      	adds	r1, r3, #1
 800ab18:	6179      	str	r1, [r7, #20]
 800ab1a:	7812      	ldrb	r2, [r2, #0]
 800ab1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1f1      	bne.n	800ab0e <mem_cpy+0x1a>
	}
}
 800ab2a:	bf00      	nop
 800ab2c:	371c      	adds	r7, #28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ab36:	b480      	push	{r7}
 800ab38:	b087      	sub	sp, #28
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	617a      	str	r2, [r7, #20]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	607b      	str	r3, [r7, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f3      	bne.n	800ab46 <mem_set+0x10>
}
 800ab5e:	bf00      	nop
 800ab60:	bf00      	nop
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ab6c:	b480      	push	{r7}
 800ab6e:	b089      	sub	sp, #36	@ 0x24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	61fa      	str	r2, [r7, #28]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	61ba      	str	r2, [r7, #24]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	1acb      	subs	r3, r1, r3
 800ab98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <mem_cmp+0x40>
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0eb      	beq.n	800ab84 <mem_cmp+0x18>

	return r;
 800abac:	697b      	ldr	r3, [r7, #20]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3724      	adds	r7, #36	@ 0x24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800abc4:	e002      	b.n	800abcc <chk_chr+0x12>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3301      	adds	r3, #1
 800abca:	607b      	str	r3, [r7, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <chk_chr+0x26>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	4293      	cmp	r3, r2
 800abde:	d1f2      	bne.n	800abc6 <chk_chr+0xc>
	return *str;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	781b      	ldrb	r3, [r3, #0]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abfa:	2300      	movs	r3, #0
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e029      	b.n	800ac58 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac04:	4a27      	ldr	r2, [pc, #156]	@ (800aca4 <chk_lock+0xb4>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	011b      	lsls	r3, r3, #4
 800ac0a:	4413      	add	r3, r2
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01d      	beq.n	800ac4e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac12:	4a24      	ldr	r2, [pc, #144]	@ (800aca4 <chk_lock+0xb4>)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	4413      	add	r3, r2
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d116      	bne.n	800ac52 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac24:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <chk_lock+0xb4>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d10c      	bne.n	800ac52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac38:	4a1a      	ldr	r2, [pc, #104]	@ (800aca4 <chk_lock+0xb4>)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	4413      	add	r3, r2
 800ac40:	3308      	adds	r3, #8
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d102      	bne.n	800ac52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac4c:	e007      	b.n	800ac5e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d9d2      	bls.n	800ac04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d109      	bne.n	800ac78 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d102      	bne.n	800ac70 <chk_lock+0x80>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d101      	bne.n	800ac74 <chk_lock+0x84>
 800ac70:	2300      	movs	r3, #0
 800ac72:	e010      	b.n	800ac96 <chk_lock+0xa6>
 800ac74:	2312      	movs	r3, #18
 800ac76:	e00e      	b.n	800ac96 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d108      	bne.n	800ac90 <chk_lock+0xa0>
 800ac7e:	4a09      	ldr	r2, [pc, #36]	@ (800aca4 <chk_lock+0xb4>)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	4413      	add	r3, r2
 800ac86:	330c      	adds	r3, #12
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac8e:	d101      	bne.n	800ac94 <chk_lock+0xa4>
 800ac90:	2310      	movs	r3, #16
 800ac92:	e000      	b.n	800ac96 <chk_lock+0xa6>
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	240005dc 	.word	0x240005dc

0800aca8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acae:	2300      	movs	r3, #0
 800acb0:	607b      	str	r3, [r7, #4]
 800acb2:	e002      	b.n	800acba <enq_lock+0x12>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3301      	adds	r3, #1
 800acb8:	607b      	str	r3, [r7, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d806      	bhi.n	800acce <enq_lock+0x26>
 800acc0:	4a09      	ldr	r2, [pc, #36]	@ (800ace8 <enq_lock+0x40>)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	011b      	lsls	r3, r3, #4
 800acc6:	4413      	add	r3, r2
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f2      	bne.n	800acb4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	bf14      	ite	ne
 800acd4:	2301      	movne	r3, #1
 800acd6:	2300      	moveq	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	240005dc 	.word	0x240005dc

0800acec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e01f      	b.n	800ad3c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800acfc:	4a41      	ldr	r2, [pc, #260]	@ (800ae04 <inc_lock+0x118>)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	4413      	add	r3, r2
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d113      	bne.n	800ad36 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad0e:	4a3d      	ldr	r2, [pc, #244]	@ (800ae04 <inc_lock+0x118>)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	4413      	add	r3, r2
 800ad16:	3304      	adds	r3, #4
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d109      	bne.n	800ad36 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad22:	4a38      	ldr	r2, [pc, #224]	@ (800ae04 <inc_lock+0x118>)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	4413      	add	r3, r2
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d006      	beq.n	800ad44 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d9dc      	bls.n	800acfc <inc_lock+0x10>
 800ad42:	e000      	b.n	800ad46 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ad44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d132      	bne.n	800adb2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	e002      	b.n	800ad58 <inc_lock+0x6c>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3301      	adds	r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d806      	bhi.n	800ad6c <inc_lock+0x80>
 800ad5e:	4a29      	ldr	r2, [pc, #164]	@ (800ae04 <inc_lock+0x118>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	4413      	add	r3, r2
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1f2      	bne.n	800ad52 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d101      	bne.n	800ad76 <inc_lock+0x8a>
 800ad72:	2300      	movs	r3, #0
 800ad74:	e040      	b.n	800adf8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4922      	ldr	r1, [pc, #136]	@ (800ae04 <inc_lock+0x118>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	440b      	add	r3, r1
 800ad82:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	491e      	ldr	r1, [pc, #120]	@ (800ae04 <inc_lock+0x118>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	440b      	add	r3, r1
 800ad90:	3304      	adds	r3, #4
 800ad92:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	695a      	ldr	r2, [r3, #20]
 800ad98:	491a      	ldr	r1, [pc, #104]	@ (800ae04 <inc_lock+0x118>)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	440b      	add	r3, r1
 800ada0:	3308      	adds	r3, #8
 800ada2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ada4:	4a17      	ldr	r2, [pc, #92]	@ (800ae04 <inc_lock+0x118>)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	4413      	add	r3, r2
 800adac:	330c      	adds	r3, #12
 800adae:	2200      	movs	r2, #0
 800adb0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <inc_lock+0xe0>
 800adb8:	4a12      	ldr	r2, [pc, #72]	@ (800ae04 <inc_lock+0x118>)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	4413      	add	r3, r2
 800adc0:	330c      	adds	r3, #12
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <inc_lock+0xe0>
 800adc8:	2300      	movs	r3, #0
 800adca:	e015      	b.n	800adf8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d108      	bne.n	800ade4 <inc_lock+0xf8>
 800add2:	4a0c      	ldr	r2, [pc, #48]	@ (800ae04 <inc_lock+0x118>)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	4413      	add	r3, r2
 800adda:	330c      	adds	r3, #12
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	e001      	b.n	800ade8 <inc_lock+0xfc>
 800ade4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ade8:	4906      	ldr	r1, [pc, #24]	@ (800ae04 <inc_lock+0x118>)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	440b      	add	r3, r1
 800adf0:	330c      	adds	r3, #12
 800adf2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	240005dc 	.word	0x240005dc

0800ae08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	607b      	str	r3, [r7, #4]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d825      	bhi.n	800ae68 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae1c:	4a17      	ldr	r2, [pc, #92]	@ (800ae7c <dec_lock+0x74>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	4413      	add	r3, r2
 800ae24:	330c      	adds	r3, #12
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae2a:	89fb      	ldrh	r3, [r7, #14]
 800ae2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae30:	d101      	bne.n	800ae36 <dec_lock+0x2e>
 800ae32:	2300      	movs	r3, #0
 800ae34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ae36:	89fb      	ldrh	r3, [r7, #14]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <dec_lock+0x3a>
 800ae3c:	89fb      	ldrh	r3, [r7, #14]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ae42:	4a0e      	ldr	r2, [pc, #56]	@ (800ae7c <dec_lock+0x74>)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	330c      	adds	r3, #12
 800ae4c:	89fa      	ldrh	r2, [r7, #14]
 800ae4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ae50:	89fb      	ldrh	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d105      	bne.n	800ae62 <dec_lock+0x5a>
 800ae56:	4a09      	ldr	r2, [pc, #36]	@ (800ae7c <dec_lock+0x74>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	737b      	strb	r3, [r7, #13]
 800ae66:	e001      	b.n	800ae6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ae68:	2302      	movs	r3, #2
 800ae6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ae6c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	240005dc 	.word	0x240005dc

0800ae80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]
 800ae8c:	e010      	b.n	800aeb0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae8e:	4a0d      	ldr	r2, [pc, #52]	@ (800aec4 <clear_lock+0x44>)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	4413      	add	r3, r2
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d105      	bne.n	800aeaa <clear_lock+0x2a>
 800ae9e:	4a09      	ldr	r2, [pc, #36]	@ (800aec4 <clear_lock+0x44>)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	4413      	add	r3, r2
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d9eb      	bls.n	800ae8e <clear_lock+0xe>
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	240005dc 	.word	0x240005dc

0800aec8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	78db      	ldrb	r3, [r3, #3]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d034      	beq.n	800af46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7858      	ldrb	r0, [r3, #1]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aeec:	2301      	movs	r3, #1
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	f7ff fd40 	bl	800a974 <disk_write>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	73fb      	strb	r3, [r7, #15]
 800aefe:	e022      	b.n	800af46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	1ad2      	subs	r2, r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	429a      	cmp	r2, r3
 800af14:	d217      	bcs.n	800af46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	789b      	ldrb	r3, [r3, #2]
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	e010      	b.n	800af40 <sync_window+0x78>
					wsect += fs->fsize;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4413      	add	r3, r2
 800af26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7858      	ldrb	r0, [r3, #1]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af32:	2301      	movs	r3, #1
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	f7ff fd1d 	bl	800a974 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d8eb      	bhi.n	800af1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d01b      	beq.n	800afa0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ffad 	bl	800aec8 <sync_window>
 800af6e:	4603      	mov	r3, r0
 800af70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d113      	bne.n	800afa0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7858      	ldrb	r0, [r3, #1]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af82:	2301      	movs	r3, #1
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	f7ff fcd5 	bl	800a934 <disk_read>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af96:	2301      	movs	r3, #1
 800af98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ff87 	bl	800aec8 <sync_window>
 800afba:	4603      	mov	r3, r0
 800afbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d158      	bne.n	800b076 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d148      	bne.n	800b05e <sync_fs+0xb2>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d144      	bne.n	800b05e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3330      	adds	r3, #48	@ 0x30
 800afd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afdc:	2100      	movs	r1, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fda9 	bl	800ab36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3330      	adds	r3, #48	@ 0x30
 800afe8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800afec:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fd38 	bl	800aa66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3330      	adds	r3, #48	@ 0x30
 800affa:	4921      	ldr	r1, [pc, #132]	@ (800b080 <sync_fs+0xd4>)
 800affc:	4618      	mov	r0, r3
 800affe:	f7ff fd4d 	bl	800aa9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3330      	adds	r3, #48	@ 0x30
 800b006:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b00a:	491e      	ldr	r1, [pc, #120]	@ (800b084 <sync_fs+0xd8>)
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff fd45 	bl	800aa9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3330      	adds	r3, #48	@ 0x30
 800b016:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7ff fd3b 	bl	800aa9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3330      	adds	r3, #48	@ 0x30
 800b02a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f7ff fd31 	bl	800aa9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7858      	ldrb	r0, [r3, #1]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b052:	2301      	movs	r3, #1
 800b054:	f7ff fc8e 	bl	800a974 <disk_write>
			fs->fsi_flag = 0;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2200      	movs	r2, #0
 800b064:	2100      	movs	r1, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff fca4 	bl	800a9b4 <disk_ioctl>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <sync_fs+0xca>
 800b072:	2301      	movs	r3, #1
 800b074:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	41615252 	.word	0x41615252
 800b084:	61417272 	.word	0x61417272

0800b088 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	3b02      	subs	r3, #2
 800b096:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	3b02      	subs	r3, #2
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d301      	bcc.n	800b0a8 <clust2sect+0x20>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e008      	b.n	800b0ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	895b      	ldrh	r3, [r3, #10]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	fb03 f202 	mul.w	r2, r3, r2
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	4413      	add	r3, r2
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b086      	sub	sp, #24
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d904      	bls.n	800b0e6 <get_fat+0x20>
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d302      	bcc.n	800b0ec <get_fat+0x26>
		val = 1;	/* Internal error */
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	e08e      	b.n	800b20a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d061      	beq.n	800b1be <get_fat+0xf8>
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	dc7b      	bgt.n	800b1f6 <get_fat+0x130>
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d002      	beq.n	800b108 <get_fat+0x42>
 800b102:	2b02      	cmp	r3, #2
 800b104:	d041      	beq.n	800b18a <get_fat+0xc4>
 800b106:	e076      	b.n	800b1f6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4413      	add	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6a1a      	ldr	r2, [r3, #32]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	0a5b      	lsrs	r3, r3, #9
 800b11e:	4413      	add	r3, r2
 800b120:	4619      	mov	r1, r3
 800b122:	6938      	ldr	r0, [r7, #16]
 800b124:	f7ff ff14 	bl	800af50 <move_window>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d166      	bne.n	800b1fc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	60fa      	str	r2, [r7, #12]
 800b134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	4413      	add	r3, r2
 800b13c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b140:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	6a1a      	ldr	r2, [r3, #32]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	0a5b      	lsrs	r3, r3, #9
 800b14a:	4413      	add	r3, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	6938      	ldr	r0, [r7, #16]
 800b150:	f7ff fefe 	bl	800af50 <move_window>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d152      	bne.n	800b200 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4413      	add	r3, r2
 800b164:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <get_fat+0xba>
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	091b      	lsrs	r3, r3, #4
 800b17e:	e002      	b.n	800b186 <get_fat+0xc0>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b186:	617b      	str	r3, [r7, #20]
			break;
 800b188:	e03f      	b.n	800b20a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	6a1a      	ldr	r2, [r3, #32]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	0a1b      	lsrs	r3, r3, #8
 800b192:	4413      	add	r3, r2
 800b194:	4619      	mov	r1, r3
 800b196:	6938      	ldr	r0, [r7, #16]
 800b198:	f7ff feda 	bl	800af50 <move_window>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d130      	bne.n	800b204 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fc1c 	bl	800a9f0 <ld_word>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	617b      	str	r3, [r7, #20]
			break;
 800b1bc:	e025      	b.n	800b20a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6a1a      	ldr	r2, [r3, #32]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	09db      	lsrs	r3, r3, #7
 800b1c6:	4413      	add	r3, r2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6938      	ldr	r0, [r7, #16]
 800b1cc:	f7ff fec0 	bl	800af50 <move_window>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d118      	bne.n	800b208 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fc1a 	bl	800aa20 <ld_dword>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b1f2:	617b      	str	r3, [r7, #20]
			break;
 800b1f4:	e009      	b.n	800b20a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	e006      	b.n	800b20a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1fc:	bf00      	nop
 800b1fe:	e004      	b.n	800b20a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b200:	bf00      	nop
 800b202:	e002      	b.n	800b20a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b204:	bf00      	nop
 800b206:	e000      	b.n	800b20a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b208:	bf00      	nop
		}
	}

	return val;
 800b20a:	697b      	ldr	r3, [r7, #20]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b214:	b590      	push	{r4, r7, lr}
 800b216:	b089      	sub	sp, #36	@ 0x24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b220:	2302      	movs	r3, #2
 800b222:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b01      	cmp	r3, #1
 800b228:	f240 80d9 	bls.w	800b3de <put_fat+0x1ca>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	f080 80d3 	bcs.w	800b3de <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	f000 8096 	beq.w	800b36e <put_fat+0x15a>
 800b242:	2b03      	cmp	r3, #3
 800b244:	f300 80cb 	bgt.w	800b3de <put_fat+0x1ca>
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d002      	beq.n	800b252 <put_fat+0x3e>
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d06e      	beq.n	800b32e <put_fat+0x11a>
 800b250:	e0c5      	b.n	800b3de <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	085b      	lsrs	r3, r3, #1
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	4413      	add	r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a1a      	ldr	r2, [r3, #32]
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	0a5b      	lsrs	r3, r3, #9
 800b268:	4413      	add	r3, r2
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fe6f 	bl	800af50 <move_window>
 800b272:	4603      	mov	r3, r0
 800b274:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b276:	7ffb      	ldrb	r3, [r7, #31]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f040 80a9 	bne.w	800b3d0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	1c59      	adds	r1, r3, #1
 800b288:	61b9      	str	r1, [r7, #24]
 800b28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28e:	4413      	add	r3, r2
 800b290:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00d      	beq.n	800b2b8 <put_fat+0xa4>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	f003 030f 	and.w	r3, r3, #15
 800b2a6:	b25a      	sxtb	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	011b      	lsls	r3, r3, #4
 800b2ae:	b25b      	sxtb	r3, r3
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	e001      	b.n	800b2bc <put_fat+0xa8>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1a      	ldr	r2, [r3, #32]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	0a5b      	lsrs	r3, r3, #9
 800b2ce:	4413      	add	r3, r2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff fe3c 	bl	800af50 <move_window>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2dc:	7ffb      	ldrb	r3, [r7, #31]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d178      	bne.n	800b3d4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ee:	4413      	add	r3, r2
 800b2f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <put_fat+0xf0>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	091b      	lsrs	r3, r3, #4
 800b300:	b2db      	uxtb	r3, r3
 800b302:	e00e      	b.n	800b322 <put_fat+0x10e>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	b25b      	sxtb	r3, r3
 800b30a:	f023 030f 	bic.w	r3, r3, #15
 800b30e:	b25a      	sxtb	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	0a1b      	lsrs	r3, r3, #8
 800b314:	b25b      	sxtb	r3, r3
 800b316:	f003 030f 	and.w	r3, r3, #15
 800b31a:	b25b      	sxtb	r3, r3
 800b31c:	4313      	orrs	r3, r2
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	b2db      	uxtb	r3, r3
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2201      	movs	r2, #1
 800b32a:	70da      	strb	r2, [r3, #3]
			break;
 800b32c:	e057      	b.n	800b3de <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6a1a      	ldr	r2, [r3, #32]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	0a1b      	lsrs	r3, r3, #8
 800b336:	4413      	add	r3, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff fe08 	bl	800af50 <move_window>
 800b340:	4603      	mov	r3, r0
 800b342:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b344:	7ffb      	ldrb	r3, [r7, #31]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d146      	bne.n	800b3d8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b358:	4413      	add	r3, r2
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	b292      	uxth	r2, r2
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fb80 	bl	800aa66 <st_word>
			fs->wflag = 1;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	70da      	strb	r2, [r3, #3]
			break;
 800b36c:	e037      	b.n	800b3de <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1a      	ldr	r2, [r3, #32]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	09db      	lsrs	r3, r3, #7
 800b376:	4413      	add	r3, r2
 800b378:	4619      	mov	r1, r3
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f7ff fde8 	bl	800af50 <move_window>
 800b380:	4603      	mov	r3, r0
 800b382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b384:	7ffb      	ldrb	r3, [r7, #31]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d128      	bne.n	800b3dc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b39e:	4413      	add	r3, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fb3d 	bl	800aa20 <ld_dword>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b3ac:	4323      	orrs	r3, r4
 800b3ae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b3be:	4413      	add	r3, r2
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fb6a 	bl	800aa9c <st_dword>
			fs->wflag = 1;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	70da      	strb	r2, [r3, #3]
			break;
 800b3ce:	e006      	b.n	800b3de <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b3d0:	bf00      	nop
 800b3d2:	e004      	b.n	800b3de <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b3d4:	bf00      	nop
 800b3d6:	e002      	b.n	800b3de <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b3d8:	bf00      	nop
 800b3da:	e000      	b.n	800b3de <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b3dc:	bf00      	nop
		}
	}
	return res;
 800b3de:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3724      	adds	r7, #36	@ 0x24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}

0800b3e8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d904      	bls.n	800b40e <remove_chain+0x26>
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d301      	bcc.n	800b412 <remove_chain+0x2a>
 800b40e:	2302      	movs	r3, #2
 800b410:	e04b      	b.n	800b4aa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00c      	beq.n	800b432 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	69b8      	ldr	r0, [r7, #24]
 800b420:	f7ff fef8 	bl	800b214 <put_fat>
 800b424:	4603      	mov	r3, r0
 800b426:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b428:	7ffb      	ldrb	r3, [r7, #31]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <remove_chain+0x4a>
 800b42e:	7ffb      	ldrb	r3, [r7, #31]
 800b430:	e03b      	b.n	800b4aa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b432:	68b9      	ldr	r1, [r7, #8]
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7ff fe46 	bl	800b0c6 <get_fat>
 800b43a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d031      	beq.n	800b4a6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d101      	bne.n	800b44c <remove_chain+0x64>
 800b448:	2302      	movs	r3, #2
 800b44a:	e02e      	b.n	800b4aa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b452:	d101      	bne.n	800b458 <remove_chain+0x70>
 800b454:	2301      	movs	r3, #1
 800b456:	e028      	b.n	800b4aa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b458:	2200      	movs	r2, #0
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	69b8      	ldr	r0, [r7, #24]
 800b45e:	f7ff fed9 	bl	800b214 <put_fat>
 800b462:	4603      	mov	r3, r0
 800b464:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b466:	7ffb      	ldrb	r3, [r7, #31]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <remove_chain+0x88>
 800b46c:	7ffb      	ldrb	r3, [r7, #31]
 800b46e:	e01c      	b.n	800b4aa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	3b02      	subs	r3, #2
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d20b      	bcs.n	800b496 <remove_chain+0xae>
			fs->free_clst++;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	f043 0301 	orr.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d3c6      	bcc.n	800b432 <remove_chain+0x4a>
 800b4a4:	e000      	b.n	800b4a8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b4a6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b088      	sub	sp, #32
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10d      	bne.n	800b4e4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <create_chain+0x2c>
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d31b      	bcc.n	800b516 <create_chain+0x64>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	61bb      	str	r3, [r7, #24]
 800b4e2:	e018      	b.n	800b516 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fded 	bl	800b0c6 <get_fat>
 800b4ec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d801      	bhi.n	800b4f8 <create_chain+0x46>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e070      	b.n	800b5da <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d101      	bne.n	800b504 <create_chain+0x52>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	e06a      	b.n	800b5da <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d201      	bcs.n	800b512 <create_chain+0x60>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	e063      	b.n	800b5da <create_chain+0x128>
		scl = clst;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	3301      	adds	r3, #1
 800b51e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	69fa      	ldr	r2, [r7, #28]
 800b526:	429a      	cmp	r2, r3
 800b528:	d307      	bcc.n	800b53a <create_chain+0x88>
				ncl = 2;
 800b52a:	2302      	movs	r3, #2
 800b52c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b52e:	69fa      	ldr	r2, [r7, #28]
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	429a      	cmp	r2, r3
 800b534:	d901      	bls.n	800b53a <create_chain+0x88>
 800b536:	2300      	movs	r3, #0
 800b538:	e04f      	b.n	800b5da <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b53a:	69f9      	ldr	r1, [r7, #28]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fdc2 	bl	800b0c6 <get_fat>
 800b542:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00e      	beq.n	800b568 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d003      	beq.n	800b558 <create_chain+0xa6>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d101      	bne.n	800b55c <create_chain+0xaa>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	e03e      	b.n	800b5da <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	429a      	cmp	r2, r3
 800b562:	d1da      	bne.n	800b51a <create_chain+0x68>
 800b564:	2300      	movs	r3, #0
 800b566:	e038      	b.n	800b5da <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b568:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b56a:	f04f 32ff 	mov.w	r2, #4294967295
 800b56e:	69f9      	ldr	r1, [r7, #28]
 800b570:	6938      	ldr	r0, [r7, #16]
 800b572:	f7ff fe4f 	bl	800b214 <put_fat>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d109      	bne.n	800b594 <create_chain+0xe2>
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d006      	beq.n	800b594 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6938      	ldr	r0, [r7, #16]
 800b58c:	f7ff fe42 	bl	800b214 <put_fat>
 800b590:	4603      	mov	r3, r0
 800b592:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d116      	bne.n	800b5c8 <create_chain+0x116>
		fs->last_clst = ncl;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	691a      	ldr	r2, [r3, #16]
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	3b02      	subs	r3, #2
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d804      	bhi.n	800b5b8 <create_chain+0x106>
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	1e5a      	subs	r2, r3, #1
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	791b      	ldrb	r3, [r3, #4]
 800b5bc:	f043 0301 	orr.w	r3, r3, #1
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	711a      	strb	r2, [r3, #4]
 800b5c6:	e007      	b.n	800b5d8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d102      	bne.n	800b5d4 <create_chain+0x122>
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d2:	e000      	b.n	800b5d6 <create_chain+0x124>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b5d8:	69fb      	ldr	r3, [r7, #28]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b087      	sub	sp, #28
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	0a5b      	lsrs	r3, r3, #9
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	8952      	ldrh	r2, [r2, #10]
 800b602:	fbb3 f3f2 	udiv	r3, r3, r2
 800b606:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	613a      	str	r2, [r7, #16]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <clmt_clust+0x3a>
 800b618:	2300      	movs	r3, #0
 800b61a:	e010      	b.n	800b63e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	429a      	cmp	r2, r3
 800b622:	d307      	bcc.n	800b634 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	3304      	adds	r3, #4
 800b630:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b632:	e7e9      	b.n	800b608 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b634:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	4413      	add	r3, r2
}
 800b63e:	4618      	mov	r0, r3
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b660:	d204      	bcs.n	800b66c <dir_sdi+0x22>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f003 031f 	and.w	r3, r3, #31
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b66c:	2302      	movs	r3, #2
 800b66e:	e063      	b.n	800b738 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <dir_sdi+0x46>
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b02      	cmp	r3, #2
 800b688:	d902      	bls.n	800b690 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10c      	bne.n	800b6b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	8912      	ldrh	r2, [r2, #8]
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d301      	bcc.n	800b6a6 <dir_sdi+0x5c>
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e048      	b.n	800b738 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	61da      	str	r2, [r3, #28]
 800b6ae:	e029      	b.n	800b704 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	895b      	ldrh	r3, [r3, #10]
 800b6b4:	025b      	lsls	r3, r3, #9
 800b6b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6b8:	e019      	b.n	800b6ee <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fd01 	bl	800b0c6 <get_fat>
 800b6c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d101      	bne.n	800b6d2 <dir_sdi+0x88>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e032      	b.n	800b738 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d904      	bls.n	800b6e2 <dir_sdi+0x98>
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d301      	bcc.n	800b6e6 <dir_sdi+0x9c>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e028      	b.n	800b738 <dir_sdi+0xee>
			ofs -= csz;
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d2e1      	bcs.n	800b6ba <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b6f6:	6979      	ldr	r1, [r7, #20]
 800b6f8:	6938      	ldr	r0, [r7, #16]
 800b6fa:	f7ff fcc5 	bl	800b088 <clust2sect>
 800b6fe:	4602      	mov	r2, r0
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <dir_sdi+0xcc>
 800b712:	2302      	movs	r3, #2
 800b714:	e010      	b.n	800b738 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	69da      	ldr	r2, [r3, #28]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	0a5b      	lsrs	r3, r3, #9
 800b71e:	441a      	add	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	441a      	add	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	3320      	adds	r3, #32
 800b756:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <dir_next+0x28>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b766:	d301      	bcc.n	800b76c <dir_next+0x2c>
 800b768:	2304      	movs	r3, #4
 800b76a:	e0aa      	b.n	800b8c2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 8098 	bne.w	800b8a8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10b      	bne.n	800b7a2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	095b      	lsrs	r3, r3, #5
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	8912      	ldrh	r2, [r2, #8]
 800b792:	4293      	cmp	r3, r2
 800b794:	f0c0 8088 	bcc.w	800b8a8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	61da      	str	r2, [r3, #28]
 800b79e:	2304      	movs	r3, #4
 800b7a0:	e08f      	b.n	800b8c2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	0a5b      	lsrs	r3, r3, #9
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	8952      	ldrh	r2, [r2, #10]
 800b7aa:	3a01      	subs	r2, #1
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d17a      	bne.n	800b8a8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	f7ff fc83 	bl	800b0c6 <get_fat>
 800b7c0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d801      	bhi.n	800b7cc <dir_next+0x8c>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e07a      	b.n	800b8c2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d101      	bne.n	800b7d8 <dir_next+0x98>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e074      	b.n	800b8c2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d358      	bcc.n	800b894 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	61da      	str	r2, [r3, #28]
 800b7ee:	2304      	movs	r3, #4
 800b7f0:	e067      	b.n	800b8c2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	f7ff fe59 	bl	800b4b2 <create_chain>
 800b800:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <dir_next+0xcc>
 800b808:	2307      	movs	r3, #7
 800b80a:	e05a      	b.n	800b8c2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d101      	bne.n	800b816 <dir_next+0xd6>
 800b812:	2302      	movs	r3, #2
 800b814:	e055      	b.n	800b8c2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81c:	d101      	bne.n	800b822 <dir_next+0xe2>
 800b81e:	2301      	movs	r3, #1
 800b820:	e04f      	b.n	800b8c2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fb50 	bl	800aec8 <sync_window>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <dir_next+0xf2>
 800b82e:	2301      	movs	r3, #1
 800b830:	e047      	b.n	800b8c2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3330      	adds	r3, #48	@ 0x30
 800b836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b83a:	2100      	movs	r1, #0
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff f97a 	bl	800ab36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b842:	2300      	movs	r3, #0
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	6979      	ldr	r1, [r7, #20]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fc1d 	bl	800b088 <clust2sect>
 800b84e:	4602      	mov	r2, r0
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b854:	e012      	b.n	800b87c <dir_next+0x13c>
						fs->wflag = 1;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fb33 	bl	800aec8 <sync_window>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <dir_next+0x12c>
 800b868:	2301      	movs	r3, #1
 800b86a:	e02a      	b.n	800b8c2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	3301      	adds	r3, #1
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	895b      	ldrh	r3, [r3, #10]
 800b880:	461a      	mov	r2, r3
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	4293      	cmp	r3, r2
 800b886:	d3e6      	bcc.n	800b856 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	1ad2      	subs	r2, r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b89a:	6979      	ldr	r1, [r7, #20]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fbf3 	bl	800b088 <clust2sect>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ba:	441a      	add	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b086      	sub	sp, #24
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b8da:	2100      	movs	r1, #0
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff feb4 	bl	800b64a <dir_sdi>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d12b      	bne.n	800b944 <dir_alloc+0x7a>
		n = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fb2a 	bl	800af50 <move_window>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d11d      	bne.n	800b942 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2be5      	cmp	r3, #229	@ 0xe5
 800b90e:	d004      	beq.n	800b91a <dir_alloc+0x50>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d107      	bne.n	800b92a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3301      	adds	r3, #1
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d102      	bne.n	800b92e <dir_alloc+0x64>
 800b928:	e00c      	b.n	800b944 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b92a:	2300      	movs	r3, #0
 800b92c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b92e:	2101      	movs	r1, #1
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7ff ff05 	bl	800b740 <dir_next>
 800b936:	4603      	mov	r3, r0
 800b938:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0d7      	beq.n	800b8f0 <dir_alloc+0x26>
 800b940:	e000      	b.n	800b944 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b942:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	2b04      	cmp	r3, #4
 800b948:	d101      	bne.n	800b94e <dir_alloc+0x84>
 800b94a:	2307      	movs	r3, #7
 800b94c:	75fb      	strb	r3, [r7, #23]
	return res;
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	331a      	adds	r3, #26
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff f842 	bl	800a9f0 <ld_word>
 800b96c:	4603      	mov	r3, r0
 800b96e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b03      	cmp	r3, #3
 800b976:	d109      	bne.n	800b98c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	3314      	adds	r3, #20
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff f837 	bl	800a9f0 <ld_word>
 800b982:	4603      	mov	r3, r0
 800b984:	041b      	lsls	r3, r3, #16
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4313      	orrs	r3, r2
 800b98a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b98c:	68fb      	ldr	r3, [r7, #12]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	331a      	adds	r3, #26
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	b292      	uxth	r2, r2
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff f85a 	bl	800aa66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d109      	bne.n	800b9ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f103 0214 	add.w	r2, r3, #20
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	0c1b      	lsrs	r3, r3, #16
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	f7ff f84c 	bl	800aa66 <st_word>
	}
}
 800b9ce:	bf00      	nop
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b086      	sub	sp, #24
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fe2f 	bl	800b64a <dir_sdi>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b9f0:	7dfb      	ldrb	r3, [r7, #23]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <dir_find+0x24>
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	e03e      	b.n	800ba78 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6938      	ldr	r0, [r7, #16]
 800ba02:	f7ff faa5 	bl	800af50 <move_window>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d12f      	bne.n	800ba70 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <dir_find+0x4e>
 800ba1e:	2304      	movs	r3, #4
 800ba20:	75fb      	strb	r3, [r7, #23]
 800ba22:	e028      	b.n	800ba76 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	330b      	adds	r3, #11
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	330b      	adds	r3, #11
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10a      	bne.n	800ba5c <dir_find+0x86>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a18      	ldr	r0, [r3, #32]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3324      	adds	r3, #36	@ 0x24
 800ba4e:	220b      	movs	r2, #11
 800ba50:	4619      	mov	r1, r3
 800ba52:	f7ff f88b 	bl	800ab6c <mem_cmp>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00b      	beq.n	800ba74 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff fe6e 	bl	800b740 <dir_next>
 800ba64:	4603      	mov	r3, r0
 800ba66:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0c5      	beq.n	800b9fa <dir_find+0x24>
 800ba6e:	e002      	b.n	800ba76 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ba70:	bf00      	nop
 800ba72:	e000      	b.n	800ba76 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba74:	bf00      	nop

	return res;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ba8e:	2101      	movs	r1, #1
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff1a 	bl	800b8ca <dir_alloc>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11c      	bne.n	800bada <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	4619      	mov	r1, r3
 800baa6:	68b8      	ldr	r0, [r7, #8]
 800baa8:	f7ff fa52 	bl	800af50 <move_window>
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d111      	bne.n	800bada <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	2220      	movs	r2, #32
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f839 	bl	800ab36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a18      	ldr	r0, [r3, #32]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3324      	adds	r3, #36	@ 0x24
 800bacc:	220b      	movs	r2, #11
 800bace:	4619      	mov	r1, r3
 800bad0:	f7ff f810 	bl	800aaf4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2201      	movs	r2, #1
 800bad8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3324      	adds	r3, #36	@ 0x24
 800baf8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bafa:	220b      	movs	r2, #11
 800bafc:	2120      	movs	r1, #32
 800bafe:	68b8      	ldr	r0, [r7, #8]
 800bb00:	f7ff f819 	bl	800ab36 <mem_set>
	si = i = 0; ni = 8;
 800bb04:	2300      	movs	r3, #0
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	61fb      	str	r3, [r7, #28]
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	61fa      	str	r2, [r7, #28]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb1e:	7efb      	ldrb	r3, [r7, #27]
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	d94e      	bls.n	800bbc2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bb24:	7efb      	ldrb	r3, [r7, #27]
 800bb26:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb28:	d006      	beq.n	800bb38 <create_name+0x54>
 800bb2a:	7efb      	ldrb	r3, [r7, #27]
 800bb2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb2e:	d110      	bne.n	800bb52 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb30:	e002      	b.n	800bb38 <create_name+0x54>
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	3301      	adds	r3, #1
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb42:	d0f6      	beq.n	800bb32 <create_name+0x4e>
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	4413      	add	r3, r2
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb4e:	d0f0      	beq.n	800bb32 <create_name+0x4e>
			break;
 800bb50:	e038      	b.n	800bbc4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bb52:	7efb      	ldrb	r3, [r7, #27]
 800bb54:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb56:	d003      	beq.n	800bb60 <create_name+0x7c>
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d30c      	bcc.n	800bb7a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b0b      	cmp	r3, #11
 800bb64:	d002      	beq.n	800bb6c <create_name+0x88>
 800bb66:	7efb      	ldrb	r3, [r7, #27]
 800bb68:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb6a:	d001      	beq.n	800bb70 <create_name+0x8c>
 800bb6c:	2306      	movs	r3, #6
 800bb6e:	e044      	b.n	800bbfa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bb70:	2308      	movs	r3, #8
 800bb72:	613b      	str	r3, [r7, #16]
 800bb74:	230b      	movs	r3, #11
 800bb76:	617b      	str	r3, [r7, #20]
			continue;
 800bb78:	e022      	b.n	800bbc0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bb7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	da04      	bge.n	800bb8c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bb82:	7efb      	ldrb	r3, [r7, #27]
 800bb84:	3b80      	subs	r3, #128	@ 0x80
 800bb86:	4a1f      	ldr	r2, [pc, #124]	@ (800bc04 <create_name+0x120>)
 800bb88:	5cd3      	ldrb	r3, [r2, r3]
 800bb8a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bb8c:	7efb      	ldrb	r3, [r7, #27]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	481d      	ldr	r0, [pc, #116]	@ (800bc08 <create_name+0x124>)
 800bb92:	f7ff f812 	bl	800abba <chk_chr>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <create_name+0xbc>
 800bb9c:	2306      	movs	r3, #6
 800bb9e:	e02c      	b.n	800bbfa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bba0:	7efb      	ldrb	r3, [r7, #27]
 800bba2:	2b60      	cmp	r3, #96	@ 0x60
 800bba4:	d905      	bls.n	800bbb2 <create_name+0xce>
 800bba6:	7efb      	ldrb	r3, [r7, #27]
 800bba8:	2b7a      	cmp	r3, #122	@ 0x7a
 800bbaa:	d802      	bhi.n	800bbb2 <create_name+0xce>
 800bbac:	7efb      	ldrb	r3, [r7, #27]
 800bbae:	3b20      	subs	r3, #32
 800bbb0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	613a      	str	r2, [r7, #16]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	4413      	add	r3, r2
 800bbbc:	7efa      	ldrb	r2, [r7, #27]
 800bbbe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bbc0:	e7a6      	b.n	800bb10 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bbc2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	441a      	add	r2, r3
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <create_name+0xf4>
 800bbd4:	2306      	movs	r3, #6
 800bbd6:	e010      	b.n	800bbfa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2be5      	cmp	r3, #229	@ 0xe5
 800bbde:	d102      	bne.n	800bbe6 <create_name+0x102>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bbe6:	7efb      	ldrb	r3, [r7, #27]
 800bbe8:	2b20      	cmp	r3, #32
 800bbea:	d801      	bhi.n	800bbf0 <create_name+0x10c>
 800bbec:	2204      	movs	r2, #4
 800bbee:	e000      	b.n	800bbf2 <create_name+0x10e>
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	330b      	adds	r3, #11
 800bbf6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bbf8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	080109b8 	.word	0x080109b8
 800bc08:	08010964 	.word	0x08010964

0800bc0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc20:	e002      	b.n	800bc28 <follow_path+0x1c>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	3301      	adds	r3, #1
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc2e:	d0f8      	beq.n	800bc22 <follow_path+0x16>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc36:	d0f4      	beq.n	800bc22 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b1f      	cmp	r3, #31
 800bc44:	d80a      	bhi.n	800bc5c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2280      	movs	r2, #128	@ 0x80
 800bc4a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff fcfa 	bl	800b64a <dir_sdi>
 800bc56:	4603      	mov	r3, r0
 800bc58:	75fb      	strb	r3, [r7, #23]
 800bc5a:	e043      	b.n	800bce4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff ff3f 	bl	800bae4 <create_name>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d134      	bne.n	800bcda <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff feb0 	bl	800b9d6 <dir_find>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d127      	bne.n	800bcde <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc8e:	7afb      	ldrb	r3, [r7, #11]
 800bc90:	f003 0304 	and.w	r3, r3, #4
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d122      	bne.n	800bcde <follow_path+0xd2>
 800bc98:	2305      	movs	r3, #5
 800bc9a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc9c:	e01f      	b.n	800bcde <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	f003 0304 	and.w	r3, r3, #4
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d11c      	bne.n	800bce2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	799b      	ldrb	r3, [r3, #6]
 800bcac:	f003 0310 	and.w	r3, r3, #16
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bcb4:	2305      	movs	r3, #5
 800bcb6:	75fb      	strb	r3, [r7, #23]
 800bcb8:	e014      	b.n	800bce4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	4413      	add	r3, r2
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f7ff fe43 	bl	800b958 <ld_clust>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcd8:	e7c0      	b.n	800bc5c <follow_path+0x50>
			if (res != FR_OK) break;
 800bcda:	bf00      	nop
 800bcdc:	e002      	b.n	800bce4 <follow_path+0xd8>
				break;
 800bcde:	bf00      	nop
 800bce0:	e000      	b.n	800bce4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bce2:	bf00      	nop
			}
		}
	}

	return res;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b087      	sub	sp, #28
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bcf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d031      	beq.n	800bd68 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	617b      	str	r3, [r7, #20]
 800bd0a:	e002      	b.n	800bd12 <get_ldnumber+0x24>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	d903      	bls.n	800bd22 <get_ldnumber+0x34>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd20:	d1f4      	bne.n	800bd0c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd28:	d11c      	bne.n	800bd64 <get_ldnumber+0x76>
			tp = *path;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	60fa      	str	r2, [r7, #12]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	3b30      	subs	r3, #48	@ 0x30
 800bd3a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b09      	cmp	r3, #9
 800bd40:	d80e      	bhi.n	800bd60 <get_ldnumber+0x72>
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d10a      	bne.n	800bd60 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d107      	bne.n	800bd60 <get_ldnumber+0x72>
					vol = (int)i;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	3301      	adds	r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	e002      	b.n	800bd6a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bd64:	2300      	movs	r3, #0
 800bd66:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bd68:	693b      	ldr	r3, [r7, #16]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
	...

0800bd78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	70da      	strb	r2, [r3, #3]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7ff f8dc 	bl	800af50 <move_window>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <check_fs+0x2a>
 800bd9e:	2304      	movs	r3, #4
 800bda0:	e038      	b.n	800be14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	3330      	adds	r3, #48	@ 0x30
 800bda6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fe20 	bl	800a9f0 <ld_word>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d001      	beq.n	800bdc0 <check_fs+0x48>
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e029      	b.n	800be14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdc6:	2be9      	cmp	r3, #233	@ 0xe9
 800bdc8:	d009      	beq.n	800bdde <check_fs+0x66>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdd0:	2beb      	cmp	r3, #235	@ 0xeb
 800bdd2:	d11e      	bne.n	800be12 <check_fs+0x9a>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bdda:	2b90      	cmp	r3, #144	@ 0x90
 800bddc:	d119      	bne.n	800be12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3330      	adds	r3, #48	@ 0x30
 800bde2:	3336      	adds	r3, #54	@ 0x36
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fe1b 	bl	800aa20 <ld_dword>
 800bdea:	4603      	mov	r3, r0
 800bdec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bdf0:	4a0a      	ldr	r2, [pc, #40]	@ (800be1c <check_fs+0xa4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d101      	bne.n	800bdfa <check_fs+0x82>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e00c      	b.n	800be14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3330      	adds	r3, #48	@ 0x30
 800bdfe:	3352      	adds	r3, #82	@ 0x52
 800be00:	4618      	mov	r0, r3
 800be02:	f7fe fe0d 	bl	800aa20 <ld_dword>
 800be06:	4603      	mov	r3, r0
 800be08:	4a05      	ldr	r2, [pc, #20]	@ (800be20 <check_fs+0xa8>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d101      	bne.n	800be12 <check_fs+0x9a>
 800be0e:	2300      	movs	r3, #0
 800be10:	e000      	b.n	800be14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be12:	2302      	movs	r3, #2
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	00544146 	.word	0x00544146
 800be20:	33544146 	.word	0x33544146

0800be24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b096      	sub	sp, #88	@ 0x58
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	4613      	mov	r3, r2
 800be30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7ff ff58 	bl	800bcee <get_ldnumber>
 800be3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	2b00      	cmp	r3, #0
 800be44:	da01      	bge.n	800be4a <find_volume+0x26>
 800be46:	230b      	movs	r3, #11
 800be48:	e22d      	b.n	800c2a6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be4a:	4aa1      	ldr	r2, [pc, #644]	@ (800c0d0 <find_volume+0x2ac>)
 800be4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be52:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800be54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <find_volume+0x3a>
 800be5a:	230c      	movs	r3, #12
 800be5c:	e223      	b.n	800c2a6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	f023 0301 	bic.w	r3, r3, #1
 800be6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d01a      	beq.n	800beaa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe fd19 	bl	800a8b0 <disk_status>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10c      	bne.n	800beaa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d007      	beq.n	800bea6 <find_volume+0x82>
 800be96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bea2:	230a      	movs	r3, #10
 800bea4:	e1ff      	b.n	800c2a6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bea6:	2300      	movs	r3, #0
 800bea8:	e1fd      	b.n	800c2a6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800beaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beac:	2200      	movs	r2, #0
 800beae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800beb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800beb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe fd11 	bl	800a8e4 <disk_initialize>
 800bec2:	4603      	mov	r3, r0
 800bec4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bec8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bed4:	2303      	movs	r3, #3
 800bed6:	e1e6      	b.n	800c2a6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d007      	beq.n	800beee <find_volume+0xca>
 800bede:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bee2:	f003 0304 	and.w	r3, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800beea:	230a      	movs	r3, #10
 800beec:	e1db      	b.n	800c2a6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bef2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bef4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bef6:	f7ff ff3f 	bl	800bd78 <check_fs>
 800befa:	4603      	mov	r3, r0
 800befc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d149      	bne.n	800bf9c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf08:	2300      	movs	r3, #0
 800bf0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf0c:	e01e      	b.n	800bf4c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bf1c:	4413      	add	r3, r2
 800bf1e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	3304      	adds	r3, #4
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d006      	beq.n	800bf38 <find_volume+0x114>
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fd76 	bl	800aa20 <ld_dword>
 800bf34:	4602      	mov	r2, r0
 800bf36:	e000      	b.n	800bf3a <find_volume+0x116>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	3358      	adds	r3, #88	@ 0x58
 800bf40:	443b      	add	r3, r7
 800bf42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf48:	3301      	adds	r3, #1
 800bf4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d9dd      	bls.n	800bf0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf52:	2300      	movs	r3, #0
 800bf54:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bf56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <find_volume+0x13e>
 800bf5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	3358      	adds	r3, #88	@ 0x58
 800bf68:	443b      	add	r3, r7
 800bf6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bf6e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <find_volume+0x15e>
 800bf76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf7a:	f7ff fefd 	bl	800bd78 <check_fs>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	e000      	b.n	800bf84 <find_volume+0x160>
 800bf82:	2303      	movs	r3, #3
 800bf84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d905      	bls.n	800bf9c <find_volume+0x178>
 800bf90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf92:	3301      	adds	r3, #1
 800bf94:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d9e2      	bls.n	800bf62 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d101      	bne.n	800bfa8 <find_volume+0x184>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e17e      	b.n	800c2a6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bfa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d901      	bls.n	800bfb4 <find_volume+0x190>
 800bfb0:	230d      	movs	r3, #13
 800bfb2:	e178      	b.n	800c2a6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb6:	3330      	adds	r3, #48	@ 0x30
 800bfb8:	330b      	adds	r3, #11
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe fd18 	bl	800a9f0 <ld_word>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc6:	d001      	beq.n	800bfcc <find_volume+0x1a8>
 800bfc8:	230d      	movs	r3, #13
 800bfca:	e16c      	b.n	800c2a6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfce:	3330      	adds	r3, #48	@ 0x30
 800bfd0:	3316      	adds	r3, #22
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fd0c 	bl	800a9f0 <ld_word>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <find_volume+0x1cc>
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe4:	3330      	adds	r3, #48	@ 0x30
 800bfe6:	3324      	adds	r3, #36	@ 0x24
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fd19 	bl	800aa20 <ld_dword>
 800bfee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bff4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	789b      	ldrb	r3, [r3, #2]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d005      	beq.n	800c014 <find_volume+0x1f0>
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	789b      	ldrb	r3, [r3, #2]
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d001      	beq.n	800c014 <find_volume+0x1f0>
 800c010:	230d      	movs	r3, #13
 800c012:	e148      	b.n	800c2a6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c016:	789b      	ldrb	r3, [r3, #2]
 800c018:	461a      	mov	r2, r3
 800c01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c01c:	fb02 f303 	mul.w	r3, r2, r3
 800c020:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c028:	461a      	mov	r2, r3
 800c02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	895b      	ldrh	r3, [r3, #10]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <find_volume+0x224>
 800c036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c038:	895b      	ldrh	r3, [r3, #10]
 800c03a:	461a      	mov	r2, r3
 800c03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03e:	895b      	ldrh	r3, [r3, #10]
 800c040:	3b01      	subs	r3, #1
 800c042:	4013      	ands	r3, r2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <find_volume+0x228>
 800c048:	230d      	movs	r3, #13
 800c04a:	e12c      	b.n	800c2a6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04e:	3330      	adds	r3, #48	@ 0x30
 800c050:	3311      	adds	r3, #17
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fccc 	bl	800a9f0 <ld_word>
 800c058:	4603      	mov	r3, r0
 800c05a:	461a      	mov	r2, r3
 800c05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c062:	891b      	ldrh	r3, [r3, #8]
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	b29b      	uxth	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <find_volume+0x24e>
 800c06e:	230d      	movs	r3, #13
 800c070:	e119      	b.n	800c2a6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c074:	3330      	adds	r3, #48	@ 0x30
 800c076:	3313      	adds	r3, #19
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fe fcb9 	bl	800a9f0 <ld_word>
 800c07e:	4603      	mov	r3, r0
 800c080:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c084:	2b00      	cmp	r3, #0
 800c086:	d106      	bne.n	800c096 <find_volume+0x272>
 800c088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08a:	3330      	adds	r3, #48	@ 0x30
 800c08c:	3320      	adds	r3, #32
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fcc6 	bl	800aa20 <ld_dword>
 800c094:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c098:	3330      	adds	r3, #48	@ 0x30
 800c09a:	330e      	adds	r3, #14
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fe fca7 	bl	800a9f0 <ld_word>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c0a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <find_volume+0x28c>
 800c0ac:	230d      	movs	r3, #13
 800c0ae:	e0fa      	b.n	800c2a6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c0b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0b4:	4413      	add	r3, r2
 800c0b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0b8:	8912      	ldrh	r2, [r2, #8]
 800c0ba:	0912      	lsrs	r2, r2, #4
 800c0bc:	b292      	uxth	r2, r2
 800c0be:	4413      	add	r3, r2
 800c0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c0c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d204      	bcs.n	800c0d4 <find_volume+0x2b0>
 800c0ca:	230d      	movs	r3, #13
 800c0cc:	e0eb      	b.n	800c2a6 <find_volume+0x482>
 800c0ce:	bf00      	nop
 800c0d0:	240005d4 	.word	0x240005d4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c0d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0dc:	8952      	ldrh	r2, [r2, #10]
 800c0de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <find_volume+0x2ca>
 800c0ea:	230d      	movs	r3, #13
 800c0ec:	e0db      	b.n	800c2a6 <find_volume+0x482>
		fmt = FS_FAT32;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d802      	bhi.n	800c104 <find_volume+0x2e0>
 800c0fe:	2302      	movs	r3, #2
 800c100:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c106:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d802      	bhi.n	800c114 <find_volume+0x2f0>
 800c10e:	2301      	movs	r3, #1
 800c110:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c116:	1c9a      	adds	r2, r3, #2
 800c118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c120:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c122:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c126:	441a      	add	r2, r3
 800c128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c12c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	441a      	add	r2, r3
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c136:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d11e      	bne.n	800c17c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c140:	3330      	adds	r3, #48	@ 0x30
 800c142:	332a      	adds	r3, #42	@ 0x2a
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe fc53 	bl	800a9f0 <ld_word>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <find_volume+0x330>
 800c150:	230d      	movs	r3, #13
 800c152:	e0a8      	b.n	800c2a6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c156:	891b      	ldrh	r3, [r3, #8]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <find_volume+0x33c>
 800c15c:	230d      	movs	r3, #13
 800c15e:	e0a2      	b.n	800c2a6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c162:	3330      	adds	r3, #48	@ 0x30
 800c164:	332c      	adds	r3, #44	@ 0x2c
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fc5a 	bl	800aa20 <ld_dword>
 800c16c:	4602      	mov	r2, r0
 800c16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c170:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	647b      	str	r3, [r7, #68]	@ 0x44
 800c17a:	e01f      	b.n	800c1bc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17e:	891b      	ldrh	r3, [r3, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <find_volume+0x364>
 800c184:	230d      	movs	r3, #13
 800c186:	e08e      	b.n	800c2a6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18a:	6a1a      	ldr	r2, [r3, #32]
 800c18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c18e:	441a      	add	r2, r3
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d103      	bne.n	800c1a4 <find_volume+0x380>
 800c19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	e00a      	b.n	800c1ba <find_volume+0x396>
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a6:	695a      	ldr	r2, [r3, #20]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	085a      	lsrs	r2, r3, #1
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c1ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1be:	699a      	ldr	r2, [r3, #24]
 800c1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c1c6:	0a5b      	lsrs	r3, r3, #9
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d201      	bcs.n	800c1d0 <find_volume+0x3ac>
 800c1cc:	230d      	movs	r3, #13
 800c1ce:	e06a      	b.n	800c2a6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d6:	611a      	str	r2, [r3, #16]
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	691a      	ldr	r2, [r3, #16]
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1de:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e2:	2280      	movs	r2, #128	@ 0x80
 800c1e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c1e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d149      	bne.n	800c282 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	3330      	adds	r3, #48	@ 0x30
 800c1f2:	3330      	adds	r3, #48	@ 0x30
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fbfb 	bl	800a9f0 <ld_word>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d140      	bne.n	800c282 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c202:	3301      	adds	r3, #1
 800c204:	4619      	mov	r1, r3
 800c206:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c208:	f7fe fea2 	bl	800af50 <move_window>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d137      	bne.n	800c282 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	2200      	movs	r2, #0
 800c216:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21a:	3330      	adds	r3, #48	@ 0x30
 800c21c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe fbe5 	bl	800a9f0 <ld_word>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c22e:	429a      	cmp	r2, r3
 800c230:	d127      	bne.n	800c282 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c234:	3330      	adds	r3, #48	@ 0x30
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fbf2 	bl	800aa20 <ld_dword>
 800c23c:	4603      	mov	r3, r0
 800c23e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2b0 <find_volume+0x48c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d11e      	bne.n	800c282 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	3330      	adds	r3, #48	@ 0x30
 800c248:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fbe7 	bl	800aa20 <ld_dword>
 800c252:	4603      	mov	r3, r0
 800c254:	4a17      	ldr	r2, [pc, #92]	@ (800c2b4 <find_volume+0x490>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d113      	bne.n	800c282 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	3330      	adds	r3, #48	@ 0x30
 800c25e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fbdc 	bl	800aa20 <ld_dword>
 800c268:	4602      	mov	r2, r0
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c270:	3330      	adds	r3, #48	@ 0x30
 800c272:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe fbd2 	bl	800aa20 <ld_dword>
 800c27c:	4602      	mov	r2, r0
 800c27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c280:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c284:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c288:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c28a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b8 <find_volume+0x494>)
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	3301      	adds	r3, #1
 800c290:	b29a      	uxth	r2, r3
 800c292:	4b09      	ldr	r3, [pc, #36]	@ (800c2b8 <find_volume+0x494>)
 800c294:	801a      	strh	r2, [r3, #0]
 800c296:	4b08      	ldr	r3, [pc, #32]	@ (800c2b8 <find_volume+0x494>)
 800c298:	881a      	ldrh	r2, [r3, #0]
 800c29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c29e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2a0:	f7fe fdee 	bl	800ae80 <clear_lock>
#endif
	return FR_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3758      	adds	r7, #88	@ 0x58
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	41615252 	.word	0x41615252
 800c2b4:	61417272 	.word	0x61417272
 800c2b8:	240005d8 	.word	0x240005d8

0800c2bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c2c6:	2309      	movs	r3, #9
 800c2c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01c      	beq.n	800c30a <validate+0x4e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d018      	beq.n	800c30a <validate+0x4e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d013      	beq.n	800c30a <validate+0x4e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	889a      	ldrh	r2, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	88db      	ldrh	r3, [r3, #6]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d10c      	bne.n	800c30a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	785b      	ldrb	r3, [r3, #1]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fada 	bl	800a8b0 <disk_status>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <validate+0x4e>
			res = FR_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <validate+0x5a>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	e000      	b.n	800c318 <validate+0x5c>
 800c316:	2300      	movs	r3, #0
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	6013      	str	r3, [r2, #0]
	return res;
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	4613      	mov	r3, r2
 800c334:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c33a:	f107 0310 	add.w	r3, r7, #16
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff fcd5 	bl	800bcee <get_ldnumber>
 800c344:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da01      	bge.n	800c350 <f_mount+0x28>
 800c34c:	230b      	movs	r3, #11
 800c34e:	e02b      	b.n	800c3a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c350:	4a17      	ldr	r2, [pc, #92]	@ (800c3b0 <f_mount+0x88>)
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c358:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d005      	beq.n	800c36c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c360:	69b8      	ldr	r0, [r7, #24]
 800c362:	f7fe fd8d 	bl	800ae80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	490d      	ldr	r1, [pc, #52]	@ (800c3b0 <f_mount+0x88>)
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <f_mount+0x66>
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d001      	beq.n	800c392 <f_mount+0x6a>
 800c38e:	2300      	movs	r3, #0
 800c390:	e00a      	b.n	800c3a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c392:	f107 010c 	add.w	r1, r7, #12
 800c396:	f107 0308 	add.w	r3, r7, #8
 800c39a:	2200      	movs	r2, #0
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fd41 	bl	800be24 <find_volume>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3720      	adds	r7, #32
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	240005d4 	.word	0x240005d4

0800c3b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b098      	sub	sp, #96	@ 0x60
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <f_open+0x18>
 800c3c8:	2309      	movs	r3, #9
 800c3ca:	e1a9      	b.n	800c720 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c3d4:	79fa      	ldrb	r2, [r7, #7]
 800c3d6:	f107 0110 	add.w	r1, r7, #16
 800c3da:	f107 0308 	add.w	r3, r7, #8
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fd20 	bl	800be24 <find_volume>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c3ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 818d 	bne.w	800c70e <f_open+0x35a>
		dj.obj.fs = fs;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	f107 0314 	add.w	r3, r7, #20
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff fc03 	bl	800bc0c <follow_path>
 800c406:	4603      	mov	r3, r0
 800c408:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c40c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c410:	2b00      	cmp	r3, #0
 800c412:	d118      	bne.n	800c446 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c414:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c418:	b25b      	sxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	da03      	bge.n	800c426 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c41e:	2306      	movs	r3, #6
 800c420:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c424:	e00f      	b.n	800c446 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	bf8c      	ite	hi
 800c42c:	2301      	movhi	r3, #1
 800c42e:	2300      	movls	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	461a      	mov	r2, r3
 800c434:	f107 0314 	add.w	r3, r7, #20
 800c438:	4611      	mov	r1, r2
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fbd8 	bl	800abf0 <chk_lock>
 800c440:	4603      	mov	r3, r0
 800c442:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	f003 031c 	and.w	r3, r3, #28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d07f      	beq.n	800c550 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c450:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c454:	2b00      	cmp	r3, #0
 800c456:	d017      	beq.n	800c488 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c458:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d10e      	bne.n	800c47e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c460:	f7fe fc22 	bl	800aca8 <enq_lock>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d006      	beq.n	800c478 <f_open+0xc4>
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff fb06 	bl	800ba80 <dir_register>
 800c474:	4603      	mov	r3, r0
 800c476:	e000      	b.n	800c47a <f_open+0xc6>
 800c478:	2312      	movs	r3, #18
 800c47a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c47e:	79fb      	ldrb	r3, [r7, #7]
 800c480:	f043 0308 	orr.w	r3, r3, #8
 800c484:	71fb      	strb	r3, [r7, #7]
 800c486:	e010      	b.n	800c4aa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c488:	7ebb      	ldrb	r3, [r7, #26]
 800c48a:	f003 0311 	and.w	r3, r3, #17
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <f_open+0xe6>
					res = FR_DENIED;
 800c492:	2307      	movs	r3, #7
 800c494:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c498:	e007      	b.n	800c4aa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <f_open+0xf6>
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d168      	bne.n	800c584 <f_open+0x1d0>
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d063      	beq.n	800c584 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c4bc:	f7fd fca0 	bl	8009e00 <get_fattime>
 800c4c0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c4:	330e      	adds	r3, #14
 800c4c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe fae7 	bl	800aa9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	3316      	adds	r3, #22
 800c4d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe fae1 	bl	800aa9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4dc:	330b      	adds	r3, #11
 800c4de:	2220      	movs	r2, #32
 800c4e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7ff fa35 	bl	800b958 <ld_clust>
 800c4ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fa4d 	bl	800b996 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4fe:	331c      	adds	r3, #28
 800c500:	2100      	movs	r1, #0
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe faca 	bl	800aa9c <st_dword>
					fs->wflag = 1;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2201      	movs	r2, #1
 800c50c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c50e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d037      	beq.n	800c584 <f_open+0x1d0>
						dw = fs->winsect;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c518:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c51a:	f107 0314 	add.w	r3, r7, #20
 800c51e:	2200      	movs	r2, #0
 800c520:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe ff60 	bl	800b3e8 <remove_chain>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c52e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c532:	2b00      	cmp	r3, #0
 800c534:	d126      	bne.n	800c584 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe fd08 	bl	800af50 <move_window>
 800c540:	4603      	mov	r3, r0
 800c542:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c54a:	3a01      	subs	r2, #1
 800c54c:	60da      	str	r2, [r3, #12]
 800c54e:	e019      	b.n	800c584 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c550:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c554:	2b00      	cmp	r3, #0
 800c556:	d115      	bne.n	800c584 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c558:	7ebb      	ldrb	r3, [r7, #26]
 800c55a:	f003 0310 	and.w	r3, r3, #16
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <f_open+0x1b6>
					res = FR_NO_FILE;
 800c562:	2304      	movs	r3, #4
 800c564:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c568:	e00c      	b.n	800c584 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <f_open+0x1d0>
 800c574:	7ebb      	ldrb	r3, [r7, #26]
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <f_open+0x1d0>
						res = FR_DENIED;
 800c57e:	2307      	movs	r3, #7
 800c580:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c584:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d126      	bne.n	800c5da <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c59c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c5a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	bf8c      	ite	hi
 800c5b2:	2301      	movhi	r3, #1
 800c5b4:	2300      	movls	r3, #0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	f107 0314 	add.w	r3, r7, #20
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fb93 	bl	800acec <inc_lock>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d102      	bne.n	800c5da <f_open+0x226>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c5da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f040 8095 	bne.w	800c70e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff f9b4 	bl	800b958 <ld_clust>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f8:	331c      	adds	r3, #28
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fa10 	bl	800aa20 <ld_dword>
 800c600:	4602      	mov	r2, r0
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	88da      	ldrh	r2, [r3, #6]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	79fa      	ldrb	r2, [r7, #7]
 800c61e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3330      	adds	r3, #48	@ 0x30
 800c636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c63a:	2100      	movs	r1, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fa7a 	bl	800ab36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d060      	beq.n	800c70e <f_open+0x35a>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d05c      	beq.n	800c70e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	68da      	ldr	r2, [r3, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	895b      	ldrh	r3, [r3, #10]
 800c660:	025b      	lsls	r3, r3, #9
 800c662:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c670:	e016      	b.n	800c6a0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fd25 	bl	800b0c6 <get_fat>
 800c67c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c680:	2b01      	cmp	r3, #1
 800c682:	d802      	bhi.n	800c68a <f_open+0x2d6>
 800c684:	2302      	movs	r3, #2
 800c686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c690:	d102      	bne.n	800c698 <f_open+0x2e4>
 800c692:	2301      	movs	r3, #1
 800c694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c69a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d103      	bne.n	800c6b0 <f_open+0x2fc>
 800c6a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c6aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d8e0      	bhi.n	800c672 <f_open+0x2be>
				}
				fp->clust = clst;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d127      	bne.n	800c70e <f_open+0x35a>
 800c6be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d022      	beq.n	800c70e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe fcdb 	bl	800b088 <clust2sect>
 800c6d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c6d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d103      	bne.n	800c6e2 <f_open+0x32e>
						res = FR_INT_ERR;
 800c6da:	2302      	movs	r3, #2
 800c6dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c6e0:	e015      	b.n	800c70e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6e4:	0a5a      	lsrs	r2, r3, #9
 800c6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6e8:	441a      	add	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	7858      	ldrb	r0, [r3, #1]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a1a      	ldr	r2, [r3, #32]
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	f7fe f919 	bl	800a934 <disk_read>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <f_open+0x35a>
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c70e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c712:	2b00      	cmp	r3, #0
 800c714:	d002      	beq.n	800c71c <f_open+0x368>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c71c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c720:	4618      	mov	r0, r3
 800c722:	3760      	adds	r7, #96	@ 0x60
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08e      	sub	sp, #56	@ 0x38
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f107 0214 	add.w	r2, r7, #20
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff fdb7 	bl	800c2bc <validate>
 800c74e:	4603      	mov	r3, r0
 800c750:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c754:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d107      	bne.n	800c76c <f_read+0x44>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	7d5b      	ldrb	r3, [r3, #21]
 800c760:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c764:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <f_read+0x4a>
 800c76c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c770:	e115      	b.n	800c99e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	7d1b      	ldrb	r3, [r3, #20]
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <f_read+0x5a>
 800c77e:	2307      	movs	r3, #7
 800c780:	e10d      	b.n	800c99e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68da      	ldr	r2, [r3, #12]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	6a3b      	ldr	r3, [r7, #32]
 800c792:	429a      	cmp	r2, r3
 800c794:	f240 80fe 	bls.w	800c994 <f_read+0x26c>
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c79c:	e0fa      	b.n	800c994 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 80c6 	bne.w	800c938 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	0a5b      	lsrs	r3, r3, #9
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	8952      	ldrh	r2, [r2, #10]
 800c7b6:	3a01      	subs	r2, #1
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d12f      	bne.n	800c822 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d103      	bne.n	800c7d2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d0:	e013      	b.n	800c7fa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d007      	beq.n	800c7ea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7fe fefe 	bl	800b5e2 <clmt_clust>
 800c7e6:	6338      	str	r0, [r7, #48]	@ 0x30
 800c7e8:	e007      	b.n	800c7fa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fe fc67 	bl	800b0c6 <get_fat>
 800c7f8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d804      	bhi.n	800c80a <f_read+0xe2>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2202      	movs	r2, #2
 800c804:	755a      	strb	r2, [r3, #21]
 800c806:	2302      	movs	r3, #2
 800c808:	e0c9      	b.n	800c99e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c810:	d104      	bne.n	800c81c <f_read+0xf4>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	755a      	strb	r2, [r3, #21]
 800c818:	2301      	movs	r3, #1
 800c81a:	e0c0      	b.n	800c99e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c820:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	4619      	mov	r1, r3
 800c82a:	4610      	mov	r0, r2
 800c82c:	f7fe fc2c 	bl	800b088 <clust2sect>
 800c830:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d104      	bne.n	800c842 <f_read+0x11a>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2202      	movs	r2, #2
 800c83c:	755a      	strb	r2, [r3, #21]
 800c83e:	2302      	movs	r3, #2
 800c840:	e0ad      	b.n	800c99e <f_read+0x276>
			sect += csect;
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0a5b      	lsrs	r3, r3, #9
 800c84e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c852:	2b00      	cmp	r3, #0
 800c854:	d039      	beq.n	800c8ca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c856:	69fa      	ldr	r2, [r7, #28]
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	4413      	add	r3, r2
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	8952      	ldrh	r2, [r2, #10]
 800c860:	4293      	cmp	r3, r2
 800c862:	d905      	bls.n	800c870 <f_read+0x148>
					cc = fs->csize - csect;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	895b      	ldrh	r3, [r3, #10]
 800c868:	461a      	mov	r2, r3
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	7858      	ldrb	r0, [r3, #1]
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	69ba      	ldr	r2, [r7, #24]
 800c878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c87a:	f7fe f85b 	bl	800a934 <disk_read>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <f_read+0x166>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	755a      	strb	r2, [r3, #21]
 800c88a:	2301      	movs	r3, #1
 800c88c:	e087      	b.n	800c99e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	7d1b      	ldrb	r3, [r3, #20]
 800c892:	b25b      	sxtb	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	da14      	bge.n	800c8c2 <f_read+0x19a>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1a      	ldr	r2, [r3, #32]
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d90d      	bls.n	800c8c2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a1a      	ldr	r2, [r3, #32]
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	025b      	lsls	r3, r3, #9
 800c8b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8b2:	18d0      	adds	r0, r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3330      	adds	r3, #48	@ 0x30
 800c8b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8bc:	4619      	mov	r1, r3
 800c8be:	f7fe f919 	bl	800aaf4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c4:	025b      	lsls	r3, r3, #9
 800c8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c8c8:	e050      	b.n	800c96c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d02e      	beq.n	800c932 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	7d1b      	ldrb	r3, [r3, #20]
 800c8d8:	b25b      	sxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	da18      	bge.n	800c910 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	7858      	ldrb	r0, [r3, #1]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a1a      	ldr	r2, [r3, #32]
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f7fe f841 	bl	800a974 <disk_write>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <f_read+0x1da>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	755a      	strb	r2, [r3, #21]
 800c8fe:	2301      	movs	r3, #1
 800c900:	e04d      	b.n	800c99e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	7d1b      	ldrb	r3, [r3, #20]
 800c906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	7858      	ldrb	r0, [r3, #1]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c91a:	2301      	movs	r3, #1
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	f7fe f809 	bl	800a934 <disk_read>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <f_read+0x20a>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	755a      	strb	r2, [r3, #21]
 800c92e:	2301      	movs	r3, #1
 800c930:	e035      	b.n	800c99e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c944:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d901      	bls.n	800c952 <f_read+0x22a>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c960:	4413      	add	r3, r2
 800c962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c964:	4619      	mov	r1, r3
 800c966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c968:	f7fe f8c4 	bl	800aaf4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c96c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c970:	4413      	add	r3, r2
 800c972:	627b      	str	r3, [r7, #36]	@ 0x24
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	699a      	ldr	r2, [r3, #24]
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	441a      	add	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	619a      	str	r2, [r3, #24]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c986:	441a      	add	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f47f af01 	bne.w	800c79e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3738      	adds	r7, #56	@ 0x38
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b086      	sub	sp, #24
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f107 0208 	add.w	r2, r7, #8
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fc80 	bl	800c2bc <validate>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d168      	bne.n	800ca98 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d062      	beq.n	800ca98 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7d1b      	ldrb	r3, [r3, #20]
 800c9d6:	b25b      	sxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	da15      	bge.n	800ca08 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	7858      	ldrb	r0, [r3, #1]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1a      	ldr	r2, [r3, #32]
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f7fd ffc2 	bl	800a974 <disk_write>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <f_sync+0x54>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e04f      	b.n	800ca9a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	7d1b      	ldrb	r3, [r3, #20]
 800c9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca08:	f7fd f9fa 	bl	8009e00 <get_fattime>
 800ca0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7fe fa9a 	bl	800af50 <move_window>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d138      	bne.n	800ca98 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	330b      	adds	r3, #11
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	330b      	adds	r3, #11
 800ca36:	f042 0220 	orr.w	r2, r2, #32
 800ca3a:	b2d2      	uxtb	r2, r2
 800ca3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	461a      	mov	r2, r3
 800ca48:	68f9      	ldr	r1, [r7, #12]
 800ca4a:	f7fe ffa4 	bl	800b996 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f103 021c 	add.w	r2, r3, #28
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	f7fe f81e 	bl	800aa9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3316      	adds	r3, #22
 800ca64:	6939      	ldr	r1, [r7, #16]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe f818 	bl	800aa9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3312      	adds	r3, #18
 800ca70:	2100      	movs	r1, #0
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd fff7 	bl	800aa66 <st_word>
					fs->wflag = 1;
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fa93 	bl	800afac <sync_fs>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff ff7b 	bl	800c9a6 <f_sync>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d118      	bne.n	800caec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f107 0208 	add.w	r2, r7, #8
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff fbfa 	bl	800c2bc <validate>
 800cac8:	4603      	mov	r3, r0
 800caca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10c      	bne.n	800caec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe f996 	bl	800ae08 <dec_lock>
 800cadc:	4603      	mov	r3, r0
 800cade:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b088      	sub	sp, #32
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cb0a:	e01c      	b.n	800cb46 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cb0c:	f107 0310 	add.w	r3, r7, #16
 800cb10:	f107 0114 	add.w	r1, r7, #20
 800cb14:	2201      	movs	r2, #1
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff fe06 	bl	800c728 <f_read>
		if (rc != 1) break;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d117      	bne.n	800cb52 <f_gets+0x5c>
		c = s[0];
 800cb22:	7d3b      	ldrb	r3, [r7, #20]
 800cb24:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	2b0d      	cmp	r3, #13
 800cb2a:	d00b      	beq.n	800cb44 <f_gets+0x4e>
		*p++ = c;
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	61ba      	str	r2, [r7, #24]
 800cb32:	7dfa      	ldrb	r2, [r7, #23]
 800cb34:	701a      	strb	r2, [r3, #0]
		n++;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	2b0a      	cmp	r3, #10
 800cb40:	d009      	beq.n	800cb56 <f_gets+0x60>
 800cb42:	e000      	b.n	800cb46 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cb44:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	69fa      	ldr	r2, [r7, #28]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	dbdd      	blt.n	800cb0c <f_gets+0x16>
 800cb50:	e002      	b.n	800cb58 <f_gets+0x62>
		if (rc != 1) break;
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800cb56:	bf00      	nop
	}
	*p = 0;
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <f_gets+0x72>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	e000      	b.n	800cb6a <f_gets+0x74>
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3720      	adds	r7, #32
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb8a:	4b1f      	ldr	r3, [pc, #124]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb8c:	7a5b      	ldrb	r3, [r3, #9]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d131      	bne.n	800cbf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb94:	4b1c      	ldr	r3, [pc, #112]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb96:	7a5b      	ldrb	r3, [r3, #9]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb9e:	2100      	movs	r1, #0
 800cba0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cba2:	4b19      	ldr	r3, [pc, #100]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cba4:	7a5b      	ldrb	r3, [r3, #9]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4a17      	ldr	r2, [pc, #92]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbb2:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbb4:	7a5b      	ldrb	r3, [r3, #9]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b13      	ldr	r3, [pc, #76]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	79fa      	ldrb	r2, [r7, #7]
 800cbc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbc2:	4b11      	ldr	r3, [pc, #68]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbc4:	7a5b      	ldrb	r3, [r3, #9]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	b2d1      	uxtb	r1, r2
 800cbcc:	4a0e      	ldr	r2, [pc, #56]	@ (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbce:	7251      	strb	r1, [r2, #9]
 800cbd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	3330      	adds	r3, #48	@ 0x30
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	223a      	movs	r2, #58	@ 0x3a
 800cbe2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	222f      	movs	r2, #47	@ 0x2f
 800cbea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	3303      	adds	r3, #3
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	240005fc 	.word	0x240005fc

0800cc0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc16:	2200      	movs	r2, #0
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ffaa 	bl	800cb74 <FATFS_LinkDriverEx>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <atof>:
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	f000 bdb2 	b.w	800d794 <strtod>

0800cc30 <sulp>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	4604      	mov	r4, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	4616      	mov	r6, r2
 800cc38:	ec45 4b10 	vmov	d0, r4, r5
 800cc3c:	f001 ffce 	bl	800ebdc <__ulp>
 800cc40:	b17e      	cbz	r6, 800cc62 <sulp+0x32>
 800cc42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dd09      	ble.n	800cc62 <sulp+0x32>
 800cc4e:	051b      	lsls	r3, r3, #20
 800cc50:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cc54:	2000      	movs	r0, #0
 800cc56:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cc5a:	ec41 0b17 	vmov	d7, r0, r1
 800cc5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
 800cc64:	0000      	movs	r0, r0
	...

0800cc68 <_strtod_l>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ed2d 8b0a 	vpush	{d8-d12}
 800cc70:	b097      	sub	sp, #92	@ 0x5c
 800cc72:	4688      	mov	r8, r1
 800cc74:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc76:	2200      	movs	r2, #0
 800cc78:	9212      	str	r2, [sp, #72]	@ 0x48
 800cc7a:	9005      	str	r0, [sp, #20]
 800cc7c:	f04f 0a00 	mov.w	sl, #0
 800cc80:	f04f 0b00 	mov.w	fp, #0
 800cc84:	460a      	mov	r2, r1
 800cc86:	9211      	str	r2, [sp, #68]	@ 0x44
 800cc88:	7811      	ldrb	r1, [r2, #0]
 800cc8a:	292b      	cmp	r1, #43	@ 0x2b
 800cc8c:	d04c      	beq.n	800cd28 <_strtod_l+0xc0>
 800cc8e:	d839      	bhi.n	800cd04 <_strtod_l+0x9c>
 800cc90:	290d      	cmp	r1, #13
 800cc92:	d833      	bhi.n	800ccfc <_strtod_l+0x94>
 800cc94:	2908      	cmp	r1, #8
 800cc96:	d833      	bhi.n	800cd00 <_strtod_l+0x98>
 800cc98:	2900      	cmp	r1, #0
 800cc9a:	d03c      	beq.n	800cd16 <_strtod_l+0xae>
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	9208      	str	r2, [sp, #32]
 800cca0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800cca2:	782a      	ldrb	r2, [r5, #0]
 800cca4:	2a30      	cmp	r2, #48	@ 0x30
 800cca6:	f040 80b5 	bne.w	800ce14 <_strtod_l+0x1ac>
 800ccaa:	786a      	ldrb	r2, [r5, #1]
 800ccac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccb0:	2a58      	cmp	r2, #88	@ 0x58
 800ccb2:	d170      	bne.n	800cd96 <_strtod_l+0x12e>
 800ccb4:	9302      	str	r3, [sp, #8]
 800ccb6:	9b08      	ldr	r3, [sp, #32]
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	ab12      	add	r3, sp, #72	@ 0x48
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	4a8b      	ldr	r2, [pc, #556]	@ (800ceec <_strtod_l+0x284>)
 800ccc0:	9805      	ldr	r0, [sp, #20]
 800ccc2:	ab13      	add	r3, sp, #76	@ 0x4c
 800ccc4:	a911      	add	r1, sp, #68	@ 0x44
 800ccc6:	f001 f87b 	bl	800ddc0 <__gethex>
 800ccca:	f010 060f 	ands.w	r6, r0, #15
 800ccce:	4604      	mov	r4, r0
 800ccd0:	d005      	beq.n	800ccde <_strtod_l+0x76>
 800ccd2:	2e06      	cmp	r6, #6
 800ccd4:	d12a      	bne.n	800cd2c <_strtod_l+0xc4>
 800ccd6:	3501      	adds	r5, #1
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9511      	str	r5, [sp, #68]	@ 0x44
 800ccdc:	9308      	str	r3, [sp, #32]
 800ccde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f040 852f 	bne.w	800d744 <_strtod_l+0xadc>
 800cce6:	9b08      	ldr	r3, [sp, #32]
 800cce8:	ec4b ab10 	vmov	d0, sl, fp
 800ccec:	b1cb      	cbz	r3, 800cd22 <_strtod_l+0xba>
 800ccee:	eeb1 0b40 	vneg.f64	d0, d0
 800ccf2:	b017      	add	sp, #92	@ 0x5c
 800ccf4:	ecbd 8b0a 	vpop	{d8-d12}
 800ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfc:	2920      	cmp	r1, #32
 800ccfe:	d1cd      	bne.n	800cc9c <_strtod_l+0x34>
 800cd00:	3201      	adds	r2, #1
 800cd02:	e7c0      	b.n	800cc86 <_strtod_l+0x1e>
 800cd04:	292d      	cmp	r1, #45	@ 0x2d
 800cd06:	d1c9      	bne.n	800cc9c <_strtod_l+0x34>
 800cd08:	2101      	movs	r1, #1
 800cd0a:	9108      	str	r1, [sp, #32]
 800cd0c:	1c51      	adds	r1, r2, #1
 800cd0e:	9111      	str	r1, [sp, #68]	@ 0x44
 800cd10:	7852      	ldrb	r2, [r2, #1]
 800cd12:	2a00      	cmp	r2, #0
 800cd14:	d1c4      	bne.n	800cca0 <_strtod_l+0x38>
 800cd16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd18:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f040 850f 	bne.w	800d740 <_strtod_l+0xad8>
 800cd22:	ec4b ab10 	vmov	d0, sl, fp
 800cd26:	e7e4      	b.n	800ccf2 <_strtod_l+0x8a>
 800cd28:	2100      	movs	r1, #0
 800cd2a:	e7ee      	b.n	800cd0a <_strtod_l+0xa2>
 800cd2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd2e:	b13a      	cbz	r2, 800cd40 <_strtod_l+0xd8>
 800cd30:	2135      	movs	r1, #53	@ 0x35
 800cd32:	a814      	add	r0, sp, #80	@ 0x50
 800cd34:	f002 f849 	bl	800edca <__copybits>
 800cd38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cd3a:	9805      	ldr	r0, [sp, #20]
 800cd3c:	f001 fc1a 	bl	800e574 <_Bfree>
 800cd40:	1e73      	subs	r3, r6, #1
 800cd42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d806      	bhi.n	800cd56 <_strtod_l+0xee>
 800cd48:	e8df f003 	tbb	[pc, r3]
 800cd4c:	201d0314 	.word	0x201d0314
 800cd50:	14          	.byte	0x14
 800cd51:	00          	.byte	0x00
 800cd52:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800cd56:	05e3      	lsls	r3, r4, #23
 800cd58:	bf48      	it	mi
 800cd5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd62:	0d1b      	lsrs	r3, r3, #20
 800cd64:	051b      	lsls	r3, r3, #20
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1b9      	bne.n	800ccde <_strtod_l+0x76>
 800cd6a:	f000 ff13 	bl	800db94 <__errno>
 800cd6e:	2322      	movs	r3, #34	@ 0x22
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	e7b4      	b.n	800ccde <_strtod_l+0x76>
 800cd74:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800cd78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd84:	e7e7      	b.n	800cd56 <_strtod_l+0xee>
 800cd86:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800cef4 <_strtod_l+0x28c>
 800cd8a:	e7e4      	b.n	800cd56 <_strtod_l+0xee>
 800cd8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd90:	f04f 3aff 	mov.w	sl, #4294967295
 800cd94:	e7df      	b.n	800cd56 <_strtod_l+0xee>
 800cd96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800cd9c:	785b      	ldrb	r3, [r3, #1]
 800cd9e:	2b30      	cmp	r3, #48	@ 0x30
 800cda0:	d0f9      	beq.n	800cd96 <_strtod_l+0x12e>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d09b      	beq.n	800ccde <_strtod_l+0x76>
 800cda6:	2301      	movs	r3, #1
 800cda8:	2600      	movs	r6, #0
 800cdaa:	9307      	str	r3, [sp, #28]
 800cdac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdae:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdb0:	46b1      	mov	r9, r6
 800cdb2:	4635      	mov	r5, r6
 800cdb4:	220a      	movs	r2, #10
 800cdb6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800cdb8:	7804      	ldrb	r4, [r0, #0]
 800cdba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800cdbe:	b2d9      	uxtb	r1, r3
 800cdc0:	2909      	cmp	r1, #9
 800cdc2:	d929      	bls.n	800ce18 <_strtod_l+0x1b0>
 800cdc4:	494a      	ldr	r1, [pc, #296]	@ (800cef0 <_strtod_l+0x288>)
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f000 fe1d 	bl	800da06 <strncmp>
 800cdcc:	b378      	cbz	r0, 800ce2e <_strtod_l+0x1c6>
 800cdce:	2000      	movs	r0, #0
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	9006      	str	r0, [sp, #24]
 800cdd8:	2a65      	cmp	r2, #101	@ 0x65
 800cdda:	d001      	beq.n	800cde0 <_strtod_l+0x178>
 800cddc:	2a45      	cmp	r2, #69	@ 0x45
 800cdde:	d117      	bne.n	800ce10 <_strtod_l+0x1a8>
 800cde0:	b91b      	cbnz	r3, 800cdea <_strtod_l+0x182>
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	4303      	orrs	r3, r0
 800cde6:	d096      	beq.n	800cd16 <_strtod_l+0xae>
 800cde8:	2300      	movs	r3, #0
 800cdea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800cdee:	f108 0201 	add.w	r2, r8, #1
 800cdf2:	9211      	str	r2, [sp, #68]	@ 0x44
 800cdf4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cdf8:	2a2b      	cmp	r2, #43	@ 0x2b
 800cdfa:	d06b      	beq.n	800ced4 <_strtod_l+0x26c>
 800cdfc:	2a2d      	cmp	r2, #45	@ 0x2d
 800cdfe:	d071      	beq.n	800cee4 <_strtod_l+0x27c>
 800ce00:	f04f 0e00 	mov.w	lr, #0
 800ce04:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800ce08:	2c09      	cmp	r4, #9
 800ce0a:	d979      	bls.n	800cf00 <_strtod_l+0x298>
 800ce0c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ce10:	2400      	movs	r4, #0
 800ce12:	e094      	b.n	800cf3e <_strtod_l+0x2d6>
 800ce14:	2300      	movs	r3, #0
 800ce16:	e7c7      	b.n	800cda8 <_strtod_l+0x140>
 800ce18:	2d08      	cmp	r5, #8
 800ce1a:	f100 0001 	add.w	r0, r0, #1
 800ce1e:	bfd4      	ite	le
 800ce20:	fb02 3909 	mlale	r9, r2, r9, r3
 800ce24:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ce28:	3501      	adds	r5, #1
 800ce2a:	9011      	str	r0, [sp, #68]	@ 0x44
 800ce2c:	e7c3      	b.n	800cdb6 <_strtod_l+0x14e>
 800ce2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	9211      	str	r2, [sp, #68]	@ 0x44
 800ce34:	785a      	ldrb	r2, [r3, #1]
 800ce36:	b375      	cbz	r5, 800ce96 <_strtod_l+0x22e>
 800ce38:	4607      	mov	r7, r0
 800ce3a:	462b      	mov	r3, r5
 800ce3c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ce40:	2909      	cmp	r1, #9
 800ce42:	d913      	bls.n	800ce6c <_strtod_l+0x204>
 800ce44:	2101      	movs	r1, #1
 800ce46:	9106      	str	r1, [sp, #24]
 800ce48:	e7c6      	b.n	800cdd8 <_strtod_l+0x170>
 800ce4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	9211      	str	r2, [sp, #68]	@ 0x44
 800ce50:	785a      	ldrb	r2, [r3, #1]
 800ce52:	3001      	adds	r0, #1
 800ce54:	2a30      	cmp	r2, #48	@ 0x30
 800ce56:	d0f8      	beq.n	800ce4a <_strtod_l+0x1e2>
 800ce58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	f200 8476 	bhi.w	800d74e <_strtod_l+0xae6>
 800ce62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce66:	4607      	mov	r7, r0
 800ce68:	2000      	movs	r0, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	3a30      	subs	r2, #48	@ 0x30
 800ce6e:	f100 0101 	add.w	r1, r0, #1
 800ce72:	d023      	beq.n	800cebc <_strtod_l+0x254>
 800ce74:	440f      	add	r7, r1
 800ce76:	eb00 0c03 	add.w	ip, r0, r3
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	240a      	movs	r4, #10
 800ce7e:	4561      	cmp	r1, ip
 800ce80:	d10b      	bne.n	800ce9a <_strtod_l+0x232>
 800ce82:	1c5c      	adds	r4, r3, #1
 800ce84:	4403      	add	r3, r0
 800ce86:	2b08      	cmp	r3, #8
 800ce88:	4404      	add	r4, r0
 800ce8a:	dc11      	bgt.n	800ceb0 <_strtod_l+0x248>
 800ce8c:	230a      	movs	r3, #10
 800ce8e:	fb03 2909 	mla	r9, r3, r9, r2
 800ce92:	2100      	movs	r1, #0
 800ce94:	e013      	b.n	800cebe <_strtod_l+0x256>
 800ce96:	4628      	mov	r0, r5
 800ce98:	e7dc      	b.n	800ce54 <_strtod_l+0x1ec>
 800ce9a:	2908      	cmp	r1, #8
 800ce9c:	f101 0101 	add.w	r1, r1, #1
 800cea0:	dc02      	bgt.n	800cea8 <_strtod_l+0x240>
 800cea2:	fb04 f909 	mul.w	r9, r4, r9
 800cea6:	e7ea      	b.n	800ce7e <_strtod_l+0x216>
 800cea8:	2910      	cmp	r1, #16
 800ceaa:	bfd8      	it	le
 800ceac:	4366      	mulle	r6, r4
 800ceae:	e7e6      	b.n	800ce7e <_strtod_l+0x216>
 800ceb0:	2b0f      	cmp	r3, #15
 800ceb2:	dcee      	bgt.n	800ce92 <_strtod_l+0x22a>
 800ceb4:	230a      	movs	r3, #10
 800ceb6:	fb03 2606 	mla	r6, r3, r6, r2
 800ceba:	e7ea      	b.n	800ce92 <_strtod_l+0x22a>
 800cebc:	461c      	mov	r4, r3
 800cebe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	9211      	str	r2, [sp, #68]	@ 0x44
 800cec4:	785a      	ldrb	r2, [r3, #1]
 800cec6:	4608      	mov	r0, r1
 800cec8:	4623      	mov	r3, r4
 800ceca:	e7b7      	b.n	800ce3c <_strtod_l+0x1d4>
 800cecc:	2301      	movs	r3, #1
 800cece:	2700      	movs	r7, #0
 800ced0:	9306      	str	r3, [sp, #24]
 800ced2:	e786      	b.n	800cde2 <_strtod_l+0x17a>
 800ced4:	f04f 0e00 	mov.w	lr, #0
 800ced8:	f108 0202 	add.w	r2, r8, #2
 800cedc:	9211      	str	r2, [sp, #68]	@ 0x44
 800cede:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cee2:	e78f      	b.n	800ce04 <_strtod_l+0x19c>
 800cee4:	f04f 0e01 	mov.w	lr, #1
 800cee8:	e7f6      	b.n	800ced8 <_strtod_l+0x270>
 800ceea:	bf00      	nop
 800ceec:	08010a5c 	.word	0x08010a5c
 800cef0:	08010a38 	.word	0x08010a38
 800cef4:	7ff00000 	.word	0x7ff00000
 800cef8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cefa:	1c54      	adds	r4, r2, #1
 800cefc:	9411      	str	r4, [sp, #68]	@ 0x44
 800cefe:	7852      	ldrb	r2, [r2, #1]
 800cf00:	2a30      	cmp	r2, #48	@ 0x30
 800cf02:	d0f9      	beq.n	800cef8 <_strtod_l+0x290>
 800cf04:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800cf08:	2c08      	cmp	r4, #8
 800cf0a:	d881      	bhi.n	800ce10 <_strtod_l+0x1a8>
 800cf0c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800cf10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf12:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cf16:	1c51      	adds	r1, r2, #1
 800cf18:	9111      	str	r1, [sp, #68]	@ 0x44
 800cf1a:	7852      	ldrb	r2, [r2, #1]
 800cf1c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800cf20:	2c09      	cmp	r4, #9
 800cf22:	d938      	bls.n	800cf96 <_strtod_l+0x32e>
 800cf24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cf26:	1b0c      	subs	r4, r1, r4
 800cf28:	2c08      	cmp	r4, #8
 800cf2a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800cf2e:	dc02      	bgt.n	800cf36 <_strtod_l+0x2ce>
 800cf30:	4564      	cmp	r4, ip
 800cf32:	bfa8      	it	ge
 800cf34:	4664      	movge	r4, ip
 800cf36:	f1be 0f00 	cmp.w	lr, #0
 800cf3a:	d000      	beq.n	800cf3e <_strtod_l+0x2d6>
 800cf3c:	4264      	negs	r4, r4
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d14e      	bne.n	800cfe0 <_strtod_l+0x378>
 800cf42:	9b07      	ldr	r3, [sp, #28]
 800cf44:	4318      	orrs	r0, r3
 800cf46:	f47f aeca 	bne.w	800ccde <_strtod_l+0x76>
 800cf4a:	9b06      	ldr	r3, [sp, #24]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f47f aee2 	bne.w	800cd16 <_strtod_l+0xae>
 800cf52:	2a69      	cmp	r2, #105	@ 0x69
 800cf54:	d027      	beq.n	800cfa6 <_strtod_l+0x33e>
 800cf56:	dc24      	bgt.n	800cfa2 <_strtod_l+0x33a>
 800cf58:	2a49      	cmp	r2, #73	@ 0x49
 800cf5a:	d024      	beq.n	800cfa6 <_strtod_l+0x33e>
 800cf5c:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf5e:	f47f aeda 	bne.w	800cd16 <_strtod_l+0xae>
 800cf62:	4997      	ldr	r1, [pc, #604]	@ (800d1c0 <_strtod_l+0x558>)
 800cf64:	a811      	add	r0, sp, #68	@ 0x44
 800cf66:	f001 f94d 	bl	800e204 <__match>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f43f aed3 	beq.w	800cd16 <_strtod_l+0xae>
 800cf70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b28      	cmp	r3, #40	@ 0x28
 800cf76:	d12d      	bne.n	800cfd4 <_strtod_l+0x36c>
 800cf78:	4992      	ldr	r1, [pc, #584]	@ (800d1c4 <_strtod_l+0x55c>)
 800cf7a:	aa14      	add	r2, sp, #80	@ 0x50
 800cf7c:	a811      	add	r0, sp, #68	@ 0x44
 800cf7e:	f001 f955 	bl	800e22c <__hexnan>
 800cf82:	2805      	cmp	r0, #5
 800cf84:	d126      	bne.n	800cfd4 <_strtod_l+0x36c>
 800cf86:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf88:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800cf8c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cf90:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cf94:	e6a3      	b.n	800ccde <_strtod_l+0x76>
 800cf96:	240a      	movs	r4, #10
 800cf98:	fb04 2c0c 	mla	ip, r4, ip, r2
 800cf9c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800cfa0:	e7b8      	b.n	800cf14 <_strtod_l+0x2ac>
 800cfa2:	2a6e      	cmp	r2, #110	@ 0x6e
 800cfa4:	e7db      	b.n	800cf5e <_strtod_l+0x2f6>
 800cfa6:	4988      	ldr	r1, [pc, #544]	@ (800d1c8 <_strtod_l+0x560>)
 800cfa8:	a811      	add	r0, sp, #68	@ 0x44
 800cfaa:	f001 f92b 	bl	800e204 <__match>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	f43f aeb1 	beq.w	800cd16 <_strtod_l+0xae>
 800cfb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfb6:	4985      	ldr	r1, [pc, #532]	@ (800d1cc <_strtod_l+0x564>)
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	a811      	add	r0, sp, #68	@ 0x44
 800cfbc:	9311      	str	r3, [sp, #68]	@ 0x44
 800cfbe:	f001 f921 	bl	800e204 <__match>
 800cfc2:	b910      	cbnz	r0, 800cfca <_strtod_l+0x362>
 800cfc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800cfca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d1e0 <_strtod_l+0x578>
 800cfce:	f04f 0a00 	mov.w	sl, #0
 800cfd2:	e684      	b.n	800ccde <_strtod_l+0x76>
 800cfd4:	487e      	ldr	r0, [pc, #504]	@ (800d1d0 <_strtod_l+0x568>)
 800cfd6:	f000 fe1b 	bl	800dc10 <nan>
 800cfda:	ec5b ab10 	vmov	sl, fp, d0
 800cfde:	e67e      	b.n	800ccde <_strtod_l+0x76>
 800cfe0:	ee07 9a90 	vmov	s15, r9
 800cfe4:	1be2      	subs	r2, r4, r7
 800cfe6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cfea:	2d00      	cmp	r5, #0
 800cfec:	bf08      	it	eq
 800cfee:	461d      	moveq	r5, r3
 800cff0:	2b10      	cmp	r3, #16
 800cff2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cff4:	461a      	mov	r2, r3
 800cff6:	bfa8      	it	ge
 800cff8:	2210      	movge	r2, #16
 800cffa:	2b09      	cmp	r3, #9
 800cffc:	ec5b ab17 	vmov	sl, fp, d7
 800d000:	dc15      	bgt.n	800d02e <_strtod_l+0x3c6>
 800d002:	1be1      	subs	r1, r4, r7
 800d004:	2900      	cmp	r1, #0
 800d006:	f43f ae6a 	beq.w	800ccde <_strtod_l+0x76>
 800d00a:	eba4 0107 	sub.w	r1, r4, r7
 800d00e:	dd72      	ble.n	800d0f6 <_strtod_l+0x48e>
 800d010:	2916      	cmp	r1, #22
 800d012:	dc59      	bgt.n	800d0c8 <_strtod_l+0x460>
 800d014:	4b6f      	ldr	r3, [pc, #444]	@ (800d1d4 <_strtod_l+0x56c>)
 800d016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01c:	ed93 7b00 	vldr	d7, [r3]
 800d020:	ec4b ab16 	vmov	d6, sl, fp
 800d024:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d028:	ec5b ab17 	vmov	sl, fp, d7
 800d02c:	e657      	b.n	800ccde <_strtod_l+0x76>
 800d02e:	4969      	ldr	r1, [pc, #420]	@ (800d1d4 <_strtod_l+0x56c>)
 800d030:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d034:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d038:	ee06 6a90 	vmov	s13, r6
 800d03c:	2b0f      	cmp	r3, #15
 800d03e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d042:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d046:	ec5b ab16 	vmov	sl, fp, d6
 800d04a:	ddda      	ble.n	800d002 <_strtod_l+0x39a>
 800d04c:	1a9a      	subs	r2, r3, r2
 800d04e:	1be1      	subs	r1, r4, r7
 800d050:	440a      	add	r2, r1
 800d052:	2a00      	cmp	r2, #0
 800d054:	f340 8094 	ble.w	800d180 <_strtod_l+0x518>
 800d058:	f012 000f 	ands.w	r0, r2, #15
 800d05c:	d00a      	beq.n	800d074 <_strtod_l+0x40c>
 800d05e:	495d      	ldr	r1, [pc, #372]	@ (800d1d4 <_strtod_l+0x56c>)
 800d060:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d064:	ed91 7b00 	vldr	d7, [r1]
 800d068:	ec4b ab16 	vmov	d6, sl, fp
 800d06c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d070:	ec5b ab17 	vmov	sl, fp, d7
 800d074:	f032 020f 	bics.w	r2, r2, #15
 800d078:	d073      	beq.n	800d162 <_strtod_l+0x4fa>
 800d07a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d07e:	dd47      	ble.n	800d110 <_strtod_l+0x4a8>
 800d080:	2400      	movs	r4, #0
 800d082:	4625      	mov	r5, r4
 800d084:	9407      	str	r4, [sp, #28]
 800d086:	4626      	mov	r6, r4
 800d088:	9a05      	ldr	r2, [sp, #20]
 800d08a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d1e0 <_strtod_l+0x578>
 800d08e:	2322      	movs	r3, #34	@ 0x22
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	f04f 0a00 	mov.w	sl, #0
 800d096:	9b07      	ldr	r3, [sp, #28]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f43f ae20 	beq.w	800ccde <_strtod_l+0x76>
 800d09e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d0a0:	9805      	ldr	r0, [sp, #20]
 800d0a2:	f001 fa67 	bl	800e574 <_Bfree>
 800d0a6:	9805      	ldr	r0, [sp, #20]
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	f001 fa63 	bl	800e574 <_Bfree>
 800d0ae:	9805      	ldr	r0, [sp, #20]
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	f001 fa5f 	bl	800e574 <_Bfree>
 800d0b6:	9907      	ldr	r1, [sp, #28]
 800d0b8:	9805      	ldr	r0, [sp, #20]
 800d0ba:	f001 fa5b 	bl	800e574 <_Bfree>
 800d0be:	9805      	ldr	r0, [sp, #20]
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	f001 fa57 	bl	800e574 <_Bfree>
 800d0c6:	e60a      	b.n	800ccde <_strtod_l+0x76>
 800d0c8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d0cc:	1be0      	subs	r0, r4, r7
 800d0ce:	4281      	cmp	r1, r0
 800d0d0:	dbbc      	blt.n	800d04c <_strtod_l+0x3e4>
 800d0d2:	4a40      	ldr	r2, [pc, #256]	@ (800d1d4 <_strtod_l+0x56c>)
 800d0d4:	f1c3 030f 	rsb	r3, r3, #15
 800d0d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d0dc:	ed91 7b00 	vldr	d7, [r1]
 800d0e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0e2:	ec4b ab16 	vmov	d6, sl, fp
 800d0e6:	1acb      	subs	r3, r1, r3
 800d0e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d0ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0f0:	ed92 6b00 	vldr	d6, [r2]
 800d0f4:	e796      	b.n	800d024 <_strtod_l+0x3bc>
 800d0f6:	3116      	adds	r1, #22
 800d0f8:	dba8      	blt.n	800d04c <_strtod_l+0x3e4>
 800d0fa:	4b36      	ldr	r3, [pc, #216]	@ (800d1d4 <_strtod_l+0x56c>)
 800d0fc:	1b3c      	subs	r4, r7, r4
 800d0fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d102:	ed94 7b00 	vldr	d7, [r4]
 800d106:	ec4b ab16 	vmov	d6, sl, fp
 800d10a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d10e:	e78b      	b.n	800d028 <_strtod_l+0x3c0>
 800d110:	2000      	movs	r0, #0
 800d112:	ec4b ab17 	vmov	d7, sl, fp
 800d116:	4e30      	ldr	r6, [pc, #192]	@ (800d1d8 <_strtod_l+0x570>)
 800d118:	1112      	asrs	r2, r2, #4
 800d11a:	4601      	mov	r1, r0
 800d11c:	2a01      	cmp	r2, #1
 800d11e:	dc23      	bgt.n	800d168 <_strtod_l+0x500>
 800d120:	b108      	cbz	r0, 800d126 <_strtod_l+0x4be>
 800d122:	ec5b ab17 	vmov	sl, fp, d7
 800d126:	4a2c      	ldr	r2, [pc, #176]	@ (800d1d8 <_strtod_l+0x570>)
 800d128:	482c      	ldr	r0, [pc, #176]	@ (800d1dc <_strtod_l+0x574>)
 800d12a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d12e:	ed92 7b00 	vldr	d7, [r2]
 800d132:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d136:	ec4b ab16 	vmov	d6, sl, fp
 800d13a:	4a29      	ldr	r2, [pc, #164]	@ (800d1e0 <_strtod_l+0x578>)
 800d13c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d140:	ee17 1a90 	vmov	r1, s15
 800d144:	400a      	ands	r2, r1
 800d146:	4282      	cmp	r2, r0
 800d148:	ec5b ab17 	vmov	sl, fp, d7
 800d14c:	d898      	bhi.n	800d080 <_strtod_l+0x418>
 800d14e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d152:	4282      	cmp	r2, r0
 800d154:	bf86      	itte	hi
 800d156:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d1e4 <_strtod_l+0x57c>
 800d15a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d15e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d162:	2200      	movs	r2, #0
 800d164:	9206      	str	r2, [sp, #24]
 800d166:	e076      	b.n	800d256 <_strtod_l+0x5ee>
 800d168:	f012 0f01 	tst.w	r2, #1
 800d16c:	d004      	beq.n	800d178 <_strtod_l+0x510>
 800d16e:	ed96 6b00 	vldr	d6, [r6]
 800d172:	2001      	movs	r0, #1
 800d174:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d178:	3101      	adds	r1, #1
 800d17a:	1052      	asrs	r2, r2, #1
 800d17c:	3608      	adds	r6, #8
 800d17e:	e7cd      	b.n	800d11c <_strtod_l+0x4b4>
 800d180:	d0ef      	beq.n	800d162 <_strtod_l+0x4fa>
 800d182:	4252      	negs	r2, r2
 800d184:	f012 000f 	ands.w	r0, r2, #15
 800d188:	d00a      	beq.n	800d1a0 <_strtod_l+0x538>
 800d18a:	4912      	ldr	r1, [pc, #72]	@ (800d1d4 <_strtod_l+0x56c>)
 800d18c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d190:	ed91 7b00 	vldr	d7, [r1]
 800d194:	ec4b ab16 	vmov	d6, sl, fp
 800d198:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d19c:	ec5b ab17 	vmov	sl, fp, d7
 800d1a0:	1112      	asrs	r2, r2, #4
 800d1a2:	d0de      	beq.n	800d162 <_strtod_l+0x4fa>
 800d1a4:	2a1f      	cmp	r2, #31
 800d1a6:	dd1f      	ble.n	800d1e8 <_strtod_l+0x580>
 800d1a8:	2400      	movs	r4, #0
 800d1aa:	4625      	mov	r5, r4
 800d1ac:	9407      	str	r4, [sp, #28]
 800d1ae:	4626      	mov	r6, r4
 800d1b0:	9a05      	ldr	r2, [sp, #20]
 800d1b2:	2322      	movs	r3, #34	@ 0x22
 800d1b4:	f04f 0a00 	mov.w	sl, #0
 800d1b8:	f04f 0b00 	mov.w	fp, #0
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	e76a      	b.n	800d096 <_strtod_l+0x42e>
 800d1c0:	08010a43 	.word	0x08010a43
 800d1c4:	08010a48 	.word	0x08010a48
 800d1c8:	08010a3a 	.word	0x08010a3a
 800d1cc:	08010a3d 	.word	0x08010a3d
 800d1d0:	08010b4c 	.word	0x08010b4c
 800d1d4:	08010c50 	.word	0x08010c50
 800d1d8:	08010c28 	.word	0x08010c28
 800d1dc:	7ca00000 	.word	0x7ca00000
 800d1e0:	7ff00000 	.word	0x7ff00000
 800d1e4:	7fefffff 	.word	0x7fefffff
 800d1e8:	f012 0110 	ands.w	r1, r2, #16
 800d1ec:	bf18      	it	ne
 800d1ee:	216a      	movne	r1, #106	@ 0x6a
 800d1f0:	9106      	str	r1, [sp, #24]
 800d1f2:	ec4b ab17 	vmov	d7, sl, fp
 800d1f6:	49b0      	ldr	r1, [pc, #704]	@ (800d4b8 <_strtod_l+0x850>)
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	07d6      	lsls	r6, r2, #31
 800d1fc:	d504      	bpl.n	800d208 <_strtod_l+0x5a0>
 800d1fe:	ed91 6b00 	vldr	d6, [r1]
 800d202:	2001      	movs	r0, #1
 800d204:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d208:	1052      	asrs	r2, r2, #1
 800d20a:	f101 0108 	add.w	r1, r1, #8
 800d20e:	d1f4      	bne.n	800d1fa <_strtod_l+0x592>
 800d210:	b108      	cbz	r0, 800d216 <_strtod_l+0x5ae>
 800d212:	ec5b ab17 	vmov	sl, fp, d7
 800d216:	9a06      	ldr	r2, [sp, #24]
 800d218:	b1b2      	cbz	r2, 800d248 <_strtod_l+0x5e0>
 800d21a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d21e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d222:	2a00      	cmp	r2, #0
 800d224:	4658      	mov	r0, fp
 800d226:	dd0f      	ble.n	800d248 <_strtod_l+0x5e0>
 800d228:	2a1f      	cmp	r2, #31
 800d22a:	dd55      	ble.n	800d2d8 <_strtod_l+0x670>
 800d22c:	2a34      	cmp	r2, #52	@ 0x34
 800d22e:	bfde      	ittt	le
 800d230:	f04f 32ff 	movle.w	r2, #4294967295
 800d234:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d238:	408a      	lslle	r2, r1
 800d23a:	f04f 0a00 	mov.w	sl, #0
 800d23e:	bfcc      	ite	gt
 800d240:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d244:	ea02 0b00 	andle.w	fp, r2, r0
 800d248:	ec4b ab17 	vmov	d7, sl, fp
 800d24c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	d0a8      	beq.n	800d1a8 <_strtod_l+0x540>
 800d256:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d258:	9805      	ldr	r0, [sp, #20]
 800d25a:	f8cd 9000 	str.w	r9, [sp]
 800d25e:	462a      	mov	r2, r5
 800d260:	f001 f9f0 	bl	800e644 <__s2b>
 800d264:	9007      	str	r0, [sp, #28]
 800d266:	2800      	cmp	r0, #0
 800d268:	f43f af0a 	beq.w	800d080 <_strtod_l+0x418>
 800d26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d26e:	1b3f      	subs	r7, r7, r4
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfb4      	ite	lt
 800d274:	463b      	movlt	r3, r7
 800d276:	2300      	movge	r3, #0
 800d278:	930a      	str	r3, [sp, #40]	@ 0x28
 800d27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d4a8 <_strtod_l+0x840>
 800d280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d284:	2400      	movs	r4, #0
 800d286:	930d      	str	r3, [sp, #52]	@ 0x34
 800d288:	4625      	mov	r5, r4
 800d28a:	9b07      	ldr	r3, [sp, #28]
 800d28c:	9805      	ldr	r0, [sp, #20]
 800d28e:	6859      	ldr	r1, [r3, #4]
 800d290:	f001 f930 	bl	800e4f4 <_Balloc>
 800d294:	4606      	mov	r6, r0
 800d296:	2800      	cmp	r0, #0
 800d298:	f43f aef6 	beq.w	800d088 <_strtod_l+0x420>
 800d29c:	9b07      	ldr	r3, [sp, #28]
 800d29e:	691a      	ldr	r2, [r3, #16]
 800d2a0:	ec4b ab19 	vmov	d9, sl, fp
 800d2a4:	3202      	adds	r2, #2
 800d2a6:	f103 010c 	add.w	r1, r3, #12
 800d2aa:	0092      	lsls	r2, r2, #2
 800d2ac:	300c      	adds	r0, #12
 800d2ae:	f000 fc9e 	bl	800dbee <memcpy>
 800d2b2:	eeb0 0b49 	vmov.f64	d0, d9
 800d2b6:	9805      	ldr	r0, [sp, #20]
 800d2b8:	aa14      	add	r2, sp, #80	@ 0x50
 800d2ba:	a913      	add	r1, sp, #76	@ 0x4c
 800d2bc:	f001 fcfe 	bl	800ecbc <__d2b>
 800d2c0:	9012      	str	r0, [sp, #72]	@ 0x48
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f43f aee0 	beq.w	800d088 <_strtod_l+0x420>
 800d2c8:	9805      	ldr	r0, [sp, #20]
 800d2ca:	2101      	movs	r1, #1
 800d2cc:	f001 fa50 	bl	800e770 <__i2b>
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	b940      	cbnz	r0, 800d2e6 <_strtod_l+0x67e>
 800d2d4:	2500      	movs	r5, #0
 800d2d6:	e6d7      	b.n	800d088 <_strtod_l+0x420>
 800d2d8:	f04f 31ff 	mov.w	r1, #4294967295
 800d2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800d2e0:	ea02 0a0a 	and.w	sl, r2, sl
 800d2e4:	e7b0      	b.n	800d248 <_strtod_l+0x5e0>
 800d2e6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d2e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	bfab      	itete	ge
 800d2ee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d2f0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d2f2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d2f6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d2fa:	bfac      	ite	ge
 800d2fc:	eb07 0903 	addge.w	r9, r7, r3
 800d300:	eba3 0807 	sublt.w	r8, r3, r7
 800d304:	9b06      	ldr	r3, [sp, #24]
 800d306:	1aff      	subs	r7, r7, r3
 800d308:	4417      	add	r7, r2
 800d30a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d30e:	4a6b      	ldr	r2, [pc, #428]	@ (800d4bc <_strtod_l+0x854>)
 800d310:	3f01      	subs	r7, #1
 800d312:	4297      	cmp	r7, r2
 800d314:	da51      	bge.n	800d3ba <_strtod_l+0x752>
 800d316:	1bd1      	subs	r1, r2, r7
 800d318:	291f      	cmp	r1, #31
 800d31a:	eba3 0301 	sub.w	r3, r3, r1
 800d31e:	f04f 0201 	mov.w	r2, #1
 800d322:	dc3e      	bgt.n	800d3a2 <_strtod_l+0x73a>
 800d324:	408a      	lsls	r2, r1
 800d326:	920c      	str	r2, [sp, #48]	@ 0x30
 800d328:	2200      	movs	r2, #0
 800d32a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d32c:	eb09 0703 	add.w	r7, r9, r3
 800d330:	4498      	add	r8, r3
 800d332:	9b06      	ldr	r3, [sp, #24]
 800d334:	45b9      	cmp	r9, r7
 800d336:	4498      	add	r8, r3
 800d338:	464b      	mov	r3, r9
 800d33a:	bfa8      	it	ge
 800d33c:	463b      	movge	r3, r7
 800d33e:	4543      	cmp	r3, r8
 800d340:	bfa8      	it	ge
 800d342:	4643      	movge	r3, r8
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfc2      	ittt	gt
 800d348:	1aff      	subgt	r7, r7, r3
 800d34a:	eba8 0803 	subgt.w	r8, r8, r3
 800d34e:	eba9 0903 	subgt.w	r9, r9, r3
 800d352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d354:	2b00      	cmp	r3, #0
 800d356:	dd16      	ble.n	800d386 <_strtod_l+0x71e>
 800d358:	4629      	mov	r1, r5
 800d35a:	9805      	ldr	r0, [sp, #20]
 800d35c:	461a      	mov	r2, r3
 800d35e:	f001 fac7 	bl	800e8f0 <__pow5mult>
 800d362:	4605      	mov	r5, r0
 800d364:	2800      	cmp	r0, #0
 800d366:	d0b5      	beq.n	800d2d4 <_strtod_l+0x66c>
 800d368:	4601      	mov	r1, r0
 800d36a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d36c:	9805      	ldr	r0, [sp, #20]
 800d36e:	f001 fa15 	bl	800e79c <__multiply>
 800d372:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d374:	2800      	cmp	r0, #0
 800d376:	f43f ae87 	beq.w	800d088 <_strtod_l+0x420>
 800d37a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d37c:	9805      	ldr	r0, [sp, #20]
 800d37e:	f001 f8f9 	bl	800e574 <_Bfree>
 800d382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d384:	9312      	str	r3, [sp, #72]	@ 0x48
 800d386:	2f00      	cmp	r7, #0
 800d388:	dc1b      	bgt.n	800d3c2 <_strtod_l+0x75a>
 800d38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	dd21      	ble.n	800d3d4 <_strtod_l+0x76c>
 800d390:	4631      	mov	r1, r6
 800d392:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d394:	9805      	ldr	r0, [sp, #20]
 800d396:	f001 faab 	bl	800e8f0 <__pow5mult>
 800d39a:	4606      	mov	r6, r0
 800d39c:	b9d0      	cbnz	r0, 800d3d4 <_strtod_l+0x76c>
 800d39e:	2600      	movs	r6, #0
 800d3a0:	e672      	b.n	800d088 <_strtod_l+0x420>
 800d3a2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d3a6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d3aa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d3ae:	37e2      	adds	r7, #226	@ 0xe2
 800d3b0:	fa02 f107 	lsl.w	r1, r2, r7
 800d3b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3b8:	e7b8      	b.n	800d32c <_strtod_l+0x6c4>
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d3be:	2201      	movs	r2, #1
 800d3c0:	e7f9      	b.n	800d3b6 <_strtod_l+0x74e>
 800d3c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d3c4:	9805      	ldr	r0, [sp, #20]
 800d3c6:	463a      	mov	r2, r7
 800d3c8:	f001 faec 	bl	800e9a4 <__lshift>
 800d3cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d1db      	bne.n	800d38a <_strtod_l+0x722>
 800d3d2:	e659      	b.n	800d088 <_strtod_l+0x420>
 800d3d4:	f1b8 0f00 	cmp.w	r8, #0
 800d3d8:	dd07      	ble.n	800d3ea <_strtod_l+0x782>
 800d3da:	4631      	mov	r1, r6
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	4642      	mov	r2, r8
 800d3e0:	f001 fae0 	bl	800e9a4 <__lshift>
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d0d9      	beq.n	800d39e <_strtod_l+0x736>
 800d3ea:	f1b9 0f00 	cmp.w	r9, #0
 800d3ee:	dd08      	ble.n	800d402 <_strtod_l+0x79a>
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	9805      	ldr	r0, [sp, #20]
 800d3f4:	464a      	mov	r2, r9
 800d3f6:	f001 fad5 	bl	800e9a4 <__lshift>
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f43f ae43 	beq.w	800d088 <_strtod_l+0x420>
 800d402:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d404:	9805      	ldr	r0, [sp, #20]
 800d406:	4632      	mov	r2, r6
 800d408:	f001 fb54 	bl	800eab4 <__mdiff>
 800d40c:	4604      	mov	r4, r0
 800d40e:	2800      	cmp	r0, #0
 800d410:	f43f ae3a 	beq.w	800d088 <_strtod_l+0x420>
 800d414:	2300      	movs	r3, #0
 800d416:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d41a:	60c3      	str	r3, [r0, #12]
 800d41c:	4629      	mov	r1, r5
 800d41e:	f001 fb2d 	bl	800ea7c <__mcmp>
 800d422:	2800      	cmp	r0, #0
 800d424:	da4e      	bge.n	800d4c4 <_strtod_l+0x85c>
 800d426:	ea58 080a 	orrs.w	r8, r8, sl
 800d42a:	d174      	bne.n	800d516 <_strtod_l+0x8ae>
 800d42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d430:	2b00      	cmp	r3, #0
 800d432:	d170      	bne.n	800d516 <_strtod_l+0x8ae>
 800d434:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d438:	0d1b      	lsrs	r3, r3, #20
 800d43a:	051b      	lsls	r3, r3, #20
 800d43c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d440:	d969      	bls.n	800d516 <_strtod_l+0x8ae>
 800d442:	6963      	ldr	r3, [r4, #20]
 800d444:	b913      	cbnz	r3, 800d44c <_strtod_l+0x7e4>
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	dd64      	ble.n	800d516 <_strtod_l+0x8ae>
 800d44c:	4621      	mov	r1, r4
 800d44e:	2201      	movs	r2, #1
 800d450:	9805      	ldr	r0, [sp, #20]
 800d452:	f001 faa7 	bl	800e9a4 <__lshift>
 800d456:	4629      	mov	r1, r5
 800d458:	4604      	mov	r4, r0
 800d45a:	f001 fb0f 	bl	800ea7c <__mcmp>
 800d45e:	2800      	cmp	r0, #0
 800d460:	dd59      	ble.n	800d516 <_strtod_l+0x8ae>
 800d462:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d466:	9a06      	ldr	r2, [sp, #24]
 800d468:	0d1b      	lsrs	r3, r3, #20
 800d46a:	051b      	lsls	r3, r3, #20
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	d070      	beq.n	800d552 <_strtod_l+0x8ea>
 800d470:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d474:	d86d      	bhi.n	800d552 <_strtod_l+0x8ea>
 800d476:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d47a:	f67f ae99 	bls.w	800d1b0 <_strtod_l+0x548>
 800d47e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d4b0 <_strtod_l+0x848>
 800d482:	ec4b ab16 	vmov	d6, sl, fp
 800d486:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c0 <_strtod_l+0x858>)
 800d488:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d48c:	ee17 2a90 	vmov	r2, s15
 800d490:	4013      	ands	r3, r2
 800d492:	ec5b ab17 	vmov	sl, fp, d7
 800d496:	2b00      	cmp	r3, #0
 800d498:	f47f ae01 	bne.w	800d09e <_strtod_l+0x436>
 800d49c:	9a05      	ldr	r2, [sp, #20]
 800d49e:	2322      	movs	r3, #34	@ 0x22
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	e5fc      	b.n	800d09e <_strtod_l+0x436>
 800d4a4:	f3af 8000 	nop.w
 800d4a8:	ffc00000 	.word	0xffc00000
 800d4ac:	41dfffff 	.word	0x41dfffff
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	39500000 	.word	0x39500000
 800d4b8:	08010a70 	.word	0x08010a70
 800d4bc:	fffffc02 	.word	0xfffffc02
 800d4c0:	7ff00000 	.word	0x7ff00000
 800d4c4:	46d9      	mov	r9, fp
 800d4c6:	d15d      	bne.n	800d584 <_strtod_l+0x91c>
 800d4c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4cc:	f1b8 0f00 	cmp.w	r8, #0
 800d4d0:	d02a      	beq.n	800d528 <_strtod_l+0x8c0>
 800d4d2:	4aab      	ldr	r2, [pc, #684]	@ (800d780 <_strtod_l+0xb18>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d12a      	bne.n	800d52e <_strtod_l+0x8c6>
 800d4d8:	9b06      	ldr	r3, [sp, #24]
 800d4da:	4652      	mov	r2, sl
 800d4dc:	b1fb      	cbz	r3, 800d51e <_strtod_l+0x8b6>
 800d4de:	4ba9      	ldr	r3, [pc, #676]	@ (800d784 <_strtod_l+0xb1c>)
 800d4e0:	ea0b 0303 	and.w	r3, fp, r3
 800d4e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d4e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d4ec:	d81a      	bhi.n	800d524 <_strtod_l+0x8bc>
 800d4ee:	0d1b      	lsrs	r3, r3, #20
 800d4f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d118      	bne.n	800d52e <_strtod_l+0x8c6>
 800d4fc:	4ba2      	ldr	r3, [pc, #648]	@ (800d788 <_strtod_l+0xb20>)
 800d4fe:	4599      	cmp	r9, r3
 800d500:	d102      	bne.n	800d508 <_strtod_l+0x8a0>
 800d502:	3201      	adds	r2, #1
 800d504:	f43f adc0 	beq.w	800d088 <_strtod_l+0x420>
 800d508:	4b9e      	ldr	r3, [pc, #632]	@ (800d784 <_strtod_l+0xb1c>)
 800d50a:	ea09 0303 	and.w	r3, r9, r3
 800d50e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d512:	f04f 0a00 	mov.w	sl, #0
 800d516:	9b06      	ldr	r3, [sp, #24]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1b0      	bne.n	800d47e <_strtod_l+0x816>
 800d51c:	e5bf      	b.n	800d09e <_strtod_l+0x436>
 800d51e:	f04f 33ff 	mov.w	r3, #4294967295
 800d522:	e7e9      	b.n	800d4f8 <_strtod_l+0x890>
 800d524:	460b      	mov	r3, r1
 800d526:	e7e7      	b.n	800d4f8 <_strtod_l+0x890>
 800d528:	ea53 030a 	orrs.w	r3, r3, sl
 800d52c:	d099      	beq.n	800d462 <_strtod_l+0x7fa>
 800d52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d530:	b1c3      	cbz	r3, 800d564 <_strtod_l+0x8fc>
 800d532:	ea13 0f09 	tst.w	r3, r9
 800d536:	d0ee      	beq.n	800d516 <_strtod_l+0x8ae>
 800d538:	9a06      	ldr	r2, [sp, #24]
 800d53a:	4650      	mov	r0, sl
 800d53c:	4659      	mov	r1, fp
 800d53e:	f1b8 0f00 	cmp.w	r8, #0
 800d542:	d013      	beq.n	800d56c <_strtod_l+0x904>
 800d544:	f7ff fb74 	bl	800cc30 <sulp>
 800d548:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d54c:	ec5b ab17 	vmov	sl, fp, d7
 800d550:	e7e1      	b.n	800d516 <_strtod_l+0x8ae>
 800d552:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d556:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d55a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d55e:	f04f 3aff 	mov.w	sl, #4294967295
 800d562:	e7d8      	b.n	800d516 <_strtod_l+0x8ae>
 800d564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d566:	ea13 0f0a 	tst.w	r3, sl
 800d56a:	e7e4      	b.n	800d536 <_strtod_l+0x8ce>
 800d56c:	f7ff fb60 	bl	800cc30 <sulp>
 800d570:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d574:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	ec5b ab10 	vmov	sl, fp, d0
 800d580:	d1c9      	bne.n	800d516 <_strtod_l+0x8ae>
 800d582:	e615      	b.n	800d1b0 <_strtod_l+0x548>
 800d584:	4629      	mov	r1, r5
 800d586:	4620      	mov	r0, r4
 800d588:	f001 fbf0 	bl	800ed6c <__ratio>
 800d58c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d590:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d598:	d85d      	bhi.n	800d656 <_strtod_l+0x9ee>
 800d59a:	f1b8 0f00 	cmp.w	r8, #0
 800d59e:	d164      	bne.n	800d66a <_strtod_l+0xa02>
 800d5a0:	f1ba 0f00 	cmp.w	sl, #0
 800d5a4:	d14b      	bne.n	800d63e <_strtod_l+0x9d6>
 800d5a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d160      	bne.n	800d674 <_strtod_l+0xa0c>
 800d5b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d5b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5be:	d401      	bmi.n	800d5c4 <_strtod_l+0x95c>
 800d5c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d5c4:	eeb1 ab48 	vneg.f64	d10, d8
 800d5c8:	486e      	ldr	r0, [pc, #440]	@ (800d784 <_strtod_l+0xb1c>)
 800d5ca:	4970      	ldr	r1, [pc, #448]	@ (800d78c <_strtod_l+0xb24>)
 800d5cc:	ea09 0700 	and.w	r7, r9, r0
 800d5d0:	428f      	cmp	r7, r1
 800d5d2:	ec53 2b1a 	vmov	r2, r3, d10
 800d5d6:	d17d      	bne.n	800d6d4 <_strtod_l+0xa6c>
 800d5d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d5dc:	ec4b ab1c 	vmov	d12, sl, fp
 800d5e0:	eeb0 0b4c 	vmov.f64	d0, d12
 800d5e4:	f001 fafa 	bl	800ebdc <__ulp>
 800d5e8:	4866      	ldr	r0, [pc, #408]	@ (800d784 <_strtod_l+0xb1c>)
 800d5ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d5ee:	ee1c 3a90 	vmov	r3, s25
 800d5f2:	4a67      	ldr	r2, [pc, #412]	@ (800d790 <_strtod_l+0xb28>)
 800d5f4:	ea03 0100 	and.w	r1, r3, r0
 800d5f8:	4291      	cmp	r1, r2
 800d5fa:	ec5b ab1c 	vmov	sl, fp, d12
 800d5fe:	d93c      	bls.n	800d67a <_strtod_l+0xa12>
 800d600:	ee19 2a90 	vmov	r2, s19
 800d604:	4b60      	ldr	r3, [pc, #384]	@ (800d788 <_strtod_l+0xb20>)
 800d606:	429a      	cmp	r2, r3
 800d608:	d104      	bne.n	800d614 <_strtod_l+0x9ac>
 800d60a:	ee19 3a10 	vmov	r3, s18
 800d60e:	3301      	adds	r3, #1
 800d610:	f43f ad3a 	beq.w	800d088 <_strtod_l+0x420>
 800d614:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d788 <_strtod_l+0xb20>
 800d618:	f04f 3aff 	mov.w	sl, #4294967295
 800d61c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d61e:	9805      	ldr	r0, [sp, #20]
 800d620:	f000 ffa8 	bl	800e574 <_Bfree>
 800d624:	9805      	ldr	r0, [sp, #20]
 800d626:	4631      	mov	r1, r6
 800d628:	f000 ffa4 	bl	800e574 <_Bfree>
 800d62c:	9805      	ldr	r0, [sp, #20]
 800d62e:	4629      	mov	r1, r5
 800d630:	f000 ffa0 	bl	800e574 <_Bfree>
 800d634:	9805      	ldr	r0, [sp, #20]
 800d636:	4621      	mov	r1, r4
 800d638:	f000 ff9c 	bl	800e574 <_Bfree>
 800d63c:	e625      	b.n	800d28a <_strtod_l+0x622>
 800d63e:	f1ba 0f01 	cmp.w	sl, #1
 800d642:	d103      	bne.n	800d64c <_strtod_l+0x9e4>
 800d644:	f1bb 0f00 	cmp.w	fp, #0
 800d648:	f43f adb2 	beq.w	800d1b0 <_strtod_l+0x548>
 800d64c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d650:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d654:	e7b8      	b.n	800d5c8 <_strtod_l+0x960>
 800d656:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d65a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d65e:	f1b8 0f00 	cmp.w	r8, #0
 800d662:	d0af      	beq.n	800d5c4 <_strtod_l+0x95c>
 800d664:	eeb0 ab48 	vmov.f64	d10, d8
 800d668:	e7ae      	b.n	800d5c8 <_strtod_l+0x960>
 800d66a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d66e:	eeb0 8b4a 	vmov.f64	d8, d10
 800d672:	e7a9      	b.n	800d5c8 <_strtod_l+0x960>
 800d674:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d678:	e7a6      	b.n	800d5c8 <_strtod_l+0x960>
 800d67a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d67e:	9b06      	ldr	r3, [sp, #24]
 800d680:	46d9      	mov	r9, fp
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1ca      	bne.n	800d61c <_strtod_l+0x9b4>
 800d686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d68a:	0d1b      	lsrs	r3, r3, #20
 800d68c:	051b      	lsls	r3, r3, #20
 800d68e:	429f      	cmp	r7, r3
 800d690:	d1c4      	bne.n	800d61c <_strtod_l+0x9b4>
 800d692:	ec51 0b18 	vmov	r0, r1, d8
 800d696:	f7f3 f837 	bl	8000708 <__aeabi_d2lz>
 800d69a:	f7f3 f807 	bl	80006ac <__aeabi_l2d>
 800d69e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d6a2:	ec41 0b17 	vmov	d7, r0, r1
 800d6a6:	ea49 090a 	orr.w	r9, r9, sl
 800d6aa:	ea59 0908 	orrs.w	r9, r9, r8
 800d6ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d6b2:	d03c      	beq.n	800d72e <_strtod_l+0xac6>
 800d6b4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d768 <_strtod_l+0xb00>
 800d6b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c0:	f53f aced 	bmi.w	800d09e <_strtod_l+0x436>
 800d6c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d770 <_strtod_l+0xb08>
 800d6c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d0:	dda4      	ble.n	800d61c <_strtod_l+0x9b4>
 800d6d2:	e4e4      	b.n	800d09e <_strtod_l+0x436>
 800d6d4:	9906      	ldr	r1, [sp, #24]
 800d6d6:	b1e1      	cbz	r1, 800d712 <_strtod_l+0xaaa>
 800d6d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d6dc:	d819      	bhi.n	800d712 <_strtod_l+0xaaa>
 800d6de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e6:	d811      	bhi.n	800d70c <_strtod_l+0xaa4>
 800d6e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d6ec:	ee18 3a10 	vmov	r3, s16
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	bf38      	it	cc
 800d6f4:	2301      	movcc	r3, #1
 800d6f6:	ee08 3a10 	vmov	s16, r3
 800d6fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d6fe:	f1b8 0f00 	cmp.w	r8, #0
 800d702:	d111      	bne.n	800d728 <_strtod_l+0xac0>
 800d704:	eeb1 7b48 	vneg.f64	d7, d8
 800d708:	ec53 2b17 	vmov	r2, r3, d7
 800d70c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d710:	1bcb      	subs	r3, r1, r7
 800d712:	eeb0 0b49 	vmov.f64	d0, d9
 800d716:	ec43 2b1a 	vmov	d10, r2, r3
 800d71a:	f001 fa5f 	bl	800ebdc <__ulp>
 800d71e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d722:	ec5b ab19 	vmov	sl, fp, d9
 800d726:	e7aa      	b.n	800d67e <_strtod_l+0xa16>
 800d728:	eeb0 7b48 	vmov.f64	d7, d8
 800d72c:	e7ec      	b.n	800d708 <_strtod_l+0xaa0>
 800d72e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d778 <_strtod_l+0xb10>
 800d732:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73a:	f57f af6f 	bpl.w	800d61c <_strtod_l+0x9b4>
 800d73e:	e4ae      	b.n	800d09e <_strtod_l+0x436>
 800d740:	2300      	movs	r3, #0
 800d742:	9308      	str	r3, [sp, #32]
 800d744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d746:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	f7ff bacc 	b.w	800cce6 <_strtod_l+0x7e>
 800d74e:	2a65      	cmp	r2, #101	@ 0x65
 800d750:	f43f abbc 	beq.w	800cecc <_strtod_l+0x264>
 800d754:	2a45      	cmp	r2, #69	@ 0x45
 800d756:	f43f abb9 	beq.w	800cecc <_strtod_l+0x264>
 800d75a:	2301      	movs	r3, #1
 800d75c:	9306      	str	r3, [sp, #24]
 800d75e:	f7ff bbf0 	b.w	800cf42 <_strtod_l+0x2da>
 800d762:	bf00      	nop
 800d764:	f3af 8000 	nop.w
 800d768:	94a03595 	.word	0x94a03595
 800d76c:	3fdfffff 	.word	0x3fdfffff
 800d770:	35afe535 	.word	0x35afe535
 800d774:	3fe00000 	.word	0x3fe00000
 800d778:	94a03595 	.word	0x94a03595
 800d77c:	3fcfffff 	.word	0x3fcfffff
 800d780:	000fffff 	.word	0x000fffff
 800d784:	7ff00000 	.word	0x7ff00000
 800d788:	7fefffff 	.word	0x7fefffff
 800d78c:	7fe00000 	.word	0x7fe00000
 800d790:	7c9fffff 	.word	0x7c9fffff

0800d794 <strtod>:
 800d794:	460a      	mov	r2, r1
 800d796:	4601      	mov	r1, r0
 800d798:	4802      	ldr	r0, [pc, #8]	@ (800d7a4 <strtod+0x10>)
 800d79a:	4b03      	ldr	r3, [pc, #12]	@ (800d7a8 <strtod+0x14>)
 800d79c:	6800      	ldr	r0, [r0, #0]
 800d79e:	f7ff ba63 	b.w	800cc68 <_strtod_l>
 800d7a2:	bf00      	nop
 800d7a4:	240001b0 	.word	0x240001b0
 800d7a8:	24000044 	.word	0x24000044

0800d7ac <std>:
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7ba:	6083      	str	r3, [r0, #8]
 800d7bc:	8181      	strh	r1, [r0, #12]
 800d7be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7c0:	81c2      	strh	r2, [r0, #14]
 800d7c2:	6183      	str	r3, [r0, #24]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	2208      	movs	r2, #8
 800d7c8:	305c      	adds	r0, #92	@ 0x5c
 800d7ca:	f000 f914 	bl	800d9f6 <memset>
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d804 <std+0x58>)
 800d7d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d808 <std+0x5c>)
 800d7d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d80c <std+0x60>)
 800d7d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7da:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <std+0x64>)
 800d7dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7de:	4b0d      	ldr	r3, [pc, #52]	@ (800d814 <std+0x68>)
 800d7e0:	6224      	str	r4, [r4, #32]
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d006      	beq.n	800d7f4 <std+0x48>
 800d7e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7ea:	4294      	cmp	r4, r2
 800d7ec:	d002      	beq.n	800d7f4 <std+0x48>
 800d7ee:	33d0      	adds	r3, #208	@ 0xd0
 800d7f0:	429c      	cmp	r4, r3
 800d7f2:	d105      	bne.n	800d800 <std+0x54>
 800d7f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7fc:	f000 b9f4 	b.w	800dbe8 <__retarget_lock_init_recursive>
 800d800:	bd10      	pop	{r4, pc}
 800d802:	bf00      	nop
 800d804:	0800d971 	.word	0x0800d971
 800d808:	0800d993 	.word	0x0800d993
 800d80c:	0800d9cb 	.word	0x0800d9cb
 800d810:	0800d9ef 	.word	0x0800d9ef
 800d814:	24000608 	.word	0x24000608

0800d818 <stdio_exit_handler>:
 800d818:	4a02      	ldr	r2, [pc, #8]	@ (800d824 <stdio_exit_handler+0xc>)
 800d81a:	4903      	ldr	r1, [pc, #12]	@ (800d828 <stdio_exit_handler+0x10>)
 800d81c:	4803      	ldr	r0, [pc, #12]	@ (800d82c <stdio_exit_handler+0x14>)
 800d81e:	f000 b869 	b.w	800d8f4 <_fwalk_sglue>
 800d822:	bf00      	nop
 800d824:	24000038 	.word	0x24000038
 800d828:	0800f541 	.word	0x0800f541
 800d82c:	240001b4 	.word	0x240001b4

0800d830 <cleanup_stdio>:
 800d830:	6841      	ldr	r1, [r0, #4]
 800d832:	4b0c      	ldr	r3, [pc, #48]	@ (800d864 <cleanup_stdio+0x34>)
 800d834:	4299      	cmp	r1, r3
 800d836:	b510      	push	{r4, lr}
 800d838:	4604      	mov	r4, r0
 800d83a:	d001      	beq.n	800d840 <cleanup_stdio+0x10>
 800d83c:	f001 fe80 	bl	800f540 <_fflush_r>
 800d840:	68a1      	ldr	r1, [r4, #8]
 800d842:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <cleanup_stdio+0x38>)
 800d844:	4299      	cmp	r1, r3
 800d846:	d002      	beq.n	800d84e <cleanup_stdio+0x1e>
 800d848:	4620      	mov	r0, r4
 800d84a:	f001 fe79 	bl	800f540 <_fflush_r>
 800d84e:	68e1      	ldr	r1, [r4, #12]
 800d850:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <cleanup_stdio+0x3c>)
 800d852:	4299      	cmp	r1, r3
 800d854:	d004      	beq.n	800d860 <cleanup_stdio+0x30>
 800d856:	4620      	mov	r0, r4
 800d858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d85c:	f001 be70 	b.w	800f540 <_fflush_r>
 800d860:	bd10      	pop	{r4, pc}
 800d862:	bf00      	nop
 800d864:	24000608 	.word	0x24000608
 800d868:	24000670 	.word	0x24000670
 800d86c:	240006d8 	.word	0x240006d8

0800d870 <global_stdio_init.part.0>:
 800d870:	b510      	push	{r4, lr}
 800d872:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a0 <global_stdio_init.part.0+0x30>)
 800d874:	4c0b      	ldr	r4, [pc, #44]	@ (800d8a4 <global_stdio_init.part.0+0x34>)
 800d876:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a8 <global_stdio_init.part.0+0x38>)
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	4620      	mov	r0, r4
 800d87c:	2200      	movs	r2, #0
 800d87e:	2104      	movs	r1, #4
 800d880:	f7ff ff94 	bl	800d7ac <std>
 800d884:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d888:	2201      	movs	r2, #1
 800d88a:	2109      	movs	r1, #9
 800d88c:	f7ff ff8e 	bl	800d7ac <std>
 800d890:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d894:	2202      	movs	r2, #2
 800d896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d89a:	2112      	movs	r1, #18
 800d89c:	f7ff bf86 	b.w	800d7ac <std>
 800d8a0:	24000740 	.word	0x24000740
 800d8a4:	24000608 	.word	0x24000608
 800d8a8:	0800d819 	.word	0x0800d819

0800d8ac <__sfp_lock_acquire>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	@ (800d8b4 <__sfp_lock_acquire+0x8>)
 800d8ae:	f000 b99c 	b.w	800dbea <__retarget_lock_acquire_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	24000749 	.word	0x24000749

0800d8b8 <__sfp_lock_release>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	@ (800d8c0 <__sfp_lock_release+0x8>)
 800d8ba:	f000 b997 	b.w	800dbec <__retarget_lock_release_recursive>
 800d8be:	bf00      	nop
 800d8c0:	24000749 	.word	0x24000749

0800d8c4 <__sinit>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	f7ff fff0 	bl	800d8ac <__sfp_lock_acquire>
 800d8cc:	6a23      	ldr	r3, [r4, #32]
 800d8ce:	b11b      	cbz	r3, 800d8d8 <__sinit+0x14>
 800d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d4:	f7ff bff0 	b.w	800d8b8 <__sfp_lock_release>
 800d8d8:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <__sinit+0x28>)
 800d8da:	6223      	str	r3, [r4, #32]
 800d8dc:	4b04      	ldr	r3, [pc, #16]	@ (800d8f0 <__sinit+0x2c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1f5      	bne.n	800d8d0 <__sinit+0xc>
 800d8e4:	f7ff ffc4 	bl	800d870 <global_stdio_init.part.0>
 800d8e8:	e7f2      	b.n	800d8d0 <__sinit+0xc>
 800d8ea:	bf00      	nop
 800d8ec:	0800d831 	.word	0x0800d831
 800d8f0:	24000740 	.word	0x24000740

0800d8f4 <_fwalk_sglue>:
 800d8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	4688      	mov	r8, r1
 800d8fc:	4614      	mov	r4, r2
 800d8fe:	2600      	movs	r6, #0
 800d900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d904:	f1b9 0901 	subs.w	r9, r9, #1
 800d908:	d505      	bpl.n	800d916 <_fwalk_sglue+0x22>
 800d90a:	6824      	ldr	r4, [r4, #0]
 800d90c:	2c00      	cmp	r4, #0
 800d90e:	d1f7      	bne.n	800d900 <_fwalk_sglue+0xc>
 800d910:	4630      	mov	r0, r6
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	89ab      	ldrh	r3, [r5, #12]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d907      	bls.n	800d92c <_fwalk_sglue+0x38>
 800d91c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d920:	3301      	adds	r3, #1
 800d922:	d003      	beq.n	800d92c <_fwalk_sglue+0x38>
 800d924:	4629      	mov	r1, r5
 800d926:	4638      	mov	r0, r7
 800d928:	47c0      	blx	r8
 800d92a:	4306      	orrs	r6, r0
 800d92c:	3568      	adds	r5, #104	@ 0x68
 800d92e:	e7e9      	b.n	800d904 <_fwalk_sglue+0x10>

0800d930 <siprintf>:
 800d930:	b40e      	push	{r1, r2, r3}
 800d932:	b500      	push	{lr}
 800d934:	b09c      	sub	sp, #112	@ 0x70
 800d936:	ab1d      	add	r3, sp, #116	@ 0x74
 800d938:	9002      	str	r0, [sp, #8]
 800d93a:	9006      	str	r0, [sp, #24]
 800d93c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d940:	4809      	ldr	r0, [pc, #36]	@ (800d968 <siprintf+0x38>)
 800d942:	9107      	str	r1, [sp, #28]
 800d944:	9104      	str	r1, [sp, #16]
 800d946:	4909      	ldr	r1, [pc, #36]	@ (800d96c <siprintf+0x3c>)
 800d948:	f853 2b04 	ldr.w	r2, [r3], #4
 800d94c:	9105      	str	r1, [sp, #20]
 800d94e:	6800      	ldr	r0, [r0, #0]
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	a902      	add	r1, sp, #8
 800d954:	f001 fae6 	bl	800ef24 <_svfiprintf_r>
 800d958:	9b02      	ldr	r3, [sp, #8]
 800d95a:	2200      	movs	r2, #0
 800d95c:	701a      	strb	r2, [r3, #0]
 800d95e:	b01c      	add	sp, #112	@ 0x70
 800d960:	f85d eb04 	ldr.w	lr, [sp], #4
 800d964:	b003      	add	sp, #12
 800d966:	4770      	bx	lr
 800d968:	240001b0 	.word	0x240001b0
 800d96c:	ffff0208 	.word	0xffff0208

0800d970 <__sread>:
 800d970:	b510      	push	{r4, lr}
 800d972:	460c      	mov	r4, r1
 800d974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d978:	f000 f8e8 	bl	800db4c <_read_r>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	bfab      	itete	ge
 800d980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d982:	89a3      	ldrhlt	r3, [r4, #12]
 800d984:	181b      	addge	r3, r3, r0
 800d986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d98a:	bfac      	ite	ge
 800d98c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d98e:	81a3      	strhlt	r3, [r4, #12]
 800d990:	bd10      	pop	{r4, pc}

0800d992 <__swrite>:
 800d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d996:	461f      	mov	r7, r3
 800d998:	898b      	ldrh	r3, [r1, #12]
 800d99a:	05db      	lsls	r3, r3, #23
 800d99c:	4605      	mov	r5, r0
 800d99e:	460c      	mov	r4, r1
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	d505      	bpl.n	800d9b0 <__swrite+0x1e>
 800d9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f000 f8bc 	bl	800db28 <_lseek_r>
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9ba:	81a3      	strh	r3, [r4, #12]
 800d9bc:	4632      	mov	r2, r6
 800d9be:	463b      	mov	r3, r7
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c6:	f000 b8d3 	b.w	800db70 <_write_r>

0800d9ca <__sseek>:
 800d9ca:	b510      	push	{r4, lr}
 800d9cc:	460c      	mov	r4, r1
 800d9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d2:	f000 f8a9 	bl	800db28 <_lseek_r>
 800d9d6:	1c43      	adds	r3, r0, #1
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	bf15      	itete	ne
 800d9dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9e6:	81a3      	strheq	r3, [r4, #12]
 800d9e8:	bf18      	it	ne
 800d9ea:	81a3      	strhne	r3, [r4, #12]
 800d9ec:	bd10      	pop	{r4, pc}

0800d9ee <__sclose>:
 800d9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f2:	f000 b889 	b.w	800db08 <_close_r>

0800d9f6 <memset>:
 800d9f6:	4402      	add	r2, r0
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d100      	bne.n	800da00 <memset+0xa>
 800d9fe:	4770      	bx	lr
 800da00:	f803 1b01 	strb.w	r1, [r3], #1
 800da04:	e7f9      	b.n	800d9fa <memset+0x4>

0800da06 <strncmp>:
 800da06:	b510      	push	{r4, lr}
 800da08:	b16a      	cbz	r2, 800da26 <strncmp+0x20>
 800da0a:	3901      	subs	r1, #1
 800da0c:	1884      	adds	r4, r0, r2
 800da0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da12:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da16:	429a      	cmp	r2, r3
 800da18:	d103      	bne.n	800da22 <strncmp+0x1c>
 800da1a:	42a0      	cmp	r0, r4
 800da1c:	d001      	beq.n	800da22 <strncmp+0x1c>
 800da1e:	2a00      	cmp	r2, #0
 800da20:	d1f5      	bne.n	800da0e <strncmp+0x8>
 800da22:	1ad0      	subs	r0, r2, r3
 800da24:	bd10      	pop	{r4, pc}
 800da26:	4610      	mov	r0, r2
 800da28:	e7fc      	b.n	800da24 <strncmp+0x1e>

0800da2a <strncpy>:
 800da2a:	b510      	push	{r4, lr}
 800da2c:	3901      	subs	r1, #1
 800da2e:	4603      	mov	r3, r0
 800da30:	b132      	cbz	r2, 800da40 <strncpy+0x16>
 800da32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da36:	f803 4b01 	strb.w	r4, [r3], #1
 800da3a:	3a01      	subs	r2, #1
 800da3c:	2c00      	cmp	r4, #0
 800da3e:	d1f7      	bne.n	800da30 <strncpy+0x6>
 800da40:	441a      	add	r2, r3
 800da42:	2100      	movs	r1, #0
 800da44:	4293      	cmp	r3, r2
 800da46:	d100      	bne.n	800da4a <strncpy+0x20>
 800da48:	bd10      	pop	{r4, pc}
 800da4a:	f803 1b01 	strb.w	r1, [r3], #1
 800da4e:	e7f9      	b.n	800da44 <strncpy+0x1a>

0800da50 <strtok>:
 800da50:	4b16      	ldr	r3, [pc, #88]	@ (800daac <strtok+0x5c>)
 800da52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	681f      	ldr	r7, [r3, #0]
 800da58:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800da5a:	4605      	mov	r5, r0
 800da5c:	460e      	mov	r6, r1
 800da5e:	b9ec      	cbnz	r4, 800da9c <strtok+0x4c>
 800da60:	2050      	movs	r0, #80	@ 0x50
 800da62:	f000 fc7f 	bl	800e364 <malloc>
 800da66:	4602      	mov	r2, r0
 800da68:	6478      	str	r0, [r7, #68]	@ 0x44
 800da6a:	b920      	cbnz	r0, 800da76 <strtok+0x26>
 800da6c:	4b10      	ldr	r3, [pc, #64]	@ (800dab0 <strtok+0x60>)
 800da6e:	4811      	ldr	r0, [pc, #68]	@ (800dab4 <strtok+0x64>)
 800da70:	215b      	movs	r1, #91	@ 0x5b
 800da72:	f000 f8d5 	bl	800dc20 <__assert_func>
 800da76:	e9c0 4400 	strd	r4, r4, [r0]
 800da7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800da7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800da82:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800da86:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800da8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800da8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800da92:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800da96:	6184      	str	r4, [r0, #24]
 800da98:	7704      	strb	r4, [r0, #28]
 800da9a:	6244      	str	r4, [r0, #36]	@ 0x24
 800da9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	2301      	movs	r3, #1
 800daa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daa8:	f000 b806 	b.w	800dab8 <__strtok_r>
 800daac:	240001b0 	.word	0x240001b0
 800dab0:	08010a98 	.word	0x08010a98
 800dab4:	08010aaf 	.word	0x08010aaf

0800dab8 <__strtok_r>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	4604      	mov	r4, r0
 800dabc:	b908      	cbnz	r0, 800dac2 <__strtok_r+0xa>
 800dabe:	6814      	ldr	r4, [r2, #0]
 800dac0:	b144      	cbz	r4, 800dad4 <__strtok_r+0x1c>
 800dac2:	4620      	mov	r0, r4
 800dac4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dac8:	460f      	mov	r7, r1
 800daca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dace:	b91e      	cbnz	r6, 800dad8 <__strtok_r+0x20>
 800dad0:	b965      	cbnz	r5, 800daec <__strtok_r+0x34>
 800dad2:	6015      	str	r5, [r2, #0]
 800dad4:	2000      	movs	r0, #0
 800dad6:	e005      	b.n	800dae4 <__strtok_r+0x2c>
 800dad8:	42b5      	cmp	r5, r6
 800dada:	d1f6      	bne.n	800daca <__strtok_r+0x12>
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d1f0      	bne.n	800dac2 <__strtok_r+0xa>
 800dae0:	6014      	str	r4, [r2, #0]
 800dae2:	7003      	strb	r3, [r0, #0]
 800dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae6:	461c      	mov	r4, r3
 800dae8:	e00c      	b.n	800db04 <__strtok_r+0x4c>
 800daea:	b915      	cbnz	r5, 800daf2 <__strtok_r+0x3a>
 800daec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800daf0:	460e      	mov	r6, r1
 800daf2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800daf6:	42ab      	cmp	r3, r5
 800daf8:	d1f7      	bne.n	800daea <__strtok_r+0x32>
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f3      	beq.n	800dae6 <__strtok_r+0x2e>
 800dafe:	2300      	movs	r3, #0
 800db00:	f804 3c01 	strb.w	r3, [r4, #-1]
 800db04:	6014      	str	r4, [r2, #0]
 800db06:	e7ed      	b.n	800dae4 <__strtok_r+0x2c>

0800db08 <_close_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	@ (800db24 <_close_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f6 f938 	bl	8003d88 <_close>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_close_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_close_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	24000744 	.word	0x24000744

0800db28 <_lseek_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d07      	ldr	r5, [pc, #28]	@ (800db48 <_lseek_r+0x20>)
 800db2c:	4604      	mov	r4, r0
 800db2e:	4608      	mov	r0, r1
 800db30:	4611      	mov	r1, r2
 800db32:	2200      	movs	r2, #0
 800db34:	602a      	str	r2, [r5, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	f7f6 f94d 	bl	8003dd6 <_lseek>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_lseek_r+0x1e>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_lseek_r+0x1e>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	24000744 	.word	0x24000744

0800db4c <_read_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d07      	ldr	r5, [pc, #28]	@ (800db6c <_read_r+0x20>)
 800db50:	4604      	mov	r4, r0
 800db52:	4608      	mov	r0, r1
 800db54:	4611      	mov	r1, r2
 800db56:	2200      	movs	r2, #0
 800db58:	602a      	str	r2, [r5, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f7f6 f8db 	bl	8003d16 <_read>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d102      	bne.n	800db6a <_read_r+0x1e>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	b103      	cbz	r3, 800db6a <_read_r+0x1e>
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	24000744 	.word	0x24000744

0800db70 <_write_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	@ (800db90 <_write_r+0x20>)
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f6 f8e6 	bl	8003d50 <_write>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_write_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_write_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	24000744 	.word	0x24000744

0800db94 <__errno>:
 800db94:	4b01      	ldr	r3, [pc, #4]	@ (800db9c <__errno+0x8>)
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	240001b0 	.word	0x240001b0

0800dba0 <__libc_init_array>:
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	4d0d      	ldr	r5, [pc, #52]	@ (800dbd8 <__libc_init_array+0x38>)
 800dba4:	4c0d      	ldr	r4, [pc, #52]	@ (800dbdc <__libc_init_array+0x3c>)
 800dba6:	1b64      	subs	r4, r4, r5
 800dba8:	10a4      	asrs	r4, r4, #2
 800dbaa:	2600      	movs	r6, #0
 800dbac:	42a6      	cmp	r6, r4
 800dbae:	d109      	bne.n	800dbc4 <__libc_init_array+0x24>
 800dbb0:	4d0b      	ldr	r5, [pc, #44]	@ (800dbe0 <__libc_init_array+0x40>)
 800dbb2:	4c0c      	ldr	r4, [pc, #48]	@ (800dbe4 <__libc_init_array+0x44>)
 800dbb4:	f002 fe30 	bl	8010818 <_init>
 800dbb8:	1b64      	subs	r4, r4, r5
 800dbba:	10a4      	asrs	r4, r4, #2
 800dbbc:	2600      	movs	r6, #0
 800dbbe:	42a6      	cmp	r6, r4
 800dbc0:	d105      	bne.n	800dbce <__libc_init_array+0x2e>
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}
 800dbc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbc8:	4798      	blx	r3
 800dbca:	3601      	adds	r6, #1
 800dbcc:	e7ee      	b.n	800dbac <__libc_init_array+0xc>
 800dbce:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbd2:	4798      	blx	r3
 800dbd4:	3601      	adds	r6, #1
 800dbd6:	e7f2      	b.n	800dbbe <__libc_init_array+0x1e>
 800dbd8:	08011030 	.word	0x08011030
 800dbdc:	08011030 	.word	0x08011030
 800dbe0:	08011030 	.word	0x08011030
 800dbe4:	08011034 	.word	0x08011034

0800dbe8 <__retarget_lock_init_recursive>:
 800dbe8:	4770      	bx	lr

0800dbea <__retarget_lock_acquire_recursive>:
 800dbea:	4770      	bx	lr

0800dbec <__retarget_lock_release_recursive>:
 800dbec:	4770      	bx	lr

0800dbee <memcpy>:
 800dbee:	440a      	add	r2, r1
 800dbf0:	4291      	cmp	r1, r2
 800dbf2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbf6:	d100      	bne.n	800dbfa <memcpy+0xc>
 800dbf8:	4770      	bx	lr
 800dbfa:	b510      	push	{r4, lr}
 800dbfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc04:	4291      	cmp	r1, r2
 800dc06:	d1f9      	bne.n	800dbfc <memcpy+0xe>
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	0000      	movs	r0, r0
 800dc0c:	0000      	movs	r0, r0
	...

0800dc10 <nan>:
 800dc10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc18 <nan+0x8>
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	00000000 	.word	0x00000000
 800dc1c:	7ff80000 	.word	0x7ff80000

0800dc20 <__assert_func>:
 800dc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc22:	4614      	mov	r4, r2
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b09      	ldr	r3, [pc, #36]	@ (800dc4c <__assert_func+0x2c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	68d8      	ldr	r0, [r3, #12]
 800dc2e:	b954      	cbnz	r4, 800dc46 <__assert_func+0x26>
 800dc30:	4b07      	ldr	r3, [pc, #28]	@ (800dc50 <__assert_func+0x30>)
 800dc32:	461c      	mov	r4, r3
 800dc34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc38:	9100      	str	r1, [sp, #0]
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	4905      	ldr	r1, [pc, #20]	@ (800dc54 <__assert_func+0x34>)
 800dc3e:	f001 fca7 	bl	800f590 <fiprintf>
 800dc42:	f001 fce1 	bl	800f608 <abort>
 800dc46:	4b04      	ldr	r3, [pc, #16]	@ (800dc58 <__assert_func+0x38>)
 800dc48:	e7f4      	b.n	800dc34 <__assert_func+0x14>
 800dc4a:	bf00      	nop
 800dc4c:	240001b0 	.word	0x240001b0
 800dc50:	08010b4c 	.word	0x08010b4c
 800dc54:	08010b1e 	.word	0x08010b1e
 800dc58:	08010b11 	.word	0x08010b11

0800dc5c <_free_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4605      	mov	r5, r0
 800dc60:	2900      	cmp	r1, #0
 800dc62:	d041      	beq.n	800dce8 <_free_r+0x8c>
 800dc64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc68:	1f0c      	subs	r4, r1, #4
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	bfb8      	it	lt
 800dc6e:	18e4      	addlt	r4, r4, r3
 800dc70:	f000 fc34 	bl	800e4dc <__malloc_lock>
 800dc74:	4a1d      	ldr	r2, [pc, #116]	@ (800dcec <_free_r+0x90>)
 800dc76:	6813      	ldr	r3, [r2, #0]
 800dc78:	b933      	cbnz	r3, 800dc88 <_free_r+0x2c>
 800dc7a:	6063      	str	r3, [r4, #4]
 800dc7c:	6014      	str	r4, [r2, #0]
 800dc7e:	4628      	mov	r0, r5
 800dc80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc84:	f000 bc30 	b.w	800e4e8 <__malloc_unlock>
 800dc88:	42a3      	cmp	r3, r4
 800dc8a:	d908      	bls.n	800dc9e <_free_r+0x42>
 800dc8c:	6820      	ldr	r0, [r4, #0]
 800dc8e:	1821      	adds	r1, r4, r0
 800dc90:	428b      	cmp	r3, r1
 800dc92:	bf01      	itttt	eq
 800dc94:	6819      	ldreq	r1, [r3, #0]
 800dc96:	685b      	ldreq	r3, [r3, #4]
 800dc98:	1809      	addeq	r1, r1, r0
 800dc9a:	6021      	streq	r1, [r4, #0]
 800dc9c:	e7ed      	b.n	800dc7a <_free_r+0x1e>
 800dc9e:	461a      	mov	r2, r3
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	b10b      	cbz	r3, 800dca8 <_free_r+0x4c>
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	d9fa      	bls.n	800dc9e <_free_r+0x42>
 800dca8:	6811      	ldr	r1, [r2, #0]
 800dcaa:	1850      	adds	r0, r2, r1
 800dcac:	42a0      	cmp	r0, r4
 800dcae:	d10b      	bne.n	800dcc8 <_free_r+0x6c>
 800dcb0:	6820      	ldr	r0, [r4, #0]
 800dcb2:	4401      	add	r1, r0
 800dcb4:	1850      	adds	r0, r2, r1
 800dcb6:	4283      	cmp	r3, r0
 800dcb8:	6011      	str	r1, [r2, #0]
 800dcba:	d1e0      	bne.n	800dc7e <_free_r+0x22>
 800dcbc:	6818      	ldr	r0, [r3, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	6053      	str	r3, [r2, #4]
 800dcc2:	4408      	add	r0, r1
 800dcc4:	6010      	str	r0, [r2, #0]
 800dcc6:	e7da      	b.n	800dc7e <_free_r+0x22>
 800dcc8:	d902      	bls.n	800dcd0 <_free_r+0x74>
 800dcca:	230c      	movs	r3, #12
 800dccc:	602b      	str	r3, [r5, #0]
 800dcce:	e7d6      	b.n	800dc7e <_free_r+0x22>
 800dcd0:	6820      	ldr	r0, [r4, #0]
 800dcd2:	1821      	adds	r1, r4, r0
 800dcd4:	428b      	cmp	r3, r1
 800dcd6:	bf04      	itt	eq
 800dcd8:	6819      	ldreq	r1, [r3, #0]
 800dcda:	685b      	ldreq	r3, [r3, #4]
 800dcdc:	6063      	str	r3, [r4, #4]
 800dcde:	bf04      	itt	eq
 800dce0:	1809      	addeq	r1, r1, r0
 800dce2:	6021      	streq	r1, [r4, #0]
 800dce4:	6054      	str	r4, [r2, #4]
 800dce6:	e7ca      	b.n	800dc7e <_free_r+0x22>
 800dce8:	bd38      	pop	{r3, r4, r5, pc}
 800dcea:	bf00      	nop
 800dcec:	24000750 	.word	0x24000750

0800dcf0 <rshift>:
 800dcf0:	6903      	ldr	r3, [r0, #16]
 800dcf2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dcf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcfa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dcfe:	f100 0414 	add.w	r4, r0, #20
 800dd02:	dd45      	ble.n	800dd90 <rshift+0xa0>
 800dd04:	f011 011f 	ands.w	r1, r1, #31
 800dd08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd10:	d10c      	bne.n	800dd2c <rshift+0x3c>
 800dd12:	f100 0710 	add.w	r7, r0, #16
 800dd16:	4629      	mov	r1, r5
 800dd18:	42b1      	cmp	r1, r6
 800dd1a:	d334      	bcc.n	800dd86 <rshift+0x96>
 800dd1c:	1a9b      	subs	r3, r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	1eea      	subs	r2, r5, #3
 800dd22:	4296      	cmp	r6, r2
 800dd24:	bf38      	it	cc
 800dd26:	2300      	movcc	r3, #0
 800dd28:	4423      	add	r3, r4
 800dd2a:	e015      	b.n	800dd58 <rshift+0x68>
 800dd2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd30:	f1c1 0820 	rsb	r8, r1, #32
 800dd34:	40cf      	lsrs	r7, r1
 800dd36:	f105 0e04 	add.w	lr, r5, #4
 800dd3a:	46a1      	mov	r9, r4
 800dd3c:	4576      	cmp	r6, lr
 800dd3e:	46f4      	mov	ip, lr
 800dd40:	d815      	bhi.n	800dd6e <rshift+0x7e>
 800dd42:	1a9a      	subs	r2, r3, r2
 800dd44:	0092      	lsls	r2, r2, #2
 800dd46:	3a04      	subs	r2, #4
 800dd48:	3501      	adds	r5, #1
 800dd4a:	42ae      	cmp	r6, r5
 800dd4c:	bf38      	it	cc
 800dd4e:	2200      	movcc	r2, #0
 800dd50:	18a3      	adds	r3, r4, r2
 800dd52:	50a7      	str	r7, [r4, r2]
 800dd54:	b107      	cbz	r7, 800dd58 <rshift+0x68>
 800dd56:	3304      	adds	r3, #4
 800dd58:	1b1a      	subs	r2, r3, r4
 800dd5a:	42a3      	cmp	r3, r4
 800dd5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd60:	bf08      	it	eq
 800dd62:	2300      	moveq	r3, #0
 800dd64:	6102      	str	r2, [r0, #16]
 800dd66:	bf08      	it	eq
 800dd68:	6143      	streq	r3, [r0, #20]
 800dd6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd6e:	f8dc c000 	ldr.w	ip, [ip]
 800dd72:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd76:	ea4c 0707 	orr.w	r7, ip, r7
 800dd7a:	f849 7b04 	str.w	r7, [r9], #4
 800dd7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd82:	40cf      	lsrs	r7, r1
 800dd84:	e7da      	b.n	800dd3c <rshift+0x4c>
 800dd86:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd8a:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd8e:	e7c3      	b.n	800dd18 <rshift+0x28>
 800dd90:	4623      	mov	r3, r4
 800dd92:	e7e1      	b.n	800dd58 <rshift+0x68>

0800dd94 <__hexdig_fun>:
 800dd94:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dd98:	2b09      	cmp	r3, #9
 800dd9a:	d802      	bhi.n	800dda2 <__hexdig_fun+0xe>
 800dd9c:	3820      	subs	r0, #32
 800dd9e:	b2c0      	uxtb	r0, r0
 800dda0:	4770      	bx	lr
 800dda2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	d801      	bhi.n	800ddae <__hexdig_fun+0x1a>
 800ddaa:	3847      	subs	r0, #71	@ 0x47
 800ddac:	e7f7      	b.n	800dd9e <__hexdig_fun+0xa>
 800ddae:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ddb2:	2b05      	cmp	r3, #5
 800ddb4:	d801      	bhi.n	800ddba <__hexdig_fun+0x26>
 800ddb6:	3827      	subs	r0, #39	@ 0x27
 800ddb8:	e7f1      	b.n	800dd9e <__hexdig_fun+0xa>
 800ddba:	2000      	movs	r0, #0
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <__gethex>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	b085      	sub	sp, #20
 800ddc6:	468a      	mov	sl, r1
 800ddc8:	9302      	str	r3, [sp, #8]
 800ddca:	680b      	ldr	r3, [r1, #0]
 800ddcc:	9001      	str	r0, [sp, #4]
 800ddce:	4690      	mov	r8, r2
 800ddd0:	1c9c      	adds	r4, r3, #2
 800ddd2:	46a1      	mov	r9, r4
 800ddd4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ddd8:	2830      	cmp	r0, #48	@ 0x30
 800ddda:	d0fa      	beq.n	800ddd2 <__gethex+0x12>
 800dddc:	eba9 0303 	sub.w	r3, r9, r3
 800dde0:	f1a3 0b02 	sub.w	fp, r3, #2
 800dde4:	f7ff ffd6 	bl	800dd94 <__hexdig_fun>
 800dde8:	4605      	mov	r5, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d168      	bne.n	800dec0 <__gethex+0x100>
 800ddee:	49a0      	ldr	r1, [pc, #640]	@ (800e070 <__gethex+0x2b0>)
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	4648      	mov	r0, r9
 800ddf4:	f7ff fe07 	bl	800da06 <strncmp>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d167      	bne.n	800dece <__gethex+0x10e>
 800ddfe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de02:	4626      	mov	r6, r4
 800de04:	f7ff ffc6 	bl	800dd94 <__hexdig_fun>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d062      	beq.n	800ded2 <__gethex+0x112>
 800de0c:	4623      	mov	r3, r4
 800de0e:	7818      	ldrb	r0, [r3, #0]
 800de10:	2830      	cmp	r0, #48	@ 0x30
 800de12:	4699      	mov	r9, r3
 800de14:	f103 0301 	add.w	r3, r3, #1
 800de18:	d0f9      	beq.n	800de0e <__gethex+0x4e>
 800de1a:	f7ff ffbb 	bl	800dd94 <__hexdig_fun>
 800de1e:	fab0 f580 	clz	r5, r0
 800de22:	096d      	lsrs	r5, r5, #5
 800de24:	f04f 0b01 	mov.w	fp, #1
 800de28:	464a      	mov	r2, r9
 800de2a:	4616      	mov	r6, r2
 800de2c:	3201      	adds	r2, #1
 800de2e:	7830      	ldrb	r0, [r6, #0]
 800de30:	f7ff ffb0 	bl	800dd94 <__hexdig_fun>
 800de34:	2800      	cmp	r0, #0
 800de36:	d1f8      	bne.n	800de2a <__gethex+0x6a>
 800de38:	498d      	ldr	r1, [pc, #564]	@ (800e070 <__gethex+0x2b0>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7ff fde2 	bl	800da06 <strncmp>
 800de42:	2800      	cmp	r0, #0
 800de44:	d13f      	bne.n	800dec6 <__gethex+0x106>
 800de46:	b944      	cbnz	r4, 800de5a <__gethex+0x9a>
 800de48:	1c74      	adds	r4, r6, #1
 800de4a:	4622      	mov	r2, r4
 800de4c:	4616      	mov	r6, r2
 800de4e:	3201      	adds	r2, #1
 800de50:	7830      	ldrb	r0, [r6, #0]
 800de52:	f7ff ff9f 	bl	800dd94 <__hexdig_fun>
 800de56:	2800      	cmp	r0, #0
 800de58:	d1f8      	bne.n	800de4c <__gethex+0x8c>
 800de5a:	1ba4      	subs	r4, r4, r6
 800de5c:	00a7      	lsls	r7, r4, #2
 800de5e:	7833      	ldrb	r3, [r6, #0]
 800de60:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800de64:	2b50      	cmp	r3, #80	@ 0x50
 800de66:	d13e      	bne.n	800dee6 <__gethex+0x126>
 800de68:	7873      	ldrb	r3, [r6, #1]
 800de6a:	2b2b      	cmp	r3, #43	@ 0x2b
 800de6c:	d033      	beq.n	800ded6 <__gethex+0x116>
 800de6e:	2b2d      	cmp	r3, #45	@ 0x2d
 800de70:	d034      	beq.n	800dedc <__gethex+0x11c>
 800de72:	1c71      	adds	r1, r6, #1
 800de74:	2400      	movs	r4, #0
 800de76:	7808      	ldrb	r0, [r1, #0]
 800de78:	f7ff ff8c 	bl	800dd94 <__hexdig_fun>
 800de7c:	1e43      	subs	r3, r0, #1
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b18      	cmp	r3, #24
 800de82:	d830      	bhi.n	800dee6 <__gethex+0x126>
 800de84:	f1a0 0210 	sub.w	r2, r0, #16
 800de88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de8c:	f7ff ff82 	bl	800dd94 <__hexdig_fun>
 800de90:	f100 3cff 	add.w	ip, r0, #4294967295
 800de94:	fa5f fc8c 	uxtb.w	ip, ip
 800de98:	f1bc 0f18 	cmp.w	ip, #24
 800de9c:	f04f 030a 	mov.w	r3, #10
 800dea0:	d91e      	bls.n	800dee0 <__gethex+0x120>
 800dea2:	b104      	cbz	r4, 800dea6 <__gethex+0xe6>
 800dea4:	4252      	negs	r2, r2
 800dea6:	4417      	add	r7, r2
 800dea8:	f8ca 1000 	str.w	r1, [sl]
 800deac:	b1ed      	cbz	r5, 800deea <__gethex+0x12a>
 800deae:	f1bb 0f00 	cmp.w	fp, #0
 800deb2:	bf0c      	ite	eq
 800deb4:	2506      	moveq	r5, #6
 800deb6:	2500      	movne	r5, #0
 800deb8:	4628      	mov	r0, r5
 800deba:	b005      	add	sp, #20
 800debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec0:	2500      	movs	r5, #0
 800dec2:	462c      	mov	r4, r5
 800dec4:	e7b0      	b.n	800de28 <__gethex+0x68>
 800dec6:	2c00      	cmp	r4, #0
 800dec8:	d1c7      	bne.n	800de5a <__gethex+0x9a>
 800deca:	4627      	mov	r7, r4
 800decc:	e7c7      	b.n	800de5e <__gethex+0x9e>
 800dece:	464e      	mov	r6, r9
 800ded0:	462f      	mov	r7, r5
 800ded2:	2501      	movs	r5, #1
 800ded4:	e7c3      	b.n	800de5e <__gethex+0x9e>
 800ded6:	2400      	movs	r4, #0
 800ded8:	1cb1      	adds	r1, r6, #2
 800deda:	e7cc      	b.n	800de76 <__gethex+0xb6>
 800dedc:	2401      	movs	r4, #1
 800dede:	e7fb      	b.n	800ded8 <__gethex+0x118>
 800dee0:	fb03 0002 	mla	r0, r3, r2, r0
 800dee4:	e7ce      	b.n	800de84 <__gethex+0xc4>
 800dee6:	4631      	mov	r1, r6
 800dee8:	e7de      	b.n	800dea8 <__gethex+0xe8>
 800deea:	eba6 0309 	sub.w	r3, r6, r9
 800deee:	3b01      	subs	r3, #1
 800def0:	4629      	mov	r1, r5
 800def2:	2b07      	cmp	r3, #7
 800def4:	dc0a      	bgt.n	800df0c <__gethex+0x14c>
 800def6:	9801      	ldr	r0, [sp, #4]
 800def8:	f000 fafc 	bl	800e4f4 <_Balloc>
 800defc:	4604      	mov	r4, r0
 800defe:	b940      	cbnz	r0, 800df12 <__gethex+0x152>
 800df00:	4b5c      	ldr	r3, [pc, #368]	@ (800e074 <__gethex+0x2b4>)
 800df02:	4602      	mov	r2, r0
 800df04:	21e4      	movs	r1, #228	@ 0xe4
 800df06:	485c      	ldr	r0, [pc, #368]	@ (800e078 <__gethex+0x2b8>)
 800df08:	f7ff fe8a 	bl	800dc20 <__assert_func>
 800df0c:	3101      	adds	r1, #1
 800df0e:	105b      	asrs	r3, r3, #1
 800df10:	e7ef      	b.n	800def2 <__gethex+0x132>
 800df12:	f100 0a14 	add.w	sl, r0, #20
 800df16:	2300      	movs	r3, #0
 800df18:	4655      	mov	r5, sl
 800df1a:	469b      	mov	fp, r3
 800df1c:	45b1      	cmp	r9, r6
 800df1e:	d337      	bcc.n	800df90 <__gethex+0x1d0>
 800df20:	f845 bb04 	str.w	fp, [r5], #4
 800df24:	eba5 050a 	sub.w	r5, r5, sl
 800df28:	10ad      	asrs	r5, r5, #2
 800df2a:	6125      	str	r5, [r4, #16]
 800df2c:	4658      	mov	r0, fp
 800df2e:	f000 fbd3 	bl	800e6d8 <__hi0bits>
 800df32:	016d      	lsls	r5, r5, #5
 800df34:	f8d8 6000 	ldr.w	r6, [r8]
 800df38:	1a2d      	subs	r5, r5, r0
 800df3a:	42b5      	cmp	r5, r6
 800df3c:	dd54      	ble.n	800dfe8 <__gethex+0x228>
 800df3e:	1bad      	subs	r5, r5, r6
 800df40:	4629      	mov	r1, r5
 800df42:	4620      	mov	r0, r4
 800df44:	f000 ff64 	bl	800ee10 <__any_on>
 800df48:	4681      	mov	r9, r0
 800df4a:	b178      	cbz	r0, 800df6c <__gethex+0x1ac>
 800df4c:	1e6b      	subs	r3, r5, #1
 800df4e:	1159      	asrs	r1, r3, #5
 800df50:	f003 021f 	and.w	r2, r3, #31
 800df54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800df58:	f04f 0901 	mov.w	r9, #1
 800df5c:	fa09 f202 	lsl.w	r2, r9, r2
 800df60:	420a      	tst	r2, r1
 800df62:	d003      	beq.n	800df6c <__gethex+0x1ac>
 800df64:	454b      	cmp	r3, r9
 800df66:	dc36      	bgt.n	800dfd6 <__gethex+0x216>
 800df68:	f04f 0902 	mov.w	r9, #2
 800df6c:	4629      	mov	r1, r5
 800df6e:	4620      	mov	r0, r4
 800df70:	f7ff febe 	bl	800dcf0 <rshift>
 800df74:	442f      	add	r7, r5
 800df76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df7a:	42bb      	cmp	r3, r7
 800df7c:	da42      	bge.n	800e004 <__gethex+0x244>
 800df7e:	9801      	ldr	r0, [sp, #4]
 800df80:	4621      	mov	r1, r4
 800df82:	f000 faf7 	bl	800e574 <_Bfree>
 800df86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df88:	2300      	movs	r3, #0
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	25a3      	movs	r5, #163	@ 0xa3
 800df8e:	e793      	b.n	800deb8 <__gethex+0xf8>
 800df90:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800df94:	2a2e      	cmp	r2, #46	@ 0x2e
 800df96:	d012      	beq.n	800dfbe <__gethex+0x1fe>
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d104      	bne.n	800dfa6 <__gethex+0x1e6>
 800df9c:	f845 bb04 	str.w	fp, [r5], #4
 800dfa0:	f04f 0b00 	mov.w	fp, #0
 800dfa4:	465b      	mov	r3, fp
 800dfa6:	7830      	ldrb	r0, [r6, #0]
 800dfa8:	9303      	str	r3, [sp, #12]
 800dfaa:	f7ff fef3 	bl	800dd94 <__hexdig_fun>
 800dfae:	9b03      	ldr	r3, [sp, #12]
 800dfb0:	f000 000f 	and.w	r0, r0, #15
 800dfb4:	4098      	lsls	r0, r3
 800dfb6:	ea4b 0b00 	orr.w	fp, fp, r0
 800dfba:	3304      	adds	r3, #4
 800dfbc:	e7ae      	b.n	800df1c <__gethex+0x15c>
 800dfbe:	45b1      	cmp	r9, r6
 800dfc0:	d8ea      	bhi.n	800df98 <__gethex+0x1d8>
 800dfc2:	492b      	ldr	r1, [pc, #172]	@ (800e070 <__gethex+0x2b0>)
 800dfc4:	9303      	str	r3, [sp, #12]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f7ff fd1c 	bl	800da06 <strncmp>
 800dfce:	9b03      	ldr	r3, [sp, #12]
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d1e1      	bne.n	800df98 <__gethex+0x1d8>
 800dfd4:	e7a2      	b.n	800df1c <__gethex+0x15c>
 800dfd6:	1ea9      	subs	r1, r5, #2
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 ff19 	bl	800ee10 <__any_on>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0c2      	beq.n	800df68 <__gethex+0x1a8>
 800dfe2:	f04f 0903 	mov.w	r9, #3
 800dfe6:	e7c1      	b.n	800df6c <__gethex+0x1ac>
 800dfe8:	da09      	bge.n	800dffe <__gethex+0x23e>
 800dfea:	1b75      	subs	r5, r6, r5
 800dfec:	4621      	mov	r1, r4
 800dfee:	9801      	ldr	r0, [sp, #4]
 800dff0:	462a      	mov	r2, r5
 800dff2:	f000 fcd7 	bl	800e9a4 <__lshift>
 800dff6:	1b7f      	subs	r7, r7, r5
 800dff8:	4604      	mov	r4, r0
 800dffa:	f100 0a14 	add.w	sl, r0, #20
 800dffe:	f04f 0900 	mov.w	r9, #0
 800e002:	e7b8      	b.n	800df76 <__gethex+0x1b6>
 800e004:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e008:	42bd      	cmp	r5, r7
 800e00a:	dd6f      	ble.n	800e0ec <__gethex+0x32c>
 800e00c:	1bed      	subs	r5, r5, r7
 800e00e:	42ae      	cmp	r6, r5
 800e010:	dc34      	bgt.n	800e07c <__gethex+0x2bc>
 800e012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e016:	2b02      	cmp	r3, #2
 800e018:	d022      	beq.n	800e060 <__gethex+0x2a0>
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d024      	beq.n	800e068 <__gethex+0x2a8>
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d115      	bne.n	800e04e <__gethex+0x28e>
 800e022:	42ae      	cmp	r6, r5
 800e024:	d113      	bne.n	800e04e <__gethex+0x28e>
 800e026:	2e01      	cmp	r6, #1
 800e028:	d10b      	bne.n	800e042 <__gethex+0x282>
 800e02a:	9a02      	ldr	r2, [sp, #8]
 800e02c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e030:	6013      	str	r3, [r2, #0]
 800e032:	2301      	movs	r3, #1
 800e034:	6123      	str	r3, [r4, #16]
 800e036:	f8ca 3000 	str.w	r3, [sl]
 800e03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e03c:	2562      	movs	r5, #98	@ 0x62
 800e03e:	601c      	str	r4, [r3, #0]
 800e040:	e73a      	b.n	800deb8 <__gethex+0xf8>
 800e042:	1e71      	subs	r1, r6, #1
 800e044:	4620      	mov	r0, r4
 800e046:	f000 fee3 	bl	800ee10 <__any_on>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d1ed      	bne.n	800e02a <__gethex+0x26a>
 800e04e:	9801      	ldr	r0, [sp, #4]
 800e050:	4621      	mov	r1, r4
 800e052:	f000 fa8f 	bl	800e574 <_Bfree>
 800e056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e058:	2300      	movs	r3, #0
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	2550      	movs	r5, #80	@ 0x50
 800e05e:	e72b      	b.n	800deb8 <__gethex+0xf8>
 800e060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1f3      	bne.n	800e04e <__gethex+0x28e>
 800e066:	e7e0      	b.n	800e02a <__gethex+0x26a>
 800e068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1dd      	bne.n	800e02a <__gethex+0x26a>
 800e06e:	e7ee      	b.n	800e04e <__gethex+0x28e>
 800e070:	08010a38 	.word	0x08010a38
 800e074:	08010b4d 	.word	0x08010b4d
 800e078:	08010b5e 	.word	0x08010b5e
 800e07c:	1e6f      	subs	r7, r5, #1
 800e07e:	f1b9 0f00 	cmp.w	r9, #0
 800e082:	d130      	bne.n	800e0e6 <__gethex+0x326>
 800e084:	b127      	cbz	r7, 800e090 <__gethex+0x2d0>
 800e086:	4639      	mov	r1, r7
 800e088:	4620      	mov	r0, r4
 800e08a:	f000 fec1 	bl	800ee10 <__any_on>
 800e08e:	4681      	mov	r9, r0
 800e090:	117a      	asrs	r2, r7, #5
 800e092:	2301      	movs	r3, #1
 800e094:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e098:	f007 071f 	and.w	r7, r7, #31
 800e09c:	40bb      	lsls	r3, r7
 800e09e:	4213      	tst	r3, r2
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	bf18      	it	ne
 800e0a6:	f049 0902 	orrne.w	r9, r9, #2
 800e0aa:	f7ff fe21 	bl	800dcf0 <rshift>
 800e0ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e0b2:	1b76      	subs	r6, r6, r5
 800e0b4:	2502      	movs	r5, #2
 800e0b6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ba:	d047      	beq.n	800e14c <__gethex+0x38c>
 800e0bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d015      	beq.n	800e0f0 <__gethex+0x330>
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d017      	beq.n	800e0f8 <__gethex+0x338>
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d109      	bne.n	800e0e0 <__gethex+0x320>
 800e0cc:	f019 0f02 	tst.w	r9, #2
 800e0d0:	d006      	beq.n	800e0e0 <__gethex+0x320>
 800e0d2:	f8da 3000 	ldr.w	r3, [sl]
 800e0d6:	ea49 0903 	orr.w	r9, r9, r3
 800e0da:	f019 0f01 	tst.w	r9, #1
 800e0de:	d10e      	bne.n	800e0fe <__gethex+0x33e>
 800e0e0:	f045 0510 	orr.w	r5, r5, #16
 800e0e4:	e032      	b.n	800e14c <__gethex+0x38c>
 800e0e6:	f04f 0901 	mov.w	r9, #1
 800e0ea:	e7d1      	b.n	800e090 <__gethex+0x2d0>
 800e0ec:	2501      	movs	r5, #1
 800e0ee:	e7e2      	b.n	800e0b6 <__gethex+0x2f6>
 800e0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0f2:	f1c3 0301 	rsb	r3, r3, #1
 800e0f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0f0      	beq.n	800e0e0 <__gethex+0x320>
 800e0fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e102:	f104 0314 	add.w	r3, r4, #20
 800e106:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e10a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e10e:	f04f 0c00 	mov.w	ip, #0
 800e112:	4618      	mov	r0, r3
 800e114:	f853 2b04 	ldr.w	r2, [r3], #4
 800e118:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e11c:	d01b      	beq.n	800e156 <__gethex+0x396>
 800e11e:	3201      	adds	r2, #1
 800e120:	6002      	str	r2, [r0, #0]
 800e122:	2d02      	cmp	r5, #2
 800e124:	f104 0314 	add.w	r3, r4, #20
 800e128:	d13c      	bne.n	800e1a4 <__gethex+0x3e4>
 800e12a:	f8d8 2000 	ldr.w	r2, [r8]
 800e12e:	3a01      	subs	r2, #1
 800e130:	42b2      	cmp	r2, r6
 800e132:	d109      	bne.n	800e148 <__gethex+0x388>
 800e134:	1171      	asrs	r1, r6, #5
 800e136:	2201      	movs	r2, #1
 800e138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e13c:	f006 061f 	and.w	r6, r6, #31
 800e140:	fa02 f606 	lsl.w	r6, r2, r6
 800e144:	421e      	tst	r6, r3
 800e146:	d13a      	bne.n	800e1be <__gethex+0x3fe>
 800e148:	f045 0520 	orr.w	r5, r5, #32
 800e14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e14e:	601c      	str	r4, [r3, #0]
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	601f      	str	r7, [r3, #0]
 800e154:	e6b0      	b.n	800deb8 <__gethex+0xf8>
 800e156:	4299      	cmp	r1, r3
 800e158:	f843 cc04 	str.w	ip, [r3, #-4]
 800e15c:	d8d9      	bhi.n	800e112 <__gethex+0x352>
 800e15e:	68a3      	ldr	r3, [r4, #8]
 800e160:	459b      	cmp	fp, r3
 800e162:	db17      	blt.n	800e194 <__gethex+0x3d4>
 800e164:	6861      	ldr	r1, [r4, #4]
 800e166:	9801      	ldr	r0, [sp, #4]
 800e168:	3101      	adds	r1, #1
 800e16a:	f000 f9c3 	bl	800e4f4 <_Balloc>
 800e16e:	4681      	mov	r9, r0
 800e170:	b918      	cbnz	r0, 800e17a <__gethex+0x3ba>
 800e172:	4b1a      	ldr	r3, [pc, #104]	@ (800e1dc <__gethex+0x41c>)
 800e174:	4602      	mov	r2, r0
 800e176:	2184      	movs	r1, #132	@ 0x84
 800e178:	e6c5      	b.n	800df06 <__gethex+0x146>
 800e17a:	6922      	ldr	r2, [r4, #16]
 800e17c:	3202      	adds	r2, #2
 800e17e:	f104 010c 	add.w	r1, r4, #12
 800e182:	0092      	lsls	r2, r2, #2
 800e184:	300c      	adds	r0, #12
 800e186:	f7ff fd32 	bl	800dbee <memcpy>
 800e18a:	4621      	mov	r1, r4
 800e18c:	9801      	ldr	r0, [sp, #4]
 800e18e:	f000 f9f1 	bl	800e574 <_Bfree>
 800e192:	464c      	mov	r4, r9
 800e194:	6923      	ldr	r3, [r4, #16]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e19c:	6122      	str	r2, [r4, #16]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	615a      	str	r2, [r3, #20]
 800e1a2:	e7be      	b.n	800e122 <__gethex+0x362>
 800e1a4:	6922      	ldr	r2, [r4, #16]
 800e1a6:	455a      	cmp	r2, fp
 800e1a8:	dd0b      	ble.n	800e1c2 <__gethex+0x402>
 800e1aa:	2101      	movs	r1, #1
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f7ff fd9f 	bl	800dcf0 <rshift>
 800e1b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1b6:	3701      	adds	r7, #1
 800e1b8:	42bb      	cmp	r3, r7
 800e1ba:	f6ff aee0 	blt.w	800df7e <__gethex+0x1be>
 800e1be:	2501      	movs	r5, #1
 800e1c0:	e7c2      	b.n	800e148 <__gethex+0x388>
 800e1c2:	f016 061f 	ands.w	r6, r6, #31
 800e1c6:	d0fa      	beq.n	800e1be <__gethex+0x3fe>
 800e1c8:	4453      	add	r3, sl
 800e1ca:	f1c6 0620 	rsb	r6, r6, #32
 800e1ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e1d2:	f000 fa81 	bl	800e6d8 <__hi0bits>
 800e1d6:	42b0      	cmp	r0, r6
 800e1d8:	dbe7      	blt.n	800e1aa <__gethex+0x3ea>
 800e1da:	e7f0      	b.n	800e1be <__gethex+0x3fe>
 800e1dc:	08010b4d 	.word	0x08010b4d

0800e1e0 <L_shift>:
 800e1e0:	f1c2 0208 	rsb	r2, r2, #8
 800e1e4:	0092      	lsls	r2, r2, #2
 800e1e6:	b570      	push	{r4, r5, r6, lr}
 800e1e8:	f1c2 0620 	rsb	r6, r2, #32
 800e1ec:	6843      	ldr	r3, [r0, #4]
 800e1ee:	6804      	ldr	r4, [r0, #0]
 800e1f0:	fa03 f506 	lsl.w	r5, r3, r6
 800e1f4:	432c      	orrs	r4, r5
 800e1f6:	40d3      	lsrs	r3, r2
 800e1f8:	6004      	str	r4, [r0, #0]
 800e1fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1fe:	4288      	cmp	r0, r1
 800e200:	d3f4      	bcc.n	800e1ec <L_shift+0xc>
 800e202:	bd70      	pop	{r4, r5, r6, pc}

0800e204 <__match>:
 800e204:	b530      	push	{r4, r5, lr}
 800e206:	6803      	ldr	r3, [r0, #0]
 800e208:	3301      	adds	r3, #1
 800e20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e20e:	b914      	cbnz	r4, 800e216 <__match+0x12>
 800e210:	6003      	str	r3, [r0, #0]
 800e212:	2001      	movs	r0, #1
 800e214:	bd30      	pop	{r4, r5, pc}
 800e216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e21a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e21e:	2d19      	cmp	r5, #25
 800e220:	bf98      	it	ls
 800e222:	3220      	addls	r2, #32
 800e224:	42a2      	cmp	r2, r4
 800e226:	d0f0      	beq.n	800e20a <__match+0x6>
 800e228:	2000      	movs	r0, #0
 800e22a:	e7f3      	b.n	800e214 <__match+0x10>

0800e22c <__hexnan>:
 800e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e230:	680b      	ldr	r3, [r1, #0]
 800e232:	6801      	ldr	r1, [r0, #0]
 800e234:	115e      	asrs	r6, r3, #5
 800e236:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e23a:	f013 031f 	ands.w	r3, r3, #31
 800e23e:	b087      	sub	sp, #28
 800e240:	bf18      	it	ne
 800e242:	3604      	addne	r6, #4
 800e244:	2500      	movs	r5, #0
 800e246:	1f37      	subs	r7, r6, #4
 800e248:	4682      	mov	sl, r0
 800e24a:	4690      	mov	r8, r2
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e252:	46b9      	mov	r9, r7
 800e254:	463c      	mov	r4, r7
 800e256:	9502      	str	r5, [sp, #8]
 800e258:	46ab      	mov	fp, r5
 800e25a:	784a      	ldrb	r2, [r1, #1]
 800e25c:	1c4b      	adds	r3, r1, #1
 800e25e:	9303      	str	r3, [sp, #12]
 800e260:	b342      	cbz	r2, 800e2b4 <__hexnan+0x88>
 800e262:	4610      	mov	r0, r2
 800e264:	9105      	str	r1, [sp, #20]
 800e266:	9204      	str	r2, [sp, #16]
 800e268:	f7ff fd94 	bl	800dd94 <__hexdig_fun>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d151      	bne.n	800e314 <__hexnan+0xe8>
 800e270:	9a04      	ldr	r2, [sp, #16]
 800e272:	9905      	ldr	r1, [sp, #20]
 800e274:	2a20      	cmp	r2, #32
 800e276:	d818      	bhi.n	800e2aa <__hexnan+0x7e>
 800e278:	9b02      	ldr	r3, [sp, #8]
 800e27a:	459b      	cmp	fp, r3
 800e27c:	dd13      	ble.n	800e2a6 <__hexnan+0x7a>
 800e27e:	454c      	cmp	r4, r9
 800e280:	d206      	bcs.n	800e290 <__hexnan+0x64>
 800e282:	2d07      	cmp	r5, #7
 800e284:	dc04      	bgt.n	800e290 <__hexnan+0x64>
 800e286:	462a      	mov	r2, r5
 800e288:	4649      	mov	r1, r9
 800e28a:	4620      	mov	r0, r4
 800e28c:	f7ff ffa8 	bl	800e1e0 <L_shift>
 800e290:	4544      	cmp	r4, r8
 800e292:	d952      	bls.n	800e33a <__hexnan+0x10e>
 800e294:	2300      	movs	r3, #0
 800e296:	f1a4 0904 	sub.w	r9, r4, #4
 800e29a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e29e:	f8cd b008 	str.w	fp, [sp, #8]
 800e2a2:	464c      	mov	r4, r9
 800e2a4:	461d      	mov	r5, r3
 800e2a6:	9903      	ldr	r1, [sp, #12]
 800e2a8:	e7d7      	b.n	800e25a <__hexnan+0x2e>
 800e2aa:	2a29      	cmp	r2, #41	@ 0x29
 800e2ac:	d157      	bne.n	800e35e <__hexnan+0x132>
 800e2ae:	3102      	adds	r1, #2
 800e2b0:	f8ca 1000 	str.w	r1, [sl]
 800e2b4:	f1bb 0f00 	cmp.w	fp, #0
 800e2b8:	d051      	beq.n	800e35e <__hexnan+0x132>
 800e2ba:	454c      	cmp	r4, r9
 800e2bc:	d206      	bcs.n	800e2cc <__hexnan+0xa0>
 800e2be:	2d07      	cmp	r5, #7
 800e2c0:	dc04      	bgt.n	800e2cc <__hexnan+0xa0>
 800e2c2:	462a      	mov	r2, r5
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f7ff ff8a 	bl	800e1e0 <L_shift>
 800e2cc:	4544      	cmp	r4, r8
 800e2ce:	d936      	bls.n	800e33e <__hexnan+0x112>
 800e2d0:	f1a8 0204 	sub.w	r2, r8, #4
 800e2d4:	4623      	mov	r3, r4
 800e2d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2da:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2de:	429f      	cmp	r7, r3
 800e2e0:	d2f9      	bcs.n	800e2d6 <__hexnan+0xaa>
 800e2e2:	1b3b      	subs	r3, r7, r4
 800e2e4:	f023 0303 	bic.w	r3, r3, #3
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	3401      	adds	r4, #1
 800e2ec:	3e03      	subs	r6, #3
 800e2ee:	42b4      	cmp	r4, r6
 800e2f0:	bf88      	it	hi
 800e2f2:	2304      	movhi	r3, #4
 800e2f4:	4443      	add	r3, r8
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f843 2b04 	str.w	r2, [r3], #4
 800e2fc:	429f      	cmp	r7, r3
 800e2fe:	d2fb      	bcs.n	800e2f8 <__hexnan+0xcc>
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	b91b      	cbnz	r3, 800e30c <__hexnan+0xe0>
 800e304:	4547      	cmp	r7, r8
 800e306:	d128      	bne.n	800e35a <__hexnan+0x12e>
 800e308:	2301      	movs	r3, #1
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	2005      	movs	r0, #5
 800e30e:	b007      	add	sp, #28
 800e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e314:	3501      	adds	r5, #1
 800e316:	2d08      	cmp	r5, #8
 800e318:	f10b 0b01 	add.w	fp, fp, #1
 800e31c:	dd06      	ble.n	800e32c <__hexnan+0x100>
 800e31e:	4544      	cmp	r4, r8
 800e320:	d9c1      	bls.n	800e2a6 <__hexnan+0x7a>
 800e322:	2300      	movs	r3, #0
 800e324:	f844 3c04 	str.w	r3, [r4, #-4]
 800e328:	2501      	movs	r5, #1
 800e32a:	3c04      	subs	r4, #4
 800e32c:	6822      	ldr	r2, [r4, #0]
 800e32e:	f000 000f 	and.w	r0, r0, #15
 800e332:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e336:	6020      	str	r0, [r4, #0]
 800e338:	e7b5      	b.n	800e2a6 <__hexnan+0x7a>
 800e33a:	2508      	movs	r5, #8
 800e33c:	e7b3      	b.n	800e2a6 <__hexnan+0x7a>
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d0dd      	beq.n	800e300 <__hexnan+0xd4>
 800e344:	f1c3 0320 	rsb	r3, r3, #32
 800e348:	f04f 32ff 	mov.w	r2, #4294967295
 800e34c:	40da      	lsrs	r2, r3
 800e34e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e352:	4013      	ands	r3, r2
 800e354:	f846 3c04 	str.w	r3, [r6, #-4]
 800e358:	e7d2      	b.n	800e300 <__hexnan+0xd4>
 800e35a:	3f04      	subs	r7, #4
 800e35c:	e7d0      	b.n	800e300 <__hexnan+0xd4>
 800e35e:	2004      	movs	r0, #4
 800e360:	e7d5      	b.n	800e30e <__hexnan+0xe2>
	...

0800e364 <malloc>:
 800e364:	4b02      	ldr	r3, [pc, #8]	@ (800e370 <malloc+0xc>)
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f000 b825 	b.w	800e3b8 <_malloc_r>
 800e36e:	bf00      	nop
 800e370:	240001b0 	.word	0x240001b0

0800e374 <sbrk_aligned>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	4e0f      	ldr	r6, [pc, #60]	@ (800e3b4 <sbrk_aligned+0x40>)
 800e378:	460c      	mov	r4, r1
 800e37a:	6831      	ldr	r1, [r6, #0]
 800e37c:	4605      	mov	r5, r0
 800e37e:	b911      	cbnz	r1, 800e386 <sbrk_aligned+0x12>
 800e380:	f001 f932 	bl	800f5e8 <_sbrk_r>
 800e384:	6030      	str	r0, [r6, #0]
 800e386:	4621      	mov	r1, r4
 800e388:	4628      	mov	r0, r5
 800e38a:	f001 f92d 	bl	800f5e8 <_sbrk_r>
 800e38e:	1c43      	adds	r3, r0, #1
 800e390:	d103      	bne.n	800e39a <sbrk_aligned+0x26>
 800e392:	f04f 34ff 	mov.w	r4, #4294967295
 800e396:	4620      	mov	r0, r4
 800e398:	bd70      	pop	{r4, r5, r6, pc}
 800e39a:	1cc4      	adds	r4, r0, #3
 800e39c:	f024 0403 	bic.w	r4, r4, #3
 800e3a0:	42a0      	cmp	r0, r4
 800e3a2:	d0f8      	beq.n	800e396 <sbrk_aligned+0x22>
 800e3a4:	1a21      	subs	r1, r4, r0
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f001 f91e 	bl	800f5e8 <_sbrk_r>
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	d1f2      	bne.n	800e396 <sbrk_aligned+0x22>
 800e3b0:	e7ef      	b.n	800e392 <sbrk_aligned+0x1e>
 800e3b2:	bf00      	nop
 800e3b4:	2400074c 	.word	0x2400074c

0800e3b8 <_malloc_r>:
 800e3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	1ccd      	adds	r5, r1, #3
 800e3be:	f025 0503 	bic.w	r5, r5, #3
 800e3c2:	3508      	adds	r5, #8
 800e3c4:	2d0c      	cmp	r5, #12
 800e3c6:	bf38      	it	cc
 800e3c8:	250c      	movcc	r5, #12
 800e3ca:	2d00      	cmp	r5, #0
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	db01      	blt.n	800e3d4 <_malloc_r+0x1c>
 800e3d0:	42a9      	cmp	r1, r5
 800e3d2:	d904      	bls.n	800e3de <_malloc_r+0x26>
 800e3d4:	230c      	movs	r3, #12
 800e3d6:	6033      	str	r3, [r6, #0]
 800e3d8:	2000      	movs	r0, #0
 800e3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4b4 <_malloc_r+0xfc>
 800e3e2:	f000 f87b 	bl	800e4dc <__malloc_lock>
 800e3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800e3ea:	461c      	mov	r4, r3
 800e3ec:	bb44      	cbnz	r4, 800e440 <_malloc_r+0x88>
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ffbf 	bl	800e374 <sbrk_aligned>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	d158      	bne.n	800e4ae <_malloc_r+0xf6>
 800e3fc:	f8d8 4000 	ldr.w	r4, [r8]
 800e400:	4627      	mov	r7, r4
 800e402:	2f00      	cmp	r7, #0
 800e404:	d143      	bne.n	800e48e <_malloc_r+0xd6>
 800e406:	2c00      	cmp	r4, #0
 800e408:	d04b      	beq.n	800e4a2 <_malloc_r+0xea>
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	4639      	mov	r1, r7
 800e40e:	4630      	mov	r0, r6
 800e410:	eb04 0903 	add.w	r9, r4, r3
 800e414:	f001 f8e8 	bl	800f5e8 <_sbrk_r>
 800e418:	4581      	cmp	r9, r0
 800e41a:	d142      	bne.n	800e4a2 <_malloc_r+0xea>
 800e41c:	6821      	ldr	r1, [r4, #0]
 800e41e:	1a6d      	subs	r5, r5, r1
 800e420:	4629      	mov	r1, r5
 800e422:	4630      	mov	r0, r6
 800e424:	f7ff ffa6 	bl	800e374 <sbrk_aligned>
 800e428:	3001      	adds	r0, #1
 800e42a:	d03a      	beq.n	800e4a2 <_malloc_r+0xea>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	442b      	add	r3, r5
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	f8d8 3000 	ldr.w	r3, [r8]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	bb62      	cbnz	r2, 800e494 <_malloc_r+0xdc>
 800e43a:	f8c8 7000 	str.w	r7, [r8]
 800e43e:	e00f      	b.n	800e460 <_malloc_r+0xa8>
 800e440:	6822      	ldr	r2, [r4, #0]
 800e442:	1b52      	subs	r2, r2, r5
 800e444:	d420      	bmi.n	800e488 <_malloc_r+0xd0>
 800e446:	2a0b      	cmp	r2, #11
 800e448:	d917      	bls.n	800e47a <_malloc_r+0xc2>
 800e44a:	1961      	adds	r1, r4, r5
 800e44c:	42a3      	cmp	r3, r4
 800e44e:	6025      	str	r5, [r4, #0]
 800e450:	bf18      	it	ne
 800e452:	6059      	strne	r1, [r3, #4]
 800e454:	6863      	ldr	r3, [r4, #4]
 800e456:	bf08      	it	eq
 800e458:	f8c8 1000 	streq.w	r1, [r8]
 800e45c:	5162      	str	r2, [r4, r5]
 800e45e:	604b      	str	r3, [r1, #4]
 800e460:	4630      	mov	r0, r6
 800e462:	f000 f841 	bl	800e4e8 <__malloc_unlock>
 800e466:	f104 000b 	add.w	r0, r4, #11
 800e46a:	1d23      	adds	r3, r4, #4
 800e46c:	f020 0007 	bic.w	r0, r0, #7
 800e470:	1ac2      	subs	r2, r0, r3
 800e472:	bf1c      	itt	ne
 800e474:	1a1b      	subne	r3, r3, r0
 800e476:	50a3      	strne	r3, [r4, r2]
 800e478:	e7af      	b.n	800e3da <_malloc_r+0x22>
 800e47a:	6862      	ldr	r2, [r4, #4]
 800e47c:	42a3      	cmp	r3, r4
 800e47e:	bf0c      	ite	eq
 800e480:	f8c8 2000 	streq.w	r2, [r8]
 800e484:	605a      	strne	r2, [r3, #4]
 800e486:	e7eb      	b.n	800e460 <_malloc_r+0xa8>
 800e488:	4623      	mov	r3, r4
 800e48a:	6864      	ldr	r4, [r4, #4]
 800e48c:	e7ae      	b.n	800e3ec <_malloc_r+0x34>
 800e48e:	463c      	mov	r4, r7
 800e490:	687f      	ldr	r7, [r7, #4]
 800e492:	e7b6      	b.n	800e402 <_malloc_r+0x4a>
 800e494:	461a      	mov	r2, r3
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	42a3      	cmp	r3, r4
 800e49a:	d1fb      	bne.n	800e494 <_malloc_r+0xdc>
 800e49c:	2300      	movs	r3, #0
 800e49e:	6053      	str	r3, [r2, #4]
 800e4a0:	e7de      	b.n	800e460 <_malloc_r+0xa8>
 800e4a2:	230c      	movs	r3, #12
 800e4a4:	6033      	str	r3, [r6, #0]
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f000 f81e 	bl	800e4e8 <__malloc_unlock>
 800e4ac:	e794      	b.n	800e3d8 <_malloc_r+0x20>
 800e4ae:	6005      	str	r5, [r0, #0]
 800e4b0:	e7d6      	b.n	800e460 <_malloc_r+0xa8>
 800e4b2:	bf00      	nop
 800e4b4:	24000750 	.word	0x24000750

0800e4b8 <__ascii_mbtowc>:
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	b901      	cbnz	r1, 800e4be <__ascii_mbtowc+0x6>
 800e4bc:	a901      	add	r1, sp, #4
 800e4be:	b142      	cbz	r2, 800e4d2 <__ascii_mbtowc+0x1a>
 800e4c0:	b14b      	cbz	r3, 800e4d6 <__ascii_mbtowc+0x1e>
 800e4c2:	7813      	ldrb	r3, [r2, #0]
 800e4c4:	600b      	str	r3, [r1, #0]
 800e4c6:	7812      	ldrb	r2, [r2, #0]
 800e4c8:	1e10      	subs	r0, r2, #0
 800e4ca:	bf18      	it	ne
 800e4cc:	2001      	movne	r0, #1
 800e4ce:	b002      	add	sp, #8
 800e4d0:	4770      	bx	lr
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	e7fb      	b.n	800e4ce <__ascii_mbtowc+0x16>
 800e4d6:	f06f 0001 	mvn.w	r0, #1
 800e4da:	e7f8      	b.n	800e4ce <__ascii_mbtowc+0x16>

0800e4dc <__malloc_lock>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	@ (800e4e4 <__malloc_lock+0x8>)
 800e4de:	f7ff bb84 	b.w	800dbea <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	24000748 	.word	0x24000748

0800e4e8 <__malloc_unlock>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	@ (800e4f0 <__malloc_unlock+0x8>)
 800e4ea:	f7ff bb7f 	b.w	800dbec <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	24000748 	.word	0x24000748

0800e4f4 <_Balloc>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	69c6      	ldr	r6, [r0, #28]
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	b976      	cbnz	r6, 800e51c <_Balloc+0x28>
 800e4fe:	2010      	movs	r0, #16
 800e500:	f7ff ff30 	bl	800e364 <malloc>
 800e504:	4602      	mov	r2, r0
 800e506:	61e0      	str	r0, [r4, #28]
 800e508:	b920      	cbnz	r0, 800e514 <_Balloc+0x20>
 800e50a:	4b18      	ldr	r3, [pc, #96]	@ (800e56c <_Balloc+0x78>)
 800e50c:	4818      	ldr	r0, [pc, #96]	@ (800e570 <_Balloc+0x7c>)
 800e50e:	216b      	movs	r1, #107	@ 0x6b
 800e510:	f7ff fb86 	bl	800dc20 <__assert_func>
 800e514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e518:	6006      	str	r6, [r0, #0]
 800e51a:	60c6      	str	r6, [r0, #12]
 800e51c:	69e6      	ldr	r6, [r4, #28]
 800e51e:	68f3      	ldr	r3, [r6, #12]
 800e520:	b183      	cbz	r3, 800e544 <_Balloc+0x50>
 800e522:	69e3      	ldr	r3, [r4, #28]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e52a:	b9b8      	cbnz	r0, 800e55c <_Balloc+0x68>
 800e52c:	2101      	movs	r1, #1
 800e52e:	fa01 f605 	lsl.w	r6, r1, r5
 800e532:	1d72      	adds	r2, r6, #5
 800e534:	0092      	lsls	r2, r2, #2
 800e536:	4620      	mov	r0, r4
 800e538:	f001 f86d 	bl	800f616 <_calloc_r>
 800e53c:	b160      	cbz	r0, 800e558 <_Balloc+0x64>
 800e53e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e542:	e00e      	b.n	800e562 <_Balloc+0x6e>
 800e544:	2221      	movs	r2, #33	@ 0x21
 800e546:	2104      	movs	r1, #4
 800e548:	4620      	mov	r0, r4
 800e54a:	f001 f864 	bl	800f616 <_calloc_r>
 800e54e:	69e3      	ldr	r3, [r4, #28]
 800e550:	60f0      	str	r0, [r6, #12]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e4      	bne.n	800e522 <_Balloc+0x2e>
 800e558:	2000      	movs	r0, #0
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	6802      	ldr	r2, [r0, #0]
 800e55e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e562:	2300      	movs	r3, #0
 800e564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e568:	e7f7      	b.n	800e55a <_Balloc+0x66>
 800e56a:	bf00      	nop
 800e56c:	08010a98 	.word	0x08010a98
 800e570:	08010bbe 	.word	0x08010bbe

0800e574 <_Bfree>:
 800e574:	b570      	push	{r4, r5, r6, lr}
 800e576:	69c6      	ldr	r6, [r0, #28]
 800e578:	4605      	mov	r5, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	b976      	cbnz	r6, 800e59c <_Bfree+0x28>
 800e57e:	2010      	movs	r0, #16
 800e580:	f7ff fef0 	bl	800e364 <malloc>
 800e584:	4602      	mov	r2, r0
 800e586:	61e8      	str	r0, [r5, #28]
 800e588:	b920      	cbnz	r0, 800e594 <_Bfree+0x20>
 800e58a:	4b09      	ldr	r3, [pc, #36]	@ (800e5b0 <_Bfree+0x3c>)
 800e58c:	4809      	ldr	r0, [pc, #36]	@ (800e5b4 <_Bfree+0x40>)
 800e58e:	218f      	movs	r1, #143	@ 0x8f
 800e590:	f7ff fb46 	bl	800dc20 <__assert_func>
 800e594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e598:	6006      	str	r6, [r0, #0]
 800e59a:	60c6      	str	r6, [r0, #12]
 800e59c:	b13c      	cbz	r4, 800e5ae <_Bfree+0x3a>
 800e59e:	69eb      	ldr	r3, [r5, #28]
 800e5a0:	6862      	ldr	r2, [r4, #4]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5a8:	6021      	str	r1, [r4, #0]
 800e5aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ae:	bd70      	pop	{r4, r5, r6, pc}
 800e5b0:	08010a98 	.word	0x08010a98
 800e5b4:	08010bbe 	.word	0x08010bbe

0800e5b8 <__multadd>:
 800e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5bc:	690d      	ldr	r5, [r1, #16]
 800e5be:	4607      	mov	r7, r0
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	461e      	mov	r6, r3
 800e5c4:	f101 0c14 	add.w	ip, r1, #20
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e5ce:	b299      	uxth	r1, r3
 800e5d0:	fb02 6101 	mla	r1, r2, r1, r6
 800e5d4:	0c1e      	lsrs	r6, r3, #16
 800e5d6:	0c0b      	lsrs	r3, r1, #16
 800e5d8:	fb02 3306 	mla	r3, r2, r6, r3
 800e5dc:	b289      	uxth	r1, r1
 800e5de:	3001      	adds	r0, #1
 800e5e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5e4:	4285      	cmp	r5, r0
 800e5e6:	f84c 1b04 	str.w	r1, [ip], #4
 800e5ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5ee:	dcec      	bgt.n	800e5ca <__multadd+0x12>
 800e5f0:	b30e      	cbz	r6, 800e636 <__multadd+0x7e>
 800e5f2:	68a3      	ldr	r3, [r4, #8]
 800e5f4:	42ab      	cmp	r3, r5
 800e5f6:	dc19      	bgt.n	800e62c <__multadd+0x74>
 800e5f8:	6861      	ldr	r1, [r4, #4]
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	3101      	adds	r1, #1
 800e5fe:	f7ff ff79 	bl	800e4f4 <_Balloc>
 800e602:	4680      	mov	r8, r0
 800e604:	b928      	cbnz	r0, 800e612 <__multadd+0x5a>
 800e606:	4602      	mov	r2, r0
 800e608:	4b0c      	ldr	r3, [pc, #48]	@ (800e63c <__multadd+0x84>)
 800e60a:	480d      	ldr	r0, [pc, #52]	@ (800e640 <__multadd+0x88>)
 800e60c:	21ba      	movs	r1, #186	@ 0xba
 800e60e:	f7ff fb07 	bl	800dc20 <__assert_func>
 800e612:	6922      	ldr	r2, [r4, #16]
 800e614:	3202      	adds	r2, #2
 800e616:	f104 010c 	add.w	r1, r4, #12
 800e61a:	0092      	lsls	r2, r2, #2
 800e61c:	300c      	adds	r0, #12
 800e61e:	f7ff fae6 	bl	800dbee <memcpy>
 800e622:	4621      	mov	r1, r4
 800e624:	4638      	mov	r0, r7
 800e626:	f7ff ffa5 	bl	800e574 <_Bfree>
 800e62a:	4644      	mov	r4, r8
 800e62c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e630:	3501      	adds	r5, #1
 800e632:	615e      	str	r6, [r3, #20]
 800e634:	6125      	str	r5, [r4, #16]
 800e636:	4620      	mov	r0, r4
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63c:	08010b4d 	.word	0x08010b4d
 800e640:	08010bbe 	.word	0x08010bbe

0800e644 <__s2b>:
 800e644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e648:	460c      	mov	r4, r1
 800e64a:	4615      	mov	r5, r2
 800e64c:	461f      	mov	r7, r3
 800e64e:	2209      	movs	r2, #9
 800e650:	3308      	adds	r3, #8
 800e652:	4606      	mov	r6, r0
 800e654:	fb93 f3f2 	sdiv	r3, r3, r2
 800e658:	2100      	movs	r1, #0
 800e65a:	2201      	movs	r2, #1
 800e65c:	429a      	cmp	r2, r3
 800e65e:	db09      	blt.n	800e674 <__s2b+0x30>
 800e660:	4630      	mov	r0, r6
 800e662:	f7ff ff47 	bl	800e4f4 <_Balloc>
 800e666:	b940      	cbnz	r0, 800e67a <__s2b+0x36>
 800e668:	4602      	mov	r2, r0
 800e66a:	4b19      	ldr	r3, [pc, #100]	@ (800e6d0 <__s2b+0x8c>)
 800e66c:	4819      	ldr	r0, [pc, #100]	@ (800e6d4 <__s2b+0x90>)
 800e66e:	21d3      	movs	r1, #211	@ 0xd3
 800e670:	f7ff fad6 	bl	800dc20 <__assert_func>
 800e674:	0052      	lsls	r2, r2, #1
 800e676:	3101      	adds	r1, #1
 800e678:	e7f0      	b.n	800e65c <__s2b+0x18>
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	6143      	str	r3, [r0, #20]
 800e67e:	2d09      	cmp	r5, #9
 800e680:	f04f 0301 	mov.w	r3, #1
 800e684:	6103      	str	r3, [r0, #16]
 800e686:	dd16      	ble.n	800e6b6 <__s2b+0x72>
 800e688:	f104 0909 	add.w	r9, r4, #9
 800e68c:	46c8      	mov	r8, r9
 800e68e:	442c      	add	r4, r5
 800e690:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e694:	4601      	mov	r1, r0
 800e696:	3b30      	subs	r3, #48	@ 0x30
 800e698:	220a      	movs	r2, #10
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7ff ff8c 	bl	800e5b8 <__multadd>
 800e6a0:	45a0      	cmp	r8, r4
 800e6a2:	d1f5      	bne.n	800e690 <__s2b+0x4c>
 800e6a4:	f1a5 0408 	sub.w	r4, r5, #8
 800e6a8:	444c      	add	r4, r9
 800e6aa:	1b2d      	subs	r5, r5, r4
 800e6ac:	1963      	adds	r3, r4, r5
 800e6ae:	42bb      	cmp	r3, r7
 800e6b0:	db04      	blt.n	800e6bc <__s2b+0x78>
 800e6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b6:	340a      	adds	r4, #10
 800e6b8:	2509      	movs	r5, #9
 800e6ba:	e7f6      	b.n	800e6aa <__s2b+0x66>
 800e6bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6c0:	4601      	mov	r1, r0
 800e6c2:	3b30      	subs	r3, #48	@ 0x30
 800e6c4:	220a      	movs	r2, #10
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f7ff ff76 	bl	800e5b8 <__multadd>
 800e6cc:	e7ee      	b.n	800e6ac <__s2b+0x68>
 800e6ce:	bf00      	nop
 800e6d0:	08010b4d 	.word	0x08010b4d
 800e6d4:	08010bbe 	.word	0x08010bbe

0800e6d8 <__hi0bits>:
 800e6d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e6dc:	4603      	mov	r3, r0
 800e6de:	bf36      	itet	cc
 800e6e0:	0403      	lslcc	r3, r0, #16
 800e6e2:	2000      	movcs	r0, #0
 800e6e4:	2010      	movcc	r0, #16
 800e6e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e6ea:	bf3c      	itt	cc
 800e6ec:	021b      	lslcc	r3, r3, #8
 800e6ee:	3008      	addcc	r0, #8
 800e6f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e6f4:	bf3c      	itt	cc
 800e6f6:	011b      	lslcc	r3, r3, #4
 800e6f8:	3004      	addcc	r0, #4
 800e6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6fe:	bf3c      	itt	cc
 800e700:	009b      	lslcc	r3, r3, #2
 800e702:	3002      	addcc	r0, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	db05      	blt.n	800e714 <__hi0bits+0x3c>
 800e708:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e70c:	f100 0001 	add.w	r0, r0, #1
 800e710:	bf08      	it	eq
 800e712:	2020      	moveq	r0, #32
 800e714:	4770      	bx	lr

0800e716 <__lo0bits>:
 800e716:	6803      	ldr	r3, [r0, #0]
 800e718:	4602      	mov	r2, r0
 800e71a:	f013 0007 	ands.w	r0, r3, #7
 800e71e:	d00b      	beq.n	800e738 <__lo0bits+0x22>
 800e720:	07d9      	lsls	r1, r3, #31
 800e722:	d421      	bmi.n	800e768 <__lo0bits+0x52>
 800e724:	0798      	lsls	r0, r3, #30
 800e726:	bf49      	itett	mi
 800e728:	085b      	lsrmi	r3, r3, #1
 800e72a:	089b      	lsrpl	r3, r3, #2
 800e72c:	2001      	movmi	r0, #1
 800e72e:	6013      	strmi	r3, [r2, #0]
 800e730:	bf5c      	itt	pl
 800e732:	6013      	strpl	r3, [r2, #0]
 800e734:	2002      	movpl	r0, #2
 800e736:	4770      	bx	lr
 800e738:	b299      	uxth	r1, r3
 800e73a:	b909      	cbnz	r1, 800e740 <__lo0bits+0x2a>
 800e73c:	0c1b      	lsrs	r3, r3, #16
 800e73e:	2010      	movs	r0, #16
 800e740:	b2d9      	uxtb	r1, r3
 800e742:	b909      	cbnz	r1, 800e748 <__lo0bits+0x32>
 800e744:	3008      	adds	r0, #8
 800e746:	0a1b      	lsrs	r3, r3, #8
 800e748:	0719      	lsls	r1, r3, #28
 800e74a:	bf04      	itt	eq
 800e74c:	091b      	lsreq	r3, r3, #4
 800e74e:	3004      	addeq	r0, #4
 800e750:	0799      	lsls	r1, r3, #30
 800e752:	bf04      	itt	eq
 800e754:	089b      	lsreq	r3, r3, #2
 800e756:	3002      	addeq	r0, #2
 800e758:	07d9      	lsls	r1, r3, #31
 800e75a:	d403      	bmi.n	800e764 <__lo0bits+0x4e>
 800e75c:	085b      	lsrs	r3, r3, #1
 800e75e:	f100 0001 	add.w	r0, r0, #1
 800e762:	d003      	beq.n	800e76c <__lo0bits+0x56>
 800e764:	6013      	str	r3, [r2, #0]
 800e766:	4770      	bx	lr
 800e768:	2000      	movs	r0, #0
 800e76a:	4770      	bx	lr
 800e76c:	2020      	movs	r0, #32
 800e76e:	4770      	bx	lr

0800e770 <__i2b>:
 800e770:	b510      	push	{r4, lr}
 800e772:	460c      	mov	r4, r1
 800e774:	2101      	movs	r1, #1
 800e776:	f7ff febd 	bl	800e4f4 <_Balloc>
 800e77a:	4602      	mov	r2, r0
 800e77c:	b928      	cbnz	r0, 800e78a <__i2b+0x1a>
 800e77e:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <__i2b+0x24>)
 800e780:	4805      	ldr	r0, [pc, #20]	@ (800e798 <__i2b+0x28>)
 800e782:	f240 1145 	movw	r1, #325	@ 0x145
 800e786:	f7ff fa4b 	bl	800dc20 <__assert_func>
 800e78a:	2301      	movs	r3, #1
 800e78c:	6144      	str	r4, [r0, #20]
 800e78e:	6103      	str	r3, [r0, #16]
 800e790:	bd10      	pop	{r4, pc}
 800e792:	bf00      	nop
 800e794:	08010b4d 	.word	0x08010b4d
 800e798:	08010bbe 	.word	0x08010bbe

0800e79c <__multiply>:
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	4614      	mov	r4, r2
 800e7a2:	690a      	ldr	r2, [r1, #16]
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	bfa8      	it	ge
 800e7aa:	4623      	movge	r3, r4
 800e7ac:	460f      	mov	r7, r1
 800e7ae:	bfa4      	itt	ge
 800e7b0:	460c      	movge	r4, r1
 800e7b2:	461f      	movge	r7, r3
 800e7b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e7b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e7bc:	68a3      	ldr	r3, [r4, #8]
 800e7be:	6861      	ldr	r1, [r4, #4]
 800e7c0:	eb0a 0609 	add.w	r6, sl, r9
 800e7c4:	42b3      	cmp	r3, r6
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	bfb8      	it	lt
 800e7ca:	3101      	addlt	r1, #1
 800e7cc:	f7ff fe92 	bl	800e4f4 <_Balloc>
 800e7d0:	b930      	cbnz	r0, 800e7e0 <__multiply+0x44>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	4b44      	ldr	r3, [pc, #272]	@ (800e8e8 <__multiply+0x14c>)
 800e7d6:	4845      	ldr	r0, [pc, #276]	@ (800e8ec <__multiply+0x150>)
 800e7d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e7dc:	f7ff fa20 	bl	800dc20 <__assert_func>
 800e7e0:	f100 0514 	add.w	r5, r0, #20
 800e7e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7e8:	462b      	mov	r3, r5
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	4543      	cmp	r3, r8
 800e7ee:	d321      	bcc.n	800e834 <__multiply+0x98>
 800e7f0:	f107 0114 	add.w	r1, r7, #20
 800e7f4:	f104 0214 	add.w	r2, r4, #20
 800e7f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e7fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e800:	9302      	str	r3, [sp, #8]
 800e802:	1b13      	subs	r3, r2, r4
 800e804:	3b15      	subs	r3, #21
 800e806:	f023 0303 	bic.w	r3, r3, #3
 800e80a:	3304      	adds	r3, #4
 800e80c:	f104 0715 	add.w	r7, r4, #21
 800e810:	42ba      	cmp	r2, r7
 800e812:	bf38      	it	cc
 800e814:	2304      	movcc	r3, #4
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	9b02      	ldr	r3, [sp, #8]
 800e81a:	9103      	str	r1, [sp, #12]
 800e81c:	428b      	cmp	r3, r1
 800e81e:	d80c      	bhi.n	800e83a <__multiply+0x9e>
 800e820:	2e00      	cmp	r6, #0
 800e822:	dd03      	ble.n	800e82c <__multiply+0x90>
 800e824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d05b      	beq.n	800e8e4 <__multiply+0x148>
 800e82c:	6106      	str	r6, [r0, #16]
 800e82e:	b005      	add	sp, #20
 800e830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e834:	f843 2b04 	str.w	r2, [r3], #4
 800e838:	e7d8      	b.n	800e7ec <__multiply+0x50>
 800e83a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e83e:	f1ba 0f00 	cmp.w	sl, #0
 800e842:	d024      	beq.n	800e88e <__multiply+0xf2>
 800e844:	f104 0e14 	add.w	lr, r4, #20
 800e848:	46a9      	mov	r9, r5
 800e84a:	f04f 0c00 	mov.w	ip, #0
 800e84e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e852:	f8d9 3000 	ldr.w	r3, [r9]
 800e856:	fa1f fb87 	uxth.w	fp, r7
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e860:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e864:	f8d9 7000 	ldr.w	r7, [r9]
 800e868:	4463      	add	r3, ip
 800e86a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e86e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e872:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e876:	b29b      	uxth	r3, r3
 800e878:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e87c:	4572      	cmp	r2, lr
 800e87e:	f849 3b04 	str.w	r3, [r9], #4
 800e882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e886:	d8e2      	bhi.n	800e84e <__multiply+0xb2>
 800e888:	9b01      	ldr	r3, [sp, #4]
 800e88a:	f845 c003 	str.w	ip, [r5, r3]
 800e88e:	9b03      	ldr	r3, [sp, #12]
 800e890:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e894:	3104      	adds	r1, #4
 800e896:	f1b9 0f00 	cmp.w	r9, #0
 800e89a:	d021      	beq.n	800e8e0 <__multiply+0x144>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	f104 0c14 	add.w	ip, r4, #20
 800e8a2:	46ae      	mov	lr, r5
 800e8a4:	f04f 0a00 	mov.w	sl, #0
 800e8a8:	f8bc b000 	ldrh.w	fp, [ip]
 800e8ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e8b0:	fb09 770b 	mla	r7, r9, fp, r7
 800e8b4:	4457      	add	r7, sl
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8bc:	f84e 3b04 	str.w	r3, [lr], #4
 800e8c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e8c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8c8:	f8be 3000 	ldrh.w	r3, [lr]
 800e8cc:	fb09 330a 	mla	r3, r9, sl, r3
 800e8d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e8d4:	4562      	cmp	r2, ip
 800e8d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8da:	d8e5      	bhi.n	800e8a8 <__multiply+0x10c>
 800e8dc:	9f01      	ldr	r7, [sp, #4]
 800e8de:	51eb      	str	r3, [r5, r7]
 800e8e0:	3504      	adds	r5, #4
 800e8e2:	e799      	b.n	800e818 <__multiply+0x7c>
 800e8e4:	3e01      	subs	r6, #1
 800e8e6:	e79b      	b.n	800e820 <__multiply+0x84>
 800e8e8:	08010b4d 	.word	0x08010b4d
 800e8ec:	08010bbe 	.word	0x08010bbe

0800e8f0 <__pow5mult>:
 800e8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8f4:	4615      	mov	r5, r2
 800e8f6:	f012 0203 	ands.w	r2, r2, #3
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	460e      	mov	r6, r1
 800e8fe:	d007      	beq.n	800e910 <__pow5mult+0x20>
 800e900:	4c25      	ldr	r4, [pc, #148]	@ (800e998 <__pow5mult+0xa8>)
 800e902:	3a01      	subs	r2, #1
 800e904:	2300      	movs	r3, #0
 800e906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e90a:	f7ff fe55 	bl	800e5b8 <__multadd>
 800e90e:	4606      	mov	r6, r0
 800e910:	10ad      	asrs	r5, r5, #2
 800e912:	d03d      	beq.n	800e990 <__pow5mult+0xa0>
 800e914:	69fc      	ldr	r4, [r7, #28]
 800e916:	b97c      	cbnz	r4, 800e938 <__pow5mult+0x48>
 800e918:	2010      	movs	r0, #16
 800e91a:	f7ff fd23 	bl	800e364 <malloc>
 800e91e:	4602      	mov	r2, r0
 800e920:	61f8      	str	r0, [r7, #28]
 800e922:	b928      	cbnz	r0, 800e930 <__pow5mult+0x40>
 800e924:	4b1d      	ldr	r3, [pc, #116]	@ (800e99c <__pow5mult+0xac>)
 800e926:	481e      	ldr	r0, [pc, #120]	@ (800e9a0 <__pow5mult+0xb0>)
 800e928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e92c:	f7ff f978 	bl	800dc20 <__assert_func>
 800e930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e934:	6004      	str	r4, [r0, #0]
 800e936:	60c4      	str	r4, [r0, #12]
 800e938:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e93c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e940:	b94c      	cbnz	r4, 800e956 <__pow5mult+0x66>
 800e942:	f240 2171 	movw	r1, #625	@ 0x271
 800e946:	4638      	mov	r0, r7
 800e948:	f7ff ff12 	bl	800e770 <__i2b>
 800e94c:	2300      	movs	r3, #0
 800e94e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e952:	4604      	mov	r4, r0
 800e954:	6003      	str	r3, [r0, #0]
 800e956:	f04f 0900 	mov.w	r9, #0
 800e95a:	07eb      	lsls	r3, r5, #31
 800e95c:	d50a      	bpl.n	800e974 <__pow5mult+0x84>
 800e95e:	4631      	mov	r1, r6
 800e960:	4622      	mov	r2, r4
 800e962:	4638      	mov	r0, r7
 800e964:	f7ff ff1a 	bl	800e79c <__multiply>
 800e968:	4631      	mov	r1, r6
 800e96a:	4680      	mov	r8, r0
 800e96c:	4638      	mov	r0, r7
 800e96e:	f7ff fe01 	bl	800e574 <_Bfree>
 800e972:	4646      	mov	r6, r8
 800e974:	106d      	asrs	r5, r5, #1
 800e976:	d00b      	beq.n	800e990 <__pow5mult+0xa0>
 800e978:	6820      	ldr	r0, [r4, #0]
 800e97a:	b938      	cbnz	r0, 800e98c <__pow5mult+0x9c>
 800e97c:	4622      	mov	r2, r4
 800e97e:	4621      	mov	r1, r4
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ff0b 	bl	800e79c <__multiply>
 800e986:	6020      	str	r0, [r4, #0]
 800e988:	f8c0 9000 	str.w	r9, [r0]
 800e98c:	4604      	mov	r4, r0
 800e98e:	e7e4      	b.n	800e95a <__pow5mult+0x6a>
 800e990:	4630      	mov	r0, r6
 800e992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e996:	bf00      	nop
 800e998:	08010c18 	.word	0x08010c18
 800e99c:	08010a98 	.word	0x08010a98
 800e9a0:	08010bbe 	.word	0x08010bbe

0800e9a4 <__lshift>:
 800e9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	6849      	ldr	r1, [r1, #4]
 800e9ac:	6923      	ldr	r3, [r4, #16]
 800e9ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9b2:	68a3      	ldr	r3, [r4, #8]
 800e9b4:	4607      	mov	r7, r0
 800e9b6:	4691      	mov	r9, r2
 800e9b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9bc:	f108 0601 	add.w	r6, r8, #1
 800e9c0:	42b3      	cmp	r3, r6
 800e9c2:	db0b      	blt.n	800e9dc <__lshift+0x38>
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	f7ff fd95 	bl	800e4f4 <_Balloc>
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	b948      	cbnz	r0, 800e9e2 <__lshift+0x3e>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	4b28      	ldr	r3, [pc, #160]	@ (800ea74 <__lshift+0xd0>)
 800e9d2:	4829      	ldr	r0, [pc, #164]	@ (800ea78 <__lshift+0xd4>)
 800e9d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e9d8:	f7ff f922 	bl	800dc20 <__assert_func>
 800e9dc:	3101      	adds	r1, #1
 800e9de:	005b      	lsls	r3, r3, #1
 800e9e0:	e7ee      	b.n	800e9c0 <__lshift+0x1c>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f100 0114 	add.w	r1, r0, #20
 800e9e8:	f100 0210 	add.w	r2, r0, #16
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	4553      	cmp	r3, sl
 800e9f0:	db33      	blt.n	800ea5a <__lshift+0xb6>
 800e9f2:	6920      	ldr	r0, [r4, #16]
 800e9f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9f8:	f104 0314 	add.w	r3, r4, #20
 800e9fc:	f019 091f 	ands.w	r9, r9, #31
 800ea00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea08:	d02b      	beq.n	800ea62 <__lshift+0xbe>
 800ea0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ea0e:	468a      	mov	sl, r1
 800ea10:	2200      	movs	r2, #0
 800ea12:	6818      	ldr	r0, [r3, #0]
 800ea14:	fa00 f009 	lsl.w	r0, r0, r9
 800ea18:	4310      	orrs	r0, r2
 800ea1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ea1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea22:	459c      	cmp	ip, r3
 800ea24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea28:	d8f3      	bhi.n	800ea12 <__lshift+0x6e>
 800ea2a:	ebac 0304 	sub.w	r3, ip, r4
 800ea2e:	3b15      	subs	r3, #21
 800ea30:	f023 0303 	bic.w	r3, r3, #3
 800ea34:	3304      	adds	r3, #4
 800ea36:	f104 0015 	add.w	r0, r4, #21
 800ea3a:	4584      	cmp	ip, r0
 800ea3c:	bf38      	it	cc
 800ea3e:	2304      	movcc	r3, #4
 800ea40:	50ca      	str	r2, [r1, r3]
 800ea42:	b10a      	cbz	r2, 800ea48 <__lshift+0xa4>
 800ea44:	f108 0602 	add.w	r6, r8, #2
 800ea48:	3e01      	subs	r6, #1
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	612e      	str	r6, [r5, #16]
 800ea4e:	4621      	mov	r1, r4
 800ea50:	f7ff fd90 	bl	800e574 <_Bfree>
 800ea54:	4628      	mov	r0, r5
 800ea56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea5e:	3301      	adds	r3, #1
 800ea60:	e7c5      	b.n	800e9ee <__lshift+0x4a>
 800ea62:	3904      	subs	r1, #4
 800ea64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea6c:	459c      	cmp	ip, r3
 800ea6e:	d8f9      	bhi.n	800ea64 <__lshift+0xc0>
 800ea70:	e7ea      	b.n	800ea48 <__lshift+0xa4>
 800ea72:	bf00      	nop
 800ea74:	08010b4d 	.word	0x08010b4d
 800ea78:	08010bbe 	.word	0x08010bbe

0800ea7c <__mcmp>:
 800ea7c:	690a      	ldr	r2, [r1, #16]
 800ea7e:	4603      	mov	r3, r0
 800ea80:	6900      	ldr	r0, [r0, #16]
 800ea82:	1a80      	subs	r0, r0, r2
 800ea84:	b530      	push	{r4, r5, lr}
 800ea86:	d10e      	bne.n	800eaa6 <__mcmp+0x2a>
 800ea88:	3314      	adds	r3, #20
 800ea8a:	3114      	adds	r1, #20
 800ea8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea9c:	4295      	cmp	r5, r2
 800ea9e:	d003      	beq.n	800eaa8 <__mcmp+0x2c>
 800eaa0:	d205      	bcs.n	800eaae <__mcmp+0x32>
 800eaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa6:	bd30      	pop	{r4, r5, pc}
 800eaa8:	42a3      	cmp	r3, r4
 800eaaa:	d3f3      	bcc.n	800ea94 <__mcmp+0x18>
 800eaac:	e7fb      	b.n	800eaa6 <__mcmp+0x2a>
 800eaae:	2001      	movs	r0, #1
 800eab0:	e7f9      	b.n	800eaa6 <__mcmp+0x2a>
	...

0800eab4 <__mdiff>:
 800eab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab8:	4689      	mov	r9, r1
 800eaba:	4606      	mov	r6, r0
 800eabc:	4611      	mov	r1, r2
 800eabe:	4648      	mov	r0, r9
 800eac0:	4614      	mov	r4, r2
 800eac2:	f7ff ffdb 	bl	800ea7c <__mcmp>
 800eac6:	1e05      	subs	r5, r0, #0
 800eac8:	d112      	bne.n	800eaf0 <__mdiff+0x3c>
 800eaca:	4629      	mov	r1, r5
 800eacc:	4630      	mov	r0, r6
 800eace:	f7ff fd11 	bl	800e4f4 <_Balloc>
 800ead2:	4602      	mov	r2, r0
 800ead4:	b928      	cbnz	r0, 800eae2 <__mdiff+0x2e>
 800ead6:	4b3f      	ldr	r3, [pc, #252]	@ (800ebd4 <__mdiff+0x120>)
 800ead8:	f240 2137 	movw	r1, #567	@ 0x237
 800eadc:	483e      	ldr	r0, [pc, #248]	@ (800ebd8 <__mdiff+0x124>)
 800eade:	f7ff f89f 	bl	800dc20 <__assert_func>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eae8:	4610      	mov	r0, r2
 800eaea:	b003      	add	sp, #12
 800eaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf0:	bfbc      	itt	lt
 800eaf2:	464b      	movlt	r3, r9
 800eaf4:	46a1      	movlt	r9, r4
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eafc:	bfba      	itte	lt
 800eafe:	461c      	movlt	r4, r3
 800eb00:	2501      	movlt	r5, #1
 800eb02:	2500      	movge	r5, #0
 800eb04:	f7ff fcf6 	bl	800e4f4 <_Balloc>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	b918      	cbnz	r0, 800eb14 <__mdiff+0x60>
 800eb0c:	4b31      	ldr	r3, [pc, #196]	@ (800ebd4 <__mdiff+0x120>)
 800eb0e:	f240 2145 	movw	r1, #581	@ 0x245
 800eb12:	e7e3      	b.n	800eadc <__mdiff+0x28>
 800eb14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb18:	6926      	ldr	r6, [r4, #16]
 800eb1a:	60c5      	str	r5, [r0, #12]
 800eb1c:	f109 0310 	add.w	r3, r9, #16
 800eb20:	f109 0514 	add.w	r5, r9, #20
 800eb24:	f104 0e14 	add.w	lr, r4, #20
 800eb28:	f100 0b14 	add.w	fp, r0, #20
 800eb2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	46d9      	mov	r9, fp
 800eb38:	f04f 0c00 	mov.w	ip, #0
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	fa1f f38a 	uxth.w	r3, sl
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	b283      	uxth	r3, r0
 800eb50:	1acb      	subs	r3, r1, r3
 800eb52:	0c00      	lsrs	r0, r0, #16
 800eb54:	4463      	add	r3, ip
 800eb56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eb64:	4576      	cmp	r6, lr
 800eb66:	f849 3b04 	str.w	r3, [r9], #4
 800eb6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb6e:	d8e5      	bhi.n	800eb3c <__mdiff+0x88>
 800eb70:	1b33      	subs	r3, r6, r4
 800eb72:	3b15      	subs	r3, #21
 800eb74:	f023 0303 	bic.w	r3, r3, #3
 800eb78:	3415      	adds	r4, #21
 800eb7a:	3304      	adds	r3, #4
 800eb7c:	42a6      	cmp	r6, r4
 800eb7e:	bf38      	it	cc
 800eb80:	2304      	movcc	r3, #4
 800eb82:	441d      	add	r5, r3
 800eb84:	445b      	add	r3, fp
 800eb86:	461e      	mov	r6, r3
 800eb88:	462c      	mov	r4, r5
 800eb8a:	4544      	cmp	r4, r8
 800eb8c:	d30e      	bcc.n	800ebac <__mdiff+0xf8>
 800eb8e:	f108 0103 	add.w	r1, r8, #3
 800eb92:	1b49      	subs	r1, r1, r5
 800eb94:	f021 0103 	bic.w	r1, r1, #3
 800eb98:	3d03      	subs	r5, #3
 800eb9a:	45a8      	cmp	r8, r5
 800eb9c:	bf38      	it	cc
 800eb9e:	2100      	movcc	r1, #0
 800eba0:	440b      	add	r3, r1
 800eba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eba6:	b191      	cbz	r1, 800ebce <__mdiff+0x11a>
 800eba8:	6117      	str	r7, [r2, #16]
 800ebaa:	e79d      	b.n	800eae8 <__mdiff+0x34>
 800ebac:	f854 1b04 	ldr.w	r1, [r4], #4
 800ebb0:	46e6      	mov	lr, ip
 800ebb2:	0c08      	lsrs	r0, r1, #16
 800ebb4:	fa1c fc81 	uxtah	ip, ip, r1
 800ebb8:	4471      	add	r1, lr
 800ebba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ebbe:	b289      	uxth	r1, r1
 800ebc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ebc4:	f846 1b04 	str.w	r1, [r6], #4
 800ebc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebcc:	e7dd      	b.n	800eb8a <__mdiff+0xd6>
 800ebce:	3f01      	subs	r7, #1
 800ebd0:	e7e7      	b.n	800eba2 <__mdiff+0xee>
 800ebd2:	bf00      	nop
 800ebd4:	08010b4d 	.word	0x08010b4d
 800ebd8:	08010bbe 	.word	0x08010bbe

0800ebdc <__ulp>:
 800ebdc:	b082      	sub	sp, #8
 800ebde:	ed8d 0b00 	vstr	d0, [sp]
 800ebe2:	9a01      	ldr	r2, [sp, #4]
 800ebe4:	4b0f      	ldr	r3, [pc, #60]	@ (800ec24 <__ulp+0x48>)
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	dc08      	bgt.n	800ec02 <__ulp+0x26>
 800ebf0:	425b      	negs	r3, r3
 800ebf2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ebf6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ebfa:	da04      	bge.n	800ec06 <__ulp+0x2a>
 800ebfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec00:	4113      	asrs	r3, r2
 800ec02:	2200      	movs	r2, #0
 800ec04:	e008      	b.n	800ec18 <__ulp+0x3c>
 800ec06:	f1a2 0314 	sub.w	r3, r2, #20
 800ec0a:	2b1e      	cmp	r3, #30
 800ec0c:	bfda      	itte	le
 800ec0e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ec12:	40da      	lsrle	r2, r3
 800ec14:	2201      	movgt	r2, #1
 800ec16:	2300      	movs	r3, #0
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	ec41 0b10 	vmov	d0, r0, r1
 800ec20:	b002      	add	sp, #8
 800ec22:	4770      	bx	lr
 800ec24:	7ff00000 	.word	0x7ff00000

0800ec28 <__b2d>:
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	6906      	ldr	r6, [r0, #16]
 800ec2e:	f100 0814 	add.w	r8, r0, #20
 800ec32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec36:	1f37      	subs	r7, r6, #4
 800ec38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec3c:	4610      	mov	r0, r2
 800ec3e:	f7ff fd4b 	bl	800e6d8 <__hi0bits>
 800ec42:	f1c0 0320 	rsb	r3, r0, #32
 800ec46:	280a      	cmp	r0, #10
 800ec48:	600b      	str	r3, [r1, #0]
 800ec4a:	491b      	ldr	r1, [pc, #108]	@ (800ecb8 <__b2d+0x90>)
 800ec4c:	dc15      	bgt.n	800ec7a <__b2d+0x52>
 800ec4e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec52:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec56:	45b8      	cmp	r8, r7
 800ec58:	ea43 0501 	orr.w	r5, r3, r1
 800ec5c:	bf34      	ite	cc
 800ec5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec62:	2300      	movcs	r3, #0
 800ec64:	3015      	adds	r0, #21
 800ec66:	fa02 f000 	lsl.w	r0, r2, r0
 800ec6a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ec6e:	4303      	orrs	r3, r0
 800ec70:	461c      	mov	r4, r3
 800ec72:	ec45 4b10 	vmov	d0, r4, r5
 800ec76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec7a:	45b8      	cmp	r8, r7
 800ec7c:	bf3a      	itte	cc
 800ec7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec82:	f1a6 0708 	subcc.w	r7, r6, #8
 800ec86:	2300      	movcs	r3, #0
 800ec88:	380b      	subs	r0, #11
 800ec8a:	d012      	beq.n	800ecb2 <__b2d+0x8a>
 800ec8c:	f1c0 0120 	rsb	r1, r0, #32
 800ec90:	fa23 f401 	lsr.w	r4, r3, r1
 800ec94:	4082      	lsls	r2, r0
 800ec96:	4322      	orrs	r2, r4
 800ec98:	4547      	cmp	r7, r8
 800ec9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ec9e:	bf8c      	ite	hi
 800eca0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eca4:	2200      	movls	r2, #0
 800eca6:	4083      	lsls	r3, r0
 800eca8:	40ca      	lsrs	r2, r1
 800ecaa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	e7de      	b.n	800ec70 <__b2d+0x48>
 800ecb2:	ea42 0501 	orr.w	r5, r2, r1
 800ecb6:	e7db      	b.n	800ec70 <__b2d+0x48>
 800ecb8:	3ff00000 	.word	0x3ff00000

0800ecbc <__d2b>:
 800ecbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	ec59 8b10 	vmov	r8, r9, d0
 800ecc8:	4616      	mov	r6, r2
 800ecca:	f7ff fc13 	bl	800e4f4 <_Balloc>
 800ecce:	4604      	mov	r4, r0
 800ecd0:	b930      	cbnz	r0, 800ece0 <__d2b+0x24>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	4b23      	ldr	r3, [pc, #140]	@ (800ed64 <__d2b+0xa8>)
 800ecd6:	4824      	ldr	r0, [pc, #144]	@ (800ed68 <__d2b+0xac>)
 800ecd8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ecdc:	f7fe ffa0 	bl	800dc20 <__assert_func>
 800ece0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ece4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ece8:	b10d      	cbz	r5, 800ecee <__d2b+0x32>
 800ecea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	f1b8 0300 	subs.w	r3, r8, #0
 800ecf4:	d023      	beq.n	800ed3e <__d2b+0x82>
 800ecf6:	4668      	mov	r0, sp
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	f7ff fd0c 	bl	800e716 <__lo0bits>
 800ecfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed02:	b1d0      	cbz	r0, 800ed3a <__d2b+0x7e>
 800ed04:	f1c0 0320 	rsb	r3, r0, #32
 800ed08:	fa02 f303 	lsl.w	r3, r2, r3
 800ed0c:	430b      	orrs	r3, r1
 800ed0e:	40c2      	lsrs	r2, r0
 800ed10:	6163      	str	r3, [r4, #20]
 800ed12:	9201      	str	r2, [sp, #4]
 800ed14:	9b01      	ldr	r3, [sp, #4]
 800ed16:	61a3      	str	r3, [r4, #24]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	bf0c      	ite	eq
 800ed1c:	2201      	moveq	r2, #1
 800ed1e:	2202      	movne	r2, #2
 800ed20:	6122      	str	r2, [r4, #16]
 800ed22:	b1a5      	cbz	r5, 800ed4e <__d2b+0x92>
 800ed24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed28:	4405      	add	r5, r0
 800ed2a:	603d      	str	r5, [r7, #0]
 800ed2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed30:	6030      	str	r0, [r6, #0]
 800ed32:	4620      	mov	r0, r4
 800ed34:	b003      	add	sp, #12
 800ed36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed3a:	6161      	str	r1, [r4, #20]
 800ed3c:	e7ea      	b.n	800ed14 <__d2b+0x58>
 800ed3e:	a801      	add	r0, sp, #4
 800ed40:	f7ff fce9 	bl	800e716 <__lo0bits>
 800ed44:	9b01      	ldr	r3, [sp, #4]
 800ed46:	6163      	str	r3, [r4, #20]
 800ed48:	3020      	adds	r0, #32
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	e7e8      	b.n	800ed20 <__d2b+0x64>
 800ed4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed56:	6038      	str	r0, [r7, #0]
 800ed58:	6918      	ldr	r0, [r3, #16]
 800ed5a:	f7ff fcbd 	bl	800e6d8 <__hi0bits>
 800ed5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed62:	e7e5      	b.n	800ed30 <__d2b+0x74>
 800ed64:	08010b4d 	.word	0x08010b4d
 800ed68:	08010bbe 	.word	0x08010bbe

0800ed6c <__ratio>:
 800ed6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	4688      	mov	r8, r1
 800ed72:	4669      	mov	r1, sp
 800ed74:	4681      	mov	r9, r0
 800ed76:	f7ff ff57 	bl	800ec28 <__b2d>
 800ed7a:	a901      	add	r1, sp, #4
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	ec55 4b10 	vmov	r4, r5, d0
 800ed82:	f7ff ff51 	bl	800ec28 <__b2d>
 800ed86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ed8a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ed94:	1a5b      	subs	r3, r3, r1
 800ed96:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ed9a:	ec57 6b10 	vmov	r6, r7, d0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	bfd6      	itet	le
 800eda2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eda6:	462a      	movgt	r2, r5
 800eda8:	463a      	movle	r2, r7
 800edaa:	46ab      	mov	fp, r5
 800edac:	46a2      	mov	sl, r4
 800edae:	bfce      	itee	gt
 800edb0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800edb4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800edb8:	ee00 3a90 	vmovle	s1, r3
 800edbc:	ec4b ab17 	vmov	d7, sl, fp
 800edc0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800edc4:	b003      	add	sp, #12
 800edc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edca <__copybits>:
 800edca:	3901      	subs	r1, #1
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	1149      	asrs	r1, r1, #5
 800edd0:	6914      	ldr	r4, [r2, #16]
 800edd2:	3101      	adds	r1, #1
 800edd4:	f102 0314 	add.w	r3, r2, #20
 800edd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eddc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ede0:	1f05      	subs	r5, r0, #4
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	d30c      	bcc.n	800ee00 <__copybits+0x36>
 800ede6:	1aa3      	subs	r3, r4, r2
 800ede8:	3b11      	subs	r3, #17
 800edea:	f023 0303 	bic.w	r3, r3, #3
 800edee:	3211      	adds	r2, #17
 800edf0:	42a2      	cmp	r2, r4
 800edf2:	bf88      	it	hi
 800edf4:	2300      	movhi	r3, #0
 800edf6:	4418      	add	r0, r3
 800edf8:	2300      	movs	r3, #0
 800edfa:	4288      	cmp	r0, r1
 800edfc:	d305      	bcc.n	800ee0a <__copybits+0x40>
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee04:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee08:	e7eb      	b.n	800ede2 <__copybits+0x18>
 800ee0a:	f840 3b04 	str.w	r3, [r0], #4
 800ee0e:	e7f4      	b.n	800edfa <__copybits+0x30>

0800ee10 <__any_on>:
 800ee10:	f100 0214 	add.w	r2, r0, #20
 800ee14:	6900      	ldr	r0, [r0, #16]
 800ee16:	114b      	asrs	r3, r1, #5
 800ee18:	4298      	cmp	r0, r3
 800ee1a:	b510      	push	{r4, lr}
 800ee1c:	db11      	blt.n	800ee42 <__any_on+0x32>
 800ee1e:	dd0a      	ble.n	800ee36 <__any_on+0x26>
 800ee20:	f011 011f 	ands.w	r1, r1, #31
 800ee24:	d007      	beq.n	800ee36 <__any_on+0x26>
 800ee26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee2a:	fa24 f001 	lsr.w	r0, r4, r1
 800ee2e:	fa00 f101 	lsl.w	r1, r0, r1
 800ee32:	428c      	cmp	r4, r1
 800ee34:	d10b      	bne.n	800ee4e <__any_on+0x3e>
 800ee36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d803      	bhi.n	800ee46 <__any_on+0x36>
 800ee3e:	2000      	movs	r0, #0
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	4603      	mov	r3, r0
 800ee44:	e7f7      	b.n	800ee36 <__any_on+0x26>
 800ee46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee4a:	2900      	cmp	r1, #0
 800ee4c:	d0f5      	beq.n	800ee3a <__any_on+0x2a>
 800ee4e:	2001      	movs	r0, #1
 800ee50:	e7f6      	b.n	800ee40 <__any_on+0x30>

0800ee52 <__ascii_wctomb>:
 800ee52:	4603      	mov	r3, r0
 800ee54:	4608      	mov	r0, r1
 800ee56:	b141      	cbz	r1, 800ee6a <__ascii_wctomb+0x18>
 800ee58:	2aff      	cmp	r2, #255	@ 0xff
 800ee5a:	d904      	bls.n	800ee66 <__ascii_wctomb+0x14>
 800ee5c:	228a      	movs	r2, #138	@ 0x8a
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	f04f 30ff 	mov.w	r0, #4294967295
 800ee64:	4770      	bx	lr
 800ee66:	700a      	strb	r2, [r1, #0]
 800ee68:	2001      	movs	r0, #1
 800ee6a:	4770      	bx	lr

0800ee6c <__ssputs_r>:
 800ee6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	688e      	ldr	r6, [r1, #8]
 800ee72:	461f      	mov	r7, r3
 800ee74:	42be      	cmp	r6, r7
 800ee76:	680b      	ldr	r3, [r1, #0]
 800ee78:	4682      	mov	sl, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	4690      	mov	r8, r2
 800ee7e:	d82d      	bhi.n	800eedc <__ssputs_r+0x70>
 800ee80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee88:	d026      	beq.n	800eed8 <__ssputs_r+0x6c>
 800ee8a:	6965      	ldr	r5, [r4, #20]
 800ee8c:	6909      	ldr	r1, [r1, #16]
 800ee8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee92:	eba3 0901 	sub.w	r9, r3, r1
 800ee96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee9a:	1c7b      	adds	r3, r7, #1
 800ee9c:	444b      	add	r3, r9
 800ee9e:	106d      	asrs	r5, r5, #1
 800eea0:	429d      	cmp	r5, r3
 800eea2:	bf38      	it	cc
 800eea4:	461d      	movcc	r5, r3
 800eea6:	0553      	lsls	r3, r2, #21
 800eea8:	d527      	bpl.n	800eefa <__ssputs_r+0x8e>
 800eeaa:	4629      	mov	r1, r5
 800eeac:	f7ff fa84 	bl	800e3b8 <_malloc_r>
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	b360      	cbz	r0, 800ef0e <__ssputs_r+0xa2>
 800eeb4:	6921      	ldr	r1, [r4, #16]
 800eeb6:	464a      	mov	r2, r9
 800eeb8:	f7fe fe99 	bl	800dbee <memcpy>
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eec6:	81a3      	strh	r3, [r4, #12]
 800eec8:	6126      	str	r6, [r4, #16]
 800eeca:	6165      	str	r5, [r4, #20]
 800eecc:	444e      	add	r6, r9
 800eece:	eba5 0509 	sub.w	r5, r5, r9
 800eed2:	6026      	str	r6, [r4, #0]
 800eed4:	60a5      	str	r5, [r4, #8]
 800eed6:	463e      	mov	r6, r7
 800eed8:	42be      	cmp	r6, r7
 800eeda:	d900      	bls.n	800eede <__ssputs_r+0x72>
 800eedc:	463e      	mov	r6, r7
 800eede:	6820      	ldr	r0, [r4, #0]
 800eee0:	4632      	mov	r2, r6
 800eee2:	4641      	mov	r1, r8
 800eee4:	f000 fb66 	bl	800f5b4 <memmove>
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	1b9b      	subs	r3, r3, r6
 800eeec:	60a3      	str	r3, [r4, #8]
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	4433      	add	r3, r6
 800eef2:	6023      	str	r3, [r4, #0]
 800eef4:	2000      	movs	r0, #0
 800eef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eefa:	462a      	mov	r2, r5
 800eefc:	f000 fb9f 	bl	800f63e <_realloc_r>
 800ef00:	4606      	mov	r6, r0
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d1e0      	bne.n	800eec8 <__ssputs_r+0x5c>
 800ef06:	6921      	ldr	r1, [r4, #16]
 800ef08:	4650      	mov	r0, sl
 800ef0a:	f7fe fea7 	bl	800dc5c <_free_r>
 800ef0e:	230c      	movs	r3, #12
 800ef10:	f8ca 3000 	str.w	r3, [sl]
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e7e9      	b.n	800eef6 <__ssputs_r+0x8a>
	...

0800ef24 <_svfiprintf_r>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	4698      	mov	r8, r3
 800ef2a:	898b      	ldrh	r3, [r1, #12]
 800ef2c:	061b      	lsls	r3, r3, #24
 800ef2e:	b09d      	sub	sp, #116	@ 0x74
 800ef30:	4607      	mov	r7, r0
 800ef32:	460d      	mov	r5, r1
 800ef34:	4614      	mov	r4, r2
 800ef36:	d510      	bpl.n	800ef5a <_svfiprintf_r+0x36>
 800ef38:	690b      	ldr	r3, [r1, #16]
 800ef3a:	b973      	cbnz	r3, 800ef5a <_svfiprintf_r+0x36>
 800ef3c:	2140      	movs	r1, #64	@ 0x40
 800ef3e:	f7ff fa3b 	bl	800e3b8 <_malloc_r>
 800ef42:	6028      	str	r0, [r5, #0]
 800ef44:	6128      	str	r0, [r5, #16]
 800ef46:	b930      	cbnz	r0, 800ef56 <_svfiprintf_r+0x32>
 800ef48:	230c      	movs	r3, #12
 800ef4a:	603b      	str	r3, [r7, #0]
 800ef4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef50:	b01d      	add	sp, #116	@ 0x74
 800ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef56:	2340      	movs	r3, #64	@ 0x40
 800ef58:	616b      	str	r3, [r5, #20]
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef5e:	2320      	movs	r3, #32
 800ef60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef68:	2330      	movs	r3, #48	@ 0x30
 800ef6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f108 <_svfiprintf_r+0x1e4>
 800ef6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef72:	f04f 0901 	mov.w	r9, #1
 800ef76:	4623      	mov	r3, r4
 800ef78:	469a      	mov	sl, r3
 800ef7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef7e:	b10a      	cbz	r2, 800ef84 <_svfiprintf_r+0x60>
 800ef80:	2a25      	cmp	r2, #37	@ 0x25
 800ef82:	d1f9      	bne.n	800ef78 <_svfiprintf_r+0x54>
 800ef84:	ebba 0b04 	subs.w	fp, sl, r4
 800ef88:	d00b      	beq.n	800efa2 <_svfiprintf_r+0x7e>
 800ef8a:	465b      	mov	r3, fp
 800ef8c:	4622      	mov	r2, r4
 800ef8e:	4629      	mov	r1, r5
 800ef90:	4638      	mov	r0, r7
 800ef92:	f7ff ff6b 	bl	800ee6c <__ssputs_r>
 800ef96:	3001      	adds	r0, #1
 800ef98:	f000 80a7 	beq.w	800f0ea <_svfiprintf_r+0x1c6>
 800ef9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef9e:	445a      	add	r2, fp
 800efa0:	9209      	str	r2, [sp, #36]	@ 0x24
 800efa2:	f89a 3000 	ldrb.w	r3, [sl]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 809f 	beq.w	800f0ea <_svfiprintf_r+0x1c6>
 800efac:	2300      	movs	r3, #0
 800efae:	f04f 32ff 	mov.w	r2, #4294967295
 800efb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efb6:	f10a 0a01 	add.w	sl, sl, #1
 800efba:	9304      	str	r3, [sp, #16]
 800efbc:	9307      	str	r3, [sp, #28]
 800efbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800efc4:	4654      	mov	r4, sl
 800efc6:	2205      	movs	r2, #5
 800efc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efcc:	484e      	ldr	r0, [pc, #312]	@ (800f108 <_svfiprintf_r+0x1e4>)
 800efce:	f7f1 f98f 	bl	80002f0 <memchr>
 800efd2:	9a04      	ldr	r2, [sp, #16]
 800efd4:	b9d8      	cbnz	r0, 800f00e <_svfiprintf_r+0xea>
 800efd6:	06d0      	lsls	r0, r2, #27
 800efd8:	bf44      	itt	mi
 800efda:	2320      	movmi	r3, #32
 800efdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efe0:	0711      	lsls	r1, r2, #28
 800efe2:	bf44      	itt	mi
 800efe4:	232b      	movmi	r3, #43	@ 0x2b
 800efe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efea:	f89a 3000 	ldrb.w	r3, [sl]
 800efee:	2b2a      	cmp	r3, #42	@ 0x2a
 800eff0:	d015      	beq.n	800f01e <_svfiprintf_r+0xfa>
 800eff2:	9a07      	ldr	r2, [sp, #28]
 800eff4:	4654      	mov	r4, sl
 800eff6:	2000      	movs	r0, #0
 800eff8:	f04f 0c0a 	mov.w	ip, #10
 800effc:	4621      	mov	r1, r4
 800effe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f002:	3b30      	subs	r3, #48	@ 0x30
 800f004:	2b09      	cmp	r3, #9
 800f006:	d94b      	bls.n	800f0a0 <_svfiprintf_r+0x17c>
 800f008:	b1b0      	cbz	r0, 800f038 <_svfiprintf_r+0x114>
 800f00a:	9207      	str	r2, [sp, #28]
 800f00c:	e014      	b.n	800f038 <_svfiprintf_r+0x114>
 800f00e:	eba0 0308 	sub.w	r3, r0, r8
 800f012:	fa09 f303 	lsl.w	r3, r9, r3
 800f016:	4313      	orrs	r3, r2
 800f018:	9304      	str	r3, [sp, #16]
 800f01a:	46a2      	mov	sl, r4
 800f01c:	e7d2      	b.n	800efc4 <_svfiprintf_r+0xa0>
 800f01e:	9b03      	ldr	r3, [sp, #12]
 800f020:	1d19      	adds	r1, r3, #4
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	9103      	str	r1, [sp, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	bfbb      	ittet	lt
 800f02a:	425b      	neglt	r3, r3
 800f02c:	f042 0202 	orrlt.w	r2, r2, #2
 800f030:	9307      	strge	r3, [sp, #28]
 800f032:	9307      	strlt	r3, [sp, #28]
 800f034:	bfb8      	it	lt
 800f036:	9204      	strlt	r2, [sp, #16]
 800f038:	7823      	ldrb	r3, [r4, #0]
 800f03a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f03c:	d10a      	bne.n	800f054 <_svfiprintf_r+0x130>
 800f03e:	7863      	ldrb	r3, [r4, #1]
 800f040:	2b2a      	cmp	r3, #42	@ 0x2a
 800f042:	d132      	bne.n	800f0aa <_svfiprintf_r+0x186>
 800f044:	9b03      	ldr	r3, [sp, #12]
 800f046:	1d1a      	adds	r2, r3, #4
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	9203      	str	r2, [sp, #12]
 800f04c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f050:	3402      	adds	r4, #2
 800f052:	9305      	str	r3, [sp, #20]
 800f054:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f118 <_svfiprintf_r+0x1f4>
 800f058:	7821      	ldrb	r1, [r4, #0]
 800f05a:	2203      	movs	r2, #3
 800f05c:	4650      	mov	r0, sl
 800f05e:	f7f1 f947 	bl	80002f0 <memchr>
 800f062:	b138      	cbz	r0, 800f074 <_svfiprintf_r+0x150>
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	eba0 000a 	sub.w	r0, r0, sl
 800f06a:	2240      	movs	r2, #64	@ 0x40
 800f06c:	4082      	lsls	r2, r0
 800f06e:	4313      	orrs	r3, r2
 800f070:	3401      	adds	r4, #1
 800f072:	9304      	str	r3, [sp, #16]
 800f074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f078:	4824      	ldr	r0, [pc, #144]	@ (800f10c <_svfiprintf_r+0x1e8>)
 800f07a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f07e:	2206      	movs	r2, #6
 800f080:	f7f1 f936 	bl	80002f0 <memchr>
 800f084:	2800      	cmp	r0, #0
 800f086:	d036      	beq.n	800f0f6 <_svfiprintf_r+0x1d2>
 800f088:	4b21      	ldr	r3, [pc, #132]	@ (800f110 <_svfiprintf_r+0x1ec>)
 800f08a:	bb1b      	cbnz	r3, 800f0d4 <_svfiprintf_r+0x1b0>
 800f08c:	9b03      	ldr	r3, [sp, #12]
 800f08e:	3307      	adds	r3, #7
 800f090:	f023 0307 	bic.w	r3, r3, #7
 800f094:	3308      	adds	r3, #8
 800f096:	9303      	str	r3, [sp, #12]
 800f098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f09a:	4433      	add	r3, r6
 800f09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f09e:	e76a      	b.n	800ef76 <_svfiprintf_r+0x52>
 800f0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	e7a8      	b.n	800effc <_svfiprintf_r+0xd8>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	3401      	adds	r4, #1
 800f0ae:	9305      	str	r3, [sp, #20]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	f04f 0c0a 	mov.w	ip, #10
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0bc:	3a30      	subs	r2, #48	@ 0x30
 800f0be:	2a09      	cmp	r2, #9
 800f0c0:	d903      	bls.n	800f0ca <_svfiprintf_r+0x1a6>
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d0c6      	beq.n	800f054 <_svfiprintf_r+0x130>
 800f0c6:	9105      	str	r1, [sp, #20]
 800f0c8:	e7c4      	b.n	800f054 <_svfiprintf_r+0x130>
 800f0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e7f0      	b.n	800f0b6 <_svfiprintf_r+0x192>
 800f0d4:	ab03      	add	r3, sp, #12
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	462a      	mov	r2, r5
 800f0da:	4b0e      	ldr	r3, [pc, #56]	@ (800f114 <_svfiprintf_r+0x1f0>)
 800f0dc:	a904      	add	r1, sp, #16
 800f0de:	4638      	mov	r0, r7
 800f0e0:	f3af 8000 	nop.w
 800f0e4:	1c42      	adds	r2, r0, #1
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	d1d6      	bne.n	800f098 <_svfiprintf_r+0x174>
 800f0ea:	89ab      	ldrh	r3, [r5, #12]
 800f0ec:	065b      	lsls	r3, r3, #25
 800f0ee:	f53f af2d 	bmi.w	800ef4c <_svfiprintf_r+0x28>
 800f0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0f4:	e72c      	b.n	800ef50 <_svfiprintf_r+0x2c>
 800f0f6:	ab03      	add	r3, sp, #12
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	462a      	mov	r2, r5
 800f0fc:	4b05      	ldr	r3, [pc, #20]	@ (800f114 <_svfiprintf_r+0x1f0>)
 800f0fe:	a904      	add	r1, sp, #16
 800f100:	4638      	mov	r0, r7
 800f102:	f000 f879 	bl	800f1f8 <_printf_i>
 800f106:	e7ed      	b.n	800f0e4 <_svfiprintf_r+0x1c0>
 800f108:	08010e19 	.word	0x08010e19
 800f10c:	08010e23 	.word	0x08010e23
 800f110:	00000000 	.word	0x00000000
 800f114:	0800ee6d 	.word	0x0800ee6d
 800f118:	08010e1f 	.word	0x08010e1f

0800f11c <_printf_common>:
 800f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	4616      	mov	r6, r2
 800f122:	4698      	mov	r8, r3
 800f124:	688a      	ldr	r2, [r1, #8]
 800f126:	690b      	ldr	r3, [r1, #16]
 800f128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f12c:	4293      	cmp	r3, r2
 800f12e:	bfb8      	it	lt
 800f130:	4613      	movlt	r3, r2
 800f132:	6033      	str	r3, [r6, #0]
 800f134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f138:	4607      	mov	r7, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	b10a      	cbz	r2, 800f142 <_printf_common+0x26>
 800f13e:	3301      	adds	r3, #1
 800f140:	6033      	str	r3, [r6, #0]
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	0699      	lsls	r1, r3, #26
 800f146:	bf42      	ittt	mi
 800f148:	6833      	ldrmi	r3, [r6, #0]
 800f14a:	3302      	addmi	r3, #2
 800f14c:	6033      	strmi	r3, [r6, #0]
 800f14e:	6825      	ldr	r5, [r4, #0]
 800f150:	f015 0506 	ands.w	r5, r5, #6
 800f154:	d106      	bne.n	800f164 <_printf_common+0x48>
 800f156:	f104 0a19 	add.w	sl, r4, #25
 800f15a:	68e3      	ldr	r3, [r4, #12]
 800f15c:	6832      	ldr	r2, [r6, #0]
 800f15e:	1a9b      	subs	r3, r3, r2
 800f160:	42ab      	cmp	r3, r5
 800f162:	dc26      	bgt.n	800f1b2 <_printf_common+0x96>
 800f164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f168:	6822      	ldr	r2, [r4, #0]
 800f16a:	3b00      	subs	r3, #0
 800f16c:	bf18      	it	ne
 800f16e:	2301      	movne	r3, #1
 800f170:	0692      	lsls	r2, r2, #26
 800f172:	d42b      	bmi.n	800f1cc <_printf_common+0xb0>
 800f174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f178:	4641      	mov	r1, r8
 800f17a:	4638      	mov	r0, r7
 800f17c:	47c8      	blx	r9
 800f17e:	3001      	adds	r0, #1
 800f180:	d01e      	beq.n	800f1c0 <_printf_common+0xa4>
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	6922      	ldr	r2, [r4, #16]
 800f186:	f003 0306 	and.w	r3, r3, #6
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	bf02      	ittt	eq
 800f18e:	68e5      	ldreq	r5, [r4, #12]
 800f190:	6833      	ldreq	r3, [r6, #0]
 800f192:	1aed      	subeq	r5, r5, r3
 800f194:	68a3      	ldr	r3, [r4, #8]
 800f196:	bf0c      	ite	eq
 800f198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f19c:	2500      	movne	r5, #0
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	bfc4      	itt	gt
 800f1a2:	1a9b      	subgt	r3, r3, r2
 800f1a4:	18ed      	addgt	r5, r5, r3
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	341a      	adds	r4, #26
 800f1aa:	42b5      	cmp	r5, r6
 800f1ac:	d11a      	bne.n	800f1e4 <_printf_common+0xc8>
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	e008      	b.n	800f1c4 <_printf_common+0xa8>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	4652      	mov	r2, sl
 800f1b6:	4641      	mov	r1, r8
 800f1b8:	4638      	mov	r0, r7
 800f1ba:	47c8      	blx	r9
 800f1bc:	3001      	adds	r0, #1
 800f1be:	d103      	bne.n	800f1c8 <_printf_common+0xac>
 800f1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c8:	3501      	adds	r5, #1
 800f1ca:	e7c6      	b.n	800f15a <_printf_common+0x3e>
 800f1cc:	18e1      	adds	r1, r4, r3
 800f1ce:	1c5a      	adds	r2, r3, #1
 800f1d0:	2030      	movs	r0, #48	@ 0x30
 800f1d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f1d6:	4422      	add	r2, r4
 800f1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f1dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f1e0:	3302      	adds	r3, #2
 800f1e2:	e7c7      	b.n	800f174 <_printf_common+0x58>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	4641      	mov	r1, r8
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	47c8      	blx	r9
 800f1ee:	3001      	adds	r0, #1
 800f1f0:	d0e6      	beq.n	800f1c0 <_printf_common+0xa4>
 800f1f2:	3601      	adds	r6, #1
 800f1f4:	e7d9      	b.n	800f1aa <_printf_common+0x8e>
	...

0800f1f8 <_printf_i>:
 800f1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1fc:	7e0f      	ldrb	r7, [r1, #24]
 800f1fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f200:	2f78      	cmp	r7, #120	@ 0x78
 800f202:	4691      	mov	r9, r2
 800f204:	4680      	mov	r8, r0
 800f206:	460c      	mov	r4, r1
 800f208:	469a      	mov	sl, r3
 800f20a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f20e:	d807      	bhi.n	800f220 <_printf_i+0x28>
 800f210:	2f62      	cmp	r7, #98	@ 0x62
 800f212:	d80a      	bhi.n	800f22a <_printf_i+0x32>
 800f214:	2f00      	cmp	r7, #0
 800f216:	f000 80d2 	beq.w	800f3be <_printf_i+0x1c6>
 800f21a:	2f58      	cmp	r7, #88	@ 0x58
 800f21c:	f000 80b9 	beq.w	800f392 <_printf_i+0x19a>
 800f220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f228:	e03a      	b.n	800f2a0 <_printf_i+0xa8>
 800f22a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f22e:	2b15      	cmp	r3, #21
 800f230:	d8f6      	bhi.n	800f220 <_printf_i+0x28>
 800f232:	a101      	add	r1, pc, #4	@ (adr r1, 800f238 <_printf_i+0x40>)
 800f234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f238:	0800f291 	.word	0x0800f291
 800f23c:	0800f2a5 	.word	0x0800f2a5
 800f240:	0800f221 	.word	0x0800f221
 800f244:	0800f221 	.word	0x0800f221
 800f248:	0800f221 	.word	0x0800f221
 800f24c:	0800f221 	.word	0x0800f221
 800f250:	0800f2a5 	.word	0x0800f2a5
 800f254:	0800f221 	.word	0x0800f221
 800f258:	0800f221 	.word	0x0800f221
 800f25c:	0800f221 	.word	0x0800f221
 800f260:	0800f221 	.word	0x0800f221
 800f264:	0800f3a5 	.word	0x0800f3a5
 800f268:	0800f2cf 	.word	0x0800f2cf
 800f26c:	0800f35f 	.word	0x0800f35f
 800f270:	0800f221 	.word	0x0800f221
 800f274:	0800f221 	.word	0x0800f221
 800f278:	0800f3c7 	.word	0x0800f3c7
 800f27c:	0800f221 	.word	0x0800f221
 800f280:	0800f2cf 	.word	0x0800f2cf
 800f284:	0800f221 	.word	0x0800f221
 800f288:	0800f221 	.word	0x0800f221
 800f28c:	0800f367 	.word	0x0800f367
 800f290:	6833      	ldr	r3, [r6, #0]
 800f292:	1d1a      	adds	r2, r3, #4
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	6032      	str	r2, [r6, #0]
 800f298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f29c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e09d      	b.n	800f3e0 <_printf_i+0x1e8>
 800f2a4:	6833      	ldr	r3, [r6, #0]
 800f2a6:	6820      	ldr	r0, [r4, #0]
 800f2a8:	1d19      	adds	r1, r3, #4
 800f2aa:	6031      	str	r1, [r6, #0]
 800f2ac:	0606      	lsls	r6, r0, #24
 800f2ae:	d501      	bpl.n	800f2b4 <_printf_i+0xbc>
 800f2b0:	681d      	ldr	r5, [r3, #0]
 800f2b2:	e003      	b.n	800f2bc <_printf_i+0xc4>
 800f2b4:	0645      	lsls	r5, r0, #25
 800f2b6:	d5fb      	bpl.n	800f2b0 <_printf_i+0xb8>
 800f2b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f2bc:	2d00      	cmp	r5, #0
 800f2be:	da03      	bge.n	800f2c8 <_printf_i+0xd0>
 800f2c0:	232d      	movs	r3, #45	@ 0x2d
 800f2c2:	426d      	negs	r5, r5
 800f2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2c8:	4859      	ldr	r0, [pc, #356]	@ (800f430 <_printf_i+0x238>)
 800f2ca:	230a      	movs	r3, #10
 800f2cc:	e011      	b.n	800f2f2 <_printf_i+0xfa>
 800f2ce:	6821      	ldr	r1, [r4, #0]
 800f2d0:	6833      	ldr	r3, [r6, #0]
 800f2d2:	0608      	lsls	r0, r1, #24
 800f2d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f2d8:	d402      	bmi.n	800f2e0 <_printf_i+0xe8>
 800f2da:	0649      	lsls	r1, r1, #25
 800f2dc:	bf48      	it	mi
 800f2de:	b2ad      	uxthmi	r5, r5
 800f2e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f2e2:	4853      	ldr	r0, [pc, #332]	@ (800f430 <_printf_i+0x238>)
 800f2e4:	6033      	str	r3, [r6, #0]
 800f2e6:	bf14      	ite	ne
 800f2e8:	230a      	movne	r3, #10
 800f2ea:	2308      	moveq	r3, #8
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f2f2:	6866      	ldr	r6, [r4, #4]
 800f2f4:	60a6      	str	r6, [r4, #8]
 800f2f6:	2e00      	cmp	r6, #0
 800f2f8:	bfa2      	ittt	ge
 800f2fa:	6821      	ldrge	r1, [r4, #0]
 800f2fc:	f021 0104 	bicge.w	r1, r1, #4
 800f300:	6021      	strge	r1, [r4, #0]
 800f302:	b90d      	cbnz	r5, 800f308 <_printf_i+0x110>
 800f304:	2e00      	cmp	r6, #0
 800f306:	d04b      	beq.n	800f3a0 <_printf_i+0x1a8>
 800f308:	4616      	mov	r6, r2
 800f30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f30e:	fb03 5711 	mls	r7, r3, r1, r5
 800f312:	5dc7      	ldrb	r7, [r0, r7]
 800f314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f318:	462f      	mov	r7, r5
 800f31a:	42bb      	cmp	r3, r7
 800f31c:	460d      	mov	r5, r1
 800f31e:	d9f4      	bls.n	800f30a <_printf_i+0x112>
 800f320:	2b08      	cmp	r3, #8
 800f322:	d10b      	bne.n	800f33c <_printf_i+0x144>
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	07df      	lsls	r7, r3, #31
 800f328:	d508      	bpl.n	800f33c <_printf_i+0x144>
 800f32a:	6923      	ldr	r3, [r4, #16]
 800f32c:	6861      	ldr	r1, [r4, #4]
 800f32e:	4299      	cmp	r1, r3
 800f330:	bfde      	ittt	le
 800f332:	2330      	movle	r3, #48	@ 0x30
 800f334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f33c:	1b92      	subs	r2, r2, r6
 800f33e:	6122      	str	r2, [r4, #16]
 800f340:	f8cd a000 	str.w	sl, [sp]
 800f344:	464b      	mov	r3, r9
 800f346:	aa03      	add	r2, sp, #12
 800f348:	4621      	mov	r1, r4
 800f34a:	4640      	mov	r0, r8
 800f34c:	f7ff fee6 	bl	800f11c <_printf_common>
 800f350:	3001      	adds	r0, #1
 800f352:	d14a      	bne.n	800f3ea <_printf_i+0x1f2>
 800f354:	f04f 30ff 	mov.w	r0, #4294967295
 800f358:	b004      	add	sp, #16
 800f35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	f043 0320 	orr.w	r3, r3, #32
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	4833      	ldr	r0, [pc, #204]	@ (800f434 <_printf_i+0x23c>)
 800f368:	2778      	movs	r7, #120	@ 0x78
 800f36a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	6831      	ldr	r1, [r6, #0]
 800f372:	061f      	lsls	r7, r3, #24
 800f374:	f851 5b04 	ldr.w	r5, [r1], #4
 800f378:	d402      	bmi.n	800f380 <_printf_i+0x188>
 800f37a:	065f      	lsls	r7, r3, #25
 800f37c:	bf48      	it	mi
 800f37e:	b2ad      	uxthmi	r5, r5
 800f380:	6031      	str	r1, [r6, #0]
 800f382:	07d9      	lsls	r1, r3, #31
 800f384:	bf44      	itt	mi
 800f386:	f043 0320 	orrmi.w	r3, r3, #32
 800f38a:	6023      	strmi	r3, [r4, #0]
 800f38c:	b11d      	cbz	r5, 800f396 <_printf_i+0x19e>
 800f38e:	2310      	movs	r3, #16
 800f390:	e7ac      	b.n	800f2ec <_printf_i+0xf4>
 800f392:	4827      	ldr	r0, [pc, #156]	@ (800f430 <_printf_i+0x238>)
 800f394:	e7e9      	b.n	800f36a <_printf_i+0x172>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	f023 0320 	bic.w	r3, r3, #32
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	e7f6      	b.n	800f38e <_printf_i+0x196>
 800f3a0:	4616      	mov	r6, r2
 800f3a2:	e7bd      	b.n	800f320 <_printf_i+0x128>
 800f3a4:	6833      	ldr	r3, [r6, #0]
 800f3a6:	6825      	ldr	r5, [r4, #0]
 800f3a8:	6961      	ldr	r1, [r4, #20]
 800f3aa:	1d18      	adds	r0, r3, #4
 800f3ac:	6030      	str	r0, [r6, #0]
 800f3ae:	062e      	lsls	r6, r5, #24
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	d501      	bpl.n	800f3b8 <_printf_i+0x1c0>
 800f3b4:	6019      	str	r1, [r3, #0]
 800f3b6:	e002      	b.n	800f3be <_printf_i+0x1c6>
 800f3b8:	0668      	lsls	r0, r5, #25
 800f3ba:	d5fb      	bpl.n	800f3b4 <_printf_i+0x1bc>
 800f3bc:	8019      	strh	r1, [r3, #0]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	6123      	str	r3, [r4, #16]
 800f3c2:	4616      	mov	r6, r2
 800f3c4:	e7bc      	b.n	800f340 <_printf_i+0x148>
 800f3c6:	6833      	ldr	r3, [r6, #0]
 800f3c8:	1d1a      	adds	r2, r3, #4
 800f3ca:	6032      	str	r2, [r6, #0]
 800f3cc:	681e      	ldr	r6, [r3, #0]
 800f3ce:	6862      	ldr	r2, [r4, #4]
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f7f0 ff8c 	bl	80002f0 <memchr>
 800f3d8:	b108      	cbz	r0, 800f3de <_printf_i+0x1e6>
 800f3da:	1b80      	subs	r0, r0, r6
 800f3dc:	6060      	str	r0, [r4, #4]
 800f3de:	6863      	ldr	r3, [r4, #4]
 800f3e0:	6123      	str	r3, [r4, #16]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3e8:	e7aa      	b.n	800f340 <_printf_i+0x148>
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	4632      	mov	r2, r6
 800f3ee:	4649      	mov	r1, r9
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	47d0      	blx	sl
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d0ad      	beq.n	800f354 <_printf_i+0x15c>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	079b      	lsls	r3, r3, #30
 800f3fc:	d413      	bmi.n	800f426 <_printf_i+0x22e>
 800f3fe:	68e0      	ldr	r0, [r4, #12]
 800f400:	9b03      	ldr	r3, [sp, #12]
 800f402:	4298      	cmp	r0, r3
 800f404:	bfb8      	it	lt
 800f406:	4618      	movlt	r0, r3
 800f408:	e7a6      	b.n	800f358 <_printf_i+0x160>
 800f40a:	2301      	movs	r3, #1
 800f40c:	4632      	mov	r2, r6
 800f40e:	4649      	mov	r1, r9
 800f410:	4640      	mov	r0, r8
 800f412:	47d0      	blx	sl
 800f414:	3001      	adds	r0, #1
 800f416:	d09d      	beq.n	800f354 <_printf_i+0x15c>
 800f418:	3501      	adds	r5, #1
 800f41a:	68e3      	ldr	r3, [r4, #12]
 800f41c:	9903      	ldr	r1, [sp, #12]
 800f41e:	1a5b      	subs	r3, r3, r1
 800f420:	42ab      	cmp	r3, r5
 800f422:	dcf2      	bgt.n	800f40a <_printf_i+0x212>
 800f424:	e7eb      	b.n	800f3fe <_printf_i+0x206>
 800f426:	2500      	movs	r5, #0
 800f428:	f104 0619 	add.w	r6, r4, #25
 800f42c:	e7f5      	b.n	800f41a <_printf_i+0x222>
 800f42e:	bf00      	nop
 800f430:	08010e2a 	.word	0x08010e2a
 800f434:	08010e3b 	.word	0x08010e3b

0800f438 <__sflush_r>:
 800f438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f440:	0716      	lsls	r6, r2, #28
 800f442:	4605      	mov	r5, r0
 800f444:	460c      	mov	r4, r1
 800f446:	d454      	bmi.n	800f4f2 <__sflush_r+0xba>
 800f448:	684b      	ldr	r3, [r1, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	dc02      	bgt.n	800f454 <__sflush_r+0x1c>
 800f44e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f450:	2b00      	cmp	r3, #0
 800f452:	dd48      	ble.n	800f4e6 <__sflush_r+0xae>
 800f454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f456:	2e00      	cmp	r6, #0
 800f458:	d045      	beq.n	800f4e6 <__sflush_r+0xae>
 800f45a:	2300      	movs	r3, #0
 800f45c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f460:	682f      	ldr	r7, [r5, #0]
 800f462:	6a21      	ldr	r1, [r4, #32]
 800f464:	602b      	str	r3, [r5, #0]
 800f466:	d030      	beq.n	800f4ca <__sflush_r+0x92>
 800f468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	0759      	lsls	r1, r3, #29
 800f46e:	d505      	bpl.n	800f47c <__sflush_r+0x44>
 800f470:	6863      	ldr	r3, [r4, #4]
 800f472:	1ad2      	subs	r2, r2, r3
 800f474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f476:	b10b      	cbz	r3, 800f47c <__sflush_r+0x44>
 800f478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f47a:	1ad2      	subs	r2, r2, r3
 800f47c:	2300      	movs	r3, #0
 800f47e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f480:	6a21      	ldr	r1, [r4, #32]
 800f482:	4628      	mov	r0, r5
 800f484:	47b0      	blx	r6
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	d106      	bne.n	800f49a <__sflush_r+0x62>
 800f48c:	6829      	ldr	r1, [r5, #0]
 800f48e:	291d      	cmp	r1, #29
 800f490:	d82b      	bhi.n	800f4ea <__sflush_r+0xb2>
 800f492:	4a2a      	ldr	r2, [pc, #168]	@ (800f53c <__sflush_r+0x104>)
 800f494:	410a      	asrs	r2, r1
 800f496:	07d6      	lsls	r6, r2, #31
 800f498:	d427      	bmi.n	800f4ea <__sflush_r+0xb2>
 800f49a:	2200      	movs	r2, #0
 800f49c:	6062      	str	r2, [r4, #4]
 800f49e:	04d9      	lsls	r1, r3, #19
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	6022      	str	r2, [r4, #0]
 800f4a4:	d504      	bpl.n	800f4b0 <__sflush_r+0x78>
 800f4a6:	1c42      	adds	r2, r0, #1
 800f4a8:	d101      	bne.n	800f4ae <__sflush_r+0x76>
 800f4aa:	682b      	ldr	r3, [r5, #0]
 800f4ac:	b903      	cbnz	r3, 800f4b0 <__sflush_r+0x78>
 800f4ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4b2:	602f      	str	r7, [r5, #0]
 800f4b4:	b1b9      	cbz	r1, 800f4e6 <__sflush_r+0xae>
 800f4b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	d002      	beq.n	800f4c4 <__sflush_r+0x8c>
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7fe fbcc 	bl	800dc5c <_free_r>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4c8:	e00d      	b.n	800f4e6 <__sflush_r+0xae>
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	47b0      	blx	r6
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	1c50      	adds	r0, r2, #1
 800f4d4:	d1c9      	bne.n	800f46a <__sflush_r+0x32>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d0c6      	beq.n	800f46a <__sflush_r+0x32>
 800f4dc:	2b1d      	cmp	r3, #29
 800f4de:	d001      	beq.n	800f4e4 <__sflush_r+0xac>
 800f4e0:	2b16      	cmp	r3, #22
 800f4e2:	d11e      	bne.n	800f522 <__sflush_r+0xea>
 800f4e4:	602f      	str	r7, [r5, #0]
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	e022      	b.n	800f530 <__sflush_r+0xf8>
 800f4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ee:	b21b      	sxth	r3, r3
 800f4f0:	e01b      	b.n	800f52a <__sflush_r+0xf2>
 800f4f2:	690f      	ldr	r7, [r1, #16]
 800f4f4:	2f00      	cmp	r7, #0
 800f4f6:	d0f6      	beq.n	800f4e6 <__sflush_r+0xae>
 800f4f8:	0793      	lsls	r3, r2, #30
 800f4fa:	680e      	ldr	r6, [r1, #0]
 800f4fc:	bf08      	it	eq
 800f4fe:	694b      	ldreq	r3, [r1, #20]
 800f500:	600f      	str	r7, [r1, #0]
 800f502:	bf18      	it	ne
 800f504:	2300      	movne	r3, #0
 800f506:	eba6 0807 	sub.w	r8, r6, r7
 800f50a:	608b      	str	r3, [r1, #8]
 800f50c:	f1b8 0f00 	cmp.w	r8, #0
 800f510:	dde9      	ble.n	800f4e6 <__sflush_r+0xae>
 800f512:	6a21      	ldr	r1, [r4, #32]
 800f514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f516:	4643      	mov	r3, r8
 800f518:	463a      	mov	r2, r7
 800f51a:	4628      	mov	r0, r5
 800f51c:	47b0      	blx	r6
 800f51e:	2800      	cmp	r0, #0
 800f520:	dc08      	bgt.n	800f534 <__sflush_r+0xfc>
 800f522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f52a:	81a3      	strh	r3, [r4, #12]
 800f52c:	f04f 30ff 	mov.w	r0, #4294967295
 800f530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f534:	4407      	add	r7, r0
 800f536:	eba8 0800 	sub.w	r8, r8, r0
 800f53a:	e7e7      	b.n	800f50c <__sflush_r+0xd4>
 800f53c:	dfbffffe 	.word	0xdfbffffe

0800f540 <_fflush_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	690b      	ldr	r3, [r1, #16]
 800f544:	4605      	mov	r5, r0
 800f546:	460c      	mov	r4, r1
 800f548:	b913      	cbnz	r3, 800f550 <_fflush_r+0x10>
 800f54a:	2500      	movs	r5, #0
 800f54c:	4628      	mov	r0, r5
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
 800f550:	b118      	cbz	r0, 800f55a <_fflush_r+0x1a>
 800f552:	6a03      	ldr	r3, [r0, #32]
 800f554:	b90b      	cbnz	r3, 800f55a <_fflush_r+0x1a>
 800f556:	f7fe f9b5 	bl	800d8c4 <__sinit>
 800f55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d0f3      	beq.n	800f54a <_fflush_r+0xa>
 800f562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f564:	07d0      	lsls	r0, r2, #31
 800f566:	d404      	bmi.n	800f572 <_fflush_r+0x32>
 800f568:	0599      	lsls	r1, r3, #22
 800f56a:	d402      	bmi.n	800f572 <_fflush_r+0x32>
 800f56c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f56e:	f7fe fb3c 	bl	800dbea <__retarget_lock_acquire_recursive>
 800f572:	4628      	mov	r0, r5
 800f574:	4621      	mov	r1, r4
 800f576:	f7ff ff5f 	bl	800f438 <__sflush_r>
 800f57a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f57c:	07da      	lsls	r2, r3, #31
 800f57e:	4605      	mov	r5, r0
 800f580:	d4e4      	bmi.n	800f54c <_fflush_r+0xc>
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	059b      	lsls	r3, r3, #22
 800f586:	d4e1      	bmi.n	800f54c <_fflush_r+0xc>
 800f588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f58a:	f7fe fb2f 	bl	800dbec <__retarget_lock_release_recursive>
 800f58e:	e7dd      	b.n	800f54c <_fflush_r+0xc>

0800f590 <fiprintf>:
 800f590:	b40e      	push	{r1, r2, r3}
 800f592:	b503      	push	{r0, r1, lr}
 800f594:	4601      	mov	r1, r0
 800f596:	ab03      	add	r3, sp, #12
 800f598:	4805      	ldr	r0, [pc, #20]	@ (800f5b0 <fiprintf+0x20>)
 800f59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f59e:	6800      	ldr	r0, [r0, #0]
 800f5a0:	9301      	str	r3, [sp, #4]
 800f5a2:	f000 f8a3 	bl	800f6ec <_vfiprintf_r>
 800f5a6:	b002      	add	sp, #8
 800f5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ac:	b003      	add	sp, #12
 800f5ae:	4770      	bx	lr
 800f5b0:	240001b0 	.word	0x240001b0

0800f5b4 <memmove>:
 800f5b4:	4288      	cmp	r0, r1
 800f5b6:	b510      	push	{r4, lr}
 800f5b8:	eb01 0402 	add.w	r4, r1, r2
 800f5bc:	d902      	bls.n	800f5c4 <memmove+0x10>
 800f5be:	4284      	cmp	r4, r0
 800f5c0:	4623      	mov	r3, r4
 800f5c2:	d807      	bhi.n	800f5d4 <memmove+0x20>
 800f5c4:	1e43      	subs	r3, r0, #1
 800f5c6:	42a1      	cmp	r1, r4
 800f5c8:	d008      	beq.n	800f5dc <memmove+0x28>
 800f5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5d2:	e7f8      	b.n	800f5c6 <memmove+0x12>
 800f5d4:	4402      	add	r2, r0
 800f5d6:	4601      	mov	r1, r0
 800f5d8:	428a      	cmp	r2, r1
 800f5da:	d100      	bne.n	800f5de <memmove+0x2a>
 800f5dc:	bd10      	pop	{r4, pc}
 800f5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5e6:	e7f7      	b.n	800f5d8 <memmove+0x24>

0800f5e8 <_sbrk_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d06      	ldr	r5, [pc, #24]	@ (800f604 <_sbrk_r+0x1c>)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	f7f4 fbfc 	bl	8003df0 <_sbrk>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d102      	bne.n	800f602 <_sbrk_r+0x1a>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b103      	cbz	r3, 800f602 <_sbrk_r+0x1a>
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	24000744 	.word	0x24000744

0800f608 <abort>:
 800f608:	b508      	push	{r3, lr}
 800f60a:	2006      	movs	r0, #6
 800f60c:	f000 fa42 	bl	800fa94 <raise>
 800f610:	2001      	movs	r0, #1
 800f612:	f7f4 fb75 	bl	8003d00 <_exit>

0800f616 <_calloc_r>:
 800f616:	b570      	push	{r4, r5, r6, lr}
 800f618:	fba1 5402 	umull	r5, r4, r1, r2
 800f61c:	b93c      	cbnz	r4, 800f62e <_calloc_r+0x18>
 800f61e:	4629      	mov	r1, r5
 800f620:	f7fe feca 	bl	800e3b8 <_malloc_r>
 800f624:	4606      	mov	r6, r0
 800f626:	b928      	cbnz	r0, 800f634 <_calloc_r+0x1e>
 800f628:	2600      	movs	r6, #0
 800f62a:	4630      	mov	r0, r6
 800f62c:	bd70      	pop	{r4, r5, r6, pc}
 800f62e:	220c      	movs	r2, #12
 800f630:	6002      	str	r2, [r0, #0]
 800f632:	e7f9      	b.n	800f628 <_calloc_r+0x12>
 800f634:	462a      	mov	r2, r5
 800f636:	4621      	mov	r1, r4
 800f638:	f7fe f9dd 	bl	800d9f6 <memset>
 800f63c:	e7f5      	b.n	800f62a <_calloc_r+0x14>

0800f63e <_realloc_r>:
 800f63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f642:	4680      	mov	r8, r0
 800f644:	4615      	mov	r5, r2
 800f646:	460c      	mov	r4, r1
 800f648:	b921      	cbnz	r1, 800f654 <_realloc_r+0x16>
 800f64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f64e:	4611      	mov	r1, r2
 800f650:	f7fe beb2 	b.w	800e3b8 <_malloc_r>
 800f654:	b92a      	cbnz	r2, 800f662 <_realloc_r+0x24>
 800f656:	f7fe fb01 	bl	800dc5c <_free_r>
 800f65a:	2400      	movs	r4, #0
 800f65c:	4620      	mov	r0, r4
 800f65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f662:	f000 fa33 	bl	800facc <_malloc_usable_size_r>
 800f666:	4285      	cmp	r5, r0
 800f668:	4606      	mov	r6, r0
 800f66a:	d802      	bhi.n	800f672 <_realloc_r+0x34>
 800f66c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f670:	d8f4      	bhi.n	800f65c <_realloc_r+0x1e>
 800f672:	4629      	mov	r1, r5
 800f674:	4640      	mov	r0, r8
 800f676:	f7fe fe9f 	bl	800e3b8 <_malloc_r>
 800f67a:	4607      	mov	r7, r0
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d0ec      	beq.n	800f65a <_realloc_r+0x1c>
 800f680:	42b5      	cmp	r5, r6
 800f682:	462a      	mov	r2, r5
 800f684:	4621      	mov	r1, r4
 800f686:	bf28      	it	cs
 800f688:	4632      	movcs	r2, r6
 800f68a:	f7fe fab0 	bl	800dbee <memcpy>
 800f68e:	4621      	mov	r1, r4
 800f690:	4640      	mov	r0, r8
 800f692:	f7fe fae3 	bl	800dc5c <_free_r>
 800f696:	463c      	mov	r4, r7
 800f698:	e7e0      	b.n	800f65c <_realloc_r+0x1e>

0800f69a <__sfputc_r>:
 800f69a:	6893      	ldr	r3, [r2, #8]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	b410      	push	{r4}
 800f6a2:	6093      	str	r3, [r2, #8]
 800f6a4:	da08      	bge.n	800f6b8 <__sfputc_r+0x1e>
 800f6a6:	6994      	ldr	r4, [r2, #24]
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	db01      	blt.n	800f6b0 <__sfputc_r+0x16>
 800f6ac:	290a      	cmp	r1, #10
 800f6ae:	d103      	bne.n	800f6b8 <__sfputc_r+0x1e>
 800f6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b4:	f000 b932 	b.w	800f91c <__swbuf_r>
 800f6b8:	6813      	ldr	r3, [r2, #0]
 800f6ba:	1c58      	adds	r0, r3, #1
 800f6bc:	6010      	str	r0, [r2, #0]
 800f6be:	7019      	strb	r1, [r3, #0]
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <__sfputs_r>:
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	4614      	mov	r4, r2
 800f6d0:	18d5      	adds	r5, r2, r3
 800f6d2:	42ac      	cmp	r4, r5
 800f6d4:	d101      	bne.n	800f6da <__sfputs_r+0x12>
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	e007      	b.n	800f6ea <__sfputs_r+0x22>
 800f6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6de:	463a      	mov	r2, r7
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7ff ffda 	bl	800f69a <__sfputc_r>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d1f3      	bne.n	800f6d2 <__sfputs_r+0xa>
 800f6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6ec <_vfiprintf_r>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	460d      	mov	r5, r1
 800f6f2:	b09d      	sub	sp, #116	@ 0x74
 800f6f4:	4614      	mov	r4, r2
 800f6f6:	4698      	mov	r8, r3
 800f6f8:	4606      	mov	r6, r0
 800f6fa:	b118      	cbz	r0, 800f704 <_vfiprintf_r+0x18>
 800f6fc:	6a03      	ldr	r3, [r0, #32]
 800f6fe:	b90b      	cbnz	r3, 800f704 <_vfiprintf_r+0x18>
 800f700:	f7fe f8e0 	bl	800d8c4 <__sinit>
 800f704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f706:	07d9      	lsls	r1, r3, #31
 800f708:	d405      	bmi.n	800f716 <_vfiprintf_r+0x2a>
 800f70a:	89ab      	ldrh	r3, [r5, #12]
 800f70c:	059a      	lsls	r2, r3, #22
 800f70e:	d402      	bmi.n	800f716 <_vfiprintf_r+0x2a>
 800f710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f712:	f7fe fa6a 	bl	800dbea <__retarget_lock_acquire_recursive>
 800f716:	89ab      	ldrh	r3, [r5, #12]
 800f718:	071b      	lsls	r3, r3, #28
 800f71a:	d501      	bpl.n	800f720 <_vfiprintf_r+0x34>
 800f71c:	692b      	ldr	r3, [r5, #16]
 800f71e:	b99b      	cbnz	r3, 800f748 <_vfiprintf_r+0x5c>
 800f720:	4629      	mov	r1, r5
 800f722:	4630      	mov	r0, r6
 800f724:	f000 f938 	bl	800f998 <__swsetup_r>
 800f728:	b170      	cbz	r0, 800f748 <_vfiprintf_r+0x5c>
 800f72a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f72c:	07dc      	lsls	r4, r3, #31
 800f72e:	d504      	bpl.n	800f73a <_vfiprintf_r+0x4e>
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	b01d      	add	sp, #116	@ 0x74
 800f736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73a:	89ab      	ldrh	r3, [r5, #12]
 800f73c:	0598      	lsls	r0, r3, #22
 800f73e:	d4f7      	bmi.n	800f730 <_vfiprintf_r+0x44>
 800f740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f742:	f7fe fa53 	bl	800dbec <__retarget_lock_release_recursive>
 800f746:	e7f3      	b.n	800f730 <_vfiprintf_r+0x44>
 800f748:	2300      	movs	r3, #0
 800f74a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f74c:	2320      	movs	r3, #32
 800f74e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f752:	f8cd 800c 	str.w	r8, [sp, #12]
 800f756:	2330      	movs	r3, #48	@ 0x30
 800f758:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f908 <_vfiprintf_r+0x21c>
 800f75c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f760:	f04f 0901 	mov.w	r9, #1
 800f764:	4623      	mov	r3, r4
 800f766:	469a      	mov	sl, r3
 800f768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f76c:	b10a      	cbz	r2, 800f772 <_vfiprintf_r+0x86>
 800f76e:	2a25      	cmp	r2, #37	@ 0x25
 800f770:	d1f9      	bne.n	800f766 <_vfiprintf_r+0x7a>
 800f772:	ebba 0b04 	subs.w	fp, sl, r4
 800f776:	d00b      	beq.n	800f790 <_vfiprintf_r+0xa4>
 800f778:	465b      	mov	r3, fp
 800f77a:	4622      	mov	r2, r4
 800f77c:	4629      	mov	r1, r5
 800f77e:	4630      	mov	r0, r6
 800f780:	f7ff ffa2 	bl	800f6c8 <__sfputs_r>
 800f784:	3001      	adds	r0, #1
 800f786:	f000 80a7 	beq.w	800f8d8 <_vfiprintf_r+0x1ec>
 800f78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f78c:	445a      	add	r2, fp
 800f78e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f790:	f89a 3000 	ldrb.w	r3, [sl]
 800f794:	2b00      	cmp	r3, #0
 800f796:	f000 809f 	beq.w	800f8d8 <_vfiprintf_r+0x1ec>
 800f79a:	2300      	movs	r3, #0
 800f79c:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7a4:	f10a 0a01 	add.w	sl, sl, #1
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	9307      	str	r3, [sp, #28]
 800f7ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7b2:	4654      	mov	r4, sl
 800f7b4:	2205      	movs	r2, #5
 800f7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ba:	4853      	ldr	r0, [pc, #332]	@ (800f908 <_vfiprintf_r+0x21c>)
 800f7bc:	f7f0 fd98 	bl	80002f0 <memchr>
 800f7c0:	9a04      	ldr	r2, [sp, #16]
 800f7c2:	b9d8      	cbnz	r0, 800f7fc <_vfiprintf_r+0x110>
 800f7c4:	06d1      	lsls	r1, r2, #27
 800f7c6:	bf44      	itt	mi
 800f7c8:	2320      	movmi	r3, #32
 800f7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7ce:	0713      	lsls	r3, r2, #28
 800f7d0:	bf44      	itt	mi
 800f7d2:	232b      	movmi	r3, #43	@ 0x2b
 800f7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7de:	d015      	beq.n	800f80c <_vfiprintf_r+0x120>
 800f7e0:	9a07      	ldr	r2, [sp, #28]
 800f7e2:	4654      	mov	r4, sl
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	f04f 0c0a 	mov.w	ip, #10
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7f0:	3b30      	subs	r3, #48	@ 0x30
 800f7f2:	2b09      	cmp	r3, #9
 800f7f4:	d94b      	bls.n	800f88e <_vfiprintf_r+0x1a2>
 800f7f6:	b1b0      	cbz	r0, 800f826 <_vfiprintf_r+0x13a>
 800f7f8:	9207      	str	r2, [sp, #28]
 800f7fa:	e014      	b.n	800f826 <_vfiprintf_r+0x13a>
 800f7fc:	eba0 0308 	sub.w	r3, r0, r8
 800f800:	fa09 f303 	lsl.w	r3, r9, r3
 800f804:	4313      	orrs	r3, r2
 800f806:	9304      	str	r3, [sp, #16]
 800f808:	46a2      	mov	sl, r4
 800f80a:	e7d2      	b.n	800f7b2 <_vfiprintf_r+0xc6>
 800f80c:	9b03      	ldr	r3, [sp, #12]
 800f80e:	1d19      	adds	r1, r3, #4
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	9103      	str	r1, [sp, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	bfbb      	ittet	lt
 800f818:	425b      	neglt	r3, r3
 800f81a:	f042 0202 	orrlt.w	r2, r2, #2
 800f81e:	9307      	strge	r3, [sp, #28]
 800f820:	9307      	strlt	r3, [sp, #28]
 800f822:	bfb8      	it	lt
 800f824:	9204      	strlt	r2, [sp, #16]
 800f826:	7823      	ldrb	r3, [r4, #0]
 800f828:	2b2e      	cmp	r3, #46	@ 0x2e
 800f82a:	d10a      	bne.n	800f842 <_vfiprintf_r+0x156>
 800f82c:	7863      	ldrb	r3, [r4, #1]
 800f82e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f830:	d132      	bne.n	800f898 <_vfiprintf_r+0x1ac>
 800f832:	9b03      	ldr	r3, [sp, #12]
 800f834:	1d1a      	adds	r2, r3, #4
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	9203      	str	r2, [sp, #12]
 800f83a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f83e:	3402      	adds	r4, #2
 800f840:	9305      	str	r3, [sp, #20]
 800f842:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f918 <_vfiprintf_r+0x22c>
 800f846:	7821      	ldrb	r1, [r4, #0]
 800f848:	2203      	movs	r2, #3
 800f84a:	4650      	mov	r0, sl
 800f84c:	f7f0 fd50 	bl	80002f0 <memchr>
 800f850:	b138      	cbz	r0, 800f862 <_vfiprintf_r+0x176>
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	eba0 000a 	sub.w	r0, r0, sl
 800f858:	2240      	movs	r2, #64	@ 0x40
 800f85a:	4082      	lsls	r2, r0
 800f85c:	4313      	orrs	r3, r2
 800f85e:	3401      	adds	r4, #1
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f866:	4829      	ldr	r0, [pc, #164]	@ (800f90c <_vfiprintf_r+0x220>)
 800f868:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f86c:	2206      	movs	r2, #6
 800f86e:	f7f0 fd3f 	bl	80002f0 <memchr>
 800f872:	2800      	cmp	r0, #0
 800f874:	d03f      	beq.n	800f8f6 <_vfiprintf_r+0x20a>
 800f876:	4b26      	ldr	r3, [pc, #152]	@ (800f910 <_vfiprintf_r+0x224>)
 800f878:	bb1b      	cbnz	r3, 800f8c2 <_vfiprintf_r+0x1d6>
 800f87a:	9b03      	ldr	r3, [sp, #12]
 800f87c:	3307      	adds	r3, #7
 800f87e:	f023 0307 	bic.w	r3, r3, #7
 800f882:	3308      	adds	r3, #8
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f888:	443b      	add	r3, r7
 800f88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f88c:	e76a      	b.n	800f764 <_vfiprintf_r+0x78>
 800f88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f892:	460c      	mov	r4, r1
 800f894:	2001      	movs	r0, #1
 800f896:	e7a8      	b.n	800f7ea <_vfiprintf_r+0xfe>
 800f898:	2300      	movs	r3, #0
 800f89a:	3401      	adds	r4, #1
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	f04f 0c0a 	mov.w	ip, #10
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8aa:	3a30      	subs	r2, #48	@ 0x30
 800f8ac:	2a09      	cmp	r2, #9
 800f8ae:	d903      	bls.n	800f8b8 <_vfiprintf_r+0x1cc>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d0c6      	beq.n	800f842 <_vfiprintf_r+0x156>
 800f8b4:	9105      	str	r1, [sp, #20]
 800f8b6:	e7c4      	b.n	800f842 <_vfiprintf_r+0x156>
 800f8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8bc:	4604      	mov	r4, r0
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e7f0      	b.n	800f8a4 <_vfiprintf_r+0x1b8>
 800f8c2:	ab03      	add	r3, sp, #12
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	4b12      	ldr	r3, [pc, #72]	@ (800f914 <_vfiprintf_r+0x228>)
 800f8ca:	a904      	add	r1, sp, #16
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f3af 8000 	nop.w
 800f8d2:	4607      	mov	r7, r0
 800f8d4:	1c78      	adds	r0, r7, #1
 800f8d6:	d1d6      	bne.n	800f886 <_vfiprintf_r+0x19a>
 800f8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8da:	07d9      	lsls	r1, r3, #31
 800f8dc:	d405      	bmi.n	800f8ea <_vfiprintf_r+0x1fe>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	059a      	lsls	r2, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_vfiprintf_r+0x1fe>
 800f8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8e6:	f7fe f981 	bl	800dbec <__retarget_lock_release_recursive>
 800f8ea:	89ab      	ldrh	r3, [r5, #12]
 800f8ec:	065b      	lsls	r3, r3, #25
 800f8ee:	f53f af1f 	bmi.w	800f730 <_vfiprintf_r+0x44>
 800f8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8f4:	e71e      	b.n	800f734 <_vfiprintf_r+0x48>
 800f8f6:	ab03      	add	r3, sp, #12
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	462a      	mov	r2, r5
 800f8fc:	4b05      	ldr	r3, [pc, #20]	@ (800f914 <_vfiprintf_r+0x228>)
 800f8fe:	a904      	add	r1, sp, #16
 800f900:	4630      	mov	r0, r6
 800f902:	f7ff fc79 	bl	800f1f8 <_printf_i>
 800f906:	e7e4      	b.n	800f8d2 <_vfiprintf_r+0x1e6>
 800f908:	08010e19 	.word	0x08010e19
 800f90c:	08010e23 	.word	0x08010e23
 800f910:	00000000 	.word	0x00000000
 800f914:	0800f6c9 	.word	0x0800f6c9
 800f918:	08010e1f 	.word	0x08010e1f

0800f91c <__swbuf_r>:
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	460e      	mov	r6, r1
 800f920:	4614      	mov	r4, r2
 800f922:	4605      	mov	r5, r0
 800f924:	b118      	cbz	r0, 800f92e <__swbuf_r+0x12>
 800f926:	6a03      	ldr	r3, [r0, #32]
 800f928:	b90b      	cbnz	r3, 800f92e <__swbuf_r+0x12>
 800f92a:	f7fd ffcb 	bl	800d8c4 <__sinit>
 800f92e:	69a3      	ldr	r3, [r4, #24]
 800f930:	60a3      	str	r3, [r4, #8]
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	071a      	lsls	r2, r3, #28
 800f936:	d501      	bpl.n	800f93c <__swbuf_r+0x20>
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	b943      	cbnz	r3, 800f94e <__swbuf_r+0x32>
 800f93c:	4621      	mov	r1, r4
 800f93e:	4628      	mov	r0, r5
 800f940:	f000 f82a 	bl	800f998 <__swsetup_r>
 800f944:	b118      	cbz	r0, 800f94e <__swbuf_r+0x32>
 800f946:	f04f 37ff 	mov.w	r7, #4294967295
 800f94a:	4638      	mov	r0, r7
 800f94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	6922      	ldr	r2, [r4, #16]
 800f952:	1a98      	subs	r0, r3, r2
 800f954:	6963      	ldr	r3, [r4, #20]
 800f956:	b2f6      	uxtb	r6, r6
 800f958:	4283      	cmp	r3, r0
 800f95a:	4637      	mov	r7, r6
 800f95c:	dc05      	bgt.n	800f96a <__swbuf_r+0x4e>
 800f95e:	4621      	mov	r1, r4
 800f960:	4628      	mov	r0, r5
 800f962:	f7ff fded 	bl	800f540 <_fflush_r>
 800f966:	2800      	cmp	r0, #0
 800f968:	d1ed      	bne.n	800f946 <__swbuf_r+0x2a>
 800f96a:	68a3      	ldr	r3, [r4, #8]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	60a3      	str	r3, [r4, #8]
 800f970:	6823      	ldr	r3, [r4, #0]
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	6022      	str	r2, [r4, #0]
 800f976:	701e      	strb	r6, [r3, #0]
 800f978:	6962      	ldr	r2, [r4, #20]
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d004      	beq.n	800f98a <__swbuf_r+0x6e>
 800f980:	89a3      	ldrh	r3, [r4, #12]
 800f982:	07db      	lsls	r3, r3, #31
 800f984:	d5e1      	bpl.n	800f94a <__swbuf_r+0x2e>
 800f986:	2e0a      	cmp	r6, #10
 800f988:	d1df      	bne.n	800f94a <__swbuf_r+0x2e>
 800f98a:	4621      	mov	r1, r4
 800f98c:	4628      	mov	r0, r5
 800f98e:	f7ff fdd7 	bl	800f540 <_fflush_r>
 800f992:	2800      	cmp	r0, #0
 800f994:	d0d9      	beq.n	800f94a <__swbuf_r+0x2e>
 800f996:	e7d6      	b.n	800f946 <__swbuf_r+0x2a>

0800f998 <__swsetup_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	4b29      	ldr	r3, [pc, #164]	@ (800fa40 <__swsetup_r+0xa8>)
 800f99c:	4605      	mov	r5, r0
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	b118      	cbz	r0, 800f9ac <__swsetup_r+0x14>
 800f9a4:	6a03      	ldr	r3, [r0, #32]
 800f9a6:	b90b      	cbnz	r3, 800f9ac <__swsetup_r+0x14>
 800f9a8:	f7fd ff8c 	bl	800d8c4 <__sinit>
 800f9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b0:	0719      	lsls	r1, r3, #28
 800f9b2:	d422      	bmi.n	800f9fa <__swsetup_r+0x62>
 800f9b4:	06da      	lsls	r2, r3, #27
 800f9b6:	d407      	bmi.n	800f9c8 <__swsetup_r+0x30>
 800f9b8:	2209      	movs	r2, #9
 800f9ba:	602a      	str	r2, [r5, #0]
 800f9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9c0:	81a3      	strh	r3, [r4, #12]
 800f9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c6:	e033      	b.n	800fa30 <__swsetup_r+0x98>
 800f9c8:	0758      	lsls	r0, r3, #29
 800f9ca:	d512      	bpl.n	800f9f2 <__swsetup_r+0x5a>
 800f9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9ce:	b141      	cbz	r1, 800f9e2 <__swsetup_r+0x4a>
 800f9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9d4:	4299      	cmp	r1, r3
 800f9d6:	d002      	beq.n	800f9de <__swsetup_r+0x46>
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f7fe f93f 	bl	800dc5c <_free_r>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	6063      	str	r3, [r4, #4]
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	89a3      	ldrh	r3, [r4, #12]
 800f9f4:	f043 0308 	orr.w	r3, r3, #8
 800f9f8:	81a3      	strh	r3, [r4, #12]
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	b94b      	cbnz	r3, 800fa12 <__swsetup_r+0x7a>
 800f9fe:	89a3      	ldrh	r3, [r4, #12]
 800fa00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa08:	d003      	beq.n	800fa12 <__swsetup_r+0x7a>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f000 f88b 	bl	800fb28 <__smakebuf_r>
 800fa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa16:	f013 0201 	ands.w	r2, r3, #1
 800fa1a:	d00a      	beq.n	800fa32 <__swsetup_r+0x9a>
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	60a2      	str	r2, [r4, #8]
 800fa20:	6962      	ldr	r2, [r4, #20]
 800fa22:	4252      	negs	r2, r2
 800fa24:	61a2      	str	r2, [r4, #24]
 800fa26:	6922      	ldr	r2, [r4, #16]
 800fa28:	b942      	cbnz	r2, 800fa3c <__swsetup_r+0xa4>
 800fa2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa2e:	d1c5      	bne.n	800f9bc <__swsetup_r+0x24>
 800fa30:	bd38      	pop	{r3, r4, r5, pc}
 800fa32:	0799      	lsls	r1, r3, #30
 800fa34:	bf58      	it	pl
 800fa36:	6962      	ldrpl	r2, [r4, #20]
 800fa38:	60a2      	str	r2, [r4, #8]
 800fa3a:	e7f4      	b.n	800fa26 <__swsetup_r+0x8e>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e7f7      	b.n	800fa30 <__swsetup_r+0x98>
 800fa40:	240001b0 	.word	0x240001b0

0800fa44 <_raise_r>:
 800fa44:	291f      	cmp	r1, #31
 800fa46:	b538      	push	{r3, r4, r5, lr}
 800fa48:	4605      	mov	r5, r0
 800fa4a:	460c      	mov	r4, r1
 800fa4c:	d904      	bls.n	800fa58 <_raise_r+0x14>
 800fa4e:	2316      	movs	r3, #22
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	f04f 30ff 	mov.w	r0, #4294967295
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa5a:	b112      	cbz	r2, 800fa62 <_raise_r+0x1e>
 800fa5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa60:	b94b      	cbnz	r3, 800fa76 <_raise_r+0x32>
 800fa62:	4628      	mov	r0, r5
 800fa64:	f000 f830 	bl	800fac8 <_getpid_r>
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa72:	f000 b817 	b.w	800faa4 <_kill_r>
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d00a      	beq.n	800fa90 <_raise_r+0x4c>
 800fa7a:	1c59      	adds	r1, r3, #1
 800fa7c:	d103      	bne.n	800fa86 <_raise_r+0x42>
 800fa7e:	2316      	movs	r3, #22
 800fa80:	6003      	str	r3, [r0, #0]
 800fa82:	2001      	movs	r0, #1
 800fa84:	e7e7      	b.n	800fa56 <_raise_r+0x12>
 800fa86:	2100      	movs	r1, #0
 800fa88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4798      	blx	r3
 800fa90:	2000      	movs	r0, #0
 800fa92:	e7e0      	b.n	800fa56 <_raise_r+0x12>

0800fa94 <raise>:
 800fa94:	4b02      	ldr	r3, [pc, #8]	@ (800faa0 <raise+0xc>)
 800fa96:	4601      	mov	r1, r0
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	f7ff bfd3 	b.w	800fa44 <_raise_r>
 800fa9e:	bf00      	nop
 800faa0:	240001b0 	.word	0x240001b0

0800faa4 <_kill_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	4d07      	ldr	r5, [pc, #28]	@ (800fac4 <_kill_r+0x20>)
 800faa8:	2300      	movs	r3, #0
 800faaa:	4604      	mov	r4, r0
 800faac:	4608      	mov	r0, r1
 800faae:	4611      	mov	r1, r2
 800fab0:	602b      	str	r3, [r5, #0]
 800fab2:	f7f4 f915 	bl	8003ce0 <_kill>
 800fab6:	1c43      	adds	r3, r0, #1
 800fab8:	d102      	bne.n	800fac0 <_kill_r+0x1c>
 800faba:	682b      	ldr	r3, [r5, #0]
 800fabc:	b103      	cbz	r3, 800fac0 <_kill_r+0x1c>
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	bf00      	nop
 800fac4:	24000744 	.word	0x24000744

0800fac8 <_getpid_r>:
 800fac8:	f7f4 b902 	b.w	8003cd0 <_getpid>

0800facc <_malloc_usable_size_r>:
 800facc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fad0:	1f18      	subs	r0, r3, #4
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	bfbc      	itt	lt
 800fad6:	580b      	ldrlt	r3, [r1, r0]
 800fad8:	18c0      	addlt	r0, r0, r3
 800fada:	4770      	bx	lr

0800fadc <__swhatbuf_r>:
 800fadc:	b570      	push	{r4, r5, r6, lr}
 800fade:	460c      	mov	r4, r1
 800fae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae4:	2900      	cmp	r1, #0
 800fae6:	b096      	sub	sp, #88	@ 0x58
 800fae8:	4615      	mov	r5, r2
 800faea:	461e      	mov	r6, r3
 800faec:	da0d      	bge.n	800fb0a <__swhatbuf_r+0x2e>
 800faee:	89a3      	ldrh	r3, [r4, #12]
 800faf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faf4:	f04f 0100 	mov.w	r1, #0
 800faf8:	bf14      	ite	ne
 800fafa:	2340      	movne	r3, #64	@ 0x40
 800fafc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb00:	2000      	movs	r0, #0
 800fb02:	6031      	str	r1, [r6, #0]
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	b016      	add	sp, #88	@ 0x58
 800fb08:	bd70      	pop	{r4, r5, r6, pc}
 800fb0a:	466a      	mov	r2, sp
 800fb0c:	f000 f848 	bl	800fba0 <_fstat_r>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	dbec      	blt.n	800faee <__swhatbuf_r+0x12>
 800fb14:	9901      	ldr	r1, [sp, #4]
 800fb16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb1e:	4259      	negs	r1, r3
 800fb20:	4159      	adcs	r1, r3
 800fb22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb26:	e7eb      	b.n	800fb00 <__swhatbuf_r+0x24>

0800fb28 <__smakebuf_r>:
 800fb28:	898b      	ldrh	r3, [r1, #12]
 800fb2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb2c:	079d      	lsls	r5, r3, #30
 800fb2e:	4606      	mov	r6, r0
 800fb30:	460c      	mov	r4, r1
 800fb32:	d507      	bpl.n	800fb44 <__smakebuf_r+0x1c>
 800fb34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	6123      	str	r3, [r4, #16]
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	6163      	str	r3, [r4, #20]
 800fb40:	b003      	add	sp, #12
 800fb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb44:	ab01      	add	r3, sp, #4
 800fb46:	466a      	mov	r2, sp
 800fb48:	f7ff ffc8 	bl	800fadc <__swhatbuf_r>
 800fb4c:	9f00      	ldr	r7, [sp, #0]
 800fb4e:	4605      	mov	r5, r0
 800fb50:	4639      	mov	r1, r7
 800fb52:	4630      	mov	r0, r6
 800fb54:	f7fe fc30 	bl	800e3b8 <_malloc_r>
 800fb58:	b948      	cbnz	r0, 800fb6e <__smakebuf_r+0x46>
 800fb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb5e:	059a      	lsls	r2, r3, #22
 800fb60:	d4ee      	bmi.n	800fb40 <__smakebuf_r+0x18>
 800fb62:	f023 0303 	bic.w	r3, r3, #3
 800fb66:	f043 0302 	orr.w	r3, r3, #2
 800fb6a:	81a3      	strh	r3, [r4, #12]
 800fb6c:	e7e2      	b.n	800fb34 <__smakebuf_r+0xc>
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	6020      	str	r0, [r4, #0]
 800fb72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb76:	81a3      	strh	r3, [r4, #12]
 800fb78:	9b01      	ldr	r3, [sp, #4]
 800fb7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb7e:	b15b      	cbz	r3, 800fb98 <__smakebuf_r+0x70>
 800fb80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb84:	4630      	mov	r0, r6
 800fb86:	f000 f81d 	bl	800fbc4 <_isatty_r>
 800fb8a:	b128      	cbz	r0, 800fb98 <__smakebuf_r+0x70>
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	f023 0303 	bic.w	r3, r3, #3
 800fb92:	f043 0301 	orr.w	r3, r3, #1
 800fb96:	81a3      	strh	r3, [r4, #12]
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	431d      	orrs	r5, r3
 800fb9c:	81a5      	strh	r5, [r4, #12]
 800fb9e:	e7cf      	b.n	800fb40 <__smakebuf_r+0x18>

0800fba0 <_fstat_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d07      	ldr	r5, [pc, #28]	@ (800fbc0 <_fstat_r+0x20>)
 800fba4:	2300      	movs	r3, #0
 800fba6:	4604      	mov	r4, r0
 800fba8:	4608      	mov	r0, r1
 800fbaa:	4611      	mov	r1, r2
 800fbac:	602b      	str	r3, [r5, #0]
 800fbae:	f7f4 f8f7 	bl	8003da0 <_fstat>
 800fbb2:	1c43      	adds	r3, r0, #1
 800fbb4:	d102      	bne.n	800fbbc <_fstat_r+0x1c>
 800fbb6:	682b      	ldr	r3, [r5, #0]
 800fbb8:	b103      	cbz	r3, 800fbbc <_fstat_r+0x1c>
 800fbba:	6023      	str	r3, [r4, #0]
 800fbbc:	bd38      	pop	{r3, r4, r5, pc}
 800fbbe:	bf00      	nop
 800fbc0:	24000744 	.word	0x24000744

0800fbc4 <_isatty_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d06      	ldr	r5, [pc, #24]	@ (800fbe0 <_isatty_r+0x1c>)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4604      	mov	r4, r0
 800fbcc:	4608      	mov	r0, r1
 800fbce:	602b      	str	r3, [r5, #0]
 800fbd0:	f7f4 f8f6 	bl	8003dc0 <_isatty>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d102      	bne.n	800fbde <_isatty_r+0x1a>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	b103      	cbz	r3, 800fbde <_isatty_r+0x1a>
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	24000744 	.word	0x24000744
 800fbe4:	00000000 	.word	0x00000000

0800fbe8 <cos>:
 800fbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbea:	eeb0 7b40 	vmov.f64	d7, d0
 800fbee:	ee17 3a90 	vmov	r3, s15
 800fbf2:	4a21      	ldr	r2, [pc, #132]	@ (800fc78 <cos+0x90>)
 800fbf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d806      	bhi.n	800fc0a <cos+0x22>
 800fbfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800fc70 <cos+0x88>
 800fc00:	b005      	add	sp, #20
 800fc02:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc06:	f000 b887 	b.w	800fd18 <__kernel_cos>
 800fc0a:	4a1c      	ldr	r2, [pc, #112]	@ (800fc7c <cos+0x94>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d904      	bls.n	800fc1a <cos+0x32>
 800fc10:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fc14:	b005      	add	sp, #20
 800fc16:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc1a:	4668      	mov	r0, sp
 800fc1c:	f000 f93c 	bl	800fe98 <__ieee754_rem_pio2>
 800fc20:	f000 0003 	and.w	r0, r0, #3
 800fc24:	2801      	cmp	r0, #1
 800fc26:	d009      	beq.n	800fc3c <cos+0x54>
 800fc28:	2802      	cmp	r0, #2
 800fc2a:	d010      	beq.n	800fc4e <cos+0x66>
 800fc2c:	b9b0      	cbnz	r0, 800fc5c <cos+0x74>
 800fc2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc32:	ed9d 0b00 	vldr	d0, [sp]
 800fc36:	f000 f86f 	bl	800fd18 <__kernel_cos>
 800fc3a:	e7eb      	b.n	800fc14 <cos+0x2c>
 800fc3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc40:	ed9d 0b00 	vldr	d0, [sp]
 800fc44:	f000 f8d0 	bl	800fde8 <__kernel_sin>
 800fc48:	eeb1 0b40 	vneg.f64	d0, d0
 800fc4c:	e7e2      	b.n	800fc14 <cos+0x2c>
 800fc4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc52:	ed9d 0b00 	vldr	d0, [sp]
 800fc56:	f000 f85f 	bl	800fd18 <__kernel_cos>
 800fc5a:	e7f5      	b.n	800fc48 <cos+0x60>
 800fc5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc60:	ed9d 0b00 	vldr	d0, [sp]
 800fc64:	2001      	movs	r0, #1
 800fc66:	f000 f8bf 	bl	800fde8 <__kernel_sin>
 800fc6a:	e7d3      	b.n	800fc14 <cos+0x2c>
 800fc6c:	f3af 8000 	nop.w
	...
 800fc78:	3fe921fb 	.word	0x3fe921fb
 800fc7c:	7fefffff 	.word	0x7fefffff

0800fc80 <sin>:
 800fc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc82:	eeb0 7b40 	vmov.f64	d7, d0
 800fc86:	ee17 3a90 	vmov	r3, s15
 800fc8a:	4a21      	ldr	r2, [pc, #132]	@ (800fd10 <sin+0x90>)
 800fc8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d807      	bhi.n	800fca4 <sin+0x24>
 800fc94:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800fd08 <sin+0x88>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	b005      	add	sp, #20
 800fc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fca0:	f000 b8a2 	b.w	800fde8 <__kernel_sin>
 800fca4:	4a1b      	ldr	r2, [pc, #108]	@ (800fd14 <sin+0x94>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d904      	bls.n	800fcb4 <sin+0x34>
 800fcaa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fcae:	b005      	add	sp, #20
 800fcb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcb4:	4668      	mov	r0, sp
 800fcb6:	f000 f8ef 	bl	800fe98 <__ieee754_rem_pio2>
 800fcba:	f000 0003 	and.w	r0, r0, #3
 800fcbe:	2801      	cmp	r0, #1
 800fcc0:	d00a      	beq.n	800fcd8 <sin+0x58>
 800fcc2:	2802      	cmp	r0, #2
 800fcc4:	d00f      	beq.n	800fce6 <sin+0x66>
 800fcc6:	b9c0      	cbnz	r0, 800fcfa <sin+0x7a>
 800fcc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fccc:	ed9d 0b00 	vldr	d0, [sp]
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	f000 f889 	bl	800fde8 <__kernel_sin>
 800fcd6:	e7ea      	b.n	800fcae <sin+0x2e>
 800fcd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcdc:	ed9d 0b00 	vldr	d0, [sp]
 800fce0:	f000 f81a 	bl	800fd18 <__kernel_cos>
 800fce4:	e7e3      	b.n	800fcae <sin+0x2e>
 800fce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcea:	ed9d 0b00 	vldr	d0, [sp]
 800fcee:	2001      	movs	r0, #1
 800fcf0:	f000 f87a 	bl	800fde8 <__kernel_sin>
 800fcf4:	eeb1 0b40 	vneg.f64	d0, d0
 800fcf8:	e7d9      	b.n	800fcae <sin+0x2e>
 800fcfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcfe:	ed9d 0b00 	vldr	d0, [sp]
 800fd02:	f000 f809 	bl	800fd18 <__kernel_cos>
 800fd06:	e7f5      	b.n	800fcf4 <sin+0x74>
	...
 800fd10:	3fe921fb 	.word	0x3fe921fb
 800fd14:	7fefffff 	.word	0x7fefffff

0800fd18 <__kernel_cos>:
 800fd18:	eeb0 5b40 	vmov.f64	d5, d0
 800fd1c:	ee15 1a90 	vmov	r1, s11
 800fd20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800fd24:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800fd28:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800fd2c:	d204      	bcs.n	800fd38 <__kernel_cos+0x20>
 800fd2e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800fd32:	ee17 3a90 	vmov	r3, s15
 800fd36:	b343      	cbz	r3, 800fd8a <__kernel_cos+0x72>
 800fd38:	ee25 6b05 	vmul.f64	d6, d5, d5
 800fd3c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800fd40:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800fdb0 <__kernel_cos+0x98>
 800fd44:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fdb8 <__kernel_cos+0xa0>
 800fd48:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fd4c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fdc0 <__kernel_cos+0xa8>
 800fd50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fd54:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fdc8 <__kernel_cos+0xb0>
 800fd58:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fd5c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fdd0 <__kernel_cos+0xb8>
 800fd60:	4b1f      	ldr	r3, [pc, #124]	@ (800fde0 <__kernel_cos+0xc8>)
 800fd62:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fd66:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800fdd8 <__kernel_cos+0xc0>
 800fd6a:	4299      	cmp	r1, r3
 800fd6c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fd70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800fd74:	ee24 4b06 	vmul.f64	d4, d4, d6
 800fd78:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fd7c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800fd80:	d804      	bhi.n	800fd8c <__kernel_cos+0x74>
 800fd82:	ee37 7b41 	vsub.f64	d7, d7, d1
 800fd86:	ee30 0b47 	vsub.f64	d0, d0, d7
 800fd8a:	4770      	bx	lr
 800fd8c:	4b15      	ldr	r3, [pc, #84]	@ (800fde4 <__kernel_cos+0xcc>)
 800fd8e:	4299      	cmp	r1, r3
 800fd90:	d809      	bhi.n	800fda6 <__kernel_cos+0x8e>
 800fd92:	2200      	movs	r2, #0
 800fd94:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800fd98:	ec43 2b16 	vmov	d6, r2, r3
 800fd9c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fda0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fda4:	e7ed      	b.n	800fd82 <__kernel_cos+0x6a>
 800fda6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800fdaa:	e7f7      	b.n	800fd9c <__kernel_cos+0x84>
 800fdac:	f3af 8000 	nop.w
 800fdb0:	be8838d4 	.word	0xbe8838d4
 800fdb4:	bda8fae9 	.word	0xbda8fae9
 800fdb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fdbc:	3e21ee9e 	.word	0x3e21ee9e
 800fdc0:	809c52ad 	.word	0x809c52ad
 800fdc4:	be927e4f 	.word	0xbe927e4f
 800fdc8:	19cb1590 	.word	0x19cb1590
 800fdcc:	3efa01a0 	.word	0x3efa01a0
 800fdd0:	16c15177 	.word	0x16c15177
 800fdd4:	bf56c16c 	.word	0xbf56c16c
 800fdd8:	5555554c 	.word	0x5555554c
 800fddc:	3fa55555 	.word	0x3fa55555
 800fde0:	3fd33332 	.word	0x3fd33332
 800fde4:	3fe90000 	.word	0x3fe90000

0800fde8 <__kernel_sin>:
 800fde8:	ee10 3a90 	vmov	r3, s1
 800fdec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fdf0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fdf4:	d204      	bcs.n	800fe00 <__kernel_sin+0x18>
 800fdf6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fdfa:	ee17 3a90 	vmov	r3, s15
 800fdfe:	b35b      	cbz	r3, 800fe58 <__kernel_sin+0x70>
 800fe00:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fe04:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fe08:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800fe60 <__kernel_sin+0x78>
 800fe0c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fe68 <__kernel_sin+0x80>
 800fe10:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fe14:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fe70 <__kernel_sin+0x88>
 800fe18:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fe1c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fe78 <__kernel_sin+0x90>
 800fe20:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fe24:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fe80 <__kernel_sin+0x98>
 800fe28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fe2c:	b930      	cbnz	r0, 800fe3c <__kernel_sin+0x54>
 800fe2e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800fe88 <__kernel_sin+0xa0>
 800fe32:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fe36:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fe3a:	4770      	bx	lr
 800fe3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fe40:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800fe44:	eea1 7b04 	vfma.f64	d7, d1, d4
 800fe48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800fe4c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fe90 <__kernel_sin+0xa8>
 800fe50:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fe54:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	f3af 8000 	nop.w
 800fe60:	5acfd57c 	.word	0x5acfd57c
 800fe64:	3de5d93a 	.word	0x3de5d93a
 800fe68:	8a2b9ceb 	.word	0x8a2b9ceb
 800fe6c:	be5ae5e6 	.word	0xbe5ae5e6
 800fe70:	57b1fe7d 	.word	0x57b1fe7d
 800fe74:	3ec71de3 	.word	0x3ec71de3
 800fe78:	19c161d5 	.word	0x19c161d5
 800fe7c:	bf2a01a0 	.word	0xbf2a01a0
 800fe80:	1110f8a6 	.word	0x1110f8a6
 800fe84:	3f811111 	.word	0x3f811111
 800fe88:	55555549 	.word	0x55555549
 800fe8c:	bfc55555 	.word	0xbfc55555
 800fe90:	55555549 	.word	0x55555549
 800fe94:	3fc55555 	.word	0x3fc55555

0800fe98 <__ieee754_rem_pio2>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	eeb0 7b40 	vmov.f64	d7, d0
 800fe9e:	ee17 5a90 	vmov	r5, s15
 800fea2:	4b99      	ldr	r3, [pc, #612]	@ (8010108 <__ieee754_rem_pio2+0x270>)
 800fea4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fea8:	429e      	cmp	r6, r3
 800feaa:	b088      	sub	sp, #32
 800feac:	4604      	mov	r4, r0
 800feae:	d807      	bhi.n	800fec0 <__ieee754_rem_pio2+0x28>
 800feb0:	2200      	movs	r2, #0
 800feb2:	2300      	movs	r3, #0
 800feb4:	ed84 0b00 	vstr	d0, [r4]
 800feb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800febc:	2000      	movs	r0, #0
 800febe:	e01b      	b.n	800fef8 <__ieee754_rem_pio2+0x60>
 800fec0:	4b92      	ldr	r3, [pc, #584]	@ (801010c <__ieee754_rem_pio2+0x274>)
 800fec2:	429e      	cmp	r6, r3
 800fec4:	d83b      	bhi.n	800ff3e <__ieee754_rem_pio2+0xa6>
 800fec6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800feca:	2d00      	cmp	r5, #0
 800fecc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80100c8 <__ieee754_rem_pio2+0x230>
 800fed0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800fed4:	dd19      	ble.n	800ff0a <__ieee754_rem_pio2+0x72>
 800fed6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800feda:	429e      	cmp	r6, r3
 800fedc:	d00e      	beq.n	800fefc <__ieee754_rem_pio2+0x64>
 800fede:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80100d0 <__ieee754_rem_pio2+0x238>
 800fee2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800fee6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800feea:	ed84 6b00 	vstr	d6, [r4]
 800feee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fef2:	ed84 7b02 	vstr	d7, [r4, #8]
 800fef6:	2001      	movs	r0, #1
 800fef8:	b008      	add	sp, #32
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80100d8 <__ieee754_rem_pio2+0x240>
 800ff00:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 80100e0 <__ieee754_rem_pio2+0x248>
 800ff04:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff08:	e7eb      	b.n	800fee2 <__ieee754_rem_pio2+0x4a>
 800ff0a:	429e      	cmp	r6, r3
 800ff0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ff10:	d00e      	beq.n	800ff30 <__ieee754_rem_pio2+0x98>
 800ff12:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80100d0 <__ieee754_rem_pio2+0x238>
 800ff16:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ff1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff1e:	ed84 6b00 	vstr	d6, [r4]
 800ff22:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ff26:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ff2e:	e7e3      	b.n	800fef8 <__ieee754_rem_pio2+0x60>
 800ff30:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80100d8 <__ieee754_rem_pio2+0x240>
 800ff34:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 80100e0 <__ieee754_rem_pio2+0x248>
 800ff38:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ff3c:	e7eb      	b.n	800ff16 <__ieee754_rem_pio2+0x7e>
 800ff3e:	4b74      	ldr	r3, [pc, #464]	@ (8010110 <__ieee754_rem_pio2+0x278>)
 800ff40:	429e      	cmp	r6, r3
 800ff42:	d870      	bhi.n	8010026 <__ieee754_rem_pio2+0x18e>
 800ff44:	f000 f8ec 	bl	8010120 <fabs>
 800ff48:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ff4c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80100e8 <__ieee754_rem_pio2+0x250>
 800ff50:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ff54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ff58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ff5c:	ee17 0a90 	vmov	r0, s15
 800ff60:	eeb1 4b45 	vneg.f64	d4, d5
 800ff64:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80100c8 <__ieee754_rem_pio2+0x230>
 800ff68:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ff6c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80100d0 <__ieee754_rem_pio2+0x238>
 800ff70:	281f      	cmp	r0, #31
 800ff72:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ff76:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ff7a:	dc05      	bgt.n	800ff88 <__ieee754_rem_pio2+0xf0>
 800ff7c:	4b65      	ldr	r3, [pc, #404]	@ (8010114 <__ieee754_rem_pio2+0x27c>)
 800ff7e:	1e42      	subs	r2, r0, #1
 800ff80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff84:	42b3      	cmp	r3, r6
 800ff86:	d109      	bne.n	800ff9c <__ieee754_rem_pio2+0x104>
 800ff88:	ee16 3a90 	vmov	r3, s13
 800ff8c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ff90:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ff94:	2b10      	cmp	r3, #16
 800ff96:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ff9a:	dc02      	bgt.n	800ffa2 <__ieee754_rem_pio2+0x10a>
 800ff9c:	ed84 6b00 	vstr	d6, [r4]
 800ffa0:	e01a      	b.n	800ffd8 <__ieee754_rem_pio2+0x140>
 800ffa2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 80100d8 <__ieee754_rem_pio2+0x240>
 800ffa6:	eeb0 6b40 	vmov.f64	d6, d0
 800ffaa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ffae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ffb2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ffb6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 80100e0 <__ieee754_rem_pio2+0x248>
 800ffba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ffbe:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ffc2:	ee13 3a90 	vmov	r3, s7
 800ffc6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	2b31      	cmp	r3, #49	@ 0x31
 800ffce:	dc17      	bgt.n	8010000 <__ieee754_rem_pio2+0x168>
 800ffd0:	eeb0 0b46 	vmov.f64	d0, d6
 800ffd4:	ed84 3b00 	vstr	d3, [r4]
 800ffd8:	ed94 6b00 	vldr	d6, [r4]
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ffe2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ffe6:	ed84 0b02 	vstr	d0, [r4, #8]
 800ffea:	da85      	bge.n	800fef8 <__ieee754_rem_pio2+0x60>
 800ffec:	eeb1 6b46 	vneg.f64	d6, d6
 800fff0:	eeb1 0b40 	vneg.f64	d0, d0
 800fff4:	ed84 6b00 	vstr	d6, [r4]
 800fff8:	ed84 0b02 	vstr	d0, [r4, #8]
 800fffc:	4240      	negs	r0, r0
 800fffe:	e77b      	b.n	800fef8 <__ieee754_rem_pio2+0x60>
 8010000:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80100f0 <__ieee754_rem_pio2+0x258>
 8010004:	eeb0 0b46 	vmov.f64	d0, d6
 8010008:	eea4 0b07 	vfma.f64	d0, d4, d7
 801000c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8010010:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010014:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80100f8 <__ieee754_rem_pio2+0x260>
 8010018:	eeb0 7b46 	vmov.f64	d7, d6
 801001c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8010020:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010024:	e7ba      	b.n	800ff9c <__ieee754_rem_pio2+0x104>
 8010026:	4b3c      	ldr	r3, [pc, #240]	@ (8010118 <__ieee754_rem_pio2+0x280>)
 8010028:	429e      	cmp	r6, r3
 801002a:	d906      	bls.n	801003a <__ieee754_rem_pio2+0x1a2>
 801002c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010030:	ed80 7b02 	vstr	d7, [r0, #8]
 8010034:	ed80 7b00 	vstr	d7, [r0]
 8010038:	e740      	b.n	800febc <__ieee754_rem_pio2+0x24>
 801003a:	ee10 3a10 	vmov	r3, s0
 801003e:	1532      	asrs	r2, r6, #20
 8010040:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8010044:	4618      	mov	r0, r3
 8010046:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801004a:	ec41 0b17 	vmov	d7, r0, r1
 801004e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010052:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8010100 <__ieee754_rem_pio2+0x268>
 8010056:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801005a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801005e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010062:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010066:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801006a:	a808      	add	r0, sp, #32
 801006c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010070:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010074:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010078:	ee27 7b05 	vmul.f64	d7, d7, d5
 801007c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010080:	2103      	movs	r1, #3
 8010082:	ed30 7b02 	vldmdb	r0!, {d7}
 8010086:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801008a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008e:	460b      	mov	r3, r1
 8010090:	f101 31ff 	add.w	r1, r1, #4294967295
 8010094:	d0f5      	beq.n	8010082 <__ieee754_rem_pio2+0x1ea>
 8010096:	4921      	ldr	r1, [pc, #132]	@ (801011c <__ieee754_rem_pio2+0x284>)
 8010098:	9101      	str	r1, [sp, #4]
 801009a:	2102      	movs	r1, #2
 801009c:	9100      	str	r1, [sp, #0]
 801009e:	a802      	add	r0, sp, #8
 80100a0:	4621      	mov	r1, r4
 80100a2:	f000 f845 	bl	8010130 <__kernel_rem_pio2>
 80100a6:	2d00      	cmp	r5, #0
 80100a8:	f6bf af26 	bge.w	800fef8 <__ieee754_rem_pio2+0x60>
 80100ac:	ed94 7b00 	vldr	d7, [r4]
 80100b0:	eeb1 7b47 	vneg.f64	d7, d7
 80100b4:	ed84 7b00 	vstr	d7, [r4]
 80100b8:	ed94 7b02 	vldr	d7, [r4, #8]
 80100bc:	eeb1 7b47 	vneg.f64	d7, d7
 80100c0:	ed84 7b02 	vstr	d7, [r4, #8]
 80100c4:	e79a      	b.n	800fffc <__ieee754_rem_pio2+0x164>
 80100c6:	bf00      	nop
 80100c8:	54400000 	.word	0x54400000
 80100cc:	3ff921fb 	.word	0x3ff921fb
 80100d0:	1a626331 	.word	0x1a626331
 80100d4:	3dd0b461 	.word	0x3dd0b461
 80100d8:	1a600000 	.word	0x1a600000
 80100dc:	3dd0b461 	.word	0x3dd0b461
 80100e0:	2e037073 	.word	0x2e037073
 80100e4:	3ba3198a 	.word	0x3ba3198a
 80100e8:	6dc9c883 	.word	0x6dc9c883
 80100ec:	3fe45f30 	.word	0x3fe45f30
 80100f0:	2e000000 	.word	0x2e000000
 80100f4:	3ba3198a 	.word	0x3ba3198a
 80100f8:	252049c1 	.word	0x252049c1
 80100fc:	397b839a 	.word	0x397b839a
 8010100:	00000000 	.word	0x00000000
 8010104:	41700000 	.word	0x41700000
 8010108:	3fe921fb 	.word	0x3fe921fb
 801010c:	4002d97b 	.word	0x4002d97b
 8010110:	413921fb 	.word	0x413921fb
 8010114:	08010e4c 	.word	0x08010e4c
 8010118:	7fefffff 	.word	0x7fefffff
 801011c:	08010ecc 	.word	0x08010ecc

08010120 <fabs>:
 8010120:	ec51 0b10 	vmov	r0, r1, d0
 8010124:	4602      	mov	r2, r0
 8010126:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801012a:	ec43 2b10 	vmov	d0, r2, r3
 801012e:	4770      	bx	lr

08010130 <__kernel_rem_pio2>:
 8010130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	ed2d 8b06 	vpush	{d8-d10}
 8010138:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801013c:	469b      	mov	fp, r3
 801013e:	9001      	str	r0, [sp, #4]
 8010140:	4bbb      	ldr	r3, [pc, #748]	@ (8010430 <__kernel_rem_pio2+0x300>)
 8010142:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8010144:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8010148:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801014c:	f112 0f14 	cmn.w	r2, #20
 8010150:	bfa8      	it	ge
 8010152:	1ed3      	subge	r3, r2, #3
 8010154:	f10b 3aff 	add.w	sl, fp, #4294967295
 8010158:	bfb8      	it	lt
 801015a:	2300      	movlt	r3, #0
 801015c:	f06f 0517 	mvn.w	r5, #23
 8010160:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8010418 <__kernel_rem_pio2+0x2e8>
 8010164:	bfa4      	itt	ge
 8010166:	2018      	movge	r0, #24
 8010168:	fb93 f3f0 	sdivge	r3, r3, r0
 801016c:	fb03 5505 	mla	r5, r3, r5, r5
 8010170:	eba3 040a 	sub.w	r4, r3, sl
 8010174:	4415      	add	r5, r2
 8010176:	460f      	mov	r7, r1
 8010178:	eb09 060a 	add.w	r6, r9, sl
 801017c:	a81a      	add	r0, sp, #104	@ 0x68
 801017e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8010182:	2200      	movs	r2, #0
 8010184:	42b2      	cmp	r2, r6
 8010186:	dd0e      	ble.n	80101a6 <__kernel_rem_pio2+0x76>
 8010188:	aa1a      	add	r2, sp, #104	@ 0x68
 801018a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801018e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8010192:	2600      	movs	r6, #0
 8010194:	454e      	cmp	r6, r9
 8010196:	dc25      	bgt.n	80101e4 <__kernel_rem_pio2+0xb4>
 8010198:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8010418 <__kernel_rem_pio2+0x2e8>
 801019c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80101a0:	4614      	mov	r4, r2
 80101a2:	2000      	movs	r0, #0
 80101a4:	e015      	b.n	80101d2 <__kernel_rem_pio2+0xa2>
 80101a6:	42d4      	cmn	r4, r2
 80101a8:	d409      	bmi.n	80101be <__kernel_rem_pio2+0x8e>
 80101aa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80101ae:	ee07 1a90 	vmov	s15, r1
 80101b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80101b6:	eca0 7b02 	vstmia	r0!, {d7}
 80101ba:	3201      	adds	r2, #1
 80101bc:	e7e2      	b.n	8010184 <__kernel_rem_pio2+0x54>
 80101be:	eeb0 7b46 	vmov.f64	d7, d6
 80101c2:	e7f8      	b.n	80101b6 <__kernel_rem_pio2+0x86>
 80101c4:	ecbc 5b02 	vldmia	ip!, {d5}
 80101c8:	ed94 6b00 	vldr	d6, [r4]
 80101cc:	3001      	adds	r0, #1
 80101ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80101d2:	4550      	cmp	r0, sl
 80101d4:	f1a4 0408 	sub.w	r4, r4, #8
 80101d8:	ddf4      	ble.n	80101c4 <__kernel_rem_pio2+0x94>
 80101da:	ecae 7b02 	vstmia	lr!, {d7}
 80101de:	3601      	adds	r6, #1
 80101e0:	3208      	adds	r2, #8
 80101e2:	e7d7      	b.n	8010194 <__kernel_rem_pio2+0x64>
 80101e4:	aa06      	add	r2, sp, #24
 80101e6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8010420 <__kernel_rem_pio2+0x2f0>
 80101ea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8010428 <__kernel_rem_pio2+0x2f8>
 80101ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80101f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80101f6:	9203      	str	r2, [sp, #12]
 80101f8:	9302      	str	r3, [sp, #8]
 80101fa:	464c      	mov	r4, r9
 80101fc:	00e3      	lsls	r3, r4, #3
 80101fe:	9304      	str	r3, [sp, #16]
 8010200:	ab92      	add	r3, sp, #584	@ 0x248
 8010202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010206:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801020a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801020c:	ab06      	add	r3, sp, #24
 801020e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010212:	461e      	mov	r6, r3
 8010214:	4620      	mov	r0, r4
 8010216:	2800      	cmp	r0, #0
 8010218:	f1a2 0208 	sub.w	r2, r2, #8
 801021c:	dc4a      	bgt.n	80102b4 <__kernel_rem_pio2+0x184>
 801021e:	4628      	mov	r0, r5
 8010220:	9305      	str	r3, [sp, #20]
 8010222:	f000 fa01 	bl	8010628 <scalbn>
 8010226:	eeb0 8b40 	vmov.f64	d8, d0
 801022a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801022e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010232:	f000 fa79 	bl	8010728 <floor>
 8010236:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801023a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801023e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010242:	2d00      	cmp	r5, #0
 8010244:	ee17 8a90 	vmov	r8, s15
 8010248:	9b05      	ldr	r3, [sp, #20]
 801024a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801024e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010252:	dd41      	ble.n	80102d8 <__kernel_rem_pio2+0x1a8>
 8010254:	1e60      	subs	r0, r4, #1
 8010256:	aa06      	add	r2, sp, #24
 8010258:	f1c5 0c18 	rsb	ip, r5, #24
 801025c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8010260:	fa46 f20c 	asr.w	r2, r6, ip
 8010264:	4490      	add	r8, r2
 8010266:	fa02 f20c 	lsl.w	r2, r2, ip
 801026a:	1ab6      	subs	r6, r6, r2
 801026c:	aa06      	add	r2, sp, #24
 801026e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8010272:	f1c5 0217 	rsb	r2, r5, #23
 8010276:	4116      	asrs	r6, r2
 8010278:	2e00      	cmp	r6, #0
 801027a:	dd3c      	ble.n	80102f6 <__kernel_rem_pio2+0x1c6>
 801027c:	f04f 0c00 	mov.w	ip, #0
 8010280:	f108 0801 	add.w	r8, r8, #1
 8010284:	4660      	mov	r0, ip
 8010286:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801028a:	4564      	cmp	r4, ip
 801028c:	dc66      	bgt.n	801035c <__kernel_rem_pio2+0x22c>
 801028e:	2d00      	cmp	r5, #0
 8010290:	dd03      	ble.n	801029a <__kernel_rem_pio2+0x16a>
 8010292:	2d01      	cmp	r5, #1
 8010294:	d072      	beq.n	801037c <__kernel_rem_pio2+0x24c>
 8010296:	2d02      	cmp	r5, #2
 8010298:	d07a      	beq.n	8010390 <__kernel_rem_pio2+0x260>
 801029a:	2e02      	cmp	r6, #2
 801029c:	d12b      	bne.n	80102f6 <__kernel_rem_pio2+0x1c6>
 801029e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80102a2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80102a6:	b330      	cbz	r0, 80102f6 <__kernel_rem_pio2+0x1c6>
 80102a8:	4628      	mov	r0, r5
 80102aa:	f000 f9bd 	bl	8010628 <scalbn>
 80102ae:	ee38 8b40 	vsub.f64	d8, d8, d0
 80102b2:	e020      	b.n	80102f6 <__kernel_rem_pio2+0x1c6>
 80102b4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80102b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80102bc:	3801      	subs	r0, #1
 80102be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80102c2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80102c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80102ca:	eca6 0a01 	vstmia	r6!, {s0}
 80102ce:	ed92 0b00 	vldr	d0, [r2]
 80102d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80102d6:	e79e      	b.n	8010216 <__kernel_rem_pio2+0xe6>
 80102d8:	d105      	bne.n	80102e6 <__kernel_rem_pio2+0x1b6>
 80102da:	1e62      	subs	r2, r4, #1
 80102dc:	a906      	add	r1, sp, #24
 80102de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80102e2:	15f6      	asrs	r6, r6, #23
 80102e4:	e7c8      	b.n	8010278 <__kernel_rem_pio2+0x148>
 80102e6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80102ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80102ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f2:	da31      	bge.n	8010358 <__kernel_rem_pio2+0x228>
 80102f4:	2600      	movs	r6, #0
 80102f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80102fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fe:	f040 809b 	bne.w	8010438 <__kernel_rem_pio2+0x308>
 8010302:	1e62      	subs	r2, r4, #1
 8010304:	2000      	movs	r0, #0
 8010306:	454a      	cmp	r2, r9
 8010308:	da49      	bge.n	801039e <__kernel_rem_pio2+0x26e>
 801030a:	2800      	cmp	r0, #0
 801030c:	d062      	beq.n	80103d4 <__kernel_rem_pio2+0x2a4>
 801030e:	3c01      	subs	r4, #1
 8010310:	ab06      	add	r3, sp, #24
 8010312:	3d18      	subs	r5, #24
 8010314:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d0f8      	beq.n	801030e <__kernel_rem_pio2+0x1de>
 801031c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010320:	4628      	mov	r0, r5
 8010322:	f000 f981 	bl	8010628 <scalbn>
 8010326:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8010420 <__kernel_rem_pio2+0x2f0>
 801032a:	1c62      	adds	r2, r4, #1
 801032c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801032e:	00d3      	lsls	r3, r2, #3
 8010330:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010334:	4622      	mov	r2, r4
 8010336:	2a00      	cmp	r2, #0
 8010338:	f280 80a8 	bge.w	801048c <__kernel_rem_pio2+0x35c>
 801033c:	4622      	mov	r2, r4
 801033e:	2a00      	cmp	r2, #0
 8010340:	f2c0 80c6 	blt.w	80104d0 <__kernel_rem_pio2+0x3a0>
 8010344:	a96a      	add	r1, sp, #424	@ 0x1a8
 8010346:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801034a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8010418 <__kernel_rem_pio2+0x2e8>
 801034e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8010434 <__kernel_rem_pio2+0x304>
 8010352:	2000      	movs	r0, #0
 8010354:	1aa1      	subs	r1, r4, r2
 8010356:	e0b0      	b.n	80104ba <__kernel_rem_pio2+0x38a>
 8010358:	2602      	movs	r6, #2
 801035a:	e78f      	b.n	801027c <__kernel_rem_pio2+0x14c>
 801035c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010360:	b948      	cbnz	r0, 8010376 <__kernel_rem_pio2+0x246>
 8010362:	b122      	cbz	r2, 801036e <__kernel_rem_pio2+0x23e>
 8010364:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8010368:	f843 2c04 	str.w	r2, [r3, #-4]
 801036c:	2201      	movs	r2, #1
 801036e:	f10c 0c01 	add.w	ip, ip, #1
 8010372:	4610      	mov	r0, r2
 8010374:	e789      	b.n	801028a <__kernel_rem_pio2+0x15a>
 8010376:	ebae 0202 	sub.w	r2, lr, r2
 801037a:	e7f5      	b.n	8010368 <__kernel_rem_pio2+0x238>
 801037c:	1e62      	subs	r2, r4, #1
 801037e:	ab06      	add	r3, sp, #24
 8010380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010384:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010388:	a906      	add	r1, sp, #24
 801038a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801038e:	e784      	b.n	801029a <__kernel_rem_pio2+0x16a>
 8010390:	1e62      	subs	r2, r4, #1
 8010392:	ab06      	add	r3, sp, #24
 8010394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010398:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801039c:	e7f4      	b.n	8010388 <__kernel_rem_pio2+0x258>
 801039e:	ab06      	add	r3, sp, #24
 80103a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a4:	3a01      	subs	r2, #1
 80103a6:	4318      	orrs	r0, r3
 80103a8:	e7ad      	b.n	8010306 <__kernel_rem_pio2+0x1d6>
 80103aa:	3301      	adds	r3, #1
 80103ac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d0fa      	beq.n	80103aa <__kernel_rem_pio2+0x27a>
 80103b4:	9a04      	ldr	r2, [sp, #16]
 80103b6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80103ba:	446a      	add	r2, sp
 80103bc:	eb04 000b 	add.w	r0, r4, fp
 80103c0:	a91a      	add	r1, sp, #104	@ 0x68
 80103c2:	1c66      	adds	r6, r4, #1
 80103c4:	3a98      	subs	r2, #152	@ 0x98
 80103c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80103ca:	4423      	add	r3, r4
 80103cc:	42b3      	cmp	r3, r6
 80103ce:	da04      	bge.n	80103da <__kernel_rem_pio2+0x2aa>
 80103d0:	461c      	mov	r4, r3
 80103d2:	e713      	b.n	80101fc <__kernel_rem_pio2+0xcc>
 80103d4:	9a03      	ldr	r2, [sp, #12]
 80103d6:	2301      	movs	r3, #1
 80103d8:	e7e8      	b.n	80103ac <__kernel_rem_pio2+0x27c>
 80103da:	9902      	ldr	r1, [sp, #8]
 80103dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80103e0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80103e4:	9104      	str	r1, [sp, #16]
 80103e6:	ee07 1a90 	vmov	s15, r1
 80103ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80103ee:	2400      	movs	r4, #0
 80103f0:	eca0 7b02 	vstmia	r0!, {d7}
 80103f4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010418 <__kernel_rem_pio2+0x2e8>
 80103f8:	4686      	mov	lr, r0
 80103fa:	4554      	cmp	r4, sl
 80103fc:	dd03      	ble.n	8010406 <__kernel_rem_pio2+0x2d6>
 80103fe:	eca2 7b02 	vstmia	r2!, {d7}
 8010402:	3601      	adds	r6, #1
 8010404:	e7e2      	b.n	80103cc <__kernel_rem_pio2+0x29c>
 8010406:	ecbc 5b02 	vldmia	ip!, {d5}
 801040a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801040e:	3401      	adds	r4, #1
 8010410:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010414:	e7f1      	b.n	80103fa <__kernel_rem_pio2+0x2ca>
 8010416:	bf00      	nop
	...
 8010424:	3e700000 	.word	0x3e700000
 8010428:	00000000 	.word	0x00000000
 801042c:	41700000 	.word	0x41700000
 8010430:	08011018 	.word	0x08011018
 8010434:	08010fd8 	.word	0x08010fd8
 8010438:	4268      	negs	r0, r5
 801043a:	eeb0 0b48 	vmov.f64	d0, d8
 801043e:	f000 f8f3 	bl	8010628 <scalbn>
 8010442:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8010610 <__kernel_rem_pio2+0x4e0>
 8010446:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801044a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044e:	db17      	blt.n	8010480 <__kernel_rem_pio2+0x350>
 8010450:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8010618 <__kernel_rem_pio2+0x4e8>
 8010454:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010458:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801045c:	aa06      	add	r2, sp, #24
 801045e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010462:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010466:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801046a:	3518      	adds	r5, #24
 801046c:	ee10 3a10 	vmov	r3, s0
 8010470:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010474:	ee17 3a10 	vmov	r3, s14
 8010478:	3401      	adds	r4, #1
 801047a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801047e:	e74d      	b.n	801031c <__kernel_rem_pio2+0x1ec>
 8010480:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010484:	aa06      	add	r2, sp, #24
 8010486:	ee10 3a10 	vmov	r3, s0
 801048a:	e7f6      	b.n	801047a <__kernel_rem_pio2+0x34a>
 801048c:	a806      	add	r0, sp, #24
 801048e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010492:	9001      	str	r0, [sp, #4]
 8010494:	ee07 0a90 	vmov	s15, r0
 8010498:	3a01      	subs	r2, #1
 801049a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801049e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80104a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80104a6:	ed21 7b02 	vstmdb	r1!, {d7}
 80104aa:	e744      	b.n	8010336 <__kernel_rem_pio2+0x206>
 80104ac:	ecbc 5b02 	vldmia	ip!, {d5}
 80104b0:	ecb5 6b02 	vldmia	r5!, {d6}
 80104b4:	3001      	adds	r0, #1
 80104b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80104ba:	4548      	cmp	r0, r9
 80104bc:	dc01      	bgt.n	80104c2 <__kernel_rem_pio2+0x392>
 80104be:	4281      	cmp	r1, r0
 80104c0:	daf4      	bge.n	80104ac <__kernel_rem_pio2+0x37c>
 80104c2:	a842      	add	r0, sp, #264	@ 0x108
 80104c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80104c8:	ed81 7b00 	vstr	d7, [r1]
 80104cc:	3a01      	subs	r2, #1
 80104ce:	e736      	b.n	801033e <__kernel_rem_pio2+0x20e>
 80104d0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80104d2:	2a02      	cmp	r2, #2
 80104d4:	dc0a      	bgt.n	80104ec <__kernel_rem_pio2+0x3bc>
 80104d6:	2a00      	cmp	r2, #0
 80104d8:	dc2d      	bgt.n	8010536 <__kernel_rem_pio2+0x406>
 80104da:	d046      	beq.n	801056a <__kernel_rem_pio2+0x43a>
 80104dc:	f008 0007 	and.w	r0, r8, #7
 80104e0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80104e4:	ecbd 8b06 	vpop	{d8-d10}
 80104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80104ee:	2a03      	cmp	r2, #3
 80104f0:	d1f4      	bne.n	80104dc <__kernel_rem_pio2+0x3ac>
 80104f2:	a942      	add	r1, sp, #264	@ 0x108
 80104f4:	f1a3 0208 	sub.w	r2, r3, #8
 80104f8:	440a      	add	r2, r1
 80104fa:	4611      	mov	r1, r2
 80104fc:	4620      	mov	r0, r4
 80104fe:	2800      	cmp	r0, #0
 8010500:	f1a1 0108 	sub.w	r1, r1, #8
 8010504:	dc52      	bgt.n	80105ac <__kernel_rem_pio2+0x47c>
 8010506:	4621      	mov	r1, r4
 8010508:	2901      	cmp	r1, #1
 801050a:	f1a2 0208 	sub.w	r2, r2, #8
 801050e:	dc5d      	bgt.n	80105cc <__kernel_rem_pio2+0x49c>
 8010510:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8010620 <__kernel_rem_pio2+0x4f0>
 8010514:	aa42      	add	r2, sp, #264	@ 0x108
 8010516:	4413      	add	r3, r2
 8010518:	2c01      	cmp	r4, #1
 801051a:	dc67      	bgt.n	80105ec <__kernel_rem_pio2+0x4bc>
 801051c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8010520:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8010524:	2e00      	cmp	r6, #0
 8010526:	d167      	bne.n	80105f8 <__kernel_rem_pio2+0x4c8>
 8010528:	ed87 5b00 	vstr	d5, [r7]
 801052c:	ed87 6b02 	vstr	d6, [r7, #8]
 8010530:	ed87 7b04 	vstr	d7, [r7, #16]
 8010534:	e7d2      	b.n	80104dc <__kernel_rem_pio2+0x3ac>
 8010536:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8010620 <__kernel_rem_pio2+0x4f0>
 801053a:	aa42      	add	r2, sp, #264	@ 0x108
 801053c:	4413      	add	r3, r2
 801053e:	4622      	mov	r2, r4
 8010540:	2a00      	cmp	r2, #0
 8010542:	da24      	bge.n	801058e <__kernel_rem_pio2+0x45e>
 8010544:	b34e      	cbz	r6, 801059a <__kernel_rem_pio2+0x46a>
 8010546:	eeb1 7b46 	vneg.f64	d7, d6
 801054a:	ed87 7b00 	vstr	d7, [r7]
 801054e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8010552:	aa44      	add	r2, sp, #272	@ 0x110
 8010554:	2301      	movs	r3, #1
 8010556:	ee37 7b46 	vsub.f64	d7, d7, d6
 801055a:	429c      	cmp	r4, r3
 801055c:	da20      	bge.n	80105a0 <__kernel_rem_pio2+0x470>
 801055e:	b10e      	cbz	r6, 8010564 <__kernel_rem_pio2+0x434>
 8010560:	eeb1 7b47 	vneg.f64	d7, d7
 8010564:	ed87 7b02 	vstr	d7, [r7, #8]
 8010568:	e7b8      	b.n	80104dc <__kernel_rem_pio2+0x3ac>
 801056a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8010620 <__kernel_rem_pio2+0x4f0>
 801056e:	aa42      	add	r2, sp, #264	@ 0x108
 8010570:	4413      	add	r3, r2
 8010572:	2c00      	cmp	r4, #0
 8010574:	da05      	bge.n	8010582 <__kernel_rem_pio2+0x452>
 8010576:	b10e      	cbz	r6, 801057c <__kernel_rem_pio2+0x44c>
 8010578:	eeb1 7b47 	vneg.f64	d7, d7
 801057c:	ed87 7b00 	vstr	d7, [r7]
 8010580:	e7ac      	b.n	80104dc <__kernel_rem_pio2+0x3ac>
 8010582:	ed33 6b02 	vldmdb	r3!, {d6}
 8010586:	3c01      	subs	r4, #1
 8010588:	ee37 7b06 	vadd.f64	d7, d7, d6
 801058c:	e7f1      	b.n	8010572 <__kernel_rem_pio2+0x442>
 801058e:	ed33 7b02 	vldmdb	r3!, {d7}
 8010592:	3a01      	subs	r2, #1
 8010594:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010598:	e7d2      	b.n	8010540 <__kernel_rem_pio2+0x410>
 801059a:	eeb0 7b46 	vmov.f64	d7, d6
 801059e:	e7d4      	b.n	801054a <__kernel_rem_pio2+0x41a>
 80105a0:	ecb2 6b02 	vldmia	r2!, {d6}
 80105a4:	3301      	adds	r3, #1
 80105a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80105aa:	e7d6      	b.n	801055a <__kernel_rem_pio2+0x42a>
 80105ac:	ed91 7b00 	vldr	d7, [r1]
 80105b0:	ed91 5b02 	vldr	d5, [r1, #8]
 80105b4:	3801      	subs	r0, #1
 80105b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80105ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105be:	ed81 6b00 	vstr	d6, [r1]
 80105c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80105c6:	ed81 7b02 	vstr	d7, [r1, #8]
 80105ca:	e798      	b.n	80104fe <__kernel_rem_pio2+0x3ce>
 80105cc:	ed92 7b00 	vldr	d7, [r2]
 80105d0:	ed92 5b02 	vldr	d5, [r2, #8]
 80105d4:	3901      	subs	r1, #1
 80105d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80105da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105de:	ed82 6b00 	vstr	d6, [r2]
 80105e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80105e6:	ed82 7b02 	vstr	d7, [r2, #8]
 80105ea:	e78d      	b.n	8010508 <__kernel_rem_pio2+0x3d8>
 80105ec:	ed33 6b02 	vldmdb	r3!, {d6}
 80105f0:	3c01      	subs	r4, #1
 80105f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80105f6:	e78f      	b.n	8010518 <__kernel_rem_pio2+0x3e8>
 80105f8:	eeb1 5b45 	vneg.f64	d5, d5
 80105fc:	eeb1 6b46 	vneg.f64	d6, d6
 8010600:	ed87 5b00 	vstr	d5, [r7]
 8010604:	eeb1 7b47 	vneg.f64	d7, d7
 8010608:	ed87 6b02 	vstr	d6, [r7, #8]
 801060c:	e790      	b.n	8010530 <__kernel_rem_pio2+0x400>
 801060e:	bf00      	nop
 8010610:	00000000 	.word	0x00000000
 8010614:	41700000 	.word	0x41700000
 8010618:	00000000 	.word	0x00000000
 801061c:	3e700000 	.word	0x3e700000
	...

08010628 <scalbn>:
 8010628:	ee10 1a90 	vmov	r1, s1
 801062c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010630:	b98b      	cbnz	r3, 8010656 <scalbn+0x2e>
 8010632:	ee10 3a10 	vmov	r3, s0
 8010636:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801063a:	4319      	orrs	r1, r3
 801063c:	d00a      	beq.n	8010654 <scalbn+0x2c>
 801063e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80106f0 <scalbn+0xc8>
 8010642:	4b37      	ldr	r3, [pc, #220]	@ (8010720 <scalbn+0xf8>)
 8010644:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010648:	4298      	cmp	r0, r3
 801064a:	da0b      	bge.n	8010664 <scalbn+0x3c>
 801064c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80106f8 <scalbn+0xd0>
 8010650:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010654:	4770      	bx	lr
 8010656:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801065a:	4293      	cmp	r3, r2
 801065c:	d107      	bne.n	801066e <scalbn+0x46>
 801065e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010662:	4770      	bx	lr
 8010664:	ee10 1a90 	vmov	r1, s1
 8010668:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801066c:	3b36      	subs	r3, #54	@ 0x36
 801066e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010672:	4290      	cmp	r0, r2
 8010674:	dd0d      	ble.n	8010692 <scalbn+0x6a>
 8010676:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010700 <scalbn+0xd8>
 801067a:	ee10 3a90 	vmov	r3, s1
 801067e:	eeb0 6b47 	vmov.f64	d6, d7
 8010682:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8010708 <scalbn+0xe0>
 8010686:	2b00      	cmp	r3, #0
 8010688:	fe27 7b05 	vselge.f64	d7, d7, d5
 801068c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8010690:	4770      	bx	lr
 8010692:	4418      	add	r0, r3
 8010694:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8010698:	4298      	cmp	r0, r3
 801069a:	dcec      	bgt.n	8010676 <scalbn+0x4e>
 801069c:	2800      	cmp	r0, #0
 801069e:	dd0a      	ble.n	80106b6 <scalbn+0x8e>
 80106a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80106a4:	ec53 2b10 	vmov	r2, r3, d0
 80106a8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80106ac:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80106b0:	ec43 2b10 	vmov	d0, r2, r3
 80106b4:	4770      	bx	lr
 80106b6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80106ba:	da09      	bge.n	80106d0 <scalbn+0xa8>
 80106bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80106f8 <scalbn+0xd0>
 80106c0:	ee10 3a90 	vmov	r3, s1
 80106c4:	eeb0 6b47 	vmov.f64	d6, d7
 80106c8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8010710 <scalbn+0xe8>
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	e7db      	b.n	8010688 <scalbn+0x60>
 80106d0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80106d4:	ec53 2b10 	vmov	r2, r3, d0
 80106d8:	3036      	adds	r0, #54	@ 0x36
 80106da:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80106de:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80106e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010718 <scalbn+0xf0>
 80106e6:	ec43 2b10 	vmov	d0, r2, r3
 80106ea:	e7b1      	b.n	8010650 <scalbn+0x28>
 80106ec:	f3af 8000 	nop.w
 80106f0:	00000000 	.word	0x00000000
 80106f4:	43500000 	.word	0x43500000
 80106f8:	c2f8f359 	.word	0xc2f8f359
 80106fc:	01a56e1f 	.word	0x01a56e1f
 8010700:	8800759c 	.word	0x8800759c
 8010704:	7e37e43c 	.word	0x7e37e43c
 8010708:	8800759c 	.word	0x8800759c
 801070c:	fe37e43c 	.word	0xfe37e43c
 8010710:	c2f8f359 	.word	0xc2f8f359
 8010714:	81a56e1f 	.word	0x81a56e1f
 8010718:	00000000 	.word	0x00000000
 801071c:	3c900000 	.word	0x3c900000
 8010720:	ffff3cb0 	.word	0xffff3cb0
 8010724:	00000000 	.word	0x00000000

08010728 <floor>:
 8010728:	ee10 3a90 	vmov	r3, s1
 801072c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8010730:	ee10 2a10 	vmov	r2, s0
 8010734:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8010738:	2913      	cmp	r1, #19
 801073a:	b530      	push	{r4, r5, lr}
 801073c:	4615      	mov	r5, r2
 801073e:	dc33      	bgt.n	80107a8 <floor+0x80>
 8010740:	2900      	cmp	r1, #0
 8010742:	da18      	bge.n	8010776 <floor+0x4e>
 8010744:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8010808 <floor+0xe0>
 8010748:	ee30 0b07 	vadd.f64	d0, d0, d7
 801074c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010754:	dd0a      	ble.n	801076c <floor+0x44>
 8010756:	2b00      	cmp	r3, #0
 8010758:	da50      	bge.n	80107fc <floor+0xd4>
 801075a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801075e:	4313      	orrs	r3, r2
 8010760:	2200      	movs	r2, #0
 8010762:	4293      	cmp	r3, r2
 8010764:	4b2a      	ldr	r3, [pc, #168]	@ (8010810 <floor+0xe8>)
 8010766:	bf08      	it	eq
 8010768:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801076c:	4619      	mov	r1, r3
 801076e:	4610      	mov	r0, r2
 8010770:	ec41 0b10 	vmov	d0, r0, r1
 8010774:	e01f      	b.n	80107b6 <floor+0x8e>
 8010776:	4827      	ldr	r0, [pc, #156]	@ (8010814 <floor+0xec>)
 8010778:	4108      	asrs	r0, r1
 801077a:	ea03 0400 	and.w	r4, r3, r0
 801077e:	4314      	orrs	r4, r2
 8010780:	d019      	beq.n	80107b6 <floor+0x8e>
 8010782:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010808 <floor+0xe0>
 8010786:	ee30 0b07 	vadd.f64	d0, d0, d7
 801078a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010792:	ddeb      	ble.n	801076c <floor+0x44>
 8010794:	2b00      	cmp	r3, #0
 8010796:	bfbe      	ittt	lt
 8010798:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801079c:	410a      	asrlt	r2, r1
 801079e:	189b      	addlt	r3, r3, r2
 80107a0:	ea23 0300 	bic.w	r3, r3, r0
 80107a4:	2200      	movs	r2, #0
 80107a6:	e7e1      	b.n	801076c <floor+0x44>
 80107a8:	2933      	cmp	r1, #51	@ 0x33
 80107aa:	dd05      	ble.n	80107b8 <floor+0x90>
 80107ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80107b0:	d101      	bne.n	80107b6 <floor+0x8e>
 80107b2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80107b6:	bd30      	pop	{r4, r5, pc}
 80107b8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80107bc:	f04f 30ff 	mov.w	r0, #4294967295
 80107c0:	40e0      	lsrs	r0, r4
 80107c2:	4210      	tst	r0, r2
 80107c4:	d0f7      	beq.n	80107b6 <floor+0x8e>
 80107c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8010808 <floor+0xe0>
 80107ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80107d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d6:	ddc9      	ble.n	801076c <floor+0x44>
 80107d8:	2b00      	cmp	r3, #0
 80107da:	da02      	bge.n	80107e2 <floor+0xba>
 80107dc:	2914      	cmp	r1, #20
 80107de:	d103      	bne.n	80107e8 <floor+0xc0>
 80107e0:	3301      	adds	r3, #1
 80107e2:	ea22 0200 	bic.w	r2, r2, r0
 80107e6:	e7c1      	b.n	801076c <floor+0x44>
 80107e8:	2401      	movs	r4, #1
 80107ea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80107ee:	fa04 f101 	lsl.w	r1, r4, r1
 80107f2:	440a      	add	r2, r1
 80107f4:	42aa      	cmp	r2, r5
 80107f6:	bf38      	it	cc
 80107f8:	191b      	addcc	r3, r3, r4
 80107fa:	e7f2      	b.n	80107e2 <floor+0xba>
 80107fc:	2200      	movs	r2, #0
 80107fe:	4613      	mov	r3, r2
 8010800:	e7b4      	b.n	801076c <floor+0x44>
 8010802:	bf00      	nop
 8010804:	f3af 8000 	nop.w
 8010808:	8800759c 	.word	0x8800759c
 801080c:	7e37e43c 	.word	0x7e37e43c
 8010810:	bff00000 	.word	0xbff00000
 8010814:	000fffff 	.word	0x000fffff

08010818 <_init>:
 8010818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081a:	bf00      	nop
 801081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801081e:	bc08      	pop	{r3}
 8010820:	469e      	mov	lr, r3
 8010822:	4770      	bx	lr

08010824 <_fini>:
 8010824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010826:	bf00      	nop
 8010828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801082a:	bc08      	pop	{r3}
 801082c:	469e      	mov	lr, r3
 801082e:	4770      	bx	lr
