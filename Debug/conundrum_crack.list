
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011018  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080112b8  080112b8  000122b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080117a0  080117a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080117a8  080117a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080117ac  080117ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  080117b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000097c  24000084  08011834  00013084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a00  08011834  00013a00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bca4  00000000  00000000  000130b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eb1  00000000  00000000  0002ed56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012f3  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba7f  00000000  00000000  0003578b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022172  00000000  00000000  0007120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167921  00000000  00000000  0009337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fac9d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007484  00000000  00000000  001face0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00202164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080112a0 	.word	0x080112a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	080112a0 	.word	0x080112a0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_soft_reset>:
/*!
 Performs a SW-based reset of the RA8875
 */
/**************************************************************************/
void RA8875_soft_reset (void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_SOFTRESET);
 80003c0:	2101      	movs	r1, #1
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fa12 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (10);
 80003c8:	200a      	movs	r0, #10
 80003ca:	f004 fccb 	bl	8004d64 <HAL_Delay>
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fa0b 	bl	80007ec <RA8875_write_reg>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <RA885_pll_init>:
/*!
 Initialise the PLL
 */
/**************************************************************************/
static void RA885_pll_init (void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  if (_size == RA8875_480x80 || _size == RA8875_480x128 || _size == RA8875_480x272)
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <RA885_pll_init+0x5c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <RA885_pll_init+0x5c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d003      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <RA885_pll_init+0x5c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d10e      	bne.n	8000416 <RA885_pll_init+0x3a>
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 8);
 80003f8:	2108      	movs	r1, #8
 80003fa:	2088      	movs	r0, #136	@ 0x88
 80003fc:	f000 f9f6 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 8000400:	2001      	movs	r0, #1
 8000402:	f004 fcaf 	bl	8004d64 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000406:	2102      	movs	r1, #2
 8000408:	2089      	movs	r0, #137	@ 0x89
 800040a:	f000 f9ef 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800040e:	2001      	movs	r0, #1
 8000410:	f004 fca8 	bl	8004d64 <HAL_Delay>
 8000414:	e00e      	b.n	8000434 <RA885_pll_init+0x58>
  }
  else /* (_size == RA8875_800x480) */
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 11);
 8000416:	210b      	movs	r1, #11
 8000418:	2088      	movs	r0, #136	@ 0x88
 800041a:	f000 f9e7 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800041e:	2001      	movs	r0, #1
 8000420:	f004 fca0 	bl	8004d64 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000424:	2102      	movs	r1, #2
 8000426:	2089      	movs	r0, #137	@ 0x89
 8000428:	f000 f9e0 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800042c:	2001      	movs	r0, #1
 800042e:	f004 fc99 	bl	8004d64 <HAL_Delay>
  }
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	240000a0 	.word	0x240000a0

0800043c <RA8875_init>:
/*!
 Initialises the driver IC (clock setup, etc.)
 */
/**************************************************************************/
static void RA8875_init (uint16_t color_depth, uint16_t mcu_bus)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	460a      	mov	r2, r1
 8000446:	80fb      	strh	r3, [r7, #6]
 8000448:	4613      	mov	r3, r2
 800044a:	80bb      	strh	r3, [r7, #4]

  RA885_pll_init ();
 800044c:	f7ff ffc6 	bl	80003dc <RA885_pll_init>
  RA8875_write_reg (RA8875_SYSR, RA8875_SYSR_16BPP | RA8875_SYSR_MCU8);
 8000450:	210c      	movs	r1, #12
 8000452:	2010      	movs	r0, #16
 8000454:	f000 f9ca 	bl	80007ec <RA8875_write_reg>
  uint8_t vsync_pw;
  uint16_t vsync_nondisp;
  uint16_t vsync_start;

  /* Set the correct values for the display being used */
  if (_size == RA8875_480x80)
 8000458:	4b8e      	ldr	r3, [pc, #568]	@ (8000694 <RA8875_init+0x258>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d113      	bne.n	8000488 <RA8875_init+0x4c>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000460:	2382      	movs	r3, #130	@ 0x82
 8000462:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000464:	230a      	movs	r3, #10
 8000466:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000468:	2308      	movs	r3, #8
 800046a:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 800046c:	2330      	movs	r3, #48	@ 0x30
 800046e:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000474:	2303      	movs	r3, #3
 8000476:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000478:	2308      	movs	r3, #8
 800047a:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 800047c:	230a      	movs	r3, #10
 800047e:	74bb      	strb	r3, [r7, #18]
    _voffset = 192; // This uses the bottom 80 pixels of a 272 pixel controller
 8000480:	4b85      	ldr	r3, [pc, #532]	@ (8000698 <RA8875_init+0x25c>)
 8000482:	22c0      	movs	r2, #192	@ 0xc0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e02e      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else if (_size == RA8875_480x128 || _size == RA8875_480x272)
 8000488:	4b82      	ldr	r3, [pc, #520]	@ (8000694 <RA8875_init+0x258>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <RA8875_init+0x5c>
 8000490:	4b80      	ldr	r3, [pc, #512]	@ (8000694 <RA8875_init+0x258>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d113      	bne.n	80004c0 <RA8875_init+0x84>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000498:	2382      	movs	r3, #130	@ 0x82
 800049a:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 800049c:	230a      	movs	r3, #10
 800049e:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 80004a0:	2308      	movs	r3, #8
 80004a2:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 80004a4:	2330      	movs	r3, #48	@ 0x30
 80004a6:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 80004ac:	2303      	movs	r3, #3
 80004ae:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 80004b0:	2308      	movs	r3, #8
 80004b2:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 80004b4:	230a      	movs	r3, #10
 80004b6:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004b8:	4b77      	ldr	r3, [pc, #476]	@ (8000698 <RA8875_init+0x25c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	e012      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else // (_size == RA8875_800x480)
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80004c0:	2381      	movs	r3, #129	@ 0x81
 80004c2:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 26;
 80004c4:	231a      	movs	r3, #26
 80004c6:	74fb      	strb	r3, [r7, #19]
    hsync_start = 32;
 80004c8:	2320      	movs	r3, #32
 80004ca:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 96;
 80004cc:	2360      	movs	r3, #96	@ 0x60
 80004ce:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 32;
 80004d4:	2320      	movs	r3, #32
 80004d6:	823b      	strh	r3, [r7, #16]
    vsync_start = 23;
 80004d8:	2317      	movs	r3, #23
 80004da:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000698 <RA8875_init+0x25c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Set color dept and MCU Bus
   */
  RA8875_write_reg (RA8875_SYSR, color_depth | mcu_bus);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	88bb      	ldrh	r3, [r7, #4]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	2010      	movs	r0, #16
 80004f6:	f000 f979 	bl	80007ec <RA8875_write_reg>

  RA8875_write_reg (RA8875_PCSR, pixclk);
 80004fa:	7dfb      	ldrb	r3, [r7, #23]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2004      	movs	r0, #4
 8000500:	f000 f974 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (1);
 8000504:	2001      	movs	r0, #1
 8000506:	f004 fc2d 	bl	8004d64 <HAL_Delay>

  /* Horizontal settings registers */
  RA8875_write_reg (RA8875_HDWR, (_width / 8) - 1); // H width: (HDWR + 1) * 8 = 480
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <RA8875_init+0x260>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3b01      	subs	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	2014      	movs	r0, #20
 800051c:	f000 f966 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDFTR, RA8875_HNDFTR_DE_HIGH + hsync_finetune);
 8000520:	7d3b      	ldrb	r3, [r7, #20]
 8000522:	4619      	mov	r1, r3
 8000524:	2015      	movs	r0, #21
 8000526:	f000 f961 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDR, (hsync_nondisp - hsync_finetune - 2) / 8); // H non-display: HNDR * 8 + HNDFTR + 2 = 10
 800052a:	7cfa      	ldrb	r2, [r7, #19]
 800052c:	7d3b      	ldrb	r3, [r7, #20]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	3b02      	subs	r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	da00      	bge.n	8000538 <RA8875_init+0xfc>
 8000536:	3307      	adds	r3, #7
 8000538:	10db      	asrs	r3, r3, #3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	2016      	movs	r0, #22
 8000540:	f000 f954 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSTR, hsync_start / 8 - 1); // Hsync start: (HSTR + 1)*8
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	3b01      	subs	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	2017      	movs	r0, #23
 8000552:	f000 f94b 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HPWR,
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3b01      	subs	r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	2018      	movs	r0, #24
 8000564:	f000 f942 	bl	80007ec <RA8875_write_reg>
  RA8875_HPWR_LOW + (hsync_pw / 8 - 1)); // HSync pulse width = (HPWR+1) * 8

  /* Vertical settings registers */
  RA8875_write_reg (RA8875_VDHR0, (uint16_t) (_height - 1 + _voffset) & 0xFF);
 8000568:	4b4d      	ldr	r3, [pc, #308]	@ (80006a0 <RA8875_init+0x264>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b4a      	ldr	r3, [pc, #296]	@ (8000698 <RA8875_init+0x25c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	3b01      	subs	r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f935 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VDHR1, (uint16_t) (_height - 1 + _voffset) >> 8);
 8000582:	4b45      	ldr	r3, [pc, #276]	@ (8000698 <RA8875_init+0x25c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <RA8875_init+0x264>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	3b01      	subs	r3, #1
 8000592:	b29b      	uxth	r3, r3
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	201a      	movs	r0, #26
 800059e:	f000 f925 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR0, vsync_nondisp - 1); // V non-display period = VNDR + 1
 80005a2:	8a3b      	ldrh	r3, [r7, #16]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3b01      	subs	r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	201b      	movs	r0, #27
 80005ae:	f000 f91d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR1, vsync_nondisp >> 8);
 80005b2:	8a3b      	ldrh	r3, [r7, #16]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 f915 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR0, vsync_start - 1); // Vsync start position = VSTR + 1
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	201d      	movs	r0, #29
 80005ce:	f000 f90d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR1, vsync_start >> 8);
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	201e      	movs	r0, #30
 80005de:	f000 f905 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VPWR,
 80005e2:	7cbb      	ldrb	r3, [r7, #18]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	201f      	movs	r0, #31
 80005ec:	f000 f8fe 	bl	80007ec <RA8875_write_reg>
  RA8875_VPWR_LOW + vsync_pw - 1); // Vsync pulse width = VPWR + 1

  /* Set active window X */
  RA8875_write_reg (RA8875_HSAW0, 0); // horizontal start point
 80005f0:	2100      	movs	r1, #0
 80005f2:	2030      	movs	r0, #48	@ 0x30
 80005f4:	f000 f8fa 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSAW1, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2031      	movs	r0, #49	@ 0x31
 80005fc:	f000 f8f6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW0, (uint16_t) (_width - 1) & 0xFF); // horizontal end point
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <RA8875_init+0x260>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	3b01      	subs	r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	2034      	movs	r0, #52	@ 0x34
 800060e:	f000 f8ed 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW1, (uint16_t) (_width - 1) >> 8);
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <RA8875_init+0x260>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2035      	movs	r0, #53	@ 0x35
 8000624:	f000 f8e2 	bl	80007ec <RA8875_write_reg>

  /* Set active window Y */
  RA8875_write_reg (RA8875_VSAW0, 0 + _voffset); // vertical start point
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <RA8875_init+0x25c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f000 f8dc 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSAW1, 0 + _voffset);
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <RA8875_init+0x25c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2033      	movs	r0, #51	@ 0x33
 800063c:	f000 f8d6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW0, (uint16_t) (_height - 1 + _voffset) & 0xFF); // vertical end point
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <RA8875_init+0x264>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <RA8875_init+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2036      	movs	r0, #54	@ 0x36
 8000656:	f000 f8c9 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW1, (uint16_t) (_height - 1 + _voffset) >> 8);
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <RA8875_init+0x25c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <RA8875_init+0x264>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	2037      	movs	r0, #55	@ 0x37
 8000676:	f000 f8b9 	bl	80007ec <RA8875_write_reg>

  /* Clear the entire window */
  RA8875_write_reg (RA8875_MCLR, RA8875_MCLR_START | RA8875_MCLR_FULL);
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	208e      	movs	r0, #142	@ 0x8e
 800067e:	f000 f8b5 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f004 fb6d 	bl	8004d64 <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	240000a0 	.word	0x240000a0
 8000698:	240000a8 	.word	0x240000a8
 800069c:	240000a2 	.word	0x240000a2
 80006a0:	240000a4 	.word	0x240000a4

080006a4 <RA8875_begin>:
 'RA8875_800x480' (5" and 7" displays)
 @return 1 if we reached the end 0 if some error occurs
 */
/**************************************************************************/
uint8_t RA8875_begin (GPIO_TypeDef *reset_port, uint16_t reset_pin, GPIO_TypeDef *wait_port, uint16_t wait_pin, RA8875_sizes_e s, RA8875_bpp_e bpp)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	817b      	strh	r3, [r7, #10]
 80006b4:	4613      	mov	r3, r2
 80006b6:	813b      	strh	r3, [r7, #8]
  _reset_port = reset_port;
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <RA8875_begin+0xf8>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6013      	str	r3, [r2, #0]
  _reset_pin = reset_pin;
 80006be:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <RA8875_begin+0xfc>)
 80006c0:	897b      	ldrh	r3, [r7, #10]
 80006c2:	8013      	strh	r3, [r2, #0]
  _size = s;
 80006c4:	4a37      	ldr	r2, [pc, #220]	@ (80007a4 <RA8875_begin+0x100>)
 80006c6:	7e3b      	ldrb	r3, [r7, #24]
 80006c8:	7013      	strb	r3, [r2, #0]
  _wait_port = wait_port;
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <RA8875_begin+0x104>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
  _wait_pin = wait_pin;
 80006d0:	4a36      	ldr	r2, [pc, #216]	@ (80007ac <RA8875_begin+0x108>)
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	8013      	strh	r3, [r2, #0]
  _color_depth = bpp;
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <RA8875_begin+0x10c>)
 80006d8:	7f3b      	ldrb	r3, [r7, #28]
 80006da:	7013      	strb	r3, [r2, #0]
  //Wait 50 ms
  HAL_Delay (50);
 80006dc:	2032      	movs	r0, #50	@ 0x32
 80006de:	f004 fb41 	bl	8004d64 <HAL_Delay>

  if (_size == RA8875_480x80)
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <RA8875_begin+0x100>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <RA8875_begin+0x56>
  {
    _width = 480;
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <RA8875_begin+0x110>)
 80006ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80006f0:	801a      	strh	r2, [r3, #0]
    _height = 80;
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <RA8875_begin+0x114>)
 80006f4:	2250      	movs	r2, #80	@ 0x50
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	e027      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x128)
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <RA8875_begin+0x100>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d107      	bne.n	8000712 <RA8875_begin+0x6e>
  {
    _width = 480;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <RA8875_begin+0x110>)
 8000704:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000708:	801a      	strh	r2, [r3, #0]
    _height = 128;
 800070a:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <RA8875_begin+0x114>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e01b      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x272)
 8000712:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <RA8875_begin+0x100>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d108      	bne.n	800072c <RA8875_begin+0x88>
  {
    _width = 480;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <RA8875_begin+0x110>)
 800071c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000720:	801a      	strh	r2, [r3, #0]
    _height = 272;
 8000722:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <RA8875_begin+0x114>)
 8000724:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000728:	801a      	strh	r2, [r3, #0]
 800072a:	e00e      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_800x480)
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <RA8875_begin+0x100>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d108      	bne.n	8000746 <RA8875_begin+0xa2>
  {
    _width = 800;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <RA8875_begin+0x110>)
 8000736:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800073a:	801a      	strh	r2, [r3, #0]
    _height = 480;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <RA8875_begin+0x114>)
 800073e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000742:	801a      	strh	r2, [r3, #0]
 8000744:	e001      	b.n	800074a <RA8875_begin+0xa6>
  }
  else
  {
    return 0;
 8000746:	2300      	movs	r3, #0
 8000748:	e024      	b.n	8000794 <RA8875_begin+0xf0>
  }
  _rotation = 0;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <RA8875_begin+0x118>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

  //Display hardware reset. Reset is active LOW
  LCD_RESET_OFF
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <RA8875_begin+0xfc>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <RA8875_begin+0xf8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0412      	lsls	r2, r2, #16
 800075c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800075e:	200a      	movs	r0, #10
 8000760:	f004 fb00 	bl	8004d64 <HAL_Delay>
  LCD_RESET_ON
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <RA8875_begin+0xfc>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <RA8875_begin+0xf8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800076e:	200a      	movs	r0, #10
 8000770:	f004 faf8 	bl	8004d64 <HAL_Delay>
  RA8875_soft_reset ();
 8000774:	f7ff fe22 	bl	80003bc <RA8875_soft_reset>
  HAL_Delay (10);
 8000778:	200a      	movs	r0, #10
 800077a:	f004 faf3 	bl	8004d64 <HAL_Delay>
  RA8875_init (((bpp == RA8875_8BPP) ? RA8875_SYSR_8BPP : RA8875_SYSR_16BPP), RA8875_SYSR_MCU8);
 800077e:	7f3b      	ldrb	r3, [r7, #28]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <RA8875_begin+0xe4>
 8000784:	2300      	movs	r3, #0
 8000786:	e000      	b.n	800078a <RA8875_begin+0xe6>
 8000788:	230c      	movs	r3, #12
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe55 	bl	800043c <RA8875_init>

  return 1;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	240000ac 	.word	0x240000ac
 80007a0:	240000b0 	.word	0x240000b0
 80007a4:	240000a0 	.word	0x240000a0
 80007a8:	240000b4 	.word	0x240000b4
 80007ac:	240000b8 	.word	0x240000b8
 80007b0:	240000ba 	.word	0x240000ba
 80007b4:	240000a2 	.word	0x240000a2
 80007b8:	240000a4 	.word	0x240000a4
 80007bc:	240000a7 	.word	0x240000a7

080007c0 <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80007c4:	bf00      	nop
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <RA8875_BUS_FREE+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <RA8875_BUS_FREE+0x28>)
 80007ce:	8812      	ldrh	r2, [r2, #0]
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f7      	beq.n	80007c6 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	240000b4 	.word	0x240000b4
 80007e8:	240000b8 	.word	0x240000b8

080007ec <RA8875_write_reg>:
 @param reg Register to write to
 @param val Value to write
 */
/**************************************************************************/
void RA8875_write_reg (uint8_t reg, uint8_t val)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
  RA8875_write_command (reg);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f894 	bl	800092c <RA8875_write_command>
  RA8875_write_data (val);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f814 	bl	8000834 <RA8875_write_data>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f883 	bl	800092c <RA8875_write_command>
  return RA8875_read_data ();
 8000826:	f000 f843 	bl	80008b0 <RA8875_read_data>
 800082a:	4603      	mov	r3, r0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <RA8875_write_data+0x6c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <RA8875_write_data+0x70>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4013      	ands	r3, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ffb6 	bl	80007c0 <RA8875_BUS_FREE>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01d      	beq.n	8000896 <RA8875_write_data+0x62>
  }
  uint8_t rs_rw_info = 0b00000000;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <RA8875_write_data+0x74>)
 8000866:	f006 fa47 	bl	8006cf8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800086a:	f107 010f 	add.w	r1, r7, #15
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <RA8875_write_data+0x78>)
 8000876:	f00a f9a7 	bl	800abc8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800087a:	1df9      	adds	r1, r7, #7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	480a      	ldr	r0, [pc, #40]	@ (80008ac <RA8875_write_data+0x78>)
 8000884:	f00a f9a0 	bl	800abc8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <RA8875_write_data+0x74>)
 8000890:	f006 fa32 	bl	8006cf8 <HAL_GPIO_WritePin>
 8000894:	e000      	b.n	8000898 <RA8875_write_data+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 8000896:	bf00      	nop
}
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	240000b4 	.word	0x240000b4
 80008a4:	240000b8 	.word	0x240000b8
 80008a8:	58020c00 	.word	0x58020c00
 80008ac:	240003b8 	.word	0x240003b8

080008b0 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <RA8875_read_data+0x6c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <RA8875_read_data+0x70>)
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff ff78 	bl	80007c0 <RA8875_BUS_FREE>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <RA8875_read_data+0x2a>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e01c      	b.n	8000914 <RA8875_read_data+0x64>
  }
  uint8_t rs_rw_info = 0b01000000;
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <RA8875_read_data+0x74>)
 80008e6:	f006 fa07 	bl	8006cf8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80008ea:	1db9      	adds	r1, r7, #6
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <RA8875_read_data+0x78>)
 80008f4:	f00a f968 	bl	800abc8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	2201      	movs	r2, #1
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <RA8875_read_data+0x78>)
 8000902:	f00a fb4f 	bl	800afa4 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <RA8875_read_data+0x74>)
 800090e:	f006 f9f3 	bl	8006cf8 <HAL_GPIO_WritePin>
  return data;
 8000912:	79fb      	ldrb	r3, [r7, #7]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240000b4 	.word	0x240000b4
 8000920:	240000b8 	.word	0x240000b8
 8000924:	58020c00 	.word	0x58020c00
 8000928:	240003b8 	.word	0x240003b8

0800092c <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <RA8875_write_command+0x6c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	4a17      	ldr	r2, [pc, #92]	@ (800099c <RA8875_write_command+0x70>)
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	4013      	ands	r3, r2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d105      	bne.n	8000952 <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff3a 	bl	80007c0 <RA8875_BUS_FREE>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d01d      	beq.n	800098e <RA8875_write_command+0x62>
  }
  uint8_t rs_rw_info = 0b10000000;
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <RA8875_write_command+0x74>)
 800095e:	f006 f9cb 	bl	8006cf8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000962:	f107 010f 	add.w	r1, r7, #15
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2201      	movs	r2, #1
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <RA8875_write_command+0x78>)
 800096e:	f00a f92b 	bl	800abc8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 8000972:	1df9      	adds	r1, r7, #7
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	2201      	movs	r2, #1
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <RA8875_write_command+0x78>)
 800097c:	f00a f924 	bl	800abc8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <RA8875_write_command+0x74>)
 8000988:	f006 f9b6 	bl	8006cf8 <HAL_GPIO_WritePin>
 800098c:	e000      	b.n	8000990 <RA8875_write_command+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 800098e:	bf00      	nop
}
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	240000b4 	.word	0x240000b4
 800099c:	240000b8 	.word	0x240000b8
 80009a0:	58020c00 	.word	0x58020c00
 80009a4:	240003b8 	.word	0x240003b8

080009a8 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 80009ae:	2040      	movs	r0, #64	@ 0x40
 80009b0:	f7ff ffbc 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 80009b4:	f7ff ff7c 	bl	80008b0 <RA8875_read_data>
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009c2:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff34 	bl	8000834 <RA8875_write_data>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff14 	bl	8000814 <RA8875_read_reg>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	4013      	ands	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f3      	bne.n	80009e4 <RA8875_wait_poll+0x10>
 80009fc:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <RA8875_apply_rotation_x+0x34>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d108      	bne.n	8000a2c <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <RA8875_apply_rotation_x+0x38>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	80fb      	strh	r3, [r7, #6]
      break;
 8000a2a:	bf00      	nop
  }

  return x;
 8000a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	240000a7 	.word	0x240000a7
 8000a40:	240000a2 	.word	0x240000a2

08000a44 <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <RA8875_apply_rotation_y+0x40>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d108      	bne.n	8000a68 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <RA8875_apply_rotation_y+0x44>)
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3b01      	subs	r3, #1
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	80fb      	strh	r3, [r7, #6]
      break;
 8000a66:	bf00      	nop
  }

  return y + _voffset;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <RA8875_apply_rotation_y+0x48>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b21b      	sxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	240000a7 	.word	0x240000a7
 8000a88:	240000a4 	.word	0x240000a4
 8000a8c:	240000a8 	.word	0x240000a8

08000a90 <circleHelper>:
/*!
 Helper function for higher level circle drawing code
 */
/**************************************************************************/
static void circleHelper (int16_t x, int16_t y, int16_t r, uint16_t color, uint8_t filled)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffa8 	bl	8000a08 <RA8875_apply_rotation_x>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffbf 	bl	8000a44 <RA8875_apply_rotation_y>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]

  /* Set X */
  RA8875_write_command (0x99);
 8000aca:	2099      	movs	r0, #153	@ 0x99
 8000acc:	f7ff ff2e 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fead 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9a);
 8000ada:	209a      	movs	r0, #154	@ 0x9a
 8000adc:	f7ff ff26 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae4:	121b      	asrs	r3, r3, #8
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fea2 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x9b);
 8000af0:	209b      	movs	r0, #155	@ 0x9b
 8000af2:	f7ff ff1b 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fe9a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9c);
 8000b00:	209c      	movs	r0, #156	@ 0x9c
 8000b02:	f7ff ff13 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0a:	121b      	asrs	r3, r3, #8
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe8f 	bl	8000834 <RA8875_write_data>

  /* Set Radius */
  RA8875_write_command (0x9d);
 8000b16:	209d      	movs	r0, #157	@ 0x9d
 8000b18:	f7ff ff08 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe87 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000b26:	2063      	movs	r0, #99	@ 0x63
 8000b28:	f7ff ff00 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000b2c:	883b      	ldrh	r3, [r7, #0]
 8000b2e:	0adb      	lsrs	r3, r3, #11
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe7d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000b3a:	2064      	movs	r0, #100	@ 0x64
 8000b3c:	f7ff fef6 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000b40:	883b      	ldrh	r3, [r7, #0]
 8000b42:	115b      	asrs	r3, r3, #5
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe71 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000b52:	2065      	movs	r0, #101	@ 0x65
 8000b54:	f7ff feea 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000b58:	883b      	ldrh	r3, [r7, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe66 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000b68:	2090      	movs	r0, #144	@ 0x90
 8000b6a:	f7ff fedf 	bl	800092c <RA8875_write_command>
  if (filled)
 8000b6e:	7e3b      	ldrb	r3, [r7, #24]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <circleHelper+0xec>
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_FILL);
 8000b74:	2060      	movs	r0, #96	@ 0x60
 8000b76:	f7ff fe5d 	bl	8000834 <RA8875_write_data>
 8000b7a:	e002      	b.n	8000b82 <circleHelper+0xf2>
  }
  else
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_NOFILL);
 8000b7c:	2040      	movs	r0, #64	@ 0x40
 8000b7e:	f7ff fe59 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_CIRCLE_STATUS);
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	2090      	movs	r0, #144	@ 0x90
 8000b86:	f7ff ff25 	bl	80009d4 <RA8875_wait_poll>
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}

08000b92 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000b92:	b590      	push	{r4, r7, lr}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4604      	mov	r4, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	80fb      	strh	r3, [r7, #6]
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	80bb      	strh	r3, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
 8000bac:	4613      	mov	r3, r2
 8000bae:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff27 	bl	8000a08 <RA8875_apply_rotation_x>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff3e 	bl	8000a44 <RA8875_apply_rotation_y>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000bcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff19 	bl	8000a08 <RA8875_apply_rotation_x>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000bda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff30 	bl	8000a44 <RA8875_apply_rotation_y>
 8000be4:	4603      	mov	r3, r0
 8000be6:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 8000be8:	2091      	movs	r0, #145	@ 0x91
 8000bea:	f7ff fe9f 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe1e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000bf8:	2092      	movs	r0, #146	@ 0x92
 8000bfa:	f7ff fe97 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c02:	121b      	asrs	r3, r3, #8
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe13 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000c0e:	2093      	movs	r0, #147	@ 0x93
 8000c10:	f7ff fe8c 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe0b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000c1e:	2094      	movs	r0, #148	@ 0x94
 8000c20:	f7ff fe84 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000c24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c28:	121b      	asrs	r3, r3, #8
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fe00 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000c34:	2095      	movs	r0, #149	@ 0x95
 8000c36:	f7ff fe79 	bl	800092c <RA8875_write_command>
  RA8875_write_data (w);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fdf8 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000c44:	2096      	movs	r0, #150	@ 0x96
 8000c46:	f7ff fe71 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c4e:	121b      	asrs	r3, r3, #8
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fded 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000c5a:	2097      	movs	r0, #151	@ 0x97
 8000c5c:	f7ff fe66 	bl	800092c <RA8875_write_command>
  RA8875_write_data (h);
 8000c60:	883b      	ldrh	r3, [r7, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fde5 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000c6a:	2098      	movs	r0, #152	@ 0x98
 8000c6c:	f7ff fe5e 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c74:	121b      	asrs	r3, r3, #8
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fdda 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c80:	2063      	movs	r0, #99	@ 0x63
 8000c82:	f7ff fe53 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c86:	8b3b      	ldrh	r3, [r7, #24]
 8000c88:	0adb      	lsrs	r3, r3, #11
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fdd0 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c94:	2064      	movs	r0, #100	@ 0x64
 8000c96:	f7ff fe49 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c9a:	8b3b      	ldrh	r3, [r7, #24]
 8000c9c:	115b      	asrs	r3, r3, #5
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdc4 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000cac:	2065      	movs	r0, #101	@ 0x65
 8000cae:	f7ff fe3d 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000cb2:	8b3b      	ldrh	r3, [r7, #24]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fdb9 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000cc2:	2090      	movs	r0, #144	@ 0x90
 8000cc4:	f7ff fe32 	bl	800092c <RA8875_write_command>
  if (filled)
 8000cc8:	7f3b      	ldrb	r3, [r7, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000cce:	20b0      	movs	r0, #176	@ 0xb0
 8000cd0:	f7ff fdb0 	bl	8000834 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 8000cd4:	e002      	b.n	8000cdc <rectHelper+0x14a>
    RA8875_write_data (0x90);
 8000cd6:	2090      	movs	r0, #144	@ 0x90
 8000cd8:	f7ff fdac 	bl	8000834 <RA8875_write_data>
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4604      	mov	r4, r0
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80bb      	strh	r3, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	807b      	strh	r3, [r7, #2]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 8000d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe7e 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 8000d10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe95 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 8000d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe70 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 8000d2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe87 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d36:	4603      	mov	r3, r0
 8000d38:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000d3a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe62 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d44:	4603      	mov	r3, r0
 8000d46:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 8000d48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe79 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d52:	4603      	mov	r3, r0
 8000d54:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 8000d56:	2091      	movs	r0, #145	@ 0x91
 8000d58:	f7ff fde8 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x0);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd67 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000d66:	2092      	movs	r0, #146	@ 0x92
 8000d68:	f7ff fde0 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	121b      	asrs	r3, r3, #8
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd5c 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000d7c:	2093      	movs	r0, #147	@ 0x93
 8000d7e:	f7ff fdd5 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y0);
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fd54 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000d8c:	2094      	movs	r0, #148	@ 0x94
 8000d8e:	f7ff fdcd 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000d92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fd49 	bl	8000834 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000da2:	2095      	movs	r0, #149	@ 0x95
 8000da4:	f7ff fdc2 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x1);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd41 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000db2:	2096      	movs	r0, #150	@ 0x96
 8000db4:	f7ff fdba 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 8000db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dbc:	121b      	asrs	r3, r3, #8
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fd36 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x97);
 8000dc8:	2097      	movs	r0, #151	@ 0x97
 8000dca:	f7ff fdaf 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y1);
 8000dce:	883b      	ldrh	r3, [r7, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fd2e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000dd8:	2098      	movs	r0, #152	@ 0x98
 8000dda:	f7ff fda7 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 8000dde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000de2:	121b      	asrs	r3, r3, #8
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd23 	bl	8000834 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 8000dee:	20a9      	movs	r0, #169	@ 0xa9
 8000df0:	f7ff fd9c 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x2);
 8000df4:	8b3b      	ldrh	r3, [r7, #24]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd1b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAA);
 8000dfe:	20aa      	movs	r0, #170	@ 0xaa
 8000e00:	f7ff fd94 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 8000e04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e08:	121b      	asrs	r3, r3, #8
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd10 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAB);
 8000e14:	20ab      	movs	r0, #171	@ 0xab
 8000e16:	f7ff fd89 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y2);
 8000e1a:	8bbb      	ldrh	r3, [r7, #28]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fd08 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAC);
 8000e24:	20ac      	movs	r0, #172	@ 0xac
 8000e26:	f7ff fd81 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 8000e2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e2e:	121b      	asrs	r3, r3, #8
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fcfd 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000e3a:	2063      	movs	r0, #99	@ 0x63
 8000e3c:	f7ff fd76 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000e40:	8c3b      	ldrh	r3, [r7, #32]
 8000e42:	0adb      	lsrs	r3, r3, #11
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fcf3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	f7ff fd6c 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000e54:	8c3b      	ldrh	r3, [r7, #32]
 8000e56:	115b      	asrs	r3, r3, #5
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fce7 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000e66:	2065      	movs	r0, #101	@ 0x65
 8000e68:	f7ff fd60 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fcdc 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000e7c:	2090      	movs	r0, #144	@ 0x90
 8000e7e:	f7ff fd55 	bl	800092c <RA8875_write_command>
  if (filled)
 8000e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000e8a:	20a1      	movs	r0, #161	@ 0xa1
 8000e8c:	f7ff fcd2 	bl	8000834 <RA8875_write_data>
 8000e90:	e002      	b.n	8000e98 <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000e92:	2081      	movs	r0, #129	@ 0x81
 8000e94:	f7ff fcce 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	2090      	movs	r0, #144	@ 0x90
 8000e9c:	f7ff fd9a 	bl	80009d4 <RA8875_wait_poll>
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}

08000ea8 <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 8000ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fd9c 	bl	8000a08 <RA8875_apply_rotation_x>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 8000ed4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdb3 	bl	8000a44 <RA8875_apply_rotation_y>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 8000ee2:	20a5      	movs	r0, #165	@ 0xa5
 8000ee4:	f7ff fd22 	bl	800092c <RA8875_write_command>
  RA8875_write_data (xCenter);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fca1 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA6);
 8000ef2:	20a6      	movs	r0, #166	@ 0xa6
 8000ef4:	f7ff fd1a 	bl	800092c <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc96 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA7);
 8000f08:	20a7      	movs	r0, #167	@ 0xa7
 8000f0a:	f7ff fd0f 	bl	800092c <RA8875_write_command>
  RA8875_write_data (yCenter);
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc8e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA8);
 8000f18:	20a8      	movs	r0, #168	@ 0xa8
 8000f1a:	f7ff fd07 	bl	800092c <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 8000f1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f22:	121b      	asrs	r3, r3, #8
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fc83 	bl	8000834 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 8000f2e:	20a1      	movs	r0, #161	@ 0xa1
 8000f30:	f7ff fcfc 	bl	800092c <RA8875_write_command>
  RA8875_write_data (longAxis);
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc7b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000f3e:	20a2      	movs	r0, #162	@ 0xa2
 8000f40:	f7ff fcf4 	bl	800092c <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f48:	121b      	asrs	r3, r3, #8
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fc70 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000f54:	20a3      	movs	r0, #163	@ 0xa3
 8000f56:	f7ff fce9 	bl	800092c <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc68 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000f64:	20a4      	movs	r0, #164	@ 0xa4
 8000f66:	f7ff fce1 	bl	800092c <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000f6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f6e:	121b      	asrs	r3, r3, #8
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc5d 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000f7a:	2063      	movs	r0, #99	@ 0x63
 8000f7c:	f7ff fcd6 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000f80:	8b3b      	ldrh	r3, [r7, #24]
 8000f82:	0adb      	lsrs	r3, r3, #11
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fc53 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f7ff fccc 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000f94:	8b3b      	ldrh	r3, [r7, #24]
 8000f96:	115b      	asrs	r3, r3, #5
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fc47 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000fa6:	2065      	movs	r0, #101	@ 0x65
 8000fa8:	f7ff fcc0 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000fac:	8b3b      	ldrh	r3, [r7, #24]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc3c 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000fbc:	20a0      	movs	r0, #160	@ 0xa0
 8000fbe:	f7ff fcb5 	bl	800092c <RA8875_write_command>
  if (filled)
 8000fc2:	7f3b      	ldrb	r3, [r7, #28]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000fc8:	20c0      	movs	r0, #192	@ 0xc0
 8000fca:	f7ff fc33 	bl	8000834 <RA8875_write_data>
 8000fce:	e002      	b.n	8000fd6 <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000fd0:	2080      	movs	r0, #128	@ 0x80
 8000fd2:	f7ff fc2f 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	20a0      	movs	r0, #160	@ 0xa0
 8000fda:	f7ff fcfb 	bl	80009d4 <RA8875_wait_poll>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fcfd 	bl	8000a08 <RA8875_apply_rotation_x>
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8001012:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fd14 	bl	8000a44 <RA8875_apply_rotation_y>
 800101c:	4603      	mov	r3, r0
 800101e:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8001020:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fcef 	bl	8000a08 <RA8875_apply_rotation_x>
 800102a:	4603      	mov	r3, r0
 800102c:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 800102e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd06 	bl	8000a44 <RA8875_apply_rotation_y>
 8001038:	4603      	mov	r3, r0
 800103a:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 800103c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001044:	429a      	cmp	r2, r3
 8001046:	dd05      	ble.n	8001054 <roundRectHelper+0x6e>
 8001048:	1cba      	adds	r2, r7, #2
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f99e 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8001054:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001058:	f9b7 3000 	ldrsh.w	r3, [r7]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd05      	ble.n	800106c <roundRectHelper+0x86>
 8001060:	463a      	mov	r2, r7
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f992 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 800106c:	2091      	movs	r0, #145	@ 0x91
 800106e:	f7ff fc5d 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fbdb 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 800107e:	2092      	movs	r0, #146	@ 0x92
 8001080:	f7ff fc54 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	121b      	asrs	r3, r3, #8
 800108a:	b21b      	sxth	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fbd0 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8001094:	2093      	movs	r0, #147	@ 0x93
 8001096:	f7ff fc49 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 800109a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fbc7 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 80010a6:	2094      	movs	r0, #148	@ 0x94
 80010a8:	f7ff fc40 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80010ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b0:	121b      	asrs	r3, r3, #8
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fbbc 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80010bc:	2095      	movs	r0, #149	@ 0x95
 80010be:	f7ff fc35 	bl	800092c <RA8875_write_command>
  RA8875_write_data (w);
 80010c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fbb3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 80010ce:	2096      	movs	r0, #150	@ 0x96
 80010d0:	f7ff fc2c 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 80010d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010d8:	121b      	asrs	r3, r3, #8
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fba8 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 80010e4:	2097      	movs	r0, #151	@ 0x97
 80010e6:	f7ff fc21 	bl	800092c <RA8875_write_command>
  RA8875_write_data (h);
 80010ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fb9f 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 80010f6:	2098      	movs	r0, #152	@ 0x98
 80010f8:	f7ff fc18 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 80010fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001100:	121b      	asrs	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fb94 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA1);
 800110c:	20a1      	movs	r0, #161	@ 0xa1
 800110e:	f7ff fc0d 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fb8c 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 800111c:	20a2      	movs	r0, #162	@ 0xa2
 800111e:	f7ff fc05 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8001122:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001126:	121b      	asrs	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb81 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8001132:	20a3      	movs	r0, #163	@ 0xa3
 8001134:	f7ff fbfa 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8001138:	8b3b      	ldrh	r3, [r7, #24]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb79 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8001142:	20a4      	movs	r0, #164	@ 0xa4
 8001144:	f7ff fbf2 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8001148:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800114c:	121b      	asrs	r3, r3, #8
 800114e:	b21b      	sxth	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb6e 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8001158:	2063      	movs	r0, #99	@ 0x63
 800115a:	f7ff fbe7 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800115e:	8bbb      	ldrh	r3, [r7, #28]
 8001160:	0adb      	lsrs	r3, r3, #11
 8001162:	b29b      	uxth	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb64 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f7ff fbdd 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8001172:	8bbb      	ldrh	r3, [r7, #28]
 8001174:	115b      	asrs	r3, r3, #5
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb58 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8001184:	2065      	movs	r0, #101	@ 0x65
 8001186:	f7ff fbd1 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 800118a:	8bbb      	ldrh	r3, [r7, #28]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb4d 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 800119a:	20a0      	movs	r0, #160	@ 0xa0
 800119c:	f7ff fbc6 	bl	800092c <RA8875_write_command>
  if (filled)
 80011a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 80011a8:	20e0      	movs	r0, #224	@ 0xe0
 80011aa:	f7ff fb43 	bl	8000834 <RA8875_write_data>
 80011ae:	e002      	b.n	80011b6 <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 80011b0:	20a0      	movs	r0, #160	@ 0xa0
 80011b2:	f7ff fb3f 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	20a0      	movs	r0, #160	@ 0xa0
 80011ba:	f7ff fc0b 	bl	80009d4 <RA8875_wait_poll>
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}

080011c6 <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	4604      	mov	r4, r0
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	4623      	mov	r3, r4
 80011d6:	80fb      	strh	r3, [r7, #6]
 80011d8:	4603      	mov	r3, r0
 80011da:	80bb      	strh	r3, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	4413      	add	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21c      	sxth	r4, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	883b      	ldrh	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b21a      	sxth	r2, r3
 8001200:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001204:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	8b3b      	ldrh	r3, [r7, #24]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	4622      	mov	r2, r4
 8001214:	f7ff fcbd 	bl	8000b92 <rectHelper>
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}

08001220 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <RA8875_fill_screen+0x38>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <RA8875_fill_screen+0x3c>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	b219      	sxth	r1, r3
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	460b      	mov	r3, r1
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fca1 	bl	8000b92 <rectHelper>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	240000a2 	.word	0x240000a2
 800125c:	240000a4 	.word	0x240000a4

08001260 <RA8875_draw_fill_circle>:
 @param r     The circle's radius
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_circle (int16_t x, int16_t y, int16_t r, uint16_t color)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af02      	add	r7, sp, #8
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4623      	mov	r3, r4
 8001270:	80fb      	strh	r3, [r7, #6]
 8001272:	4603      	mov	r3, r0
 8001274:	80bb      	strh	r3, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
 800127a:	4613      	mov	r3, r2
 800127c:	803b      	strh	r3, [r7, #0]
  circleHelper (x, y, r, color, 1);
 800127e:	883b      	ldrh	r3, [r7, #0]
 8001280:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001284:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001288:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800128c:	2401      	movs	r4, #1
 800128e:	9400      	str	r4, [sp, #0]
 8001290:	f7ff fbfe 	bl	8000a90 <circleHelper>
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 80012ba:	f9b7 4000 	ldrsh.w	r4, [r7]
 80012be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	8c3b      	ldrh	r3, [r7, #32]
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4623      	mov	r3, r4
 80012e0:	f7ff fd00 	bl	8000ce4 <triangleHelper>
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	80fb      	strh	r3, [r7, #6]
 80012fe:	4603      	mov	r3, r0
 8001300:	80bb      	strh	r3, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]
 8001306:	4613      	mov	r3, r2
 8001308:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 800130a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800130e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001312:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001316:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	8b3b      	ldrh	r3, [r7, #24]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4623      	mov	r3, r4
 8001324:	f7ff fdc0 	bl	8000ea8 <ellipseHelper>
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af04      	add	r7, sp, #16
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21c      	sxth	r4, r3
 8001358:	88ba      	ldrh	r2, [r7, #4]
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	b29b      	uxth	r3, r3
 8001360:	b21a      	sxth	r2, r3
 8001362:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001366:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800136a:	2301      	movs	r3, #1
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	8bbb      	ldrh	r3, [r7, #28]
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	4622      	mov	r2, r4
 800137c:	f7ff fe33 	bl	8000fe6 <roundRectHelper>
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <RA8875_draw_hexagon>:

/**************************************************************************/
void RA8875_draw_hexagon(int16_t centerX, int16_t centerY, int16_t radius, uint16_t color) {
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	ed2d 8b04 	vpush	{d8-d9}
 800138e:	b099      	sub	sp, #100	@ 0x64
 8001390:	af04      	add	r7, sp, #16
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]
    int x[6], y[6];
    for (int i = 0; i < 6; ++i) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013ae:	e051      	b.n	8001454 <RA8875_draw_hexagon+0xcc>
        double angle = 2 * M_PI * i / 6;
 80013b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013ba:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80014e8 <RA8875_draw_hexagon+0x160>
 80013be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c2:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 80013c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ca:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        x[i] = centerX + radius * cos(angle);
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80013da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80013e6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80013ea:	f00f f941 	bl	8010670 <cos>
 80013ee:	eeb0 7b40 	vmov.f64	d7, d0
 80013f2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3350      	adds	r3, #80	@ 0x50
 8001408:	443b      	add	r3, r7
 800140a:	f843 2c30 	str.w	r2, [r3, #-48]
        y[i] = centerY + radius * sin(angle);
 800140e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800141a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8001426:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800142a:	f00f f96d 	bl	8010708 <sin>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001436:	ee38 7b07 	vadd.f64	d7, d8, d7
 800143a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800143e:	ee17 2a90 	vmov	r2, s15
 8001442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3350      	adds	r3, #80	@ 0x50
 8001448:	443b      	add	r3, r7
 800144a:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < 6; ++i) {
 800144e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001450:	3301      	adds	r3, #1
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001456:	2b05      	cmp	r3, #5
 8001458:	ddaa      	ble.n	80013b0 <RA8875_draw_hexagon+0x28>
    }

    for (int i = 0; i < 6; ++i) {
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800145e:	e038      	b.n	80014d2 <RA8875_draw_hexagon+0x14a>
        int next = (i + 1) % 6;
 8001460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <RA8875_draw_hexagon+0x168>)
 8001466:	fb83 3102 	smull	r3, r1, r3, r2
 800146a:	17d3      	asrs	r3, r2, #31
 800146c:	1ac9      	subs	r1, r1, r3
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	647b      	str	r3, [r7, #68]	@ 0x44
        // Draw triangles to form the hexagon
        RA8875_draw_fill_triangle(centerX, centerY, x[i], y[i], x[next], y[next], color);
 800147a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3350      	adds	r3, #80	@ 0x50
 8001480:	443b      	add	r3, r7
 8001482:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001486:	b21d      	sxth	r5, r3
 8001488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3350      	adds	r3, #80	@ 0x50
 800148e:	443b      	add	r3, r7
 8001490:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001494:	b21e      	sxth	r6, r3
 8001496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	3350      	adds	r3, #80	@ 0x50
 800149c:	443b      	add	r3, r7
 800149e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	3350      	adds	r3, #80	@ 0x50
 80014aa:	443b      	add	r3, r7
 80014ac:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80014b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014ba:	8839      	ldrh	r1, [r7, #0]
 80014bc:	9102      	str	r1, [sp, #8]
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	4633      	mov	r3, r6
 80014c4:	462a      	mov	r2, r5
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fee8 	bl	800129c <RA8875_draw_fill_triangle>
    for (int i = 0; i < 6; ++i) {
 80014cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014ce:	3301      	adds	r3, #1
 80014d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	ddc3      	ble.n	8001460 <RA8875_draw_hexagon+0xd8>
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3754      	adds	r7, #84	@ 0x54
 80014de:	46bd      	mov	sp, r7
 80014e0:	ecbd 8b04 	vpop	{d8-d9}
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	54442d18 	.word	0x54442d18
 80014ec:	401921fb 	.word	0x401921fb
 80014f0:	2aaaaaab 	.word	0x2aaaaaab

080014f4 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 80014fa:	2040      	movs	r0, #64	@ 0x40
 80014fc:	f7ff fa16 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8001500:	f7ff f9d6 	bl	80008b0 <RA8875_read_data>
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f98e 	bl	8000834 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8001518:	2021      	movs	r0, #33	@ 0x21
 800151a:	f7ff fa07 	bl	800092c <RA8875_write_command>
  temp = RA8875_read_data ();
 800151e:	f7ff f9c7 	bl	80008b0 <RA8875_read_data>
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800152c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f97f 	bl	8000834 <RA8875_write_data>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	460a      	mov	r2, r1
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4613      	mov	r3, r2
 800154c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa58 	bl	8000a08 <RA8875_apply_rotation_x>
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 800155c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa6f 	bl	8000a44 <RA8875_apply_rotation_y>
 8001566:	4603      	mov	r3, r0
 8001568:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 800156a:	202a      	movs	r0, #42	@ 0x2a
 800156c:	f7ff f9de 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f95d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2B);
 800157a:	202b      	movs	r0, #43	@ 0x2b
 800157c:	f7ff f9d6 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f953 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2C);
 800158e:	202c      	movs	r0, #44	@ 0x2c
 8001590:	f7ff f9cc 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f94b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2D);
 800159e:	202d      	movs	r0, #45	@ 0x2d
 80015a0:	f7ff f9c4 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f941 	bl	8000834 <RA8875_write_data>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	460a      	mov	r2, r1
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 80015ca:	2063      	movs	r0, #99	@ 0x63
 80015cc:	f7ff f9ae 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	0adb      	lsrs	r3, r3, #11
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f92b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 80015de:	2064      	movs	r0, #100	@ 0x64
 80015e0:	f7ff f9a4 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	115b      	asrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f91f 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 80015f6:	2065      	movs	r0, #101	@ 0x65
 80015f8:	f7ff f998 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f914 	bl	8000834 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 800160c:	2060      	movs	r0, #96	@ 0x60
 800160e:	f7ff f98d 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	0adb      	lsrs	r3, r3, #11
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f90a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x61);
 8001620:	2061      	movs	r0, #97	@ 0x61
 8001622:	f7ff f983 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	115b      	asrs	r3, r3, #5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f8fe 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x62);
 8001638:	2062      	movs	r0, #98	@ 0x62
 800163a:	f7ff f977 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f8f3 	bl	8000834 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 800164e:	2022      	movs	r0, #34	@ 0x22
 8001650:	f7ff f96c 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8001654:	f7ff f92c 	bl	80008b0 <RA8875_read_data>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001662:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f8e4 	bl	8000834 <RA8875_write_data>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d901      	bls.n	8001688 <RA8875_text_scale+0x14>
 8001684:	2303      	movs	r3, #3
 8001686:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8001688:	2022      	movs	r0, #34	@ 0x22
 800168a:	f7ff f94f 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800168e:	f7ff f90f 	bl	80008b0 <RA8875_read_data>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f8c0 	bl	8000834 <RA8875_write_data>

  _textScale = scale;
 80016b4:	4a03      	ldr	r2, [pc, #12]	@ (80016c4 <RA8875_text_scale+0x50>)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	7013      	strb	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	240000a6 	.word	0x240000a6

080016c8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <RA8875_text_write+0x1c>
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7fe fe00 	bl	80002e0 <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff f921 	bl	800092c <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	81fb      	strh	r3, [r7, #14]
 80016ee:	e010      	b.n	8001712 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f89b 	bl	8000834 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <RA8875_text_write+0x5c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <RA8875_text_write+0x44>
 8001706:	2001      	movs	r0, #1
 8001708:	f003 fb2c 	bl	8004d64 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	3301      	adds	r3, #1
 8001710:	81fb      	strh	r3, [r7, #14]
 8001712:	89fa      	ldrh	r2, [r7, #14]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3ea      	bcc.n	80016f0 <RA8875_text_write+0x28>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	240000a6 	.word	0x240000a6

08001728 <RA8875_pwm1_out>:
 Set the duty cycle of the PWM 1 Clock
 @param p The duty Cycle (0-255)
 */
/**************************************************************************/
void RA8875_pwm1_out (uint8_t p)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  RA8875_write_reg (RA8875_P1DCR, p);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4619      	mov	r1, r3
 8001736:	208b      	movs	r0, #139	@ 0x8b
 8001738:	f7ff f858 	bl	80007ec <RA8875_write_reg>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <RA8875_pwm1_config>:
 @param on Whether to enable the clock
 @param clock The Clock Divider
 */
/**************************************************************************/
void RA8875_pwm1_config (uint8_t on, uint8_t clock)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
  if (on)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <RA8875_pwm1_config+0x32>
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_ENABLE | (clock & 0xF));
 800175a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	b25b      	sxtb	r3, r3
 8001764:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	208a      	movs	r0, #138	@ 0x8a
 8001770:	f7ff f83c 	bl	80007ec <RA8875_write_reg>
  }
  else
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
  }
}
 8001774:	e007      	b.n	8001786 <RA8875_pwm1_config+0x42>
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	208a      	movs	r0, #138	@ 0x8a
 8001782:	f7ff f833 	bl	80007ec <RA8875_write_reg>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <RA8875_display_on>:
 Turns the display on or off
 @param on Whether to turn the display on or not
 */
/**************************************************************************/
void RA8875_display_on (uint8_t on)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  if (on) RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <RA8875_display_on+0x1a>
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff f823 	bl	80007ec <RA8875_write_reg>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
}
 80017a6:	e003      	b.n	80017b0 <RA8875_display_on+0x22>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
 80017a8:	2100      	movs	r1, #0
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff f81e 	bl	80007ec <RA8875_write_reg>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <mount_sd>:
  }

  return res;
}

void mount_sd(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80017be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c2:	f003 facf 	bl	8004d64 <HAL_Delay>
	FRESULT fr;
	fr = f_mount(&fs, "", 1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	4905      	ldr	r1, [pc, #20]	@ (80017e0 <mount_sd+0x28>)
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <mount_sd+0x2c>)
 80017cc:	f00d f8ae 	bl	800e92c <f_mount>
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
	if (fr != FR_OK) {		//1 means now
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
		return;
	}
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	080112b8 	.word	0x080112b8
 80017e4:	240000bc 	.word	0x240000bc

080017e8 <get_word_matrix>:
//        }
//    }
}

void get_word_matrix(WordVector* word_matrix, int board_num, int round_num)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80017f4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80017f8:	6018      	str	r0, [r3, #0]
 80017fa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80017fe:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001802:	6019      	str	r1, [r3, #0]
 8001804:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001808:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800180c:	601a      	str	r2, [r3, #0]
	FIL file;
	char line[MAX_WORD_LENGTH];
    char filename[10];    // Enough space for "r0000\0"
    snprintf(filename, sizeof(filename), "r%04d.txt", board_num);
 800180e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001812:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001816:	f107 0010 	add.w	r0, r7, #16
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a63      	ldr	r2, [pc, #396]	@ (80019ac <get_word_matrix+0x1c4>)
 800181e:	210a      	movs	r1, #10
 8001820:	f00d fe34 	bl	800f48c <sniprintf>

    FRESULT fr = f_open(&file, filename, FA_READ);
 8001824:	f107 0110 	add.w	r1, r7, #16
 8001828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800182c:	2201      	movs	r2, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f00d f8c2 	bl	800e9b8 <f_open>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
    if (fr != FR_OK) {
 800183a:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80ae 	bne.w	80019a0 <get_word_matrix+0x1b8>
    	return;
    }

	for(int i = 1; i < round_num; i++) {
 8001844:	2301      	movs	r3, #1
 8001846:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800184a:	e019      	b.n	8001880 <get_word_matrix+0x98>
		for(int n = 0; n < 21; n++) {
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001852:	e00c      	b.n	800186e <get_word_matrix+0x86>
			f_gets(line, MAX_WORD_LENGTH, &file);
 8001854:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	210d      	movs	r1, #13
 800185e:	4618      	mov	r0, r3
 8001860:	f00d fc4b 	bl	800f0fa <f_gets>
		for(int n = 0; n < 21; n++) {
 8001864:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8001868:	3301      	adds	r3, #1
 800186a:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800186e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8001872:	2b14      	cmp	r3, #20
 8001874:	ddee      	ble.n	8001854 <get_word_matrix+0x6c>
	for(int i = 1; i < round_num; i++) {
 8001876:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800187a:	3301      	adds	r3, #1
 800187c:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001880:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001884:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001888:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbdc      	blt.n	800184c <get_word_matrix+0x64>
		}
	}

    f_gets(line, 25, &file);
 8001892:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2119      	movs	r1, #25
 800189c:	4618      	mov	r0, r3
 800189e:	f00d fc2c 	bl	800f0fa <f_gets>
	size_t length = strlen(line);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd1a 	bl	80002e0 <strlen>
 80018ac:	f8c7 025c 	str.w	r0, [r7, #604]	@ 0x25c
	word_matrix[NUM_WORDS].length = length;
 80018b0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80018be:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80018c2:	611a      	str	r2, [r3, #16]
	line[length - 1] = '\0';
 80018c4:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80018c8:	3b01      	subs	r3, #1
 80018ca:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 80018ce:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80018d2:	2100      	movs	r1, #0
 80018d4:	54d1      	strb	r1, [r2, r3]
	strcpy(word_matrix[NUM_WORDS].word, line);
 80018d6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018da:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80018e4:	461a      	mov	r2, r3
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4610      	mov	r0, r2
 80018ee:	f00d fee0 	bl	800f6b2 <strcpy>

    f_gets(line, sizeof(line), &file); //read and discard
 80018f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	210d      	movs	r1, #13
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00d fbfc 	bl	800f0fa <f_gets>

    // Read lines from the file and parse them
    for(int i = 0; i < NUM_WORDS - 1; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8001908:	e040      	b.n	800198c <get_word_matrix+0x1a4>
    	f_gets(line, MAX_WORD_LENGTH, &file);
 800190a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	210d      	movs	r1, #13
 8001914:	4618      	mov	r0, r3
 8001916:	f00d fbf0 	bl	800f0fa <f_gets>
    	length = strlen(line);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fcde 	bl	80002e0 <strlen>
 8001924:	f8c7 025c 	str.w	r0, [r7, #604]	@ 0x25c
    	word_matrix[i].length = length;
 8001928:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	461a      	mov	r2, r3
 8001936:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800193a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8001946:	611a      	str	r2, [r3, #16]
    	line[length - 1] = '\0';
 8001948:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800194c:	3b01      	subs	r3, #1
 800194e:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001952:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8001956:	2100      	movs	r1, #0
 8001958:	54d1      	strb	r1, [r2, r3]
    	strcpy(word_matrix[i].word, line);
 800195a:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	461a      	mov	r2, r3
 8001968:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800196c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f00d fe98 	bl	800f6b2 <strcpy>
    for(int i = 0; i < NUM_WORDS - 1; i++) {
 8001982:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8001986:	3301      	adds	r3, #1
 8001988:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800198c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8001990:	2b0f      	cmp	r3, #15
 8001992:	ddba      	ble.n	800190a <get_word_matrix+0x122>
    }

    //close the file
    f_close(&file);
 8001994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001998:	4618      	mov	r0, r3
 800199a:	f00d fb84 	bl	800f0a6 <f_close>

    return;
 800199e:	e000      	b.n	80019a2 <get_word_matrix+0x1ba>
    	return;
 80019a0:	bf00      	nop
}
 80019a2:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	080112c0 	.word	0x080112c0

080019b0 <init_game>:
#include "main.h"
#include <stdlib.h>
#include <stdio.h>


void init_game(Game_HandleTypeDef *hgame) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	RA8875_pwm1_out(255);
 80019b8:	20ff      	movs	r0, #255	@ 0xff
 80019ba:	f7ff feb5 	bl	8001728 <RA8875_pwm1_out>

    hgame->set_b = 0;                // Brightness flag
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    hgame->current_b = 255;          // Maximum brightness
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	22ff      	movs	r2, #255	@ 0xff
 80019ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    hgame->guess_remain = 1;         // Guess remains
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
    hgame->score = 0;                // Initial score
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
    hgame->hi_score = 0;             // High score
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    hgame->picked = -1;              // No word picked
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
    hgame->index0 = 0;               // Initial index tracking 0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
    hgame->index1 = 1;               // Initial index tracking 1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
    hgame->board_num = 1; 			 // Start with board 1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    hgame->round_num = 1;            // Start with round 1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    hgame->game_timer = 60;          // Start with 30 seconds
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	223c      	movs	r2, #60	@ 0x3c
 8001a14:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <generate_random_letters>:

void generate_random_letters(char* buffer, size_t length) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	srand(HAL_GetTick());
 8001a2a:	f003 f98f 	bl	8004d4c <HAL_GetTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00d fbfd 	bl	800f230 <srand>

	for (size_t i = 0; i < length; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e016      	b.n	8001a6a <generate_random_letters+0x4a>
		buffer[i] = (rand() % 26) + 65;
 8001a3c:	f00d fc26 	bl	800f28c <rand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a10      	ldr	r2, [pc, #64]	@ (8001a84 <generate_random_letters+0x64>)
 8001a44:	fb82 1203 	smull	r1, r2, r2, r3
 8001a48:	10d1      	asrs	r1, r2, #3
 8001a4a:	17da      	asrs	r2, r3, #31
 8001a4c:	1a8a      	subs	r2, r1, r2
 8001a4e:	211a      	movs	r1, #26
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
 8001a54:	1a9a      	subs	r2, r3, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3241      	adds	r2, #65	@ 0x41
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3e4      	bcc.n	8001a3c <generate_random_letters+0x1c>
	}
	buffer[length] = '\0';
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	4ec4ec4f 	.word	0x4ec4ec4f

08001a88 <shuffle_array>:

void shuffle_array(uint8_t *array, size_t size, int *index0, int *index1) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
    *index0 = 0;  // Initial position of 0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
    *index1 = 1;  // Initial position of 1
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    for (size_t i = size - 1; i > 0; i--) {
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	e046      	b.n	8001b38 <shuffle_array+0xb0>
        size_t j = rand() % (i + 1);
 8001aaa:	f00d fbef 	bl	800f28c <rand>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	fbb2 f1f3 	udiv	r1, r2, r3
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	61bb      	str	r3, [r7, #24]

        uint8_t temp = array[i];
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	75fb      	strb	r3, [r7, #23]
        array[i] = array[j];
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	440b      	add	r3, r1
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	701a      	strb	r2, [r3, #0]
        array[j] = temp;
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	7dfa      	ldrb	r2, [r7, #23]
 8001ae4:	701a      	strb	r2, [r3, #0]

        if (*index0 == i) *index0 = j;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d103      	bne.n	8001afa <shuffle_array+0x72>
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e008      	b.n	8001b0c <shuffle_array+0x84>
        else if (*index0 == j) *index0 = i;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d102      	bne.n	8001b0c <shuffle_array+0x84>
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]

        if (*index1 == i) *index1 = j;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d103      	bne.n	8001b20 <shuffle_array+0x98>
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e008      	b.n	8001b32 <shuffle_array+0xaa>
        else if (*index1 == j) *index1 = i;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <shuffle_array+0xaa>
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
    for (size_t i = size - 1; i > 0; i--) {
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1b5      	bne.n	8001aaa <shuffle_array+0x22>
    }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <title_screen>:

void title_screen(Game_HandleTypeDef *hgame) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	@ 0x30
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_TITLE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2204      	movs	r2, #4
 8001b54:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	//background
	RA8875_fill_screen(RA8875_BLACK);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff fb61 	bl	8001220 <RA8875_fill_screen>
	//corner text
	RA8875_text_mode();
 8001b5e:	f7ff fcc9 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_color (RA8875_BLUE, RA8875_BLACK);
 8001b62:	2100      	movs	r1, #0
 8001b64:	201f      	movs	r0, #31
 8001b66:	f7ff fd28 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff fd82 	bl	8001674 <RA8875_text_scale>
	RA8875_text_cursor_position(80, 0);
 8001b70:	2100      	movs	r1, #0
 8001b72:	2050      	movs	r0, #80	@ 0x50
 8001b74:	f7ff fce3 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Beat", 5);
 8001b78:	2105      	movs	r1, #5
 8001b7a:	485b      	ldr	r0, [pc, #364]	@ (8001ce8 <title_screen+0x1a0>)
 8001b7c:	f7ff fda4 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, 55);
 8001b80:	2137      	movs	r1, #55	@ 0x37
 8001b82:	2050      	movs	r0, #80	@ 0x50
 8001b84:	f7ff fcdb 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4858      	ldr	r0, [pc, #352]	@ (8001cec <title_screen+0x1a4>)
 8001b8c:	f7ff fd9c 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, 110);
 8001b90:	216e      	movs	r1, #110	@ 0x6e
 8001b92:	2050      	movs	r0, #80	@ 0x50
 8001b94:	f7ff fcd3 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Clock", 6);
 8001b98:	2106      	movs	r1, #6
 8001b9a:	4855      	ldr	r0, [pc, #340]	@ (8001cf0 <title_screen+0x1a8>)
 8001b9c:	f7ff fd94 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-150);
 8001ba0:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001ba4:	f240 208a 	movw	r0, #650	@ 0x28a
 8001ba8:	f7ff fcc9 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001bac:	2106      	movs	r1, #6
 8001bae:	4851      	ldr	r0, [pc, #324]	@ (8001cf4 <title_screen+0x1ac>)
 8001bb0:	f7ff fd8a 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-95);
 8001bb4:	f240 1181 	movw	r1, #385	@ 0x181
 8001bb8:	f240 208a 	movw	r0, #650	@ 0x28a
 8001bbc:	f7ff fcbf 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	484a      	ldr	r0, [pc, #296]	@ (8001cec <title_screen+0x1a4>)
 8001bc4:	f7ff fd80 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-40);
 8001bc8:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001bcc:	f240 208a 	movw	r0, #650	@ 0x28a
 8001bd0:	f7ff fcb5 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Code", 5);
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4848      	ldr	r0, [pc, #288]	@ (8001cf8 <title_screen+0x1b0>)
 8001bd8:	f7ff fd76 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 8001bdc:	f7fe fee4 	bl	80009a8 <RA8875_graphic_mode>
	//center emblem
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 250, 0x9d18);	// blue
 8001be0:	f649 5318 	movw	r3, #40216	@ 0x9d18
 8001be4:	22fa      	movs	r2, #250	@ 0xfa
 8001be6:	21f0      	movs	r1, #240	@ 0xf0
 8001be8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001bec:	f7ff fb38 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 225, 0xc65d);	// light blue
 8001bf0:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8001bf4:	22e1      	movs	r2, #225	@ 0xe1
 8001bf6:	21f0      	movs	r1, #240	@ 0xf0
 8001bf8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001bfc:	f7ff fb30 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_rect(CENTER_X - 170, CENTER_Y - 90, 340, 160, RA8875_YELLOW);
 8001c00:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	23a0      	movs	r3, #160	@ 0xa0
 8001c08:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001c0c:	2196      	movs	r1, #150	@ 0x96
 8001c0e:	20e6      	movs	r0, #230	@ 0xe6
 8001c10:	f7ff fad9 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 160, RA8875_YELLOW);
 8001c14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c18:	22a0      	movs	r2, #160	@ 0xa0
 8001c1a:	21f0      	movs	r1, #240	@ 0xf0
 8001c1c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c20:	f7ff fbb2 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 150, RA8875_BLACK);
 8001c24:	2300      	movs	r3, #0
 8001c26:	2296      	movs	r2, #150	@ 0x96
 8001c28:	21f0      	movs	r1, #240	@ 0xf0
 8001c2a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c2e:	f7ff fbab 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_fill_rect(CENTER_X - 160, CENTER_Y - 80, 320, 140, RA8875_BLACK);
 8001c32:	2300      	movs	r3, #0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	238c      	movs	r3, #140	@ 0x8c
 8001c38:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c3c:	21a0      	movs	r1, #160	@ 0xa0
 8001c3e:	20f0      	movs	r0, #240	@ 0xf0
 8001c40:	f7ff fac1 	bl	80011c6 <RA8875_draw_fill_rect>
	//side graphics
	RA8875_draw_fill_rect(50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 8001c44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c4e:	220a      	movs	r2, #10
 8001c50:	2100      	movs	r1, #0
 8001c52:	2032      	movs	r0, #50	@ 0x32
 8001c54:	f7ff fab7 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 8001c58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c62:	220a      	movs	r2, #10
 8001c64:	2100      	movs	r1, #0
 8001c66:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001c6a:	f7ff faac 	bl	80011c6 <RA8875_draw_fill_rect>

	RA8875_text_mode();
 8001c6e:	f7ff fc41 	bl	80014f4 <RA8875_text_mode>
	//center text
	RA8875_text_cursor_position(CENTER_X-144, CENTER_Y-75);
 8001c72:	21a5      	movs	r1, #165	@ 0xa5
 8001c74:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c78:	f7ff fc61 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001c82:	f7ff fc9a 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(3);
 8001c86:	2003      	movs	r0, #3
 8001c88:	f7ff fcf4 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 8001c8c:	2109      	movs	r1, #9
 8001c8e:	481b      	ldr	r0, [pc, #108]	@ (8001cfc <title_screen+0x1b4>)
 8001c90:	f7ff fd1a 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-75, CENTER_Y-5);
 8001c94:	21eb      	movs	r1, #235	@ 0xeb
 8001c96:	f240 1045 	movw	r0, #325	@ 0x145
 8001c9a:	f7ff fc50 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	4814      	ldr	r0, [pc, #80]	@ (8001cf4 <title_screen+0x1ac>)
 8001ca2:	f7ff fd11 	bl	80016c8 <RA8875_text_write>
	//side text
	char letters[16];
	generate_random_letters(letters, 16);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	2110      	movs	r1, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff feb7 	bl	8001a20 <generate_random_letters>
	for(size_t i = 0; i < 16; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e03d      	b.n	8001d34 <title_screen+0x1ec>
		if(i<8) {
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d820      	bhi.n	8001d00 <title_screen+0x1b8>
			RA8875_text_cursor_position(10, i*60);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f7ff fc35 	bl	800153e <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fcf2 	bl	80016c8 <RA8875_text_write>
 8001ce4:	e023      	b.n	8001d2e <title_screen+0x1e6>
 8001ce6:	bf00      	nop
 8001ce8:	080112cc 	.word	0x080112cc
 8001cec:	080112d4 	.word	0x080112d4
 8001cf0:	080112d8 	.word	0x080112d8
 8001cf4:	080112e0 	.word	0x080112e0
 8001cf8:	080112e8 	.word	0x080112e8
 8001cfc:	080112f0 	.word	0x080112f0
		}
		else {
			RA8875_text_cursor_position(SCREEN_WIDTH-35, (i-8)*60);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	f240 20fd 	movw	r0, #765	@ 0x2fd
 8001d1a:	f7ff fc10 	bl	800153e <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 8001d1e:	f107 0208 	add.w	r2, r7, #8
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	2101      	movs	r1, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fccd 	bl	80016c8 <RA8875_text_write>
	for(size_t i = 0; i < 16; i++) {
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d9be      	bls.n	8001cb8 <title_screen+0x170>
		}
	}
	RA8875_graphic_mode();
 8001d3a:	f7fe fe35 	bl	80009a8 <RA8875_graphic_mode>

	//cracks
	RA8875_draw_fill_rect(200, 0, 5, 160, RA8875_YELLOW);
 8001d3e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	23a0      	movs	r3, #160	@ 0xa0
 8001d46:	2205      	movs	r2, #5
 8001d48:	2100      	movs	r1, #0
 8001d4a:	20c8      	movs	r0, #200	@ 0xc8
 8001d4c:	f7ff fa3b 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(150, 80, 150, 5, RA8875_YELLOW);
 8001d50:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2305      	movs	r3, #5
 8001d58:	2296      	movs	r2, #150	@ 0x96
 8001d5a:	2150      	movs	r1, #80	@ 0x50
 8001d5c:	2096      	movs	r0, #150	@ 0x96
 8001d5e:	f7ff fa32 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(130, SCREEN_HEIGHT-220, 5, 220, RA8875_YELLOW);
 8001d62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	23dc      	movs	r3, #220	@ 0xdc
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001d70:	2082      	movs	r0, #130	@ 0x82
 8001d72:	f7ff fa28 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 0, 5, 100, RA8875_YELLOW);
 8001d76:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2364      	movs	r3, #100	@ 0x64
 8001d7e:	2205      	movs	r2, #5
 8001d80:	2100      	movs	r1, #0
 8001d82:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d86:	f7ff fa1e 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 100, 200, 5, RA8875_YELLOW);
 8001d8a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2305      	movs	r3, #5
 8001d92:	22c8      	movs	r2, #200	@ 0xc8
 8001d94:	2164      	movs	r1, #100	@ 0x64
 8001d96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d9a:	f7ff fa14 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-100, 0, 5, 280, RA8875_YELLOW);
 8001d9e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001da8:	2205      	movs	r2, #5
 8001daa:	2100      	movs	r1, #0
 8001dac:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001db0:	f7ff fa09 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-200, 100, 5, RA8875_YELLOW);
 8001db4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2305      	movs	r3, #5
 8001dbc:	2264      	movs	r2, #100	@ 0x64
 8001dbe:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001dc2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001dc6:	f7ff f9fe 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-180, SCREEN_HEIGHT-250, 5, 250, RA8875_YELLOW);
 8001dca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	23fa      	movs	r3, #250	@ 0xfa
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	21e6      	movs	r1, #230	@ 0xe6
 8001dd6:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001dda:	f7ff f9f4 	bl	80011c6 <RA8875_draw_fill_rect>
	//intersects
	RA8875_draw_fill_circle(202, 82, 7, RA8875_YELLOW);
 8001dde:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001de2:	2207      	movs	r2, #7
 8001de4:	2152      	movs	r1, #82	@ 0x52
 8001de6:	20ca      	movs	r0, #202	@ 0xca
 8001de8:	f7ff fa3a 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 5, RA8875_BLUE);
 8001dec:	231f      	movs	r3, #31
 8001dee:	2205      	movs	r2, #5
 8001df0:	2152      	movs	r1, #82	@ 0x52
 8001df2:	20ca      	movs	r0, #202	@ 0xca
 8001df4:	f7ff fa34 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 3, RA8875_YELLOW);
 8001df8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	2152      	movs	r1, #82	@ 0x52
 8001e00:	20ca      	movs	r0, #202	@ 0xca
 8001e02:	f7ff fa2d 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 7, RA8875_YELLOW);
 8001e06:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e10:	2084      	movs	r0, #132	@ 0x84
 8001e12:	f7ff fa25 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 5, RA8875_BLUE);
 8001e16:	231f      	movs	r3, #31
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e1e:	2084      	movs	r0, #132	@ 0x84
 8001e20:	f7ff fa1e 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 3, RA8875_YELLOW);
 8001e24:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e28:	2203      	movs	r2, #3
 8001e2a:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e2e:	2084      	movs	r0, #132	@ 0x84
 8001e30:	f7ff fa16 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 7, RA8875_YELLOW);
 8001e34:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e38:	2207      	movs	r2, #7
 8001e3a:	2164      	movs	r1, #100	@ 0x64
 8001e3c:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e40:	f7ff fa0e 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 5, RA8875_BLUE);
 8001e44:	231f      	movs	r3, #31
 8001e46:	2205      	movs	r2, #5
 8001e48:	2164      	movs	r1, #100	@ 0x64
 8001e4a:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e4e:	f7ff fa07 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 3, RA8875_YELLOW);
 8001e52:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e56:	2203      	movs	r2, #3
 8001e58:	2164      	movs	r1, #100	@ 0x64
 8001e5a:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e5e:	f7ff f9ff 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 7, RA8875_YELLOW);
 8001e62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e66:	2207      	movs	r2, #7
 8001e68:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e6c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e70:	f7ff f9f6 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 5, RA8875_BLUE);
 8001e74:	231f      	movs	r3, #31
 8001e76:	2205      	movs	r2, #5
 8001e78:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e7c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e80:	f7ff f9ee 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 3, RA8875_YELLOW);
 8001e84:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e8e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e92:	f7ff f9e5 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 7, RA8875_YELLOW);
 8001e96:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001ea0:	f240 206e 	movw	r0, #622	@ 0x26e
 8001ea4:	f7ff f9dc 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 5, RA8875_BLUE);
 8001ea8:	231f      	movs	r3, #31
 8001eaa:	2205      	movs	r2, #5
 8001eac:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001eb0:	f240 206e 	movw	r0, #622	@ 0x26e
 8001eb4:	f7ff f9d4 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 3, RA8875_YELLOW);
 8001eb8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001ec2:	f240 206e 	movw	r0, #622	@ 0x26e
 8001ec6:	f7ff f9cb 	bl	8001260 <RA8875_draw_fill_circle>
	//hour glass
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+100, CENTER_X+40, CENTER_Y+100, CENTER_X, CENTER_Y+160, RA8875_WHITE);
 8001eca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8001ee0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001ee4:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001ee8:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001eec:	f7ff f9d6 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+210, CENTER_X+40, CENTER_Y+210, CENTER_X, CENTER_Y+140, RA8875_WHITE);
 8001ef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef4:	9302      	str	r3, [sp, #8]
 8001ef6:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001f06:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001f0a:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001f0e:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f12:	f7ff f9c3 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+90, 80, 20, 10, 0xbc20);
 8001f16:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2314      	movs	r3, #20
 8001f22:	2250      	movs	r2, #80	@ 0x50
 8001f24:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001f28:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f2c:	f7ff fa00 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+197, 80, 20, 10, 0xbc20);	//orange
 8001f30:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	230a      	movs	r3, #10
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	2250      	movs	r2, #80	@ 0x50
 8001f3e:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8001f42:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f46:	f7ff f9f3 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_rect(CENTER_X-34, CENTER_Y+100, 7, 110, 0xbc20);
 8001f4a:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	236e      	movs	r3, #110	@ 0x6e
 8001f52:	2207      	movs	r2, #7
 8001f54:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001f58:	f44f 70b7 	mov.w	r0, #366	@ 0x16e
 8001f5c:	f7ff f933 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X+26, CENTER_Y+100, 7, 110, 0xbc20);
 8001f60:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	236e      	movs	r3, #110	@ 0x6e
 8001f68:	2207      	movs	r2, #7
 8001f6a:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001f6e:	f44f 70d5 	mov.w	r0, #426	@ 0x1aa
 8001f72:	f7ff f928 	bl	80011c6 <RA8875_draw_fill_rect>

	HAL_Delay(5000);
 8001f76:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f7a:	f002 fef3 	bl	8004d64 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001f7e:	23c8      	movs	r3, #200	@ 0xc8
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e00a      	b.n	8001f9a <title_screen+0x452>
		RA8875_pwm1_out(p);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fbcd 	bl	8001728 <RA8875_pwm1_out>
		HAL_Delay(100);
 8001f8e:	2064      	movs	r0, #100	@ 0x64
 8001f90:	f002 fee8 	bl	8004d64 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3b14      	subs	r3, #20
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	daf1      	bge.n	8001f84 <title_screen+0x43c>
	}
	RA8875_fill_screen(RA8875_BLACK);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff f93d 	bl	8001220 <RA8875_fill_screen>

	hgame->board_num = (rand() % 999) + 1;
 8001fa6:	f00d f971 	bl	800f28c <rand>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <title_screen+0x48c>)
 8001fae:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb2:	441a      	add	r2, r3
 8001fb4:	1251      	asrs	r1, r2, #9
 8001fb6:	17da      	asrs	r2, r3, #31
 8001fb8:	1a8a      	subs	r2, r1, r2
 8001fba:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	1a9a      	subs	r2, r3, r2
 8001fc4:	3201      	adds	r2, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4

	return;
 8001fcc:	bf00      	nop
}
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	83340521 	.word	0x83340521

08001fd8 <show_menu>:

void show_menu(Game_HandleTypeDef *hgame) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_MENU;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	//background
	RA8875_pwm1_out(hgame->current_b);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb99 	bl	8001728 <RA8875_pwm1_out>
	RA8875_fill_screen(RA8875_BLUE);
 8001ff6:	201f      	movs	r0, #31
 8001ff8:	f7ff f912 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001ffc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	230a      	movs	r3, #10
 8002004:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002008:	215a      	movs	r1, #90	@ 0x5a
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff f8db 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	230a      	movs	r3, #10
 8002016:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800201a:	2164      	movs	r1, #100	@ 0x64
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff f8d2 	bl	80011c6 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0xc65d);
 8002022:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002038:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800203c:	21b4      	movs	r1, #180	@ 0xb4
 800203e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002042:	f7ff f92b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8002046:	231f      	movs	r3, #31
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800205a:	f240 22da 	movw	r2, #730	@ 0x2da
 800205e:	21b4      	movs	r1, #180	@ 0xb4
 8002060:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002064:	f7ff f91a 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 8002068:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f240 238a 	movw	r3, #650	@ 0x28a
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800207e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002082:	21b4      	movs	r1, #180	@ 0xb4
 8002084:	f240 208a 	movw	r0, #650	@ 0x28a
 8002088:	f7ff f908 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 800208c:	231f      	movs	r3, #31
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f240 2376 	movw	r3, #630	@ 0x276
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020a0:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80020a4:	21b4      	movs	r1, #180	@ 0xb4
 80020a6:	f240 2076 	movw	r0, #630	@ 0x276
 80020aa:	f7ff f8f7 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0xc65d);
 80020ae:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2346      	movs	r3, #70	@ 0x46
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020c2:	2214      	movs	r2, #20
 80020c4:	21b4      	movs	r1, #180	@ 0xb4
 80020c6:	2046      	movs	r0, #70	@ 0x46
 80020c8:	f7ff f8e8 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 80020cc:	231f      	movs	r3, #31
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	235a      	movs	r3, #90	@ 0x5a
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020de:	2228      	movs	r2, #40	@ 0x28
 80020e0:	21b4      	movs	r1, #180	@ 0xb4
 80020e2:	205a      	movs	r0, #90	@ 0x5a
 80020e4:	f7ff f8da 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 80020e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2378      	movs	r3, #120	@ 0x78
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020fc:	2246      	movs	r2, #70	@ 0x46
 80020fe:	21b4      	movs	r1, #180	@ 0xb4
 8002100:	2078      	movs	r0, #120	@ 0x78
 8002102:	f7ff f8cb 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8002106:	231f      	movs	r3, #31
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	238c      	movs	r3, #140	@ 0x8c
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002118:	225a      	movs	r2, #90	@ 0x5a
 800211a:	21b4      	movs	r1, #180	@ 0xb4
 800211c:	208c      	movs	r0, #140	@ 0x8c
 800211e:	f7ff f8bd 	bl	800129c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0xc65d);
 8002122:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2378      	movs	r3, #120	@ 0x78
 800212a:	22c8      	movs	r2, #200	@ 0xc8
 800212c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8002130:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002134:	f7ff f8da 	bl	80012ec <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0xc65d);//0deg
 8002138:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	f240 237e 	movw	r3, #638	@ 0x27e
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800214e:	f240 224e 	movw	r2, #590	@ 0x24e
 8002152:	21fa      	movs	r1, #250	@ 0xfa
 8002154:	f240 204e 	movw	r0, #590	@ 0x24e
 8002158:	f7ff f8a0 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0xc65d);//180deg
 800215c:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	23ae      	movs	r3, #174	@ 0xae
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002170:	22d4      	movs	r2, #212	@ 0xd4
 8002172:	21fa      	movs	r1, #250	@ 0xfa
 8002174:	20d4      	movs	r0, #212	@ 0xd4
 8002176:	f7ff f891 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0xc65d);//74deg
 800217a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2382      	movs	r3, #130	@ 0x82
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	f240 13db 	movw	r3, #475	@ 0x1db
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	23c0      	movs	r3, #192	@ 0xc0
 800218c:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002190:	21af      	movs	r1, #175	@ 0xaf
 8002192:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002196:	f7ff f881 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0xc65d);//106deg
 800219a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2382      	movs	r3, #130	@ 0x82
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	f240 1345 	movw	r3, #325	@ 0x145
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	23c0      	movs	r3, #192	@ 0xc0
 80021ac:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80021b0:	21af      	movs	r1, #175	@ 0xaf
 80021b2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80021b6:	f7ff f871 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0xc65d);//-74deg
 80021ba:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80021d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021d4:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80021d8:	f240 200a 	movw	r0, #522	@ 0x20a
 80021dc:	f7ff f85e 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0xc65d);//-106deg
 80021e0:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80021f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021fa:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80021fe:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002202:	f7ff f84b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0xc65d);//32deg
 8002206:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	23be      	movs	r3, #190	@ 0xbe
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800221c:	21fa      	movs	r1, #250	@ 0xfa
 800221e:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002222:	f7ff f83b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0xc65d);//122deg
 8002226:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	23be      	movs	r3, #190	@ 0xbe
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	23dc      	movs	r3, #220	@ 0xdc
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	23c0      	movs	r3, #192	@ 0xc0
 8002236:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800223a:	21fa      	movs	r1, #250	@ 0xfa
 800223c:	20d4      	movs	r0, #212	@ 0xd4
 800223e:	f7ff f82d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0xc65d);//-32deg
 8002242:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002258:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800225c:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002260:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002264:	f7ff f81a 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0xc65d);//-122deg
 8002268:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800227e:	22d4      	movs	r2, #212	@ 0xd4
 8002280:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002284:	20dc      	movs	r0, #220	@ 0xdc
 8002286:	f7ff f809 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0xc65d);//stem
 800228a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	237c      	movs	r3, #124	@ 0x7c
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800229e:	22e8      	movs	r2, #232	@ 0xe8
 80022a0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80022a4:	20ca      	movs	r0, #202	@ 0xca
 80022a6:	f7fe fff9 	bl	800129c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 80022aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	230a      	movs	r3, #10
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2346      	movs	r3, #70	@ 0x46
 80022b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ba:	21cd      	movs	r1, #205	@ 0xcd
 80022bc:	20fa      	movs	r0, #250	@ 0xfa
 80022be:	f7ff f837 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 80022c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	230a      	movs	r3, #10
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2346      	movs	r3, #70	@ 0x46
 80022ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022d2:	f240 1127 	movw	r1, #295	@ 0x127
 80022d6:	20fa      	movs	r0, #250	@ 0xfa
 80022d8:	f7ff f82a 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2307      	movs	r3, #7
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2332      	movs	r3, #50	@ 0x32
 80022e6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80022ea:	21d7      	movs	r1, #215	@ 0xd7
 80022ec:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80022f0:	f7ff f81e 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2307      	movs	r3, #7
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2332      	movs	r3, #50	@ 0x32
 80022fe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002302:	f240 1131 	movw	r1, #305	@ 0x131
 8002306:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800230a:	f7ff f811 	bl	8001330 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 800230e:	f7ff f8f1 	bl	80014f4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002312:	2100      	movs	r1, #0
 8002314:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002318:	f7ff f94f 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 800231c:	21d7      	movs	r1, #215	@ 0xd7
 800231e:	f240 1063 	movw	r0, #355	@ 0x163
 8002322:	f7ff f90c 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8002326:	2002      	movs	r0, #2
 8002328:	f7ff f9a4 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Play", 5);
 800232c:	2105      	movs	r1, #5
 800232e:	4847      	ldr	r0, [pc, #284]	@ (800244c <show_menu+0x474>)
 8002330:	f7ff f9ca 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 8002334:	f240 1131 	movw	r1, #305	@ 0x131
 8002338:	f240 1031 	movw	r0, #305	@ 0x131
 800233c:	f7ff f8ff 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Settings", 9);
 8002340:	2109      	movs	r1, #9
 8002342:	4843      	ldr	r0, [pc, #268]	@ (8002450 <show_menu+0x478>)
 8002344:	f7ff f9c0 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8002348:	211f      	movs	r1, #31
 800234a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800234e:	f7ff f934 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-53, 20);
 8002352:	2114      	movs	r1, #20
 8002354:	f240 105b 	movw	r0, #347	@ 0x15b
 8002358:	f7ff f8f1 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 800235c:	2003      	movs	r0, #3
 800235e:	f7ff f989 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("MENU", 5);
 8002362:	2105      	movs	r1, #5
 8002364:	483b      	ldr	r0, [pc, #236]	@ (8002454 <show_menu+0x47c>)
 8002366:	f7ff f9af 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800236a:	211f      	movs	r1, #31
 800236c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002370:	f7ff f923 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002374:	2100      	movs	r1, #0
 8002376:	200a      	movs	r0, #10
 8002378:	f7ff f8e1 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff f979 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 8002382:	2109      	movs	r1, #9
 8002384:	4834      	ldr	r0, [pc, #208]	@ (8002458 <show_menu+0x480>)
 8002386:	f7ff f99f 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-90, 0);
 800238a:	2100      	movs	r1, #0
 800238c:	f240 20c6 	movw	r0, #710	@ 0x2c6
 8002390:	f7ff f8d5 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 5);
 8002394:	2105      	movs	r1, #5
 8002396:	4831      	ldr	r0, [pc, #196]	@ (800245c <show_menu+0x484>)
 8002398:	f7ff f996 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 800239c:	2137      	movs	r1, #55	@ 0x37
 800239e:	200a      	movs	r0, #10
 80023a0:	f7ff f8cd 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("ECE", 3);
 80023a4:	2103      	movs	r1, #3
 80023a6:	482e      	ldr	r0, [pc, #184]	@ (8002460 <show_menu+0x488>)
 80023a8:	f7ff f98e 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 80023ac:	2137      	movs	r1, #55	@ 0x37
 80023ae:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80023b2:	f7ff f8c4 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("477", 3);
 80023b6:	2103      	movs	r1, #3
 80023b8:	482a      	ldr	r0, [pc, #168]	@ (8002464 <show_menu+0x48c>)
 80023ba:	f7ff f985 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 80023be:	f7fe faf3 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-79, 10, CENTER_X-72, 50, CENTER_X-87, 50, RA8875_YELLOW);
 80023c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	2332      	movs	r3, #50	@ 0x32
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	f240 1339 	movw	r3, #313	@ 0x139
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2332      	movs	r3, #50	@ 0x32
 80023d4:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80023d8:	210a      	movs	r1, #10
 80023da:	f240 1041 	movw	r0, #321	@ 0x141
 80023de:	f7fe ff5d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-72, 85, CENTER_X-65, 50, CENTER_X-80, 50, RA8875_YELLOW);
 80023e2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2332      	movs	r3, #50	@ 0x32
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2332      	movs	r3, #50	@ 0x32
 80023f4:	f240 124f 	movw	r2, #335	@ 0x14f
 80023f8:	2155      	movs	r1, #85	@ 0x55
 80023fa:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80023fe:	f7fe ff4d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+99, 10, CENTER_X+92, 50, CENTER_X+107, 50, RA8875_YELLOW);
 8002402:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002406:	9302      	str	r3, [sp, #8]
 8002408:	2332      	movs	r3, #50	@ 0x32
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f240 13fb 	movw	r3, #507	@ 0x1fb
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2332      	movs	r3, #50	@ 0x32
 8002414:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8002418:	210a      	movs	r1, #10
 800241a:	f240 10f3 	movw	r0, #499	@ 0x1f3
 800241e:	f7fe ff3d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+92, 85, CENTER_X+85, 50, CENTER_X+100, 50, RA8875_YELLOW);
 8002422:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	2332      	movs	r3, #50	@ 0x32
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2332      	movs	r3, #50	@ 0x32
 8002434:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002438:	2155      	movs	r1, #85	@ 0x55
 800243a:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
 800243e:	f7fe ff2d 	bl	800129c <RA8875_draw_fill_triangle>

	return;
 8002442:	bf00      	nop
}
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	080112fc 	.word	0x080112fc
 8002450:	08011304 	.word	0x08011304
 8002454:	08011310 	.word	0x08011310
 8002458:	080112f0 	.word	0x080112f0
 800245c:	080112e0 	.word	0x080112e0
 8002460:	08011318 	.word	0x08011318
 8002464:	0801131c 	.word	0x0801131c

08002468 <game_matrix>:

void game_matrix(Game_HandleTypeDef *hgame) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b095      	sub	sp, #84	@ 0x54
 800246c:	af04      	add	r7, sp, #16
 800246e:	6078      	str	r0, [r7, #4]
	RA8875_pwm1_out(hgame->current_b);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f955 	bl	8001728 <RA8875_pwm1_out>
	hgame->mode = GAME_MODE_PLAY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
	get_word_matrix(hgame->word_matrix, hgame->board_num, hgame->round_num);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 12f4 	ldr.w	r1, [r3, #756]	@ 0x2f4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002494:	461a      	mov	r2, r3
 8002496:	f7ff f9a7 	bl	80017e8 <get_word_matrix>

    srand(HAL_GetTick());
 800249a:	f002 fc57 	bl	8004d4c <HAL_GetTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00c fec5 	bl	800f230 <srand>
    uint8_t numbers[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 80024a6:	4bd4      	ldr	r3, [pc, #848]	@ (80027f8 <game_matrix+0x390>)
 80024a8:	f107 0418 	add.w	r4, r7, #24
 80024ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shuffle_array(numbers, 16, &(hgame->index0), &(hgame->index1));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f503 723b 	add.w	r2, r3, #748	@ 0x2ec
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80024be:	f107 0018 	add.w	r0, r7, #24
 80024c2:	2110      	movs	r1, #16
 80024c4:	f7ff fae0 	bl	8001a88 <shuffle_array>

	//background
	RA8875_fill_screen(RA8875_BLUE);
 80024c8:	201f      	movs	r0, #31
 80024ca:	f7fe fea9 	bl	8001220 <RA8875_fill_screen>
	//clue
	RA8875_draw_fill_rect(CENTER_X-130, 30, 260, 70, RA8875_YELLOW);
 80024ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2346      	movs	r3, #70	@ 0x46
 80024d6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024da:	211e      	movs	r1, #30
 80024dc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80024e0:	f7fe fe71 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X-120, 40, 240, 50, RA8875_BLUE);
 80024e4:	231f      	movs	r3, #31
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2332      	movs	r3, #50	@ 0x32
 80024ea:	22f0      	movs	r2, #240	@ 0xf0
 80024ec:	2128      	movs	r1, #40	@ 0x28
 80024ee:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80024f2:	f7fe fe68 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(35, 40, 240, 50, RA8875_YELLOW);
 80024f6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2332      	movs	r3, #50	@ 0x32
 80024fe:	22f0      	movs	r2, #240	@ 0xf0
 8002500:	2128      	movs	r1, #40	@ 0x28
 8002502:	2023      	movs	r0, #35	@ 0x23
 8002504:	f7fe fe5f 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(40, 45, 230, 40, RA8875_BLUE);
 8002508:	231f      	movs	r3, #31
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2328      	movs	r3, #40	@ 0x28
 800250e:	22e6      	movs	r2, #230	@ 0xe6
 8002510:	212d      	movs	r1, #45	@ 0x2d
 8002512:	2028      	movs	r0, #40	@ 0x28
 8002514:	f7fe fe57 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X+125, 40, 240, 50, RA8875_YELLOW);
 8002518:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2332      	movs	r3, #50	@ 0x32
 8002520:	22f0      	movs	r2, #240	@ 0xf0
 8002522:	2128      	movs	r1, #40	@ 0x28
 8002524:	f240 200d 	movw	r0, #525	@ 0x20d
 8002528:	f7fe fe4d 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X+130, 45, 230, 40, RA8875_BLUE);
 800252c:	231f      	movs	r3, #31
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2328      	movs	r3, #40	@ 0x28
 8002532:	22e6      	movs	r2, #230	@ 0xe6
 8002534:	212d      	movs	r1, #45	@ 0x2d
 8002536:	f240 2012 	movw	r0, #530	@ 0x212
 800253a:	f7fe fe44 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_triangle(CENTER_X-130, 31, CENTER_X-130, 99, CENTER_X-160, 65, RA8875_YELLOW);
 800253e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	2341      	movs	r3, #65	@ 0x41
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	23f0      	movs	r3, #240	@ 0xf0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2363      	movs	r3, #99	@ 0x63
 800254e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8002552:	211f      	movs	r1, #31
 8002554:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002558:	f7fe fea0 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+130, 31, CENTER_X+130, 99, CENTER_X+160, 65, RA8875_YELLOW);
 800255c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	2341      	movs	r3, #65	@ 0x41
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2363      	movs	r3, #99	@ 0x63
 800256e:	f240 2212 	movw	r2, #530	@ 0x212
 8002572:	211f      	movs	r1, #31
 8002574:	f240 2012 	movw	r0, #530	@ 0x212
 8002578:	f7fe fe90 	bl	800129c <RA8875_draw_fill_triangle>
	//4x4 square matrix with words
	for (int row = 0; row < ROWS; row++) {
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002580:	e0a2      	b.n	80026c8 <game_matrix+0x260>
	  for (int col = 0; col < COLS; col++) {
 8002582:	2300      	movs	r3, #0
 8002584:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002586:	e098      	b.n	80026ba <game_matrix+0x252>
		  int x = MARGIN + col * (SQWIDTH + SPACE);
 8002588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	3314      	adds	r3, #20
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
		  int y = HEADER + MARGIN + row * (SQHEIGHT + SPACE);
 8002596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025a0:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 80027d8 <game_matrix+0x370>
 80025a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025a8:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 80027e0 <game_matrix+0x378>
 80025ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	633b      	str	r3, [r7, #48]	@ 0x30

		  RA8875_draw_fill_rect(x, y, SQWIDTH, SQHEIGHT, RA8875_WHITE);
 80025ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025bc:	b218      	sxth	r0, r3
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	b219      	sxth	r1, r3
 80025c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	234e      	movs	r3, #78	@ 0x4e
 80025ca:	22b6      	movs	r2, #182	@ 0xb6
 80025cc:	f7fe fdfb 	bl	80011c6 <RA8875_draw_fill_rect>

		  int textX = x + SQWIDTH / 2 - (7.3 * ((hgame->word_matrix)[numbers[4*row + col]]).length);
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	335b      	adds	r3, #91	@ 0x5b
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80025dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e2:	4413      	add	r3, r2
 80025e4:	3340      	adds	r3, #64	@ 0x40
 80025e6:	443b      	add	r3, r7
 80025e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ec:	4619      	mov	r1, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	3310      	adds	r3, #16
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002606:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 80027e8 <game_matrix+0x380>
 800260a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800260e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002612:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  int textY = y + SQHEIGHT / 2 - 15;
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002626:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 80027f0 <game_matrix+0x388>
 800262a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800262e:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 8002632:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002636:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800263a:	ee17 3a90 	vmov	r3, s15
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28

		  RA8875_text_mode();
 8002640:	f7fe ff58 	bl	80014f4 <RA8875_text_mode>
		  RA8875_text_cursor_position(textX, textY);
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	b29b      	uxth	r3, r3
 8002648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800264a:	b292      	uxth	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe ff75 	bl	800153e <RA8875_text_cursor_position>
		  RA8875_text_color (RA8875_BLACK, RA8875_WHITE);
 8002654:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe ffae 	bl	80015ba <RA8875_text_color>
		  RA8875_text_scale(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f7ff f808 	bl	8001674 <RA8875_text_scale>
		  RA8875_text_write(((hgame->word_matrix)[numbers[4*row + col]]).word, ((hgame->word_matrix)[numbers[4*row + col]]).length - 1);
 8002664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	4413      	add	r3, r2
 800266c:	3340      	adds	r3, #64	@ 0x40
 800266e:	443b      	add	r3, r7
 8002670:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	4413      	add	r3, r2
 800268a:	3340      	adds	r3, #64	@ 0x40
 800268c:	443b      	add	r3, r7
 800268e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002692:	4619      	mov	r1, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	3310      	adds	r3, #16
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff f80c 	bl	80016c8 <RA8875_text_write>
		  RA8875_graphic_mode();
 80026b0:	f7fe f97a 	bl	80009a8 <RA8875_graphic_mode>
	  for (int col = 0; col < COLS; col++) {
 80026b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b6:	3301      	adds	r3, #1
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026bc:	2b03      	cmp	r3, #3
 80026be:	f77f af63 	ble.w	8002588 <game_matrix+0x120>
	for (int row = 0; row < ROWS; row++) {
 80026c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c4:	3301      	adds	r3, #1
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	f77f af59 	ble.w	8002582 <game_matrix+0x11a>
	  }
	}
	//timer
	char buffer[10];
	sprintf(buffer, "%d", hgame->game_timer);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4947      	ldr	r1, [pc, #284]	@ (80027fc <game_matrix+0x394>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f00c ff07 	bl	800f4f4 <siprintf>
	RA8875_text_mode();
 80026e6:	f7fe ff05 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_cursor_position(CENTER_X-340, 50);
 80026ea:	2132      	movs	r1, #50	@ 0x32
 80026ec:	203c      	movs	r0, #60	@ 0x3c
 80026ee:	f7fe ff26 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80026f2:	211f      	movs	r1, #31
 80026f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026f8:	f7fe ff5f 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7fe ffb9 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Timer:", 6);
 8002702:	2106      	movs	r1, #6
 8002704:	483e      	ldr	r0, [pc, #248]	@ (8002800 <game_matrix+0x398>)
 8002706:	f7fe ffdf 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-220, 50);
 800270a:	2132      	movs	r1, #50	@ 0x32
 800270c:	20b4      	movs	r0, #180	@ 0xb4
 800270e:	f7fe ff16 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write(buffer, 2);
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ffd5 	bl	80016c8 <RA8875_text_write>
	//score
	sprintf(buffer, "Score: %02d", hgame->score);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4936      	ldr	r1, [pc, #216]	@ (8002804 <game_matrix+0x39c>)
 800272a:	4618      	mov	r0, r3
 800272c:	f00c fee2 	bl	800f4f4 <siprintf>
	RA8875_text_cursor_position(CENTER_X+190, 50);
 8002730:	2132      	movs	r1, #50	@ 0x32
 8002732:	f240 204e 	movw	r0, #590	@ 0x24e
 8002736:	f7fe ff02 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800273a:	211f      	movs	r1, #31
 800273c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002740:	f7fe ff3b 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 8002744:	2001      	movs	r0, #1
 8002746:	f7fe ff95 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write(buffer, 9);
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	2109      	movs	r1, #9
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe ffb9 	bl	80016c8 <RA8875_text_write>
	//clue
	RA8875_text_cursor_position(CENTER_X - (7*hgame->word_matrix[NUM_WORDS].length), 50);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	00d2      	lsls	r2, r2, #3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 800276a:	b29b      	uxth	r3, r3
 800276c:	2132      	movs	r1, #50	@ 0x32
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fee5 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002774:	211f      	movs	r1, #31
 8002776:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800277a:	f7fe ff1e 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f7fe ff78 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write(hgame->word_matrix[NUM_WORDS].word, hgame->word_matrix[NUM_WORDS].length - 1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 722a 	add.w	r2, r3, #680	@ 0x2a8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f7fe ff95 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X - 122, 10);
 800279e:	210a      	movs	r1, #10
 80027a0:	f44f 708b 	mov.w	r0, #278	@ 0x116
 80027a4:	f7fe fecb 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80027a8:	211f      	movs	r1, #31
 80027aa:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80027ae:	f7fe ff04 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(0);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe ff5e 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Select 2 Words Related to Clue:", 31);
 80027b8:	211f      	movs	r1, #31
 80027ba:	4813      	ldr	r0, [pc, #76]	@ (8002808 <game_matrix+0x3a0>)
 80027bc:	f7fe ff84 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 80027c0:	f7fe f8f2 	bl	80009a8 <RA8875_graphic_mode>

	HAL_TIM_Base_Start_IT(&htim6);
 80027c4:	4811      	ldr	r0, [pc, #68]	@ (800280c <game_matrix+0x3a4>)
 80027c6:	f009 fad9 	bl	800bd7c <HAL_TIM_Base_Start_IT>

	return;
 80027ca:	bf00      	nop
}
 80027cc:	3744      	adds	r7, #68	@ 0x44
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	f3af 8000 	nop.w
 80027d8:	00000000 	.word	0x00000000
 80027dc:	40562000 	.word	0x40562000
 80027e0:	00000000 	.word	0x00000000
 80027e4:	405d0000 	.word	0x405d0000
 80027e8:	33333333 	.word	0x33333333
 80027ec:	401d3333 	.word	0x401d3333
 80027f0:	00000000 	.word	0x00000000
 80027f4:	4043a000 	.word	0x4043a000
 80027f8:	08011358 	.word	0x08011358
 80027fc:	08011320 	.word	0x08011320
 8002800:	08011324 	.word	0x08011324
 8002804:	0801132c 	.word	0x0801132c
 8002808:	08011338 	.word	0x08011338
 800280c:	240004c8 	.word	0x240004c8

08002810 <process_input>:

void process_input(Game_HandleTypeDef *hgame, int key) {
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b094      	sub	sp, #80	@ 0x50
 8002814:	af02      	add	r7, sp, #8
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]

					//   0  1  2  3   4   5  6  7  8   9   10 11 12  13  14  15 16 17  18  19
	uint8_t mapping[] = {0, 4, 8, 12, -1, 1, 5, 9, 13, -1, 2, 6, 10, 14, -1, 3, 7, 11, 15, -1};
 800281a:	4b9f      	ldr	r3, [pc, #636]	@ (8002a98 <process_input+0x288>)
 800281c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002820:	461d      	mov	r5, r3
 8002822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	6023      	str	r3, [r4, #0]
	int gt[2] = {hgame->index0, hgame->index1};
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
	switch(hgame->mode) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
 8002840:	2b04      	cmp	r3, #4
 8002842:	f200 84f5 	bhi.w	8003230 <process_input+0xa20>
 8002846:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <process_input+0x3c>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	0800294f 	.word	0x0800294f
 8002850:	08002861 	.word	0x08002861
 8002854:	08002e27 	.word	0x08002e27
 8002858:	08002f11 	.word	0x08002f11
 800285c:	0800321b 	.word	0x0800321b
		case GAME_MODE_TITLE:
			break;
		case GAME_MODE_MENU:
			if(key == 4) {
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d137      	bne.n	80028d6 <process_input+0xc6>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	230a      	movs	r3, #10
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2346      	movs	r3, #70	@ 0x46
 8002870:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002874:	21cd      	movs	r1, #205	@ 0xcd
 8002876:	20fa      	movs	r0, #250	@ 0xfa
 8002878:	f7fe fd5a 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 800287c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2307      	movs	r3, #7
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2332      	movs	r3, #50	@ 0x32
 8002888:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800288c:	21d7      	movs	r1, #215	@ 0xd7
 800288e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002892:	f7fe fd4d 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002896:	f7fe fe2d 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 800289a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe fe8b 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 80028a4:	21d7      	movs	r1, #215	@ 0xd7
 80028a6:	f240 1063 	movw	r0, #355	@ 0x163
 80028aa:	f7fe fe48 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 80028ae:	2002      	movs	r0, #2
 80028b0:	f7fe fee0 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Play", 5);
 80028b4:	2105      	movs	r1, #5
 80028b6:	4879      	ldr	r0, [pc, #484]	@ (8002a9c <process_input+0x28c>)
 80028b8:	f7fe ff06 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 80028bc:	f7fe f874 	bl	80009a8 <RA8875_graphic_mode>

				HAL_Delay(250);
 80028c0:	20fa      	movs	r0, #250	@ 0xfa
 80028c2:	f002 fa4f 	bl	8004d64 <HAL_Delay>
				title_screen(hgame);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff f93e 	bl	8001b48 <title_screen>
				game_matrix(hgame);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fdcb 	bl	8002468 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				settings(hgame);
			}
			break;
 80028d2:	f000 bca4 	b.w	800321e <process_input+0xa0e>
			else if(key == 9) {
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	f040 84a0 	bne.w	800321e <process_input+0xa0e>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	230a      	movs	r3, #10
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2346      	movs	r3, #70	@ 0x46
 80028e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ec:	f240 1127 	movw	r1, #295	@ 0x127
 80028f0:	20fa      	movs	r0, #250	@ 0xfa
 80028f2:	f7fe fd1d 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 80028f6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2307      	movs	r3, #7
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2332      	movs	r3, #50	@ 0x32
 8002902:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002906:	f240 1131 	movw	r1, #305	@ 0x131
 800290a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800290e:	f7fe fd0f 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002912:	f7fe fdef 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002916:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe fe4d 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 8002920:	f240 1131 	movw	r1, #305	@ 0x131
 8002924:	f240 1031 	movw	r0, #305	@ 0x131
 8002928:	f7fe fe09 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 800292c:	2002      	movs	r0, #2
 800292e:	f7fe fea1 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Settings", 9);
 8002932:	2109      	movs	r1, #9
 8002934:	485a      	ldr	r0, [pc, #360]	@ (8002aa0 <process_input+0x290>)
 8002936:	f7fe fec7 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 800293a:	f7fe f835 	bl	80009a8 <RA8875_graphic_mode>
				HAL_Delay(250);
 800293e:	20fa      	movs	r0, #250	@ 0xfa
 8002940:	f002 fa10 	bl	8004d64 <HAL_Delay>
				settings(hgame);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fef3 	bl	8003730 <settings>
			break;
 800294a:	f000 bc68 	b.w	800321e <process_input+0xa0e>
		case GAME_MODE_PLAY:
			if(key == -1 || mapping[key] == -1) {
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	f000 8465 	beq.w	8003222 <process_input+0xa12>
				break;
			}
			key = mapping[key];
 8002958:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	603b      	str	r3, [r7, #0]
			if(key != hgame->picked) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	f000 845a 	beq.w	8003226 <process_input+0xa16>
				HAL_Delay(100);
 8002972:	2064      	movs	r0, #100	@ 0x64
 8002974:	f002 f9f6 	bl	8004d64 <HAL_Delay>
				int x = MARGIN + (key % 4) * (SQWIDTH + SPACE);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4259      	negs	r1, r3
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	f001 0303 	and.w	r3, r1, #3
 8002984:	bf58      	it	pl
 8002986:	425a      	negpl	r2, r3
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	019b      	lsls	r3, r3, #6
 8002990:	3314      	adds	r3, #20
 8002992:	647b      	str	r3, [r7, #68]	@ 0x44
				int y = HEADER + MARGIN + (key / 4) * (SQHEIGHT + SPACE);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da00      	bge.n	800299c <process_input+0x18c>
 800299a:	3303      	adds	r3, #3
 800299c:	109b      	asrs	r3, r3, #2
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80029a6:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8002a80 <process_input+0x270>
 80029aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029ae:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8002a88 <process_input+0x278>
 80029b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	643b      	str	r3, [r7, #64]	@ 0x40
//			    int textX = x + SQWIDTH / 2 - 40;
//			    int textY = y + SQHEIGHT / 2 - 15;
			    if(key == gt[0] || key == gt[1]) {
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d003      	beq.n	80029d0 <process_input+0x1c0>
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d169      	bne.n	8002aa4 <process_input+0x294>
					RA8875_draw_fill_rect(x-5, y-5, SQWIDTH, 10, RA8875_GREEN);
 80029d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b05      	subs	r3, #5
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	b218      	sxth	r0, r3
 80029da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b05      	subs	r3, #5
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b219      	sxth	r1, r3
 80029e4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	230a      	movs	r3, #10
 80029ec:	22b6      	movs	r2, #182	@ 0xb6
 80029ee:	f7fe fbea 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 80029f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b05      	subs	r3, #5
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b218      	sxth	r0, r3
 80029fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b05      	subs	r3, #5
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b219      	sxth	r1, r3
 8002a06:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	234e      	movs	r3, #78	@ 0x4e
 8002a0e:	220a      	movs	r2, #10
 8002a10:	f7fe fbd9 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y+SQHEIGHT-5, SQWIDTH+10, 10, RA8875_GREEN);
 8002a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b05      	subs	r3, #5
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b218      	sxth	r0, r3
 8002a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a28:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8002a90 <process_input+0x280>
 8002a2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a30:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a3c:	ee17 3a90 	vmov	r3, s15
 8002a40:	b219      	sxth	r1, r3
 8002a42:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	230a      	movs	r3, #10
 8002a4a:	22c0      	movs	r2, #192	@ 0xc0
 8002a4c:	f7fe fbbb 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x+SQWIDTH-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 8002a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	33b1      	adds	r3, #177	@ 0xb1
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	b218      	sxth	r0, r3
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b05      	subs	r3, #5
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b219      	sxth	r1, r3
 8002a64:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	234e      	movs	r3, #78	@ 0x4e
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	f7fe fbaa 	bl	80011c6 <RA8875_draw_fill_rect>
					HAL_Delay(10);
 8002a72:	200a      	movs	r0, #10
 8002a74:	f002 f976 	bl	8004d64 <HAL_Delay>
 8002a78:	e068      	b.n	8002b4c <process_input+0x33c>
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	00000000 	.word	0x00000000
 8002a84:	40562000 	.word	0x40562000
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	405d0000 	.word	0x405d0000
 8002a90:	00000000 	.word	0x00000000
 8002a94:	4053a000 	.word	0x4053a000
 8002a98:	080113a4 	.word	0x080113a4
 8002a9c:	080112fc 	.word	0x080112fc
 8002aa0:	08011304 	.word	0x08011304
			    }
			    else{
					RA8875_draw_fill_rect(x-5, y-5, SQWIDTH, 10, RA8875_RED);
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b05      	subs	r3, #5
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b218      	sxth	r0, r3
 8002aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b05      	subs	r3, #5
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b219      	sxth	r1, r3
 8002ab8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	230a      	movs	r3, #10
 8002ac0:	22b6      	movs	r2, #182	@ 0xb6
 8002ac2:	f7fe fb80 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y-5, 10, SQHEIGHT, RA8875_RED);
 8002ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b05      	subs	r3, #5
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b218      	sxth	r0, r3
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b05      	subs	r3, #5
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b219      	sxth	r1, r3
 8002ada:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	234e      	movs	r3, #78	@ 0x4e
 8002ae2:	220a      	movs	r2, #10
 8002ae4:	f7fe fb6f 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y+SQHEIGHT-5, SQWIDTH+10, 10, RA8875_RED);
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b05      	subs	r3, #5
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	b218      	sxth	r0, r3
 8002af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002afc:	ed9f 6bbe 	vldr	d6, [pc, #760]	@ 8002df8 <process_input+0x5e8>
 8002b00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b04:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002b08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002b10:	ee17 3a90 	vmov	r3, s15
 8002b14:	b219      	sxth	r1, r3
 8002b16:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	22c0      	movs	r2, #192	@ 0xc0
 8002b20:	f7fe fb51 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x+SQWIDTH-5, y-5, 10, SQHEIGHT, RA8875_RED);
 8002b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	33b1      	adds	r3, #177	@ 0xb1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b218      	sxth	r0, r3
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b05      	subs	r3, #5
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b219      	sxth	r1, r3
 8002b38:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	234e      	movs	r3, #78	@ 0x4e
 8002b40:	220a      	movs	r2, #10
 8002b42:	f7fe fb40 	bl	80011c6 <RA8875_draw_fill_rect>
					HAL_Delay(10);
 8002b46:	200a      	movs	r0, #10
 8002b48:	f002 f90c 	bl	8004d64 <HAL_Delay>
			    }
				if(hgame->guess_remain == 1) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <process_input+0x358>
					hgame->guess_remain = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
					hgame->picked = key;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
					  game_matrix(hgame);
					}
					HAL_Delay(100);
				}
			}
			break;
 8002b66:	e35e      	b.n	8003226 <process_input+0xa16>
				else if(hgame->guess_remain == 0) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8359 	bne.w	8003226 <process_input+0xa16>
					HAL_TIM_Base_Stop_IT(&htim6);
 8002b74:	48a6      	ldr	r0, [pc, #664]	@ (8002e10 <process_input+0x600>)
 8002b76:	f009 f979 	bl	800be6c <HAL_TIM_Base_Stop_IT>
					int guess_list[2] = {hgame->picked, key};
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	623b      	str	r3, [r7, #32]
					calc_score(hgame, guess_list, gt);
 8002b86:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 ff57 	bl	8003a44 <calc_score>
					sprintf(buffer, "Score: %02d", hgame->score);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	499c      	ldr	r1, [pc, #624]	@ (8002e14 <process_input+0x604>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00c fca6 	bl	800f4f4 <siprintf>
					x = MARGIN + (gt[0] % 4) * (SQWIDTH + SPACE);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	4259      	negs	r1, r3
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	f001 0303 	and.w	r3, r1, #3
 8002bb4:	bf58      	it	pl
 8002bb6:	425a      	negpl	r2, r3
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	019b      	lsls	r3, r3, #6
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	647b      	str	r3, [r7, #68]	@ 0x44
					y = HEADER + MARGIN + (gt[0] / 4) * (SQHEIGHT + SPACE);
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da00      	bge.n	8002bcc <process_input+0x3bc>
 8002bca:	3303      	adds	r3, #3
 8002bcc:	109b      	asrs	r3, r3, #2
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bd6:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8002e00 <process_input+0x5f0>
 8002bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bde:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8002e08 <process_input+0x5f8>
 8002be2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002be6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
					RA8875_draw_fill_rect(x-5, y-5, SQWIDTH, 10, RA8875_GREEN);
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b05      	subs	r3, #5
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b218      	sxth	r0, r3
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b05      	subs	r3, #5
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b219      	sxth	r1, r3
 8002c04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	22b6      	movs	r2, #182	@ 0xb6
 8002c0e:	f7fe fada 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 8002c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b05      	subs	r3, #5
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	b218      	sxth	r0, r3
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b05      	subs	r3, #5
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b219      	sxth	r1, r3
 8002c26:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	234e      	movs	r3, #78	@ 0x4e
 8002c2e:	220a      	movs	r2, #10
 8002c30:	f7fe fac9 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y+SQHEIGHT-5, SQWIDTH+10, 10, RA8875_GREEN);
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b05      	subs	r3, #5
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b218      	sxth	r0, r3
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c48:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8002df8 <process_input+0x5e8>
 8002c4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c50:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002c54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	b219      	sxth	r1, r3
 8002c62:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	230a      	movs	r3, #10
 8002c6a:	22c0      	movs	r2, #192	@ 0xc0
 8002c6c:	f7fe faab 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x+SQWIDTH-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 8002c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	33b1      	adds	r3, #177	@ 0xb1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	b218      	sxth	r0, r3
 8002c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b05      	subs	r3, #5
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b219      	sxth	r1, r3
 8002c84:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	234e      	movs	r3, #78	@ 0x4e
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	f7fe fa9a 	bl	80011c6 <RA8875_draw_fill_rect>
					x = MARGIN + (gt[1] % 4) * (SQWIDTH + SPACE);
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	4259      	negs	r1, r3
 8002c96:	f003 0203 	and.w	r2, r3, #3
 8002c9a:	f001 0303 	and.w	r3, r1, #3
 8002c9e:	bf58      	it	pl
 8002ca0:	425a      	negpl	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	3314      	adds	r3, #20
 8002cac:	647b      	str	r3, [r7, #68]	@ 0x44
					y = HEADER + MARGIN + (gt[1] / 4) * (SQHEIGHT + SPACE);
 8002cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da00      	bge.n	8002cb6 <process_input+0x4a6>
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	109b      	asrs	r3, r3, #2
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002cc0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8002e00 <process_input+0x5f0>
 8002cc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cc8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8002e08 <process_input+0x5f8>
 8002ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cd0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002cd4:	ee17 3a90 	vmov	r3, s15
 8002cd8:	643b      	str	r3, [r7, #64]	@ 0x40
					RA8875_draw_fill_rect(x-5, y-5, SQWIDTH, 10, RA8875_GREEN);
 8002cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b05      	subs	r3, #5
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b218      	sxth	r0, r3
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b05      	subs	r3, #5
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b219      	sxth	r1, r3
 8002cee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	22b6      	movs	r2, #182	@ 0xb6
 8002cf8:	f7fe fa65 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b05      	subs	r3, #5
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	b218      	sxth	r0, r3
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b05      	subs	r3, #5
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b219      	sxth	r1, r3
 8002d10:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	234e      	movs	r3, #78	@ 0x4e
 8002d18:	220a      	movs	r2, #10
 8002d1a:	f7fe fa54 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x-5, y+SQHEIGHT-5, SQWIDTH+10, 10, RA8875_GREEN);
 8002d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b05      	subs	r3, #5
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b218      	sxth	r0, r3
 8002d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002d32:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8002df8 <process_input+0x5e8>
 8002d36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d3a:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8002d3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d46:	ee17 3a90 	vmov	r3, s15
 8002d4a:	b219      	sxth	r1, r3
 8002d4c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	230a      	movs	r3, #10
 8002d54:	22c0      	movs	r2, #192	@ 0xc0
 8002d56:	f7fe fa36 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(x+SQWIDTH-5, y-5, 10, SQHEIGHT, RA8875_GREEN);
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	33b1      	adds	r3, #177	@ 0xb1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b218      	sxth	r0, r3
 8002d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b05      	subs	r3, #5
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b219      	sxth	r1, r3
 8002d6e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	234e      	movs	r3, #78	@ 0x4e
 8002d76:	220a      	movs	r2, #10
 8002d78:	f7fe fa25 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_text_mode();
 8002d7c:	f7fe fbba 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_cursor_position(CENTER_X+190, 50);
 8002d80:	2132      	movs	r1, #50	@ 0x32
 8002d82:	f240 204e 	movw	r0, #590	@ 0x24e
 8002d86:	f7fe fbda 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002d8a:	211f      	movs	r1, #31
 8002d8c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d90:	f7fe fc13 	bl	80015ba <RA8875_text_color>
					RA8875_text_scale(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fe fc6d 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write(buffer, 10);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	210a      	movs	r1, #10
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fc91 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 8002da6:	f7fd fdff 	bl	80009a8 <RA8875_graphic_mode>
					hgame->picked = -1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
					hgame->guess_remain = 1;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
					hgame->round_num++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
					HAL_Delay(1000);
 8002dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dce:	f001 ffc9 	bl	8004d64 <HAL_Delay>
					if(hgame->round_num > 10) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002dd8:	2b0a      	cmp	r3, #10
 8002dda:	dd1d      	ble.n	8002e18 <process_input+0x608>
					  hgame->game_timer = 60;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	223c      	movs	r2, #60	@ 0x3c
 8002de0:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
					  HAL_TIM_Base_Stop_IT(&htim6);
 8002de4:	480a      	ldr	r0, [pc, #40]	@ (8002e10 <process_input+0x600>)
 8002de6:	f009 f841 	bl	800be6c <HAL_TIM_Base_Stop_IT>
					  end_game(hgame);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa24 	bl	8003238 <end_game>
 8002df0:	e015      	b.n	8002e1e <process_input+0x60e>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	4053a000 	.word	0x4053a000
 8002e00:	00000000 	.word	0x00000000
 8002e04:	40562000 	.word	0x40562000
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	405d0000 	.word	0x405d0000
 8002e10:	240004c8 	.word	0x240004c8
 8002e14:	0801132c 	.word	0x0801132c
					  game_matrix(hgame);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fb25 	bl	8002468 <game_matrix>
					HAL_Delay(100);
 8002e1e:	2064      	movs	r0, #100	@ 0x64
 8002e20:	f001 ffa0 	bl	8004d64 <HAL_Delay>
			break;
 8002e24:	e1ff      	b.n	8003226 <process_input+0xa16>
		case GAME_MODE_END:
			if(key == 4) {
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d136      	bne.n	8002e9a <process_input+0x68a>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	230a      	movs	r3, #10
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2346      	movs	r3, #70	@ 0x46
 8002e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e3a:	21cd      	movs	r1, #205	@ 0xcd
 8002e3c:	20fa      	movs	r0, #250	@ 0xfa
 8002e3e:	f7fe fa77 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 8002e42:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2307      	movs	r3, #7
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2332      	movs	r3, #50	@ 0x32
 8002e4e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002e52:	21d7      	movs	r1, #215	@ 0xd7
 8002e54:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002e58:	f7fe fa6a 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002e5c:	f7fe fb4a 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002e60:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fe fba8 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-23);
 8002e6a:	21d9      	movs	r1, #217	@ 0xd9
 8002e6c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002e70:	f7fe fb65 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7fe fbfd 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Play Again", 10);
 8002e7a:	210a      	movs	r1, #10
 8002e7c:	48bc      	ldr	r0, [pc, #752]	@ (8003170 <process_input+0x960>)
 8002e7e:	f7fe fc23 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002e82:	f7fd fd91 	bl	80009a8 <RA8875_graphic_mode>

				HAL_Delay(250);
 8002e86:	20fa      	movs	r0, #250	@ 0xfa
 8002e88:	f001 ff6c 	bl	8004d64 <HAL_Delay>
				title_screen(hgame);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe fe5b 	bl	8001b48 <title_screen>
				game_matrix(hgame);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fae8 	bl	8002468 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				show_menu(hgame);
			}
			break;
 8002e98:	e1c7      	b.n	800322a <process_input+0xa1a>
			else if(key == 9) {
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	f040 81c4 	bne.w	800322a <process_input+0xa1a>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2346      	movs	r3, #70	@ 0x46
 8002eac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eb0:	f240 1127 	movw	r1, #295	@ 0x127
 8002eb4:	20fa      	movs	r0, #250	@ 0xfa
 8002eb6:	f7fe fa3b 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 8002eba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	2307      	movs	r3, #7
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2332      	movs	r3, #50	@ 0x32
 8002ec6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002eca:	f240 1131 	movw	r1, #305	@ 0x131
 8002ece:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002ed2:	f7fe fa2d 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002ed6:	f7fe fb0d 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002eda:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe fb6b 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8002ee4:	f240 1131 	movw	r1, #305	@ 0x131
 8002ee8:	f240 1063 	movw	r0, #355	@ 0x163
 8002eec:	f7fe fb27 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7fe fbbf 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Menu", 5);
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	489e      	ldr	r0, [pc, #632]	@ (8003174 <process_input+0x964>)
 8002efa:	f7fe fbe5 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002efe:	f7fd fd53 	bl	80009a8 <RA8875_graphic_mode>
				HAL_Delay(250);
 8002f02:	20fa      	movs	r0, #250	@ 0xfa
 8002f04:	f001 ff2e 	bl	8004d64 <HAL_Delay>
				show_menu(hgame);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff f865 	bl	8001fd8 <show_menu>
			break;
 8002f0e:	e18c      	b.n	800322a <process_input+0xa1a>
		case GAME_MODE_SETTINGS:
			if(key == 4) {
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d13f      	bne.n	8002f96 <process_input+0x786>
				RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_GREEN);
 8002f16:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2332      	movs	r3, #50	@ 0x32
 8002f1e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002f22:	21c8      	movs	r1, #200	@ 0xc8
 8002f24:	200a      	movs	r0, #10
 8002f26:	f7fe f94e 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_text_mode();
 8002f2a:	f7fe fae3 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002f2e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe fb41 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(30, CENTER_Y-40);
 8002f38:	21c8      	movs	r1, #200	@ 0xc8
 8002f3a:	201e      	movs	r0, #30
 8002f3c:	f7fe faff 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002f40:	2002      	movs	r0, #2
 8002f42:	f7fe fb97 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Brightness", 10);
 8002f46:	210a      	movs	r1, #10
 8002f48:	488b      	ldr	r0, [pc, #556]	@ (8003178 <process_input+0x968>)
 8002f4a:	f7fe fbbd 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002f4e:	f7fd fd2b 	bl	80009a8 <RA8875_graphic_mode>

				hgame->set_b = 1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 8002f5a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2319      	movs	r3, #25
 8002f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f66:	21e6      	movs	r1, #230	@ 0xe6
 8002f68:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002f6c:	f7fe f92b 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b218      	sxth	r0, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2325      	movs	r3, #37	@ 0x25
 8002f86:	220a      	movs	r2, #10
 8002f88:	21e0      	movs	r1, #224	@ 0xe0
 8002f8a:	f7fe f91c 	bl	80011c6 <RA8875_draw_fill_rect>

				HAL_Delay(250);
 8002f8e:	20fa      	movs	r0, #250	@ 0xfa
 8002f90:	f001 fee8 	bl	8004d64 <HAL_Delay>
				RA8875_pwm1_out(hgame->current_b);
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
			}
			break;
 8002f94:	e14b      	b.n	800322e <process_input+0xa1e>
			else if(key == 9) {
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	f040 80a3 	bne.w	80030e4 <process_input+0x8d4>
				if(hgame->set_b) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d067      	beq.n	8003078 <process_input+0x868>
					hgame->set_b = 0;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
					RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-16, 280, 40, 0xc65d);
 8002fb0:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2328      	movs	r3, #40	@ 0x28
 8002fb8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002fbc:	21e0      	movs	r1, #224	@ 0xe0
 8002fbe:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002fc2:	f7fe f900 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 150, RA8875_BLACK);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2396      	movs	r3, #150	@ 0x96
 8002fcc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002fd0:	21c8      	movs	r1, #200	@ 0xc8
 8002fd2:	200a      	movs	r0, #10
 8002fd4:	f7fe f8f7 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_text_mode();
 8002fd8:	f7fe fa8c 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002fe2:	f7fe faea 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(30, CENTER_Y-40);
 8002fe6:	21c8      	movs	r1, #200	@ 0xc8
 8002fe8:	201e      	movs	r0, #30
 8002fea:	f7fe faa8 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 8002fee:	2002      	movs	r0, #2
 8002ff0:	f7fe fb40 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write("Brightness", 10);
 8002ff4:	210a      	movs	r1, #10
 8002ff6:	4860      	ldr	r0, [pc, #384]	@ (8003178 <process_input+0x968>)
 8002ff8:	f7fe fb66 	bl	80016c8 <RA8875_text_write>
					RA8875_text_cursor_position(80, CENTER_Y+10);
 8002ffc:	21fa      	movs	r1, #250	@ 0xfa
 8002ffe:	2050      	movs	r0, #80	@ 0x50
 8003000:	f7fe fa9d 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_write("Volume", 6);
 8003004:	2106      	movs	r1, #6
 8003006:	485d      	ldr	r0, [pc, #372]	@ (800317c <process_input+0x96c>)
 8003008:	f7fe fb5e 	bl	80016c8 <RA8875_text_write>
					RA8875_text_cursor_position(30, CENTER_Y+60);
 800300c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003010:	201e      	movs	r0, #30
 8003012:	f7fe fa94 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_write("Difficulty", 10);
 8003016:	210a      	movs	r1, #10
 8003018:	4859      	ldr	r0, [pc, #356]	@ (8003180 <process_input+0x970>)
 800301a:	f7fe fb55 	bl	80016c8 <RA8875_text_write>
					sprintf(buffer, "%d", ((hgame->current_b)*100 + 127)/255);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8003024:	2264      	movs	r2, #100	@ 0x64
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	337f      	adds	r3, #127	@ 0x7f
 800302c:	4a55      	ldr	r2, [pc, #340]	@ (8003184 <process_input+0x974>)
 800302e:	fb82 1203 	smull	r1, r2, r2, r3
 8003032:	441a      	add	r2, r3
 8003034:	11d2      	asrs	r2, r2, #7
 8003036:	17db      	asrs	r3, r3, #31
 8003038:	1ad2      	subs	r2, r2, r3
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	4952      	ldr	r1, [pc, #328]	@ (8003188 <process_input+0x978>)
 8003040:	4618      	mov	r0, r3
 8003042:	f00c fa57 	bl	800f4f4 <siprintf>
					RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8003046:	211f      	movs	r1, #31
 8003048:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800304c:	f7fe fab5 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(10, 55);
 8003050:	2137      	movs	r1, #55	@ 0x37
 8003052:	200a      	movs	r0, #10
 8003054:	f7fe fa73 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(1);
 8003058:	2001      	movs	r0, #1
 800305a:	f7fe fb0b 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write(buffer, 3);
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	2103      	movs	r1, #3
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fb2f 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 800306a:	f7fd fc9d 	bl	80009a8 <RA8875_graphic_mode>
					HAL_Delay(500);
 800306e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003072:	f001 fe77 	bl	8004d64 <HAL_Delay>
			break;
 8003076:	e0da      	b.n	800322e <process_input+0xa1e>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_BLACK);
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	230a      	movs	r3, #10
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2346      	movs	r3, #70	@ 0x46
 8003082:	22b4      	movs	r2, #180	@ 0xb4
 8003084:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8003088:	f240 204e 	movw	r0, #590	@ 0x24e
 800308c:	f7fe f950 	bl	8001330 <RA8875_draw_fill_round_rect>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_GREEN);
 8003090:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2307      	movs	r3, #7
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2332      	movs	r3, #50	@ 0x32
 800309c:	22a0      	movs	r2, #160	@ 0xa0
 800309e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80030a2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80030a6:	f7fe f943 	bl	8001330 <RA8875_draw_fill_round_rect>
					RA8875_text_mode();
 80030aa:	f7fe fa23 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80030ae:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe fa81 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 80030b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80030bc:	f240 207b 	movw	r0, #635	@ 0x27b
 80030c0:	f7fe fa3d 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 80030c4:	2002      	movs	r0, #2
 80030c6:	f7fe fad5 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write("Back", 5);
 80030ca:	2105      	movs	r1, #5
 80030cc:	482f      	ldr	r0, [pc, #188]	@ (800318c <process_input+0x97c>)
 80030ce:	f7fe fafb 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 80030d2:	f7fd fc69 	bl	80009a8 <RA8875_graphic_mode>
					HAL_Delay(250);
 80030d6:	20fa      	movs	r0, #250	@ 0xfa
 80030d8:	f001 fe44 	bl	8004d64 <HAL_Delay>
					show_menu(hgame);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fe ff7b 	bl	8001fd8 <show_menu>
			break;
 80030e2:	e0a4      	b.n	800322e <process_input+0xa1e>
			else if((key == 19) && hgame->set_b) {
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b13      	cmp	r3, #19
 80030e8:	d152      	bne.n	8003190 <process_input+0x980>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04d      	beq.n	8003190 <process_input+0x980>
				hgame->current_b += 5;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80030fa:	1d5a      	adds	r2, r3, #5
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				if (hgame->current_b > 255) {
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8003108:	2bff      	cmp	r3, #255	@ 0xff
 800310a:	dd03      	ble.n	8003114 <process_input+0x904>
					hgame->current_b = 255;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	22ff      	movs	r2, #255	@ 0xff
 8003110:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				RA8875_pwm1_out(hgame->current_b);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fb03 	bl	8001728 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
 8003122:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2328      	movs	r3, #40	@ 0x28
 800312a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800312e:	21e0      	movs	r1, #224	@ 0xe0
 8003130:	f240 109f 	movw	r0, #415	@ 0x19f
 8003134:	f7fe f847 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 8003138:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2319      	movs	r3, #25
 8003140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003144:	21e6      	movs	r1, #230	@ 0xe6
 8003146:	f240 10a9 	movw	r0, #425	@ 0x1a9
 800314a:	f7fe f83c 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8003154:	b29b      	uxth	r3, r3
 8003156:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 800315a:	b29b      	uxth	r3, r3
 800315c:	b218      	sxth	r0, r3
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2325      	movs	r3, #37	@ 0x25
 8003164:	220a      	movs	r2, #10
 8003166:	21e0      	movs	r1, #224	@ 0xe0
 8003168:	f7fe f82d 	bl	80011c6 <RA8875_draw_fill_rect>
			break;
 800316c:	e05f      	b.n	800322e <process_input+0xa1e>
 800316e:	bf00      	nop
 8003170:	08011368 	.word	0x08011368
 8003174:	08011374 	.word	0x08011374
 8003178:	0801137c 	.word	0x0801137c
 800317c:	08011388 	.word	0x08011388
 8003180:	08011390 	.word	0x08011390
 8003184:	80808081 	.word	0x80808081
 8003188:	08011320 	.word	0x08011320
 800318c:	0801139c 	.word	0x0801139c
			else if((key == 14) && hgame->set_b) {
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b0e      	cmp	r3, #14
 8003194:	d14b      	bne.n	800322e <process_input+0xa1e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d046      	beq.n	800322e <process_input+0xa1e>
				hgame->current_b -= 5;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80031a6:	1f5a      	subs	r2, r3, #5
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				if (hgame->current_b < 10) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	dc03      	bgt.n	80031c0 <process_input+0x9b0>
					hgame->current_b = 10;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	220a      	movs	r2, #10
 80031bc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				RA8875_pwm1_out(hgame->current_b);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe faad 	bl	8001728 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
 80031ce:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2328      	movs	r3, #40	@ 0x28
 80031d6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80031da:	21e0      	movs	r1, #224	@ 0xe0
 80031dc:	f240 109f 	movw	r0, #415	@ 0x19f
 80031e0:	f7fd fff1 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 80031e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2319      	movs	r3, #25
 80031ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f0:	21e6      	movs	r1, #230	@ 0xe6
 80031f2:	f240 10a9 	movw	r0, #425	@ 0x1a9
 80031f6:	f7fd ffe6 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8003200:	b29b      	uxth	r3, r3
 8003202:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 8003206:	b29b      	uxth	r3, r3
 8003208:	b218      	sxth	r0, r3
 800320a:	2300      	movs	r3, #0
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2325      	movs	r3, #37	@ 0x25
 8003210:	220a      	movs	r2, #10
 8003212:	21e0      	movs	r1, #224	@ 0xe0
 8003214:	f7fd ffd7 	bl	80011c6 <RA8875_draw_fill_rect>
			break;
 8003218:	e009      	b.n	800322e <process_input+0xa1e>
			break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <process_input+0xa20>
			break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <process_input+0xa20>
				break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <process_input+0xa20>
			break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <process_input+0xa20>
			break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <process_input+0xa20>
			break;
 800322e:	bf00      	nop
	}
}
 8003230:	bf00      	nop
 8003232:	3748      	adds	r7, #72	@ 0x48
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}

08003238 <end_game>:

void end_game(Game_HandleTypeDef *hgame) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af04      	add	r7, sp, #16
 800323e:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_END;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	HAL_Delay(500);
 8003248:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800324c:	f001 fd8a 	bl	8004d64 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8003250:	201f      	movs	r0, #31
 8003252:	f7fd ffe5 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8003256:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	230a      	movs	r3, #10
 800325e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003262:	215a      	movs	r1, #90	@ 0x5a
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd ffae 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	230a      	movs	r3, #10
 8003270:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003274:	2164      	movs	r1, #100	@ 0x64
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd ffa5 	bl	80011c6 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0xc65d);
 800327c:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003280:	9302      	str	r3, [sp, #8]
 8003282:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8003292:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003296:	21b4      	movs	r1, #180	@ 0xb4
 8003298:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800329c:	f7fd fffe 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 80032a0:	231f      	movs	r3, #31
 80032a2:	9302      	str	r3, [sp, #8]
 80032a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80032b4:	f240 22da 	movw	r2, #730	@ 0x2da
 80032b8:	21b4      	movs	r1, #180	@ 0xb4
 80032ba:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80032be:	f7fd ffed 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80032c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80032c6:	9302      	str	r3, [sp, #8]
 80032c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	f240 238a 	movw	r3, #650	@ 0x28a
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80032d8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80032dc:	21b4      	movs	r1, #180	@ 0xb4
 80032de:	f240 208a 	movw	r0, #650	@ 0x28a
 80032e2:	f7fd ffdb 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 80032e6:	231f      	movs	r3, #31
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	f240 2376 	movw	r3, #630	@ 0x276
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80032fa:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80032fe:	21b4      	movs	r1, #180	@ 0xb4
 8003300:	f240 2076 	movw	r0, #630	@ 0x276
 8003304:	f7fd ffca 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0xc65d);
 8003308:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2346      	movs	r3, #70	@ 0x46
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800331c:	2214      	movs	r2, #20
 800331e:	21b4      	movs	r1, #180	@ 0xb4
 8003320:	2046      	movs	r0, #70	@ 0x46
 8003322:	f7fd ffbb 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8003326:	231f      	movs	r3, #31
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	235a      	movs	r3, #90	@ 0x5a
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8003338:	2228      	movs	r2, #40	@ 0x28
 800333a:	21b4      	movs	r1, #180	@ 0xb4
 800333c:	205a      	movs	r0, #90	@ 0x5a
 800333e:	f7fd ffad 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8003342:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2378      	movs	r3, #120	@ 0x78
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8003356:	2246      	movs	r2, #70	@ 0x46
 8003358:	21b4      	movs	r1, #180	@ 0xb4
 800335a:	2078      	movs	r0, #120	@ 0x78
 800335c:	f7fd ff9e 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8003360:	231f      	movs	r3, #31
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	238c      	movs	r3, #140	@ 0x8c
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8003372:	225a      	movs	r2, #90	@ 0x5a
 8003374:	21b4      	movs	r1, #180	@ 0xb4
 8003376:	208c      	movs	r0, #140	@ 0x8c
 8003378:	f7fd ff90 	bl	800129c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0xc65d);
 800337c:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2378      	movs	r3, #120	@ 0x78
 8003384:	22c8      	movs	r2, #200	@ 0xc8
 8003386:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800338a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800338e:	f7fd ffad 	bl	80012ec <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0xc65d);//0deg
 8003392:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f240 237e 	movw	r3, #638	@ 0x27e
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80033a8:	f240 224e 	movw	r2, #590	@ 0x24e
 80033ac:	21fa      	movs	r1, #250	@ 0xfa
 80033ae:	f240 204e 	movw	r0, #590	@ 0x24e
 80033b2:	f7fd ff73 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0xc65d);//180deg
 80033b6:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	23ae      	movs	r3, #174	@ 0xae
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80033ca:	22d4      	movs	r2, #212	@ 0xd4
 80033cc:	21fa      	movs	r1, #250	@ 0xfa
 80033ce:	20d4      	movs	r0, #212	@ 0xd4
 80033d0:	f7fd ff64 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0xc65d);//74deg
 80033d4:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80033d8:	9302      	str	r3, [sp, #8]
 80033da:	2382      	movs	r3, #130	@ 0x82
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	f240 13db 	movw	r3, #475	@ 0x1db
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80033ea:	21af      	movs	r1, #175	@ 0xaf
 80033ec:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80033f0:	f7fd ff54 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0xc65d);//106deg
 80033f4:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	2382      	movs	r3, #130	@ 0x82
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	f240 1345 	movw	r3, #325	@ 0x145
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	23c0      	movs	r3, #192	@ 0xc0
 8003406:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800340a:	21af      	movs	r1, #175	@ 0xaf
 800340c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003410:	f7fd ff44 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0xc65d);//-74deg
 8003414:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800342a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800342e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8003432:	f240 200a 	movw	r0, #522	@ 0x20a
 8003436:	f7fd ff31 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0xc65d);//-106deg
 800343a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8003450:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003454:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8003458:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800345c:	f7fd ff1e 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0xc65d);//32deg
 8003460:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	23be      	movs	r3, #190	@ 0xbe
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	23c0      	movs	r3, #192	@ 0xc0
 8003472:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8003476:	21fa      	movs	r1, #250	@ 0xfa
 8003478:	f44f 7014 	mov.w	r0, #592	@ 0x250
 800347c:	f7fd ff0e 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0xc65d);//122deg
 8003480:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	23be      	movs	r3, #190	@ 0xbe
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	23dc      	movs	r3, #220	@ 0xdc
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	23c0      	movs	r3, #192	@ 0xc0
 8003490:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8003494:	21fa      	movs	r1, #250	@ 0xfa
 8003496:	20d4      	movs	r0, #212	@ 0xd4
 8003498:	f7fd ff00 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0xc65d);//-32deg
 800349c:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80034b2:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80034b6:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80034ba:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80034be:	f7fd feed 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0xc65d);//-122deg
 80034c2:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80034d8:	22d4      	movs	r2, #212	@ 0xd4
 80034da:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80034de:	20dc      	movs	r0, #220	@ 0xdc
 80034e0:	f7fd fedc 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0xc65d);//stem
 80034e4:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	237c      	movs	r3, #124	@ 0x7c
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80034f8:	22e8      	movs	r2, #232	@ 0xe8
 80034fa:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80034fe:	20ca      	movs	r0, #202	@ 0xca
 8003500:	f7fd fecc 	bl	800129c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8003504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	230a      	movs	r3, #10
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2346      	movs	r3, #70	@ 0x46
 8003510:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003514:	21cd      	movs	r1, #205	@ 0xcd
 8003516:	20fa      	movs	r0, #250	@ 0xfa
 8003518:	f7fd ff0a 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 800351c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	230a      	movs	r3, #10
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2346      	movs	r3, #70	@ 0x46
 8003528:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800352c:	f240 1127 	movw	r1, #295	@ 0x127
 8003530:	20fa      	movs	r0, #250	@ 0xfa
 8003532:	f7fd fefd 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8003536:	2300      	movs	r3, #0
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2307      	movs	r3, #7
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2332      	movs	r3, #50	@ 0x32
 8003540:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003544:	21d7      	movs	r1, #215	@ 0xd7
 8003546:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800354a:	f7fd fef1 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 800354e:	2300      	movs	r3, #0
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2307      	movs	r3, #7
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2332      	movs	r3, #50	@ 0x32
 8003558:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800355c:	f240 1131 	movw	r1, #305	@ 0x131
 8003560:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003564:	f7fd fee4 	bl	8001330 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8003568:	f7fd ffc4 	bl	80014f4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 800356c:	2100      	movs	r1, #0
 800356e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003572:	f7fe f822 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8003576:	21d7      	movs	r1, #215	@ 0xd7
 8003578:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800357c:	f7fd ffdf 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8003580:	2002      	movs	r0, #2
 8003582:	f7fe f877 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8003586:	210a      	movs	r1, #10
 8003588:	4862      	ldr	r0, [pc, #392]	@ (8003714 <end_game+0x4dc>)
 800358a:	f7fe f89d 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 800358e:	f240 1131 	movw	r1, #305	@ 0x131
 8003592:	f240 1063 	movw	r0, #355	@ 0x163
 8003596:	f7fd ffd2 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 800359a:	2104      	movs	r1, #4
 800359c:	485e      	ldr	r0, [pc, #376]	@ (8003718 <end_game+0x4e0>)
 800359e:	f7fe f893 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80035a2:	211f      	movs	r1, #31
 80035a4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80035a8:	f7fe f807 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-143, 20);
 80035ac:	2114      	movs	r1, #20
 80035ae:	f240 1001 	movw	r0, #257	@ 0x101
 80035b2:	f7fd ffc4 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80035b6:	2003      	movs	r0, #3
 80035b8:	f7fe f85c 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 80035bc:	2104      	movs	r1, #4
 80035be:	4857      	ldr	r0, [pc, #348]	@ (800371c <end_game+0x4e4>)
 80035c0:	f7fe f882 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 80035c4:	2114      	movs	r1, #20
 80035c6:	f240 1095 	movw	r0, #405	@ 0x195
 80035ca:	f7fd ffb8 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 80035ce:	2104      	movs	r1, #4
 80035d0:	4853      	ldr	r0, [pc, #332]	@ (8003720 <end_game+0x4e8>)
 80035d2:	f7fe f879 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80035d6:	211f      	movs	r1, #31
 80035d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80035dc:	f7fd ffed 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80035e0:	2100      	movs	r1, #0
 80035e2:	200a      	movs	r0, #10
 80035e4:	f7fd ffab 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7fe f843 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 80035ee:	2106      	movs	r1, #6
 80035f0:	484c      	ldr	r0, [pc, #304]	@ (8003724 <end_game+0x4ec>)
 80035f2:	f7fe f869 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 80035f6:	2100      	movs	r1, #0
 80035f8:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80035fc:	f7fd ff9f 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 8003600:	210b      	movs	r1, #11
 8003602:	4849      	ldr	r0, [pc, #292]	@ (8003728 <end_game+0x4f0>)
 8003604:	f7fe f860 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8003608:	2137      	movs	r1, #55	@ 0x37
 800360a:	200a      	movs	r0, #10
 800360c:	f7fd ff97 	bl	800153e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%02d", hgame->score);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	4944      	ldr	r1, [pc, #272]	@ (800372c <end_game+0x4f4>)
 800361c:	4618      	mov	r0, r3
 800361e:	f00b ff69 	bl	800f4f4 <siprintf>
	RA8875_text_write(buffer, 3);
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	2103      	movs	r1, #3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe f84d 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 800362e:	2137      	movs	r1, #55	@ 0x37
 8003630:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8003634:	f7fd ff83 	bl	800153e <RA8875_text_cursor_position>
	if(hgame->score > hgame->hi_score) hgame->hi_score = hgame->score;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8003644:	429a      	cmp	r2, r3
 8003646:	dd05      	ble.n	8003654 <end_game+0x41c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
	sprintf(buffer, "%02d", hgame->hi_score);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	4933      	ldr	r1, [pc, #204]	@ (800372c <end_game+0x4f4>)
 8003660:	4618      	mov	r0, r3
 8003662:	f00b ff47 	bl	800f4f4 <siprintf>
	RA8875_text_write(buffer, 3);
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	2103      	movs	r1, #3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe f82b 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 8003672:	f7fd f999 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 8003676:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	2332      	movs	r3, #50	@ 0x32
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	23df      	movs	r3, #223	@ 0xdf
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2332      	movs	r3, #50	@ 0x32
 8003686:	22ee      	movs	r2, #238	@ 0xee
 8003688:	210a      	movs	r1, #10
 800368a:	20e7      	movs	r0, #231	@ 0xe7
 800368c:	f7fd fe06 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8003690:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	2332      	movs	r3, #50	@ 0x32
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	23e6      	movs	r3, #230	@ 0xe6
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2332      	movs	r3, #50	@ 0x32
 80036a0:	22f5      	movs	r2, #245	@ 0xf5
 80036a2:	2155      	movs	r1, #85	@ 0x55
 80036a4:	20ee      	movs	r0, #238	@ 0xee
 80036a6:	f7fd fdf9 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 80036aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	2332      	movs	r3, #50	@ 0x32
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	f240 2337 	movw	r3, #567	@ 0x237
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2332      	movs	r3, #50	@ 0x32
 80036bc:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80036c0:	210a      	movs	r1, #10
 80036c2:	f240 202f 	movw	r0, #559	@ 0x22f
 80036c6:	f7fd fde9 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80036ca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2332      	movs	r3, #50	@ 0x32
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2332      	movs	r3, #50	@ 0x32
 80036dc:	f240 2221 	movw	r2, #545	@ 0x221
 80036e0:	2155      	movs	r1, #85	@ 0x55
 80036e2:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80036e6:	f7fd fdd9 	bl	800129c <RA8875_draw_fill_triangle>

	hgame->score = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	hgame->guess_remain = 1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	hgame->picked = -1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
	hgame->round_num = 1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

	return;
 800370c:	bf00      	nop
}
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	08011368 	.word	0x08011368
 8003718:	08011374 	.word	0x08011374
 800371c:	080113b8 	.word	0x080113b8
 8003720:	080113c0 	.word	0x080113c0
 8003724:	080113c8 	.word	0x080113c8
 8003728:	080113d0 	.word	0x080113d0
 800372c:	080113dc 	.word	0x080113dc

08003730 <settings>:

void settings(Game_HandleTypeDef *hgame) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af04      	add	r7, sp, #16
 8003736:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_SETTINGS;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	HAL_Delay(500);
 8003740:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003744:	f001 fb0e 	bl	8004d64 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8003748:	201f      	movs	r0, #31
 800374a:	f7fd fd69 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 800374e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	230a      	movs	r3, #10
 8003756:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800375a:	215a      	movs	r1, #90	@ 0x5a
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd fd32 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	230a      	movs	r3, #10
 8003768:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800376c:	2164      	movs	r1, #100	@ 0x64
 800376e:	2000      	movs	r0, #0
 8003770:	f7fd fd29 	bl	80011c6 <RA8875_draw_fill_rect>
	//buttons
	RA8875_draw_fill_rect(0, CENTER_Y-50, 300, 170, RA8875_WHITE);
 8003774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	23aa      	movs	r3, #170	@ 0xaa
 800377c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003780:	21be      	movs	r1, #190	@ 0xbe
 8003782:	2000      	movs	r0, #0
 8003784:	f7fd fd1f 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_BLACK);
 8003788:	2300      	movs	r3, #0
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2332      	movs	r3, #50	@ 0x32
 800378e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003792:	21c8      	movs	r1, #200	@ 0xc8
 8003794:	200a      	movs	r0, #10
 8003796:	f7fd fd16 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+10, 280, 50, RA8875_BLACK);
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2332      	movs	r3, #50	@ 0x32
 80037a0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80037a4:	21fa      	movs	r1, #250	@ 0xfa
 80037a6:	200a      	movs	r0, #10
 80037a8:	f7fd fd0d 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+60, 280, 50, RA8875_BLACK);
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2332      	movs	r3, #50	@ 0x32
 80037b2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80037b6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80037ba:	200a      	movs	r0, #10
 80037bc:	f7fd fd03 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_WHITE);
 80037c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	230a      	movs	r3, #10
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2346      	movs	r3, #70	@ 0x46
 80037cc:	22b4      	movs	r2, #180	@ 0xb4
 80037ce:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80037d2:	f240 204e 	movw	r0, #590	@ 0x24e
 80037d6:	f7fd fdab 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_BLACK);
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2307      	movs	r3, #7
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2332      	movs	r3, #50	@ 0x32
 80037e4:	22a0      	movs	r2, #160	@ 0xa0
 80037e6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80037ea:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80037ee:	f7fd fd9f 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_hexagon(CENTER_X+200, CENTER_Y+10, 120, 0xc65d);
 80037f2:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80037f6:	2278      	movs	r2, #120	@ 0x78
 80037f8:	21fa      	movs	r1, #250	@ 0xfa
 80037fa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80037fe:	f7fd fdc3 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X+100, CENTER_Y+10, 120, 0xc65d);
 8003802:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003806:	2278      	movs	r2, #120	@ 0x78
 8003808:	21fa      	movs	r1, #250	@ 0xfa
 800380a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800380e:	f7fd fdbb 	bl	8001388 <RA8875_draw_hexagon>
	//trapezoid
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 310, SCREEN_HEIGHT-95, 0, SCREEN_HEIGHT-30, RA8875_YELLOW);
 8003812:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f240 1381 	movw	r3, #385	@ 0x181
 8003826:	f44f 729b 	mov.w	r2, #310	@ 0x136
 800382a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800382e:	2000      	movs	r0, #0
 8003830:	f7fd fd34 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 290, SCREEN_HEIGHT-100, 0, SCREEN_HEIGHT-50, RA8875_BLUE);
 8003834:	231f      	movs	r3, #31
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2300      	movs	r3, #0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8003846:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800384a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800384e:	2000      	movs	r0, #0
 8003850:	f7fd fd24 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 310, CENTER_Y-75, 0, CENTER_Y-140, RA8875_YELLOW);
 8003854:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	2364      	movs	r3, #100	@ 0x64
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	23a5      	movs	r3, #165	@ 0xa5
 8003864:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8003868:	21aa      	movs	r1, #170	@ 0xaa
 800386a:	2000      	movs	r0, #0
 800386c:	f7fd fd16 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 290, CENTER_Y-70, 0, CENTER_Y-120, RA8875_BLUE);
 8003870:	231f      	movs	r3, #31
 8003872:	9302      	str	r3, [sp, #8]
 8003874:	2378      	movs	r3, #120	@ 0x78
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	23aa      	movs	r3, #170	@ 0xaa
 800387e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8003882:	21aa      	movs	r1, #170	@ 0xaa
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd fd09 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_rect(300, CENTER_Y-75, 12, 220, RA8875_YELLOW);
 800388a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	23dc      	movs	r3, #220	@ 0xdc
 8003892:	220c      	movs	r2, #12
 8003894:	21a5      	movs	r1, #165	@ 0xa5
 8003896:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800389a:	f7fd fc94 	bl	80011c6 <RA8875_draw_fill_rect>

	//button text
	RA8875_text_mode();
 800389e:	f7fd fe29 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80038a8:	f7fd fe87 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(30, CENTER_Y-40);
 80038ac:	21c8      	movs	r1, #200	@ 0xc8
 80038ae:	201e      	movs	r0, #30
 80038b0:	f7fd fe45 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fd fedd 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Brightness", 10);
 80038ba:	210a      	movs	r1, #10
 80038bc:	4857      	ldr	r0, [pc, #348]	@ (8003a1c <settings+0x2ec>)
 80038be:	f7fd ff03 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, CENTER_Y+10);
 80038c2:	21fa      	movs	r1, #250	@ 0xfa
 80038c4:	2050      	movs	r0, #80	@ 0x50
 80038c6:	f7fd fe3a 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Volume", 6);
 80038ca:	2106      	movs	r1, #6
 80038cc:	4854      	ldr	r0, [pc, #336]	@ (8003a20 <settings+0x2f0>)
 80038ce:	f7fd fefb 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(30, CENTER_Y+60);
 80038d2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80038d6:	201e      	movs	r0, #30
 80038d8:	f7fd fe31 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Difficulty", 10);
 80038dc:	210a      	movs	r1, #10
 80038de:	4851      	ldr	r0, [pc, #324]	@ (8003a24 <settings+0x2f4>)
 80038e0:	f7fd fef2 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 80038e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80038e8:	f240 207b 	movw	r0, #635	@ 0x27b
 80038ec:	f7fd fe27 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Back", 4);
 80038f0:	2104      	movs	r1, #4
 80038f2:	484d      	ldr	r0, [pc, #308]	@ (8003a28 <settings+0x2f8>)
 80038f4:	f7fd fee8 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80038f8:	211f      	movs	r1, #31
 80038fa:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80038fe:	f7fd fe5c 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-128, 20);
 8003902:	2114      	movs	r1, #20
 8003904:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8003908:	f7fd fe19 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 800390c:	2003      	movs	r0, #3
 800390e:	f7fd feb1 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("SETTINGS", 8);
 8003912:	2108      	movs	r1, #8
 8003914:	4845      	ldr	r0, [pc, #276]	@ (8003a2c <settings+0x2fc>)
 8003916:	f7fd fed7 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800391a:	211f      	movs	r1, #31
 800391c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003920:	f7fd fe4b 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8003924:	2100      	movs	r1, #0
 8003926:	200a      	movs	r0, #10
 8003928:	f7fd fe09 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 800392c:	2001      	movs	r0, #1
 800392e:	f7fd fea1 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Brightness:", 11);
 8003932:	210b      	movs	r1, #11
 8003934:	483e      	ldr	r0, [pc, #248]	@ (8003a30 <settings+0x300>)
 8003936:	f7fd fec7 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-120, 0);
 800393a:	2100      	movs	r1, #0
 800393c:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8003940:	f7fd fdfd 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Volume:", 7);
 8003944:	2107      	movs	r1, #7
 8003946:	483b      	ldr	r0, [pc, #236]	@ (8003a34 <settings+0x304>)
 8003948:	f7fd febe 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 800394c:	2137      	movs	r1, #55	@ 0x37
 800394e:	200a      	movs	r0, #10
 8003950:	f7fd fdf5 	bl	800153e <RA8875_text_cursor_position>
	char buffer[5];
	sprintf(buffer, "%d", ((hgame->current_b)*100 + 127)/255);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800395a:	2264      	movs	r2, #100	@ 0x64
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	337f      	adds	r3, #127	@ 0x7f
 8003962:	4a35      	ldr	r2, [pc, #212]	@ (8003a38 <settings+0x308>)
 8003964:	fb82 1203 	smull	r1, r2, r2, r3
 8003968:	441a      	add	r2, r3
 800396a:	11d2      	asrs	r2, r2, #7
 800396c:	17db      	asrs	r3, r3, #31
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4931      	ldr	r1, [pc, #196]	@ (8003a3c <settings+0x30c>)
 8003976:	4618      	mov	r0, r3
 8003978:	f00b fdbc 	bl	800f4f4 <siprintf>
	RA8875_text_write(buffer, 3);
 800397c:	f107 0308 	add.w	r3, r7, #8
 8003980:	2103      	movs	r1, #3
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fea0 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8003988:	2137      	movs	r1, #55	@ 0x37
 800398a:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 800398e:	f7fd fdd6 	bl	800153e <RA8875_text_cursor_position>
//	sprintf(buffer, "%d", hi_score);
//	RA8875_text_write(buffer, 3);
	RA8875_text_write("100", 3);
 8003992:	2103      	movs	r1, #3
 8003994:	482a      	ldr	r0, [pc, #168]	@ (8003a40 <settings+0x310>)
 8003996:	f7fd fe97 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 800399a:	f7fd f805 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-159, 10, CENTER_X-152, 50, CENTER_X-167, 50, RA8875_YELLOW);
 800399e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80039a2:	9302      	str	r3, [sp, #8]
 80039a4:	2332      	movs	r3, #50	@ 0x32
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	23e9      	movs	r3, #233	@ 0xe9
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2332      	movs	r3, #50	@ 0x32
 80039ae:	22f8      	movs	r2, #248	@ 0xf8
 80039b0:	210a      	movs	r1, #10
 80039b2:	20f1      	movs	r0, #241	@ 0xf1
 80039b4:	f7fd fc72 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-152, 85, CENTER_X-145, 50, CENTER_X-160, 50, RA8875_YELLOW);
 80039b8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80039bc:	9302      	str	r3, [sp, #8]
 80039be:	2332      	movs	r3, #50	@ 0x32
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	23f0      	movs	r3, #240	@ 0xf0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2332      	movs	r3, #50	@ 0x32
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	2155      	movs	r1, #85	@ 0x55
 80039cc:	20f8      	movs	r0, #248	@ 0xf8
 80039ce:	f7fd fc65 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 80039d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	2332      	movs	r3, #50	@ 0x32
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	f240 2337 	movw	r3, #567	@ 0x237
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2332      	movs	r3, #50	@ 0x32
 80039e4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80039e8:	210a      	movs	r1, #10
 80039ea:	f240 202f 	movw	r0, #559	@ 0x22f
 80039ee:	f7fd fc55 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80039f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	2332      	movs	r3, #50	@ 0x32
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2332      	movs	r3, #50	@ 0x32
 8003a04:	f240 2221 	movw	r2, #545	@ 0x221
 8003a08:	2155      	movs	r1, #85	@ 0x55
 8003a0a:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8003a0e:	f7fd fc45 	bl	800129c <RA8875_draw_fill_triangle>

	return;
 8003a12:	bf00      	nop
}
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0801137c 	.word	0x0801137c
 8003a20:	08011388 	.word	0x08011388
 8003a24:	08011390 	.word	0x08011390
 8003a28:	0801139c 	.word	0x0801139c
 8003a2c:	080113e4 	.word	0x080113e4
 8003a30:	080113f0 	.word	0x080113f0
 8003a34:	080113fc 	.word	0x080113fc
 8003a38:	80808081 	.word	0x80808081
 8003a3c:	08011320 	.word	0x08011320
 8003a40:	08011404 	.word	0x08011404

08003a44 <calc_score>:

void calc_score(Game_HandleTypeDef *hgame, int* guesses, int* truths) {
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	int round_score = -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	617b      	str	r3, [r7, #20]

	if((guesses[0] == truths[0] || guesses[0] == truths[1]) && (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d006      	beq.n	8003a70 <calc_score+0x2c>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d111      	bne.n	8003a94 <calc_score+0x50>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3304      	adds	r3, #4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d007      	beq.n	8003a8e <calc_score+0x4a>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3304      	adds	r3, #4
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d102      	bne.n	8003a94 <calc_score+0x50>
		round_score = 3;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e01d      	b.n	8003ad0 <calc_score+0x8c>
	}
	else if((guesses[0] == truths[0] || guesses[0] == truths[1]) || (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d015      	beq.n	8003acc <calc_score+0x88>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d00e      	beq.n	8003acc <calc_score+0x88>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d007      	beq.n	8003acc <calc_score+0x88>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d101      	bne.n	8003ad0 <calc_score+0x8c>
		round_score = 1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
	}

	hgame->score += round_score;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	if(hgame->score < 0) {
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	da04      	bge.n	8003af4 <calc_score+0xb0>
		hgame->score = 0;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	}

	return;
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
}
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <read_keypad>:
 */

#include "main.h"
#include "keyboard_io.h"

int read_keypad(void) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0

	for(int i = 0; i < 4; i++) { // Set current column as output and low
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	e0a5      	b.n	8003c58 <read_keypad+0x158>
		if(i == 0) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d115      	bne.n	8003b3e <read_keypad+0x3e>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2120      	movs	r1, #32
 8003b16:	4855      	ldr	r0, [pc, #340]	@ (8003c6c <read_keypad+0x16c>)
 8003b18:	f003 f8ee 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	4852      	ldr	r0, [pc, #328]	@ (8003c6c <read_keypad+0x16c>)
 8003b22:	f003 f8e9 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003b26:	2201      	movs	r2, #1
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	4850      	ldr	r0, [pc, #320]	@ (8003c6c <read_keypad+0x16c>)
 8003b2c:	f003 f8e4 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b36:	484e      	ldr	r0, [pc, #312]	@ (8003c70 <read_keypad+0x170>)
 8003b38:	f003 f8de 	bl	8006cf8 <HAL_GPIO_WritePin>
 8003b3c:	e049      	b.n	8003bd2 <read_keypad+0xd2>
		}
		else if(i == 1) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d115      	bne.n	8003b70 <read_keypad+0x70>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8003b44:	2201      	movs	r2, #1
 8003b46:	2120      	movs	r1, #32
 8003b48:	4848      	ldr	r0, [pc, #288]	@ (8003c6c <read_keypad+0x16c>)
 8003b4a:	f003 f8d5 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2140      	movs	r1, #64	@ 0x40
 8003b52:	4846      	ldr	r0, [pc, #280]	@ (8003c6c <read_keypad+0x16c>)
 8003b54:	f003 f8d0 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	4843      	ldr	r0, [pc, #268]	@ (8003c6c <read_keypad+0x16c>)
 8003b5e:	f003 f8cb 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8003b62:	2201      	movs	r2, #1
 8003b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b68:	4841      	ldr	r0, [pc, #260]	@ (8003c70 <read_keypad+0x170>)
 8003b6a:	f003 f8c5 	bl	8006cf8 <HAL_GPIO_WritePin>
 8003b6e:	e030      	b.n	8003bd2 <read_keypad+0xd2>
		}
		else if(i == 2) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d115      	bne.n	8003ba2 <read_keypad+0xa2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8003b76:	2201      	movs	r2, #1
 8003b78:	2120      	movs	r1, #32
 8003b7a:	483c      	ldr	r0, [pc, #240]	@ (8003c6c <read_keypad+0x16c>)
 8003b7c:	f003 f8bc 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003b80:	2201      	movs	r2, #1
 8003b82:	2140      	movs	r1, #64	@ 0x40
 8003b84:	4839      	ldr	r0, [pc, #228]	@ (8003c6c <read_keypad+0x16c>)
 8003b86:	f003 f8b7 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	@ 0x80
 8003b8e:	4837      	ldr	r0, [pc, #220]	@ (8003c6c <read_keypad+0x16c>)
 8003b90:	f003 f8b2 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8003b94:	2201      	movs	r2, #1
 8003b96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b9a:	4835      	ldr	r0, [pc, #212]	@ (8003c70 <read_keypad+0x170>)
 8003b9c:	f003 f8ac 	bl	8006cf8 <HAL_GPIO_WritePin>
 8003ba0:	e017      	b.n	8003bd2 <read_keypad+0xd2>
		}
		else if(i == 3) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d114      	bne.n	8003bd2 <read_keypad+0xd2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2120      	movs	r1, #32
 8003bac:	482f      	ldr	r0, [pc, #188]	@ (8003c6c <read_keypad+0x16c>)
 8003bae:	f003 f8a3 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	2140      	movs	r1, #64	@ 0x40
 8003bb6:	482d      	ldr	r0, [pc, #180]	@ (8003c6c <read_keypad+0x16c>)
 8003bb8:	f003 f89e 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2180      	movs	r1, #128	@ 0x80
 8003bc0:	482a      	ldr	r0, [pc, #168]	@ (8003c6c <read_keypad+0x16c>)
 8003bc2:	f003 f899 	bl	8006cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bcc:	4828      	ldr	r0, [pc, #160]	@ (8003c70 <read_keypad+0x170>)
 8003bce:	f003 f893 	bl	8006cf8 <HAL_GPIO_WritePin>
		}

//		 Read current rows
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_RESET) return i*5 + 0;
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4825      	ldr	r0, [pc, #148]	@ (8003c6c <read_keypad+0x16c>)
 8003bd6:	f003 f877 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <read_keypad+0xea>
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	e03c      	b.n	8003c64 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_RESET) return i*5 + 1;
 8003bea:	2104      	movs	r1, #4
 8003bec:	481f      	ldr	r0, [pc, #124]	@ (8003c6c <read_keypad+0x16c>)
 8003bee:	f003 f86b 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <read_keypad+0x104>
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	3301      	adds	r3, #1
 8003c02:	e02f      	b.n	8003c64 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_RESET) return i*5 + 2;
 8003c04:	2108      	movs	r1, #8
 8003c06:	4819      	ldr	r0, [pc, #100]	@ (8003c6c <read_keypad+0x16c>)
 8003c08:	f003 f85e 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <read_keypad+0x11e>
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	e022      	b.n	8003c64 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin) == GPIO_PIN_RESET) return i*5 + 3;
 8003c1e:	2110      	movs	r1, #16
 8003c20:	4812      	ldr	r0, [pc, #72]	@ (8003c6c <read_keypad+0x16c>)
 8003c22:	f003 f851 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <read_keypad+0x138>
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3303      	adds	r3, #3
 8003c36:	e015      	b.n	8003c64 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW5_GPIO_Port, ROW5_Pin) == GPIO_PIN_RESET) return i*5 + 4;
 8003c38:	2101      	movs	r1, #1
 8003c3a:	480c      	ldr	r0, [pc, #48]	@ (8003c6c <read_keypad+0x16c>)
 8003c3c:	f003 f844 	bl	8006cc8 <HAL_GPIO_ReadPin>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <read_keypad+0x152>
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	e008      	b.n	8003c64 <read_keypad+0x164>
	for(int i = 0; i < 4; i++) { // Set current column as output and low
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3301      	adds	r3, #1
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	f77f af56 	ble.w	8003b0c <read_keypad+0xc>

	}

	return -1; // No key pressed
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	58020c00 	.word	0x58020c00
 8003c70:	58020400 	.word	0x58020400

08003c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c7a:	f000 ffe1 	bl	8004c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c7e:	f000 f839 	bl	8003cf4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003c82:	f000 f8a1 	bl	8003dc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c86:	f000 fa2b 	bl	80040e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c8a:	f000 fa09 	bl	80040a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8003c8e:	f000 f8eb 	bl	8003e68 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003c92:	f000 f941 	bl	8003f18 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003c96:	f008 fba3 	bl	800c3e0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003c9a:	f000 f993 	bl	8003fc4 <MX_TIM6_Init>
  MX_I2S3_Init();
 8003c9e:	f000 f8b1 	bl	8003e04 <MX_I2S3_Init>
  MX_TIM7_Init();
 8003ca2:	f000 f9c7 	bl	8004034 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //Init display with 480x272 and set color as 16-bit per pixel
  RA8875_begin(LCD_RESET_GPIO_Port,LCD_RESET_Pin,LCD_WAIT_GPIO_Port,LCD_WAIT_Pin,RA8875_800x480,RA8875_16BPP);
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2303      	movs	r3, #3
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2310      	movs	r3, #16
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cec <main+0x78>)
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	480d      	ldr	r0, [pc, #52]	@ (8003cec <main+0x78>)
 8003cb6:	f7fc fcf5 	bl	80006a4 <RA8875_begin>

  //Power on the dispaly
  RA8875_display_on(1);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f7fd fd67 	bl	800178e <RA8875_display_on>

  //Backlight on
  RA8875_pwm1_config(1,RA8875_PWM_CLK_DIV1);
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f7fd fd3e 	bl	8001744 <RA8875_pwm1_config>

  mount_sd();
 8003cc8:	f7fd fd76 	bl	80017b8 <mount_sd>

  init_game(&hgame);
 8003ccc:	4808      	ldr	r0, [pc, #32]	@ (8003cf0 <main+0x7c>)
 8003cce:	f7fd fe6f 	bl	80019b0 <init_game>

  show_menu(&hgame);
 8003cd2:	4807      	ldr	r0, [pc, #28]	@ (8003cf0 <main+0x7c>)
 8003cd4:	f7fe f980 	bl	8001fd8 <show_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	k = read_keypad();
 8003cd8:	f7ff ff12 	bl	8003b00 <read_keypad>
 8003cdc:	6078      	str	r0, [r7, #4]
	process_input(&hgame, k);
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4803      	ldr	r0, [pc, #12]	@ (8003cf0 <main+0x7c>)
 8003ce2:	f7fe fd95 	bl	8002810 <process_input>
	k = read_keypad();
 8003ce6:	bf00      	nop
 8003ce8:	e7f6      	b.n	8003cd8 <main+0x64>
 8003cea:	bf00      	nop
 8003cec:	58020800 	.word	0x58020800
 8003cf0:	24000560 	.word	0x24000560

08003cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b09c      	sub	sp, #112	@ 0x70
 8003cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfe:	224c      	movs	r2, #76	@ 0x4c
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f00b fc59 	bl	800f5ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d08:	1d3b      	adds	r3, r7, #4
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b fc53 	bl	800f5ba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003d14:	2002      	movs	r0, #2
 8003d16:	f003 f92b 	bl	8006f70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4b28      	ldr	r3, [pc, #160]	@ (8003dc0 <SystemClock_Config+0xcc>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	4a27      	ldr	r2, [pc, #156]	@ (8003dc0 <SystemClock_Config+0xcc>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d2a:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <SystemClock_Config+0xcc>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4b23      	ldr	r3, [pc, #140]	@ (8003dc4 <SystemClock_Config+0xd0>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003d3c:	4a21      	ldr	r2, [pc, #132]	@ (8003dc4 <SystemClock_Config+0xd0>)
 8003d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d42:	6193      	str	r3, [r2, #24]
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <SystemClock_Config+0xd0>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003d50:	bf00      	nop
 8003d52:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <SystemClock_Config+0xd0>)
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5e:	d1f8      	bne.n	8003d52 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d60:	2302      	movs	r3, #2
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8003d64:	2311      	movs	r3, #17
 8003d66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d68:	2340      	movs	r3, #64	@ 0x40
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 f935 	bl	8006fe4 <HAL_RCC_OscConfig>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003d80:	f000 fab0 	bl	80042e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d84:	233f      	movs	r3, #63	@ 0x3f
 8003d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fd75 	bl	8007898 <HAL_RCC_ClockConfig>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003db4:	f000 fa96 	bl	80042e4 <Error_Handler>
  }
}
 8003db8:	bf00      	nop
 8003dba:	3770      	adds	r7, #112	@ 0x70
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	58000400 	.word	0x58000400
 8003dc4:	58024800 	.word	0x58024800

08003dc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0b0      	sub	sp, #192	@ 0xc0
 8003dcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dce:	463b      	mov	r3, r7
 8003dd0:	22c0      	movs	r2, #192	@ 0xc0
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f00b fbf0 	bl	800f5ba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003dda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003de6:	2300      	movs	r3, #0
 8003de8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dea:	463b      	mov	r3, r7
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 f8c9 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8003df8:	f000 fa74 	bl	80042e4 <Error_Handler>
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	37c0      	adds	r7, #192	@ 0xc0
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003e08:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e0a:	4a16      	ldr	r2, [pc, #88]	@ (8003e64 <MX_I2S3_Init+0x60>)
 8003e0c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8003e0e:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e10:	220a      	movs	r2, #10
 8003e12:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003e14:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003e1a:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003e20:	4b0f      	ldr	r3, [pc, #60]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8003e26:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e28:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003e2c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8003e34:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8003e3a:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003e4c:	4804      	ldr	r0, [pc, #16]	@ (8003e60 <MX_I2S3_Init+0x5c>)
 8003e4e:	f002 ff6d 	bl	8006d2c <HAL_I2S_Init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8003e58:	f000 fa44 	bl	80042e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	240002ec 	.word	0x240002ec
 8003e64:	40003c00 	.word	0x40003c00

08003e68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e6c:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e6e:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <MX_SPI1_Init+0xac>)
 8003e70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e72:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003e78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e7a:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e82:	2207      	movs	r2, #7
 8003e84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e96:	4b1e      	ldr	r3, [pc, #120]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003e98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb2:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003eb8:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ebe:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ec0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ec4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ede:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003ef0:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003efc:	4804      	ldr	r0, [pc, #16]	@ (8003f10 <MX_SPI1_Init+0xa8>)
 8003efe:	f006 fd3f 	bl	800a980 <HAL_SPI_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8003f08:	f000 f9ec 	bl	80042e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	240003b8 	.word	0x240003b8
 8003f14:	40013000 	.word	0x40013000

08003f18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f1c:	4b27      	ldr	r3, [pc, #156]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f1e:	4a28      	ldr	r2, [pc, #160]	@ (8003fc0 <MX_SPI2_Init+0xa8>)
 8003f20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f22:	4b26      	ldr	r3, [pc, #152]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003f28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f2a:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f30:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f32:	2207      	movs	r2, #7
 8003f34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f36:	4b21      	ldr	r3, [pc, #132]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003f48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003f50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f52:	4b1a      	ldr	r3, [pc, #104]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f58:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	4b17      	ldr	r3, [pc, #92]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003f64:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f78:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003f84:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	@ (8003fbc <MX_SPI2_Init+0xa4>)
 8003faa:	f006 fce9 	bl	800a980 <HAL_SPI_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003fb4:	f000 f996 	bl	80042e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	24000440 	.word	0x24000440
 8003fc0:	40003800 	.word	0x40003800

08003fc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fd4:	4b15      	ldr	r3, [pc, #84]	@ (800402c <MX_TIM6_Init+0x68>)
 8003fd6:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <MX_TIM6_Init+0x6c>)
 8003fd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <MX_TIM6_Init+0x68>)
 8003fdc:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8003fe0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <MX_TIM6_Init+0x68>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	@ (800402c <MX_TIM6_Init+0x68>)
 8003fea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <MX_TIM6_Init+0x68>)
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003ff6:	480d      	ldr	r0, [pc, #52]	@ (800402c <MX_TIM6_Init+0x68>)
 8003ff8:	f007 fe69 	bl	800bcce <HAL_TIM_Base_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004002:	f000 f96f 	bl	80042e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004006:	2320      	movs	r3, #32
 8004008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4806      	ldr	r0, [pc, #24]	@ (800402c <MX_TIM6_Init+0x68>)
 8004014:	f008 f938 	bl	800c288 <HAL_TIMEx_MasterConfigSynchronization>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800401e:	f000 f961 	bl	80042e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	240004c8 	.word	0x240004c8
 8004030:	40001000 	.word	0x40001000

08004034 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <MX_TIM7_Init+0x64>)
 8004046:	4a15      	ldr	r2, [pc, #84]	@ (800409c <MX_TIM7_Init+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 800404a:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <MX_TIM7_Init+0x64>)
 800404c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004050:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <MX_TIM7_Init+0x64>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004058:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <MX_TIM7_Init+0x64>)
 800405a:	2263      	movs	r2, #99	@ 0x63
 800405c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <MX_TIM7_Init+0x64>)
 8004060:	2280      	movs	r2, #128	@ 0x80
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004064:	480c      	ldr	r0, [pc, #48]	@ (8004098 <MX_TIM7_Init+0x64>)
 8004066:	f007 fe32 	bl	800bcce <HAL_TIM_Base_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004070:	f000 f938 	bl	80042e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004074:	2320      	movs	r3, #32
 8004076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4805      	ldr	r0, [pc, #20]	@ (8004098 <MX_TIM7_Init+0x64>)
 8004082:	f008 f901 	bl	800c288 <HAL_TIMEx_MasterConfigSynchronization>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800408c:	f000 f92a 	bl	80042e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	24000514 	.word	0x24000514
 800409c:	40001400 	.word	0x40001400

080040a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <MX_DMA_Init+0x3c>)
 80040a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040ac:	4a0b      	ldr	r2, [pc, #44]	@ (80040dc <MX_DMA_Init+0x3c>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80040b6:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <MX_DMA_Init+0x3c>)
 80040b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	200b      	movs	r0, #11
 80040ca:	f000 ff56 	bl	8004f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80040ce:	200b      	movs	r0, #11
 80040d0:	f000 ff6d 	bl	8004fae <HAL_NVIC_EnableIRQ>

}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58024400 	.word	0x58024400

080040e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	609a      	str	r2, [r3, #8]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f6:	4b75      	ldr	r3, [pc, #468]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040fc:	4a73      	ldr	r2, [pc, #460]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004106:	4b71      	ldr	r3, [pc, #452]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004114:	4b6d      	ldr	r3, [pc, #436]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800411a:	4a6c      	ldr	r2, [pc, #432]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004124:	4b69      	ldr	r3, [pc, #420]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004132:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004138:	4a64      	ldr	r2, [pc, #400]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004142:	4b62      	ldr	r3, [pc, #392]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004150:	4b5e      	ldr	r3, [pc, #376]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004156:	4a5d      	ldr	r2, [pc, #372]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004160:	4b5a      	ldr	r3, [pc, #360]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800416e:	4b57      	ldr	r3, [pc, #348]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004174:	4a55      	ldr	r2, [pc, #340]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004176:	f043 0310 	orr.w	r3, r3, #16
 800417a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <MX_GPIO_Init+0x1ec>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800418c:	2200      	movs	r2, #0
 800418e:	2120      	movs	r1, #32
 8004190:	484f      	ldr	r0, [pc, #316]	@ (80042d0 <MX_GPIO_Init+0x1f0>)
 8004192:	f002 fdb1 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8004196:	2201      	movs	r2, #1
 8004198:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800419c:	484d      	ldr	r0, [pc, #308]	@ (80042d4 <MX_GPIO_Init+0x1f4>)
 800419e:	f002 fdab 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80041a2:	2201      	movs	r2, #1
 80041a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041a8:	484b      	ldr	r0, [pc, #300]	@ (80042d8 <MX_GPIO_Init+0x1f8>)
 80041aa:	f002 fda5 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80041ae:	2200      	movs	r2, #0
 80041b0:	21e0      	movs	r1, #224	@ 0xe0
 80041b2:	4849      	ldr	r0, [pc, #292]	@ (80042d8 <MX_GPIO_Init+0x1f8>)
 80041b4:	f002 fda0 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041be:	4845      	ldr	r0, [pc, #276]	@ (80042d4 <MX_GPIO_Init+0x1f4>)
 80041c0:	f002 fd9a 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2103      	movs	r1, #3
 80041c8:	4844      	ldr	r0, [pc, #272]	@ (80042dc <MX_GPIO_Init+0x1fc>)
 80041ca:	f002 fd95 	bl	8006cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dummy_HiZ_Pin */
  GPIO_InitStruct.Pin = Dummy_HiZ_Pin;
 80041ce:	2310      	movs	r3, #16
 80041d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Dummy_HiZ_GPIO_Port, &GPIO_InitStruct);
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	4619      	mov	r1, r3
 80041e0:	483f      	ldr	r0, [pc, #252]	@ (80042e0 <MX_GPIO_Init+0x200>)
 80041e2:	f002 fbc1 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 80041e6:	2310      	movs	r3, #16
 80041e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4619      	mov	r1, r3
 80041f8:	4835      	ldr	r0, [pc, #212]	@ (80042d0 <MX_GPIO_Init+0x1f0>)
 80041fa:	f002 fbb5 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80041fe:	2320      	movs	r3, #32
 8004200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004206:	2302      	movs	r3, #2
 8004208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	482e      	ldr	r0, [pc, #184]	@ (80042d0 <MX_GPIO_Init+0x1f0>)
 8004216:	f002 fba7 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800421a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800421e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004220:	2301      	movs	r3, #1
 8004222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	4619      	mov	r1, r3
 8004232:	4828      	ldr	r0, [pc, #160]	@ (80042d4 <MX_GPIO_Init+0x1f4>)
 8004234:	f002 fb98 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800423c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800424a:	f107 0314 	add.w	r3, r7, #20
 800424e:	4619      	mov	r1, r3
 8004250:	4821      	ldr	r0, [pc, #132]	@ (80042d8 <MX_GPIO_Init+0x1f8>)
 8004252:	f002 fb89 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8004256:	231f      	movs	r3, #31
 8004258:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	481b      	ldr	r0, [pc, #108]	@ (80042d8 <MX_GPIO_Init+0x1f8>)
 800426a:	f002 fb7d 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 800426e:	23e0      	movs	r3, #224	@ 0xe0
 8004270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	4814      	ldr	r0, [pc, #80]	@ (80042d8 <MX_GPIO_Init+0x1f8>)
 8004286:	f002 fb6f 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 800428a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800428e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004290:	2301      	movs	r3, #1
 8004292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4619      	mov	r1, r3
 80042a2:	480c      	ldr	r0, [pc, #48]	@ (80042d4 <MX_GPIO_Init+0x1f4>)
 80042a4:	f002 fb60 	bl	8006968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 80042a8:	2303      	movs	r3, #3
 80042aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4619      	mov	r1, r3
 80042be:	4807      	ldr	r0, [pc, #28]	@ (80042dc <MX_GPIO_Init+0x1fc>)
 80042c0:	f002 fb52 	bl	8006968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80042c4:	bf00      	nop
 80042c6:	3728      	adds	r7, #40	@ 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58024400 	.word	0x58024400
 80042d0:	58020800 	.word	0x58020800
 80042d4:	58020400 	.word	0x58020400
 80042d8:	58020c00 	.word	0x58020c00
 80042dc:	58021000 	.word	0x58021000
 80042e0:	58020000 	.word	0x58020000

080042e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e8:	b672      	cpsid	i
}
 80042ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <Error_Handler+0x8>

080042f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <HAL_MspInit+0x30>)
 80042f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042fc:	4a08      	ldr	r2, [pc, #32]	@ (8004320 <HAL_MspInit+0x30>)
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_MspInit+0x30>)
 8004308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	58024400 	.word	0x58024400

08004324 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b0bc      	sub	sp, #240	@ 0xf0
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800433c:	f107 0318 	add.w	r3, r7, #24
 8004340:	22c0      	movs	r2, #192	@ 0xc0
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f00b f938 	bl	800f5ba <memset>
  if(hi2s->Instance==SPI3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a63      	ldr	r2, [pc, #396]	@ (80044dc <HAL_I2S_MspInit+0x1b8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f040 80bf 	bne.w	80044d4 <HAL_I2S_MspInit+0x1b0>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004356:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004362:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004366:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004368:	f107 0318 	add.w	r3, r7, #24
 800436c:	4618      	mov	r0, r3
 800436e:	f003 fe09 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8004378:	f7ff ffb4 	bl	80042e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800437c:	4b58      	ldr	r3, [pc, #352]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 800437e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004382:	4a57      	ldr	r2, [pc, #348]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 8004384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800438c:	4b54      	ldr	r3, [pc, #336]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 800438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800439a:	4b51      	ldr	r3, [pc, #324]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 800439c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043a0:	4a4f      	ldr	r2, [pc, #316]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043aa:	4b4d      	ldr	r3, [pc, #308]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b8:	4b49      	ldr	r3, [pc, #292]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043be:	4a48      	ldr	r2, [pc, #288]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043c8:	4b45      	ldr	r3, [pc, #276]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d6:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043dc:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043e6:	4b3e      	ldr	r3, [pc, #248]	@ (80044e0 <HAL_I2S_MspInit+0x1bc>)
 80043e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043f4:	2304      	movs	r3, #4
 80043f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800440c:	2307      	movs	r3, #7
 800440e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004412:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004416:	4619      	mov	r1, r3
 8004418:	4832      	ldr	r0, [pc, #200]	@ (80044e4 <HAL_I2S_MspInit+0x1c0>)
 800441a:	f002 faa5 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800441e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004432:	2300      	movs	r3, #0
 8004434:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004438:	2306      	movs	r3, #6
 800443a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004442:	4619      	mov	r1, r3
 8004444:	4828      	ldr	r0, [pc, #160]	@ (80044e8 <HAL_I2S_MspInit+0x1c4>)
 8004446:	f002 fa8f 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800444a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800444e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004464:	2306      	movs	r3, #6
 8004466:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800446e:	4619      	mov	r1, r3
 8004470:	481e      	ldr	r0, [pc, #120]	@ (80044ec <HAL_I2S_MspInit+0x1c8>)
 8004472:	f002 fa79 	bl	8006968 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8004476:	4b1e      	ldr	r3, [pc, #120]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 8004478:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_I2S_MspInit+0x1d0>)
 800447a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800447c:	4b1c      	ldr	r3, [pc, #112]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 800447e:	223e      	movs	r2, #62	@ 0x3e
 8004480:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004482:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004488:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 800448a:	2200      	movs	r2, #0
 800448c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800448e:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 8004490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004494:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004496:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 8004498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800449c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044a4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80044a6:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044ac:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044b2:	4b0f      	ldr	r3, [pc, #60]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80044b8:	480d      	ldr	r0, [pc, #52]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044ba:	f000 fd93 	bl	8004fe4 <HAL_DMA_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2S_MspInit+0x1a4>
    {
      Error_Handler();
 80044c4:	f7ff ff0e 	bl	80042e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <HAL_I2S_MspInit+0x1cc>)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80044d4:	bf00      	nop
 80044d6:	37f0      	adds	r7, #240	@ 0xf0
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40003c00 	.word	0x40003c00
 80044e0:	58024400 	.word	0x58024400
 80044e4:	58020400 	.word	0x58020400
 80044e8:	58020000 	.word	0x58020000
 80044ec:	58020800 	.word	0x58020800
 80044f0:	24000340 	.word	0x24000340
 80044f4:	40020010 	.word	0x40020010

080044f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0be      	sub	sp, #248	@ 0xf8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004510:	f107 0320 	add.w	r3, r7, #32
 8004514:	22c0      	movs	r2, #192	@ 0xc0
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f00b f84e 	bl	800f5ba <memset>
  if(hspi->Instance==SPI1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a72      	ldr	r2, [pc, #456]	@ (80046ec <HAL_SPI_MspInit+0x1f4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d16b      	bne.n	8004600 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004528:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004534:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800453c:	f107 0320 	add.w	r3, r7, #32
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fd1f 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800454c:	f7ff feca 	bl	80042e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004550:	4b67      	ldr	r3, [pc, #412]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004556:	4a66      	ldr	r2, [pc, #408]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800455c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004560:	4b63      	ldr	r3, [pc, #396]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	4b60      	ldr	r3, [pc, #384]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004574:	4a5e      	ldr	r2, [pc, #376]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800457e:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458c:	4b58      	ldr	r3, [pc, #352]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 800458e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004592:	4a57      	ldr	r2, [pc, #348]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800459c:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 800459e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045aa:	23c0      	movs	r3, #192	@ 0xc0
 80045ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b0:	2302      	movs	r3, #2
 80045b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045bc:	2303      	movs	r3, #3
 80045be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045c2:	2305      	movs	r3, #5
 80045c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4849      	ldr	r0, [pc, #292]	@ (80046f4 <HAL_SPI_MspInit+0x1fc>)
 80045d0:	f002 f9ca 	bl	8006968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045d4:	2308      	movs	r3, #8
 80045d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e6:	2303      	movs	r3, #3
 80045e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ec:	2305      	movs	r3, #5
 80045ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80045f6:	4619      	mov	r1, r3
 80045f8:	483f      	ldr	r0, [pc, #252]	@ (80046f8 <HAL_SPI_MspInit+0x200>)
 80045fa:	f002 f9b5 	bl	8006968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80045fe:	e070      	b.n	80046e2 <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3d      	ldr	r2, [pc, #244]	@ (80046fc <HAL_SPI_MspInit+0x204>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d16b      	bne.n	80046e2 <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800460a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004616:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800461a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800461e:	f107 0320 	add.w	r3, r7, #32
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fcae 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 800462e:	f7ff fe59 	bl	80042e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004632:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004638:	4a2d      	ldr	r2, [pc, #180]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 800463a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800463e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004642:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004650:	4b27      	ldr	r3, [pc, #156]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004656:	4a26      	ldr	r2, [pc, #152]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004660:	4b23      	ldr	r3, [pc, #140]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466e:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004674:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800467e:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <HAL_SPI_MspInit+0x1f8>)
 8004680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800468c:	2306      	movs	r3, #6
 800468e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004692:	2302      	movs	r3, #2
 8004694:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469e:	2303      	movs	r3, #3
 80046a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046a4:	2305      	movs	r3, #5
 80046a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046aa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4813      	ldr	r0, [pc, #76]	@ (8004700 <HAL_SPI_MspInit+0x208>)
 80046b2:	f002 f959 	bl	8006968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046d0:	2305      	movs	r3, #5
 80046d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80046da:	4619      	mov	r1, r3
 80046dc:	4806      	ldr	r0, [pc, #24]	@ (80046f8 <HAL_SPI_MspInit+0x200>)
 80046de:	f002 f943 	bl	8006968 <HAL_GPIO_Init>
}
 80046e2:	bf00      	nop
 80046e4:	37f8      	adds	r7, #248	@ 0xf8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40013000 	.word	0x40013000
 80046f0:	58024400 	.word	0x58024400
 80046f4:	58020000 	.word	0x58020000
 80046f8:	58020400 	.word	0x58020400
 80046fc:	40003800 	.word	0x40003800
 8004700:	58020800 	.word	0x58020800

08004704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <HAL_TIM_Base_MspInit+0x84>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d117      	bne.n	8004746 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004716:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 8004718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 800471e:	f043 0310 	orr.w	r3, r3, #16
 8004722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004726:	4b19      	ldr	r3, [pc, #100]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 8004728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004734:	2200      	movs	r2, #0
 8004736:	2101      	movs	r1, #1
 8004738:	2036      	movs	r0, #54	@ 0x36
 800473a:	f000 fc1e 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800473e:	2036      	movs	r0, #54	@ 0x36
 8004740:	f000 fc35 	bl	8004fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004744:	e01b      	b.n	800477e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a11      	ldr	r2, [pc, #68]	@ (8004790 <HAL_TIM_Base_MspInit+0x8c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d116      	bne.n	800477e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004750:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 8004752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004756:	4a0d      	ldr	r2, [pc, #52]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_TIM_Base_MspInit+0x88>)
 8004762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800476e:	2200      	movs	r2, #0
 8004770:	2103      	movs	r1, #3
 8004772:	2037      	movs	r0, #55	@ 0x37
 8004774:	f000 fc01 	bl	8004f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004778:	2037      	movs	r0, #55	@ 0x37
 800477a:	f000 fc18 	bl	8004fae <HAL_NVIC_EnableIRQ>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40001000 	.word	0x40001000
 800478c:	58024400 	.word	0x58024400
 8004790:	40001400 	.word	0x40001400

08004794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <NMI_Handler+0x4>

0800479c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <HardFault_Handler+0x4>

080047a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <MemManage_Handler+0x4>

080047ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <BusFault_Handler+0x4>

080047b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <UsageFault_Handler+0x4>

080047bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ea:	f000 fa9b 	bl	8004d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80047f8:	4802      	ldr	r0, [pc, #8]	@ (8004804 <DMA1_Stream0_IRQHandler+0x10>)
 80047fa:	f000 ff4f 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	24000340 	.word	0x24000340

08004808 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800480e:	481f      	ldr	r0, [pc, #124]	@ (800488c <TIM6_DAC_IRQHandler+0x84>)
 8004810:	f007 fb5b 	bl	800beca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  hgame.game_timer--;
 8004814:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004816:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004822:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
  sprintf(print_timer, "%d", hgame.game_timer);
 8004826:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004828:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	4918      	ldr	r1, [pc, #96]	@ (8004894 <TIM6_DAC_IRQHandler+0x8c>)
 8004834:	4618      	mov	r0, r3
 8004836:	f00a fe5d 	bl	800f4f4 <siprintf>
  RA8875_text_mode();
 800483a:	f7fc fe5b 	bl	80014f4 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-220, 50);
 800483e:	2132      	movs	r1, #50	@ 0x32
 8004840:	20b4      	movs	r0, #180	@ 0xb4
 8004842:	f7fc fe7c 	bl	800153e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8004846:	211f      	movs	r1, #31
 8004848:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800484c:	f7fc feb5 	bl	80015ba <RA8875_text_color>
  RA8875_text_scale(1);
 8004850:	2001      	movs	r0, #1
 8004852:	f7fc ff0f 	bl	8001674 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc ff34 	bl	80016c8 <RA8875_text_write>
  RA8875_graphic_mode();
 8004860:	f7fc f8a2 	bl	80009a8 <RA8875_graphic_mode>
  if(hgame.game_timer <= 0) {
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004866:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <TIM6_DAC_IRQHandler+0x7c>
	  hgame.game_timer = 60;
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004872:	223c      	movs	r2, #60	@ 0x3c
 8004874:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
	  HAL_TIM_Base_Stop_IT(&htim6);
 8004878:	4804      	ldr	r0, [pc, #16]	@ (800488c <TIM6_DAC_IRQHandler+0x84>)
 800487a:	f007 faf7 	bl	800be6c <HAL_TIM_Base_Stop_IT>
	  end_game(&hgame);
 800487e:	4804      	ldr	r0, [pc, #16]	@ (8004890 <TIM6_DAC_IRQHandler+0x88>)
 8004880:	f7fe fcda 	bl	8003238 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	240004c8 	.word	0x240004c8
 8004890:	24000560 	.word	0x24000560
 8004894:	08011408 	.word	0x08011408

08004898 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800489c:	4828      	ldr	r0, [pc, #160]	@ (8004940 <TIM7_IRQHandler+0xa8>)
 800489e:	f007 fb14 	bl	800beca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 80048a2:	2201      	movs	r2, #1
 80048a4:	2120      	movs	r1, #32
 80048a6:	4827      	ldr	r0, [pc, #156]	@ (8004944 <TIM7_IRQHandler+0xac>)
 80048a8:	f002 fa26 	bl	8006cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 80048ac:	2201      	movs	r2, #1
 80048ae:	2140      	movs	r1, #64	@ 0x40
 80048b0:	4824      	ldr	r0, [pc, #144]	@ (8004944 <TIM7_IRQHandler+0xac>)
 80048b2:	f002 fa21 	bl	8006cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 80048b6:	2201      	movs	r2, #1
 80048b8:	2180      	movs	r1, #128	@ 0x80
 80048ba:	4822      	ldr	r0, [pc, #136]	@ (8004944 <TIM7_IRQHandler+0xac>)
 80048bc:	f002 fa1c 	bl	8006cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048c6:	4820      	ldr	r0, [pc, #128]	@ (8004948 <TIM7_IRQHandler+0xb0>)
 80048c8:	f002 fa16 	bl	8006cf8 <HAL_GPIO_WritePin>

  switch (column) {
 80048cc:	4b1f      	ldr	r3, [pc, #124]	@ (800494c <TIM7_IRQHandler+0xb4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d823      	bhi.n	800491e <TIM7_IRQHandler+0x86>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <TIM7_IRQHandler+0x44>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048f9 	.word	0x080048f9
 80048e4:	08004905 	.word	0x08004905
 80048e8:	08004911 	.word	0x08004911
	  case 0: HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET); break;
 80048ec:	2200      	movs	r2, #0
 80048ee:	2120      	movs	r1, #32
 80048f0:	4814      	ldr	r0, [pc, #80]	@ (8004944 <TIM7_IRQHandler+0xac>)
 80048f2:	f002 fa01 	bl	8006cf8 <HAL_GPIO_WritePin>
 80048f6:	e012      	b.n	800491e <TIM7_IRQHandler+0x86>
	  case 1: HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET); break;
 80048f8:	2200      	movs	r2, #0
 80048fa:	2140      	movs	r1, #64	@ 0x40
 80048fc:	4811      	ldr	r0, [pc, #68]	@ (8004944 <TIM7_IRQHandler+0xac>)
 80048fe:	f002 f9fb 	bl	8006cf8 <HAL_GPIO_WritePin>
 8004902:	e00c      	b.n	800491e <TIM7_IRQHandler+0x86>
	  case 2: HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET); break;
 8004904:	2200      	movs	r2, #0
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	480e      	ldr	r0, [pc, #56]	@ (8004944 <TIM7_IRQHandler+0xac>)
 800490a:	f002 f9f5 	bl	8006cf8 <HAL_GPIO_WritePin>
 800490e:	e006      	b.n	800491e <TIM7_IRQHandler+0x86>
	  case 3: HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET); break;
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004916:	480c      	ldr	r0, [pc, #48]	@ (8004948 <TIM7_IRQHandler+0xb0>)
 8004918:	f002 f9ee 	bl	8006cf8 <HAL_GPIO_WritePin>
 800491c:	bf00      	nop
  }

  column = (column + 1) % 4;
 800491e:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <TIM7_IRQHandler+0xb4>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3301      	adds	r3, #1
 8004926:	425a      	negs	r2, r3
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	f002 0203 	and.w	r2, r2, #3
 8004930:	bf58      	it	pl
 8004932:	4253      	negpl	r3, r2
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <TIM7_IRQHandler+0xb4>)
 8004938:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	24000514 	.word	0x24000514
 8004944:	58020c00 	.word	0x58020c00
 8004948:	58020400 	.word	0x58020400
 800494c:	24000860 	.word	0x24000860

08004950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return 1;
 8004954:	2301      	movs	r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <_kill>:

int _kill(int pid, int sig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800496a:	f00a fe75 	bl	800f658 <__errno>
 800496e:	4603      	mov	r3, r0
 8004970:	2216      	movs	r2, #22
 8004972:	601a      	str	r2, [r3, #0]
  return -1;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_exit>:

void _exit (int status)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004988:	f04f 31ff 	mov.w	r1, #4294967295
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ffe7 	bl	8004960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <_exit+0x12>

08004996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e00a      	b.n	80049be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049a8:	f3af 8000 	nop.w
 80049ac:	4601      	mov	r1, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	60ba      	str	r2, [r7, #8]
 80049b4:	b2ca      	uxtb	r2, r1
 80049b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3301      	adds	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	dbf0      	blt.n	80049a8 <_read+0x12>
  }

  return len;
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e009      	b.n	80049f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	60ba      	str	r2, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3301      	adds	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	dbf1      	blt.n	80049e2 <_write+0x12>
  }
  return len;
 80049fe:	687b      	ldr	r3, [r7, #4]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_close>:

int _close(int file)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a30:	605a      	str	r2, [r3, #4]
  return 0;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_isatty>:

int _isatty(int file)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a48:	2301      	movs	r3, #1
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a78:	4a14      	ldr	r2, [pc, #80]	@ (8004acc <_sbrk+0x5c>)
 8004a7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <_sbrk+0x60>)
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a84:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <_sbrk+0x64>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <_sbrk+0x64>)
 8004a8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <_sbrk+0x68>)
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a92:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <_sbrk+0x64>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d207      	bcs.n	8004ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004aa0:	f00a fdda 	bl	800f658 <__errno>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	220c      	movs	r2, #12
 8004aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	e009      	b.n	8004ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <_sbrk+0x64>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ab6:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	4a05      	ldr	r2, [pc, #20]	@ (8004ad4 <_sbrk+0x64>)
 8004ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	24080000 	.word	0x24080000
 8004ad0:	00000400 	.word	0x00000400
 8004ad4:	24000864 	.word	0x24000864
 8004ad8:	24000a00 	.word	0x24000a00

08004adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ae0:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <SystemInit+0xe4>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	4a36      	ldr	r2, [pc, #216]	@ (8004bc0 <SystemInit+0xe4>)
 8004ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004af0:	4b34      	ldr	r3, [pc, #208]	@ (8004bc4 <SystemInit+0xe8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d807      	bhi.n	8004b0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004afc:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <SystemInit+0xe8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f023 030f 	bic.w	r3, r3, #15
 8004b04:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc4 <SystemInit+0xe8>)
 8004b06:	f043 0307 	orr.w	r3, r3, #7
 8004b0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc8 <SystemInit+0xec>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <SystemInit+0xec>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b18:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <SystemInit+0xec>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <SystemInit+0xec>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4929      	ldr	r1, [pc, #164]	@ (8004bc8 <SystemInit+0xec>)
 8004b24:	4b29      	ldr	r3, [pc, #164]	@ (8004bcc <SystemInit+0xf0>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b2a:	4b26      	ldr	r3, [pc, #152]	@ (8004bc4 <SystemInit+0xe8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004b36:	4b23      	ldr	r3, [pc, #140]	@ (8004bc4 <SystemInit+0xe8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 030f 	bic.w	r3, r3, #15
 8004b3e:	4a21      	ldr	r2, [pc, #132]	@ (8004bc4 <SystemInit+0xe8>)
 8004b40:	f043 0307 	orr.w	r3, r3, #7
 8004b44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004b46:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <SystemInit+0xec>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc8 <SystemInit+0xec>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004b52:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <SystemInit+0xec>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <SystemInit+0xec>)
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <SystemInit+0xf4>)
 8004b5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <SystemInit+0xec>)
 8004b60:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd4 <SystemInit+0xf8>)
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004b64:	4b18      	ldr	r3, [pc, #96]	@ (8004bc8 <SystemInit+0xec>)
 8004b66:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <SystemInit+0xfc>)
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004b6a:	4b17      	ldr	r3, [pc, #92]	@ (8004bc8 <SystemInit+0xec>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <SystemInit+0xec>)
 8004b72:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <SystemInit+0xfc>)
 8004b74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <SystemInit+0xec>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <SystemInit+0xec>)
 8004b7e:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <SystemInit+0xfc>)
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <SystemInit+0xec>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <SystemInit+0xec>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <SystemInit+0xec>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <SystemInit+0xec>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <SystemInit+0x100>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <SystemInit+0x104>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ba6:	d202      	bcs.n	8004bae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <SystemInit+0x108>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004bae:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <SystemInit+0x10c>)
 8004bb0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004bb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00
 8004bc4:	52002000 	.word	0x52002000
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8004bd0:	02020200 	.word	0x02020200
 8004bd4:	01ff0000 	.word	0x01ff0000
 8004bd8:	01010280 	.word	0x01010280
 8004bdc:	5c001000 	.word	0x5c001000
 8004be0:	ffff0000 	.word	0xffff0000
 8004be4:	51008108 	.word	0x51008108
 8004be8:	52004000 	.word	0x52004000

08004bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bf0:	f7ff ff74 	bl	8004adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bf4:	480c      	ldr	r0, [pc, #48]	@ (8004c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bf6:	490d      	ldr	r1, [pc, #52]	@ (8004c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bfc:	e002      	b.n	8004c04 <LoopCopyDataInit>

08004bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c02:	3304      	adds	r3, #4

08004c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c08:	d3f9      	bcc.n	8004bfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c10:	e001      	b.n	8004c16 <LoopFillZerobss>

08004c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c14:	3204      	adds	r2, #4

08004c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c18:	d3fb      	bcc.n	8004c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c1a:	f00a fd23 	bl	800f664 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 8004c1e:	f7ff f829 	bl	8003c74 <main>
  bx  lr
 8004c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004c28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004c2c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8004c30:	080117b0 	.word	0x080117b0
  ldr r2, =_sbss
 8004c34:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8004c38:	24000a00 	.word	0x24000a00

08004c3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c3c:	e7fe      	b.n	8004c3c <ADC3_IRQHandler>
	...

08004c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c46:	2003      	movs	r0, #3
 8004c48:	f000 f98c 	bl	8004f64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c4c:	f002 ffda 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b15      	ldr	r3, [pc, #84]	@ (8004ca8 <HAL_Init+0x68>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4913      	ldr	r1, [pc, #76]	@ (8004cac <HAL_Init+0x6c>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <HAL_Init+0x68>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <HAL_Init+0x6c>)
 8004c74:	5cd3      	ldrb	r3, [r2, r3]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb0 <HAL_Init+0x70>)
 8004c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c84:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb4 <HAL_Init+0x74>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	f000 f814 	bl	8004cb8 <HAL_InitTick>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e002      	b.n	8004ca0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c9a:	f7ff fb29 	bl	80042f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	08011450 	.word	0x08011450
 8004cb0:	24000004 	.word	0x24000004
 8004cb4:	24000000 	.word	0x24000000

08004cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004cc0:	4b15      	ldr	r3, [pc, #84]	@ (8004d18 <HAL_InitTick+0x60>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e021      	b.n	8004d10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ccc:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <HAL_InitTick+0x64>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <HAL_InitTick+0x60>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f971 	bl	8004fca <HAL_SYSTICK_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e00e      	b.n	8004d10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d80a      	bhi.n	8004d0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004d00:	f000 f93b 	bl	8004f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d04:	4a06      	ldr	r2, [pc, #24]	@ (8004d20 <HAL_InitTick+0x68>)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	2400000c 	.word	0x2400000c
 8004d1c:	24000000 	.word	0x24000000
 8004d20:	24000008 	.word	0x24000008

08004d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <HAL_IncTick+0x20>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <HAL_IncTick+0x24>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4413      	add	r3, r2
 8004d34:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <HAL_IncTick+0x24>)
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2400000c 	.word	0x2400000c
 8004d48:	24000868 	.word	0x24000868

08004d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_GetTick+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	24000868 	.word	0x24000868

08004d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7ff ffee 	bl	8004d4c <HAL_GetTick>
 8004d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d005      	beq.n	8004d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <HAL_Delay+0x44>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d8a:	bf00      	nop
 8004d8c:	f7ff ffde 	bl	8004d4c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d8f7      	bhi.n	8004d8c <HAL_Delay+0x28>
  {
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2400000c 	.word	0x2400000c

08004dac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004db0:	4b03      	ldr	r3, [pc, #12]	@ (8004dc0 <HAL_GetREVID+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0c1b      	lsrs	r3, r3, #16
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	5c001000 	.word	0x5c001000

08004dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <__NVIC_SetPriorityGrouping+0x40>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <__NVIC_SetPriorityGrouping+0x40>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00
 8004e08:	05fa0000 	.word	0x05fa0000

08004e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e10:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <__NVIC_GetPriorityGrouping+0x18>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0307 	and.w	r3, r3, #7
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db0b      	blt.n	8004e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4907      	ldr	r1, [pc, #28]	@ (8004e60 <__NVIC_EnableIRQ+0x38>)
 8004e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2001      	movs	r0, #1
 8004e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e100 	.word	0xe000e100

08004e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db0a      	blt.n	8004e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	490c      	ldr	r1, [pc, #48]	@ (8004eb0 <__NVIC_SetPriority+0x4c>)
 8004e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e8c:	e00a      	b.n	8004ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4908      	ldr	r1, [pc, #32]	@ (8004eb4 <__NVIC_SetPriority+0x50>)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	761a      	strb	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000e100 	.word	0xe000e100
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	@ 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf28      	it	cs
 8004ed6:	2304      	movcs	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d902      	bls.n	8004ee8 <NVIC_EncodePriority+0x30>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3b03      	subs	r3, #3
 8004ee6:	e000      	b.n	8004eea <NVIC_EncodePriority+0x32>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	401a      	ands	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43d9      	mvns	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	4313      	orrs	r3, r2
         );
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	@ 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f30:	d301      	bcc.n	8004f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f32:	2301      	movs	r3, #1
 8004f34:	e00f      	b.n	8004f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f36:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <SysTick_Config+0x40>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3e:	210f      	movs	r1, #15
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	f7ff ff8e 	bl	8004e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <SysTick_Config+0x40>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <SysTick_Config+0x40>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff29 	bl	8004dc4 <__NVIC_SetPriorityGrouping>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4603      	mov	r3, r0
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f88:	f7ff ff40 	bl	8004e0c <__NVIC_GetPriorityGrouping>
 8004f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	f7ff ff90 	bl	8004eb8 <NVIC_EncodePriority>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff5f 	bl	8004e64 <__NVIC_SetPriority>
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff33 	bl	8004e28 <__NVIC_EnableIRQ>
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ffa4 	bl	8004f20 <SysTick_Config>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fec:	f7ff feae 	bl	8004d4c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e316      	b.n	800562a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a66      	ldr	r2, [pc, #408]	@ (800519c <HAL_DMA_Init+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d04a      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_DMA_Init+0x1bc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d045      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a63      	ldr	r2, [pc, #396]	@ (80051a4 <HAL_DMA_Init+0x1c0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d040      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a62      	ldr	r2, [pc, #392]	@ (80051a8 <HAL_DMA_Init+0x1c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d03b      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a60      	ldr	r2, [pc, #384]	@ (80051ac <HAL_DMA_Init+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d036      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5f      	ldr	r2, [pc, #380]	@ (80051b0 <HAL_DMA_Init+0x1cc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d031      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5d      	ldr	r2, [pc, #372]	@ (80051b4 <HAL_DMA_Init+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02c      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5c      	ldr	r2, [pc, #368]	@ (80051b8 <HAL_DMA_Init+0x1d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d027      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5a      	ldr	r2, [pc, #360]	@ (80051bc <HAL_DMA_Init+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a59      	ldr	r2, [pc, #356]	@ (80051c0 <HAL_DMA_Init+0x1dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a57      	ldr	r2, [pc, #348]	@ (80051c4 <HAL_DMA_Init+0x1e0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a56      	ldr	r2, [pc, #344]	@ (80051c8 <HAL_DMA_Init+0x1e4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a54      	ldr	r2, [pc, #336]	@ (80051cc <HAL_DMA_Init+0x1e8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a53      	ldr	r2, [pc, #332]	@ (80051d0 <HAL_DMA_Init+0x1ec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a51      	ldr	r2, [pc, #324]	@ (80051d4 <HAL_DMA_Init+0x1f0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a50      	ldr	r2, [pc, #320]	@ (80051d8 <HAL_DMA_Init+0x1f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_DMA_Init+0xbc>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_DMA_Init+0xbe>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 813b 	beq.w	800531e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a37      	ldr	r2, [pc, #220]	@ (800519c <HAL_DMA_Init+0x1b8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04a      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a36      	ldr	r2, [pc, #216]	@ (80051a0 <HAL_DMA_Init+0x1bc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d045      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <HAL_DMA_Init+0x1c0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d040      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <HAL_DMA_Init+0x1c4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d03b      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a31      	ldr	r2, [pc, #196]	@ (80051ac <HAL_DMA_Init+0x1c8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d036      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a30      	ldr	r2, [pc, #192]	@ (80051b0 <HAL_DMA_Init+0x1cc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d031      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2e      	ldr	r2, [pc, #184]	@ (80051b4 <HAL_DMA_Init+0x1d0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02c      	beq.n	8005158 <HAL_DMA_Init+0x174>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <HAL_DMA_Init+0x1d4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d027      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <HAL_DMA_Init+0x1d8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d022      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <HAL_DMA_Init+0x1dc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01d      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a28      	ldr	r2, [pc, #160]	@ (80051c4 <HAL_DMA_Init+0x1e0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a27      	ldr	r2, [pc, #156]	@ (80051c8 <HAL_DMA_Init+0x1e4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a25      	ldr	r2, [pc, #148]	@ (80051cc <HAL_DMA_Init+0x1e8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a24      	ldr	r2, [pc, #144]	@ (80051d0 <HAL_DMA_Init+0x1ec>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a22      	ldr	r2, [pc, #136]	@ (80051d4 <HAL_DMA_Init+0x1f0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <HAL_DMA_Init+0x1f4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <HAL_DMA_Init+0x186>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e007      	b.n	800517a <HAL_DMA_Init+0x196>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800517a:	e02f      	b.n	80051dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517c:	f7ff fde6 	bl	8004d4c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b05      	cmp	r3, #5
 8005188:	d928      	bls.n	80051dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e246      	b.n	800562a <HAL_DMA_Init+0x646>
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1c8      	bne.n	800517c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4b83      	ldr	r3, [pc, #524]	@ (8005404 <HAL_DMA_Init+0x420>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005202:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	2b04      	cmp	r3, #4
 800522e:	d107      	bne.n	8005240 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	4313      	orrs	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005240:	4b71      	ldr	r3, [pc, #452]	@ (8005408 <HAL_DMA_Init+0x424>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b71      	ldr	r3, [pc, #452]	@ (800540c <HAL_DMA_Init+0x428>)
 8005246:	4013      	ands	r3, r2
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524c:	d328      	bcc.n	80052a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b28      	cmp	r3, #40	@ 0x28
 8005254:	d903      	bls.n	800525e <HAL_DMA_Init+0x27a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b2e      	cmp	r3, #46	@ 0x2e
 800525c:	d917      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b3e      	cmp	r3, #62	@ 0x3e
 8005264:	d903      	bls.n	800526e <HAL_DMA_Init+0x28a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b42      	cmp	r3, #66	@ 0x42
 800526c:	d90f      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b46      	cmp	r3, #70	@ 0x46
 8005274:	d903      	bls.n	800527e <HAL_DMA_Init+0x29a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b48      	cmp	r3, #72	@ 0x48
 800527c:	d907      	bls.n	800528e <HAL_DMA_Init+0x2aa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b4e      	cmp	r3, #78	@ 0x4e
 8005284:	d905      	bls.n	8005292 <HAL_DMA_Init+0x2ae>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b52      	cmp	r3, #82	@ 0x52
 800528c:	d801      	bhi.n	8005292 <HAL_DMA_Init+0x2ae>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_DMA_Init+0x2b0>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800529e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d117      	bne.n	80052fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 f9b9 	bl	8006654 <DMA_CheckFifoParam>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	@ 0x40
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e197      	b.n	800562a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 f8f4 	bl	80064f0 <DMA_CalcBaseAndBitshift>
 8005308:	4603      	mov	r3, r0
 800530a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	223f      	movs	r2, #63	@ 0x3f
 8005316:	409a      	lsls	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e0cd      	b.n	80054ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3b      	ldr	r2, [pc, #236]	@ (8005410 <HAL_DMA_Init+0x42c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a39      	ldr	r2, [pc, #228]	@ (8005414 <HAL_DMA_Init+0x430>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a38      	ldr	r2, [pc, #224]	@ (8005418 <HAL_DMA_Init+0x434>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Init+0x38a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a36      	ldr	r2, [pc, #216]	@ (800541c <HAL_DMA_Init+0x438>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a35      	ldr	r2, [pc, #212]	@ (8005420 <HAL_DMA_Init+0x43c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a33      	ldr	r2, [pc, #204]	@ (8005424 <HAL_DMA_Init+0x440>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Init+0x38a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a32      	ldr	r2, [pc, #200]	@ (8005428 <HAL_DMA_Init+0x444>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Init+0x38a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a30      	ldr	r2, [pc, #192]	@ (800542c <HAL_DMA_Init+0x448>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_DMA_Init+0x38e>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_DMA_Init+0x390>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8097 	beq.w	80054a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a24      	ldr	r2, [pc, #144]	@ (8005410 <HAL_DMA_Init+0x42c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d021      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	@ (8005414 <HAL_DMA_Init+0x430>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01c      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	@ (8005418 <HAL_DMA_Init+0x434>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d017      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	@ (800541c <HAL_DMA_Init+0x438>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d012      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005420 <HAL_DMA_Init+0x43c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00d      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005424 <HAL_DMA_Init+0x440>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d008      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_DMA_Init+0x444>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <HAL_DMA_Init+0x3e4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a19      	ldr	r2, [pc, #100]	@ (800542c <HAL_DMA_Init+0x448>)
 80053c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <HAL_DMA_Init+0x44c>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d021      	beq.n	8005434 <HAL_DMA_Init+0x450>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b80      	cmp	r3, #128	@ 0x80
 80053f6:	d102      	bne.n	80053fe <HAL_DMA_Init+0x41a>
 80053f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80053fc:	e01b      	b.n	8005436 <HAL_DMA_Init+0x452>
 80053fe:	2300      	movs	r3, #0
 8005400:	e019      	b.n	8005436 <HAL_DMA_Init+0x452>
 8005402:	bf00      	nop
 8005404:	fe10803f 	.word	0xfe10803f
 8005408:	5c001000 	.word	0x5c001000
 800540c:	ffff0000 	.word	0xffff0000
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494
 8005430:	fffe000f 	.word	0xfffe000f
 8005434:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800543c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800544c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800545c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005464:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b6e      	ldr	r3, [pc, #440]	@ (8005634 <HAL_DMA_Init+0x650>)
 800547c:	4413      	add	r3, r2
 800547e:	4a6e      	ldr	r2, [pc, #440]	@ (8005638 <HAL_DMA_Init+0x654>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f82f 	bl	80064f0 <DMA_CalcBaseAndBitshift>
 8005492:	4603      	mov	r3, r0
 8005494:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2201      	movs	r2, #1
 80054a0:	409a      	lsls	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e008      	b.n	80054ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2240      	movs	r2, #64	@ 0x40
 80054ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0b7      	b.n	800562a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5f      	ldr	r2, [pc, #380]	@ (800563c <HAL_DMA_Init+0x658>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d072      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005640 <HAL_DMA_Init+0x65c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d06d      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005644 <HAL_DMA_Init+0x660>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d068      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005648 <HAL_DMA_Init+0x664>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d063      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a59      	ldr	r2, [pc, #356]	@ (800564c <HAL_DMA_Init+0x668>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d05e      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_DMA_Init+0x66c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d059      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a56      	ldr	r2, [pc, #344]	@ (8005654 <HAL_DMA_Init+0x670>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d054      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a54      	ldr	r2, [pc, #336]	@ (8005658 <HAL_DMA_Init+0x674>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04f      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a53      	ldr	r2, [pc, #332]	@ (800565c <HAL_DMA_Init+0x678>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a51      	ldr	r2, [pc, #324]	@ (8005660 <HAL_DMA_Init+0x67c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a50      	ldr	r2, [pc, #320]	@ (8005664 <HAL_DMA_Init+0x680>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	@ (8005668 <HAL_DMA_Init+0x684>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4d      	ldr	r2, [pc, #308]	@ (800566c <HAL_DMA_Init+0x688>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4b      	ldr	r2, [pc, #300]	@ (8005670 <HAL_DMA_Init+0x68c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	@ (8005674 <HAL_DMA_Init+0x690>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a48      	ldr	r2, [pc, #288]	@ (8005678 <HAL_DMA_Init+0x694>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a47      	ldr	r2, [pc, #284]	@ (800567c <HAL_DMA_Init+0x698>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a45      	ldr	r2, [pc, #276]	@ (8005680 <HAL_DMA_Init+0x69c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a44      	ldr	r2, [pc, #272]	@ (8005684 <HAL_DMA_Init+0x6a0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a42      	ldr	r2, [pc, #264]	@ (8005688 <HAL_DMA_Init+0x6a4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a41      	ldr	r2, [pc, #260]	@ (800568c <HAL_DMA_Init+0x6a8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3f      	ldr	r2, [pc, #252]	@ (8005690 <HAL_DMA_Init+0x6ac>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3e      	ldr	r2, [pc, #248]	@ (8005694 <HAL_DMA_Init+0x6b0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005698 <HAL_DMA_Init+0x6b4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_Init+0x5ca>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_DMA_Init+0x5cc>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d032      	beq.n	800561a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 f8c9 	bl	800674c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d102      	bne.n	80055c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_DMA_Init+0x624>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d80c      	bhi.n	8005608 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f946 	bl	8006880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	e008      	b.n	800561a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	a7fdabf8 	.word	0xa7fdabf8
 8005638:	cccccccd 	.word	0xcccccccd
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
 800567c:	58025408 	.word	0x58025408
 8005680:	5802541c 	.word	0x5802541c
 8005684:	58025430 	.word	0x58025430
 8005688:	58025444 	.word	0x58025444
 800568c:	58025458 	.word	0x58025458
 8005690:	5802546c 	.word	0x5802546c
 8005694:	58025480 	.word	0x58025480
 8005698:	58025494 	.word	0x58025494

0800569c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a8:	4b67      	ldr	r3, [pc, #412]	@ (8005848 <HAL_DMA_IRQHandler+0x1ac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a67      	ldr	r2, [pc, #412]	@ (800584c <HAL_DMA_IRQHandler+0x1b0>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a9b      	lsrs	r3, r3, #10
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005850 <HAL_DMA_IRQHandler+0x1b4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d04a      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005854 <HAL_DMA_IRQHandler+0x1b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d045      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005858 <HAL_DMA_IRQHandler+0x1bc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d040      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <HAL_DMA_IRQHandler+0x1c0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d03b      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a59      	ldr	r2, [pc, #356]	@ (8005860 <HAL_DMA_IRQHandler+0x1c4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d036      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a57      	ldr	r2, [pc, #348]	@ (8005864 <HAL_DMA_IRQHandler+0x1c8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d031      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a56      	ldr	r2, [pc, #344]	@ (8005868 <HAL_DMA_IRQHandler+0x1cc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d02c      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a54      	ldr	r2, [pc, #336]	@ (800586c <HAL_DMA_IRQHandler+0x1d0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d027      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a53      	ldr	r2, [pc, #332]	@ (8005870 <HAL_DMA_IRQHandler+0x1d4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a51      	ldr	r2, [pc, #324]	@ (8005874 <HAL_DMA_IRQHandler+0x1d8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01d      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a50      	ldr	r2, [pc, #320]	@ (8005878 <HAL_DMA_IRQHandler+0x1dc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a4e      	ldr	r2, [pc, #312]	@ (800587c <HAL_DMA_IRQHandler+0x1e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4d      	ldr	r2, [pc, #308]	@ (8005880 <HAL_DMA_IRQHandler+0x1e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4b      	ldr	r2, [pc, #300]	@ (8005884 <HAL_DMA_IRQHandler+0x1e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4a      	ldr	r2, [pc, #296]	@ (8005888 <HAL_DMA_IRQHandler+0x1ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_DMA_IRQHandler+0xd2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a48      	ldr	r2, [pc, #288]	@ (800588c <HAL_DMA_IRQHandler+0x1f0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d101      	bne.n	8005772 <HAL_DMA_IRQHandler+0xd6>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_DMA_IRQHandler+0xd8>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 842b 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2208      	movs	r2, #8
 8005784:	409a      	lsls	r2, r3
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a2 	beq.w	80058d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2e      	ldr	r2, [pc, #184]	@ (8005850 <HAL_DMA_IRQHandler+0x1b4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d04a      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2d      	ldr	r2, [pc, #180]	@ (8005854 <HAL_DMA_IRQHandler+0x1b8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d045      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005858 <HAL_DMA_IRQHandler+0x1bc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d040      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <HAL_DMA_IRQHandler+0x1c0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d03b      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <HAL_DMA_IRQHandler+0x1c4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d036      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a27      	ldr	r2, [pc, #156]	@ (8005864 <HAL_DMA_IRQHandler+0x1c8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d031      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a25      	ldr	r2, [pc, #148]	@ (8005868 <HAL_DMA_IRQHandler+0x1cc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d02c      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a24      	ldr	r2, [pc, #144]	@ (800586c <HAL_DMA_IRQHandler+0x1d0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d027      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a22      	ldr	r2, [pc, #136]	@ (8005870 <HAL_DMA_IRQHandler+0x1d4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d022      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	@ (8005874 <HAL_DMA_IRQHandler+0x1d8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01d      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005878 <HAL_DMA_IRQHandler+0x1dc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d018      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <HAL_DMA_IRQHandler+0x1e0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	@ (8005880 <HAL_DMA_IRQHandler+0x1e4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00e      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	@ (8005884 <HAL_DMA_IRQHandler+0x1e8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <HAL_DMA_IRQHandler+0x1ec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_DMA_IRQHandler+0x194>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a18      	ldr	r2, [pc, #96]	@ (800588c <HAL_DMA_IRQHandler+0x1f0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d12f      	bne.n	8005890 <HAL_DMA_IRQHandler+0x1f4>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e02e      	b.n	80058a4 <HAL_DMA_IRQHandler+0x208>
 8005846:	bf00      	nop
 8005848:	24000000 	.word	0x24000000
 800584c:	1b4e81b5 	.word	0x1b4e81b5
 8005850:	40020010 	.word	0x40020010
 8005854:	40020028 	.word	0x40020028
 8005858:	40020040 	.word	0x40020040
 800585c:	40020058 	.word	0x40020058
 8005860:	40020070 	.word	0x40020070
 8005864:	40020088 	.word	0x40020088
 8005868:	400200a0 	.word	0x400200a0
 800586c:	400200b8 	.word	0x400200b8
 8005870:	40020410 	.word	0x40020410
 8005874:	40020428 	.word	0x40020428
 8005878:	40020440 	.word	0x40020440
 800587c:	40020458 	.word	0x40020458
 8005880:	40020470 	.word	0x40020470
 8005884:	40020488 	.word	0x40020488
 8005888:	400204a0 	.word	0x400204a0
 800588c:	400204b8 	.word	0x400204b8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2208      	movs	r2, #8
 80058c2:	409a      	lsls	r2, r3
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d06e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a69      	ldr	r2, [pc, #420]	@ (8005a94 <HAL_DMA_IRQHandler+0x3f8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d04a      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a67      	ldr	r2, [pc, #412]	@ (8005a98 <HAL_DMA_IRQHandler+0x3fc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d045      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a66      	ldr	r2, [pc, #408]	@ (8005a9c <HAL_DMA_IRQHandler+0x400>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d040      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a64      	ldr	r2, [pc, #400]	@ (8005aa0 <HAL_DMA_IRQHandler+0x404>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d03b      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a63      	ldr	r2, [pc, #396]	@ (8005aa4 <HAL_DMA_IRQHandler+0x408>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d036      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a61      	ldr	r2, [pc, #388]	@ (8005aa8 <HAL_DMA_IRQHandler+0x40c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d031      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a60      	ldr	r2, [pc, #384]	@ (8005aac <HAL_DMA_IRQHandler+0x410>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d02c      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a5e      	ldr	r2, [pc, #376]	@ (8005ab0 <HAL_DMA_IRQHandler+0x414>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d027      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab4 <HAL_DMA_IRQHandler+0x418>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a5b      	ldr	r2, [pc, #364]	@ (8005ab8 <HAL_DMA_IRQHandler+0x41c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <HAL_DMA_IRQHandler+0x420>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a58      	ldr	r2, [pc, #352]	@ (8005ac0 <HAL_DMA_IRQHandler+0x424>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a57      	ldr	r2, [pc, #348]	@ (8005ac4 <HAL_DMA_IRQHandler+0x428>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a55      	ldr	r2, [pc, #340]	@ (8005ac8 <HAL_DMA_IRQHandler+0x42c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a54      	ldr	r2, [pc, #336]	@ (8005acc <HAL_DMA_IRQHandler+0x430>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_DMA_IRQHandler+0x2ee>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a52      	ldr	r2, [pc, #328]	@ (8005ad0 <HAL_DMA_IRQHandler+0x434>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10a      	bne.n	80059a0 <HAL_DMA_IRQHandler+0x304>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e003      	b.n	80059a8 <HAL_DMA_IRQHandler+0x30c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c0:	f043 0202 	orr.w	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2204      	movs	r2, #4
 80059d2:	409a      	lsls	r2, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 808f 	beq.w	8005afc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a94 <HAL_DMA_IRQHandler+0x3f8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04a      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <HAL_DMA_IRQHandler+0x3fc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d045      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a29      	ldr	r2, [pc, #164]	@ (8005a9c <HAL_DMA_IRQHandler+0x400>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d040      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a27      	ldr	r2, [pc, #156]	@ (8005aa0 <HAL_DMA_IRQHandler+0x404>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03b      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a26      	ldr	r2, [pc, #152]	@ (8005aa4 <HAL_DMA_IRQHandler+0x408>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d036      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a24      	ldr	r2, [pc, #144]	@ (8005aa8 <HAL_DMA_IRQHandler+0x40c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d031      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a23      	ldr	r2, [pc, #140]	@ (8005aac <HAL_DMA_IRQHandler+0x410>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d02c      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a21      	ldr	r2, [pc, #132]	@ (8005ab0 <HAL_DMA_IRQHandler+0x414>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <HAL_DMA_IRQHandler+0x418>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab8 <HAL_DMA_IRQHandler+0x41c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01d      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <HAL_DMA_IRQHandler+0x420>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_DMA_IRQHandler+0x424>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <HAL_DMA_IRQHandler+0x428>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_DMA_IRQHandler+0x42c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_DMA_IRQHandler+0x430>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3e2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <HAL_DMA_IRQHandler+0x434>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d12a      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x438>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e023      	b.n	8005adc <HAL_DMA_IRQHandler+0x440>
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2204      	movs	r2, #4
 8005aea:	409a      	lsls	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2210      	movs	r2, #16
 8005b06:	409a      	lsls	r2, r3
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80a6 	beq.w	8005c5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a85      	ldr	r2, [pc, #532]	@ (8005d2c <HAL_DMA_IRQHandler+0x690>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d04a      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a83      	ldr	r2, [pc, #524]	@ (8005d30 <HAL_DMA_IRQHandler+0x694>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d045      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a82      	ldr	r2, [pc, #520]	@ (8005d34 <HAL_DMA_IRQHandler+0x698>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d040      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a80      	ldr	r2, [pc, #512]	@ (8005d38 <HAL_DMA_IRQHandler+0x69c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d03b      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d3c <HAL_DMA_IRQHandler+0x6a0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d036      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a7d      	ldr	r2, [pc, #500]	@ (8005d40 <HAL_DMA_IRQHandler+0x6a4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d031      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7c      	ldr	r2, [pc, #496]	@ (8005d44 <HAL_DMA_IRQHandler+0x6a8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d02c      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005d48 <HAL_DMA_IRQHandler+0x6ac>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d027      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a79      	ldr	r2, [pc, #484]	@ (8005d4c <HAL_DMA_IRQHandler+0x6b0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d022      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a77      	ldr	r2, [pc, #476]	@ (8005d50 <HAL_DMA_IRQHandler+0x6b4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01d      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a76      	ldr	r2, [pc, #472]	@ (8005d54 <HAL_DMA_IRQHandler+0x6b8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a74      	ldr	r2, [pc, #464]	@ (8005d58 <HAL_DMA_IRQHandler+0x6bc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a73      	ldr	r2, [pc, #460]	@ (8005d5c <HAL_DMA_IRQHandler+0x6c0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a71      	ldr	r2, [pc, #452]	@ (8005d60 <HAL_DMA_IRQHandler+0x6c4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a70      	ldr	r2, [pc, #448]	@ (8005d64 <HAL_DMA_IRQHandler+0x6c8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x516>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6e      	ldr	r2, [pc, #440]	@ (8005d68 <HAL_DMA_IRQHandler+0x6cc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x52c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e009      	b.n	8005bdc <HAL_DMA_IRQHandler+0x540>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03e      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2210      	movs	r2, #16
 8005bea:	409a      	lsls	r2, r3
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d024      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
 8005c1c:	e01f      	b.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e016      	b.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0208 	bic.w	r2, r2, #8
 8005c4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2220      	movs	r2, #32
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8110 	beq.w	8005e94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	@ (8005d2c <HAL_DMA_IRQHandler+0x690>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <HAL_DMA_IRQHandler+0x694>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a29      	ldr	r2, [pc, #164]	@ (8005d34 <HAL_DMA_IRQHandler+0x698>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <HAL_DMA_IRQHandler+0x69c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <HAL_DMA_IRQHandler+0x6a0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a25      	ldr	r2, [pc, #148]	@ (8005d40 <HAL_DMA_IRQHandler+0x6a4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	@ (8005d44 <HAL_DMA_IRQHandler+0x6a8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <HAL_DMA_IRQHandler+0x6ac>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <HAL_DMA_IRQHandler+0x6b0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_DMA_IRQHandler+0x6b4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <HAL_DMA_IRQHandler+0x6b8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <HAL_DMA_IRQHandler+0x6bc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <HAL_DMA_IRQHandler+0x6c0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <HAL_DMA_IRQHandler+0x6c4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <HAL_DMA_IRQHandler+0x6c8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x678>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	@ (8005d68 <HAL_DMA_IRQHandler+0x6cc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d12b      	bne.n	8005d6c <HAL_DMA_IRQHandler+0x6d0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e02a      	b.n	8005d80 <HAL_DMA_IRQHandler+0x6e4>
 8005d2a:	bf00      	nop
 8005d2c:	40020010 	.word	0x40020010
 8005d30:	40020028 	.word	0x40020028
 8005d34:	40020040 	.word	0x40020040
 8005d38:	40020058 	.word	0x40020058
 8005d3c:	40020070 	.word	0x40020070
 8005d40:	40020088 	.word	0x40020088
 8005d44:	400200a0 	.word	0x400200a0
 8005d48:	400200b8 	.word	0x400200b8
 8005d4c:	40020410 	.word	0x40020410
 8005d50:	40020428 	.word	0x40020428
 8005d54:	40020440 	.word	0x40020440
 8005d58:	40020458 	.word	0x40020458
 8005d5c:	40020470 	.word	0x40020470
 8005d60:	40020488 	.word	0x40020488
 8005d64:	400204a0 	.word	0x400204a0
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8087 	beq.w	8005e94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2220      	movs	r2, #32
 8005d90:	409a      	lsls	r2, r3
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d139      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0216 	bic.w	r2, r2, #22
 8005db0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <HAL_DMA_IRQHandler+0x736>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0208 	bic.w	r2, r2, #8
 8005de0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	223f      	movs	r2, #63	@ 0x3f
 8005dec:	409a      	lsls	r2, r3
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 834a 	beq.w	80064a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
          }
          return;
 8005e14:	e344      	b.n	80064a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e027      	b.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d023      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	e01e      	b.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0210 	bic.w	r2, r2, #16
 8005e72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8306 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8088 	beq.w	8005fbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80060a4 <HAL_DMA_IRQHandler+0xa08>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a79      	ldr	r2, [pc, #484]	@ (80060a8 <HAL_DMA_IRQHandler+0xa0c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d045      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_DMA_IRQHandler+0xa10>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d040      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a76      	ldr	r2, [pc, #472]	@ (80060b0 <HAL_DMA_IRQHandler+0xa14>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03b      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <HAL_DMA_IRQHandler+0xa18>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d036      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a73      	ldr	r2, [pc, #460]	@ (80060b8 <HAL_DMA_IRQHandler+0xa1c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d031      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a71      	ldr	r2, [pc, #452]	@ (80060bc <HAL_DMA_IRQHandler+0xa20>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02c      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	@ (80060c0 <HAL_DMA_IRQHandler+0xa24>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d027      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <HAL_DMA_IRQHandler+0xa28>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <HAL_DMA_IRQHandler+0xa2c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d01d      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80060cc <HAL_DMA_IRQHandler+0xa30>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <HAL_DMA_IRQHandler+0xa34>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	@ (80060d4 <HAL_DMA_IRQHandler+0xa38>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a67      	ldr	r2, [pc, #412]	@ (80060d8 <HAL_DMA_IRQHandler+0xa3c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a65      	ldr	r2, [pc, #404]	@ (80060dc <HAL_DMA_IRQHandler+0xa40>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x8b8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a64      	ldr	r2, [pc, #400]	@ (80060e0 <HAL_DMA_IRQHandler+0xa44>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <HAL_DMA_IRQHandler+0x8ca>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e007      	b.n	8005f76 <HAL_DMA_IRQHandler+0x8da>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d307      	bcc.n	8005f92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f2      	bne.n	8005f76 <HAL_DMA_IRQHandler+0x8da>
 8005f90:	e000      	b.n	8005f94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005faa:	e003      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8272 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	e26c      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a43      	ldr	r2, [pc, #268]	@ (80060e4 <HAL_DMA_IRQHandler+0xa48>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <HAL_DMA_IRQHandler+0xa4c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <HAL_DMA_IRQHandler+0xa50>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80060f0 <HAL_DMA_IRQHandler+0xa54>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80060f4 <HAL_DMA_IRQHandler+0xa58>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a3c      	ldr	r2, [pc, #240]	@ (80060f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3a      	ldr	r2, [pc, #232]	@ (80060fc <HAL_DMA_IRQHandler+0xa60>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_DMA_IRQHandler+0x984>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a39      	ldr	r2, [pc, #228]	@ (8006100 <HAL_DMA_IRQHandler+0xa64>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_DMA_IRQHandler+0x988>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_DMA_IRQHandler+0x98a>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 823f 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2204      	movs	r2, #4
 800603e:	409a      	lsls	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80cd 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xb48>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80c7 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2204      	movs	r2, #4
 8006060:	409a      	lsls	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d049      	beq.n	8006104 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8210 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608c:	e20a      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8206 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a0:	e200      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
 80060a2:	bf00      	nop
 80060a4:	40020010 	.word	0x40020010
 80060a8:	40020028 	.word	0x40020028
 80060ac:	40020040 	.word	0x40020040
 80060b0:	40020058 	.word	0x40020058
 80060b4:	40020070 	.word	0x40020070
 80060b8:	40020088 	.word	0x40020088
 80060bc:	400200a0 	.word	0x400200a0
 80060c0:	400200b8 	.word	0x400200b8
 80060c4:	40020410 	.word	0x40020410
 80060c8:	40020428 	.word	0x40020428
 80060cc:	40020440 	.word	0x40020440
 80060d0:	40020458 	.word	0x40020458
 80060d4:	40020470 	.word	0x40020470
 80060d8:	40020488 	.word	0x40020488
 80060dc:	400204a0 	.word	0x400204a0
 80060e0:	400204b8 	.word	0x400204b8
 80060e4:	58025408 	.word	0x58025408
 80060e8:	5802541c 	.word	0x5802541c
 80060ec:	58025430 	.word	0x58025430
 80060f0:	58025444 	.word	0x58025444
 80060f4:	58025458 	.word	0x58025458
 80060f8:	5802546c 	.word	0x5802546c
 80060fc:	58025480 	.word	0x58025480
 8006100:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d160      	bne.n	80061d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7f      	ldr	r2, [pc, #508]	@ (8006310 <HAL_DMA_IRQHandler+0xc74>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7d      	ldr	r2, [pc, #500]	@ (8006314 <HAL_DMA_IRQHandler+0xc78>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a7c      	ldr	r2, [pc, #496]	@ (8006318 <HAL_DMA_IRQHandler+0xc7c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a7a      	ldr	r2, [pc, #488]	@ (800631c <HAL_DMA_IRQHandler+0xc80>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a79      	ldr	r2, [pc, #484]	@ (8006320 <HAL_DMA_IRQHandler+0xc84>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a77      	ldr	r2, [pc, #476]	@ (8006324 <HAL_DMA_IRQHandler+0xc88>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a76      	ldr	r2, [pc, #472]	@ (8006328 <HAL_DMA_IRQHandler+0xc8c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a74      	ldr	r2, [pc, #464]	@ (800632c <HAL_DMA_IRQHandler+0xc90>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a73      	ldr	r2, [pc, #460]	@ (8006330 <HAL_DMA_IRQHandler+0xc94>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a71      	ldr	r2, [pc, #452]	@ (8006334 <HAL_DMA_IRQHandler+0xc98>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a70      	ldr	r2, [pc, #448]	@ (8006338 <HAL_DMA_IRQHandler+0xc9c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6e      	ldr	r2, [pc, #440]	@ (800633c <HAL_DMA_IRQHandler+0xca0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6d      	ldr	r2, [pc, #436]	@ (8006340 <HAL_DMA_IRQHandler+0xca4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a6b      	ldr	r2, [pc, #428]	@ (8006344 <HAL_DMA_IRQHandler+0xca8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6a      	ldr	r2, [pc, #424]	@ (8006348 <HAL_DMA_IRQHandler+0xcac>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_IRQHandler+0xb12>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a68      	ldr	r2, [pc, #416]	@ (800634c <HAL_DMA_IRQHandler+0xcb0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_DMA_IRQHandler+0xb24>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0208 	bic.w	r2, r2, #8
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e007      	b.n	80061d0 <HAL_DMA_IRQHandler+0xb34>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8165 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e2:	e15f      	b.n	80064a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2202      	movs	r2, #2
 80061ee:	409a      	lsls	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80c5 	beq.w	8006384 <HAL_DMA_IRQHandler+0xce8>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80bf 	beq.w	8006384 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2202      	movs	r2, #2
 8006210:	409a      	lsls	r2, r3
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d018      	beq.n	8006252 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 813a 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800623c:	e134      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8130 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006250:	e12a      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	f040 8089 	bne.w	8006370 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2b      	ldr	r2, [pc, #172]	@ (8006310 <HAL_DMA_IRQHandler+0xc74>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a29      	ldr	r2, [pc, #164]	@ (8006314 <HAL_DMA_IRQHandler+0xc78>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a28      	ldr	r2, [pc, #160]	@ (8006318 <HAL_DMA_IRQHandler+0xc7c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a26      	ldr	r2, [pc, #152]	@ (800631c <HAL_DMA_IRQHandler+0xc80>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a25      	ldr	r2, [pc, #148]	@ (8006320 <HAL_DMA_IRQHandler+0xc84>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a23      	ldr	r2, [pc, #140]	@ (8006324 <HAL_DMA_IRQHandler+0xc88>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a22      	ldr	r2, [pc, #136]	@ (8006328 <HAL_DMA_IRQHandler+0xc8c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a20      	ldr	r2, [pc, #128]	@ (800632c <HAL_DMA_IRQHandler+0xc90>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006330 <HAL_DMA_IRQHandler+0xc94>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_DMA_IRQHandler+0xc98>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_DMA_IRQHandler+0xc9c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	@ (800633c <HAL_DMA_IRQHandler+0xca0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <HAL_DMA_IRQHandler+0xca4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a17      	ldr	r2, [pc, #92]	@ (8006344 <HAL_DMA_IRQHandler+0xca8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <HAL_DMA_IRQHandler+0xcac>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0xc62>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a14      	ldr	r2, [pc, #80]	@ (800634c <HAL_DMA_IRQHandler+0xcb0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d128      	bne.n	8006350 <HAL_DMA_IRQHandler+0xcb4>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0214 	bic.w	r2, r2, #20
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e027      	b.n	8006360 <HAL_DMA_IRQHandler+0xcc4>
 8006310:	40020010 	.word	0x40020010
 8006314:	40020028 	.word	0x40020028
 8006318:	40020040 	.word	0x40020040
 800631c:	40020058 	.word	0x40020058
 8006320:	40020070 	.word	0x40020070
 8006324:	40020088 	.word	0x40020088
 8006328:	400200a0 	.word	0x400200a0
 800632c:	400200b8 	.word	0x400200b8
 8006330:	40020410 	.word	0x40020410
 8006334:	40020428 	.word	0x40020428
 8006338:	40020440 	.word	0x40020440
 800633c:	40020458 	.word	0x40020458
 8006340:	40020470 	.word	0x40020470
 8006344:	40020488 	.word	0x40020488
 8006348:	400204a0 	.word	0x400204a0
 800634c:	400204b8 	.word	0x400204b8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 020a 	bic.w	r2, r2, #10
 800635e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8097 	beq.w	80064a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006382:	e091      	b.n	80064a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2208      	movs	r2, #8
 800638e:	409a      	lsls	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8088 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8082 	beq.w	80064aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a41      	ldr	r2, [pc, #260]	@ (80064b0 <HAL_DMA_IRQHandler+0xe14>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a3f      	ldr	r2, [pc, #252]	@ (80064b4 <HAL_DMA_IRQHandler+0xe18>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a3e      	ldr	r2, [pc, #248]	@ (80064b8 <HAL_DMA_IRQHandler+0xe1c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a3c      	ldr	r2, [pc, #240]	@ (80064bc <HAL_DMA_IRQHandler+0xe20>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3b      	ldr	r2, [pc, #236]	@ (80064c0 <HAL_DMA_IRQHandler+0xe24>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a39      	ldr	r2, [pc, #228]	@ (80064c4 <HAL_DMA_IRQHandler+0xe28>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a38      	ldr	r2, [pc, #224]	@ (80064c8 <HAL_DMA_IRQHandler+0xe2c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a36      	ldr	r2, [pc, #216]	@ (80064cc <HAL_DMA_IRQHandler+0xe30>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a35      	ldr	r2, [pc, #212]	@ (80064d0 <HAL_DMA_IRQHandler+0xe34>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a33      	ldr	r2, [pc, #204]	@ (80064d4 <HAL_DMA_IRQHandler+0xe38>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a32      	ldr	r2, [pc, #200]	@ (80064d8 <HAL_DMA_IRQHandler+0xe3c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a30      	ldr	r2, [pc, #192]	@ (80064dc <HAL_DMA_IRQHandler+0xe40>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2f      	ldr	r2, [pc, #188]	@ (80064e0 <HAL_DMA_IRQHandler+0xe44>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2d      	ldr	r2, [pc, #180]	@ (80064e4 <HAL_DMA_IRQHandler+0xe48>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2c      	ldr	r2, [pc, #176]	@ (80064e8 <HAL_DMA_IRQHandler+0xe4c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_IRQHandler+0xdaa>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2a      	ldr	r2, [pc, #168]	@ (80064ec <HAL_DMA_IRQHandler+0xe50>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <HAL_DMA_IRQHandler+0xdbc>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 021c 	bic.w	r2, r2, #28
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <HAL_DMA_IRQHandler+0xdcc>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 020e 	bic.w	r2, r2, #14
 8006466:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	e004      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064aa:	3728      	adds	r7, #40	@ 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8

080064f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a42      	ldr	r2, [pc, #264]	@ (8006608 <DMA_CalcBaseAndBitshift+0x118>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d04a      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a41      	ldr	r2, [pc, #260]	@ (800660c <DMA_CalcBaseAndBitshift+0x11c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d045      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3f      	ldr	r2, [pc, #252]	@ (8006610 <DMA_CalcBaseAndBitshift+0x120>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d040      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3e      	ldr	r2, [pc, #248]	@ (8006614 <DMA_CalcBaseAndBitshift+0x124>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d03b      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3c      	ldr	r2, [pc, #240]	@ (8006618 <DMA_CalcBaseAndBitshift+0x128>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d036      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3b      	ldr	r2, [pc, #236]	@ (800661c <DMA_CalcBaseAndBitshift+0x12c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d031      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a39      	ldr	r2, [pc, #228]	@ (8006620 <DMA_CalcBaseAndBitshift+0x130>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d02c      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a38      	ldr	r2, [pc, #224]	@ (8006624 <DMA_CalcBaseAndBitshift+0x134>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d027      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a36      	ldr	r2, [pc, #216]	@ (8006628 <DMA_CalcBaseAndBitshift+0x138>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d022      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a35      	ldr	r2, [pc, #212]	@ (800662c <DMA_CalcBaseAndBitshift+0x13c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d01d      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a33      	ldr	r2, [pc, #204]	@ (8006630 <DMA_CalcBaseAndBitshift+0x140>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d018      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a32      	ldr	r2, [pc, #200]	@ (8006634 <DMA_CalcBaseAndBitshift+0x144>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a30      	ldr	r2, [pc, #192]	@ (8006638 <DMA_CalcBaseAndBitshift+0x148>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00e      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <DMA_CalcBaseAndBitshift+0x14c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2d      	ldr	r2, [pc, #180]	@ (8006640 <DMA_CalcBaseAndBitshift+0x150>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <DMA_CalcBaseAndBitshift+0xa8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <DMA_CalcBaseAndBitshift+0x154>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <DMA_CalcBaseAndBitshift+0xac>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <DMA_CalcBaseAndBitshift+0xae>
 800659c:	2300      	movs	r3, #0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d024      	beq.n	80065ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	3b10      	subs	r3, #16
 80065aa:	4a27      	ldr	r2, [pc, #156]	@ (8006648 <DMA_CalcBaseAndBitshift+0x158>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	4a24      	ldr	r2, [pc, #144]	@ (800664c <DMA_CalcBaseAndBitshift+0x15c>)
 80065bc:	5cd3      	ldrb	r3, [r2, r3]
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d908      	bls.n	80065dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006650 <DMA_CalcBaseAndBitshift+0x160>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80065da:	e00d      	b.n	80065f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <DMA_CalcBaseAndBitshift+0x160>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ea:	e005      	b.n	80065f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40020010 	.word	0x40020010
 800660c:	40020028 	.word	0x40020028
 8006610:	40020040 	.word	0x40020040
 8006614:	40020058 	.word	0x40020058
 8006618:	40020070 	.word	0x40020070
 800661c:	40020088 	.word	0x40020088
 8006620:	400200a0 	.word	0x400200a0
 8006624:	400200b8 	.word	0x400200b8
 8006628:	40020410 	.word	0x40020410
 800662c:	40020428 	.word	0x40020428
 8006630:	40020440 	.word	0x40020440
 8006634:	40020458 	.word	0x40020458
 8006638:	40020470 	.word	0x40020470
 800663c:	40020488 	.word	0x40020488
 8006640:	400204a0 	.word	0x400204a0
 8006644:	400204b8 	.word	0x400204b8
 8006648:	aaaaaaab 	.word	0xaaaaaaab
 800664c:	08011460 	.word	0x08011460
 8006650:	fffffc00 	.word	0xfffffc00

08006654 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d120      	bne.n	80066aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	2b03      	cmp	r3, #3
 800666e:	d858      	bhi.n	8006722 <DMA_CheckFifoParam+0xce>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <DMA_CheckFifoParam+0x24>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006689 	.word	0x08006689
 800667c:	0800669b 	.word	0x0800669b
 8006680:	08006689 	.word	0x08006689
 8006684:	08006723 	.word	0x08006723
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d048      	beq.n	8006726 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006698:	e045      	b.n	8006726 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066a2:	d142      	bne.n	800672a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066a8:	e03f      	b.n	800672a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b2:	d123      	bne.n	80066fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d838      	bhi.n	800672e <DMA_CheckFifoParam+0xda>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <DMA_CheckFifoParam+0x70>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066db 	.word	0x080066db
 80066cc:	080066d5 	.word	0x080066d5
 80066d0:	080066ed 	.word	0x080066ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
        break;
 80066d8:	e030      	b.n	800673c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d025      	beq.n	8006732 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ea:	e022      	b.n	8006732 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066f4:	d11f      	bne.n	8006736 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066fa:	e01c      	b.n	8006736 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	2b02      	cmp	r3, #2
 8006702:	d902      	bls.n	800670a <DMA_CheckFifoParam+0xb6>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d003      	beq.n	8006710 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006708:	e018      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
        break;
 800670e:	e015      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
    break;
 8006720:	e00b      	b.n	800673a <DMA_CheckFifoParam+0xe6>
        break;
 8006722:	bf00      	nop
 8006724:	e00a      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006726:	bf00      	nop
 8006728:	e008      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 800672a:	bf00      	nop
 800672c:	e006      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <DMA_CheckFifoParam+0xe8>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <DMA_CheckFifoParam+0xe8>
    break;
 800673a:	bf00      	nop
    }
  }

  return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a38      	ldr	r2, [pc, #224]	@ (8006840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a36      	ldr	r2, [pc, #216]	@ (8006844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a35      	ldr	r2, [pc, #212]	@ (8006848 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a33      	ldr	r2, [pc, #204]	@ (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a32      	ldr	r2, [pc, #200]	@ (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a30      	ldr	r2, [pc, #192]	@ (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2f      	ldr	r2, [pc, #188]	@ (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2d      	ldr	r2, [pc, #180]	@ (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	3b08      	subs	r3, #8
 80067bc:	4a28      	ldr	r2, [pc, #160]	@ (8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4b26      	ldr	r3, [pc, #152]	@ (8006864 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a24      	ldr	r2, [pc, #144]	@ (8006868 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80067d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2201      	movs	r2, #1
 80067e2:	409a      	lsls	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80067e8:	e024      	b.n	8006834 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	3b10      	subs	r3, #16
 80067f2:	4a1e      	ldr	r2, [pc, #120]	@ (800686c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006870 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d806      	bhi.n	8006812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a1b      	ldr	r2, [pc, #108]	@ (8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d902      	bls.n	8006812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3308      	adds	r3, #8
 8006810:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4b18      	ldr	r3, [pc, #96]	@ (8006878 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006824:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2201      	movs	r2, #1
 800682e:	409a      	lsls	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	58025408 	.word	0x58025408
 8006844:	5802541c 	.word	0x5802541c
 8006848:	58025430 	.word	0x58025430
 800684c:	58025444 	.word	0x58025444
 8006850:	58025458 	.word	0x58025458
 8006854:	5802546c 	.word	0x5802546c
 8006858:	58025480 	.word	0x58025480
 800685c:	58025494 	.word	0x58025494
 8006860:	cccccccd 	.word	0xcccccccd
 8006864:	16009600 	.word	0x16009600
 8006868:	58025880 	.word	0x58025880
 800686c:	aaaaaaab 	.word	0xaaaaaaab
 8006870:	400204b8 	.word	0x400204b8
 8006874:	4002040f 	.word	0x4002040f
 8006878:	10008200 	.word	0x10008200
 800687c:	40020880 	.word	0x40020880

08006880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04a      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d847      	bhi.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a25      	ldr	r2, [pc, #148]	@ (8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d022      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a24      	ldr	r2, [pc, #144]	@ (800693c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d01d      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a22      	ldr	r2, [pc, #136]	@ (8006940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d018      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a21      	ldr	r2, [pc, #132]	@ (8006944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d013      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00e      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1e      	ldr	r2, [pc, #120]	@ (800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d009      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d101      	bne.n	80068f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a15      	ldr	r2, [pc, #84]	@ (800695c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006908:	671a      	str	r2, [r3, #112]	@ 0x70
 800690a:	e009      	b.n	8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a11      	ldr	r2, [pc, #68]	@ (8006964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800691e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3b01      	subs	r3, #1
 8006924:	2201      	movs	r2, #1
 8006926:	409a      	lsls	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	58025408 	.word	0x58025408
 800693c:	5802541c 	.word	0x5802541c
 8006940:	58025430 	.word	0x58025430
 8006944:	58025444 	.word	0x58025444
 8006948:	58025458 	.word	0x58025458
 800694c:	5802546c 	.word	0x5802546c
 8006950:	58025480 	.word	0x58025480
 8006954:	58025494 	.word	0x58025494
 8006958:	1600963f 	.word	0x1600963f
 800695c:	58025940 	.word	0x58025940
 8006960:	1000823f 	.word	0x1000823f
 8006964:	40020940 	.word	0x40020940

08006968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006968:	b480      	push	{r7}
 800696a:	b089      	sub	sp, #36	@ 0x24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006976:	4b89      	ldr	r3, [pc, #548]	@ (8006b9c <HAL_GPIO_Init+0x234>)
 8006978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800697a:	e194      	b.n	8006ca6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	2101      	movs	r1, #1
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	4013      	ands	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8186 	beq.w	8006ca0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d005      	beq.n	80069ac <HAL_GPIO_Init+0x44>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d130      	bne.n	8006a0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	2203      	movs	r2, #3
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069e2:	2201      	movs	r2, #1
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	091b      	lsrs	r3, r3, #4
 80069f8:	f003 0201 	and.w	r2, r3, #1
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d017      	beq.n	8006a4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	2203      	movs	r2, #3
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d123      	bne.n	8006a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	08da      	lsrs	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3208      	adds	r2, #8
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	220f      	movs	r2, #15
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	08da      	lsrs	r2, r3, #3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3208      	adds	r2, #8
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 0203 	and.w	r2, r3, #3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80e0 	beq.w	8006ca0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba0 <HAL_GPIO_Init+0x238>)
 8006ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ba0 <HAL_GPIO_Init+0x238>)
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006af0:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba0 <HAL_GPIO_Init+0x238>)
 8006af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006afe:	4a29      	ldr	r2, [pc, #164]	@ (8006ba4 <HAL_GPIO_Init+0x23c>)
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	089b      	lsrs	r3, r3, #2
 8006b04:	3302      	adds	r3, #2
 8006b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	220f      	movs	r2, #15
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a20      	ldr	r2, [pc, #128]	@ (8006ba8 <HAL_GPIO_Init+0x240>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d052      	beq.n	8006bd0 <HAL_GPIO_Init+0x268>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bac <HAL_GPIO_Init+0x244>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d031      	beq.n	8006b96 <HAL_GPIO_Init+0x22e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb0 <HAL_GPIO_Init+0x248>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d02b      	beq.n	8006b92 <HAL_GPIO_Init+0x22a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <HAL_GPIO_Init+0x24c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d025      	beq.n	8006b8e <HAL_GPIO_Init+0x226>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb8 <HAL_GPIO_Init+0x250>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01f      	beq.n	8006b8a <HAL_GPIO_Init+0x222>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bbc <HAL_GPIO_Init+0x254>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d019      	beq.n	8006b86 <HAL_GPIO_Init+0x21e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc0 <HAL_GPIO_Init+0x258>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_GPIO_Init+0x21a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a19      	ldr	r2, [pc, #100]	@ (8006bc4 <HAL_GPIO_Init+0x25c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00d      	beq.n	8006b7e <HAL_GPIO_Init+0x216>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_GPIO_Init+0x260>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <HAL_GPIO_Init+0x212>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a17      	ldr	r2, [pc, #92]	@ (8006bcc <HAL_GPIO_Init+0x264>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <HAL_GPIO_Init+0x20e>
 8006b72:	2309      	movs	r3, #9
 8006b74:	e02d      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b76:	230a      	movs	r3, #10
 8006b78:	e02b      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	e029      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b7e:	2307      	movs	r3, #7
 8006b80:	e027      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b82:	2306      	movs	r3, #6
 8006b84:	e025      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b86:	2305      	movs	r3, #5
 8006b88:	e023      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b8a:	2304      	movs	r3, #4
 8006b8c:	e021      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e01f      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e01d      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e01b      	b.n	8006bd2 <HAL_GPIO_Init+0x26a>
 8006b9a:	bf00      	nop
 8006b9c:	58000080 	.word	0x58000080
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	58000400 	.word	0x58000400
 8006ba8:	58020000 	.word	0x58020000
 8006bac:	58020400 	.word	0x58020400
 8006bb0:	58020800 	.word	0x58020800
 8006bb4:	58020c00 	.word	0x58020c00
 8006bb8:	58021000 	.word	0x58021000
 8006bbc:	58021400 	.word	0x58021400
 8006bc0:	58021800 	.word	0x58021800
 8006bc4:	58021c00 	.word	0x58021c00
 8006bc8:	58022000 	.word	0x58022000
 8006bcc:	58022400 	.word	0x58022400
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	f002 0203 	and.w	r2, r2, #3
 8006bd8:	0092      	lsls	r2, r2, #2
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be2:	4938      	ldr	r1, [pc, #224]	@ (8006cc4 <HAL_GPIO_Init+0x35c>)
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	3302      	adds	r3, #2
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4013      	ands	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f ae63 	bne.w	800697c <HAL_GPIO_Init+0x14>
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	3724      	adds	r7, #36	@ 0x24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	58000400 	.word	0x58000400

08006cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e001      	b.n	8006cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	807b      	strh	r3, [r7, #2]
 8006d04:	4613      	mov	r3, r2
 8006d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d08:	787b      	ldrb	r3, [r7, #1]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d14:	e003      	b.n	8006d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d16:	887b      	ldrh	r3, [r7, #2]
 8006d18:	041a      	lsls	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	619a      	str	r2, [r3, #24]
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e10d      	b.n	8006f5a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fd fae6 	bl	8004324 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d107      	bne.n	8006d7e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d008      	beq.n	8006da0 <HAL_I2S_Init+0x74>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b06      	cmp	r3, #6
 8006d94:	d004      	beq.n	8006da0 <HAL_I2S_Init+0x74>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b0a      	cmp	r3, #10
 8006d9c:	f040 8087 	bne.w	8006eae <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d05a      	beq.n	8006e5e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8006db0:	2302      	movs	r3, #2
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e001      	b.n	8006dba <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8006db6:	2301      	movs	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b30      	cmp	r3, #48	@ 0x30
 8006dc0:	d003      	beq.n	8006dca <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006dc6:	2bb0      	cmp	r3, #176	@ 0xb0
 8006dc8:	d102      	bne.n	8006dd0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e001      	b.n	8006dd4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8006dd4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	f002 fadc 	bl	8009398 <HAL_RCCEx_GetPeriphCLKFreq>
 8006de0:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dea:	d113      	bne.n	8006e14 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	fa22 f303 	lsr.w	r3, r2, r3
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	3305      	adds	r3, #5
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e014      	b.n	8006e3e <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8006e14:	2220      	movs	r2, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3a:	3305      	adds	r3, #5
 8006e3c:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4a48      	ldr	r2, [pc, #288]	@ (8006f64 <HAL_I2S_Init+0x238>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	08db      	lsrs	r3, r3, #3
 8006e48:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	e003      	b.n	8006e66 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d102      	bne.n	8006e72 <HAL_I2S_Init+0x146>
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d002      	beq.n	8006e78 <HAL_I2S_Init+0x14c>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2bff      	cmp	r3, #255	@ 0xff
 8006e76:	d907      	bls.n	8006e88 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	f043 0210 	orr.w	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e068      	b.n	8006f5a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e98:	4b33      	ldr	r3, [pc, #204]	@ (8006f68 <HAL_I2S_Init+0x23c>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	0411      	lsls	r1, r2, #16
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	0612      	lsls	r2, r2, #24
 8006ea4:	4311      	orrs	r1, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f6c <HAL_I2S_Init+0x240>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6851      	ldr	r1, [r2, #4]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6892      	ldr	r2, [r2, #8]
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68d2      	ldr	r2, [r2, #12]
 8006ec6:	4311      	orrs	r1, r2
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6992      	ldr	r2, [r2, #24]
 8006ecc:	4311      	orrs	r1, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6a12      	ldr	r2, [r2, #32]
 8006ed2:	4311      	orrs	r1, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6912      	ldr	r2, [r2, #16]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8006ef4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f04:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d007      	beq.n	8006f34 <HAL_I2S_Init+0x208>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d003      	beq.n	8006f34 <HAL_I2S_Init+0x208>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b0a      	cmp	r3, #10
 8006f32:	d10a      	bne.n	8006f4a <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	cccccccd 	.word	0xcccccccd
 8006f68:	fe00ffff 	.word	0xfe00ffff
 8006f6c:	fdff9040 	.word	0xfdff9040

08006f70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f78:	4b19      	ldr	r3, [pc, #100]	@ (8006fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d00a      	beq.n	8006f9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f84:	4b16      	ldr	r3, [pc, #88]	@ (8006fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d001      	beq.n	8006f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e01f      	b.n	8006fd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e01d      	b.n	8006fd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f9a:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f023 0207 	bic.w	r2, r3, #7
 8006fa2:	490f      	ldr	r1, [pc, #60]	@ (8006fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006faa:	f7fd fecf 	bl	8004d4c <HAL_GetTick>
 8006fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fb0:	e009      	b.n	8006fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fb2:	f7fd fecb 	bl	8004d4c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fc0:	d901      	bls.n	8006fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e007      	b.n	8006fd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd2:	d1ee      	bne.n	8006fb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	58024800 	.word	0x58024800

08006fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	@ 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f000 bc48 	b.w	8007888 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8088 	beq.w	8007116 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007006:	4b99      	ldr	r3, [pc, #612]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007010:	4b96      	ldr	r3, [pc, #600]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	2b10      	cmp	r3, #16
 800701a:	d007      	beq.n	800702c <HAL_RCC_OscConfig+0x48>
 800701c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701e:	2b18      	cmp	r3, #24
 8007020:	d111      	bne.n	8007046 <HAL_RCC_OscConfig+0x62>
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d10c      	bne.n	8007046 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b8f      	ldr	r3, [pc, #572]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d06d      	beq.n	8007114 <HAL_RCC_OscConfig+0x130>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d169      	bne.n	8007114 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f000 bc21 	b.w	8007888 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800704e:	d106      	bne.n	800705e <HAL_RCC_OscConfig+0x7a>
 8007050:	4b86      	ldr	r3, [pc, #536]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a85      	ldr	r2, [pc, #532]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e02e      	b.n	80070bc <HAL_RCC_OscConfig+0xd8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x9c>
 8007066:	4b81      	ldr	r3, [pc, #516]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a80      	ldr	r2, [pc, #512]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800706c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b7e      	ldr	r3, [pc, #504]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a7d      	ldr	r2, [pc, #500]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e01d      	b.n	80070bc <HAL_RCC_OscConfig+0xd8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0xc0>
 800708a:	4b78      	ldr	r3, [pc, #480]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a77      	ldr	r2, [pc, #476]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4b75      	ldr	r3, [pc, #468]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a74      	ldr	r2, [pc, #464]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800709c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e00b      	b.n	80070bc <HAL_RCC_OscConfig+0xd8>
 80070a4:	4b71      	ldr	r3, [pc, #452]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a70      	ldr	r2, [pc, #448]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80070aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b6e      	ldr	r3, [pc, #440]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a6d      	ldr	r2, [pc, #436]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fd fe42 	bl	8004d4c <HAL_GetTick>
 80070c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070cc:	f7fd fe3e 	bl	8004d4c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	@ 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e3d4      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070de:	4b63      	ldr	r3, [pc, #396]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0xe8>
 80070ea:	e014      	b.n	8007116 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fd fe2e 	bl	8004d4c <HAL_GetTick>
 80070f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f4:	f7fd fe2a 	bl	8004d4c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b64      	cmp	r3, #100	@ 0x64
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e3c0      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007106:	4b59      	ldr	r3, [pc, #356]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x110>
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80ca 	beq.w	80072b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007124:	4b51      	ldr	r3, [pc, #324]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800712c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800712e:	4b4f      	ldr	r3, [pc, #316]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007132:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_RCC_OscConfig+0x166>
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	2b18      	cmp	r3, #24
 800713e:	d156      	bne.n	80071ee <HAL_RCC_OscConfig+0x20a>
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d151      	bne.n	80071ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800714a:	4b48      	ldr	r3, [pc, #288]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCC_OscConfig+0x17e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e392      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007162:	4b42      	ldr	r3, [pc, #264]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 0219 	bic.w	r2, r3, #25
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	493f      	ldr	r1, [pc, #252]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007170:	4313      	orrs	r3, r2
 8007172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007174:	f7fd fdea 	bl	8004d4c <HAL_GetTick>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800717c:	f7fd fde6 	bl	8004d4c <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e37c      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718e:	4b37      	ldr	r3, [pc, #220]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719a:	f7fd fe07 	bl	8004dac <HAL_GetREVID>
 800719e:	4603      	mov	r3, r0
 80071a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d817      	bhi.n	80071d8 <HAL_RCC_OscConfig+0x1f4>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	d108      	bne.n	80071c2 <HAL_RCC_OscConfig+0x1de>
 80071b0:	4b2e      	ldr	r3, [pc, #184]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80071b8:	4a2c      	ldr	r2, [pc, #176]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071c0:	e07a      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c2:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	031b      	lsls	r3, r3, #12
 80071d0:	4926      	ldr	r1, [pc, #152]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d6:	e06f      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d8:	4b24      	ldr	r3, [pc, #144]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	4921      	ldr	r1, [pc, #132]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ec:	e064      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d047      	beq.n	8007286 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071f6:	4b1d      	ldr	r3, [pc, #116]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 0219 	bic.w	r2, r3, #25
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	491a      	ldr	r1, [pc, #104]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd fda0 	bl	8004d4c <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007210:	f7fd fd9c 	bl	8004d4c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e332      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007222:	4b12      	ldr	r3, [pc, #72]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722e:	f7fd fdbd 	bl	8004dac <HAL_GetREVID>
 8007232:	4603      	mov	r3, r0
 8007234:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007238:	4293      	cmp	r3, r2
 800723a:	d819      	bhi.n	8007270 <HAL_RCC_OscConfig+0x28c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b40      	cmp	r3, #64	@ 0x40
 8007242:	d108      	bne.n	8007256 <HAL_RCC_OscConfig+0x272>
 8007244:	4b09      	ldr	r3, [pc, #36]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800724c:	4a07      	ldr	r2, [pc, #28]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007252:	6053      	str	r3, [r2, #4]
 8007254:	e030      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
 8007256:	4b05      	ldr	r3, [pc, #20]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	031b      	lsls	r3, r3, #12
 8007264:	4901      	ldr	r1, [pc, #4]	@ (800726c <HAL_RCC_OscConfig+0x288>)
 8007266:	4313      	orrs	r3, r2
 8007268:	604b      	str	r3, [r1, #4]
 800726a:	e025      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
 800726c:	58024400 	.word	0x58024400
 8007270:	4b9a      	ldr	r3, [pc, #616]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	4997      	ldr	r1, [pc, #604]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	e018      	b.n	80072b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007286:	4b95      	ldr	r3, [pc, #596]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a94      	ldr	r2, [pc, #592]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fd fd5b 	bl	8004d4c <HAL_GetTick>
 8007296:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800729a:	f7fd fd57 	bl	8004d4c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e2ed      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072ac:	4b8b      	ldr	r3, [pc, #556]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f0      	bne.n	800729a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80a9 	beq.w	8007418 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c6:	4b85      	ldr	r3, [pc, #532]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072d0:	4b82      	ldr	r3, [pc, #520]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d007      	beq.n	80072ec <HAL_RCC_OscConfig+0x308>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b18      	cmp	r3, #24
 80072e0:	d13a      	bne.n	8007358 <HAL_RCC_OscConfig+0x374>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d135      	bne.n	8007358 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072ec:	4b7b      	ldr	r3, [pc, #492]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_RCC_OscConfig+0x320>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b80      	cmp	r3, #128	@ 0x80
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e2c1      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007304:	f7fd fd52 	bl	8004dac <HAL_GetREVID>
 8007308:	4603      	mov	r3, r0
 800730a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800730e:	4293      	cmp	r3, r2
 8007310:	d817      	bhi.n	8007342 <HAL_RCC_OscConfig+0x35e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	2b20      	cmp	r3, #32
 8007318:	d108      	bne.n	800732c <HAL_RCC_OscConfig+0x348>
 800731a:	4b70      	ldr	r3, [pc, #448]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007322:	4a6e      	ldr	r2, [pc, #440]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007328:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800732a:	e075      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800732c:	4b6b      	ldr	r3, [pc, #428]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	069b      	lsls	r3, r3, #26
 800733a:	4968      	ldr	r1, [pc, #416]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800733c:	4313      	orrs	r3, r2
 800733e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007340:	e06a      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007342:	4b66      	ldr	r3, [pc, #408]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	061b      	lsls	r3, r3, #24
 8007350:	4962      	ldr	r1, [pc, #392]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007352:	4313      	orrs	r3, r2
 8007354:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007356:	e05f      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d042      	beq.n	80073e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007360:	4b5e      	ldr	r3, [pc, #376]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a5d      	ldr	r2, [pc, #372]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fd fcee 	bl	8004d4c <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007374:	f7fd fcea 	bl	8004d4c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e280      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007386:	4b55      	ldr	r3, [pc, #340]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f0      	beq.n	8007374 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007392:	f7fd fd0b 	bl	8004dac <HAL_GetREVID>
 8007396:	4603      	mov	r3, r0
 8007398:	f241 0203 	movw	r2, #4099	@ 0x1003
 800739c:	4293      	cmp	r3, r2
 800739e:	d817      	bhi.n	80073d0 <HAL_RCC_OscConfig+0x3ec>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d108      	bne.n	80073ba <HAL_RCC_OscConfig+0x3d6>
 80073a8:	4b4c      	ldr	r3, [pc, #304]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80073b0:	4a4a      	ldr	r2, [pc, #296]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b6:	6053      	str	r3, [r2, #4]
 80073b8:	e02e      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
 80073ba:	4b48      	ldr	r3, [pc, #288]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	069b      	lsls	r3, r3, #26
 80073c8:	4944      	ldr	r1, [pc, #272]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	604b      	str	r3, [r1, #4]
 80073ce:	e023      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
 80073d0:	4b42      	ldr	r3, [pc, #264]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	061b      	lsls	r3, r3, #24
 80073de:	493f      	ldr	r1, [pc, #252]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60cb      	str	r3, [r1, #12]
 80073e4:	e018      	b.n	8007418 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073e6:	4b3d      	ldr	r3, [pc, #244]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a3c      	ldr	r2, [pc, #240]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80073ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f2:	f7fd fcab 	bl	8004d4c <HAL_GetTick>
 80073f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073fa:	f7fd fca7 	bl	8004d4c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e23d      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800740c:	4b33      	ldr	r3, [pc, #204]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f0      	bne.n	80073fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d036      	beq.n	8007492 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d019      	beq.n	8007460 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800742c:	4b2b      	ldr	r3, [pc, #172]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 800742e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007430:	4a2a      	ldr	r2, [pc, #168]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007438:	f7fd fc88 	bl	8004d4c <HAL_GetTick>
 800743c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007440:	f7fd fc84 	bl	8004d4c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e21a      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007452:	4b22      	ldr	r3, [pc, #136]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x45c>
 800745e:	e018      	b.n	8007492 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007460:	4b1e      	ldr	r3, [pc, #120]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007464:	4a1d      	ldr	r2, [pc, #116]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746c:	f7fd fc6e 	bl	8004d4c <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007474:	f7fd fc6a 	bl	8004d4c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e200      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 8007488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d039      	beq.n	8007512 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01c      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a0c      	ldr	r2, [pc, #48]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80074ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80074b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074b2:	f7fd fc4b 	bl	8004d4c <HAL_GetTick>
 80074b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074b8:	e008      	b.n	80074cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ba:	f7fd fc47 	bl	8004d4c <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e1dd      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074cc:	4b03      	ldr	r3, [pc, #12]	@ (80074dc <HAL_RCC_OscConfig+0x4f8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f0      	beq.n	80074ba <HAL_RCC_OscConfig+0x4d6>
 80074d8:	e01b      	b.n	8007512 <HAL_RCC_OscConfig+0x52e>
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074e0:	4b9b      	ldr	r3, [pc, #620]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a9a      	ldr	r2, [pc, #616]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80074e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074ec:	f7fd fc2e 	bl	8004d4c <HAL_GetTick>
 80074f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074f4:	f7fd fc2a 	bl	8004d4c <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e1c0      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007506:	4b92      	ldr	r3, [pc, #584]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f0      	bne.n	80074f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8081 	beq.w	8007622 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007520:	4b8c      	ldr	r3, [pc, #560]	@ (8007754 <HAL_RCC_OscConfig+0x770>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a8b      	ldr	r2, [pc, #556]	@ (8007754 <HAL_RCC_OscConfig+0x770>)
 8007526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800752c:	f7fd fc0e 	bl	8004d4c <HAL_GetTick>
 8007530:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007534:	f7fd fc0a 	bl	8004d4c <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b64      	cmp	r3, #100	@ 0x64
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e1a0      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007546:	4b83      	ldr	r3, [pc, #524]	@ (8007754 <HAL_RCC_OscConfig+0x770>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d106      	bne.n	8007568 <HAL_RCC_OscConfig+0x584>
 800755a:	4b7d      	ldr	r3, [pc, #500]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755e:	4a7c      	ldr	r2, [pc, #496]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	6713      	str	r3, [r2, #112]	@ 0x70
 8007566:	e02d      	b.n	80075c4 <HAL_RCC_OscConfig+0x5e0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10c      	bne.n	800758a <HAL_RCC_OscConfig+0x5a6>
 8007570:	4b77      	ldr	r3, [pc, #476]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a76      	ldr	r2, [pc, #472]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6713      	str	r3, [r2, #112]	@ 0x70
 800757c:	4b74      	ldr	r3, [pc, #464]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007580:	4a73      	ldr	r2, [pc, #460]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007582:	f023 0304 	bic.w	r3, r3, #4
 8007586:	6713      	str	r3, [r2, #112]	@ 0x70
 8007588:	e01c      	b.n	80075c4 <HAL_RCC_OscConfig+0x5e0>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d10c      	bne.n	80075ac <HAL_RCC_OscConfig+0x5c8>
 8007592:	4b6f      	ldr	r3, [pc, #444]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a6e      	ldr	r2, [pc, #440]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	4b6c      	ldr	r3, [pc, #432]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4a6b      	ldr	r2, [pc, #428]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075aa:	e00b      	b.n	80075c4 <HAL_RCC_OscConfig+0x5e0>
 80075ac:	4b68      	ldr	r3, [pc, #416]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a67      	ldr	r2, [pc, #412]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b8:	4b65      	ldr	r3, [pc, #404]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075bc:	4a64      	ldr	r2, [pc, #400]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075be:	f023 0304 	bic.w	r3, r3, #4
 80075c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075cc:	f7fd fbbe 	bl	8004d4c <HAL_GetTick>
 80075d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075d2:	e00a      	b.n	80075ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d4:	f7fd fbba 	bl	8004d4c <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e14e      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ea:	4b59      	ldr	r3, [pc, #356]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ee      	beq.n	80075d4 <HAL_RCC_OscConfig+0x5f0>
 80075f6:	e014      	b.n	8007622 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fd fba8 	bl	8004d4c <HAL_GetTick>
 80075fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075fe:	e00a      	b.n	8007616 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007600:	f7fd fba4 	bl	8004d4c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e138      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007616:	4b4e      	ldr	r3, [pc, #312]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ee      	bne.n	8007600 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 812d 	beq.w	8007886 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800762c:	4b48      	ldr	r3, [pc, #288]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007634:	2b18      	cmp	r3, #24
 8007636:	f000 80bd 	beq.w	80077b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763e:	2b02      	cmp	r3, #2
 8007640:	f040 809e 	bne.w	8007780 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007644:	4b42      	ldr	r3, [pc, #264]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a41      	ldr	r2, [pc, #260]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800764a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800764e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fd fb7c 	bl	8004d4c <HAL_GetTick>
 8007654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007658:	f7fd fb78 	bl	8004d4c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e10e      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800766a:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007676:	4b36      	ldr	r3, [pc, #216]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800767a:	4b37      	ldr	r3, [pc, #220]	@ (8007758 <HAL_RCC_OscConfig+0x774>)
 800767c:	4013      	ands	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007686:	0112      	lsls	r2, r2, #4
 8007688:	430a      	orrs	r2, r1
 800768a:	4931      	ldr	r1, [pc, #196]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800768c:	4313      	orrs	r3, r2
 800768e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007694:	3b01      	subs	r3, #1
 8007696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769e:	3b01      	subs	r3, #1
 80076a0:	025b      	lsls	r3, r3, #9
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076aa:	3b01      	subs	r3, #1
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b8:	3b01      	subs	r3, #1
 80076ba:	061b      	lsls	r3, r3, #24
 80076bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076c0:	4923      	ldr	r1, [pc, #140]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80076c6:	4b22      	ldr	r3, [pc, #136]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	4a21      	ldr	r2, [pc, #132]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076d6:	4b21      	ldr	r3, [pc, #132]	@ (800775c <HAL_RCC_OscConfig+0x778>)
 80076d8:	4013      	ands	r3, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076de:	00d2      	lsls	r2, r2, #3
 80076e0:	491b      	ldr	r1, [pc, #108]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	f023 020c 	bic.w	r2, r3, #12
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	4917      	ldr	r1, [pc, #92]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076f8:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	f023 0202 	bic.w	r2, r3, #2
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	4912      	ldr	r1, [pc, #72]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800770a:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	4a10      	ldr	r2, [pc, #64]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007716:	4b0e      	ldr	r3, [pc, #56]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a0d      	ldr	r2, [pc, #52]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800771c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007722:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800772c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800772e:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	4a07      	ldr	r2, [pc, #28]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800773a:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a04      	ldr	r2, [pc, #16]	@ (8007750 <HAL_RCC_OscConfig+0x76c>)
 8007740:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007746:	f7fd fb01 	bl	8004d4c <HAL_GetTick>
 800774a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800774c:	e011      	b.n	8007772 <HAL_RCC_OscConfig+0x78e>
 800774e:	bf00      	nop
 8007750:	58024400 	.word	0x58024400
 8007754:	58024800 	.word	0x58024800
 8007758:	fffffc0c 	.word	0xfffffc0c
 800775c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007760:	f7fd faf4 	bl	8004d4c <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e08a      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007772:	4b47      	ldr	r3, [pc, #284]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0f0      	beq.n	8007760 <HAL_RCC_OscConfig+0x77c>
 800777e:	e082      	b.n	8007886 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007780:	4b43      	ldr	r3, [pc, #268]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a42      	ldr	r2, [pc, #264]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800778a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778c:	f7fd fade 	bl	8004d4c <HAL_GetTick>
 8007790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007794:	f7fd fada 	bl	8004d4c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e070      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <HAL_RCC_OscConfig+0x7b0>
 80077b2:	e068      	b.n	8007886 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077b4:	4b36      	ldr	r3, [pc, #216]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 80077b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077ba:	4b35      	ldr	r3, [pc, #212]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d031      	beq.n	800782c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f003 0203 	and.w	r2, r3, #3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d12a      	bne.n	800782c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	091b      	lsrs	r3, r3, #4
 80077da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d122      	bne.n	800782c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d11a      	bne.n	800782c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007802:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d111      	bne.n	800782c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007814:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007816:	429a      	cmp	r2, r3
 8007818:	d108      	bne.n	800782c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	0e1b      	lsrs	r3, r3, #24
 800781e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007826:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007828:	429a      	cmp	r2, r3
 800782a:	d001      	beq.n	8007830 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e02b      	b.n	8007888 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007830:	4b17      	ldr	r3, [pc, #92]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007834:	08db      	lsrs	r3, r3, #3
 8007836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800783a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d01f      	beq.n	8007886 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007846:	4b12      	ldr	r3, [pc, #72]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4a11      	ldr	r2, [pc, #68]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007852:	f7fd fa7b 	bl	8004d4c <HAL_GetTick>
 8007856:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007858:	bf00      	nop
 800785a:	f7fd fa77 	bl	8004d4c <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	4293      	cmp	r3, r2
 8007864:	d0f9      	beq.n	800785a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007866:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800786a:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <HAL_RCC_OscConfig+0x8b0>)
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007872:	00d2      	lsls	r2, r2, #3
 8007874:	4906      	ldr	r1, [pc, #24]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007876:	4313      	orrs	r3, r2
 8007878:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800787a:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	4a04      	ldr	r2, [pc, #16]	@ (8007890 <HAL_RCC_OscConfig+0x8ac>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3730      	adds	r7, #48	@ 0x30
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	58024400 	.word	0x58024400
 8007894:	ffff0007 	.word	0xffff0007

08007898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e19c      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078ac:	4b8a      	ldr	r3, [pc, #552]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d910      	bls.n	80078dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ba:	4b87      	ldr	r3, [pc, #540]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 020f 	bic.w	r2, r3, #15
 80078c2:	4985      	ldr	r1, [pc, #532]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ca:	4b83      	ldr	r3, [pc, #524]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d001      	beq.n	80078dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e184      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	4b7b      	ldr	r3, [pc, #492]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d908      	bls.n	800790a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078f8:	4b78      	ldr	r3, [pc, #480]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	4975      	ldr	r1, [pc, #468]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007906:	4313      	orrs	r3, r2
 8007908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695a      	ldr	r2, [r3, #20]
 800791a:	4b70      	ldr	r3, [pc, #448]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007922:	429a      	cmp	r2, r3
 8007924:	d908      	bls.n	8007938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007926:	4b6d      	ldr	r3, [pc, #436]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	496a      	ldr	r1, [pc, #424]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007934:	4313      	orrs	r3, r2
 8007936:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	4b64      	ldr	r3, [pc, #400]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007950:	429a      	cmp	r2, r3
 8007952:	d908      	bls.n	8007966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007954:	4b61      	ldr	r3, [pc, #388]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	495e      	ldr	r1, [pc, #376]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007962:	4313      	orrs	r3, r2
 8007964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69da      	ldr	r2, [r3, #28]
 8007976:	4b59      	ldr	r3, [pc, #356]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800797e:	429a      	cmp	r2, r3
 8007980:	d908      	bls.n	8007994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007982:	4b56      	ldr	r3, [pc, #344]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	4953      	ldr	r1, [pc, #332]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007990:	4313      	orrs	r3, r2
 8007992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d010      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	4b4d      	ldr	r3, [pc, #308]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d908      	bls.n	80079c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079b0:	4b4a      	ldr	r3, [pc, #296]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f023 020f 	bic.w	r2, r3, #15
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	4947      	ldr	r1, [pc, #284]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d055      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079ce:	4b43      	ldr	r3, [pc, #268]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	4940      	ldr	r1, [pc, #256]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d107      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079e8:	4b3c      	ldr	r3, [pc, #240]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d121      	bne.n	8007a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0f6      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d107      	bne.n	8007a10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a00:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d115      	bne.n	8007a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0ea      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d107      	bne.n	8007a28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a18:	4b30      	ldr	r3, [pc, #192]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e0de      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a28:	4b2c      	ldr	r3, [pc, #176]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0d6      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a38:	4b28      	ldr	r3, [pc, #160]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f023 0207 	bic.w	r2, r3, #7
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4925      	ldr	r1, [pc, #148]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4a:	f7fd f97f 	bl	8004d4c <HAL_GetTick>
 8007a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a50:	e00a      	b.n	8007a68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a52:	f7fd f97b 	bl	8004d4c <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e0be      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a68:	4b1c      	ldr	r3, [pc, #112]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d1eb      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d010      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	4b14      	ldr	r3, [pc, #80]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d208      	bcs.n	8007aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a96:	4b11      	ldr	r3, [pc, #68]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	490e      	ldr	r1, [pc, #56]	@ (8007adc <HAL_RCC_ClockConfig+0x244>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d214      	bcs.n	8007ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ab6:	4b08      	ldr	r3, [pc, #32]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 020f 	bic.w	r2, r3, #15
 8007abe:	4906      	ldr	r1, [pc, #24]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac6:	4b04      	ldr	r3, [pc, #16]	@ (8007ad8 <HAL_RCC_ClockConfig+0x240>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e086      	b.n	8007be6 <HAL_RCC_ClockConfig+0x34e>
 8007ad8:	52002000 	.word	0x52002000
 8007adc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d010      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d208      	bcs.n	8007b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007afc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	4939      	ldr	r1, [pc, #228]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d010      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695a      	ldr	r2, [r3, #20]
 8007b1e:	4b34      	ldr	r3, [pc, #208]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d208      	bcs.n	8007b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b2a:	4b31      	ldr	r3, [pc, #196]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	492e      	ldr	r1, [pc, #184]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	4b28      	ldr	r3, [pc, #160]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d208      	bcs.n	8007b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b58:	4b25      	ldr	r3, [pc, #148]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	4922      	ldr	r1, [pc, #136]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d208      	bcs.n	8007b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b86:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	4917      	ldr	r1, [pc, #92]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b98:	f000 f834 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	4b14      	ldr	r3, [pc, #80]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	4912      	ldr	r1, [pc, #72]	@ (8007bf4 <HAL_RCC_ClockConfig+0x35c>)
 8007baa:	5ccb      	ldrb	r3, [r1, r3]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf0 <HAL_RCC_ClockConfig+0x358>)
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007bf4 <HAL_RCC_ClockConfig+0x35c>)
 8007bc0:	5cd3      	ldrb	r3, [r2, r3]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf8 <HAL_RCC_ClockConfig+0x360>)
 8007bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bfc <HAL_RCC_ClockConfig+0x364>)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007c00 <HAL_RCC_ClockConfig+0x368>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd f86c 	bl	8004cb8 <HAL_InitTick>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	08011450 	.word	0x08011450
 8007bf8:	24000004 	.word	0x24000004
 8007bfc:	24000000 	.word	0x24000000
 8007c00:	24000008 	.word	0x24000008

08007c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b089      	sub	sp, #36	@ 0x24
 8007c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c0a:	4bb3      	ldr	r3, [pc, #716]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c12:	2b18      	cmp	r3, #24
 8007c14:	f200 8155 	bhi.w	8007ec2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007c18:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c85 	.word	0x08007c85
 8007c24:	08007ec3 	.word	0x08007ec3
 8007c28:	08007ec3 	.word	0x08007ec3
 8007c2c:	08007ec3 	.word	0x08007ec3
 8007c30:	08007ec3 	.word	0x08007ec3
 8007c34:	08007ec3 	.word	0x08007ec3
 8007c38:	08007ec3 	.word	0x08007ec3
 8007c3c:	08007ec3 	.word	0x08007ec3
 8007c40:	08007cab 	.word	0x08007cab
 8007c44:	08007ec3 	.word	0x08007ec3
 8007c48:	08007ec3 	.word	0x08007ec3
 8007c4c:	08007ec3 	.word	0x08007ec3
 8007c50:	08007ec3 	.word	0x08007ec3
 8007c54:	08007ec3 	.word	0x08007ec3
 8007c58:	08007ec3 	.word	0x08007ec3
 8007c5c:	08007ec3 	.word	0x08007ec3
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007ec3 	.word	0x08007ec3
 8007c68:	08007ec3 	.word	0x08007ec3
 8007c6c:	08007ec3 	.word	0x08007ec3
 8007c70:	08007ec3 	.word	0x08007ec3
 8007c74:	08007ec3 	.word	0x08007ec3
 8007c78:	08007ec3 	.word	0x08007ec3
 8007c7c:	08007ec3 	.word	0x08007ec3
 8007c80:	08007cb7 	.word	0x08007cb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c84:	4b94      	ldr	r3, [pc, #592]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c90:	4b91      	ldr	r3, [pc, #580]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	08db      	lsrs	r3, r3, #3
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	4a90      	ldr	r2, [pc, #576]	@ (8007edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ca2:	e111      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ca4:	4b8d      	ldr	r3, [pc, #564]	@ (8007edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ca6:	61bb      	str	r3, [r7, #24]
      break;
 8007ca8:	e10e      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007caa:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007cac:	61bb      	str	r3, [r7, #24]
      break;
 8007cae:	e10b      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007cb0:	4b8c      	ldr	r3, [pc, #560]	@ (8007ee4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007cb2:	61bb      	str	r3, [r7, #24]
      break;
 8007cb4:	e108      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cb6:	4b88      	ldr	r3, [pc, #544]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007cc0:	4b85      	ldr	r3, [pc, #532]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ccc:	4b82      	ldr	r3, [pc, #520]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cd6:	4b80      	ldr	r3, [pc, #512]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80e1 	beq.w	8007ebc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	f000 8083 	beq.w	8007e08 <HAL_RCC_GetSysClockFreq+0x204>
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	f200 80a1 	bhi.w	8007e4c <HAL_RCC_GetSysClockFreq+0x248>
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_RCC_GetSysClockFreq+0x114>
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d056      	beq.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d16:	e099      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d18:	4b6f      	ldr	r3, [pc, #444]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02d      	beq.n	8007d80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d24:	4b6c      	ldr	r3, [pc, #432]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8007edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4e:	4b62      	ldr	r3, [pc, #392]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d7e:	e087      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007eec <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d92:	4b51      	ldr	r3, [pc, #324]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007da6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dc2:	e065      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd6:	4b40      	ldr	r3, [pc, #256]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e06:	e043      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ef4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e4a:	e021      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e90:	4b11      	ldr	r3, [pc, #68]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e94:	0a5b      	lsrs	r3, r3, #9
 8007e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb4:	ee17 3a90 	vmov	r3, s15
 8007eb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007eba:	e005      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
      break;
 8007ec0:	e002      	b.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ec2:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ec4:	61bb      	str	r3, [r7, #24]
      break;
 8007ec6:	bf00      	nop
  }

  return sysclockfreq;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3724      	adds	r7, #36	@ 0x24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	03d09000 	.word	0x03d09000
 8007ee0:	003d0900 	.word	0x003d0900
 8007ee4:	00f42400 	.word	0x00f42400
 8007ee8:	46000000 	.word	0x46000000
 8007eec:	4c742400 	.word	0x4c742400
 8007ef0:	4a742400 	.word	0x4a742400
 8007ef4:	4b742400 	.word	0x4b742400

08007ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007efe:	f7ff fe81 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	490f      	ldr	r1, [pc, #60]	@ (8007f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8007f10:	5ccb      	ldrb	r3, [r1, r3]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8007f26:	5cd3      	ldrb	r3, [r2, r3]
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f32:	4a07      	ldr	r2, [pc, #28]	@ (8007f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f36:	4a07      	ldr	r2, [pc, #28]	@ (8007f54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	08011450 	.word	0x08011450
 8007f50:	24000004 	.word	0x24000004
 8007f54:	24000000 	.word	0x24000000

08007f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f5c:	f7ff ffcc 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	091b      	lsrs	r3, r3, #4
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	4904      	ldr	r1, [pc, #16]	@ (8007f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f6e:	5ccb      	ldrb	r3, [r1, r3]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	08011450 	.word	0x08011450

08007f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f88:	b0ca      	sub	sp, #296	@ 0x128
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f96:	2300      	movs	r3, #0
 8007f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007fa8:	2500      	movs	r5, #0
 8007faa:	ea54 0305 	orrs.w	r3, r4, r5
 8007fae:	d049      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fba:	d02f      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fc0:	d828      	bhi.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fc6:	d01a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fcc:	d822      	bhi.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fd6:	d007      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fd8:	e01c      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fda:	4bb8      	ldr	r3, [pc, #736]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	4ab7      	ldr	r2, [pc, #732]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fe6:	e01a      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	3308      	adds	r3, #8
 8007fee:	2102      	movs	r1, #2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f002 fb61 	bl	800a6b8 <RCCEx_PLL2_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ffc:	e00f      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	3328      	adds	r3, #40	@ 0x28
 8008004:	2102      	movs	r1, #2
 8008006:	4618      	mov	r0, r3
 8008008:	f002 fc08 	bl	800a81c <RCCEx_PLL3_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008012:	e004      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800801a:	e000      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800801c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008026:	4ba5      	ldr	r3, [pc, #660]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008034:	4aa1      	ldr	r2, [pc, #644]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008036:	430b      	orrs	r3, r1
 8008038:	6513      	str	r3, [r2, #80]	@ 0x50
 800803a:	e003      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008050:	f04f 0900 	mov.w	r9, #0
 8008054:	ea58 0309 	orrs.w	r3, r8, r9
 8008058:	d047      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008060:	2b04      	cmp	r3, #4
 8008062:	d82a      	bhi.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008064:	a201      	add	r2, pc, #4	@ (adr r2, 800806c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	08008081 	.word	0x08008081
 8008070:	0800808f 	.word	0x0800808f
 8008074:	080080a5 	.word	0x080080a5
 8008078:	080080c3 	.word	0x080080c3
 800807c:	080080c3 	.word	0x080080c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008080:	4b8e      	ldr	r3, [pc, #568]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008084:	4a8d      	ldr	r2, [pc, #564]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800808a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800808c:	e01a      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008092:	3308      	adds	r3, #8
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f002 fb0e 	bl	800a6b8 <RCCEx_PLL2_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080a2:	e00f      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a8:	3328      	adds	r3, #40	@ 0x28
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f002 fbb5 	bl	800a81c <RCCEx_PLL3_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080b8:	e004      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080c0:	e000      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80080c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080cc:	4b7b      	ldr	r3, [pc, #492]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d0:	f023 0107 	bic.w	r1, r3, #7
 80080d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	4a78      	ldr	r2, [pc, #480]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080dc:	430b      	orrs	r3, r1
 80080de:	6513      	str	r3, [r2, #80]	@ 0x50
 80080e0:	e003      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80080f6:	f04f 0b00 	mov.w	fp, #0
 80080fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80080fe:	d04c      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800810a:	d030      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800810c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008110:	d829      	bhi.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008112:	2bc0      	cmp	r3, #192	@ 0xc0
 8008114:	d02d      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008116:	2bc0      	cmp	r3, #192	@ 0xc0
 8008118:	d825      	bhi.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800811a:	2b80      	cmp	r3, #128	@ 0x80
 800811c:	d018      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800811e:	2b80      	cmp	r3, #128	@ 0x80
 8008120:	d821      	bhi.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008126:	2b40      	cmp	r3, #64	@ 0x40
 8008128:	d007      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800812a:	e01c      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812c:	4b63      	ldr	r3, [pc, #396]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	4a62      	ldr	r2, [pc, #392]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008138:	e01c      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	3308      	adds	r3, #8
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f002 fab8 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800814e:	e011      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008154:	3328      	adds	r3, #40	@ 0x28
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f002 fb5f 	bl	800a81c <RCCEx_PLL3_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008164:	e006      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800816c:	e002      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800817c:	4b4f      	ldr	r3, [pc, #316]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800817e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008180:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800818a:	4a4c      	ldr	r2, [pc, #304]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800818c:	430b      	orrs	r3, r1
 800818e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008190:	e003      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80081a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80081b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d053      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80081c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081c6:	d035      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80081c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081cc:	d82e      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80081ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081d2:	d031      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80081d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081d8:	d828      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081de:	d01a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80081e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081e4:	d822      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80081ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081ee:	d007      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80081f0:	e01c      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f2:	4b32      	ldr	r3, [pc, #200]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	4a31      	ldr	r2, [pc, #196]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081fe:	e01c      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	3308      	adds	r3, #8
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f002 fa55 	bl	800a6b8 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008214:	e011      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	3328      	adds	r3, #40	@ 0x28
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f002 fafc 	bl	800a81c <RCCEx_PLL3_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800822a:	e006      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008232:	e002      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008242:	4b1e      	ldr	r3, [pc, #120]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008246:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008252:	4a1a      	ldr	r2, [pc, #104]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008254:	430b      	orrs	r3, r1
 8008256:	6593      	str	r3, [r2, #88]	@ 0x58
 8008258:	e003      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800826e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008272:	2300      	movs	r3, #0
 8008274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008278:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d056      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800828a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800828e:	d038      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008294:	d831      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008296:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800829a:	d034      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800829c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80082a0:	d82b      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082a6:	d01d      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80082a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082ac:	d825      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d006      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80082b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082b6:	d00a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80082b8:	e01f      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c0:	4ba2      	ldr	r3, [pc, #648]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c4:	4aa1      	ldr	r2, [pc, #644]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082cc:	e01c      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	3308      	adds	r3, #8
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 f9ee 	bl	800a6b8 <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80082e2:	e011      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e8:	3328      	adds	r3, #40	@ 0x28
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f002 fa95 	bl	800a81c <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082f8:	e006      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008300:	e002      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008310:	4b8e      	ldr	r3, [pc, #568]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008314:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008320:	4a8a      	ldr	r2, [pc, #552]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008322:	430b      	orrs	r3, r1
 8008324:	6593      	str	r3, [r2, #88]	@ 0x58
 8008326:	e003      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800833c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008340:	2300      	movs	r3, #0
 8008342:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008346:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800834a:	460b      	mov	r3, r1
 800834c:	4313      	orrs	r3, r2
 800834e:	d03a      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008356:	2b30      	cmp	r3, #48	@ 0x30
 8008358:	d01f      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800835a:	2b30      	cmp	r3, #48	@ 0x30
 800835c:	d819      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800835e:	2b20      	cmp	r3, #32
 8008360:	d00c      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008362:	2b20      	cmp	r3, #32
 8008364:	d815      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d019      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800836a:	2b10      	cmp	r3, #16
 800836c:	d111      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800836e:	4b77      	ldr	r3, [pc, #476]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	4a76      	ldr	r2, [pc, #472]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800837a:	e011      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	3308      	adds	r3, #8
 8008382:	2102      	movs	r1, #2
 8008384:	4618      	mov	r0, r3
 8008386:	f002 f997 	bl	800a6b8 <RCCEx_PLL2_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008398:	e002      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800839e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083a8:	4b68      	ldr	r3, [pc, #416]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b6:	4a65      	ldr	r2, [pc, #404]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083bc:	e003      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80083d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80083dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4313      	orrs	r3, r2
 80083e4:	d051      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083f0:	d035      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80083f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083f6:	d82e      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80083f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083fc:	d031      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80083fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008402:	d828      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008408:	d01a      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800840a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800840e:	d822      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008418:	d007      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800841a:	e01c      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841c:	4b4b      	ldr	r3, [pc, #300]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008420:	4a4a      	ldr	r2, [pc, #296]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008428:	e01c      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842e:	3308      	adds	r3, #8
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f002 f940 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800843e:	e011      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008444:	3328      	adds	r3, #40	@ 0x28
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f002 f9e7 	bl	800a81c <RCCEx_PLL3_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008454:	e006      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800845c:	e002      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800846c:	4b37      	ldr	r3, [pc, #220]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800846e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008470:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800847a:	4a34      	ldr	r2, [pc, #208]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800847c:	430b      	orrs	r3, r1
 800847e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008480:	e003      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800849a:	2300      	movs	r3, #0
 800849c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80084a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d056      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084b4:	d033      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80084b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084ba:	d82c      	bhi.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80084bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084c0:	d02f      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80084c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084c6:	d826      	bhi.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80084c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084cc:	d02b      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80084ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084d2:	d820      	bhi.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80084d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084d8:	d012      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80084da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084de:	d81a      	bhi.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d022      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80084e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e8:	d115      	bne.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ee:	3308      	adds	r3, #8
 80084f0:	2101      	movs	r1, #1
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 f8e0 	bl	800a6b8 <RCCEx_PLL2_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80084fe:	e015      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	3328      	adds	r3, #40	@ 0x28
 8008506:	2101      	movs	r1, #1
 8008508:	4618      	mov	r0, r3
 800850a:	f002 f987 	bl	800a81c <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008514:	e00a      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800851c:	e006      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800851e:	bf00      	nop
 8008520:	e004      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008522:	bf00      	nop
 8008524:	e002      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008526:	bf00      	nop
 8008528:	e000      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800852a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008534:	4b05      	ldr	r3, [pc, #20]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008538:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008542:	4a02      	ldr	r2, [pc, #8]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008544:	430b      	orrs	r3, r1
 8008546:	6513      	str	r3, [r2, #80]	@ 0x50
 8008548:	e006      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800854a:	bf00      	nop
 800854c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800856e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d055      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008584:	d033      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800858a:	d82c      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008590:	d02f      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008596:	d826      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800859c:	d02b      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800859e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085a2:	d820      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a8:	d012      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80085aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ae:	d81a      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d022      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b8:	d115      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085be:	3308      	adds	r3, #8
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f002 f878 	bl	800a6b8 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80085ce:	e015      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d4:	3328      	adds	r3, #40	@ 0x28
 80085d6:	2101      	movs	r1, #1
 80085d8:	4618      	mov	r0, r3
 80085da:	f002 f91f 	bl	800a81c <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80085e4:	e00a      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ec:	e006      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085ee:	bf00      	nop
 80085f0:	e004      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085f2:	bf00      	nop
 80085f4:	e002      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008604:	4ba3      	ldr	r3, [pc, #652]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008608:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008614:	4a9f      	ldr	r2, [pc, #636]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008616:	430b      	orrs	r3, r1
 8008618:	6593      	str	r3, [r2, #88]	@ 0x58
 800861a:	e003      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800863a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	d037      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800864e:	d00e      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008654:	d816      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d018      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800865a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800865e:	d111      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008660:	4b8c      	ldr	r3, [pc, #560]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	4a8b      	ldr	r2, [pc, #556]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800866a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800866c:	e00f      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008672:	3308      	adds	r3, #8
 8008674:	2101      	movs	r1, #1
 8008676:	4618      	mov	r0, r3
 8008678:	f002 f81e 	bl	800a6b8 <RCCEx_PLL2_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008682:	e004      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800868a:	e000      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800868c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008696:	4b7f      	ldr	r3, [pc, #508]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800869a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a4:	4a7b      	ldr	r2, [pc, #492]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80086aa:	e003      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80086c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d039      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d81c      	bhi.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80086de:	a201      	add	r2, pc, #4	@ (adr r2, 80086e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008721 	.word	0x08008721
 80086e8:	080086f5 	.word	0x080086f5
 80086ec:	08008703 	.word	0x08008703
 80086f0:	08008721 	.word	0x08008721
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f4:	4b67      	ldr	r3, [pc, #412]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f8:	4a66      	ldr	r2, [pc, #408]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008700:	e00f      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008706:	3308      	adds	r3, #8
 8008708:	2102      	movs	r1, #2
 800870a:	4618      	mov	r0, r3
 800870c:	f001 ffd4 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008710:	4603      	mov	r3, r0
 8008712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008716:	e004      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800871e:	e000      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800872a:	4b5a      	ldr	r3, [pc, #360]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800872c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800872e:	f023 0103 	bic.w	r1, r3, #3
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008738:	4a56      	ldr	r2, [pc, #344]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800873a:	430b      	orrs	r3, r1
 800873c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800873e:	e003      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008758:	2300      	movs	r3, #0
 800875a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800875e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008762:	460b      	mov	r3, r1
 8008764:	4313      	orrs	r3, r2
 8008766:	f000 809f 	beq.w	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800876a:	4b4b      	ldr	r3, [pc, #300]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a4a      	ldr	r2, [pc, #296]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008776:	f7fc fae9 	bl	8004d4c <HAL_GetTick>
 800877a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800877e:	e00b      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008780:	f7fc fae4 	bl	8004d4c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b64      	cmp	r3, #100	@ 0x64
 800878e:	d903      	bls.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008796:	e005      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008798:	4b3f      	ldr	r3, [pc, #252]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0ed      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80087a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d179      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80087ac:	4b39      	ldr	r3, [pc, #228]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087b8:	4053      	eors	r3, r2
 80087ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d015      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087c2:	4b34      	ldr	r3, [pc, #208]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087ce:	4b31      	ldr	r3, [pc, #196]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d2:	4a30      	ldr	r2, [pc, #192]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087da:	4b2e      	ldr	r3, [pc, #184]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087de:	4a2d      	ldr	r2, [pc, #180]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80087e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80087ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087fa:	d118      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fc:	f7fc faa6 	bl	8004d4c <HAL_GetTick>
 8008800:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008804:	e00d      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008806:	f7fc faa1 	bl	8004d4c <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008816:	429a      	cmp	r2, r3
 8008818:	d903      	bls.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008820:	e005      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008822:	4b1c      	ldr	r3, [pc, #112]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0eb      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800882e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008832:	2b00      	cmp	r3, #0
 8008834:	d129      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800883e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008846:	d10e      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008848:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008858:	091a      	lsrs	r2, r3, #4
 800885a:	4b10      	ldr	r3, [pc, #64]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800885c:	4013      	ands	r3, r2
 800885e:	4a0d      	ldr	r2, [pc, #52]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008860:	430b      	orrs	r3, r1
 8008862:	6113      	str	r3, [r2, #16]
 8008864:	e005      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008866:	4b0b      	ldr	r3, [pc, #44]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	4a0a      	ldr	r2, [pc, #40]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800886c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008870:	6113      	str	r3, [r2, #16]
 8008872:	4b08      	ldr	r3, [pc, #32]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008874:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800887e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008882:	4a04      	ldr	r2, [pc, #16]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008884:	430b      	orrs	r3, r1
 8008886:	6713      	str	r3, [r2, #112]	@ 0x70
 8008888:	e00e      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800888a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800888e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008892:	e009      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008894:	58024400 	.word	0x58024400
 8008898:	58024800 	.word	0x58024800
 800889c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f002 0301 	and.w	r3, r2, #1
 80088b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f000 8089 	beq.w	80089dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088d0:	2b28      	cmp	r3, #40	@ 0x28
 80088d2:	d86b      	bhi.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80088d4:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	080089b5 	.word	0x080089b5
 80088e0:	080089ad 	.word	0x080089ad
 80088e4:	080089ad 	.word	0x080089ad
 80088e8:	080089ad 	.word	0x080089ad
 80088ec:	080089ad 	.word	0x080089ad
 80088f0:	080089ad 	.word	0x080089ad
 80088f4:	080089ad 	.word	0x080089ad
 80088f8:	080089ad 	.word	0x080089ad
 80088fc:	08008981 	.word	0x08008981
 8008900:	080089ad 	.word	0x080089ad
 8008904:	080089ad 	.word	0x080089ad
 8008908:	080089ad 	.word	0x080089ad
 800890c:	080089ad 	.word	0x080089ad
 8008910:	080089ad 	.word	0x080089ad
 8008914:	080089ad 	.word	0x080089ad
 8008918:	080089ad 	.word	0x080089ad
 800891c:	08008997 	.word	0x08008997
 8008920:	080089ad 	.word	0x080089ad
 8008924:	080089ad 	.word	0x080089ad
 8008928:	080089ad 	.word	0x080089ad
 800892c:	080089ad 	.word	0x080089ad
 8008930:	080089ad 	.word	0x080089ad
 8008934:	080089ad 	.word	0x080089ad
 8008938:	080089ad 	.word	0x080089ad
 800893c:	080089b5 	.word	0x080089b5
 8008940:	080089ad 	.word	0x080089ad
 8008944:	080089ad 	.word	0x080089ad
 8008948:	080089ad 	.word	0x080089ad
 800894c:	080089ad 	.word	0x080089ad
 8008950:	080089ad 	.word	0x080089ad
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089ad 	.word	0x080089ad
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089ad 	.word	0x080089ad
 8008964:	080089ad 	.word	0x080089ad
 8008968:	080089ad 	.word	0x080089ad
 800896c:	080089ad 	.word	0x080089ad
 8008970:	080089ad 	.word	0x080089ad
 8008974:	080089ad 	.word	0x080089ad
 8008978:	080089ad 	.word	0x080089ad
 800897c:	080089b5 	.word	0x080089b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008984:	3308      	adds	r3, #8
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fe95 	bl	800a6b8 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008994:	e00f      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899a:	3328      	adds	r3, #40	@ 0x28
 800899c:	2101      	movs	r1, #1
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 ff3c 	bl	800a81c <RCCEx_PLL3_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80089aa:	e004      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089b2:	e000      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80089b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80089be:	4bbf      	ldr	r3, [pc, #764]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089cc:	4abb      	ldr	r2, [pc, #748]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089ce:	430b      	orrs	r3, r1
 80089d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80089d2:	e003      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 0302 	and.w	r3, r2, #2
 80089e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80089f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d041      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d824      	bhi.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008a06:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a59 	.word	0x08008a59
 8008a10:	08008a25 	.word	0x08008a25
 8008a14:	08008a3b 	.word	0x08008a3b
 8008a18:	08008a59 	.word	0x08008a59
 8008a1c:	08008a59 	.word	0x08008a59
 8008a20:	08008a59 	.word	0x08008a59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a28:	3308      	adds	r3, #8
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 fe43 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a38:	e00f      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3e:	3328      	adds	r3, #40	@ 0x28
 8008a40:	2101      	movs	r1, #1
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 feea 	bl	800a81c <RCCEx_PLL3_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a4e:	e004      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a56:	e000      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a62:	4b96      	ldr	r3, [pc, #600]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a66:	f023 0107 	bic.w	r1, r3, #7
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a70:	4a92      	ldr	r2, [pc, #584]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a72:	430b      	orrs	r3, r1
 8008a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a76:	e003      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f002 0304 	and.w	r3, r2, #4
 8008a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	d044      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa8:	2b05      	cmp	r3, #5
 8008aaa:	d825      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008aac:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008b01 	.word	0x08008b01
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008ae3 	.word	0x08008ae3
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008b01 	.word	0x08008b01
 8008ac8:	08008b01 	.word	0x08008b01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 fdef 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ae0:	e00f      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae6:	3328      	adds	r3, #40	@ 0x28
 8008ae8:	2101      	movs	r1, #1
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 fe96 	bl	800a81c <RCCEx_PLL3_Config>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008af6:	e004      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008afe:	e000      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10b      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0e:	f023 0107 	bic.w	r1, r3, #7
 8008b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b1a:	4a68      	ldr	r2, [pc, #416]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b20:	e003      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f002 0320 	and.w	r3, r2, #32
 8008b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b44:	460b      	mov	r3, r1
 8008b46:	4313      	orrs	r3, r2
 8008b48:	d055      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b56:	d033      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b5c:	d82c      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b62:	d02f      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b68:	d826      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b6e:	d02b      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008b70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b74:	d820      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b7a:	d012      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b80:	d81a      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d022      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b8a:	d115      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b90:	3308      	adds	r3, #8
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 fd8f 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ba0:	e015      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba6:	3328      	adds	r3, #40	@ 0x28
 8008ba8:	2102      	movs	r1, #2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fe36 	bl	800a81c <RCCEx_PLL3_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008bb6:	e00a      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bbe:	e006      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008bc0:	bf00      	nop
 8008bc2:	e004      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bd6:	4b39      	ldr	r3, [pc, #228]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be6:	4a35      	ldr	r2, [pc, #212]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008be8:	430b      	orrs	r3, r1
 8008bea:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bec:	e003      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c06:	2300      	movs	r3, #0
 8008c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4313      	orrs	r3, r2
 8008c14:	d058      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008c22:	d033      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008c24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008c28:	d82c      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c2e:	d02f      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c34:	d826      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c3a:	d02b      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c40:	d820      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c46:	d012      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c4c:	d81a      	bhi.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d022      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c56:	d115      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 fd29 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c6c:	e015      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c72:	3328      	adds	r3, #40	@ 0x28
 8008c74:	2102      	movs	r1, #2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fdd0 	bl	800a81c <RCCEx_PLL3_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c82:	e00a      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c8a:	e006      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c8c:	bf00      	nop
 8008c8e:	e004      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c90:	bf00      	nop
 8008c92:	e002      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c94:	bf00      	nop
 8008c96:	e000      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10e      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ca2:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb2:	4a02      	ldr	r2, [pc, #8]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008cba:	bf00      	nop
 8008cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	d055      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cf0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008cf4:	d033      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008cf6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008cfa:	d82c      	bhi.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d00:	d02f      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d06:	d826      	bhi.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008d0c:	d02b      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008d0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008d12:	d820      	bhi.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d18:	d012      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d1e:	d81a      	bhi.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d022      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d28:	d115      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2e:	3308      	adds	r3, #8
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 fcc0 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d3e:	e015      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	3328      	adds	r3, #40	@ 0x28
 8008d46:	2102      	movs	r1, #2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 fd67 	bl	800a81c <RCCEx_PLL3_Config>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d54:	e00a      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e004      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d62:	bf00      	nop
 8008d64:	e002      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d66:	bf00      	nop
 8008d68:	e000      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d74:	4ba1      	ldr	r3, [pc, #644]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d84:	4a9d      	ldr	r2, [pc, #628]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d86:	430b      	orrs	r3, r1
 8008d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d8a:	e003      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f002 0308 	and.w	r3, r2, #8
 8008da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008da4:	2300      	movs	r3, #0
 8008da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d01e      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc0:	d10c      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc6:	3328      	adds	r3, #40	@ 0x28
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fd26 	bl	800a81c <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ddc:	4b87      	ldr	r3, [pc, #540]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dec:	4a83      	ldr	r2, [pc, #524]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dee:	430b      	orrs	r3, r1
 8008df0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f002 0310 	and.w	r3, r2, #16
 8008dfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d01e      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e1e:	d10c      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e24:	3328      	adds	r3, #40	@ 0x28
 8008e26:	2102      	movs	r1, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fcf7 	bl	800a81c <RCCEx_PLL3_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e3a:	4b70      	ldr	r3, [pc, #448]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	d03e      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e7c:	d022      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e82:	d81b      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e8c:	d00b      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008e8e:	e015      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e94:	3308      	adds	r3, #8
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fc0d 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ea4:	e00f      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eaa:	3328      	adds	r3, #40	@ 0x28
 8008eac:	2102      	movs	r1, #2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fcb4 	bl	800a81c <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ece:	4b4b      	ldr	r3, [pc, #300]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ede:	4a47      	ldr	r2, [pc, #284]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ee4:	e003      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008efa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008efc:	2300      	movs	r3, #0
 8008efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008f04:	460b      	mov	r3, r1
 8008f06:	4313      	orrs	r3, r2
 8008f08:	d03b      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f16:	d01f      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008f18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f1c:	d818      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f22:	d003      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f28:	d007      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008f2a:	e011      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f2c:	4b33      	ldr	r3, [pc, #204]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	4a32      	ldr	r2, [pc, #200]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f38:	e00f      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	3328      	adds	r3, #40	@ 0x28
 8008f40:	2101      	movs	r1, #1
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fc6a 	bl	800a81c <RCCEx_PLL3_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f4e:	e004      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f56:	e000      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10b      	bne.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f62:	4b26      	ldr	r3, [pc, #152]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f72:	4a22      	ldr	r2, [pc, #136]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f74:	430b      	orrs	r3, r1
 8008f76:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f78:	e003      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008f8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f90:	2300      	movs	r3, #0
 8008f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d034      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fac:	d007      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008fae:	e011      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb0:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a11      	ldr	r2, [pc, #68]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008fbc:	e00e      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	2102      	movs	r1, #2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 fb76 	bl	800a6b8 <RCCEx_PLL2_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10d      	bne.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff2:	4a02      	ldr	r2, [pc, #8]	@ (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ff8:	e006      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009016:	2300      	movs	r3, #0
 8009018:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800901a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800901e:	460b      	mov	r3, r1
 8009020:	4313      	orrs	r3, r2
 8009022:	d00c      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	3328      	adds	r3, #40	@ 0x28
 800902a:	2102      	movs	r1, #2
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fbf5 	bl	800a81c <RCCEx_PLL3_Config>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800904a:	663b      	str	r3, [r7, #96]	@ 0x60
 800904c:	2300      	movs	r3, #0
 800904e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009050:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009054:	460b      	mov	r3, r1
 8009056:	4313      	orrs	r3, r2
 8009058:	d038      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009066:	d018      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800906c:	d811      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800906e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009072:	d014      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009078:	d80b      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800907e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009082:	d106      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009084:	4bc3      	ldr	r3, [pc, #780]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009088:	4ac2      	ldr	r2, [pc, #776]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800908a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800908e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009090:	e008      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009098:	e004      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800909a:	bf00      	nop
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80090a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090ac:	4bb9      	ldr	r3, [pc, #740]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80090b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090bc:	4ab5      	ldr	r2, [pc, #724]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090be:	430b      	orrs	r3, r1
 80090c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80090c2:	e003      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80090d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090da:	2300      	movs	r3, #0
 80090dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80090e2:	460b      	mov	r3, r1
 80090e4:	4313      	orrs	r3, r2
 80090e6:	d009      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090e8:	4baa      	ldr	r3, [pc, #680]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f6:	4aa7      	ldr	r2, [pc, #668]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009108:	653b      	str	r3, [r7, #80]	@ 0x50
 800910a:	2300      	movs	r3, #0
 800910c:	657b      	str	r3, [r7, #84]	@ 0x54
 800910e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d00a      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009118:	4b9e      	ldr	r3, [pc, #632]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009124:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009128:	4a9a      	ldr	r2, [pc, #616]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912a:	430b      	orrs	r3, r1
 800912c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800913a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913c:	2300      	movs	r3, #0
 800913e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009140:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009144:	460b      	mov	r3, r1
 8009146:	4313      	orrs	r3, r2
 8009148:	d009      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800914a:	4b92      	ldr	r3, [pc, #584]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800914c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009158:	4a8e      	ldr	r2, [pc, #568]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800915a:	430b      	orrs	r3, r1
 800915c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800916a:	643b      	str	r3, [r7, #64]	@ 0x40
 800916c:	2300      	movs	r3, #0
 800916e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009170:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009174:	460b      	mov	r3, r1
 8009176:	4313      	orrs	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800917a:	4b86      	ldr	r3, [pc, #536]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	4a85      	ldr	r2, [pc, #532]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009180:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009184:	6113      	str	r3, [r2, #16]
 8009186:	4b83      	ldr	r3, [pc, #524]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009188:	6919      	ldr	r1, [r3, #16]
 800918a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009192:	4a80      	ldr	r2, [pc, #512]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009194:	430b      	orrs	r3, r1
 8009196:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80091a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80091ae:	460b      	mov	r3, r1
 80091b0:	4313      	orrs	r3, r2
 80091b2:	d009      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80091b4:	4b77      	ldr	r3, [pc, #476]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c2:	4a74      	ldr	r2, [pc, #464]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091c4:	430b      	orrs	r3, r1
 80091c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80091d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80091d6:	2300      	movs	r3, #0
 80091d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d00a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80091ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091f4:	4a67      	ldr	r2, [pc, #412]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091f6:	430b      	orrs	r3, r1
 80091f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	2100      	movs	r1, #0
 8009204:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800920c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009210:	460b      	mov	r3, r1
 8009212:	4313      	orrs	r3, r2
 8009214:	d011      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921a:	3308      	adds	r3, #8
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fa4a 	bl	800a6b8 <RCCEx_PLL2_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800922a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	2100      	movs	r1, #0
 8009244:	6239      	str	r1, [r7, #32]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	627b      	str	r3, [r7, #36]	@ 0x24
 800924c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009250:	460b      	mov	r3, r1
 8009252:	4313      	orrs	r3, r2
 8009254:	d011      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925a:	3308      	adds	r3, #8
 800925c:	2101      	movs	r1, #1
 800925e:	4618      	mov	r0, r3
 8009260:	f001 fa2a 	bl	800a6b8 <RCCEx_PLL2_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800926a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	2100      	movs	r1, #0
 8009284:	61b9      	str	r1, [r7, #24]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009290:	460b      	mov	r3, r1
 8009292:	4313      	orrs	r3, r2
 8009294:	d011      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929a:	3308      	adds	r3, #8
 800929c:	2102      	movs	r1, #2
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 fa0a 	bl	800a6b8 <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	2100      	movs	r1, #0
 80092c4:	6139      	str	r1, [r7, #16]
 80092c6:	f003 0308 	and.w	r3, r3, #8
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80092d0:	460b      	mov	r3, r1
 80092d2:	4313      	orrs	r3, r2
 80092d4:	d011      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092da:	3328      	adds	r3, #40	@ 0x28
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fa9c 	bl	800a81c <RCCEx_PLL3_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80092ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	2100      	movs	r1, #0
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	f003 0310 	and.w	r3, r3, #16
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009310:	460b      	mov	r3, r1
 8009312:	4313      	orrs	r3, r2
 8009314:	d011      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931a:	3328      	adds	r3, #40	@ 0x28
 800931c:	2101      	movs	r1, #1
 800931e:	4618      	mov	r0, r3
 8009320:	f001 fa7c 	bl	800a81c <RCCEx_PLL3_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	2100      	movs	r1, #0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d011      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	3328      	adds	r3, #40	@ 0x28
 800935c:	2102      	movs	r1, #2
 800935e:	4618      	mov	r0, r3
 8009360:	f001 fa5c 	bl	800a81c <RCCEx_PLL3_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800936a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800937a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	e000      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
}
 8009388:	4618      	mov	r0, r3
 800938a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800938e:	46bd      	mov	sp, r7
 8009390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009394:	58024400 	.word	0x58024400

08009398 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b090      	sub	sp, #64	@ 0x40
 800939c:	af00      	add	r7, sp, #0
 800939e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80093aa:	430b      	orrs	r3, r1
 80093ac:	f040 8094 	bne.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80093b0:	4b9e      	ldr	r3, [pc, #632]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2b04      	cmp	r3, #4
 80093be:	f200 8087 	bhi.w	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80093c2:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	08009405 	.word	0x08009405
 80093d0:	0800942d 	.word	0x0800942d
 80093d4:	080094c9 	.word	0x080094c9
 80093d8:	08009455 	.word	0x08009455
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093dc:	4b93      	ldr	r3, [pc, #588]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093e8:	d108      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 f810 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	f000 bd45 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009400:	f000 bd41 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009404:	4b89      	ldr	r3, [pc, #548]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800940c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009410:	d108      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f000 fd54 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009420:	f000 bd31 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009428:	f000 bd2d 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800942c:	4b7f      	ldr	r3, [pc, #508]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009438:	d108      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943a:	f107 030c 	add.w	r3, r7, #12
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fe94 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009448:	f000 bd1d 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	f000 bd19 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009454:	4b75      	ldr	r3, [pc, #468]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800945e:	4b73      	ldr	r3, [pc, #460]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b04      	cmp	r3, #4
 8009468:	d10c      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009470:	4b6e      	ldr	r3, [pc, #440]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	08db      	lsrs	r3, r3, #3
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	4a6d      	ldr	r2, [pc, #436]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009482:	e01f      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009484:	4b69      	ldr	r3, [pc, #420]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009490:	d106      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009498:	d102      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800949a:	4b66      	ldr	r3, [pc, #408]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800949e:	e011      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094a0:	4b62      	ldr	r3, [pc, #392]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ac:	d106      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b4:	d102      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094b6:	4b60      	ldr	r3, [pc, #384]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094ba:	e003      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094c0:	f000 bce1 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094c4:	f000 bcdf 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094c8:	4b5c      	ldr	r3, [pc, #368]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	f000 bcdb 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d4:	f000 bcd7 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80094e0:	430b      	orrs	r3, r1
 80094e2:	f040 80ad 	bne.w	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80094e6:	4b51      	ldr	r3, [pc, #324]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80094ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f6:	d056      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fe:	f200 8090 	bhi.w	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	2bc0      	cmp	r3, #192	@ 0xc0
 8009506:	f000 8088 	beq.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2bc0      	cmp	r3, #192	@ 0xc0
 800950e:	f200 8088 	bhi.w	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	2b80      	cmp	r3, #128	@ 0x80
 8009516:	d032      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	2b80      	cmp	r3, #128	@ 0x80
 800951c:	f200 8081 	bhi.w	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	2b40      	cmp	r3, #64	@ 0x40
 800952a:	d014      	beq.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800952c:	e079      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800952e:	4b3f      	ldr	r3, [pc, #252]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800953a:	d108      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800953c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009540:	4618      	mov	r0, r3
 8009542:	f000 ff67 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800954a:	f000 bc9c 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009552:	f000 bc98 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009556:	4b35      	ldr	r3, [pc, #212]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800955e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009562:	d108      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009564:	f107 0318 	add.w	r3, r7, #24
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fcab 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009572:	f000 bc88 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957a:	f000 bc84 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800957e:	4b2b      	ldr	r3, [pc, #172]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800958a:	d108      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fdeb 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959a:	f000 bc74 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a2:	f000 bc70 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095a6:	4b21      	ldr	r3, [pc, #132]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095b0:	4b1e      	ldr	r3, [pc, #120]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d10c      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80095bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c2:	4b1a      	ldr	r3, [pc, #104]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	4a18      	ldr	r2, [pc, #96]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d4:	e01f      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095d6:	4b15      	ldr	r3, [pc, #84]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095e2:	d106      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80095e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095ea:	d102      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095ec:	4b11      	ldr	r3, [pc, #68]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f0:	e011      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095f2:	4b0e      	ldr	r3, [pc, #56]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095fe:	d106      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009608:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009612:	f000 bc38 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009616:	f000 bc36 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800961a:	4b08      	ldr	r3, [pc, #32]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800961c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961e:	f000 bc32 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	f000 bc2e 	b.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800962a:	bf00      	nop
 800962c:	58024400 	.word	0x58024400
 8009630:	03d09000 	.word	0x03d09000
 8009634:	003d0900 	.word	0x003d0900
 8009638:	00f42400 	.word	0x00f42400
 800963c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009644:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009648:	430b      	orrs	r3, r1
 800964a:	f040 809c 	bne.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800964e:	4b9e      	ldr	r3, [pc, #632]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009652:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009656:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800965e:	d054      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009666:	f200 808b 	bhi.w	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009670:	f000 8083 	beq.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800967a:	f200 8081 	bhi.w	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009684:	d02f      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800968c:	d878      	bhi.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800969a:	d012      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800969c:	e070      	b.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800969e:	4b8a      	ldr	r3, [pc, #552]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096aa:	d107      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 feaf 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ba:	e3e4      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c0:	e3e1      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096c2:	4b81      	ldr	r3, [pc, #516]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ce:	d107      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096d0:	f107 0318 	add.w	r3, r7, #24
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fbf5 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096de:	e3d2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e4:	e3cf      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096e6:	4b78      	ldr	r3, [pc, #480]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f2:	d107      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f4:	f107 030c 	add.w	r3, r7, #12
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fd37 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e3c0      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e3bd      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800970a:	4b6f      	ldr	r3, [pc, #444]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800970c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009714:	4b6c      	ldr	r3, [pc, #432]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b04      	cmp	r3, #4
 800971e:	d10c      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009726:	4b68      	ldr	r3, [pc, #416]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	08db      	lsrs	r3, r3, #3
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	4a66      	ldr	r2, [pc, #408]	@ (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009732:	fa22 f303 	lsr.w	r3, r2, r3
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009738:	e01e      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800973a:	4b63      	ldr	r3, [pc, #396]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009746:	d106      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800974e:	d102      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009750:	4b5f      	ldr	r3, [pc, #380]	@ (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009754:	e010      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009756:	4b5c      	ldr	r3, [pc, #368]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800975e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009762:	d106      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976a:	d102      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800976c:	4b59      	ldr	r3, [pc, #356]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009770:	e002      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009776:	e386      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009778:	e385      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800977a:	4b57      	ldr	r3, [pc, #348]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977e:	e382      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e37f      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800978a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800978e:	430b      	orrs	r3, r1
 8009790:	f040 80a7 	bne.w	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009794:	4b4c      	ldr	r3, [pc, #304]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009798:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800979c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097a4:	d055      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097ac:	f200 8096 	bhi.w	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80097b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097b6:	f000 8084 	beq.w	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097c0:	f200 808c 	bhi.w	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097ca:	d030      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097d2:	f200 8083 	bhi.w	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80097dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097e2:	d012      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80097e4:	e07a      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097e6:	4b38      	ldr	r3, [pc, #224]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097f2:	d107      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fe0b 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009802:	e340      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009808:	e33d      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009816:	d107      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009818:	f107 0318 	add.w	r3, r7, #24
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fb51 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009826:	e32e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982c:	e32b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800982e:	4b26      	ldr	r3, [pc, #152]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800983a:	d107      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800983c:	f107 030c 	add.w	r3, r7, #12
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fc93 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984a:	e31c      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009850:	e319      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009852:	4b1d      	ldr	r3, [pc, #116]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800985c:	4b1a      	ldr	r3, [pc, #104]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d10c      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986e:	4b16      	ldr	r3, [pc, #88]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	4a14      	ldr	r2, [pc, #80]	@ (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009880:	e01e      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009882:	4b11      	ldr	r3, [pc, #68]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800988e:	d106      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009896:	d102      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009898:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800989c:	e010      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800989e:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098aa:	d106      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80098ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098b4:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b8:	e002      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098be:	e2e2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098c0:	e2e1      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098c2:	4b05      	ldr	r3, [pc, #20]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c6:	e2de      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	003d0900 	.word	0x003d0900
 80098d4:	00f42400 	.word	0x00f42400
 80098d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e0:	e2d1      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80098e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80098ea:	430b      	orrs	r3, r1
 80098ec:	f040 809c 	bne.w	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80098f0:	4b93      	ldr	r3, [pc, #588]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80098f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009900:	d054      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009908:	f200 808b 	bhi.w	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009912:	f000 8083 	beq.w	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800991c:	f200 8081 	bhi.w	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009926:	d02f      	beq.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800992e:	d878      	bhi.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	2b00      	cmp	r3, #0
 8009934:	d004      	beq.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800993c:	d012      	beq.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800993e:	e070      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009940:	4b7f      	ldr	r3, [pc, #508]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800994c:	d107      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800994e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fd5e 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995c:	e293      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009962:	e290      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009964:	4b76      	ldr	r3, [pc, #472]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800996c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009970:	d107      	bne.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009972:	f107 0318 	add.w	r3, r7, #24
 8009976:	4618      	mov	r0, r3
 8009978:	f000 faa4 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009980:	e281      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009986:	e27e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009988:	4b6d      	ldr	r3, [pc, #436]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009994:	d107      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009996:	f107 030c 	add.w	r3, r7, #12
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fbe6 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a4:	e26f      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099aa:	e26c      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099ac:	4b64      	ldr	r3, [pc, #400]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099b6:	4b62      	ldr	r3, [pc, #392]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d10c      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80099c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	08db      	lsrs	r3, r3, #3
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	4a5c      	ldr	r2, [pc, #368]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80099d4:	fa22 f303 	lsr.w	r3, r2, r3
 80099d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099da:	e01e      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099dc:	4b58      	ldr	r3, [pc, #352]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e8:	d106      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80099ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f0:	d102      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099f2:	4b55      	ldr	r3, [pc, #340]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099f6:	e010      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099f8:	4b51      	ldr	r3, [pc, #324]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a04:	d106      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a0c:	d102      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a12:	e002      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a18:	e235      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a1a:	e234      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a1c:	4b4c      	ldr	r3, [pc, #304]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a20:	e231      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a26:	e22e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009a30:	430b      	orrs	r3, r1
 8009a32:	f040 808f 	bne.w	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009a36:	4b42      	ldr	r3, [pc, #264]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a46:	d06b      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a4e:	d874      	bhi.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a56:	d056      	beq.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a5e:	d86c      	bhi.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a66:	d03b      	beq.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a6e:	d864      	bhi.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a76:	d021      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a7e:	d85c      	bhi.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a8c:	d004      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009a8e:	e054      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009a90:	f7fe fa62 	bl	8007f58 <HAL_RCC_GetPCLK1Freq>
 8009a94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a96:	e1f6      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a98:	4b29      	ldr	r3, [pc, #164]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aa4:	d107      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa6:	f107 0318 	add.w	r3, r7, #24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fa0a 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ab4:	e1e7      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aba:	e1e4      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009abc:	4b20      	ldr	r3, [pc, #128]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ac8:	d107      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aca:	f107 030c 	add.w	r3, r7, #12
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fb4c 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad8:	e1d5      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ade:	e1d2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ae0:	4b17      	ldr	r3, [pc, #92]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d109      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aec:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	08db      	lsrs	r3, r3, #3
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	4a13      	ldr	r2, [pc, #76]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
 8009afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009afe:	e1c2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b04:	e1bf      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b06:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b12:	d102      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009b14:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e1b5      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e1b2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b20:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b2c:	d102      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009b2e:	4b07      	ldr	r3, [pc, #28]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b32:	e1a8      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b38:	e1a5      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3e:	e1a2      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b40:	58024400 	.word	0x58024400
 8009b44:	03d09000 	.word	0x03d09000
 8009b48:	003d0900 	.word	0x003d0900
 8009b4c:	00f42400 	.word	0x00f42400
 8009b50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	d173      	bne.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009b60:	4b9c      	ldr	r3, [pc, #624]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009b68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b70:	d02f      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b78:	d863      	bhi.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b86:	d012      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009b88:	e05b      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b8a:	4b92      	ldr	r3, [pc, #584]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b96:	d107      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f991 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba6:	e16e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bac:	e16b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bae:	4b89      	ldr	r3, [pc, #548]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bba:	d107      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fad3 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bca:	e15c      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd0:	e159      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bd2:	4b80      	ldr	r3, [pc, #512]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bdc:	4b7d      	ldr	r3, [pc, #500]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d10c      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bee:	4b79      	ldr	r3, [pc, #484]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	4a77      	ldr	r2, [pc, #476]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c00:	e01e      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c02:	4b74      	ldr	r3, [pc, #464]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c0e:	d106      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c16:	d102      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c18:	4b70      	ldr	r3, [pc, #448]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c1c:	e010      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2a:	d106      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c32:	d102      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c34:	4b6a      	ldr	r3, [pc, #424]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c38:	e002      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009c3e:	e122      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c40:	e121      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c46:	e11e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009c50:	430b      	orrs	r3, r1
 8009c52:	d133      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009c54:	4b5f      	ldr	r3, [pc, #380]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c6a:	d012      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009c6c:	e023      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c6e:	4b59      	ldr	r3, [pc, #356]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c7a:	d107      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fbc7 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c8a:	e0fc      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c90:	e0f9      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c92:	4b50      	ldr	r3, [pc, #320]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c9e:	d107      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca0:	f107 0318 	add.w	r3, r7, #24
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 f90d 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cae:	e0ea      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e0e7      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cba:	e0e4      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	f040 808d 	bne.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009cca:	4b42      	ldr	r3, [pc, #264]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cda:	d06b      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ce2:	d874      	bhi.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cea:	d056      	beq.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf2:	d86c      	bhi.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cfa:	d03b      	beq.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d02:	d864      	bhi.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d0a:	d021      	beq.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d12:	d85c      	bhi.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d20:	d004      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009d22:	e054      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d24:	f000 f8b8 	bl	8009e98 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d2a:	e0ac      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d2c:	4b29      	ldr	r3, [pc, #164]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d38:	d107      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d3a:	f107 0318 	add.w	r3, r7, #24
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f8c0 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d48:	e09d      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4e:	e09a      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d50:	4b20      	ldr	r3, [pc, #128]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d5c:	d107      	bne.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5e:	f107 030c 	add.w	r3, r7, #12
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fa02 	bl	800a16c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d6c:	e08b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d72:	e088      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d74:	4b17      	ldr	r3, [pc, #92]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d109      	bne.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d80:	4b14      	ldr	r3, [pc, #80]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	08db      	lsrs	r3, r3, #3
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	4a13      	ldr	r2, [pc, #76]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d92:	e078      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d98:	e075      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da6:	d102      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009da8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dac:	e06b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db2:	e068      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009db4:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc0:	d102      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009dc2:	4b07      	ldr	r3, [pc, #28]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc6:	e05e      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dcc:	e05b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd2:	e058      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	003d0900 	.word	0x003d0900
 8009de0:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009dec:	430b      	orrs	r3, r1
 8009dee:	d148      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009df0:	4b27      	ldr	r3, [pc, #156]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009df8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e00:	d02a      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e08:	d838      	bhi.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d004      	beq.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e16:	d00d      	beq.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009e18:	e030      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e26:	d102      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009e28:	4b1a      	ldr	r3, [pc, #104]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2c:	e02b      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e32:	e028      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e34:	4b16      	ldr	r3, [pc, #88]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e40:	d107      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fae4 	bl	800a414 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e50:	e019      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e56:	e016      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e58:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e64:	d107      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e66:	f107 0318 	add.w	r3, r7, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f82a 	bl	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e74:	e007      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7a:	e004      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e80:	e001      	b.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3740      	adds	r7, #64	@ 0x40
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	58024400 	.word	0x58024400
 8009e94:	00f42400 	.word	0x00f42400

08009e98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e9c:	f7fe f82c 	bl	8007ef8 <HAL_RCC_GetHCLKFreq>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	4b06      	ldr	r3, [pc, #24]	@ (8009ebc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	091b      	lsrs	r3, r3, #4
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	4904      	ldr	r1, [pc, #16]	@ (8009ec0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009eae:	5ccb      	ldrb	r3, [r1, r3]
 8009eb0:	f003 031f 	and.w	r3, r3, #31
 8009eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	08011450 	.word	0x08011450

08009ec4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b089      	sub	sp, #36	@ 0x24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ecc:	4ba1      	ldr	r3, [pc, #644]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed0:	f003 0303 	and.w	r3, r3, #3
 8009ed4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ed6:	4b9f      	ldr	r3, [pc, #636]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eda:	0b1b      	lsrs	r3, r3, #12
 8009edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ee0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ee2:	4b9c      	ldr	r3, [pc, #624]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee6:	091b      	lsrs	r3, r3, #4
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009eee:	4b99      	ldr	r3, [pc, #612]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	fb02 f303 	mul.w	r3, r2, r3
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 8111 	beq.w	800a134 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	f000 8083 	beq.w	800a020 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	f200 80a1 	bhi.w	800a064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d056      	beq.n	8009fdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f2e:	e099      	b.n	800a064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f30:	4b88      	ldr	r3, [pc, #544]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d02d      	beq.n	8009f98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f3c:	4b85      	ldr	r3, [pc, #532]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	08db      	lsrs	r3, r3, #3
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	4a84      	ldr	r2, [pc, #528]	@ (800a158 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f48:	fa22 f303 	lsr.w	r3, r2, r3
 8009f4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	ee07 3a90 	vmov	s15, r3
 8009f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f66:	4b7b      	ldr	r3, [pc, #492]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f96:	e087      	b.n	800a0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	ee07 3a90 	vmov	s15, r3
 8009f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a160 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009faa:	4b6a      	ldr	r3, [pc, #424]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fda:	e065      	b.n	800a0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fee:	4b59      	ldr	r3, [pc, #356]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a002:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a01e:	e043      	b.n	800a0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a168 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a032:	4b48      	ldr	r3, [pc, #288]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a042:	ed97 6a03 	vldr	s12, [r7, #12]
 800a046:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a062:	e021      	b.n	800a0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a076:	4b37      	ldr	r3, [pc, #220]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a086:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a15c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ac:	0a5b      	lsrs	r3, r3, #9
 800a0ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ce:	ee17 2a90 	vmov	r2, s15
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0da:	0c1b      	lsrs	r3, r3, #16
 800a0dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0e0:	ee07 3a90 	vmov	s15, r3
 800a0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fc:	ee17 2a90 	vmov	r2, s15
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a104:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a108:	0e1b      	lsrs	r3, r3, #24
 800a10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a10e:	ee07 3a90 	vmov	s15, r3
 800a112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12a:	ee17 2a90 	vmov	r2, s15
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a132:	e008      	b.n	800a146 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	609a      	str	r2, [r3, #8]
}
 800a146:	bf00      	nop
 800a148:	3724      	adds	r7, #36	@ 0x24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	58024400 	.word	0x58024400
 800a158:	03d09000 	.word	0x03d09000
 800a15c:	46000000 	.word	0x46000000
 800a160:	4c742400 	.word	0x4c742400
 800a164:	4a742400 	.word	0x4a742400
 800a168:	4b742400 	.word	0x4b742400

0800a16c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b089      	sub	sp, #36	@ 0x24
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a174:	4ba1      	ldr	r3, [pc, #644]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	f003 0303 	and.w	r3, r3, #3
 800a17c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a17e:	4b9f      	ldr	r3, [pc, #636]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	0d1b      	lsrs	r3, r3, #20
 800a184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a188:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a18a:	4b9c      	ldr	r3, [pc, #624]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	0a1b      	lsrs	r3, r3, #8
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a196:	4b99      	ldr	r3, [pc, #612]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	fb02 f303 	mul.w	r3, r2, r3
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 8111 	beq.w	800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	f000 8083 	beq.w	800a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	f200 80a1 	bhi.w	800a30c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d056      	beq.n	800a284 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a1d6:	e099      	b.n	800a30c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1d8:	4b88      	ldr	r3, [pc, #544]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d02d      	beq.n	800a240 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1e4:	4b85      	ldr	r3, [pc, #532]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	08db      	lsrs	r3, r3, #3
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	4a84      	ldr	r2, [pc, #528]	@ (800a400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	ee07 3a90 	vmov	s15, r3
 800a1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b7b      	ldr	r3, [pc, #492]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a23e:	e087      	b.n	800a350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a252:	4b6a      	ldr	r3, [pc, #424]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a262:	ed97 6a03 	vldr	s12, [r7, #12]
 800a266:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a282:	e065      	b.n	800a350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a296:	4b59      	ldr	r3, [pc, #356]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2c6:	e043      	b.n	800a350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2da:	4b48      	ldr	r3, [pc, #288]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a30a:	e021      	b.n	800a350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31e:	4b37      	ldr	r3, [pc, #220]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a332:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a34e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a350:	4b2a      	ldr	r3, [pc, #168]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a354:	0a5b      	lsrs	r3, r3, #9
 800a356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a36a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a376:	ee17 2a90 	vmov	r2, s15
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a37e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a394:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a398:	edd7 6a07 	vldr	s13, [r7, #28]
 800a39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a4:	ee17 2a90 	vmov	r2, s15
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a3ac:	4b13      	ldr	r3, [pc, #76]	@ (800a3fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b0:	0e1b      	lsrs	r3, r3, #24
 800a3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d2:	ee17 2a90 	vmov	r2, s15
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a3da:	e008      	b.n	800a3ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	609a      	str	r2, [r3, #8]
}
 800a3ee:	bf00      	nop
 800a3f0:	3724      	adds	r7, #36	@ 0x24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	46000000 	.word	0x46000000
 800a408:	4c742400 	.word	0x4c742400
 800a40c:	4a742400 	.word	0x4a742400
 800a410:	4b742400 	.word	0x4b742400

0800a414 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a414:	b480      	push	{r7}
 800a416:	b089      	sub	sp, #36	@ 0x24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a41c:	4ba0      	ldr	r3, [pc, #640]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a426:	4b9e      	ldr	r3, [pc, #632]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42a:	091b      	lsrs	r3, r3, #4
 800a42c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a430:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a432:	4b9b      	ldr	r3, [pc, #620]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a43c:	4b98      	ldr	r3, [pc, #608]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a440:	08db      	lsrs	r3, r3, #3
 800a442:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	fb02 f303 	mul.w	r3, r2, r3
 800a44c:	ee07 3a90 	vmov	s15, r3
 800a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a454:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 8111 	beq.w	800a682 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	2b02      	cmp	r3, #2
 800a464:	f000 8083 	beq.w	800a56e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	f200 80a1 	bhi.w	800a5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d056      	beq.n	800a52a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a47c:	e099      	b.n	800a5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a47e:	4b88      	ldr	r3, [pc, #544]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b00      	cmp	r3, #0
 800a488:	d02d      	beq.n	800a4e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a48a:	4b85      	ldr	r3, [pc, #532]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	08db      	lsrs	r3, r3, #3
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	4a83      	ldr	r2, [pc, #524]	@ (800a6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a496:	fa22 f303 	lsr.w	r3, r2, r3
 800a49a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	ee07 3a90 	vmov	s15, r3
 800a4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b4:	4b7a      	ldr	r3, [pc, #488]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4bc:	ee07 3a90 	vmov	s15, r3
 800a4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a4cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a4e4:	e087      	b.n	800a5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	ee07 3a90 	vmov	s15, r3
 800a4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a6ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4f8:	4b69      	ldr	r3, [pc, #420]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a500:	ee07 3a90 	vmov	s15, r3
 800a504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a508:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a524:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a528:	e065      	b.n	800a5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	ee07 3a90 	vmov	s15, r3
 800a530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a534:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53c:	4b58      	ldr	r3, [pc, #352]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a550:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a56c:	e043      	b.n	800a5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	ee07 3a90 	vmov	s15, r3
 800a574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a578:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a580:	4b47      	ldr	r3, [pc, #284]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a590:	ed97 6a03 	vldr	s12, [r7, #12]
 800a594:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5b0:	e021      	b.n	800a5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	ee07 3a90 	vmov	s15, r3
 800a5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a6ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c4:	4b36      	ldr	r3, [pc, #216]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5cc:	ee07 3a90 	vmov	s15, r3
 800a5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a5f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fa:	0a5b      	lsrs	r3, r3, #9
 800a5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a600:	ee07 3a90 	vmov	s15, r3
 800a604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a60c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a610:	edd7 6a07 	vldr	s13, [r7, #28]
 800a614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a61c:	ee17 2a90 	vmov	r2, s15
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a624:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64a:	ee17 2a90 	vmov	r2, s15
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a652:	4b13      	ldr	r3, [pc, #76]	@ (800a6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a656:	0e1b      	lsrs	r3, r3, #24
 800a658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a65c:	ee07 3a90 	vmov	s15, r3
 800a660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a678:	ee17 2a90 	vmov	r2, s15
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a680:	e008      	b.n	800a694 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	3724      	adds	r7, #36	@ 0x24
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	03d09000 	.word	0x03d09000
 800a6a8:	46000000 	.word	0x46000000
 800a6ac:	4c742400 	.word	0x4c742400
 800a6b0:	4a742400 	.word	0x4a742400
 800a6b4:	4b742400 	.word	0x4b742400

0800a6b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6c6:	4b53      	ldr	r3, [pc, #332]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d101      	bne.n	800a6d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e099      	b.n	800a80a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6d6:	4b4f      	ldr	r3, [pc, #316]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a4e      	ldr	r2, [pc, #312]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6e2:	f7fa fb33 	bl	8004d4c <HAL_GetTick>
 800a6e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6e8:	e008      	b.n	800a6fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a6ea:	f7fa fb2f 	bl	8004d4c <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d901      	bls.n	800a6fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e086      	b.n	800a80a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6fc:	4b45      	ldr	r3, [pc, #276]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1f0      	bne.n	800a6ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a708:	4b42      	ldr	r3, [pc, #264]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	031b      	lsls	r3, r3, #12
 800a716:	493f      	ldr	r1, [pc, #252]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	3b01      	subs	r3, #1
 800a722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	025b      	lsls	r3, r3, #9
 800a72e:	b29b      	uxth	r3, r3
 800a730:	431a      	orrs	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	3b01      	subs	r3, #1
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a73e:	431a      	orrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	3b01      	subs	r3, #1
 800a746:	061b      	lsls	r3, r3, #24
 800a748:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a74c:	4931      	ldr	r1, [pc, #196]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a752:	4b30      	ldr	r3, [pc, #192]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a756:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	492d      	ldr	r1, [pc, #180]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a760:	4313      	orrs	r3, r2
 800a762:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a764:	4b2b      	ldr	r3, [pc, #172]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a768:	f023 0220 	bic.w	r2, r3, #32
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	4928      	ldr	r1, [pc, #160]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a772:	4313      	orrs	r3, r2
 800a774:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a776:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77a:	4a26      	ldr	r2, [pc, #152]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a782:	4b24      	ldr	r3, [pc, #144]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a786:	4b24      	ldr	r3, [pc, #144]	@ (800a818 <RCCEx_PLL2_Config+0x160>)
 800a788:	4013      	ands	r3, r2
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	69d2      	ldr	r2, [r2, #28]
 800a78e:	00d2      	lsls	r2, r2, #3
 800a790:	4920      	ldr	r1, [pc, #128]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a792:	4313      	orrs	r3, r2
 800a794:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a796:	4b1f      	ldr	r3, [pc, #124]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79a:	4a1e      	ldr	r2, [pc, #120]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a79c:	f043 0310 	orr.w	r3, r3, #16
 800a7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d106      	bne.n	800a7b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ac:	4a19      	ldr	r2, [pc, #100]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a7b4:	e00f      	b.n	800a7d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d106      	bne.n	800a7ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7bc:	4b15      	ldr	r3, [pc, #84]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c0:	4a14      	ldr	r2, [pc, #80]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a7c8:	e005      	b.n	800a7d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7ca:	4b12      	ldr	r3, [pc, #72]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ce:	4a11      	ldr	r2, [pc, #68]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a7d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a0e      	ldr	r2, [pc, #56]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7e2:	f7fa fab3 	bl	8004d4c <HAL_GetTick>
 800a7e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7e8:	e008      	b.n	800a7fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7ea:	f7fa faaf 	bl	8004d4c <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e006      	b.n	800a80a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7fc:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <RCCEx_PLL2_Config+0x15c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f0      	beq.n	800a7ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	58024400 	.word	0x58024400
 800a818:	ffff0007 	.word	0xffff0007

0800a81c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a82a:	4b53      	ldr	r3, [pc, #332]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d101      	bne.n	800a83a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e099      	b.n	800a96e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a83a:	4b4f      	ldr	r3, [pc, #316]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a4e      	ldr	r2, [pc, #312]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a846:	f7fa fa81 	bl	8004d4c <HAL_GetTick>
 800a84a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a84c:	e008      	b.n	800a860 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a84e:	f7fa fa7d 	bl	8004d4c <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d901      	bls.n	800a860 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e086      	b.n	800a96e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a860:	4b45      	ldr	r3, [pc, #276]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1f0      	bne.n	800a84e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a86c:	4b42      	ldr	r3, [pc, #264]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a870:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	051b      	lsls	r3, r3, #20
 800a87a:	493f      	ldr	r1, [pc, #252]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a87c:	4313      	orrs	r3, r2
 800a87e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	3b01      	subs	r3, #1
 800a886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	3b01      	subs	r3, #1
 800a890:	025b      	lsls	r3, r3, #9
 800a892:	b29b      	uxth	r3, r3
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	041b      	lsls	r3, r3, #16
 800a89e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	061b      	lsls	r3, r3, #24
 800a8ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8b0:	4931      	ldr	r1, [pc, #196]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8b6:	4b30      	ldr	r3, [pc, #192]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	492d      	ldr	r1, [pc, #180]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8c8:	4b2b      	ldr	r3, [pc, #172]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	4928      	ldr	r1, [pc, #160]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8da:	4b27      	ldr	r3, [pc, #156]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8de:	4a26      	ldr	r2, [pc, #152]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a8e6:	4b24      	ldr	r3, [pc, #144]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8ea:	4b24      	ldr	r3, [pc, #144]	@ (800a97c <RCCEx_PLL3_Config+0x160>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	69d2      	ldr	r2, [r2, #28]
 800a8f2:	00d2      	lsls	r2, r2, #3
 800a8f4:	4920      	ldr	r1, [pc, #128]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a8fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a904:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d106      	bne.n	800a91a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a90c:	4b1a      	ldr	r3, [pc, #104]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a910:	4a19      	ldr	r2, [pc, #100]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a912:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a916:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a918:	e00f      	b.n	800a93a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d106      	bne.n	800a92e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a920:	4b15      	ldr	r3, [pc, #84]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a924:	4a14      	ldr	r2, [pc, #80]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a926:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a92a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a92c:	e005      	b.n	800a93a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a92e:	4b12      	ldr	r3, [pc, #72]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	4a11      	ldr	r2, [pc, #68]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a934:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a938:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a93a:	4b0f      	ldr	r3, [pc, #60]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a0e      	ldr	r2, [pc, #56]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a946:	f7fa fa01 	bl	8004d4c <HAL_GetTick>
 800a94a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a94c:	e008      	b.n	800a960 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a94e:	f7fa f9fd 	bl	8004d4c <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e006      	b.n	800a96e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a960:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <RCCEx_PLL3_Config+0x15c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	58024400 	.word	0x58024400
 800a97c:	ffff0007 	.word	0xffff0007

0800a980 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e10f      	b.n	800abb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a87      	ldr	r2, [pc, #540]	@ (800abbc <HAL_SPI_Init+0x23c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00f      	beq.n	800a9c2 <HAL_SPI_Init+0x42>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a86      	ldr	r2, [pc, #536]	@ (800abc0 <HAL_SPI_Init+0x240>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00a      	beq.n	800a9c2 <HAL_SPI_Init+0x42>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a84      	ldr	r2, [pc, #528]	@ (800abc4 <HAL_SPI_Init+0x244>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d005      	beq.n	800a9c2 <HAL_SPI_Init+0x42>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	2b0f      	cmp	r3, #15
 800a9bc:	d901      	bls.n	800a9c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e0f7      	b.n	800abb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 f968 	bl	800bc98 <SPI_GetPacketSize>
 800a9c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a7b      	ldr	r2, [pc, #492]	@ (800abbc <HAL_SPI_Init+0x23c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00c      	beq.n	800a9ee <HAL_SPI_Init+0x6e>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a79      	ldr	r2, [pc, #484]	@ (800abc0 <HAL_SPI_Init+0x240>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d007      	beq.n	800a9ee <HAL_SPI_Init+0x6e>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a78      	ldr	r2, [pc, #480]	@ (800abc4 <HAL_SPI_Init+0x244>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d002      	beq.n	800a9ee <HAL_SPI_Init+0x6e>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b08      	cmp	r3, #8
 800a9ec:	d811      	bhi.n	800aa12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9f2:	4a72      	ldr	r2, [pc, #456]	@ (800abbc <HAL_SPI_Init+0x23c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d009      	beq.n	800aa0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a70      	ldr	r2, [pc, #448]	@ (800abc0 <HAL_SPI_Init+0x240>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_SPI_Init+0x8c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a6f      	ldr	r2, [pc, #444]	@ (800abc4 <HAL_SPI_Init+0x244>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d104      	bne.n	800aa16 <HAL_SPI_Init+0x96>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b10      	cmp	r3, #16
 800aa10:	d901      	bls.n	800aa16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e0cd      	b.n	800abb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7f9 fd64 	bl	80044f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0201 	bic.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aa52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa5c:	d119      	bne.n	800aa92 <HAL_SPI_Init+0x112>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa66:	d103      	bne.n	800aa70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d008      	beq.n	800aa82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10c      	bne.n	800aa92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa80:	d107      	bne.n	800aa92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00f      	beq.n	800aabe <HAL_SPI_Init+0x13e>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	2b06      	cmp	r3, #6
 800aaa4:	d90b      	bls.n	800aabe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e007      	b.n	800aace <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aacc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	69da      	ldr	r2, [r3, #28]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad6:	431a      	orrs	r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	431a      	orrs	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae0:	ea42 0103 	orr.w	r1, r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aafe:	431a      	orrs	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	431a      	orrs	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab2e:	ea42 0103 	orr.w	r1, r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d113      	bne.n	800ab6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0201 	bic.w	r2, r2, #1
 800ab7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	40013000 	.word	0x40013000
 800abc0:	40003800 	.word	0x40003800
 800abc4:	40003c00 	.word	0x40003c00

0800abc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	4613      	mov	r3, r2
 800abd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3320      	adds	r3, #32
 800abde:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abe0:	f7fa f8b4 	bl	8004d4c <HAL_GetTick>
 800abe4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d001      	beq.n	800abf6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800abf2:	2302      	movs	r3, #2
 800abf4:	e1d1      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <HAL_SPI_Transmit+0x3a>
 800abfc:	88fb      	ldrh	r3, [r7, #6]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e1c9      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d101      	bne.n	800ac14 <HAL_SPI_Transmit+0x4c>
 800ac10:	2302      	movs	r3, #2
 800ac12:	e1c2      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	88fa      	ldrh	r2, [r7, #6]
 800ac36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	88fa      	ldrh	r2, [r7, #6]
 800ac3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ac6c:	d108      	bne.n	800ac80 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e009      	b.n	800ac94 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ac92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	4b96      	ldr	r3, [pc, #600]	@ (800aef4 <HAL_SPI_Transmit+0x32c>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	88f9      	ldrh	r1, [r7, #6]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	430b      	orrs	r3, r1
 800aca6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0201 	orr.w	r2, r2, #1
 800acb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acc0:	d107      	bne.n	800acd2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d947      	bls.n	800ad6a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800acda:	e03f      	b.n	800ad5c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d114      	bne.n	800ad14 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6812      	ldr	r2, [r2, #0]
 800acf4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acfa:	1d1a      	adds	r2, r3, #4
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ad12:	e023      	b.n	800ad5c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad14:	f7fa f81a 	bl	8004d4c <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d803      	bhi.n	800ad2c <HAL_SPI_Transmit+0x164>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2a:	d102      	bne.n	800ad32 <HAL_SPI_Transmit+0x16a>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d114      	bne.n	800ad5c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 fee2 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e11e      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1b9      	bne.n	800acdc <HAL_SPI_Transmit+0x114>
 800ad68:	e0f1      	b.n	800af4e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	2b07      	cmp	r3, #7
 800ad70:	f240 80e6 	bls.w	800af40 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ad74:	e05d      	b.n	800ae32 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d132      	bne.n	800adea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d918      	bls.n	800adc2 <HAL_SPI_Transmit+0x1fa>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d014      	beq.n	800adc2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6812      	ldr	r2, [r2, #0]
 800ada2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada8:	1d1a      	adds	r2, r3, #4
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b02      	subs	r3, #2
 800adb8:	b29a      	uxth	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800adc0:	e037      	b.n	800ae32 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adc6:	881a      	ldrh	r2, [r3, #0]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800add0:	1c9a      	adds	r2, r3, #2
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800addc:	b29b      	uxth	r3, r3
 800adde:	3b01      	subs	r3, #1
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ade8:	e023      	b.n	800ae32 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adea:	f7f9 ffaf 	bl	8004d4c <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d803      	bhi.n	800ae02 <HAL_SPI_Transmit+0x23a>
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d102      	bne.n	800ae08 <HAL_SPI_Transmit+0x240>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d114      	bne.n	800ae32 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 fe77 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e0b3      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d19b      	bne.n	800ad76 <HAL_SPI_Transmit+0x1ae>
 800ae3e:	e086      	b.n	800af4e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d154      	bne.n	800aef8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d918      	bls.n	800ae8c <HAL_SPI_Transmit+0x2c4>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5e:	2b40      	cmp	r3, #64	@ 0x40
 800ae60:	d914      	bls.n	800ae8c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6812      	ldr	r2, [r2, #0]
 800ae6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae72:	1d1a      	adds	r2, r3, #4
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	3b04      	subs	r3, #4
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ae8a:	e059      	b.n	800af40 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d917      	bls.n	800aec8 <HAL_SPI_Transmit+0x300>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d013      	beq.n	800aec8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aea4:	881a      	ldrh	r2, [r3, #0]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeae:	1c9a      	adds	r2, r3, #2
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	3b02      	subs	r3, #2
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aec6:	e03b      	b.n	800af40 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3320      	adds	r3, #32
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aef2:	e025      	b.n	800af40 <HAL_SPI_Transmit+0x378>
 800aef4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aef8:	f7f9 ff28 	bl	8004d4c <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d803      	bhi.n	800af10 <HAL_SPI_Transmit+0x348>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d102      	bne.n	800af16 <HAL_SPI_Transmit+0x34e>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d114      	bne.n	800af40 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 fdf0 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e02c      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af46:	b29b      	uxth	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f47f af79 	bne.w	800ae40 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2200      	movs	r2, #0
 800af56:	2108      	movs	r1, #8
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 fe6f 	bl	800bc3c <SPI_WaitOnFlagUntilTimeout>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d007      	beq.n	800af74 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af6a:	f043 0220 	orr.w	r2, r3, #32
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 fdc1 	bl	800bafc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800af98:	2300      	movs	r3, #0
  }
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop

0800afa4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	4613      	mov	r3, r2
 800afb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb8:	095b      	lsrs	r3, r3, #5
 800afba:	b29b      	uxth	r3, r3
 800afbc:	3301      	adds	r3, #1
 800afbe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3330      	adds	r3, #48	@ 0x30
 800afc6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afc8:	f7f9 fec0 	bl	8004d4c <HAL_GetTick>
 800afcc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d001      	beq.n	800afde <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800afda:	2302      	movs	r3, #2
 800afdc:	e250      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <HAL_SPI_Receive+0x46>
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e248      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_SPI_Receive+0x58>
 800aff8:	2302      	movs	r3, #2
 800affa:	e241      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2204      	movs	r2, #4
 800b008:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	88fa      	ldrh	r2, [r7, #6]
 800b01e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	88fa      	ldrh	r2, [r7, #6]
 800b026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b054:	d108      	bne.n	800b068 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e009      	b.n	800b07c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b07a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4b95      	ldr	r3, [pc, #596]	@ (800b2d8 <HAL_SPI_Receive+0x334>)
 800b084:	4013      	ands	r3, r2
 800b086:	88f9      	ldrh	r1, [r7, #6]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	6812      	ldr	r2, [r2, #0]
 800b08c:	430b      	orrs	r3, r1
 800b08e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0201 	orr.w	r2, r2, #1
 800b09e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0a8:	d107      	bne.n	800b0ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	2b0f      	cmp	r3, #15
 800b0c0:	d96c      	bls.n	800b19c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b0c2:	e064      	b.n	800b18e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d114      	bne.n	800b104 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b0e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0ea:	1d1a      	adds	r2, r3, #4
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b102:	e044      	b.n	800b18e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	8bfa      	ldrh	r2, [r7, #30]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d919      	bls.n	800b146 <HAL_SPI_Receive+0x1a2>
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d014      	beq.n	800b146 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b124:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b126:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b138:	b29b      	uxth	r3, r3
 800b13a:	3b01      	subs	r3, #1
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b144:	e023      	b.n	800b18e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b146:	f7f9 fe01 	bl	8004d4c <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	d803      	bhi.n	800b15e <HAL_SPI_Receive+0x1ba>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d102      	bne.n	800b164 <HAL_SPI_Receive+0x1c0>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d114      	bne.n	800b18e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 fcc9 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b170:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e178      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b194:	b29b      	uxth	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d194      	bne.n	800b0c4 <HAL_SPI_Receive+0x120>
 800b19a:	e15e      	b.n	800b45a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b07      	cmp	r3, #7
 800b1a2:	f240 8153 	bls.w	800b44c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b1a6:	e08f      	b.n	800b2c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d114      	bne.n	800b1e8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	8812      	ldrh	r2, [r2, #0]
 800b1c6:	b292      	uxth	r2, r2
 800b1c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ce:	1c9a      	adds	r2, r3, #2
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1e6:	e06f      	b.n	800b2c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	8bfa      	ldrh	r2, [r7, #30]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d924      	bls.n	800b240 <HAL_SPI_Receive+0x29c>
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01f      	beq.n	800b240 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	8812      	ldrh	r2, [r2, #0]
 800b208:	b292      	uxth	r2, r2
 800b20a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b210:	1c9a      	adds	r2, r3, #2
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b21a:	69ba      	ldr	r2, [r7, #24]
 800b21c:	8812      	ldrh	r2, [r2, #0]
 800b21e:	b292      	uxth	r2, r2
 800b220:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b226:	1c9a      	adds	r2, r3, #2
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b02      	subs	r3, #2
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b23e:	e043      	b.n	800b2c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d119      	bne.n	800b280 <HAL_SPI_Receive+0x2dc>
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d014      	beq.n	800b280 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	8812      	ldrh	r2, [r2, #0]
 800b25e:	b292      	uxth	r2, r2
 800b260:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b266:	1c9a      	adds	r2, r3, #2
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b272:	b29b      	uxth	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	b29a      	uxth	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b27e:	e023      	b.n	800b2c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b280:	f7f9 fd64 	bl	8004d4c <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d803      	bhi.n	800b298 <HAL_SPI_Receive+0x2f4>
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d102      	bne.n	800b29e <HAL_SPI_Receive+0x2fa>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d114      	bne.n	800b2c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 fc2c 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e0db      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f47f af69 	bne.w	800b1a8 <HAL_SPI_Receive+0x204>
 800b2d6:	e0c0      	b.n	800b45a <HAL_SPI_Receive+0x4b6>
 800b2d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d117      	bne.n	800b322 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2fe:	7812      	ldrb	r2, [r2, #0]
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b320:	e094      	b.n	800b44c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	8bfa      	ldrh	r2, [r7, #30]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d946      	bls.n	800b3be <HAL_SPI_Receive+0x41a>
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d041      	beq.n	800b3be <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	b2d2      	uxtb	r2, r2
 800b366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	b2d2      	uxtb	r2, r2
 800b382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b39a:	7812      	ldrb	r2, [r2, #0]
 800b39c:	b2d2      	uxtb	r2, r2
 800b39e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	3b04      	subs	r3, #4
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b3bc:	e046      	b.n	800b44c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d81c      	bhi.n	800b404 <HAL_SPI_Receive+0x460>
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d017      	beq.n	800b404 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3e0:	7812      	ldrb	r2, [r2, #0]
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b402:	e023      	b.n	800b44c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b404:	f7f9 fca2 	bl	8004d4c <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	429a      	cmp	r2, r3
 800b412:	d803      	bhi.n	800b41c <HAL_SPI_Receive+0x478>
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41a:	d102      	bne.n	800b422 <HAL_SPI_Receive+0x47e>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d114      	bne.n	800b44c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fb6a 	bl	800bafc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b42e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e019      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b452:	b29b      	uxth	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	f47f af41 	bne.w	800b2dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fb4e 	bl	800bafc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b47e:	2300      	movs	r3, #0
  }
}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	@ 0x38
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3320      	adds	r3, #32
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3330      	adds	r3, #48	@ 0x30
 800b4a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4aa:	095b      	lsrs	r3, r3, #5
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4b2:	f7f9 fc4b 	bl	8004d4c <HAL_GetTick>
 800b4b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b4b8:	887b      	ldrh	r3, [r7, #2]
 800b4ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800b4bc:	887b      	ldrh	r3, [r7, #2]
 800b4be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d001      	beq.n	800b4d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e310      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d005      	beq.n	800b4e2 <HAL_SPI_TransmitReceive+0x5a>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <HAL_SPI_TransmitReceive+0x5a>
 800b4dc:	887b      	ldrh	r3, [r7, #2]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e305      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d101      	bne.n	800b4f4 <HAL_SPI_TransmitReceive+0x6c>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	e2fe      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2205      	movs	r2, #5
 800b500:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	887a      	ldrh	r2, [r7, #2]
 800b516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	887a      	ldrh	r2, [r7, #2]
 800b51e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	887a      	ldrh	r2, [r7, #2]
 800b52c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	887a      	ldrh	r2, [r7, #2]
 800b534:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b552:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a70      	ldr	r2, [pc, #448]	@ (800b71c <HAL_SPI_TransmitReceive+0x294>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d009      	beq.n	800b572 <HAL_SPI_TransmitReceive+0xea>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a6f      	ldr	r2, [pc, #444]	@ (800b720 <HAL_SPI_TransmitReceive+0x298>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d004      	beq.n	800b572 <HAL_SPI_TransmitReceive+0xea>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a6d      	ldr	r2, [pc, #436]	@ (800b724 <HAL_SPI_TransmitReceive+0x29c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d102      	bne.n	800b578 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b572:	2310      	movs	r3, #16
 800b574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b576:	e001      	b.n	800b57c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b578:	2308      	movs	r3, #8
 800b57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	4b69      	ldr	r3, [pc, #420]	@ (800b728 <HAL_SPI_TransmitReceive+0x2a0>)
 800b584:	4013      	ands	r3, r2
 800b586:	8879      	ldrh	r1, [r7, #2]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	6812      	ldr	r2, [r2, #0]
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f042 0201 	orr.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5a8:	d107      	bne.n	800b5ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	2b0f      	cmp	r3, #15
 800b5c0:	f240 80a2 	bls.w	800b708 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c6:	089b      	lsrs	r3, r3, #2
 800b5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b5ca:	e094      	b.n	800b6f6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d120      	bne.n	800b61c <HAL_SPI_TransmitReceive+0x194>
 800b5da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01d      	beq.n	800b61c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b5e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b5e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d217      	bcs.n	800b61c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6812      	ldr	r2, [r2, #0]
 800b5f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5fc:	1d1a      	adds	r2, r3, #4
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b608:	b29b      	uxth	r3, r3
 800b60a:	3b01      	subs	r3, #1
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b61a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b624:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b626:	2b00      	cmp	r3, #0
 800b628:	d065      	beq.n	800b6f6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b01      	cmp	r3, #1
 800b636:	d118      	bne.n	800b66a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b640:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b642:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b666:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b668:	e045      	b.n	800b6f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b66a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b66c:	8bfb      	ldrh	r3, [r7, #30]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d21d      	bcs.n	800b6ae <HAL_SPI_TransmitReceive+0x226>
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d018      	beq.n	800b6ae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b686:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b68c:	1d1a      	adds	r2, r3, #4
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b698:	b29b      	uxth	r3, r3
 800b69a:	3b01      	subs	r3, #1
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b6ac:	e023      	b.n	800b6f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ae:	f7f9 fb4d 	bl	8004d4c <HAL_GetTick>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d803      	bhi.n	800b6c6 <HAL_SPI_TransmitReceive+0x23e>
 800b6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c4:	d102      	bne.n	800b6cc <HAL_SPI_TransmitReceive+0x244>
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d114      	bne.n	800b6f6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 fa15 	bl	800bafc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e1fd      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b6f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f47f af67 	bne.w	800b5cc <HAL_SPI_TransmitReceive+0x144>
 800b6fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	f47f af63 	bne.w	800b5cc <HAL_SPI_TransmitReceive+0x144>
 800b706:	e1ce      	b.n	800baa6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	2b07      	cmp	r3, #7
 800b70e:	f240 81c2 	bls.w	800ba96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	085b      	lsrs	r3, r3, #1
 800b716:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b718:	e0c9      	b.n	800b8ae <HAL_SPI_TransmitReceive+0x426>
 800b71a:	bf00      	nop
 800b71c:	40013000 	.word	0x40013000
 800b720:	40003800 	.word	0x40003800
 800b724:	40003c00 	.word	0x40003c00
 800b728:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b02      	cmp	r3, #2
 800b738:	d11f      	bne.n	800b77a <HAL_SPI_TransmitReceive+0x2f2>
 800b73a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01c      	beq.n	800b77a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b740:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b742:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b746:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b748:	429a      	cmp	r2, r3
 800b74a:	d216      	bcs.n	800b77a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b750:	881a      	ldrh	r2, [r3, #0]
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b75a:	1c9a      	adds	r2, r3, #2
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b766:	b29b      	uxth	r3, r3
 800b768:	3b01      	subs	r3, #1
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b778:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b782:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8092 	beq.w	800b8ae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b01      	cmp	r3, #1
 800b796:	d118      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b79c:	6a3a      	ldr	r2, [r7, #32]
 800b79e:	8812      	ldrh	r2, [r2, #0]
 800b7a0:	b292      	uxth	r2, r2
 800b7a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7a8:	1c9a      	adds	r2, r3, #2
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b7c8:	e071      	b.n	800b8ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b7ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d228      	bcs.n	800b824 <HAL_SPI_TransmitReceive+0x39c>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d023      	beq.n	800b824 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7e0:	6a3a      	ldr	r2, [r7, #32]
 800b7e2:	8812      	ldrh	r2, [r2, #0]
 800b7e4:	b292      	uxth	r2, r2
 800b7e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ec:	1c9a      	adds	r2, r3, #2
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	8812      	ldrh	r2, [r2, #0]
 800b7fa:	b292      	uxth	r2, r2
 800b7fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b802:	1c9a      	adds	r2, r3, #2
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b80e:	b29b      	uxth	r3, r3
 800b810:	3b02      	subs	r3, #2
 800b812:	b29a      	uxth	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b820:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b822:	e044      	b.n	800b8ae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b824:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b826:	2b01      	cmp	r3, #1
 800b828:	d11d      	bne.n	800b866 <HAL_SPI_TransmitReceive+0x3de>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d018      	beq.n	800b866 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	8812      	ldrh	r2, [r2, #0]
 800b83c:	b292      	uxth	r2, r2
 800b83e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b844:	1c9a      	adds	r2, r3, #2
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b850:	b29b      	uxth	r3, r3
 800b852:	3b01      	subs	r3, #1
 800b854:	b29a      	uxth	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b862:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b864:	e023      	b.n	800b8ae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b866:	f7f9 fa71 	bl	8004d4c <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b872:	429a      	cmp	r2, r3
 800b874:	d803      	bhi.n	800b87e <HAL_SPI_TransmitReceive+0x3f6>
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d102      	bne.n	800b884 <HAL_SPI_TransmitReceive+0x3fc>
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	2b00      	cmp	r3, #0
 800b882:	d114      	bne.n	800b8ae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 f939 	bl	800bafc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b890:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e121      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b8ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f af3b 	bne.w	800b72c <HAL_SPI_TransmitReceive+0x2a4>
 800b8b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f47f af37 	bne.w	800b72c <HAL_SPI_TransmitReceive+0x2a4>
 800b8be:	e0f2      	b.n	800baa6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d121      	bne.n	800b912 <HAL_SPI_TransmitReceive+0x48a>
 800b8ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d01e      	beq.n	800b912 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b8d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b8d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d218      	bcs.n	800b912 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3320      	adds	r3, #32
 800b8ea:	7812      	ldrb	r2, [r2, #0]
 800b8ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b910:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b91a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 80ba 	beq.w	800ba96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d11b      	bne.n	800b968 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b93c:	7812      	ldrb	r2, [r2, #0]
 800b93e:	b2d2      	uxtb	r2, r2
 800b940:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b952:	b29b      	uxth	r3, r3
 800b954:	3b01      	subs	r3, #1
 800b956:	b29a      	uxth	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b964:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b966:	e096      	b.n	800ba96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b968:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b96a:	8bfb      	ldrh	r3, [r7, #30]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d24a      	bcs.n	800ba06 <HAL_SPI_TransmitReceive+0x57e>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d045      	beq.n	800ba06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b986:	7812      	ldrb	r2, [r2, #0]
 800b988:	b2d2      	uxtb	r2, r2
 800b98a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9a2:	7812      	ldrb	r2, [r2, #0]
 800b9a4:	b2d2      	uxtb	r2, r2
 800b9a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9be:	7812      	ldrb	r2, [r2, #0]
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	b2d2      	uxtb	r2, r2
 800b9de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	3b04      	subs	r3, #4
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba02:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ba04:	e047      	b.n	800ba96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ba06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d820      	bhi.n	800ba4e <HAL_SPI_TransmitReceive+0x5c6>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d01b      	beq.n	800ba4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba22:	7812      	ldrb	r2, [r2, #0]
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ba4c:	e023      	b.n	800ba96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba4e:	f7f9 f97d 	bl	8004d4c <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d803      	bhi.n	800ba66 <HAL_SPI_TransmitReceive+0x5de>
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba64:	d102      	bne.n	800ba6c <HAL_SPI_TransmitReceive+0x5e4>
 800ba66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d114      	bne.n	800ba96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 f845 	bl	800bafc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e02d      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f47f af11 	bne.w	800b8c0 <HAL_SPI_TransmitReceive+0x438>
 800ba9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f47f af0d 	bne.w	800b8c0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baac:	2200      	movs	r2, #0
 800baae:	2108      	movs	r1, #8
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f8c3 	bl	800bc3c <SPI_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac2:	f043 0220 	orr.w	r2, r3, #32
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f815 	bl	800bafc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800baf0:	2300      	movs	r3, #0
  }
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3730      	adds	r7, #48	@ 0x30
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0208 	orr.w	r2, r2, #8
 800bb1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699a      	ldr	r2, [r3, #24]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f042 0210 	orr.w	r2, r2, #16
 800bb2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0201 	bic.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6919      	ldr	r1, [r3, #16]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	4b3c      	ldr	r3, [pc, #240]	@ (800bc38 <SPI_CloseTransfer+0x13c>)
 800bb48:	400b      	ands	r3, r1
 800bb4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bb5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d014      	beq.n	800bb92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00f      	beq.n	800bb92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	699a      	ldr	r2, [r3, #24]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f042 0220 	orr.w	r2, r2, #32
 800bb90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d014      	beq.n	800bbc8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00f      	beq.n	800bbc8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbae:	f043 0204 	orr.w	r2, r3, #4
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699a      	ldr	r2, [r3, #24]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbc6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00f      	beq.n	800bbf2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbd8:	f043 0201 	orr.w	r2, r3, #1
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	699a      	ldr	r2, [r3, #24]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbf0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00f      	beq.n	800bc1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc02:	f043 0208 	orr.w	r2, r3, #8
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	699a      	ldr	r2, [r3, #24]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bc2c:	bf00      	nop
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	fffffc90 	.word	0xfffffc90

0800bc3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc4c:	e010      	b.n	800bc70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc4e:	f7f9 f87d 	bl	8004d4c <HAL_GetTick>
 800bc52:	4602      	mov	r2, r0
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d803      	bhi.n	800bc66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc64:	d102      	bne.n	800bc6c <SPI_WaitOnFlagUntilTimeout+0x30>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e00f      	b.n	800bc90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695a      	ldr	r2, [r3, #20]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	bf0c      	ite	eq
 800bc80:	2301      	moveq	r3, #1
 800bc82:	2300      	movne	r3, #0
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	461a      	mov	r2, r3
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d0df      	beq.n	800bc4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca4:	095b      	lsrs	r3, r3, #5
 800bca6:	3301      	adds	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	3307      	adds	r3, #7
 800bcb6:	08db      	lsrs	r3, r3, #3
 800bcb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	fb02 f303 	mul.w	r3, r2, r3
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e049      	b.n	800bd74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7f8 fd05 	bl	8004704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	f000 fa15 	bl	800c13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d001      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e054      	b.n	800be3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0201 	orr.w	r2, r2, #1
 800bdaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a26      	ldr	r2, [pc, #152]	@ (800be4c <HAL_TIM_Base_Start_IT+0xd0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d022      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdbe:	d01d      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a22      	ldr	r2, [pc, #136]	@ (800be50 <HAL_TIM_Base_Start_IT+0xd4>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d018      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a21      	ldr	r2, [pc, #132]	@ (800be54 <HAL_TIM_Base_Start_IT+0xd8>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d013      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a1f      	ldr	r2, [pc, #124]	@ (800be58 <HAL_TIM_Base_Start_IT+0xdc>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d00e      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a1e      	ldr	r2, [pc, #120]	@ (800be5c <HAL_TIM_Base_Start_IT+0xe0>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d009      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a1c      	ldr	r2, [pc, #112]	@ (800be60 <HAL_TIM_Base_Start_IT+0xe4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d004      	beq.n	800bdfc <HAL_TIM_Base_Start_IT+0x80>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a1b      	ldr	r2, [pc, #108]	@ (800be64 <HAL_TIM_Base_Start_IT+0xe8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d115      	bne.n	800be28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	689a      	ldr	r2, [r3, #8]
 800be02:	4b19      	ldr	r3, [pc, #100]	@ (800be68 <HAL_TIM_Base_Start_IT+0xec>)
 800be04:	4013      	ands	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b06      	cmp	r3, #6
 800be0c:	d015      	beq.n	800be3a <HAL_TIM_Base_Start_IT+0xbe>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be14:	d011      	beq.n	800be3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be26:	e008      	b.n	800be3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f042 0201 	orr.w	r2, r2, #1
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	e000      	b.n	800be3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	40010000 	.word	0x40010000
 800be50:	40000400 	.word	0x40000400
 800be54:	40000800 	.word	0x40000800
 800be58:	40000c00 	.word	0x40000c00
 800be5c:	40010400 	.word	0x40010400
 800be60:	40001800 	.word	0x40001800
 800be64:	40014000 	.word	0x40014000
 800be68:	00010007 	.word	0x00010007

0800be6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68da      	ldr	r2, [r3, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0201 	bic.w	r2, r2, #1
 800be82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6a1a      	ldr	r2, [r3, #32]
 800be8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800be8e:	4013      	ands	r3, r2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10f      	bne.n	800beb4 <HAL_TIM_Base_Stop_IT+0x48>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6a1a      	ldr	r2, [r3, #32]
 800be9a:	f240 4344 	movw	r3, #1092	@ 0x444
 800be9e:	4013      	ands	r3, r2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d107      	bne.n	800beb4 <HAL_TIM_Base_Stop_IT+0x48>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0201 	bic.w	r2, r2, #1
 800beb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d020      	beq.n	800bf2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d01b      	beq.n	800bf2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f06f 0202 	mvn.w	r2, #2
 800befe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	f003 0303 	and.w	r3, r3, #3
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d003      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f8f3 	bl	800c100 <HAL_TIM_IC_CaptureCallback>
 800bf1a:	e005      	b.n	800bf28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f8e5 	bl	800c0ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f8f6 	bl	800c114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d020      	beq.n	800bf7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f003 0304 	and.w	r3, r3, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d01b      	beq.n	800bf7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f06f 0204 	mvn.w	r2, #4
 800bf4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f8cd 	bl	800c100 <HAL_TIM_IC_CaptureCallback>
 800bf66:	e005      	b.n	800bf74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f8bf 	bl	800c0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f8d0 	bl	800c114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	f003 0308 	and.w	r3, r3, #8
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d020      	beq.n	800bfc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01b      	beq.n	800bfc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f06f 0208 	mvn.w	r2, #8
 800bf96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	f003 0303 	and.w	r3, r3, #3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f8a7 	bl	800c100 <HAL_TIM_IC_CaptureCallback>
 800bfb2:	e005      	b.n	800bfc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f899 	bl	800c0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f8aa 	bl	800c114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f003 0310 	and.w	r3, r3, #16
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d020      	beq.n	800c012 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f003 0310 	and.w	r3, r3, #16
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01b      	beq.n	800c012 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f06f 0210 	mvn.w	r2, #16
 800bfe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f881 	bl	800c100 <HAL_TIM_IC_CaptureCallback>
 800bffe:	e005      	b.n	800c00c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f873 	bl	800c0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f884 	bl	800c114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d007      	beq.n	800c036 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f06f 0201 	mvn.w	r2, #1
 800c02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f851 	bl	800c0d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d104      	bne.n	800c04a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00c      	beq.n	800c064 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c050:	2b00      	cmp	r3, #0
 800c052:	d007      	beq.n	800c064 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9aa 	bl	800c3b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00c      	beq.n	800c088 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c074:	2b00      	cmp	r3, #0
 800c076:	d007      	beq.n	800c088 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f9a2 	bl	800c3cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00c      	beq.n	800c0ac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c0a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f83e 	bl	800c128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f003 0320 	and.w	r3, r3, #32
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00c      	beq.n	800c0d0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f003 0320 	and.w	r3, r3, #32
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f06f 0220 	mvn.w	r2, #32
 800c0c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f96a 	bl	800c3a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a46      	ldr	r2, [pc, #280]	@ (800c268 <TIM_Base_SetConfig+0x12c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d013      	beq.n	800c17c <TIM_Base_SetConfig+0x40>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c15a:	d00f      	beq.n	800c17c <TIM_Base_SetConfig+0x40>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a43      	ldr	r2, [pc, #268]	@ (800c26c <TIM_Base_SetConfig+0x130>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d00b      	beq.n	800c17c <TIM_Base_SetConfig+0x40>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a42      	ldr	r2, [pc, #264]	@ (800c270 <TIM_Base_SetConfig+0x134>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d007      	beq.n	800c17c <TIM_Base_SetConfig+0x40>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a41      	ldr	r2, [pc, #260]	@ (800c274 <TIM_Base_SetConfig+0x138>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d003      	beq.n	800c17c <TIM_Base_SetConfig+0x40>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a40      	ldr	r2, [pc, #256]	@ (800c278 <TIM_Base_SetConfig+0x13c>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d108      	bne.n	800c18e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a35      	ldr	r2, [pc, #212]	@ (800c268 <TIM_Base_SetConfig+0x12c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d01f      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c19c:	d01b      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a32      	ldr	r2, [pc, #200]	@ (800c26c <TIM_Base_SetConfig+0x130>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d017      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a31      	ldr	r2, [pc, #196]	@ (800c270 <TIM_Base_SetConfig+0x134>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d013      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a30      	ldr	r2, [pc, #192]	@ (800c274 <TIM_Base_SetConfig+0x138>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00f      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2f      	ldr	r2, [pc, #188]	@ (800c278 <TIM_Base_SetConfig+0x13c>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d00b      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a2e      	ldr	r2, [pc, #184]	@ (800c27c <TIM_Base_SetConfig+0x140>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d007      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2d      	ldr	r2, [pc, #180]	@ (800c280 <TIM_Base_SetConfig+0x144>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d003      	beq.n	800c1d6 <TIM_Base_SetConfig+0x9a>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c284 <TIM_Base_SetConfig+0x148>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d108      	bne.n	800c1e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a16      	ldr	r2, [pc, #88]	@ (800c268 <TIM_Base_SetConfig+0x12c>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00f      	beq.n	800c234 <TIM_Base_SetConfig+0xf8>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a18      	ldr	r2, [pc, #96]	@ (800c278 <TIM_Base_SetConfig+0x13c>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d00b      	beq.n	800c234 <TIM_Base_SetConfig+0xf8>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a17      	ldr	r2, [pc, #92]	@ (800c27c <TIM_Base_SetConfig+0x140>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d007      	beq.n	800c234 <TIM_Base_SetConfig+0xf8>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a16      	ldr	r2, [pc, #88]	@ (800c280 <TIM_Base_SetConfig+0x144>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d003      	beq.n	800c234 <TIM_Base_SetConfig+0xf8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a15      	ldr	r2, [pc, #84]	@ (800c284 <TIM_Base_SetConfig+0x148>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d103      	bne.n	800c23c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	691a      	ldr	r2, [r3, #16]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d105      	bne.n	800c25a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	f023 0201 	bic.w	r2, r3, #1
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	611a      	str	r2, [r3, #16]
  }
}
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40010000 	.word	0x40010000
 800c26c:	40000400 	.word	0x40000400
 800c270:	40000800 	.word	0x40000800
 800c274:	40000c00 	.word	0x40000c00
 800c278:	40010400 	.word	0x40010400
 800c27c:	40014000 	.word	0x40014000
 800c280:	40014400 	.word	0x40014400
 800c284:	40014800 	.word	0x40014800

0800c288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e06d      	b.n	800c37c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a30      	ldr	r2, [pc, #192]	@ (800c388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d004      	beq.n	800c2d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a2f      	ldr	r2, [pc, #188]	@ (800c38c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d108      	bne.n	800c2e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c2da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a20      	ldr	r2, [pc, #128]	@ (800c388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d022      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c312:	d01d      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a1d      	ldr	r2, [pc, #116]	@ (800c390 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d018      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a1c      	ldr	r2, [pc, #112]	@ (800c394 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d013      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a1a      	ldr	r2, [pc, #104]	@ (800c398 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00e      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a15      	ldr	r2, [pc, #84]	@ (800c38c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d009      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a16      	ldr	r2, [pc, #88]	@ (800c39c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d004      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a15      	ldr	r2, [pc, #84]	@ (800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d10c      	bne.n	800c36a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	40010000 	.word	0x40010000
 800c38c:	40010400 	.word	0x40010400
 800c390:	40000400 	.word	0x40000400
 800c394:	40000800 	.word	0x40000800
 800c398:	40000c00 	.word	0x40000c00
 800c39c:	40001800 	.word	0x40001800
 800c3a0:	40014000 	.word	0x40014000

0800c3a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c3e4:	4904      	ldr	r1, [pc, #16]	@ (800c3f8 <MX_FATFS_Init+0x18>)
 800c3e6:	4805      	ldr	r0, [pc, #20]	@ (800c3fc <MX_FATFS_Init+0x1c>)
 800c3e8:	f002 ff12 	bl	800f210 <FATFS_LinkDriver>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4b03      	ldr	r3, [pc, #12]	@ (800c400 <MX_FATFS_Init+0x20>)
 800c3f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c3f4:	bf00      	nop
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	24000870 	.word	0x24000870
 800c3fc:	24000010 	.word	0x24000010
 800c400:	2400086c 	.word	0x2400086c

0800c404 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c408:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800c41e:	79fb      	ldrb	r3, [r7, #7]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f9fd 	bl	800c820 <USER_SPI_initialize>
 800c426:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fad1 	bl	800c9e4 <USER_SPI_status>
 800c442:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	60b9      	str	r1, [r7, #8]
 800c454:	607a      	str	r2, [r7, #4]
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800c45c:	7bf8      	ldrb	r0, [r7, #15]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	68b9      	ldr	r1, [r7, #8]
 800c464:	f000 fad4 	bl	800ca10 <USER_SPI_read>
 800c468:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800c482:	7bf8      	ldrb	r0, [r7, #15]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	68b9      	ldr	r1, [r7, #8]
 800c48a:	f000 fb27 	bl	800cadc <USER_SPI_write>
 800c48e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	603a      	str	r2, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800c4a8:	79b9      	ldrb	r1, [r7, #6]
 800c4aa:	79fb      	ldrb	r3, [r7, #7]
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 fb90 	bl	800cbd4 <USER_SPI_ioctl>
 800c4b4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0201 	bic.w	r2, r2, #1
 800c4d6:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	071a      	lsls	r2, r3, #28
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f042 0201 	orr.w	r2, r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]
}
 800c4fe:	bf00      	nop
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
	...

0800c50c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c514:	f7f8 fc1a 	bl	8004d4c <HAL_GetTick>
 800c518:	4603      	mov	r3, r0
 800c51a:	4a04      	ldr	r2, [pc, #16]	@ (800c52c <SPI_Timer_On+0x20>)
 800c51c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800c51e:	4a04      	ldr	r2, [pc, #16]	@ (800c530 <SPI_Timer_On+0x24>)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6013      	str	r3, [r2, #0]
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	24000878 	.word	0x24000878
 800c530:	2400087c 	.word	0x2400087c

0800c534 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c538:	f7f8 fc08 	bl	8004d4c <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	4b06      	ldr	r3, [pc, #24]	@ (800c558 <SPI_Timer_Status+0x24>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	1ad2      	subs	r2, r2, r3
 800c544:	4b05      	ldr	r3, [pc, #20]	@ (800c55c <SPI_Timer_Status+0x28>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	bf34      	ite	cc
 800c54c:	2301      	movcc	r3, #1
 800c54e:	2300      	movcs	r3, #0
 800c550:	b2db      	uxtb	r3, r3
}
 800c552:	4618      	mov	r0, r3
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	24000878 	.word	0x24000878
 800c55c:	2400087c 	.word	0x2400087c

0800c560 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af02      	add	r7, sp, #8
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c56a:	f107 020f 	add.w	r2, r7, #15
 800c56e:	1df9      	adds	r1, r7, #7
 800c570:	2332      	movs	r3, #50	@ 0x32
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	2301      	movs	r3, #1
 800c576:	4804      	ldr	r0, [pc, #16]	@ (800c588 <xchg_spi+0x28>)
 800c578:	f7fe ff86 	bl	800b488 <HAL_SPI_TransmitReceive>

    return rxDat;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	24000440 	.word	0x24000440

0800c58c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c58c:	b590      	push	{r4, r7, lr}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e00a      	b.n	800c5b2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	18d4      	adds	r4, r2, r3
 800c5a2:	20ff      	movs	r0, #255	@ 0xff
 800c5a4:	f7ff ffdc 	bl	800c560 <xchg_spi>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d3f0      	bcc.n	800c59c <rcvr_spi_multi+0x10>
	}
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd90      	pop	{r4, r7, pc}

0800c5c4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	4803      	ldr	r0, [pc, #12]	@ (800c5e8 <xmit_spi_multi+0x24>)
 800c5da:	f7fe faf5 	bl	800abc8 <HAL_SPI_Transmit>
}
 800c5de:	bf00      	nop
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	24000440 	.word	0x24000440

0800c5ec <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c5f4:	f7f8 fbaa 	bl	8004d4c <HAL_GetTick>
 800c5f8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c5fe:	20ff      	movs	r0, #255	@ 0xff
 800c600:	f7ff ffae 	bl	800c560 <xchg_spi>
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2bff      	cmp	r3, #255	@ 0xff
 800c60c:	d007      	beq.n	800c61e <wait_ready+0x32>
 800c60e:	f7f8 fb9d 	bl	8004d4c <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d8ef      	bhi.n	800c5fe <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	2bff      	cmp	r3, #255	@ 0xff
 800c622:	bf0c      	ite	eq
 800c624:	2301      	moveq	r3, #1
 800c626:	2300      	movne	r3, #0
 800c628:	b2db      	uxtb	r3, r3
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
	...

0800c634 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c638:	2201      	movs	r2, #1
 800c63a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c63e:	4804      	ldr	r0, [pc, #16]	@ (800c650 <despiselect+0x1c>)
 800c640:	f7fa fb5a 	bl	8006cf8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c644:	20ff      	movs	r0, #255	@ 0xff
 800c646:	f7ff ff8b 	bl	800c560 <xchg_spi>

}
 800c64a:	bf00      	nop
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	58020400 	.word	0x58020400

0800c654 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c658:	2200      	movs	r2, #0
 800c65a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c65e:	480a      	ldr	r0, [pc, #40]	@ (800c688 <spiselect+0x34>)
 800c660:	f7fa fb4a 	bl	8006cf8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c664:	20ff      	movs	r0, #255	@ 0xff
 800c666:	f7ff ff7b 	bl	800c560 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c66a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c66e:	f7ff ffbd 	bl	800c5ec <wait_ready>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <spiselect+0x28>
 800c678:	2301      	movs	r3, #1
 800c67a:	e002      	b.n	800c682 <spiselect+0x2e>

	despiselect();
 800c67c:	f7ff ffda 	bl	800c634 <despiselect>
	return 0;	/* Timeout */
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	58020400 	.word	0x58020400

0800c68c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c696:	20c8      	movs	r0, #200	@ 0xc8
 800c698:	f7ff ff38 	bl	800c50c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c69c:	20ff      	movs	r0, #255	@ 0xff
 800c69e:	f7ff ff5f 	bl	800c560 <xchg_spi>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	2bff      	cmp	r3, #255	@ 0xff
 800c6aa:	d104      	bne.n	800c6b6 <rcvr_datablock+0x2a>
 800c6ac:	f7ff ff42 	bl	800c534 <SPI_Timer_Status>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1f2      	bne.n	800c69c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
 800c6b8:	2bfe      	cmp	r3, #254	@ 0xfe
 800c6ba:	d001      	beq.n	800c6c0 <rcvr_datablock+0x34>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e00a      	b.n	800c6d6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ff62 	bl	800c58c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c6c8:	20ff      	movs	r0, #255	@ 0xff
 800c6ca:	f7ff ff49 	bl	800c560 <xchg_spi>
 800c6ce:	20ff      	movs	r0, #255	@ 0xff
 800c6d0:	f7ff ff46 	bl	800c560 <xchg_spi>

	return 1;						/* Function succeeded */
 800c6d4:	2301      	movs	r3, #1
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b084      	sub	sp, #16
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c6ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c6ee:	f7ff ff7d 	bl	800c5ec <wait_ready>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <xmit_datablock+0x1e>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	e01e      	b.n	800c73a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c6fc:	78fb      	ldrb	r3, [r7, #3]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff ff2e 	bl	800c560 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	2bfd      	cmp	r3, #253	@ 0xfd
 800c708:	d016      	beq.n	800c738 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c70a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff ff58 	bl	800c5c4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c714:	20ff      	movs	r0, #255	@ 0xff
 800c716:	f7ff ff23 	bl	800c560 <xchg_spi>
 800c71a:	20ff      	movs	r0, #255	@ 0xff
 800c71c:	f7ff ff20 	bl	800c560 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c720:	20ff      	movs	r0, #255	@ 0xff
 800c722:	f7ff ff1d 	bl	800c560 <xchg_spi>
 800c726:	4603      	mov	r3, r0
 800c728:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	f003 031f 	and.w	r3, r3, #31
 800c730:	2b05      	cmp	r3, #5
 800c732:	d001      	beq.n	800c738 <xmit_datablock+0x5a>
 800c734:	2300      	movs	r3, #0
 800c736:	e000      	b.n	800c73a <xmit_datablock+0x5c>
	}
	return 1;
 800c738:	2301      	movs	r3, #1
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	4603      	mov	r3, r0
 800c74a:	6039      	str	r1, [r7, #0]
 800c74c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c752:	2b00      	cmp	r3, #0
 800c754:	da0e      	bge.n	800c774 <send_cmd+0x32>
		cmd &= 0x7F;
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c75c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c75e:	2100      	movs	r1, #0
 800c760:	2037      	movs	r0, #55	@ 0x37
 800c762:	f7ff ffee 	bl	800c742 <send_cmd>
 800c766:	4603      	mov	r3, r0
 800c768:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d901      	bls.n	800c774 <send_cmd+0x32>
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	e051      	b.n	800c818 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b0c      	cmp	r3, #12
 800c778:	d008      	beq.n	800c78c <send_cmd+0x4a>
		despiselect();
 800c77a:	f7ff ff5b 	bl	800c634 <despiselect>
		if (!spiselect()) return 0xFF;
 800c77e:	f7ff ff69 	bl	800c654 <spiselect>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d101      	bne.n	800c78c <send_cmd+0x4a>
 800c788:	23ff      	movs	r3, #255	@ 0xff
 800c78a:	e045      	b.n	800c818 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c792:	b2db      	uxtb	r3, r3
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff fee3 	bl	800c560 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	0e1b      	lsrs	r3, r3, #24
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fedd 	bl	800c560 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	0c1b      	lsrs	r3, r3, #16
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff fed7 	bl	800c560 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	0a1b      	lsrs	r3, r3, #8
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fed1 	bl	800c560 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fecc 	bl	800c560 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c7cc:	79fb      	ldrb	r3, [r7, #7]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <send_cmd+0x94>
 800c7d2:	2395      	movs	r3, #149	@ 0x95
 800c7d4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d101      	bne.n	800c7e0 <send_cmd+0x9e>
 800c7dc:	2387      	movs	r3, #135	@ 0x87
 800c7de:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff febc 	bl	800c560 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	2b0c      	cmp	r3, #12
 800c7ec:	d102      	bne.n	800c7f4 <send_cmd+0xb2>
 800c7ee:	20ff      	movs	r0, #255	@ 0xff
 800c7f0:	f7ff feb6 	bl	800c560 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c7f4:	230a      	movs	r3, #10
 800c7f6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c7f8:	20ff      	movs	r0, #255	@ 0xff
 800c7fa:	f7ff feb1 	bl	800c560 <xchg_spi>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c806:	2b00      	cmp	r3, #0
 800c808:	da05      	bge.n	800c816 <send_cmd+0xd4>
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	73fb      	strb	r3, [r7, #15]
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1f0      	bne.n	800c7f8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c816:	7bbb      	ldrb	r3, [r7, #14]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <USER_SPI_initialize+0x14>
 800c830:	2301      	movs	r3, #1
 800c832:	e0cc      	b.n	800c9ce <USER_SPI_initialize+0x1ae>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c834:	4b68      	ldr	r3, [pc, #416]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <USER_SPI_initialize+0x2a>
 800c842:	4b65      	ldr	r3, [pc, #404]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	e0c1      	b.n	800c9ce <USER_SPI_initialize+0x1ae>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_64);
 800c84a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800c84e:	4863      	ldr	r0, [pc, #396]	@ (800c9dc <USER_SPI_initialize+0x1bc>)
 800c850:	f7ff fe35 	bl	800c4be <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c854:	230a      	movs	r3, #10
 800c856:	73fb      	strb	r3, [r7, #15]
 800c858:	e005      	b.n	800c866 <USER_SPI_initialize+0x46>
 800c85a:	20ff      	movs	r0, #255	@ 0xff
 800c85c:	f7ff fe80 	bl	800c560 <xchg_spi>
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	3b01      	subs	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1f6      	bne.n	800c85a <USER_SPI_initialize+0x3a>

	ty = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c870:	2100      	movs	r1, #0
 800c872:	2000      	movs	r0, #0
 800c874:	f7ff ff65 	bl	800c742 <send_cmd>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	f040 808b 	bne.w	800c996 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c880:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c884:	f7ff fe42 	bl	800c50c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c888:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800c88c:	2008      	movs	r0, #8
 800c88e:	f7ff ff58 	bl	800c742 <send_cmd>
 800c892:	4603      	mov	r3, r0
 800c894:	2b01      	cmp	r3, #1
 800c896:	d151      	bne.n	800c93c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
 800c89c:	e00d      	b.n	800c8ba <USER_SPI_initialize+0x9a>
 800c89e:	7bfc      	ldrb	r4, [r7, #15]
 800c8a0:	20ff      	movs	r0, #255	@ 0xff
 800c8a2:	f7ff fe5d 	bl	800c560 <xchg_spi>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	f104 0310 	add.w	r3, r4, #16
 800c8ae:	443b      	add	r3, r7
 800c8b0:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	73fb      	strb	r3, [r7, #15]
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d9ee      	bls.n	800c89e <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c8c0:	7abb      	ldrb	r3, [r7, #10]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d167      	bne.n	800c996 <USER_SPI_initialize+0x176>
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	2baa      	cmp	r3, #170	@ 0xaa
 800c8ca:	d164      	bne.n	800c996 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c8cc:	bf00      	nop
 800c8ce:	f7ff fe31 	bl	800c534 <SPI_Timer_Status>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d007      	beq.n	800c8e8 <USER_SPI_initialize+0xc8>
 800c8d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c8dc:	20a9      	movs	r0, #169	@ 0xa9
 800c8de:	f7ff ff30 	bl	800c742 <send_cmd>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f2      	bne.n	800c8ce <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c8e8:	f7ff fe24 	bl	800c534 <SPI_Timer_Status>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d051      	beq.n	800c996 <USER_SPI_initialize+0x176>
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	203a      	movs	r0, #58	@ 0x3a
 800c8f6:	f7ff ff24 	bl	800c742 <send_cmd>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d14a      	bne.n	800c996 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
 800c904:	e00d      	b.n	800c922 <USER_SPI_initialize+0x102>
 800c906:	7bfc      	ldrb	r4, [r7, #15]
 800c908:	20ff      	movs	r0, #255	@ 0xff
 800c90a:	f7ff fe29 	bl	800c560 <xchg_spi>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	f104 0310 	add.w	r3, r4, #16
 800c916:	443b      	add	r3, r7
 800c918:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	3301      	adds	r3, #1
 800c920:	73fb      	strb	r3, [r7, #15]
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	2b03      	cmp	r3, #3
 800c926:	d9ee      	bls.n	800c906 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c928:	7a3b      	ldrb	r3, [r7, #8]
 800c92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <USER_SPI_initialize+0x116>
 800c932:	230c      	movs	r3, #12
 800c934:	e000      	b.n	800c938 <USER_SPI_initialize+0x118>
 800c936:	2304      	movs	r3, #4
 800c938:	737b      	strb	r3, [r7, #13]
 800c93a:	e02c      	b.n	800c996 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c93c:	2100      	movs	r1, #0
 800c93e:	20a9      	movs	r0, #169	@ 0xa9
 800c940:	f7ff feff 	bl	800c742 <send_cmd>
 800c944:	4603      	mov	r3, r0
 800c946:	2b01      	cmp	r3, #1
 800c948:	d804      	bhi.n	800c954 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c94a:	2302      	movs	r3, #2
 800c94c:	737b      	strb	r3, [r7, #13]
 800c94e:	23a9      	movs	r3, #169	@ 0xa9
 800c950:	73bb      	strb	r3, [r7, #14]
 800c952:	e003      	b.n	800c95c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c954:	2301      	movs	r3, #1
 800c956:	737b      	strb	r3, [r7, #13]
 800c958:	2301      	movs	r3, #1
 800c95a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c95c:	bf00      	nop
 800c95e:	f7ff fde9 	bl	800c534 <SPI_Timer_Status>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d007      	beq.n	800c978 <USER_SPI_initialize+0x158>
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff fee8 	bl	800c742 <send_cmd>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1f2      	bne.n	800c95e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c978:	f7ff fddc 	bl	800c534 <SPI_Timer_Status>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d007      	beq.n	800c992 <USER_SPI_initialize+0x172>
 800c982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c986:	2010      	movs	r0, #16
 800c988:	f7ff fedb 	bl	800c742 <send_cmd>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d001      	beq.n	800c996 <USER_SPI_initialize+0x176>
				ty = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c996:	4a12      	ldr	r2, [pc, #72]	@ (800c9e0 <USER_SPI_initialize+0x1c0>)
 800c998:	7b7b      	ldrb	r3, [r7, #13]
 800c99a:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c99c:	f7ff fe4a 	bl	800c634 <despiselect>

	if (ty) {			/* OK */
 800c9a0:	7b7b      	ldrb	r3, [r7, #13]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00d      	beq.n	800c9c2 <USER_SPI_initialize+0x1a2>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_4);	/* Set fast clock */
 800c9a6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c9aa:	480c      	ldr	r0, [pc, #48]	@ (800c9dc <USER_SPI_initialize+0x1bc>)
 800c9ac:	f7ff fd87 	bl	800c4be <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c9b0:	4b09      	ldr	r3, [pc, #36]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	f023 0301 	bic.w	r3, r3, #1
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c9be:	701a      	strb	r2, [r3, #0]
 800c9c0:	e002      	b.n	800c9c8 <USER_SPI_initialize+0x1a8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c9c2:	4b05      	ldr	r3, [pc, #20]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	@ (800c9d8 <USER_SPI_initialize+0x1b8>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	b2db      	uxtb	r3, r3
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd90      	pop	{r4, r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	24000024 	.word	0x24000024
 800c9dc:	24000440 	.word	0x24000440
 800c9e0:	24000874 	.word	0x24000874

0800c9e4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <USER_SPI_status+0x14>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e002      	b.n	800c9fe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c9f8:	4b04      	ldr	r3, [pc, #16]	@ (800ca0c <USER_SPI_status+0x28>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	24000024 	.word	0x24000024

0800ca10 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <USER_SPI_read+0x1c>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <USER_SPI_read+0x20>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	e04d      	b.n	800cacc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ca30:	4b28      	ldr	r3, [pc, #160]	@ (800cad4 <USER_SPI_read+0xc4>)
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	f003 0301 	and.w	r3, r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <USER_SPI_read+0x32>
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e044      	b.n	800cacc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ca42:	4b25      	ldr	r3, [pc, #148]	@ (800cad8 <USER_SPI_read+0xc8>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	f003 0308 	and.w	r3, r3, #8
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <USER_SPI_read+0x44>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	025b      	lsls	r3, r3, #9
 800ca52:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d111      	bne.n	800ca7e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	2011      	movs	r0, #17
 800ca5e:	f7ff fe70 	bl	800c742 <send_cmd>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d129      	bne.n	800cabc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ca68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ca6c:	68b8      	ldr	r0, [r7, #8]
 800ca6e:	f7ff fe0d 	bl	800c68c <rcvr_datablock>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d021      	beq.n	800cabc <USER_SPI_read+0xac>
			count = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	e01e      	b.n	800cabc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	2012      	movs	r0, #18
 800ca82:	f7ff fe5e 	bl	800c742 <send_cmd>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d117      	bne.n	800cabc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ca8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ca90:	68b8      	ldr	r0, [r7, #8]
 800ca92:	f7ff fdfb 	bl	800c68c <rcvr_datablock>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <USER_SPI_read+0xa2>
				buff += 512;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800caa2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	603b      	str	r3, [r7, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1ed      	bne.n	800ca8c <USER_SPI_read+0x7c>
 800cab0:	e000      	b.n	800cab4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800cab2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800cab4:	2100      	movs	r1, #0
 800cab6:	200c      	movs	r0, #12
 800cab8:	f7ff fe43 	bl	800c742 <send_cmd>
		}
	}
	despiselect();
 800cabc:	f7ff fdba 	bl	800c634 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	bf14      	ite	ne
 800cac6:	2301      	movne	r3, #1
 800cac8:	2300      	moveq	r3, #0
 800caca:	b2db      	uxtb	r3, r3
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	24000024 	.word	0x24000024
 800cad8:	24000874 	.word	0x24000874

0800cadc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <USER_SPI_write+0x1c>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <USER_SPI_write+0x20>
 800caf8:	2304      	movs	r3, #4
 800cafa:	e063      	b.n	800cbc4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800cafc:	4b33      	ldr	r3, [pc, #204]	@ (800cbcc <USER_SPI_write+0xf0>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <USER_SPI_write+0x32>
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e05a      	b.n	800cbc4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800cb0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cbcc <USER_SPI_write+0xf0>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0304 	and.w	r3, r3, #4
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <USER_SPI_write+0x44>
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e051      	b.n	800cbc4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800cb20:	4b2b      	ldr	r3, [pc, #172]	@ (800cbd0 <USER_SPI_write+0xf4>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <USER_SPI_write+0x56>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d110      	bne.n	800cb5a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	2018      	movs	r0, #24
 800cb3c:	f7ff fe01 	bl	800c742 <send_cmd>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d136      	bne.n	800cbb4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800cb46:	21fe      	movs	r1, #254	@ 0xfe
 800cb48:	68b8      	ldr	r0, [r7, #8]
 800cb4a:	f7ff fdc8 	bl	800c6de <xmit_datablock>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d02f      	beq.n	800cbb4 <USER_SPI_write+0xd8>
			count = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	e02c      	b.n	800cbb4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbd0 <USER_SPI_write+0xf4>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	f003 0306 	and.w	r3, r3, #6
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d003      	beq.n	800cb6e <USER_SPI_write+0x92>
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	2097      	movs	r0, #151	@ 0x97
 800cb6a:	f7ff fdea 	bl	800c742 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	2019      	movs	r0, #25
 800cb72:	f7ff fde6 	bl	800c742 <send_cmd>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d11b      	bne.n	800cbb4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800cb7c:	21fc      	movs	r1, #252	@ 0xfc
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f7ff fdad 	bl	800c6de <xmit_datablock>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <USER_SPI_write+0xc4>
				buff += 512;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800cb90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	603b      	str	r3, [r7, #0]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1ee      	bne.n	800cb7c <USER_SPI_write+0xa0>
 800cb9e:	e000      	b.n	800cba2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800cba0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800cba2:	21fd      	movs	r1, #253	@ 0xfd
 800cba4:	2000      	movs	r0, #0
 800cba6:	f7ff fd9a 	bl	800c6de <xmit_datablock>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <USER_SPI_write+0xd8>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800cbb4:	f7ff fd3e 	bl	800c634 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bf14      	ite	ne
 800cbbe:	2301      	movne	r3, #1
 800cbc0:	2300      	moveq	r3, #0
 800cbc2:	b2db      	uxtb	r3, r3
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	24000024 	.word	0x24000024
 800cbd0:	24000874 	.word	0x24000874

0800cbd4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08c      	sub	sp, #48	@ 0x30
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	603a      	str	r2, [r7, #0]
 800cbde:	71fb      	strb	r3, [r7, #7]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <USER_SPI_ioctl+0x1a>
 800cbea:	2304      	movs	r3, #4
 800cbec:	e15a      	b.n	800cea4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800cbee:	4baf      	ldr	r3, [pc, #700]	@ (800ceac <USER_SPI_ioctl+0x2d8>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <USER_SPI_ioctl+0x2c>
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e151      	b.n	800cea4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800cc06:	79bb      	ldrb	r3, [r7, #6]
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	f200 8136 	bhi.w	800ce7a <USER_SPI_ioctl+0x2a6>
 800cc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc14 <USER_SPI_ioctl+0x40>)
 800cc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc14:	0800cc29 	.word	0x0800cc29
 800cc18:	0800cc3d 	.word	0x0800cc3d
 800cc1c:	0800ce7b 	.word	0x0800ce7b
 800cc20:	0800cce9 	.word	0x0800cce9
 800cc24:	0800cddf 	.word	0x0800cddf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800cc28:	f7ff fd14 	bl	800c654 <spiselect>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 8127 	beq.w	800ce82 <USER_SPI_ioctl+0x2ae>
 800cc34:	2300      	movs	r3, #0
 800cc36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800cc3a:	e122      	b.n	800ce82 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	2009      	movs	r0, #9
 800cc40:	f7ff fd7f 	bl	800c742 <send_cmd>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 811d 	bne.w	800ce86 <USER_SPI_ioctl+0x2b2>
 800cc4c:	f107 030c 	add.w	r3, r7, #12
 800cc50:	2110      	movs	r1, #16
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fd1a 	bl	800c68c <rcvr_datablock>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 8113 	beq.w	800ce86 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800cc60:	7b3b      	ldrb	r3, [r7, #12]
 800cc62:	099b      	lsrs	r3, r3, #6
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d111      	bne.n	800cc8e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800cc6a:	7d7b      	ldrb	r3, [r7, #21]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	7d3b      	ldrb	r3, [r7, #20]
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	4413      	add	r3, r2
 800cc74:	461a      	mov	r2, r3
 800cc76:	7cfb      	ldrb	r3, [r7, #19]
 800cc78:	041b      	lsls	r3, r3, #16
 800cc7a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800cc7e:	4413      	add	r3, r2
 800cc80:	3301      	adds	r3, #1
 800cc82:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	029a      	lsls	r2, r3, #10
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	e028      	b.n	800cce0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800cc8e:	7c7b      	ldrb	r3, [r7, #17]
 800cc90:	f003 030f 	and.w	r3, r3, #15
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	7dbb      	ldrb	r3, [r7, #22]
 800cc98:	09db      	lsrs	r3, r3, #7
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	4413      	add	r3, r2
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	7d7b      	ldrb	r3, [r7, #21]
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	f003 0306 	and.w	r3, r3, #6
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	4413      	add	r3, r2
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ccb6:	7d3b      	ldrb	r3, [r7, #20]
 800ccb8:	099b      	lsrs	r3, r3, #6
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	7cfb      	ldrb	r3, [r7, #19]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	441a      	add	r2, r3
 800ccc4:	7cbb      	ldrb	r3, [r7, #18]
 800ccc6:	029b      	lsls	r3, r3, #10
 800ccc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cccc:	4413      	add	r3, r2
 800ccce:	3301      	adds	r3, #1
 800ccd0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ccd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ccd6:	3b09      	subs	r3, #9
 800ccd8:	69fa      	ldr	r2, [r7, #28]
 800ccda:	409a      	lsls	r2, r3
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800cce6:	e0ce      	b.n	800ce86 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800cce8:	4b71      	ldr	r3, [pc, #452]	@ (800ceb0 <USER_SPI_ioctl+0x2dc>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d031      	beq.n	800cd58 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	208d      	movs	r0, #141	@ 0x8d
 800ccf8:	f7ff fd23 	bl	800c742 <send_cmd>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f040 80c3 	bne.w	800ce8a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800cd04:	20ff      	movs	r0, #255	@ 0xff
 800cd06:	f7ff fc2b 	bl	800c560 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800cd0a:	f107 030c 	add.w	r3, r7, #12
 800cd0e:	2110      	movs	r1, #16
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fcbb 	bl	800c68c <rcvr_datablock>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 80b6 	beq.w	800ce8a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800cd1e:	2330      	movs	r3, #48	@ 0x30
 800cd20:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800cd24:	e007      	b.n	800cd36 <USER_SPI_ioctl+0x162>
 800cd26:	20ff      	movs	r0, #255	@ 0xff
 800cd28:	f7ff fc1a 	bl	800c560 <xchg_spi>
 800cd2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd30:	3b01      	subs	r3, #1
 800cd32:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800cd36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1f3      	bne.n	800cd26 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800cd3e:	7dbb      	ldrb	r3, [r7, #22]
 800cd40:	091b      	lsrs	r3, r3, #4
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	461a      	mov	r2, r3
 800cd46:	2310      	movs	r3, #16
 800cd48:	fa03 f202 	lsl.w	r2, r3, r2
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800cd56:	e098      	b.n	800ce8a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800cd58:	2100      	movs	r1, #0
 800cd5a:	2009      	movs	r0, #9
 800cd5c:	f7ff fcf1 	bl	800c742 <send_cmd>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 8091 	bne.w	800ce8a <USER_SPI_ioctl+0x2b6>
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	2110      	movs	r1, #16
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fc8c 	bl	800c68c <rcvr_datablock>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 8087 	beq.w	800ce8a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800cd7c:	4b4c      	ldr	r3, [pc, #304]	@ (800ceb0 <USER_SPI_ioctl+0x2dc>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d012      	beq.n	800cdae <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800cd88:	7dbb      	ldrb	r3, [r7, #22]
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800cd90:	7dfa      	ldrb	r2, [r7, #23]
 800cd92:	09d2      	lsrs	r2, r2, #7
 800cd94:	b2d2      	uxtb	r2, r2
 800cd96:	4413      	add	r3, r2
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	7e7b      	ldrb	r3, [r7, #25]
 800cd9c:	099b      	lsrs	r3, r3, #6
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	3b01      	subs	r3, #1
 800cda2:	fa02 f303 	lsl.w	r3, r2, r3
 800cda6:	461a      	mov	r2, r3
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	e013      	b.n	800cdd6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800cdae:	7dbb      	ldrb	r3, [r7, #22]
 800cdb0:	109b      	asrs	r3, r3, #2
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f003 031f 	and.w	r3, r3, #31
 800cdb8:	3301      	adds	r3, #1
 800cdba:	7dfa      	ldrb	r2, [r7, #23]
 800cdbc:	00d2      	lsls	r2, r2, #3
 800cdbe:	f002 0218 	and.w	r2, r2, #24
 800cdc2:	7df9      	ldrb	r1, [r7, #23]
 800cdc4:	0949      	lsrs	r1, r1, #5
 800cdc6:	b2c9      	uxtb	r1, r1
 800cdc8:	440a      	add	r2, r1
 800cdca:	3201      	adds	r2, #1
 800cdcc:	fb02 f303 	mul.w	r3, r2, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800cddc:	e055      	b.n	800ce8a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800cdde:	4b34      	ldr	r3, [pc, #208]	@ (800ceb0 <USER_SPI_ioctl+0x2dc>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	f003 0306 	and.w	r3, r3, #6
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d051      	beq.n	800ce8e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800cdea:	f107 020c 	add.w	r2, r7, #12
 800cdee:	79fb      	ldrb	r3, [r7, #7]
 800cdf0:	210b      	movs	r1, #11
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7ff feee 	bl	800cbd4 <USER_SPI_ioctl>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d149      	bne.n	800ce92 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800cdfe:	7b3b      	ldrb	r3, [r7, #12]
 800ce00:	099b      	lsrs	r3, r3, #6
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d104      	bne.n	800ce12 <USER_SPI_ioctl+0x23e>
 800ce08:	7dbb      	ldrb	r3, [r7, #22]
 800ce0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d041      	beq.n	800ce96 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	623b      	str	r3, [r7, #32]
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800ce22:	4b23      	ldr	r3, [pc, #140]	@ (800ceb0 <USER_SPI_ioctl+0x2dc>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	f003 0308 	and.w	r3, r3, #8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce30:	025b      	lsls	r3, r3, #9
 800ce32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	025b      	lsls	r3, r3, #9
 800ce38:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ce3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce3c:	2020      	movs	r0, #32
 800ce3e:	f7ff fc80 	bl	800c742 <send_cmd>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d128      	bne.n	800ce9a <USER_SPI_ioctl+0x2c6>
 800ce48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce4a:	2021      	movs	r0, #33	@ 0x21
 800ce4c:	f7ff fc79 	bl	800c742 <send_cmd>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d121      	bne.n	800ce9a <USER_SPI_ioctl+0x2c6>
 800ce56:	2100      	movs	r1, #0
 800ce58:	2026      	movs	r0, #38	@ 0x26
 800ce5a:	f7ff fc72 	bl	800c742 <send_cmd>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d11a      	bne.n	800ce9a <USER_SPI_ioctl+0x2c6>
 800ce64:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ce68:	f7ff fbc0 	bl	800c5ec <wait_ready>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d013      	beq.n	800ce9a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ce72:	2300      	movs	r3, #0
 800ce74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ce78:	e00f      	b.n	800ce9a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ce7a:	2304      	movs	r3, #4
 800ce7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ce80:	e00c      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		break;
 800ce82:	bf00      	nop
 800ce84:	e00a      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		break;
 800ce86:	bf00      	nop
 800ce88:	e008      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		break;
 800ce8a:	bf00      	nop
 800ce8c:	e006      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ce8e:	bf00      	nop
 800ce90:	e004      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <USER_SPI_ioctl+0x2c8>
		break;
 800ce9a:	bf00      	nop
	}

	despiselect();
 800ce9c:	f7ff fbca 	bl	800c634 <despiselect>

	return res;
 800cea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3730      	adds	r7, #48	@ 0x30
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	24000024 	.word	0x24000024
 800ceb0:	24000874 	.word	0x24000874

0800ceb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	4a08      	ldr	r2, [pc, #32]	@ (800cee4 <disk_status+0x30>)
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	79fa      	ldrb	r2, [r7, #7]
 800cecc:	4905      	ldr	r1, [pc, #20]	@ (800cee4 <disk_status+0x30>)
 800cece:	440a      	add	r2, r1
 800ced0:	7a12      	ldrb	r2, [r2, #8]
 800ced2:	4610      	mov	r0, r2
 800ced4:	4798      	blx	r3
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	240008a8 	.word	0x240008a8

0800cee8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	4603      	mov	r3, r0
 800cef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	4a0e      	ldr	r2, [pc, #56]	@ (800cf34 <disk_initialize+0x4c>)
 800cefa:	5cd3      	ldrb	r3, [r2, r3]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d114      	bne.n	800cf2a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf00:	79fb      	ldrb	r3, [r7, #7]
 800cf02:	4a0c      	ldr	r2, [pc, #48]	@ (800cf34 <disk_initialize+0x4c>)
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	79fa      	ldrb	r2, [r7, #7]
 800cf0e:	4909      	ldr	r1, [pc, #36]	@ (800cf34 <disk_initialize+0x4c>)
 800cf10:	440a      	add	r2, r1
 800cf12:	7a12      	ldrb	r2, [r2, #8]
 800cf14:	4610      	mov	r0, r2
 800cf16:	4798      	blx	r3
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d103      	bne.n	800cf2a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	4a03      	ldr	r2, [pc, #12]	@ (800cf34 <disk_initialize+0x4c>)
 800cf26:	2101      	movs	r1, #1
 800cf28:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	240008a8 	.word	0x240008a8

0800cf38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf38:	b590      	push	{r4, r7, lr}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	4603      	mov	r3, r0
 800cf46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	4a0a      	ldr	r2, [pc, #40]	@ (800cf74 <disk_read+0x3c>)
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	689c      	ldr	r4, [r3, #8]
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	4a07      	ldr	r2, [pc, #28]	@ (800cf74 <disk_read+0x3c>)
 800cf58:	4413      	add	r3, r2
 800cf5a:	7a18      	ldrb	r0, [r3, #8]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	47a0      	blx	r4
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	371c      	adds	r7, #28
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd90      	pop	{r4, r7, pc}
 800cf72:	bf00      	nop
 800cf74:	240008a8 	.word	0x240008a8

0800cf78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cf78:	b590      	push	{r4, r7, lr}
 800cf7a:	b087      	sub	sp, #28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60b9      	str	r1, [r7, #8]
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	4603      	mov	r3, r0
 800cf86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
 800cf8a:	4a0a      	ldr	r2, [pc, #40]	@ (800cfb4 <disk_write+0x3c>)
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	68dc      	ldr	r4, [r3, #12]
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	4a07      	ldr	r2, [pc, #28]	@ (800cfb4 <disk_write+0x3c>)
 800cf98:	4413      	add	r3, r2
 800cf9a:	7a18      	ldrb	r0, [r3, #8]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	47a0      	blx	r4
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	371c      	adds	r7, #28
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd90      	pop	{r4, r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	240008a8 	.word	0x240008a8

0800cfb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	603a      	str	r2, [r7, #0]
 800cfc2:	71fb      	strb	r3, [r7, #7]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <disk_ioctl+0x38>)
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4413      	add	r3, r2
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	79fa      	ldrb	r2, [r7, #7]
 800cfd6:	4906      	ldr	r1, [pc, #24]	@ (800cff0 <disk_ioctl+0x38>)
 800cfd8:	440a      	add	r2, r1
 800cfda:	7a10      	ldrb	r0, [r2, #8]
 800cfdc:	79b9      	ldrb	r1, [r7, #6]
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	4798      	blx	r3
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]
  return res;
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	240008a8 	.word	0x240008a8

0800cff4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3301      	adds	r3, #1
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d004:	89fb      	ldrh	r3, [r7, #14]
 800d006:	021b      	lsls	r3, r3, #8
 800d008:	b21a      	sxth	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	b21b      	sxth	r3, r3
 800d010:	4313      	orrs	r3, r2
 800d012:	b21b      	sxth	r3, r3
 800d014:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d016:	89fb      	ldrh	r3, [r7, #14]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3303      	adds	r3, #3
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	021b      	lsls	r3, r3, #8
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	3202      	adds	r2, #2
 800d03c:	7812      	ldrb	r2, [r2, #0]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	021b      	lsls	r3, r3, #8
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	3201      	adds	r2, #1
 800d04a:	7812      	ldrb	r2, [r2, #0]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	7812      	ldrb	r2, [r2, #0]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d05c:	68fb      	ldr	r3, [r7, #12]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d06a:	b480      	push	{r7}
 800d06c:	b083      	sub	sp, #12
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	887a      	ldrh	r2, [r7, #2]
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	887b      	ldrh	r3, [r7, #2]
 800d084:	0a1b      	lsrs	r3, r3, #8
 800d086:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	607a      	str	r2, [r7, #4]
 800d08e:	887a      	ldrh	r2, [r7, #2]
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	701a      	strb	r2, [r3, #0]
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	b2d2      	uxtb	r2, r2
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	0a1b      	lsrs	r3, r3, #8
 800d0ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	607a      	str	r2, [r7, #4]
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	b2d2      	uxtb	r2, r2
 800d0c6:	701a      	strb	r2, [r3, #0]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	0a1b      	lsrs	r3, r3, #8
 800d0cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	0a1b      	lsrs	r3, r3, #8
 800d0de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	607a      	str	r2, [r7, #4]
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	b2d2      	uxtb	r2, r2
 800d0ea:	701a      	strb	r2, [r3, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d0f8:	b480      	push	{r7}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00d      	beq.n	800d12e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	1c53      	adds	r3, r2, #1
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	1c59      	adds	r1, r3, #1
 800d11c:	6179      	str	r1, [r7, #20]
 800d11e:	7812      	ldrb	r2, [r2, #0]
 800d120:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3b01      	subs	r3, #1
 800d126:	607b      	str	r3, [r7, #4]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1f1      	bne.n	800d112 <mem_cpy+0x1a>
	}
}
 800d12e:	bf00      	nop
 800d130:	371c      	adds	r7, #28
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d13a:	b480      	push	{r7}
 800d13c:	b087      	sub	sp, #28
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	1c5a      	adds	r2, r3, #1
 800d14e:	617a      	str	r2, [r7, #20]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3b01      	subs	r3, #1
 800d15a:	607b      	str	r3, [r7, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f3      	bne.n	800d14a <mem_set+0x10>
}
 800d162:	bf00      	nop
 800d164:	bf00      	nop
 800d166:	371c      	adds	r7, #28
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d170:	b480      	push	{r7}
 800d172:	b089      	sub	sp, #36	@ 0x24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	61fb      	str	r3, [r7, #28]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	61fa      	str	r2, [r7, #28]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	4619      	mov	r1, r3
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	61ba      	str	r2, [r7, #24]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	1acb      	subs	r3, r1, r3
 800d19c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	607b      	str	r3, [r7, #4]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <mem_cmp+0x40>
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0eb      	beq.n	800d188 <mem_cmp+0x18>

	return r;
 800d1b0:	697b      	ldr	r3, [r7, #20]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3724      	adds	r7, #36	@ 0x24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d1be:	b480      	push	{r7}
 800d1c0:	b083      	sub	sp, #12
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d1c8:	e002      	b.n	800d1d0 <chk_chr+0x12>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	607b      	str	r3, [r7, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <chk_chr+0x26>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d1f2      	bne.n	800d1ca <chk_chr+0xc>
	return *str;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1fe:	2300      	movs	r3, #0
 800d200:	60bb      	str	r3, [r7, #8]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	e029      	b.n	800d25c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d208:	4a27      	ldr	r2, [pc, #156]	@ (800d2a8 <chk_lock+0xb4>)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	4413      	add	r3, r2
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d01d      	beq.n	800d252 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d216:	4a24      	ldr	r2, [pc, #144]	@ (800d2a8 <chk_lock+0xb4>)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	4413      	add	r3, r2
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	429a      	cmp	r2, r3
 800d226:	d116      	bne.n	800d256 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d228:	4a1f      	ldr	r2, [pc, #124]	@ (800d2a8 <chk_lock+0xb4>)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	4413      	add	r3, r2
 800d230:	3304      	adds	r3, #4
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d238:	429a      	cmp	r2, r3
 800d23a:	d10c      	bne.n	800d256 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d23c:	4a1a      	ldr	r2, [pc, #104]	@ (800d2a8 <chk_lock+0xb4>)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	4413      	add	r3, r2
 800d244:	3308      	adds	r3, #8
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d102      	bne.n	800d256 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d250:	e007      	b.n	800d262 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d252:	2301      	movs	r3, #1
 800d254:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	3301      	adds	r3, #1
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d9d2      	bls.n	800d208 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d109      	bne.n	800d27c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <chk_lock+0x80>
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d101      	bne.n	800d278 <chk_lock+0x84>
 800d274:	2300      	movs	r3, #0
 800d276:	e010      	b.n	800d29a <chk_lock+0xa6>
 800d278:	2312      	movs	r3, #18
 800d27a:	e00e      	b.n	800d29a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d108      	bne.n	800d294 <chk_lock+0xa0>
 800d282:	4a09      	ldr	r2, [pc, #36]	@ (800d2a8 <chk_lock+0xb4>)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	011b      	lsls	r3, r3, #4
 800d288:	4413      	add	r3, r2
 800d28a:	330c      	adds	r3, #12
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d292:	d101      	bne.n	800d298 <chk_lock+0xa4>
 800d294:	2310      	movs	r3, #16
 800d296:	e000      	b.n	800d29a <chk_lock+0xa6>
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3714      	adds	r7, #20
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	24000888 	.word	0x24000888

0800d2ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	607b      	str	r3, [r7, #4]
 800d2b6:	e002      	b.n	800d2be <enq_lock+0x12>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	607b      	str	r3, [r7, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d806      	bhi.n	800d2d2 <enq_lock+0x26>
 800d2c4:	4a09      	ldr	r2, [pc, #36]	@ (800d2ec <enq_lock+0x40>)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	4413      	add	r3, r2
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1f2      	bne.n	800d2b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	24000888 	.word	0x24000888

0800d2f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
 800d2fe:	e01f      	b.n	800d340 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d300:	4a41      	ldr	r2, [pc, #260]	@ (800d408 <inc_lock+0x118>)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	011b      	lsls	r3, r3, #4
 800d306:	4413      	add	r3, r2
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d113      	bne.n	800d33a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d312:	4a3d      	ldr	r2, [pc, #244]	@ (800d408 <inc_lock+0x118>)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	4413      	add	r3, r2
 800d31a:	3304      	adds	r3, #4
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d322:	429a      	cmp	r2, r3
 800d324:	d109      	bne.n	800d33a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d326:	4a38      	ldr	r2, [pc, #224]	@ (800d408 <inc_lock+0x118>)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	3308      	adds	r3, #8
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d336:	429a      	cmp	r2, r3
 800d338:	d006      	beq.n	800d348 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3301      	adds	r3, #1
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d9dc      	bls.n	800d300 <inc_lock+0x10>
 800d346:	e000      	b.n	800d34a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d348:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d132      	bne.n	800d3b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d350:	2300      	movs	r3, #0
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	e002      	b.n	800d35c <inc_lock+0x6c>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3301      	adds	r3, #1
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d806      	bhi.n	800d370 <inc_lock+0x80>
 800d362:	4a29      	ldr	r2, [pc, #164]	@ (800d408 <inc_lock+0x118>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	011b      	lsls	r3, r3, #4
 800d368:	4413      	add	r3, r2
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1f2      	bne.n	800d356 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d101      	bne.n	800d37a <inc_lock+0x8a>
 800d376:	2300      	movs	r3, #0
 800d378:	e040      	b.n	800d3fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	4922      	ldr	r1, [pc, #136]	@ (800d408 <inc_lock+0x118>)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	011b      	lsls	r3, r3, #4
 800d384:	440b      	add	r3, r1
 800d386:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689a      	ldr	r2, [r3, #8]
 800d38c:	491e      	ldr	r1, [pc, #120]	@ (800d408 <inc_lock+0x118>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	011b      	lsls	r3, r3, #4
 800d392:	440b      	add	r3, r1
 800d394:	3304      	adds	r3, #4
 800d396:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	695a      	ldr	r2, [r3, #20]
 800d39c:	491a      	ldr	r1, [pc, #104]	@ (800d408 <inc_lock+0x118>)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	440b      	add	r3, r1
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d3a8:	4a17      	ldr	r2, [pc, #92]	@ (800d408 <inc_lock+0x118>)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	011b      	lsls	r3, r3, #4
 800d3ae:	4413      	add	r3, r2
 800d3b0:	330c      	adds	r3, #12
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d009      	beq.n	800d3d0 <inc_lock+0xe0>
 800d3bc:	4a12      	ldr	r2, [pc, #72]	@ (800d408 <inc_lock+0x118>)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	4413      	add	r3, r2
 800d3c4:	330c      	adds	r3, #12
 800d3c6:	881b      	ldrh	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <inc_lock+0xe0>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e015      	b.n	800d3fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d108      	bne.n	800d3e8 <inc_lock+0xf8>
 800d3d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d408 <inc_lock+0x118>)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	011b      	lsls	r3, r3, #4
 800d3dc:	4413      	add	r3, r2
 800d3de:	330c      	adds	r3, #12
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	e001      	b.n	800d3ec <inc_lock+0xfc>
 800d3e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d3ec:	4906      	ldr	r1, [pc, #24]	@ (800d408 <inc_lock+0x118>)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	011b      	lsls	r3, r3, #4
 800d3f2:	440b      	add	r3, r1
 800d3f4:	330c      	adds	r3, #12
 800d3f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3301      	adds	r3, #1
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	24000888 	.word	0x24000888

0800d40c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3b01      	subs	r3, #1
 800d418:	607b      	str	r3, [r7, #4]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d825      	bhi.n	800d46c <dec_lock+0x60>
		n = Files[i].ctr;
 800d420:	4a17      	ldr	r2, [pc, #92]	@ (800d480 <dec_lock+0x74>)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	011b      	lsls	r3, r3, #4
 800d426:	4413      	add	r3, r2
 800d428:	330c      	adds	r3, #12
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d42e:	89fb      	ldrh	r3, [r7, #14]
 800d430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d434:	d101      	bne.n	800d43a <dec_lock+0x2e>
 800d436:	2300      	movs	r3, #0
 800d438:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d43a:	89fb      	ldrh	r3, [r7, #14]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <dec_lock+0x3a>
 800d440:	89fb      	ldrh	r3, [r7, #14]
 800d442:	3b01      	subs	r3, #1
 800d444:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d446:	4a0e      	ldr	r2, [pc, #56]	@ (800d480 <dec_lock+0x74>)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	4413      	add	r3, r2
 800d44e:	330c      	adds	r3, #12
 800d450:	89fa      	ldrh	r2, [r7, #14]
 800d452:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d454:	89fb      	ldrh	r3, [r7, #14]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <dec_lock+0x5a>
 800d45a:	4a09      	ldr	r2, [pc, #36]	@ (800d480 <dec_lock+0x74>)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	011b      	lsls	r3, r3, #4
 800d460:	4413      	add	r3, r2
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	737b      	strb	r3, [r7, #13]
 800d46a:	e001      	b.n	800d470 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d46c:	2302      	movs	r3, #2
 800d46e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d470:	7b7b      	ldrb	r3, [r7, #13]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	24000888 	.word	0x24000888

0800d484 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d48c:	2300      	movs	r3, #0
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	e010      	b.n	800d4b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d492:	4a0d      	ldr	r2, [pc, #52]	@ (800d4c8 <clear_lock+0x44>)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	4413      	add	r3, r2
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d105      	bne.n	800d4ae <clear_lock+0x2a>
 800d4a2:	4a09      	ldr	r2, [pc, #36]	@ (800d4c8 <clear_lock+0x44>)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	4413      	add	r3, r2
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d9eb      	bls.n	800d492 <clear_lock+0xe>
	}
}
 800d4ba:	bf00      	nop
 800d4bc:	bf00      	nop
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	24000888 	.word	0x24000888

0800d4cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	78db      	ldrb	r3, [r3, #3]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d034      	beq.n	800d54a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7858      	ldrb	r0, [r3, #1]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	f7ff fd40 	bl	800cf78 <disk_write>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	73fb      	strb	r3, [r7, #15]
 800d502:	e022      	b.n	800d54a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	1ad2      	subs	r2, r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	429a      	cmp	r2, r3
 800d518:	d217      	bcs.n	800d54a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	789b      	ldrb	r3, [r3, #2]
 800d51e:	613b      	str	r3, [r7, #16]
 800d520:	e010      	b.n	800d544 <sync_window+0x78>
					wsect += fs->fsize;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	4413      	add	r3, r2
 800d52a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7858      	ldrb	r0, [r3, #1]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d536:	2301      	movs	r3, #1
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	f7ff fd1d 	bl	800cf78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3b01      	subs	r3, #1
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d8eb      	bhi.n	800d522 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d01b      	beq.n	800d5a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff ffad 	bl	800d4cc <sync_window>
 800d572:	4603      	mov	r3, r0
 800d574:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d113      	bne.n	800d5a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7858      	ldrb	r0, [r3, #1]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d586:	2301      	movs	r3, #1
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	f7ff fcd5 	bl	800cf38 <disk_read>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d594:	f04f 33ff 	mov.w	r3, #4294967295
 800d598:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff ff87 	bl	800d4cc <sync_window>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d5c2:	7bfb      	ldrb	r3, [r7, #15]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d158      	bne.n	800d67a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d148      	bne.n	800d662 <sync_fs+0xb2>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	791b      	ldrb	r3, [r3, #4]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d144      	bne.n	800d662 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3330      	adds	r3, #48	@ 0x30
 800d5dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fda9 	bl	800d13a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3330      	adds	r3, #48	@ 0x30
 800d5ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d5f0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff fd38 	bl	800d06a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	3330      	adds	r3, #48	@ 0x30
 800d5fe:	4921      	ldr	r1, [pc, #132]	@ (800d684 <sync_fs+0xd4>)
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fd4d 	bl	800d0a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3330      	adds	r3, #48	@ 0x30
 800d60a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d60e:	491e      	ldr	r1, [pc, #120]	@ (800d688 <sync_fs+0xd8>)
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fd45 	bl	800d0a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3330      	adds	r3, #48	@ 0x30
 800d61a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	4619      	mov	r1, r3
 800d624:	4610      	mov	r0, r2
 800d626:	f7ff fd3b 	bl	800d0a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3330      	adds	r3, #48	@ 0x30
 800d62e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f7ff fd31 	bl	800d0a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	7858      	ldrb	r0, [r3, #1]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d656:	2301      	movs	r3, #1
 800d658:	f7ff fc8e 	bl	800cf78 <disk_write>
			fs->fsi_flag = 0;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	2200      	movs	r2, #0
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7ff fca4 	bl	800cfb8 <disk_ioctl>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <sync_fs+0xca>
 800d676:	2301      	movs	r3, #1
 800d678:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	41615252 	.word	0x41615252
 800d688:	61417272 	.word	0x61417272

0800d68c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	3b02      	subs	r3, #2
 800d69a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	3b02      	subs	r3, #2
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d301      	bcc.n	800d6ac <clust2sect+0x20>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e008      	b.n	800d6be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	895b      	ldrh	r3, [r3, #10]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	fb03 f202 	mul.w	r2, r3, r2
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6bc:	4413      	add	r3, r2
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b086      	sub	sp, #24
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d904      	bls.n	800d6ea <get_fat+0x20>
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d302      	bcc.n	800d6f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e08e      	b.n	800d80e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d061      	beq.n	800d7c2 <get_fat+0xf8>
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	dc7b      	bgt.n	800d7fa <get_fat+0x130>
 800d702:	2b01      	cmp	r3, #1
 800d704:	d002      	beq.n	800d70c <get_fat+0x42>
 800d706:	2b02      	cmp	r3, #2
 800d708:	d041      	beq.n	800d78e <get_fat+0xc4>
 800d70a:	e076      	b.n	800d7fa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	085b      	lsrs	r3, r3, #1
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	4413      	add	r3, r2
 800d718:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	6a1a      	ldr	r2, [r3, #32]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	0a5b      	lsrs	r3, r3, #9
 800d722:	4413      	add	r3, r2
 800d724:	4619      	mov	r1, r3
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f7ff ff14 	bl	800d554 <move_window>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d166      	bne.n	800d800 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	60fa      	str	r2, [r7, #12]
 800d738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	4413      	add	r3, r2
 800d740:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d744:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6a1a      	ldr	r2, [r3, #32]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	0a5b      	lsrs	r3, r3, #9
 800d74e:	4413      	add	r3, r2
 800d750:	4619      	mov	r1, r3
 800d752:	6938      	ldr	r0, [r7, #16]
 800d754:	f7ff fefe 	bl	800d554 <move_window>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d152      	bne.n	800d804 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	4413      	add	r3, r2
 800d768:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d76c:	021b      	lsls	r3, r3, #8
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	4313      	orrs	r3, r2
 800d772:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <get_fat+0xba>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	091b      	lsrs	r3, r3, #4
 800d782:	e002      	b.n	800d78a <get_fat+0xc0>
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d78a:	617b      	str	r3, [r7, #20]
			break;
 800d78c:	e03f      	b.n	800d80e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	6a1a      	ldr	r2, [r3, #32]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	0a1b      	lsrs	r3, r3, #8
 800d796:	4413      	add	r3, r2
 800d798:	4619      	mov	r1, r3
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f7ff feda 	bl	800d554 <move_window>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d130      	bne.n	800d808 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	005b      	lsls	r3, r3, #1
 800d7b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff fc1c 	bl	800cff4 <ld_word>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	617b      	str	r3, [r7, #20]
			break;
 800d7c0:	e025      	b.n	800d80e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	6a1a      	ldr	r2, [r3, #32]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	09db      	lsrs	r3, r3, #7
 800d7ca:	4413      	add	r3, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6938      	ldr	r0, [r7, #16]
 800d7d0:	f7ff fec0 	bl	800d554 <move_window>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d118      	bne.n	800d80c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d7e8:	4413      	add	r3, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fc1a 	bl	800d024 <ld_dword>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d7f6:	617b      	str	r3, [r7, #20]
			break;
 800d7f8:	e009      	b.n	800d80e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	e006      	b.n	800d80e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d800:	bf00      	nop
 800d802:	e004      	b.n	800d80e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d804:	bf00      	nop
 800d806:	e002      	b.n	800d80e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d808:	bf00      	nop
 800d80a:	e000      	b.n	800d80e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d80c:	bf00      	nop
		}
	}

	return val;
 800d80e:	697b      	ldr	r3, [r7, #20]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d818:	b590      	push	{r4, r7, lr}
 800d81a:	b089      	sub	sp, #36	@ 0x24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d824:	2302      	movs	r3, #2
 800d826:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	f240 80d9 	bls.w	800d9e2 <put_fat+0x1ca>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	429a      	cmp	r2, r3
 800d838:	f080 80d3 	bcs.w	800d9e2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b03      	cmp	r3, #3
 800d842:	f000 8096 	beq.w	800d972 <put_fat+0x15a>
 800d846:	2b03      	cmp	r3, #3
 800d848:	f300 80cb 	bgt.w	800d9e2 <put_fat+0x1ca>
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d002      	beq.n	800d856 <put_fat+0x3e>
 800d850:	2b02      	cmp	r3, #2
 800d852:	d06e      	beq.n	800d932 <put_fat+0x11a>
 800d854:	e0c5      	b.n	800d9e2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	61bb      	str	r3, [r7, #24]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	085b      	lsrs	r3, r3, #1
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	4413      	add	r3, r2
 800d862:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6a1a      	ldr	r2, [r3, #32]
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	0a5b      	lsrs	r3, r3, #9
 800d86c:	4413      	add	r3, r2
 800d86e:	4619      	mov	r1, r3
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7ff fe6f 	bl	800d554 <move_window>
 800d876:	4603      	mov	r3, r0
 800d878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d87a:	7ffb      	ldrb	r3, [r7, #31]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f040 80a9 	bne.w	800d9d4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	1c59      	adds	r1, r3, #1
 800d88c:	61b9      	str	r1, [r7, #24]
 800d88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d892:	4413      	add	r3, r2
 800d894:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00d      	beq.n	800d8bc <put_fat+0xa4>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	b25b      	sxtb	r3, r3
 800d8a6:	f003 030f 	and.w	r3, r3, #15
 800d8aa:	b25a      	sxtb	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	b25b      	sxtb	r3, r3
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	b25b      	sxtb	r3, r3
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	e001      	b.n	800d8c0 <put_fat+0xa8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a1a      	ldr	r2, [r3, #32]
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	0a5b      	lsrs	r3, r3, #9
 800d8d2:	4413      	add	r3, r2
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f7ff fe3c 	bl	800d554 <move_window>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8e0:	7ffb      	ldrb	r3, [r7, #31]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d178      	bne.n	800d9d8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f2:	4413      	add	r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <put_fat+0xf0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	091b      	lsrs	r3, r3, #4
 800d904:	b2db      	uxtb	r3, r3
 800d906:	e00e      	b.n	800d926 <put_fat+0x10e>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b25b      	sxtb	r3, r3
 800d90e:	f023 030f 	bic.w	r3, r3, #15
 800d912:	b25a      	sxtb	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	0a1b      	lsrs	r3, r3, #8
 800d918:	b25b      	sxtb	r3, r3
 800d91a:	f003 030f 	and.w	r3, r3, #15
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b25b      	sxtb	r3, r3
 800d924:	b2db      	uxtb	r3, r3
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	70da      	strb	r2, [r3, #3]
			break;
 800d930:	e057      	b.n	800d9e2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6a1a      	ldr	r2, [r3, #32]
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	0a1b      	lsrs	r3, r3, #8
 800d93a:	4413      	add	r3, r2
 800d93c:	4619      	mov	r1, r3
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7ff fe08 	bl	800d554 <move_window>
 800d944:	4603      	mov	r3, r0
 800d946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d948:	7ffb      	ldrb	r3, [r7, #31]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d146      	bne.n	800d9dc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d95c:	4413      	add	r3, r2
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	b292      	uxth	r2, r2
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff fb80 	bl	800d06a <st_word>
			fs->wflag = 1;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2201      	movs	r2, #1
 800d96e:	70da      	strb	r2, [r3, #3]
			break;
 800d970:	e037      	b.n	800d9e2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6a1a      	ldr	r2, [r3, #32]
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	09db      	lsrs	r3, r3, #7
 800d97a:	4413      	add	r3, r2
 800d97c:	4619      	mov	r1, r3
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff fde8 	bl	800d554 <move_window>
 800d984:	4603      	mov	r3, r0
 800d986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d988:	7ffb      	ldrb	r3, [r7, #31]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d128      	bne.n	800d9e0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d9a2:	4413      	add	r3, r2
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fb3d 	bl	800d024 <ld_dword>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d9b0:	4323      	orrs	r3, r4
 800d9b2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d9c2:	4413      	add	r3, r2
 800d9c4:	6879      	ldr	r1, [r7, #4]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fb6a 	bl	800d0a0 <st_dword>
			fs->wflag = 1;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	70da      	strb	r2, [r3, #3]
			break;
 800d9d2:	e006      	b.n	800d9e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d9d4:	bf00      	nop
 800d9d6:	e004      	b.n	800d9e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d9d8:	bf00      	nop
 800d9da:	e002      	b.n	800d9e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d9dc:	bf00      	nop
 800d9de:	e000      	b.n	800d9e2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d9e0:	bf00      	nop
		}
	}
	return res;
 800d9e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3724      	adds	r7, #36	@ 0x24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd90      	pop	{r4, r7, pc}

0800d9ec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b088      	sub	sp, #32
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d904      	bls.n	800da12 <remove_chain+0x26>
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d301      	bcc.n	800da16 <remove_chain+0x2a>
 800da12:	2302      	movs	r3, #2
 800da14:	e04b      	b.n	800daae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00c      	beq.n	800da36 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800da1c:	f04f 32ff 	mov.w	r2, #4294967295
 800da20:	6879      	ldr	r1, [r7, #4]
 800da22:	69b8      	ldr	r0, [r7, #24]
 800da24:	f7ff fef8 	bl	800d818 <put_fat>
 800da28:	4603      	mov	r3, r0
 800da2a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800da2c:	7ffb      	ldrb	r3, [r7, #31]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <remove_chain+0x4a>
 800da32:	7ffb      	ldrb	r3, [r7, #31]
 800da34:	e03b      	b.n	800daae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800da36:	68b9      	ldr	r1, [r7, #8]
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7ff fe46 	bl	800d6ca <get_fat>
 800da3e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d031      	beq.n	800daaa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <remove_chain+0x64>
 800da4c:	2302      	movs	r3, #2
 800da4e:	e02e      	b.n	800daae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da56:	d101      	bne.n	800da5c <remove_chain+0x70>
 800da58:	2301      	movs	r3, #1
 800da5a:	e028      	b.n	800daae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800da5c:	2200      	movs	r2, #0
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	69b8      	ldr	r0, [r7, #24]
 800da62:	f7ff fed9 	bl	800d818 <put_fat>
 800da66:	4603      	mov	r3, r0
 800da68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800da6a:	7ffb      	ldrb	r3, [r7, #31]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <remove_chain+0x88>
 800da70:	7ffb      	ldrb	r3, [r7, #31]
 800da72:	e01c      	b.n	800daae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	3b02      	subs	r3, #2
 800da7e:	429a      	cmp	r2, r3
 800da80:	d20b      	bcs.n	800da9a <remove_chain+0xae>
			fs->free_clst++;
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	791b      	ldrb	r3, [r3, #4]
 800da90:	f043 0301 	orr.w	r3, r3, #1
 800da94:	b2da      	uxtb	r2, r3
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d3c6      	bcc.n	800da36 <remove_chain+0x4a>
 800daa8:	e000      	b.n	800daac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800daaa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3720      	adds	r7, #32
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b088      	sub	sp, #32
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10d      	bne.n	800dae8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <create_chain+0x2c>
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	695b      	ldr	r3, [r3, #20]
 800dadc:	69ba      	ldr	r2, [r7, #24]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d31b      	bcc.n	800db1a <create_chain+0x64>
 800dae2:	2301      	movs	r3, #1
 800dae4:	61bb      	str	r3, [r7, #24]
 800dae6:	e018      	b.n	800db1a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff fded 	bl	800d6ca <get_fat>
 800daf0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d801      	bhi.n	800dafc <create_chain+0x46>
 800daf8:	2301      	movs	r3, #1
 800dafa:	e070      	b.n	800dbde <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d101      	bne.n	800db08 <create_chain+0x52>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	e06a      	b.n	800dbde <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	695b      	ldr	r3, [r3, #20]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d201      	bcs.n	800db16 <create_chain+0x60>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	e063      	b.n	800dbde <create_chain+0x128>
		scl = clst;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	3301      	adds	r3, #1
 800db22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	69fa      	ldr	r2, [r7, #28]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d307      	bcc.n	800db3e <create_chain+0x88>
				ncl = 2;
 800db2e:	2302      	movs	r3, #2
 800db30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800db32:	69fa      	ldr	r2, [r7, #28]
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	429a      	cmp	r2, r3
 800db38:	d901      	bls.n	800db3e <create_chain+0x88>
 800db3a:	2300      	movs	r3, #0
 800db3c:	e04f      	b.n	800dbde <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800db3e:	69f9      	ldr	r1, [r7, #28]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff fdc2 	bl	800d6ca <get_fat>
 800db46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00e      	beq.n	800db6c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d003      	beq.n	800db5c <create_chain+0xa6>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5a:	d101      	bne.n	800db60 <create_chain+0xaa>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	e03e      	b.n	800dbde <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800db60:	69fa      	ldr	r2, [r7, #28]
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	429a      	cmp	r2, r3
 800db66:	d1da      	bne.n	800db1e <create_chain+0x68>
 800db68:	2300      	movs	r3, #0
 800db6a:	e038      	b.n	800dbde <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800db6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800db6e:	f04f 32ff 	mov.w	r2, #4294967295
 800db72:	69f9      	ldr	r1, [r7, #28]
 800db74:	6938      	ldr	r0, [r7, #16]
 800db76:	f7ff fe4f 	bl	800d818 <put_fat>
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d109      	bne.n	800db98 <create_chain+0xe2>
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d006      	beq.n	800db98 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800db8a:	69fa      	ldr	r2, [r7, #28]
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6938      	ldr	r0, [r7, #16]
 800db90:	f7ff fe42 	bl	800d818 <put_fat>
 800db94:	4603      	mov	r3, r0
 800db96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db98:	7dfb      	ldrb	r3, [r7, #23]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d116      	bne.n	800dbcc <create_chain+0x116>
		fs->last_clst = ncl;
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	69fa      	ldr	r2, [r7, #28]
 800dba2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	3b02      	subs	r3, #2
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d804      	bhi.n	800dbbc <create_chain+0x106>
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	1e5a      	subs	r2, r3, #1
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	791b      	ldrb	r3, [r3, #4]
 800dbc0:	f043 0301 	orr.w	r3, r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	711a      	strb	r2, [r3, #4]
 800dbca:	e007      	b.n	800dbdc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d102      	bne.n	800dbd8 <create_chain+0x122>
 800dbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd6:	e000      	b.n	800dbda <create_chain+0x124>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dbdc:	69fb      	ldr	r3, [r7, #28]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3720      	adds	r7, #32
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b087      	sub	sp, #28
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	0a5b      	lsrs	r3, r3, #9
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	8952      	ldrh	r2, [r2, #10]
 800dc06:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	1d1a      	adds	r2, r3, #4
 800dc10:	613a      	str	r2, [r7, #16]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <clmt_clust+0x3a>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e010      	b.n	800dc42 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d307      	bcc.n	800dc38 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	617b      	str	r3, [r7, #20]
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3304      	adds	r3, #4
 800dc34:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc36:	e7e9      	b.n	800dc0c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dc38:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	4413      	add	r3, r2
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	371c      	adds	r7, #28
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b086      	sub	sp, #24
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc64:	d204      	bcs.n	800dc70 <dir_sdi+0x22>
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	f003 031f 	and.w	r3, r3, #31
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dc70:	2302      	movs	r3, #2
 800dc72:	e063      	b.n	800dd3c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <dir_sdi+0x46>
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d902      	bls.n	800dc94 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc92:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10c      	bne.n	800dcb4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	095b      	lsrs	r3, r3, #5
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	8912      	ldrh	r2, [r2, #8]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d301      	bcc.n	800dcaa <dir_sdi+0x5c>
 800dca6:	2302      	movs	r3, #2
 800dca8:	e048      	b.n	800dd3c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	61da      	str	r2, [r3, #28]
 800dcb2:	e029      	b.n	800dd08 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	895b      	ldrh	r3, [r3, #10]
 800dcb8:	025b      	lsls	r3, r3, #9
 800dcba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcbc:	e019      	b.n	800dcf2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6979      	ldr	r1, [r7, #20]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff fd01 	bl	800d6ca <get_fat>
 800dcc8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d101      	bne.n	800dcd6 <dir_sdi+0x88>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e032      	b.n	800dd3c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d904      	bls.n	800dce6 <dir_sdi+0x98>
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d301      	bcc.n	800dcea <dir_sdi+0x9c>
 800dce6:	2302      	movs	r3, #2
 800dce8:	e028      	b.n	800dd3c <dir_sdi+0xee>
			ofs -= csz;
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d2e1      	bcs.n	800dcbe <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dcfa:	6979      	ldr	r1, [r7, #20]
 800dcfc:	6938      	ldr	r0, [r7, #16]
 800dcfe:	f7ff fcc5 	bl	800d68c <clust2sect>
 800dd02:	4602      	mov	r2, r0
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <dir_sdi+0xcc>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e010      	b.n	800dd3c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	69da      	ldr	r2, [r3, #28]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	0a5b      	lsrs	r3, r3, #9
 800dd22:	441a      	add	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd34:	441a      	add	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	695b      	ldr	r3, [r3, #20]
 800dd58:	3320      	adds	r3, #32
 800dd5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	69db      	ldr	r3, [r3, #28]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <dir_next+0x28>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd6a:	d301      	bcc.n	800dd70 <dir_next+0x2c>
 800dd6c:	2304      	movs	r3, #4
 800dd6e:	e0aa      	b.n	800dec6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f040 8098 	bne.w	800deac <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	1c5a      	adds	r2, r3, #1
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	699b      	ldr	r3, [r3, #24]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10b      	bne.n	800dda6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	095b      	lsrs	r3, r3, #5
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	8912      	ldrh	r2, [r2, #8]
 800dd96:	4293      	cmp	r3, r2
 800dd98:	f0c0 8088 	bcc.w	800deac <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	61da      	str	r2, [r3, #28]
 800dda2:	2304      	movs	r3, #4
 800dda4:	e08f      	b.n	800dec6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	0a5b      	lsrs	r3, r3, #9
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	8952      	ldrh	r2, [r2, #10]
 800ddae:	3a01      	subs	r2, #1
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d17a      	bne.n	800deac <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	f7ff fc83 	bl	800d6ca <get_fat>
 800ddc4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d801      	bhi.n	800ddd0 <dir_next+0x8c>
 800ddcc:	2302      	movs	r3, #2
 800ddce:	e07a      	b.n	800dec6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d101      	bne.n	800dddc <dir_next+0x98>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e074      	b.n	800dec6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	695b      	ldr	r3, [r3, #20]
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d358      	bcc.n	800de98 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d104      	bne.n	800ddf6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	61da      	str	r2, [r3, #28]
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	e067      	b.n	800dec6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	699b      	ldr	r3, [r3, #24]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4610      	mov	r0, r2
 800de00:	f7ff fe59 	bl	800dab6 <create_chain>
 800de04:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <dir_next+0xcc>
 800de0c:	2307      	movs	r3, #7
 800de0e:	e05a      	b.n	800dec6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <dir_next+0xd6>
 800de16:	2302      	movs	r3, #2
 800de18:	e055      	b.n	800dec6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de20:	d101      	bne.n	800de26 <dir_next+0xe2>
 800de22:	2301      	movs	r3, #1
 800de24:	e04f      	b.n	800dec6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7ff fb50 	bl	800d4cc <sync_window>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <dir_next+0xf2>
 800de32:	2301      	movs	r3, #1
 800de34:	e047      	b.n	800dec6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3330      	adds	r3, #48	@ 0x30
 800de3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de3e:	2100      	movs	r1, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff f97a 	bl	800d13a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de46:	2300      	movs	r3, #0
 800de48:	613b      	str	r3, [r7, #16]
 800de4a:	6979      	ldr	r1, [r7, #20]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff fc1d 	bl	800d68c <clust2sect>
 800de52:	4602      	mov	r2, r0
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de58:	e012      	b.n	800de80 <dir_next+0x13c>
						fs->wflag = 1;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2201      	movs	r2, #1
 800de5e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff fb33 	bl	800d4cc <sync_window>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <dir_next+0x12c>
 800de6c:	2301      	movs	r3, #1
 800de6e:	e02a      	b.n	800dec6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	3301      	adds	r3, #1
 800de74:	613b      	str	r3, [r7, #16]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7a:	1c5a      	adds	r2, r3, #1
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	895b      	ldrh	r3, [r3, #10]
 800de84:	461a      	mov	r2, r3
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	4293      	cmp	r3, r2
 800de8a:	d3e6      	bcc.n	800de5a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	1ad2      	subs	r2, r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800de9e:	6979      	ldr	r1, [r7, #20]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7ff fbf3 	bl	800d68c <clust2sect>
 800dea6:	4602      	mov	r2, r0
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800debe:	441a      	add	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b086      	sub	sp, #24
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dede:	2100      	movs	r1, #0
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7ff feb4 	bl	800dc4e <dir_sdi>
 800dee6:	4603      	mov	r3, r0
 800dee8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d12b      	bne.n	800df48 <dir_alloc+0x7a>
		n = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	4619      	mov	r1, r3
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f7ff fb2a 	bl	800d554 <move_window>
 800df00:	4603      	mov	r3, r0
 800df02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df04:	7dfb      	ldrb	r3, [r7, #23]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d11d      	bne.n	800df46 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a1b      	ldr	r3, [r3, #32]
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2be5      	cmp	r3, #229	@ 0xe5
 800df12:	d004      	beq.n	800df1e <dir_alloc+0x50>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d107      	bne.n	800df2e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	3301      	adds	r3, #1
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d102      	bne.n	800df32 <dir_alloc+0x64>
 800df2c:	e00c      	b.n	800df48 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800df2e:	2300      	movs	r3, #0
 800df30:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800df32:	2101      	movs	r1, #1
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ff05 	bl	800dd44 <dir_next>
 800df3a:	4603      	mov	r3, r0
 800df3c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d0d7      	beq.n	800def4 <dir_alloc+0x26>
 800df44:	e000      	b.n	800df48 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800df46:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d101      	bne.n	800df52 <dir_alloc+0x84>
 800df4e:	2307      	movs	r3, #7
 800df50:	75fb      	strb	r3, [r7, #23]
	return res;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	331a      	adds	r3, #26
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff f842 	bl	800cff4 <ld_word>
 800df70:	4603      	mov	r3, r0
 800df72:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d109      	bne.n	800df90 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	3314      	adds	r3, #20
 800df80:	4618      	mov	r0, r3
 800df82:	f7ff f837 	bl	800cff4 <ld_word>
 800df86:	4603      	mov	r3, r0
 800df88:	041b      	lsls	r3, r3, #16
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800df90:	68fb      	ldr	r3, [r7, #12]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b084      	sub	sp, #16
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	60f8      	str	r0, [r7, #12]
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	331a      	adds	r3, #26
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	b292      	uxth	r2, r2
 800dfae:	4611      	mov	r1, r2
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff f85a 	bl	800d06a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d109      	bne.n	800dfd2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	f103 0214 	add.w	r2, r3, #20
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	0c1b      	lsrs	r3, r3, #16
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4610      	mov	r0, r2
 800dfce:	f7ff f84c 	bl	800d06a <st_word>
	}
}
 800dfd2:	bf00      	nop
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b086      	sub	sp, #24
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fe2f 	bl	800dc4e <dir_sdi>
 800dff0:	4603      	mov	r3, r0
 800dff2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dff4:	7dfb      	ldrb	r3, [r7, #23]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <dir_find+0x24>
 800dffa:	7dfb      	ldrb	r3, [r7, #23]
 800dffc:	e03e      	b.n	800e07c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	69db      	ldr	r3, [r3, #28]
 800e002:	4619      	mov	r1, r3
 800e004:	6938      	ldr	r0, [r7, #16]
 800e006:	f7ff faa5 	bl	800d554 <move_window>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d12f      	bne.n	800e074 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d102      	bne.n	800e028 <dir_find+0x4e>
 800e022:	2304      	movs	r3, #4
 800e024:	75fb      	strb	r3, [r7, #23]
 800e026:	e028      	b.n	800e07a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a1b      	ldr	r3, [r3, #32]
 800e02c:	330b      	adds	r3, #11
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e034:	b2da      	uxtb	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	330b      	adds	r3, #11
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	f003 0308 	and.w	r3, r3, #8
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10a      	bne.n	800e060 <dir_find+0x86>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a18      	ldr	r0, [r3, #32]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3324      	adds	r3, #36	@ 0x24
 800e052:	220b      	movs	r2, #11
 800e054:	4619      	mov	r1, r3
 800e056:	f7ff f88b 	bl	800d170 <mem_cmp>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00b      	beq.n	800e078 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e060:	2100      	movs	r1, #0
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fe6e 	bl	800dd44 <dir_next>
 800e068:	4603      	mov	r3, r0
 800e06a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e06c:	7dfb      	ldrb	r3, [r7, #23]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d0c5      	beq.n	800dffe <dir_find+0x24>
 800e072:	e002      	b.n	800e07a <dir_find+0xa0>
		if (res != FR_OK) break;
 800e074:	bf00      	nop
 800e076:	e000      	b.n	800e07a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e078:	bf00      	nop

	return res;
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e092:	2101      	movs	r1, #1
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff ff1a 	bl	800dece <dir_alloc>
 800e09a:	4603      	mov	r3, r0
 800e09c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d11c      	bne.n	800e0de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	68b8      	ldr	r0, [r7, #8]
 800e0ac:	f7ff fa52 	bl	800d554 <move_window>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d111      	bne.n	800e0de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	2220      	movs	r2, #32
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff f839 	bl	800d13a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a18      	ldr	r0, [r3, #32]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3324      	adds	r3, #36	@ 0x24
 800e0d0:	220b      	movs	r2, #11
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f7ff f810 	bl	800d0f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3324      	adds	r3, #36	@ 0x24
 800e0fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e0fe:	220b      	movs	r2, #11
 800e100:	2120      	movs	r1, #32
 800e102:	68b8      	ldr	r0, [r7, #8]
 800e104:	f7ff f819 	bl	800d13a <mem_set>
	si = i = 0; ni = 8;
 800e108:	2300      	movs	r3, #0
 800e10a:	613b      	str	r3, [r7, #16]
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	2308      	movs	r3, #8
 800e112:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	61fa      	str	r2, [r7, #28]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	4413      	add	r3, r2
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e122:	7efb      	ldrb	r3, [r7, #27]
 800e124:	2b20      	cmp	r3, #32
 800e126:	d94e      	bls.n	800e1c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e128:	7efb      	ldrb	r3, [r7, #27]
 800e12a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e12c:	d006      	beq.n	800e13c <create_name+0x54>
 800e12e:	7efb      	ldrb	r3, [r7, #27]
 800e130:	2b5c      	cmp	r3, #92	@ 0x5c
 800e132:	d110      	bne.n	800e156 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e134:	e002      	b.n	800e13c <create_name+0x54>
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	3301      	adds	r3, #1
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	4413      	add	r3, r2
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2b2f      	cmp	r3, #47	@ 0x2f
 800e146:	d0f6      	beq.n	800e136 <create_name+0x4e>
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	4413      	add	r3, r2
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b5c      	cmp	r3, #92	@ 0x5c
 800e152:	d0f0      	beq.n	800e136 <create_name+0x4e>
			break;
 800e154:	e038      	b.n	800e1c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e156:	7efb      	ldrb	r3, [r7, #27]
 800e158:	2b2e      	cmp	r3, #46	@ 0x2e
 800e15a:	d003      	beq.n	800e164 <create_name+0x7c>
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	429a      	cmp	r2, r3
 800e162:	d30c      	bcc.n	800e17e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2b0b      	cmp	r3, #11
 800e168:	d002      	beq.n	800e170 <create_name+0x88>
 800e16a:	7efb      	ldrb	r3, [r7, #27]
 800e16c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e16e:	d001      	beq.n	800e174 <create_name+0x8c>
 800e170:	2306      	movs	r3, #6
 800e172:	e044      	b.n	800e1fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e174:	2308      	movs	r3, #8
 800e176:	613b      	str	r3, [r7, #16]
 800e178:	230b      	movs	r3, #11
 800e17a:	617b      	str	r3, [r7, #20]
			continue;
 800e17c:	e022      	b.n	800e1c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e17e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e182:	2b00      	cmp	r3, #0
 800e184:	da04      	bge.n	800e190 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e186:	7efb      	ldrb	r3, [r7, #27]
 800e188:	3b80      	subs	r3, #128	@ 0x80
 800e18a:	4a1f      	ldr	r2, [pc, #124]	@ (800e208 <create_name+0x120>)
 800e18c:	5cd3      	ldrb	r3, [r2, r3]
 800e18e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e190:	7efb      	ldrb	r3, [r7, #27]
 800e192:	4619      	mov	r1, r3
 800e194:	481d      	ldr	r0, [pc, #116]	@ (800e20c <create_name+0x124>)
 800e196:	f7ff f812 	bl	800d1be <chk_chr>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <create_name+0xbc>
 800e1a0:	2306      	movs	r3, #6
 800e1a2:	e02c      	b.n	800e1fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e1a4:	7efb      	ldrb	r3, [r7, #27]
 800e1a6:	2b60      	cmp	r3, #96	@ 0x60
 800e1a8:	d905      	bls.n	800e1b6 <create_name+0xce>
 800e1aa:	7efb      	ldrb	r3, [r7, #27]
 800e1ac:	2b7a      	cmp	r3, #122	@ 0x7a
 800e1ae:	d802      	bhi.n	800e1b6 <create_name+0xce>
 800e1b0:	7efb      	ldrb	r3, [r7, #27]
 800e1b2:	3b20      	subs	r3, #32
 800e1b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	613a      	str	r2, [r7, #16]
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	4413      	add	r3, r2
 800e1c0:	7efa      	ldrb	r2, [r7, #27]
 800e1c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e1c4:	e7a6      	b.n	800e114 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	441a      	add	r2, r3
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <create_name+0xf4>
 800e1d8:	2306      	movs	r3, #6
 800e1da:	e010      	b.n	800e1fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2be5      	cmp	r3, #229	@ 0xe5
 800e1e2:	d102      	bne.n	800e1ea <create_name+0x102>
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2205      	movs	r2, #5
 800e1e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e1ea:	7efb      	ldrb	r3, [r7, #27]
 800e1ec:	2b20      	cmp	r3, #32
 800e1ee:	d801      	bhi.n	800e1f4 <create_name+0x10c>
 800e1f0:	2204      	movs	r2, #4
 800e1f2:	e000      	b.n	800e1f6 <create_name+0x10e>
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	330b      	adds	r3, #11
 800e1fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e1fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3720      	adds	r7, #32
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	08011468 	.word	0x08011468
 800e20c:	0801140c 	.word	0x0801140c

0800e210 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e224:	e002      	b.n	800e22c <follow_path+0x1c>
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	3301      	adds	r3, #1
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b2f      	cmp	r3, #47	@ 0x2f
 800e232:	d0f8      	beq.n	800e226 <follow_path+0x16>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	2b5c      	cmp	r3, #92	@ 0x5c
 800e23a:	d0f4      	beq.n	800e226 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	2200      	movs	r2, #0
 800e240:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b1f      	cmp	r3, #31
 800e248:	d80a      	bhi.n	800e260 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2280      	movs	r2, #128	@ 0x80
 800e24e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e252:	2100      	movs	r1, #0
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff fcfa 	bl	800dc4e <dir_sdi>
 800e25a:	4603      	mov	r3, r0
 800e25c:	75fb      	strb	r3, [r7, #23]
 800e25e:	e043      	b.n	800e2e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e260:	463b      	mov	r3, r7
 800e262:	4619      	mov	r1, r3
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff ff3f 	bl	800e0e8 <create_name>
 800e26a:	4603      	mov	r3, r0
 800e26c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e26e:	7dfb      	ldrb	r3, [r7, #23]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d134      	bne.n	800e2de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7ff feb0 	bl	800dfda <dir_find>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e284:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e286:	7dfb      	ldrb	r3, [r7, #23]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00a      	beq.n	800e2a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	2b04      	cmp	r3, #4
 800e290:	d127      	bne.n	800e2e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e292:	7afb      	ldrb	r3, [r7, #11]
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d122      	bne.n	800e2e2 <follow_path+0xd2>
 800e29c:	2305      	movs	r3, #5
 800e29e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e2a0:	e01f      	b.n	800e2e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e2a2:	7afb      	ldrb	r3, [r7, #11]
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d11c      	bne.n	800e2e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	799b      	ldrb	r3, [r3, #6]
 800e2b0:	f003 0310 	and.w	r3, r3, #16
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e2b8:	2305      	movs	r3, #5
 800e2ba:	75fb      	strb	r3, [r7, #23]
 800e2bc:	e014      	b.n	800e2e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2cc:	4413      	add	r3, r2
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fe43 	bl	800df5c <ld_clust>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2dc:	e7c0      	b.n	800e260 <follow_path+0x50>
			if (res != FR_OK) break;
 800e2de:	bf00      	nop
 800e2e0:	e002      	b.n	800e2e8 <follow_path+0xd8>
				break;
 800e2e2:	bf00      	nop
 800e2e4:	e000      	b.n	800e2e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e2e6:	bf00      	nop
			}
		}
	}

	return res;
 800e2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b087      	sub	sp, #28
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d031      	beq.n	800e36c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	617b      	str	r3, [r7, #20]
 800e30e:	e002      	b.n	800e316 <get_ldnumber+0x24>
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	3301      	adds	r3, #1
 800e314:	617b      	str	r3, [r7, #20]
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b20      	cmp	r3, #32
 800e31c:	d903      	bls.n	800e326 <get_ldnumber+0x34>
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	2b3a      	cmp	r3, #58	@ 0x3a
 800e324:	d1f4      	bne.n	800e310 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e32c:	d11c      	bne.n	800e368 <get_ldnumber+0x76>
			tp = *path;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	60fa      	str	r2, [r7, #12]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	3b30      	subs	r3, #48	@ 0x30
 800e33e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b09      	cmp	r3, #9
 800e344:	d80e      	bhi.n	800e364 <get_ldnumber+0x72>
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d10a      	bne.n	800e364 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d107      	bne.n	800e364 <get_ldnumber+0x72>
					vol = (int)i;
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	e002      	b.n	800e36e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e368:	2300      	movs	r3, #0
 800e36a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e36c:	693b      	ldr	r3, [r7, #16]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	371c      	adds	r7, #28
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
	...

0800e37c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	70da      	strb	r2, [r3, #3]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f04f 32ff 	mov.w	r2, #4294967295
 800e392:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff f8dc 	bl	800d554 <move_window>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <check_fs+0x2a>
 800e3a2:	2304      	movs	r3, #4
 800e3a4:	e038      	b.n	800e418 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3330      	adds	r3, #48	@ 0x30
 800e3aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe fe20 	bl	800cff4 <ld_word>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d001      	beq.n	800e3c4 <check_fs+0x48>
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	e029      	b.n	800e418 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3ca:	2be9      	cmp	r3, #233	@ 0xe9
 800e3cc:	d009      	beq.n	800e3e2 <check_fs+0x66>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3d4:	2beb      	cmp	r3, #235	@ 0xeb
 800e3d6:	d11e      	bne.n	800e416 <check_fs+0x9a>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e3de:	2b90      	cmp	r3, #144	@ 0x90
 800e3e0:	d119      	bne.n	800e416 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3330      	adds	r3, #48	@ 0x30
 800e3e6:	3336      	adds	r3, #54	@ 0x36
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fe1b 	bl	800d024 <ld_dword>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e3f4:	4a0a      	ldr	r2, [pc, #40]	@ (800e420 <check_fs+0xa4>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d101      	bne.n	800e3fe <check_fs+0x82>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e00c      	b.n	800e418 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3330      	adds	r3, #48	@ 0x30
 800e402:	3352      	adds	r3, #82	@ 0x52
 800e404:	4618      	mov	r0, r3
 800e406:	f7fe fe0d 	bl	800d024 <ld_dword>
 800e40a:	4603      	mov	r3, r0
 800e40c:	4a05      	ldr	r2, [pc, #20]	@ (800e424 <check_fs+0xa8>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d101      	bne.n	800e416 <check_fs+0x9a>
 800e412:	2300      	movs	r3, #0
 800e414:	e000      	b.n	800e418 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e416:	2302      	movs	r3, #2
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	00544146 	.word	0x00544146
 800e424:	33544146 	.word	0x33544146

0800e428 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b096      	sub	sp, #88	@ 0x58
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	4613      	mov	r3, r2
 800e434:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff ff58 	bl	800e2f2 <get_ldnumber>
 800e442:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e446:	2b00      	cmp	r3, #0
 800e448:	da01      	bge.n	800e44e <find_volume+0x26>
 800e44a:	230b      	movs	r3, #11
 800e44c:	e22d      	b.n	800e8aa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e44e:	4aa1      	ldr	r2, [pc, #644]	@ (800e6d4 <find_volume+0x2ac>)
 800e450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e456:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <find_volume+0x3a>
 800e45e:	230c      	movs	r3, #12
 800e460:	e223      	b.n	800e8aa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e466:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e468:	79fb      	ldrb	r3, [r7, #7]
 800e46a:	f023 0301 	bic.w	r3, r3, #1
 800e46e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01a      	beq.n	800e4ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47a:	785b      	ldrb	r3, [r3, #1]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fd19 	bl	800ceb4 <disk_status>
 800e482:	4603      	mov	r3, r0
 800e484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10c      	bne.n	800e4ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d007      	beq.n	800e4aa <find_volume+0x82>
 800e49a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e49e:	f003 0304 	and.w	r3, r3, #4
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e4a6:	230a      	movs	r3, #10
 800e4a8:	e1ff      	b.n	800e8aa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e1fd      	b.n	800e8aa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fd11 	bl	800cee8 <disk_initialize>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e4cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e1e6      	b.n	800e8aa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d007      	beq.n	800e4f2 <find_volume+0xca>
 800e4e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e4ee:	230a      	movs	r3, #10
 800e4f0:	e1db      	b.n	800e8aa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e4f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e4f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4fa:	f7ff ff3f 	bl	800e37c <check_fs>
 800e4fe:	4603      	mov	r3, r0
 800e500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e504:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d149      	bne.n	800e5a0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e50c:	2300      	movs	r3, #0
 800e50e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e510:	e01e      	b.n	800e550 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e514:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e51a:	011b      	lsls	r3, r3, #4
 800e51c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e520:	4413      	add	r3, r2
 800e522:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e526:	3304      	adds	r3, #4
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d006      	beq.n	800e53c <find_volume+0x114>
 800e52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e530:	3308      	adds	r3, #8
 800e532:	4618      	mov	r0, r3
 800e534:	f7fe fd76 	bl	800d024 <ld_dword>
 800e538:	4602      	mov	r2, r0
 800e53a:	e000      	b.n	800e53e <find_volume+0x116>
 800e53c:	2200      	movs	r2, #0
 800e53e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	3358      	adds	r3, #88	@ 0x58
 800e544:	443b      	add	r3, r7
 800e546:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e54a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e54c:	3301      	adds	r3, #1
 800e54e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e552:	2b03      	cmp	r3, #3
 800e554:	d9dd      	bls.n	800e512 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e556:	2300      	movs	r3, #0
 800e558:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <find_volume+0x13e>
 800e560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e562:	3b01      	subs	r3, #1
 800e564:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	3358      	adds	r3, #88	@ 0x58
 800e56c:	443b      	add	r3, r7
 800e56e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e572:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e576:	2b00      	cmp	r3, #0
 800e578:	d005      	beq.n	800e586 <find_volume+0x15e>
 800e57a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e57c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e57e:	f7ff fefd 	bl	800e37c <check_fs>
 800e582:	4603      	mov	r3, r0
 800e584:	e000      	b.n	800e588 <find_volume+0x160>
 800e586:	2303      	movs	r3, #3
 800e588:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e58c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e590:	2b01      	cmp	r3, #1
 800e592:	d905      	bls.n	800e5a0 <find_volume+0x178>
 800e594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e596:	3301      	adds	r3, #1
 800e598:	643b      	str	r3, [r7, #64]	@ 0x40
 800e59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d9e2      	bls.n	800e566 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5a4:	2b04      	cmp	r3, #4
 800e5a6:	d101      	bne.n	800e5ac <find_volume+0x184>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e17e      	b.n	800e8aa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e5ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d901      	bls.n	800e5b8 <find_volume+0x190>
 800e5b4:	230d      	movs	r3, #13
 800e5b6:	e178      	b.n	800e8aa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ba:	3330      	adds	r3, #48	@ 0x30
 800e5bc:	330b      	adds	r3, #11
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fd18 	bl	800cff4 <ld_word>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5ca:	d001      	beq.n	800e5d0 <find_volume+0x1a8>
 800e5cc:	230d      	movs	r3, #13
 800e5ce:	e16c      	b.n	800e8aa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	3330      	adds	r3, #48	@ 0x30
 800e5d4:	3316      	adds	r3, #22
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fd0c 	bl	800cff4 <ld_word>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d106      	bne.n	800e5f4 <find_volume+0x1cc>
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e8:	3330      	adds	r3, #48	@ 0x30
 800e5ea:	3324      	adds	r3, #36	@ 0x24
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe fd19 	bl	800d024 <ld_dword>
 800e5f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e5f8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e602:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e606:	789b      	ldrb	r3, [r3, #2]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d005      	beq.n	800e618 <find_volume+0x1f0>
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	789b      	ldrb	r3, [r3, #2]
 800e610:	2b02      	cmp	r3, #2
 800e612:	d001      	beq.n	800e618 <find_volume+0x1f0>
 800e614:	230d      	movs	r3, #13
 800e616:	e148      	b.n	800e8aa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e61a:	789b      	ldrb	r3, [r3, #2]
 800e61c:	461a      	mov	r2, r3
 800e61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e620:	fb02 f303 	mul.w	r3, r2, r3
 800e624:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e62c:	461a      	mov	r2, r3
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e634:	895b      	ldrh	r3, [r3, #10]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d008      	beq.n	800e64c <find_volume+0x224>
 800e63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63c:	895b      	ldrh	r3, [r3, #10]
 800e63e:	461a      	mov	r2, r3
 800e640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e642:	895b      	ldrh	r3, [r3, #10]
 800e644:	3b01      	subs	r3, #1
 800e646:	4013      	ands	r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <find_volume+0x228>
 800e64c:	230d      	movs	r3, #13
 800e64e:	e12c      	b.n	800e8aa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e652:	3330      	adds	r3, #48	@ 0x30
 800e654:	3311      	adds	r3, #17
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fccc 	bl	800cff4 <ld_word>
 800e65c:	4603      	mov	r3, r0
 800e65e:	461a      	mov	r2, r3
 800e660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e662:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e666:	891b      	ldrh	r3, [r3, #8]
 800e668:	f003 030f 	and.w	r3, r3, #15
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <find_volume+0x24e>
 800e672:	230d      	movs	r3, #13
 800e674:	e119      	b.n	800e8aa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	3330      	adds	r3, #48	@ 0x30
 800e67a:	3313      	adds	r3, #19
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fe fcb9 	bl	800cff4 <ld_word>
 800e682:	4603      	mov	r3, r0
 800e684:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d106      	bne.n	800e69a <find_volume+0x272>
 800e68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68e:	3330      	adds	r3, #48	@ 0x30
 800e690:	3320      	adds	r3, #32
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe fcc6 	bl	800d024 <ld_dword>
 800e698:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69c:	3330      	adds	r3, #48	@ 0x30
 800e69e:	330e      	adds	r3, #14
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe fca7 	bl	800cff4 <ld_word>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e6aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <find_volume+0x28c>
 800e6b0:	230d      	movs	r3, #13
 800e6b2:	e0fa      	b.n	800e8aa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e6b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6b8:	4413      	add	r3, r2
 800e6ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6bc:	8912      	ldrh	r2, [r2, #8]
 800e6be:	0912      	lsrs	r2, r2, #4
 800e6c0:	b292      	uxth	r2, r2
 800e6c2:	4413      	add	r3, r2
 800e6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e6c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d204      	bcs.n	800e6d8 <find_volume+0x2b0>
 800e6ce:	230d      	movs	r3, #13
 800e6d0:	e0eb      	b.n	800e8aa <find_volume+0x482>
 800e6d2:	bf00      	nop
 800e6d4:	24000880 	.word	0x24000880
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6dc:	1ad3      	subs	r3, r2, r3
 800e6de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6e0:	8952      	ldrh	r2, [r2, #10]
 800e6e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <find_volume+0x2ca>
 800e6ee:	230d      	movs	r3, #13
 800e6f0:	e0db      	b.n	800e8aa <find_volume+0x482>
		fmt = FS_FAT32;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d802      	bhi.n	800e708 <find_volume+0x2e0>
 800e702:	2302      	movs	r3, #2
 800e704:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e70e:	4293      	cmp	r3, r2
 800e710:	d802      	bhi.n	800e718 <find_volume+0x2f0>
 800e712:	2301      	movs	r3, #1
 800e714:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71a:	1c9a      	adds	r2, r3, #2
 800e71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e71e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e722:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e724:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e726:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e72a:	441a      	add	r2, r3
 800e72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e734:	441a      	add	r2, r3
 800e736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e738:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e73a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d11e      	bne.n	800e780 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	3330      	adds	r3, #48	@ 0x30
 800e746:	332a      	adds	r3, #42	@ 0x2a
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fe fc53 	bl	800cff4 <ld_word>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <find_volume+0x330>
 800e754:	230d      	movs	r3, #13
 800e756:	e0a8      	b.n	800e8aa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75a:	891b      	ldrh	r3, [r3, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <find_volume+0x33c>
 800e760:	230d      	movs	r3, #13
 800e762:	e0a2      	b.n	800e8aa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e766:	3330      	adds	r3, #48	@ 0x30
 800e768:	332c      	adds	r3, #44	@ 0x2c
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fe fc5a 	bl	800d024 <ld_dword>
 800e770:	4602      	mov	r2, r0
 800e772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e774:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e77e:	e01f      	b.n	800e7c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e782:	891b      	ldrh	r3, [r3, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d101      	bne.n	800e78c <find_volume+0x364>
 800e788:	230d      	movs	r3, #13
 800e78a:	e08e      	b.n	800e8aa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	6a1a      	ldr	r2, [r3, #32]
 800e790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e792:	441a      	add	r2, r3
 800e794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e796:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e798:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d103      	bne.n	800e7a8 <find_volume+0x380>
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	e00a      	b.n	800e7be <find_volume+0x396>
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7aa:	695a      	ldr	r2, [r3, #20]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	4413      	add	r3, r2
 800e7b2:	085a      	lsrs	r2, r3, #1
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e7be:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c2:	699a      	ldr	r2, [r3, #24]
 800e7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e7ca:	0a5b      	lsrs	r3, r3, #9
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d201      	bcs.n	800e7d4 <find_volume+0x3ac>
 800e7d0:	230d      	movs	r3, #13
 800e7d2:	e06a      	b.n	800e8aa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7da:	611a      	str	r2, [r3, #16]
 800e7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7de:	691a      	ldr	r2, [r3, #16]
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e6:	2280      	movs	r2, #128	@ 0x80
 800e7e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e7ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d149      	bne.n	800e886 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	3330      	adds	r3, #48	@ 0x30
 800e7f6:	3330      	adds	r3, #48	@ 0x30
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe fbfb 	bl	800cff4 <ld_word>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b01      	cmp	r3, #1
 800e802:	d140      	bne.n	800e886 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e806:	3301      	adds	r3, #1
 800e808:	4619      	mov	r1, r3
 800e80a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e80c:	f7fe fea2 	bl	800d554 <move_window>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d137      	bne.n	800e886 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e818:	2200      	movs	r2, #0
 800e81a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81e:	3330      	adds	r3, #48	@ 0x30
 800e820:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fbe5 	bl	800cff4 <ld_word>
 800e82a:	4603      	mov	r3, r0
 800e82c:	461a      	mov	r2, r3
 800e82e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e832:	429a      	cmp	r2, r3
 800e834:	d127      	bne.n	800e886 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e838:	3330      	adds	r3, #48	@ 0x30
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fe fbf2 	bl	800d024 <ld_dword>
 800e840:	4603      	mov	r3, r0
 800e842:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b4 <find_volume+0x48c>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d11e      	bne.n	800e886 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e84a:	3330      	adds	r3, #48	@ 0x30
 800e84c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fbe7 	bl	800d024 <ld_dword>
 800e856:	4603      	mov	r3, r0
 800e858:	4a17      	ldr	r2, [pc, #92]	@ (800e8b8 <find_volume+0x490>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d113      	bne.n	800e886 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e860:	3330      	adds	r3, #48	@ 0x30
 800e862:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e866:	4618      	mov	r0, r3
 800e868:	f7fe fbdc 	bl	800d024 <ld_dword>
 800e86c:	4602      	mov	r2, r0
 800e86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e870:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e874:	3330      	adds	r3, #48	@ 0x30
 800e876:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fbd2 	bl	800d024 <ld_dword>
 800e880:	4602      	mov	r2, r0
 800e882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e884:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e888:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e88c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e88e:	4b0b      	ldr	r3, [pc, #44]	@ (800e8bc <find_volume+0x494>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	b29a      	uxth	r2, r3
 800e896:	4b09      	ldr	r3, [pc, #36]	@ (800e8bc <find_volume+0x494>)
 800e898:	801a      	strh	r2, [r3, #0]
 800e89a:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <find_volume+0x494>)
 800e89c:	881a      	ldrh	r2, [r3, #0]
 800e89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e8a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e8a4:	f7fe fdee 	bl	800d484 <clear_lock>
#endif
	return FR_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3758      	adds	r7, #88	@ 0x58
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	41615252 	.word	0x41615252
 800e8b8:	61417272 	.word	0x61417272
 800e8bc:	24000884 	.word	0x24000884

0800e8c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e8ca:	2309      	movs	r3, #9
 800e8cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d01c      	beq.n	800e90e <validate+0x4e>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d018      	beq.n	800e90e <validate+0x4e>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d013      	beq.n	800e90e <validate+0x4e>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	889a      	ldrh	r2, [r3, #4]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	88db      	ldrh	r3, [r3, #6]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d10c      	bne.n	800e90e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	785b      	ldrb	r3, [r3, #1]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe fada 	bl	800ceb4 <disk_status>
 800e900:	4603      	mov	r3, r0
 800e902:	f003 0301 	and.w	r3, r3, #1
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <validate+0x4e>
			res = FR_OK;
 800e90a:	2300      	movs	r3, #0
 800e90c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d102      	bne.n	800e91a <validate+0x5a>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	e000      	b.n	800e91c <validate+0x5c>
 800e91a:	2300      	movs	r3, #0
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	6013      	str	r3, [r2, #0]
	return res;
 800e920:	7bfb      	ldrb	r3, [r7, #15]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	4613      	mov	r3, r2
 800e938:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e93e:	f107 0310 	add.w	r3, r7, #16
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fcd5 	bl	800e2f2 <get_ldnumber>
 800e948:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	da01      	bge.n	800e954 <f_mount+0x28>
 800e950:	230b      	movs	r3, #11
 800e952:	e02b      	b.n	800e9ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e954:	4a17      	ldr	r2, [pc, #92]	@ (800e9b4 <f_mount+0x88>)
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e95c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d005      	beq.n	800e970 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e964:	69b8      	ldr	r0, [r7, #24]
 800e966:	f7fe fd8d 	bl	800d484 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	2200      	movs	r2, #0
 800e96e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	490d      	ldr	r1, [pc, #52]	@ (800e9b4 <f_mount+0x88>)
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <f_mount+0x66>
 800e98c:	79fb      	ldrb	r3, [r7, #7]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d001      	beq.n	800e996 <f_mount+0x6a>
 800e992:	2300      	movs	r3, #0
 800e994:	e00a      	b.n	800e9ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e996:	f107 010c 	add.w	r1, r7, #12
 800e99a:	f107 0308 	add.w	r3, r7, #8
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff fd41 	bl	800e428 <find_volume>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	24000880 	.word	0x24000880

0800e9b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b098      	sub	sp, #96	@ 0x60
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <f_open+0x18>
 800e9cc:	2309      	movs	r3, #9
 800e9ce:	e1a9      	b.n	800ed24 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e9d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e9d8:	79fa      	ldrb	r2, [r7, #7]
 800e9da:	f107 0110 	add.w	r1, r7, #16
 800e9de:	f107 0308 	add.w	r3, r7, #8
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7ff fd20 	bl	800e428 <find_volume>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e9ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f040 818d 	bne.w	800ed12 <f_open+0x35a>
		dj.obj.fs = fs;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	f107 0314 	add.w	r3, r7, #20
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff fc03 	bl	800e210 <follow_path>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ea10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d118      	bne.n	800ea4a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ea18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ea1c:	b25b      	sxtb	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	da03      	bge.n	800ea2a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ea22:	2306      	movs	r3, #6
 800ea24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea28:	e00f      	b.n	800ea4a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	bf8c      	ite	hi
 800ea30:	2301      	movhi	r3, #1
 800ea32:	2300      	movls	r3, #0
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	461a      	mov	r2, r3
 800ea38:	f107 0314 	add.w	r3, r7, #20
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe fbd8 	bl	800d1f4 <chk_lock>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ea4a:	79fb      	ldrb	r3, [r7, #7]
 800ea4c:	f003 031c 	and.w	r3, r3, #28
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d07f      	beq.n	800eb54 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ea54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d017      	beq.n	800ea8c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ea5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d10e      	bne.n	800ea82 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ea64:	f7fe fc22 	bl	800d2ac <enq_lock>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d006      	beq.n	800ea7c <f_open+0xc4>
 800ea6e:	f107 0314 	add.w	r3, r7, #20
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff fb06 	bl	800e084 <dir_register>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	e000      	b.n	800ea7e <f_open+0xc6>
 800ea7c:	2312      	movs	r3, #18
 800ea7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ea82:	79fb      	ldrb	r3, [r7, #7]
 800ea84:	f043 0308 	orr.w	r3, r3, #8
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	e010      	b.n	800eaae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ea8c:	7ebb      	ldrb	r3, [r7, #26]
 800ea8e:	f003 0311 	and.w	r3, r3, #17
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <f_open+0xe6>
					res = FR_DENIED;
 800ea96:	2307      	movs	r3, #7
 800ea98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea9c:	e007      	b.n	800eaae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	f003 0304 	and.w	r3, r3, #4
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <f_open+0xf6>
 800eaa8:	2308      	movs	r3, #8
 800eaaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eaae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d168      	bne.n	800eb88 <f_open+0x1d0>
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	f003 0308 	and.w	r3, r3, #8
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d063      	beq.n	800eb88 <f_open+0x1d0>
				dw = GET_FATTIME();
 800eac0:	f7fd fca0 	bl	800c404 <get_fattime>
 800eac4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eac8:	330e      	adds	r3, #14
 800eaca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe fae7 	bl	800d0a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ead2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ead4:	3316      	adds	r3, #22
 800ead6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe fae1 	bl	800d0a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eae0:	330b      	adds	r3, #11
 800eae2:	2220      	movs	r2, #32
 800eae4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fa35 	bl	800df5c <ld_clust>
 800eaf2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fa4d 	bl	800df9a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eb00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb02:	331c      	adds	r3, #28
 800eb04:	2100      	movs	r1, #0
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fe faca 	bl	800d0a0 <st_dword>
					fs->wflag = 1;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eb12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d037      	beq.n	800eb88 <f_open+0x1d0>
						dw = fs->winsect;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800eb1e:	f107 0314 	add.w	r3, r7, #20
 800eb22:	2200      	movs	r2, #0
 800eb24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe ff60 	bl	800d9ec <remove_chain>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800eb32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d126      	bne.n	800eb88 <f_open+0x1d0>
							res = move_window(fs, dw);
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fe fd08 	bl	800d554 <move_window>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	60da      	str	r2, [r3, #12]
 800eb52:	e019      	b.n	800eb88 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eb54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d115      	bne.n	800eb88 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eb5c:	7ebb      	ldrb	r3, [r7, #26]
 800eb5e:	f003 0310 	and.w	r3, r3, #16
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <f_open+0x1b6>
					res = FR_NO_FILE;
 800eb66:	2304      	movs	r3, #4
 800eb68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eb6c:	e00c      	b.n	800eb88 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eb6e:	79fb      	ldrb	r3, [r7, #7]
 800eb70:	f003 0302 	and.w	r3, r3, #2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d007      	beq.n	800eb88 <f_open+0x1d0>
 800eb78:	7ebb      	ldrb	r3, [r7, #26]
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <f_open+0x1d0>
						res = FR_DENIED;
 800eb82:	2307      	movs	r3, #7
 800eb84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eb88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d126      	bne.n	800ebde <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	f003 0308 	and.w	r3, r3, #8
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d003      	beq.n	800eba2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800eb9a:	79fb      	ldrb	r3, [r7, #7]
 800eb9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eba0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ebaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ebb0:	79fb      	ldrb	r3, [r7, #7]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	bf8c      	ite	hi
 800ebb6:	2301      	movhi	r3, #1
 800ebb8:	2300      	movls	r3, #0
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	f107 0314 	add.w	r3, r7, #20
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe fb93 	bl	800d2f0 <inc_lock>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d102      	bne.n	800ebde <f_open+0x226>
 800ebd8:	2302      	movs	r3, #2
 800ebda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ebde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f040 8095 	bne.w	800ed12 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebec:	4611      	mov	r1, r2
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff f9b4 	bl	800df5c <ld_clust>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ebfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebfc:	331c      	adds	r3, #28
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fa10 	bl	800d024 <ld_dword>
 800ec04:	4602      	mov	r2, r0
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	88da      	ldrh	r2, [r3, #6]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	79fa      	ldrb	r2, [r7, #7]
 800ec22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3330      	adds	r3, #48	@ 0x30
 800ec3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fa7a 	bl	800d13a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ec46:	79fb      	ldrb	r3, [r7, #7]
 800ec48:	f003 0320 	and.w	r3, r3, #32
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d060      	beq.n	800ed12 <f_open+0x35a>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d05c      	beq.n	800ed12 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	68da      	ldr	r2, [r3, #12]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	895b      	ldrh	r3, [r3, #10]
 800ec64:	025b      	lsls	r3, r3, #9
 800ec66:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec74:	e016      	b.n	800eca4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fd25 	bl	800d6ca <get_fat>
 800ec80:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ec82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d802      	bhi.n	800ec8e <f_open+0x2d6>
 800ec88:	2302      	movs	r3, #2
 800ec8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d102      	bne.n	800ec9c <f_open+0x2e4>
 800ec96:	2301      	movs	r3, #1
 800ec98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	657b      	str	r3, [r7, #84]	@ 0x54
 800eca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d103      	bne.n	800ecb4 <f_open+0x2fc>
 800ecac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ecae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d8e0      	bhi.n	800ec76 <f_open+0x2be>
				}
				fp->clust = clst;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ecba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d127      	bne.n	800ed12 <f_open+0x35a>
 800ecc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d022      	beq.n	800ed12 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe fcdb 	bl	800d68c <clust2sect>
 800ecd6:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d103      	bne.n	800ece6 <f_open+0x32e>
						res = FR_INT_ERR;
 800ecde:	2302      	movs	r3, #2
 800ece0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ece4:	e015      	b.n	800ed12 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ece6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece8:	0a5a      	lsrs	r2, r3, #9
 800ecea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecec:	441a      	add	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	7858      	ldrb	r0, [r3, #1]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6a1a      	ldr	r2, [r3, #32]
 800ed00:	2301      	movs	r3, #1
 800ed02:	f7fe f919 	bl	800cf38 <disk_read>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <f_open+0x35a>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ed12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <f_open+0x368>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3760      	adds	r7, #96	@ 0x60
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08e      	sub	sp, #56	@ 0x38
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f107 0214 	add.w	r2, r7, #20
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7ff fdb7 	bl	800e8c0 <validate>
 800ed52:	4603      	mov	r3, r0
 800ed54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d107      	bne.n	800ed70 <f_read+0x44>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	7d5b      	ldrb	r3, [r3, #21]
 800ed64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ed68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <f_read+0x4a>
 800ed70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed74:	e115      	b.n	800efa2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <f_read+0x5a>
 800ed82:	2307      	movs	r3, #7
 800ed84:	e10d      	b.n	800efa2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	699b      	ldr	r3, [r3, #24]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	f240 80fe 	bls.w	800ef98 <f_read+0x26c>
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eda0:	e0fa      	b.n	800ef98 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	699b      	ldr	r3, [r3, #24]
 800eda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f040 80c6 	bne.w	800ef3c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	0a5b      	lsrs	r3, r3, #9
 800edb6:	697a      	ldr	r2, [r7, #20]
 800edb8:	8952      	ldrh	r2, [r2, #10]
 800edba:	3a01      	subs	r2, #1
 800edbc:	4013      	ands	r3, r2
 800edbe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d12f      	bne.n	800ee26 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	699b      	ldr	r3, [r3, #24]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d103      	bne.n	800edd6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800edd4:	e013      	b.n	800edfe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d007      	beq.n	800edee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	4619      	mov	r1, r3
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7fe fefe 	bl	800dbe6 <clmt_clust>
 800edea:	6338      	str	r0, [r7, #48]	@ 0x30
 800edec:	e007      	b.n	800edfe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	69db      	ldr	r3, [r3, #28]
 800edf4:	4619      	mov	r1, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7fe fc67 	bl	800d6ca <get_fat>
 800edfc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800edfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d804      	bhi.n	800ee0e <f_read+0xe2>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2202      	movs	r2, #2
 800ee08:	755a      	strb	r2, [r3, #21]
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	e0c9      	b.n	800efa2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d104      	bne.n	800ee20 <f_read+0xf4>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	755a      	strb	r2, [r3, #21]
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e0c0      	b.n	800efa2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee24:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	69db      	ldr	r3, [r3, #28]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f7fe fc2c 	bl	800d68c <clust2sect>
 800ee34:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d104      	bne.n	800ee46 <f_read+0x11a>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2202      	movs	r2, #2
 800ee40:	755a      	strb	r2, [r3, #21]
 800ee42:	2302      	movs	r3, #2
 800ee44:	e0ad      	b.n	800efa2 <f_read+0x276>
			sect += csect;
 800ee46:	69ba      	ldr	r2, [r7, #24]
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	0a5b      	lsrs	r3, r3, #9
 800ee52:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ee54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d039      	beq.n	800eece <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5e:	4413      	add	r3, r2
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	8952      	ldrh	r2, [r2, #10]
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d905      	bls.n	800ee74 <f_read+0x148>
					cc = fs->csize - csect;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	895b      	ldrh	r3, [r3, #10]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	7858      	ldrb	r0, [r3, #1]
 800ee78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee7e:	f7fe f85b 	bl	800cf38 <disk_read>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <f_read+0x166>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	755a      	strb	r2, [r3, #21]
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e087      	b.n	800efa2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	7d1b      	ldrb	r3, [r3, #20]
 800ee96:	b25b      	sxtb	r3, r3
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	da14      	bge.n	800eec6 <f_read+0x19a>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6a1a      	ldr	r2, [r3, #32]
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d90d      	bls.n	800eec6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6a1a      	ldr	r2, [r3, #32]
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	025b      	lsls	r3, r3, #9
 800eeb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eeb6:	18d0      	adds	r0, r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3330      	adds	r3, #48	@ 0x30
 800eebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7fe f919 	bl	800d0f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec8:	025b      	lsls	r3, r3, #9
 800eeca:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800eecc:	e050      	b.n	800ef70 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	69ba      	ldr	r2, [r7, #24]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d02e      	beq.n	800ef36 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	7d1b      	ldrb	r3, [r3, #20]
 800eedc:	b25b      	sxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	da18      	bge.n	800ef14 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	7858      	ldrb	r0, [r3, #1]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6a1a      	ldr	r2, [r3, #32]
 800eef0:	2301      	movs	r3, #1
 800eef2:	f7fe f841 	bl	800cf78 <disk_write>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d004      	beq.n	800ef06 <f_read+0x1da>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2201      	movs	r2, #1
 800ef00:	755a      	strb	r2, [r3, #21]
 800ef02:	2301      	movs	r3, #1
 800ef04:	e04d      	b.n	800efa2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	7d1b      	ldrb	r3, [r3, #20]
 800ef0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	7858      	ldrb	r0, [r3, #1]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef1e:	2301      	movs	r3, #1
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	f7fe f809 	bl	800cf38 <disk_read>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <f_read+0x20a>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	755a      	strb	r2, [r3, #21]
 800ef32:	2301      	movs	r3, #1
 800ef34:	e035      	b.n	800efa2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef44:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ef48:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ef4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d901      	bls.n	800ef56 <f_read+0x22a>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef64:	4413      	add	r3, r2
 800ef66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef6c:	f7fe f8c4 	bl	800d0f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ef70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	4413      	add	r3, r2
 800ef76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	699a      	ldr	r2, [r3, #24]
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	441a      	add	r2, r3
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	619a      	str	r2, [r3, #24]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8a:	441a      	add	r2, r3
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	601a      	str	r2, [r3, #0]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f47f af01 	bne.w	800eda2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3738      	adds	r7, #56	@ 0x38
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b086      	sub	sp, #24
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f107 0208 	add.w	r2, r7, #8
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fc80 	bl	800e8c0 <validate>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800efc4:	7dfb      	ldrb	r3, [r7, #23]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d168      	bne.n	800f09c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7d1b      	ldrb	r3, [r3, #20]
 800efce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d062      	beq.n	800f09c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7d1b      	ldrb	r3, [r3, #20]
 800efda:	b25b      	sxtb	r3, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	da15      	bge.n	800f00c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	7858      	ldrb	r0, [r3, #1]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1a      	ldr	r2, [r3, #32]
 800efee:	2301      	movs	r3, #1
 800eff0:	f7fd ffc2 	bl	800cf78 <disk_write>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <f_sync+0x54>
 800effa:	2301      	movs	r3, #1
 800effc:	e04f      	b.n	800f09e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7d1b      	ldrb	r3, [r3, #20]
 800f002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f006:	b2da      	uxtb	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f00c:	f7fd f9fa 	bl	800c404 <get_fattime>
 800f010:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f018:	4619      	mov	r1, r3
 800f01a:	4610      	mov	r0, r2
 800f01c:	f7fe fa9a 	bl	800d554 <move_window>
 800f020:	4603      	mov	r3, r0
 800f022:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f024:	7dfb      	ldrb	r3, [r7, #23]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d138      	bne.n	800f09c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	330b      	adds	r3, #11
 800f034:	781a      	ldrb	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	330b      	adds	r3, #11
 800f03a:	f042 0220 	orr.w	r2, r2, #32
 800f03e:	b2d2      	uxtb	r2, r2
 800f040:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	461a      	mov	r2, r3
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	f7fe ffa4 	bl	800df9a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f103 021c 	add.w	r2, r3, #28
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	4619      	mov	r1, r3
 800f05e:	4610      	mov	r0, r2
 800f060:	f7fe f81e 	bl	800d0a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3316      	adds	r3, #22
 800f068:	6939      	ldr	r1, [r7, #16]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fe f818 	bl	800d0a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3312      	adds	r3, #18
 800f074:	2100      	movs	r1, #0
 800f076:	4618      	mov	r0, r3
 800f078:	f7fd fff7 	bl	800d06a <st_word>
					fs->wflag = 1;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	2201      	movs	r2, #1
 800f080:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	4618      	mov	r0, r3
 800f086:	f7fe fa93 	bl	800d5b0 <sync_fs>
 800f08a:	4603      	mov	r3, r0
 800f08c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f096:	b2da      	uxtb	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b084      	sub	sp, #16
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff ff7b 	bl	800efaa <f_sync>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d118      	bne.n	800f0f0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f107 0208 	add.w	r2, r7, #8
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff fbfa 	bl	800e8c0 <validate>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10c      	bne.n	800f0f0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe f996 	bl	800d40c <dec_lock>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b088      	sub	sp, #32
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	60f8      	str	r0, [r7, #12]
 800f102:	60b9      	str	r1, [r7, #8]
 800f104:	607a      	str	r2, [r7, #4]
	int n = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f10e:	e01c      	b.n	800f14a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800f110:	f107 0310 	add.w	r3, r7, #16
 800f114:	f107 0114 	add.w	r1, r7, #20
 800f118:	2201      	movs	r2, #1
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff fe06 	bl	800ed2c <f_read>
		if (rc != 1) break;
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d117      	bne.n	800f156 <f_gets+0x5c>
		c = s[0];
 800f126:	7d3b      	ldrb	r3, [r7, #20]
 800f128:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	2b0d      	cmp	r3, #13
 800f12e:	d00b      	beq.n	800f148 <f_gets+0x4e>
		*p++ = c;
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	61ba      	str	r2, [r7, #24]
 800f136:	7dfa      	ldrb	r2, [r7, #23]
 800f138:	701a      	strb	r2, [r3, #0]
		n++;
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	3301      	adds	r3, #1
 800f13e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	2b0a      	cmp	r3, #10
 800f144:	d009      	beq.n	800f15a <f_gets+0x60>
 800f146:	e000      	b.n	800f14a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f148:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	69fa      	ldr	r2, [r7, #28]
 800f150:	429a      	cmp	r2, r3
 800f152:	dbdd      	blt.n	800f110 <f_gets+0x16>
 800f154:	e002      	b.n	800f15c <f_gets+0x62>
		if (rc != 1) break;
 800f156:	bf00      	nop
 800f158:	e000      	b.n	800f15c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800f15a:	bf00      	nop
	}
	*p = 0;
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	2200      	movs	r2, #0
 800f160:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <f_gets+0x72>
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	e000      	b.n	800f16e <f_gets+0x74>
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3720      	adds	r7, #32
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f178:	b480      	push	{r7}
 800f17a:	b087      	sub	sp, #28
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	4613      	mov	r3, r2
 800f184:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f186:	2301      	movs	r3, #1
 800f188:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f18e:	4b1f      	ldr	r3, [pc, #124]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f190:	7a5b      	ldrb	r3, [r3, #9]
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d131      	bne.n	800f1fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f198:	4b1c      	ldr	r3, [pc, #112]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f19a:	7a5b      	ldrb	r3, [r3, #9]
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f1a6:	4b19      	ldr	r3, [pc, #100]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1a8:	7a5b      	ldrb	r3, [r3, #9]
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	4a17      	ldr	r2, [pc, #92]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f1b6:	4b15      	ldr	r3, [pc, #84]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1b8:	7a5b      	ldrb	r3, [r3, #9]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4b13      	ldr	r3, [pc, #76]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1c0:	4413      	add	r3, r2
 800f1c2:	79fa      	ldrb	r2, [r7, #7]
 800f1c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f1c6:	4b11      	ldr	r3, [pc, #68]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1c8:	7a5b      	ldrb	r3, [r3, #9]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	1c5a      	adds	r2, r3, #1
 800f1ce:	b2d1      	uxtb	r1, r2
 800f1d0:	4a0e      	ldr	r2, [pc, #56]	@ (800f20c <FATFS_LinkDriverEx+0x94>)
 800f1d2:	7251      	strb	r1, [r2, #9]
 800f1d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f1d6:	7dbb      	ldrb	r3, [r7, #22]
 800f1d8:	3330      	adds	r3, #48	@ 0x30
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	223a      	movs	r2, #58	@ 0x3a
 800f1e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	3302      	adds	r3, #2
 800f1ec:	222f      	movs	r2, #47	@ 0x2f
 800f1ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	3303      	adds	r3, #3
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	371c      	adds	r7, #28
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	240008a8 	.word	0x240008a8

0800f210 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f21a:	2200      	movs	r2, #0
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff ffaa 	bl	800f178 <FATFS_LinkDriverEx>
 800f224:	4603      	mov	r3, r0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <srand>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4b10      	ldr	r3, [pc, #64]	@ (800f274 <srand+0x44>)
 800f234:	681d      	ldr	r5, [r3, #0]
 800f236:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f238:	4604      	mov	r4, r0
 800f23a:	b9b3      	cbnz	r3, 800f26a <srand+0x3a>
 800f23c:	2018      	movs	r0, #24
 800f23e:	f000 faa9 	bl	800f794 <malloc>
 800f242:	4602      	mov	r2, r0
 800f244:	6328      	str	r0, [r5, #48]	@ 0x30
 800f246:	b920      	cbnz	r0, 800f252 <srand+0x22>
 800f248:	4b0b      	ldr	r3, [pc, #44]	@ (800f278 <srand+0x48>)
 800f24a:	480c      	ldr	r0, [pc, #48]	@ (800f27c <srand+0x4c>)
 800f24c:	2146      	movs	r1, #70	@ 0x46
 800f24e:	f000 fa39 	bl	800f6c4 <__assert_func>
 800f252:	490b      	ldr	r1, [pc, #44]	@ (800f280 <srand+0x50>)
 800f254:	4b0b      	ldr	r3, [pc, #44]	@ (800f284 <srand+0x54>)
 800f256:	e9c0 1300 	strd	r1, r3, [r0]
 800f25a:	4b0b      	ldr	r3, [pc, #44]	@ (800f288 <srand+0x58>)
 800f25c:	6083      	str	r3, [r0, #8]
 800f25e:	230b      	movs	r3, #11
 800f260:	8183      	strh	r3, [r0, #12]
 800f262:	2100      	movs	r1, #0
 800f264:	2001      	movs	r0, #1
 800f266:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f26a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f26c:	2200      	movs	r2, #0
 800f26e:	611c      	str	r4, [r3, #16]
 800f270:	615a      	str	r2, [r3, #20]
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	24000034 	.word	0x24000034
 800f278:	080114e8 	.word	0x080114e8
 800f27c:	080114ff 	.word	0x080114ff
 800f280:	abcd330e 	.word	0xabcd330e
 800f284:	e66d1234 	.word	0xe66d1234
 800f288:	0005deec 	.word	0x0005deec

0800f28c <rand>:
 800f28c:	4b16      	ldr	r3, [pc, #88]	@ (800f2e8 <rand+0x5c>)
 800f28e:	b510      	push	{r4, lr}
 800f290:	681c      	ldr	r4, [r3, #0]
 800f292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f294:	b9b3      	cbnz	r3, 800f2c4 <rand+0x38>
 800f296:	2018      	movs	r0, #24
 800f298:	f000 fa7c 	bl	800f794 <malloc>
 800f29c:	4602      	mov	r2, r0
 800f29e:	6320      	str	r0, [r4, #48]	@ 0x30
 800f2a0:	b920      	cbnz	r0, 800f2ac <rand+0x20>
 800f2a2:	4b12      	ldr	r3, [pc, #72]	@ (800f2ec <rand+0x60>)
 800f2a4:	4812      	ldr	r0, [pc, #72]	@ (800f2f0 <rand+0x64>)
 800f2a6:	2152      	movs	r1, #82	@ 0x52
 800f2a8:	f000 fa0c 	bl	800f6c4 <__assert_func>
 800f2ac:	4911      	ldr	r1, [pc, #68]	@ (800f2f4 <rand+0x68>)
 800f2ae:	4b12      	ldr	r3, [pc, #72]	@ (800f2f8 <rand+0x6c>)
 800f2b0:	e9c0 1300 	strd	r1, r3, [r0]
 800f2b4:	4b11      	ldr	r3, [pc, #68]	@ (800f2fc <rand+0x70>)
 800f2b6:	6083      	str	r3, [r0, #8]
 800f2b8:	230b      	movs	r3, #11
 800f2ba:	8183      	strh	r3, [r0, #12]
 800f2bc:	2100      	movs	r1, #0
 800f2be:	2001      	movs	r0, #1
 800f2c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f2c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f2c6:	480e      	ldr	r0, [pc, #56]	@ (800f300 <rand+0x74>)
 800f2c8:	690b      	ldr	r3, [r1, #16]
 800f2ca:	694c      	ldr	r4, [r1, #20]
 800f2cc:	4a0d      	ldr	r2, [pc, #52]	@ (800f304 <rand+0x78>)
 800f2ce:	4358      	muls	r0, r3
 800f2d0:	fb02 0004 	mla	r0, r2, r4, r0
 800f2d4:	fba3 3202 	umull	r3, r2, r3, r2
 800f2d8:	3301      	adds	r3, #1
 800f2da:	eb40 0002 	adc.w	r0, r0, r2
 800f2de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f2e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f2e6:	bd10      	pop	{r4, pc}
 800f2e8:	24000034 	.word	0x24000034
 800f2ec:	080114e8 	.word	0x080114e8
 800f2f0:	080114ff 	.word	0x080114ff
 800f2f4:	abcd330e 	.word	0xabcd330e
 800f2f8:	e66d1234 	.word	0xe66d1234
 800f2fc:	0005deec 	.word	0x0005deec
 800f300:	5851f42d 	.word	0x5851f42d
 800f304:	4c957f2d 	.word	0x4c957f2d

0800f308 <std>:
 800f308:	2300      	movs	r3, #0
 800f30a:	b510      	push	{r4, lr}
 800f30c:	4604      	mov	r4, r0
 800f30e:	e9c0 3300 	strd	r3, r3, [r0]
 800f312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f316:	6083      	str	r3, [r0, #8]
 800f318:	8181      	strh	r1, [r0, #12]
 800f31a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f31c:	81c2      	strh	r2, [r0, #14]
 800f31e:	6183      	str	r3, [r0, #24]
 800f320:	4619      	mov	r1, r3
 800f322:	2208      	movs	r2, #8
 800f324:	305c      	adds	r0, #92	@ 0x5c
 800f326:	f000 f948 	bl	800f5ba <memset>
 800f32a:	4b0d      	ldr	r3, [pc, #52]	@ (800f360 <std+0x58>)
 800f32c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f32e:	4b0d      	ldr	r3, [pc, #52]	@ (800f364 <std+0x5c>)
 800f330:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f332:	4b0d      	ldr	r3, [pc, #52]	@ (800f368 <std+0x60>)
 800f334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f336:	4b0d      	ldr	r3, [pc, #52]	@ (800f36c <std+0x64>)
 800f338:	6323      	str	r3, [r4, #48]	@ 0x30
 800f33a:	4b0d      	ldr	r3, [pc, #52]	@ (800f370 <std+0x68>)
 800f33c:	6224      	str	r4, [r4, #32]
 800f33e:	429c      	cmp	r4, r3
 800f340:	d006      	beq.n	800f350 <std+0x48>
 800f342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f346:	4294      	cmp	r4, r2
 800f348:	d002      	beq.n	800f350 <std+0x48>
 800f34a:	33d0      	adds	r3, #208	@ 0xd0
 800f34c:	429c      	cmp	r4, r3
 800f34e:	d105      	bne.n	800f35c <std+0x54>
 800f350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f358:	f000 b9a8 	b.w	800f6ac <__retarget_lock_init_recursive>
 800f35c:	bd10      	pop	{r4, pc}
 800f35e:	bf00      	nop
 800f360:	0800f535 	.word	0x0800f535
 800f364:	0800f557 	.word	0x0800f557
 800f368:	0800f58f 	.word	0x0800f58f
 800f36c:	0800f5b3 	.word	0x0800f5b3
 800f370:	240008b4 	.word	0x240008b4

0800f374 <stdio_exit_handler>:
 800f374:	4a02      	ldr	r2, [pc, #8]	@ (800f380 <stdio_exit_handler+0xc>)
 800f376:	4903      	ldr	r1, [pc, #12]	@ (800f384 <stdio_exit_handler+0x10>)
 800f378:	4803      	ldr	r0, [pc, #12]	@ (800f388 <stdio_exit_handler+0x14>)
 800f37a:	f000 b869 	b.w	800f450 <_fwalk_sglue>
 800f37e:	bf00      	nop
 800f380:	24000028 	.word	0x24000028
 800f384:	0800ffd5 	.word	0x0800ffd5
 800f388:	24000038 	.word	0x24000038

0800f38c <cleanup_stdio>:
 800f38c:	6841      	ldr	r1, [r0, #4]
 800f38e:	4b0c      	ldr	r3, [pc, #48]	@ (800f3c0 <cleanup_stdio+0x34>)
 800f390:	4299      	cmp	r1, r3
 800f392:	b510      	push	{r4, lr}
 800f394:	4604      	mov	r4, r0
 800f396:	d001      	beq.n	800f39c <cleanup_stdio+0x10>
 800f398:	f000 fe1c 	bl	800ffd4 <_fflush_r>
 800f39c:	68a1      	ldr	r1, [r4, #8]
 800f39e:	4b09      	ldr	r3, [pc, #36]	@ (800f3c4 <cleanup_stdio+0x38>)
 800f3a0:	4299      	cmp	r1, r3
 800f3a2:	d002      	beq.n	800f3aa <cleanup_stdio+0x1e>
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 fe15 	bl	800ffd4 <_fflush_r>
 800f3aa:	68e1      	ldr	r1, [r4, #12]
 800f3ac:	4b06      	ldr	r3, [pc, #24]	@ (800f3c8 <cleanup_stdio+0x3c>)
 800f3ae:	4299      	cmp	r1, r3
 800f3b0:	d004      	beq.n	800f3bc <cleanup_stdio+0x30>
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b8:	f000 be0c 	b.w	800ffd4 <_fflush_r>
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	bf00      	nop
 800f3c0:	240008b4 	.word	0x240008b4
 800f3c4:	2400091c 	.word	0x2400091c
 800f3c8:	24000984 	.word	0x24000984

0800f3cc <global_stdio_init.part.0>:
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f3fc <global_stdio_init.part.0+0x30>)
 800f3d0:	4c0b      	ldr	r4, [pc, #44]	@ (800f400 <global_stdio_init.part.0+0x34>)
 800f3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800f404 <global_stdio_init.part.0+0x38>)
 800f3d4:	601a      	str	r2, [r3, #0]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2104      	movs	r1, #4
 800f3dc:	f7ff ff94 	bl	800f308 <std>
 800f3e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	2109      	movs	r1, #9
 800f3e8:	f7ff ff8e 	bl	800f308 <std>
 800f3ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3f6:	2112      	movs	r1, #18
 800f3f8:	f7ff bf86 	b.w	800f308 <std>
 800f3fc:	240009ec 	.word	0x240009ec
 800f400:	240008b4 	.word	0x240008b4
 800f404:	0800f375 	.word	0x0800f375

0800f408 <__sfp_lock_acquire>:
 800f408:	4801      	ldr	r0, [pc, #4]	@ (800f410 <__sfp_lock_acquire+0x8>)
 800f40a:	f000 b950 	b.w	800f6ae <__retarget_lock_acquire_recursive>
 800f40e:	bf00      	nop
 800f410:	240009f5 	.word	0x240009f5

0800f414 <__sfp_lock_release>:
 800f414:	4801      	ldr	r0, [pc, #4]	@ (800f41c <__sfp_lock_release+0x8>)
 800f416:	f000 b94b 	b.w	800f6b0 <__retarget_lock_release_recursive>
 800f41a:	bf00      	nop
 800f41c:	240009f5 	.word	0x240009f5

0800f420 <__sinit>:
 800f420:	b510      	push	{r4, lr}
 800f422:	4604      	mov	r4, r0
 800f424:	f7ff fff0 	bl	800f408 <__sfp_lock_acquire>
 800f428:	6a23      	ldr	r3, [r4, #32]
 800f42a:	b11b      	cbz	r3, 800f434 <__sinit+0x14>
 800f42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f430:	f7ff bff0 	b.w	800f414 <__sfp_lock_release>
 800f434:	4b04      	ldr	r3, [pc, #16]	@ (800f448 <__sinit+0x28>)
 800f436:	6223      	str	r3, [r4, #32]
 800f438:	4b04      	ldr	r3, [pc, #16]	@ (800f44c <__sinit+0x2c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1f5      	bne.n	800f42c <__sinit+0xc>
 800f440:	f7ff ffc4 	bl	800f3cc <global_stdio_init.part.0>
 800f444:	e7f2      	b.n	800f42c <__sinit+0xc>
 800f446:	bf00      	nop
 800f448:	0800f38d 	.word	0x0800f38d
 800f44c:	240009ec 	.word	0x240009ec

0800f450 <_fwalk_sglue>:
 800f450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f454:	4607      	mov	r7, r0
 800f456:	4688      	mov	r8, r1
 800f458:	4614      	mov	r4, r2
 800f45a:	2600      	movs	r6, #0
 800f45c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f460:	f1b9 0901 	subs.w	r9, r9, #1
 800f464:	d505      	bpl.n	800f472 <_fwalk_sglue+0x22>
 800f466:	6824      	ldr	r4, [r4, #0]
 800f468:	2c00      	cmp	r4, #0
 800f46a:	d1f7      	bne.n	800f45c <_fwalk_sglue+0xc>
 800f46c:	4630      	mov	r0, r6
 800f46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f472:	89ab      	ldrh	r3, [r5, #12]
 800f474:	2b01      	cmp	r3, #1
 800f476:	d907      	bls.n	800f488 <_fwalk_sglue+0x38>
 800f478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f47c:	3301      	adds	r3, #1
 800f47e:	d003      	beq.n	800f488 <_fwalk_sglue+0x38>
 800f480:	4629      	mov	r1, r5
 800f482:	4638      	mov	r0, r7
 800f484:	47c0      	blx	r8
 800f486:	4306      	orrs	r6, r0
 800f488:	3568      	adds	r5, #104	@ 0x68
 800f48a:	e7e9      	b.n	800f460 <_fwalk_sglue+0x10>

0800f48c <sniprintf>:
 800f48c:	b40c      	push	{r2, r3}
 800f48e:	b530      	push	{r4, r5, lr}
 800f490:	4b17      	ldr	r3, [pc, #92]	@ (800f4f0 <sniprintf+0x64>)
 800f492:	1e0c      	subs	r4, r1, #0
 800f494:	681d      	ldr	r5, [r3, #0]
 800f496:	b09d      	sub	sp, #116	@ 0x74
 800f498:	da08      	bge.n	800f4ac <sniprintf+0x20>
 800f49a:	238b      	movs	r3, #139	@ 0x8b
 800f49c:	602b      	str	r3, [r5, #0]
 800f49e:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a2:	b01d      	add	sp, #116	@ 0x74
 800f4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4a8:	b002      	add	sp, #8
 800f4aa:	4770      	bx	lr
 800f4ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f4b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f4b4:	bf14      	ite	ne
 800f4b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f4ba:	4623      	moveq	r3, r4
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	9307      	str	r3, [sp, #28]
 800f4c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4c4:	9002      	str	r0, [sp, #8]
 800f4c6:	9006      	str	r0, [sp, #24]
 800f4c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f4ce:	ab21      	add	r3, sp, #132	@ 0x84
 800f4d0:	a902      	add	r1, sp, #8
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	f000 fa6f 	bl	800f9b8 <_svfiprintf_r>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	bfbc      	itt	lt
 800f4de:	238b      	movlt	r3, #139	@ 0x8b
 800f4e0:	602b      	strlt	r3, [r5, #0]
 800f4e2:	2c00      	cmp	r4, #0
 800f4e4:	d0dd      	beq.n	800f4a2 <sniprintf+0x16>
 800f4e6:	9b02      	ldr	r3, [sp, #8]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	701a      	strb	r2, [r3, #0]
 800f4ec:	e7d9      	b.n	800f4a2 <sniprintf+0x16>
 800f4ee:	bf00      	nop
 800f4f0:	24000034 	.word	0x24000034

0800f4f4 <siprintf>:
 800f4f4:	b40e      	push	{r1, r2, r3}
 800f4f6:	b500      	push	{lr}
 800f4f8:	b09c      	sub	sp, #112	@ 0x70
 800f4fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800f4fc:	9002      	str	r0, [sp, #8]
 800f4fe:	9006      	str	r0, [sp, #24]
 800f500:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f504:	4809      	ldr	r0, [pc, #36]	@ (800f52c <siprintf+0x38>)
 800f506:	9107      	str	r1, [sp, #28]
 800f508:	9104      	str	r1, [sp, #16]
 800f50a:	4909      	ldr	r1, [pc, #36]	@ (800f530 <siprintf+0x3c>)
 800f50c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f510:	9105      	str	r1, [sp, #20]
 800f512:	6800      	ldr	r0, [r0, #0]
 800f514:	9301      	str	r3, [sp, #4]
 800f516:	a902      	add	r1, sp, #8
 800f518:	f000 fa4e 	bl	800f9b8 <_svfiprintf_r>
 800f51c:	9b02      	ldr	r3, [sp, #8]
 800f51e:	2200      	movs	r2, #0
 800f520:	701a      	strb	r2, [r3, #0]
 800f522:	b01c      	add	sp, #112	@ 0x70
 800f524:	f85d eb04 	ldr.w	lr, [sp], #4
 800f528:	b003      	add	sp, #12
 800f52a:	4770      	bx	lr
 800f52c:	24000034 	.word	0x24000034
 800f530:	ffff0208 	.word	0xffff0208

0800f534 <__sread>:
 800f534:	b510      	push	{r4, lr}
 800f536:	460c      	mov	r4, r1
 800f538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f53c:	f000 f868 	bl	800f610 <_read_r>
 800f540:	2800      	cmp	r0, #0
 800f542:	bfab      	itete	ge
 800f544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f546:	89a3      	ldrhlt	r3, [r4, #12]
 800f548:	181b      	addge	r3, r3, r0
 800f54a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f54e:	bfac      	ite	ge
 800f550:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f552:	81a3      	strhlt	r3, [r4, #12]
 800f554:	bd10      	pop	{r4, pc}

0800f556 <__swrite>:
 800f556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55a:	461f      	mov	r7, r3
 800f55c:	898b      	ldrh	r3, [r1, #12]
 800f55e:	05db      	lsls	r3, r3, #23
 800f560:	4605      	mov	r5, r0
 800f562:	460c      	mov	r4, r1
 800f564:	4616      	mov	r6, r2
 800f566:	d505      	bpl.n	800f574 <__swrite+0x1e>
 800f568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f56c:	2302      	movs	r3, #2
 800f56e:	2200      	movs	r2, #0
 800f570:	f000 f83c 	bl	800f5ec <_lseek_r>
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f57a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f57e:	81a3      	strh	r3, [r4, #12]
 800f580:	4632      	mov	r2, r6
 800f582:	463b      	mov	r3, r7
 800f584:	4628      	mov	r0, r5
 800f586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f58a:	f000 b853 	b.w	800f634 <_write_r>

0800f58e <__sseek>:
 800f58e:	b510      	push	{r4, lr}
 800f590:	460c      	mov	r4, r1
 800f592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f596:	f000 f829 	bl	800f5ec <_lseek_r>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	bf15      	itete	ne
 800f5a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f5a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f5a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f5aa:	81a3      	strheq	r3, [r4, #12]
 800f5ac:	bf18      	it	ne
 800f5ae:	81a3      	strhne	r3, [r4, #12]
 800f5b0:	bd10      	pop	{r4, pc}

0800f5b2 <__sclose>:
 800f5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b6:	f000 b809 	b.w	800f5cc <_close_r>

0800f5ba <memset>:
 800f5ba:	4402      	add	r2, r0
 800f5bc:	4603      	mov	r3, r0
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d100      	bne.n	800f5c4 <memset+0xa>
 800f5c2:	4770      	bx	lr
 800f5c4:	f803 1b01 	strb.w	r1, [r3], #1
 800f5c8:	e7f9      	b.n	800f5be <memset+0x4>
	...

0800f5cc <_close_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d06      	ldr	r5, [pc, #24]	@ (800f5e8 <_close_r+0x1c>)
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	602b      	str	r3, [r5, #0]
 800f5d8:	f7f5 fa16 	bl	8004a08 <_close>
 800f5dc:	1c43      	adds	r3, r0, #1
 800f5de:	d102      	bne.n	800f5e6 <_close_r+0x1a>
 800f5e0:	682b      	ldr	r3, [r5, #0]
 800f5e2:	b103      	cbz	r3, 800f5e6 <_close_r+0x1a>
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	240009f0 	.word	0x240009f0

0800f5ec <_lseek_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d07      	ldr	r5, [pc, #28]	@ (800f60c <_lseek_r+0x20>)
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	4608      	mov	r0, r1
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	602a      	str	r2, [r5, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	f7f5 fa2b 	bl	8004a56 <_lseek>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_lseek_r+0x1e>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_lseek_r+0x1e>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	240009f0 	.word	0x240009f0

0800f610 <_read_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d07      	ldr	r5, [pc, #28]	@ (800f630 <_read_r+0x20>)
 800f614:	4604      	mov	r4, r0
 800f616:	4608      	mov	r0, r1
 800f618:	4611      	mov	r1, r2
 800f61a:	2200      	movs	r2, #0
 800f61c:	602a      	str	r2, [r5, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	f7f5 f9b9 	bl	8004996 <_read>
 800f624:	1c43      	adds	r3, r0, #1
 800f626:	d102      	bne.n	800f62e <_read_r+0x1e>
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	b103      	cbz	r3, 800f62e <_read_r+0x1e>
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	bd38      	pop	{r3, r4, r5, pc}
 800f630:	240009f0 	.word	0x240009f0

0800f634 <_write_r>:
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4d07      	ldr	r5, [pc, #28]	@ (800f654 <_write_r+0x20>)
 800f638:	4604      	mov	r4, r0
 800f63a:	4608      	mov	r0, r1
 800f63c:	4611      	mov	r1, r2
 800f63e:	2200      	movs	r2, #0
 800f640:	602a      	str	r2, [r5, #0]
 800f642:	461a      	mov	r2, r3
 800f644:	f7f5 f9c4 	bl	80049d0 <_write>
 800f648:	1c43      	adds	r3, r0, #1
 800f64a:	d102      	bne.n	800f652 <_write_r+0x1e>
 800f64c:	682b      	ldr	r3, [r5, #0]
 800f64e:	b103      	cbz	r3, 800f652 <_write_r+0x1e>
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	bd38      	pop	{r3, r4, r5, pc}
 800f654:	240009f0 	.word	0x240009f0

0800f658 <__errno>:
 800f658:	4b01      	ldr	r3, [pc, #4]	@ (800f660 <__errno+0x8>)
 800f65a:	6818      	ldr	r0, [r3, #0]
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	24000034 	.word	0x24000034

0800f664 <__libc_init_array>:
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	4d0d      	ldr	r5, [pc, #52]	@ (800f69c <__libc_init_array+0x38>)
 800f668:	4c0d      	ldr	r4, [pc, #52]	@ (800f6a0 <__libc_init_array+0x3c>)
 800f66a:	1b64      	subs	r4, r4, r5
 800f66c:	10a4      	asrs	r4, r4, #2
 800f66e:	2600      	movs	r6, #0
 800f670:	42a6      	cmp	r6, r4
 800f672:	d109      	bne.n	800f688 <__libc_init_array+0x24>
 800f674:	4d0b      	ldr	r5, [pc, #44]	@ (800f6a4 <__libc_init_array+0x40>)
 800f676:	4c0c      	ldr	r4, [pc, #48]	@ (800f6a8 <__libc_init_array+0x44>)
 800f678:	f001 fe12 	bl	80112a0 <_init>
 800f67c:	1b64      	subs	r4, r4, r5
 800f67e:	10a4      	asrs	r4, r4, #2
 800f680:	2600      	movs	r6, #0
 800f682:	42a6      	cmp	r6, r4
 800f684:	d105      	bne.n	800f692 <__libc_init_array+0x2e>
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	f855 3b04 	ldr.w	r3, [r5], #4
 800f68c:	4798      	blx	r3
 800f68e:	3601      	adds	r6, #1
 800f690:	e7ee      	b.n	800f670 <__libc_init_array+0xc>
 800f692:	f855 3b04 	ldr.w	r3, [r5], #4
 800f696:	4798      	blx	r3
 800f698:	3601      	adds	r6, #1
 800f69a:	e7f2      	b.n	800f682 <__libc_init_array+0x1e>
 800f69c:	080117a8 	.word	0x080117a8
 800f6a0:	080117a8 	.word	0x080117a8
 800f6a4:	080117a8 	.word	0x080117a8
 800f6a8:	080117ac 	.word	0x080117ac

0800f6ac <__retarget_lock_init_recursive>:
 800f6ac:	4770      	bx	lr

0800f6ae <__retarget_lock_acquire_recursive>:
 800f6ae:	4770      	bx	lr

0800f6b0 <__retarget_lock_release_recursive>:
 800f6b0:	4770      	bx	lr

0800f6b2 <strcpy>:
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6b8:	f803 2b01 	strb.w	r2, [r3], #1
 800f6bc:	2a00      	cmp	r2, #0
 800f6be:	d1f9      	bne.n	800f6b4 <strcpy+0x2>
 800f6c0:	4770      	bx	lr
	...

0800f6c4 <__assert_func>:
 800f6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6c6:	4614      	mov	r4, r2
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4b09      	ldr	r3, [pc, #36]	@ (800f6f0 <__assert_func+0x2c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	68d8      	ldr	r0, [r3, #12]
 800f6d2:	b954      	cbnz	r4, 800f6ea <__assert_func+0x26>
 800f6d4:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <__assert_func+0x30>)
 800f6d6:	461c      	mov	r4, r3
 800f6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6dc:	9100      	str	r1, [sp, #0]
 800f6de:	462b      	mov	r3, r5
 800f6e0:	4905      	ldr	r1, [pc, #20]	@ (800f6f8 <__assert_func+0x34>)
 800f6e2:	f000 fc9f 	bl	8010024 <fiprintf>
 800f6e6:	f000 fce7 	bl	80100b8 <abort>
 800f6ea:	4b04      	ldr	r3, [pc, #16]	@ (800f6fc <__assert_func+0x38>)
 800f6ec:	e7f4      	b.n	800f6d8 <__assert_func+0x14>
 800f6ee:	bf00      	nop
 800f6f0:	24000034 	.word	0x24000034
 800f6f4:	08011592 	.word	0x08011592
 800f6f8:	08011564 	.word	0x08011564
 800f6fc:	08011557 	.word	0x08011557

0800f700 <_free_r>:
 800f700:	b538      	push	{r3, r4, r5, lr}
 800f702:	4605      	mov	r5, r0
 800f704:	2900      	cmp	r1, #0
 800f706:	d041      	beq.n	800f78c <_free_r+0x8c>
 800f708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f70c:	1f0c      	subs	r4, r1, #4
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bfb8      	it	lt
 800f712:	18e4      	addlt	r4, r4, r3
 800f714:	f000 f8e8 	bl	800f8e8 <__malloc_lock>
 800f718:	4a1d      	ldr	r2, [pc, #116]	@ (800f790 <_free_r+0x90>)
 800f71a:	6813      	ldr	r3, [r2, #0]
 800f71c:	b933      	cbnz	r3, 800f72c <_free_r+0x2c>
 800f71e:	6063      	str	r3, [r4, #4]
 800f720:	6014      	str	r4, [r2, #0]
 800f722:	4628      	mov	r0, r5
 800f724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f728:	f000 b8e4 	b.w	800f8f4 <__malloc_unlock>
 800f72c:	42a3      	cmp	r3, r4
 800f72e:	d908      	bls.n	800f742 <_free_r+0x42>
 800f730:	6820      	ldr	r0, [r4, #0]
 800f732:	1821      	adds	r1, r4, r0
 800f734:	428b      	cmp	r3, r1
 800f736:	bf01      	itttt	eq
 800f738:	6819      	ldreq	r1, [r3, #0]
 800f73a:	685b      	ldreq	r3, [r3, #4]
 800f73c:	1809      	addeq	r1, r1, r0
 800f73e:	6021      	streq	r1, [r4, #0]
 800f740:	e7ed      	b.n	800f71e <_free_r+0x1e>
 800f742:	461a      	mov	r2, r3
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	b10b      	cbz	r3, 800f74c <_free_r+0x4c>
 800f748:	42a3      	cmp	r3, r4
 800f74a:	d9fa      	bls.n	800f742 <_free_r+0x42>
 800f74c:	6811      	ldr	r1, [r2, #0]
 800f74e:	1850      	adds	r0, r2, r1
 800f750:	42a0      	cmp	r0, r4
 800f752:	d10b      	bne.n	800f76c <_free_r+0x6c>
 800f754:	6820      	ldr	r0, [r4, #0]
 800f756:	4401      	add	r1, r0
 800f758:	1850      	adds	r0, r2, r1
 800f75a:	4283      	cmp	r3, r0
 800f75c:	6011      	str	r1, [r2, #0]
 800f75e:	d1e0      	bne.n	800f722 <_free_r+0x22>
 800f760:	6818      	ldr	r0, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	6053      	str	r3, [r2, #4]
 800f766:	4408      	add	r0, r1
 800f768:	6010      	str	r0, [r2, #0]
 800f76a:	e7da      	b.n	800f722 <_free_r+0x22>
 800f76c:	d902      	bls.n	800f774 <_free_r+0x74>
 800f76e:	230c      	movs	r3, #12
 800f770:	602b      	str	r3, [r5, #0]
 800f772:	e7d6      	b.n	800f722 <_free_r+0x22>
 800f774:	6820      	ldr	r0, [r4, #0]
 800f776:	1821      	adds	r1, r4, r0
 800f778:	428b      	cmp	r3, r1
 800f77a:	bf04      	itt	eq
 800f77c:	6819      	ldreq	r1, [r3, #0]
 800f77e:	685b      	ldreq	r3, [r3, #4]
 800f780:	6063      	str	r3, [r4, #4]
 800f782:	bf04      	itt	eq
 800f784:	1809      	addeq	r1, r1, r0
 800f786:	6021      	streq	r1, [r4, #0]
 800f788:	6054      	str	r4, [r2, #4]
 800f78a:	e7ca      	b.n	800f722 <_free_r+0x22>
 800f78c:	bd38      	pop	{r3, r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	240009fc 	.word	0x240009fc

0800f794 <malloc>:
 800f794:	4b02      	ldr	r3, [pc, #8]	@ (800f7a0 <malloc+0xc>)
 800f796:	4601      	mov	r1, r0
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	f000 b825 	b.w	800f7e8 <_malloc_r>
 800f79e:	bf00      	nop
 800f7a0:	24000034 	.word	0x24000034

0800f7a4 <sbrk_aligned>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4e0f      	ldr	r6, [pc, #60]	@ (800f7e4 <sbrk_aligned+0x40>)
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	6831      	ldr	r1, [r6, #0]
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	b911      	cbnz	r1, 800f7b6 <sbrk_aligned+0x12>
 800f7b0:	f000 fc64 	bl	801007c <_sbrk_r>
 800f7b4:	6030      	str	r0, [r6, #0]
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f000 fc5f 	bl	801007c <_sbrk_r>
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	d103      	bne.n	800f7ca <sbrk_aligned+0x26>
 800f7c2:	f04f 34ff 	mov.w	r4, #4294967295
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	1cc4      	adds	r4, r0, #3
 800f7cc:	f024 0403 	bic.w	r4, r4, #3
 800f7d0:	42a0      	cmp	r0, r4
 800f7d2:	d0f8      	beq.n	800f7c6 <sbrk_aligned+0x22>
 800f7d4:	1a21      	subs	r1, r4, r0
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	f000 fc50 	bl	801007c <_sbrk_r>
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d1f2      	bne.n	800f7c6 <sbrk_aligned+0x22>
 800f7e0:	e7ef      	b.n	800f7c2 <sbrk_aligned+0x1e>
 800f7e2:	bf00      	nop
 800f7e4:	240009f8 	.word	0x240009f8

0800f7e8 <_malloc_r>:
 800f7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7ec:	1ccd      	adds	r5, r1, #3
 800f7ee:	f025 0503 	bic.w	r5, r5, #3
 800f7f2:	3508      	adds	r5, #8
 800f7f4:	2d0c      	cmp	r5, #12
 800f7f6:	bf38      	it	cc
 800f7f8:	250c      	movcc	r5, #12
 800f7fa:	2d00      	cmp	r5, #0
 800f7fc:	4606      	mov	r6, r0
 800f7fe:	db01      	blt.n	800f804 <_malloc_r+0x1c>
 800f800:	42a9      	cmp	r1, r5
 800f802:	d904      	bls.n	800f80e <_malloc_r+0x26>
 800f804:	230c      	movs	r3, #12
 800f806:	6033      	str	r3, [r6, #0]
 800f808:	2000      	movs	r0, #0
 800f80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f8e4 <_malloc_r+0xfc>
 800f812:	f000 f869 	bl	800f8e8 <__malloc_lock>
 800f816:	f8d8 3000 	ldr.w	r3, [r8]
 800f81a:	461c      	mov	r4, r3
 800f81c:	bb44      	cbnz	r4, 800f870 <_malloc_r+0x88>
 800f81e:	4629      	mov	r1, r5
 800f820:	4630      	mov	r0, r6
 800f822:	f7ff ffbf 	bl	800f7a4 <sbrk_aligned>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	4604      	mov	r4, r0
 800f82a:	d158      	bne.n	800f8de <_malloc_r+0xf6>
 800f82c:	f8d8 4000 	ldr.w	r4, [r8]
 800f830:	4627      	mov	r7, r4
 800f832:	2f00      	cmp	r7, #0
 800f834:	d143      	bne.n	800f8be <_malloc_r+0xd6>
 800f836:	2c00      	cmp	r4, #0
 800f838:	d04b      	beq.n	800f8d2 <_malloc_r+0xea>
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	4639      	mov	r1, r7
 800f83e:	4630      	mov	r0, r6
 800f840:	eb04 0903 	add.w	r9, r4, r3
 800f844:	f000 fc1a 	bl	801007c <_sbrk_r>
 800f848:	4581      	cmp	r9, r0
 800f84a:	d142      	bne.n	800f8d2 <_malloc_r+0xea>
 800f84c:	6821      	ldr	r1, [r4, #0]
 800f84e:	1a6d      	subs	r5, r5, r1
 800f850:	4629      	mov	r1, r5
 800f852:	4630      	mov	r0, r6
 800f854:	f7ff ffa6 	bl	800f7a4 <sbrk_aligned>
 800f858:	3001      	adds	r0, #1
 800f85a:	d03a      	beq.n	800f8d2 <_malloc_r+0xea>
 800f85c:	6823      	ldr	r3, [r4, #0]
 800f85e:	442b      	add	r3, r5
 800f860:	6023      	str	r3, [r4, #0]
 800f862:	f8d8 3000 	ldr.w	r3, [r8]
 800f866:	685a      	ldr	r2, [r3, #4]
 800f868:	bb62      	cbnz	r2, 800f8c4 <_malloc_r+0xdc>
 800f86a:	f8c8 7000 	str.w	r7, [r8]
 800f86e:	e00f      	b.n	800f890 <_malloc_r+0xa8>
 800f870:	6822      	ldr	r2, [r4, #0]
 800f872:	1b52      	subs	r2, r2, r5
 800f874:	d420      	bmi.n	800f8b8 <_malloc_r+0xd0>
 800f876:	2a0b      	cmp	r2, #11
 800f878:	d917      	bls.n	800f8aa <_malloc_r+0xc2>
 800f87a:	1961      	adds	r1, r4, r5
 800f87c:	42a3      	cmp	r3, r4
 800f87e:	6025      	str	r5, [r4, #0]
 800f880:	bf18      	it	ne
 800f882:	6059      	strne	r1, [r3, #4]
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	bf08      	it	eq
 800f888:	f8c8 1000 	streq.w	r1, [r8]
 800f88c:	5162      	str	r2, [r4, r5]
 800f88e:	604b      	str	r3, [r1, #4]
 800f890:	4630      	mov	r0, r6
 800f892:	f000 f82f 	bl	800f8f4 <__malloc_unlock>
 800f896:	f104 000b 	add.w	r0, r4, #11
 800f89a:	1d23      	adds	r3, r4, #4
 800f89c:	f020 0007 	bic.w	r0, r0, #7
 800f8a0:	1ac2      	subs	r2, r0, r3
 800f8a2:	bf1c      	itt	ne
 800f8a4:	1a1b      	subne	r3, r3, r0
 800f8a6:	50a3      	strne	r3, [r4, r2]
 800f8a8:	e7af      	b.n	800f80a <_malloc_r+0x22>
 800f8aa:	6862      	ldr	r2, [r4, #4]
 800f8ac:	42a3      	cmp	r3, r4
 800f8ae:	bf0c      	ite	eq
 800f8b0:	f8c8 2000 	streq.w	r2, [r8]
 800f8b4:	605a      	strne	r2, [r3, #4]
 800f8b6:	e7eb      	b.n	800f890 <_malloc_r+0xa8>
 800f8b8:	4623      	mov	r3, r4
 800f8ba:	6864      	ldr	r4, [r4, #4]
 800f8bc:	e7ae      	b.n	800f81c <_malloc_r+0x34>
 800f8be:	463c      	mov	r4, r7
 800f8c0:	687f      	ldr	r7, [r7, #4]
 800f8c2:	e7b6      	b.n	800f832 <_malloc_r+0x4a>
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	42a3      	cmp	r3, r4
 800f8ca:	d1fb      	bne.n	800f8c4 <_malloc_r+0xdc>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	6053      	str	r3, [r2, #4]
 800f8d0:	e7de      	b.n	800f890 <_malloc_r+0xa8>
 800f8d2:	230c      	movs	r3, #12
 800f8d4:	6033      	str	r3, [r6, #0]
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f000 f80c 	bl	800f8f4 <__malloc_unlock>
 800f8dc:	e794      	b.n	800f808 <_malloc_r+0x20>
 800f8de:	6005      	str	r5, [r0, #0]
 800f8e0:	e7d6      	b.n	800f890 <_malloc_r+0xa8>
 800f8e2:	bf00      	nop
 800f8e4:	240009fc 	.word	0x240009fc

0800f8e8 <__malloc_lock>:
 800f8e8:	4801      	ldr	r0, [pc, #4]	@ (800f8f0 <__malloc_lock+0x8>)
 800f8ea:	f7ff bee0 	b.w	800f6ae <__retarget_lock_acquire_recursive>
 800f8ee:	bf00      	nop
 800f8f0:	240009f4 	.word	0x240009f4

0800f8f4 <__malloc_unlock>:
 800f8f4:	4801      	ldr	r0, [pc, #4]	@ (800f8fc <__malloc_unlock+0x8>)
 800f8f6:	f7ff bedb 	b.w	800f6b0 <__retarget_lock_release_recursive>
 800f8fa:	bf00      	nop
 800f8fc:	240009f4 	.word	0x240009f4

0800f900 <__ssputs_r>:
 800f900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f904:	688e      	ldr	r6, [r1, #8]
 800f906:	461f      	mov	r7, r3
 800f908:	42be      	cmp	r6, r7
 800f90a:	680b      	ldr	r3, [r1, #0]
 800f90c:	4682      	mov	sl, r0
 800f90e:	460c      	mov	r4, r1
 800f910:	4690      	mov	r8, r2
 800f912:	d82d      	bhi.n	800f970 <__ssputs_r+0x70>
 800f914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f918:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f91c:	d026      	beq.n	800f96c <__ssputs_r+0x6c>
 800f91e:	6965      	ldr	r5, [r4, #20]
 800f920:	6909      	ldr	r1, [r1, #16]
 800f922:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f926:	eba3 0901 	sub.w	r9, r3, r1
 800f92a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f92e:	1c7b      	adds	r3, r7, #1
 800f930:	444b      	add	r3, r9
 800f932:	106d      	asrs	r5, r5, #1
 800f934:	429d      	cmp	r5, r3
 800f936:	bf38      	it	cc
 800f938:	461d      	movcc	r5, r3
 800f93a:	0553      	lsls	r3, r2, #21
 800f93c:	d527      	bpl.n	800f98e <__ssputs_r+0x8e>
 800f93e:	4629      	mov	r1, r5
 800f940:	f7ff ff52 	bl	800f7e8 <_malloc_r>
 800f944:	4606      	mov	r6, r0
 800f946:	b360      	cbz	r0, 800f9a2 <__ssputs_r+0xa2>
 800f948:	6921      	ldr	r1, [r4, #16]
 800f94a:	464a      	mov	r2, r9
 800f94c:	f000 fba6 	bl	801009c <memcpy>
 800f950:	89a3      	ldrh	r3, [r4, #12]
 800f952:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	6126      	str	r6, [r4, #16]
 800f95e:	6165      	str	r5, [r4, #20]
 800f960:	444e      	add	r6, r9
 800f962:	eba5 0509 	sub.w	r5, r5, r9
 800f966:	6026      	str	r6, [r4, #0]
 800f968:	60a5      	str	r5, [r4, #8]
 800f96a:	463e      	mov	r6, r7
 800f96c:	42be      	cmp	r6, r7
 800f96e:	d900      	bls.n	800f972 <__ssputs_r+0x72>
 800f970:	463e      	mov	r6, r7
 800f972:	6820      	ldr	r0, [r4, #0]
 800f974:	4632      	mov	r2, r6
 800f976:	4641      	mov	r1, r8
 800f978:	f000 fb66 	bl	8010048 <memmove>
 800f97c:	68a3      	ldr	r3, [r4, #8]
 800f97e:	1b9b      	subs	r3, r3, r6
 800f980:	60a3      	str	r3, [r4, #8]
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	4433      	add	r3, r6
 800f986:	6023      	str	r3, [r4, #0]
 800f988:	2000      	movs	r0, #0
 800f98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98e:	462a      	mov	r2, r5
 800f990:	f000 fb99 	bl	80100c6 <_realloc_r>
 800f994:	4606      	mov	r6, r0
 800f996:	2800      	cmp	r0, #0
 800f998:	d1e0      	bne.n	800f95c <__ssputs_r+0x5c>
 800f99a:	6921      	ldr	r1, [r4, #16]
 800f99c:	4650      	mov	r0, sl
 800f99e:	f7ff feaf 	bl	800f700 <_free_r>
 800f9a2:	230c      	movs	r3, #12
 800f9a4:	f8ca 3000 	str.w	r3, [sl]
 800f9a8:	89a3      	ldrh	r3, [r4, #12]
 800f9aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ae:	81a3      	strh	r3, [r4, #12]
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	e7e9      	b.n	800f98a <__ssputs_r+0x8a>
	...

0800f9b8 <_svfiprintf_r>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	4698      	mov	r8, r3
 800f9be:	898b      	ldrh	r3, [r1, #12]
 800f9c0:	061b      	lsls	r3, r3, #24
 800f9c2:	b09d      	sub	sp, #116	@ 0x74
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	4614      	mov	r4, r2
 800f9ca:	d510      	bpl.n	800f9ee <_svfiprintf_r+0x36>
 800f9cc:	690b      	ldr	r3, [r1, #16]
 800f9ce:	b973      	cbnz	r3, 800f9ee <_svfiprintf_r+0x36>
 800f9d0:	2140      	movs	r1, #64	@ 0x40
 800f9d2:	f7ff ff09 	bl	800f7e8 <_malloc_r>
 800f9d6:	6028      	str	r0, [r5, #0]
 800f9d8:	6128      	str	r0, [r5, #16]
 800f9da:	b930      	cbnz	r0, 800f9ea <_svfiprintf_r+0x32>
 800f9dc:	230c      	movs	r3, #12
 800f9de:	603b      	str	r3, [r7, #0]
 800f9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e4:	b01d      	add	sp, #116	@ 0x74
 800f9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ea:	2340      	movs	r3, #64	@ 0x40
 800f9ec:	616b      	str	r3, [r5, #20]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f2:	2320      	movs	r3, #32
 800f9f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9fc:	2330      	movs	r3, #48	@ 0x30
 800f9fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb9c <_svfiprintf_r+0x1e4>
 800fa02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa06:	f04f 0901 	mov.w	r9, #1
 800fa0a:	4623      	mov	r3, r4
 800fa0c:	469a      	mov	sl, r3
 800fa0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa12:	b10a      	cbz	r2, 800fa18 <_svfiprintf_r+0x60>
 800fa14:	2a25      	cmp	r2, #37	@ 0x25
 800fa16:	d1f9      	bne.n	800fa0c <_svfiprintf_r+0x54>
 800fa18:	ebba 0b04 	subs.w	fp, sl, r4
 800fa1c:	d00b      	beq.n	800fa36 <_svfiprintf_r+0x7e>
 800fa1e:	465b      	mov	r3, fp
 800fa20:	4622      	mov	r2, r4
 800fa22:	4629      	mov	r1, r5
 800fa24:	4638      	mov	r0, r7
 800fa26:	f7ff ff6b 	bl	800f900 <__ssputs_r>
 800fa2a:	3001      	adds	r0, #1
 800fa2c:	f000 80a7 	beq.w	800fb7e <_svfiprintf_r+0x1c6>
 800fa30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa32:	445a      	add	r2, fp
 800fa34:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa36:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 809f 	beq.w	800fb7e <_svfiprintf_r+0x1c6>
 800fa40:	2300      	movs	r3, #0
 800fa42:	f04f 32ff 	mov.w	r2, #4294967295
 800fa46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa4a:	f10a 0a01 	add.w	sl, sl, #1
 800fa4e:	9304      	str	r3, [sp, #16]
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa56:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa58:	4654      	mov	r4, sl
 800fa5a:	2205      	movs	r2, #5
 800fa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa60:	484e      	ldr	r0, [pc, #312]	@ (800fb9c <_svfiprintf_r+0x1e4>)
 800fa62:	f7f0 fc45 	bl	80002f0 <memchr>
 800fa66:	9a04      	ldr	r2, [sp, #16]
 800fa68:	b9d8      	cbnz	r0, 800faa2 <_svfiprintf_r+0xea>
 800fa6a:	06d0      	lsls	r0, r2, #27
 800fa6c:	bf44      	itt	mi
 800fa6e:	2320      	movmi	r3, #32
 800fa70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa74:	0711      	lsls	r1, r2, #28
 800fa76:	bf44      	itt	mi
 800fa78:	232b      	movmi	r3, #43	@ 0x2b
 800fa7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa7e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa82:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa84:	d015      	beq.n	800fab2 <_svfiprintf_r+0xfa>
 800fa86:	9a07      	ldr	r2, [sp, #28]
 800fa88:	4654      	mov	r4, sl
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f04f 0c0a 	mov.w	ip, #10
 800fa90:	4621      	mov	r1, r4
 800fa92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa96:	3b30      	subs	r3, #48	@ 0x30
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	d94b      	bls.n	800fb34 <_svfiprintf_r+0x17c>
 800fa9c:	b1b0      	cbz	r0, 800facc <_svfiprintf_r+0x114>
 800fa9e:	9207      	str	r2, [sp, #28]
 800faa0:	e014      	b.n	800facc <_svfiprintf_r+0x114>
 800faa2:	eba0 0308 	sub.w	r3, r0, r8
 800faa6:	fa09 f303 	lsl.w	r3, r9, r3
 800faaa:	4313      	orrs	r3, r2
 800faac:	9304      	str	r3, [sp, #16]
 800faae:	46a2      	mov	sl, r4
 800fab0:	e7d2      	b.n	800fa58 <_svfiprintf_r+0xa0>
 800fab2:	9b03      	ldr	r3, [sp, #12]
 800fab4:	1d19      	adds	r1, r3, #4
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	9103      	str	r1, [sp, #12]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	bfbb      	ittet	lt
 800fabe:	425b      	neglt	r3, r3
 800fac0:	f042 0202 	orrlt.w	r2, r2, #2
 800fac4:	9307      	strge	r3, [sp, #28]
 800fac6:	9307      	strlt	r3, [sp, #28]
 800fac8:	bfb8      	it	lt
 800faca:	9204      	strlt	r2, [sp, #16]
 800facc:	7823      	ldrb	r3, [r4, #0]
 800face:	2b2e      	cmp	r3, #46	@ 0x2e
 800fad0:	d10a      	bne.n	800fae8 <_svfiprintf_r+0x130>
 800fad2:	7863      	ldrb	r3, [r4, #1]
 800fad4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad6:	d132      	bne.n	800fb3e <_svfiprintf_r+0x186>
 800fad8:	9b03      	ldr	r3, [sp, #12]
 800fada:	1d1a      	adds	r2, r3, #4
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	9203      	str	r2, [sp, #12]
 800fae0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fae4:	3402      	adds	r4, #2
 800fae6:	9305      	str	r3, [sp, #20]
 800fae8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fbac <_svfiprintf_r+0x1f4>
 800faec:	7821      	ldrb	r1, [r4, #0]
 800faee:	2203      	movs	r2, #3
 800faf0:	4650      	mov	r0, sl
 800faf2:	f7f0 fbfd 	bl	80002f0 <memchr>
 800faf6:	b138      	cbz	r0, 800fb08 <_svfiprintf_r+0x150>
 800faf8:	9b04      	ldr	r3, [sp, #16]
 800fafa:	eba0 000a 	sub.w	r0, r0, sl
 800fafe:	2240      	movs	r2, #64	@ 0x40
 800fb00:	4082      	lsls	r2, r0
 800fb02:	4313      	orrs	r3, r2
 800fb04:	3401      	adds	r4, #1
 800fb06:	9304      	str	r3, [sp, #16]
 800fb08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0c:	4824      	ldr	r0, [pc, #144]	@ (800fba0 <_svfiprintf_r+0x1e8>)
 800fb0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb12:	2206      	movs	r2, #6
 800fb14:	f7f0 fbec 	bl	80002f0 <memchr>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d036      	beq.n	800fb8a <_svfiprintf_r+0x1d2>
 800fb1c:	4b21      	ldr	r3, [pc, #132]	@ (800fba4 <_svfiprintf_r+0x1ec>)
 800fb1e:	bb1b      	cbnz	r3, 800fb68 <_svfiprintf_r+0x1b0>
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	3307      	adds	r3, #7
 800fb24:	f023 0307 	bic.w	r3, r3, #7
 800fb28:	3308      	adds	r3, #8
 800fb2a:	9303      	str	r3, [sp, #12]
 800fb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb2e:	4433      	add	r3, r6
 800fb30:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb32:	e76a      	b.n	800fa0a <_svfiprintf_r+0x52>
 800fb34:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb38:	460c      	mov	r4, r1
 800fb3a:	2001      	movs	r0, #1
 800fb3c:	e7a8      	b.n	800fa90 <_svfiprintf_r+0xd8>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	3401      	adds	r4, #1
 800fb42:	9305      	str	r3, [sp, #20]
 800fb44:	4619      	mov	r1, r3
 800fb46:	f04f 0c0a 	mov.w	ip, #10
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb50:	3a30      	subs	r2, #48	@ 0x30
 800fb52:	2a09      	cmp	r2, #9
 800fb54:	d903      	bls.n	800fb5e <_svfiprintf_r+0x1a6>
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0c6      	beq.n	800fae8 <_svfiprintf_r+0x130>
 800fb5a:	9105      	str	r1, [sp, #20]
 800fb5c:	e7c4      	b.n	800fae8 <_svfiprintf_r+0x130>
 800fb5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb62:	4604      	mov	r4, r0
 800fb64:	2301      	movs	r3, #1
 800fb66:	e7f0      	b.n	800fb4a <_svfiprintf_r+0x192>
 800fb68:	ab03      	add	r3, sp, #12
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	462a      	mov	r2, r5
 800fb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800fba8 <_svfiprintf_r+0x1f0>)
 800fb70:	a904      	add	r1, sp, #16
 800fb72:	4638      	mov	r0, r7
 800fb74:	f3af 8000 	nop.w
 800fb78:	1c42      	adds	r2, r0, #1
 800fb7a:	4606      	mov	r6, r0
 800fb7c:	d1d6      	bne.n	800fb2c <_svfiprintf_r+0x174>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	065b      	lsls	r3, r3, #25
 800fb82:	f53f af2d 	bmi.w	800f9e0 <_svfiprintf_r+0x28>
 800fb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb88:	e72c      	b.n	800f9e4 <_svfiprintf_r+0x2c>
 800fb8a:	ab03      	add	r3, sp, #12
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4b05      	ldr	r3, [pc, #20]	@ (800fba8 <_svfiprintf_r+0x1f0>)
 800fb92:	a904      	add	r1, sp, #16
 800fb94:	4638      	mov	r0, r7
 800fb96:	f000 f879 	bl	800fc8c <_printf_i>
 800fb9a:	e7ed      	b.n	800fb78 <_svfiprintf_r+0x1c0>
 800fb9c:	08011593 	.word	0x08011593
 800fba0:	0801159d 	.word	0x0801159d
 800fba4:	00000000 	.word	0x00000000
 800fba8:	0800f901 	.word	0x0800f901
 800fbac:	08011599 	.word	0x08011599

0800fbb0 <_printf_common>:
 800fbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	4698      	mov	r8, r3
 800fbb8:	688a      	ldr	r2, [r1, #8]
 800fbba:	690b      	ldr	r3, [r1, #16]
 800fbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	bfb8      	it	lt
 800fbc4:	4613      	movlt	r3, r2
 800fbc6:	6033      	str	r3, [r6, #0]
 800fbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbcc:	4607      	mov	r7, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	b10a      	cbz	r2, 800fbd6 <_printf_common+0x26>
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	6033      	str	r3, [r6, #0]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	0699      	lsls	r1, r3, #26
 800fbda:	bf42      	ittt	mi
 800fbdc:	6833      	ldrmi	r3, [r6, #0]
 800fbde:	3302      	addmi	r3, #2
 800fbe0:	6033      	strmi	r3, [r6, #0]
 800fbe2:	6825      	ldr	r5, [r4, #0]
 800fbe4:	f015 0506 	ands.w	r5, r5, #6
 800fbe8:	d106      	bne.n	800fbf8 <_printf_common+0x48>
 800fbea:	f104 0a19 	add.w	sl, r4, #25
 800fbee:	68e3      	ldr	r3, [r4, #12]
 800fbf0:	6832      	ldr	r2, [r6, #0]
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	42ab      	cmp	r3, r5
 800fbf6:	dc26      	bgt.n	800fc46 <_printf_common+0x96>
 800fbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbfc:	6822      	ldr	r2, [r4, #0]
 800fbfe:	3b00      	subs	r3, #0
 800fc00:	bf18      	it	ne
 800fc02:	2301      	movne	r3, #1
 800fc04:	0692      	lsls	r2, r2, #26
 800fc06:	d42b      	bmi.n	800fc60 <_printf_common+0xb0>
 800fc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc0c:	4641      	mov	r1, r8
 800fc0e:	4638      	mov	r0, r7
 800fc10:	47c8      	blx	r9
 800fc12:	3001      	adds	r0, #1
 800fc14:	d01e      	beq.n	800fc54 <_printf_common+0xa4>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	6922      	ldr	r2, [r4, #16]
 800fc1a:	f003 0306 	and.w	r3, r3, #6
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	bf02      	ittt	eq
 800fc22:	68e5      	ldreq	r5, [r4, #12]
 800fc24:	6833      	ldreq	r3, [r6, #0]
 800fc26:	1aed      	subeq	r5, r5, r3
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	bf0c      	ite	eq
 800fc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc30:	2500      	movne	r5, #0
 800fc32:	4293      	cmp	r3, r2
 800fc34:	bfc4      	itt	gt
 800fc36:	1a9b      	subgt	r3, r3, r2
 800fc38:	18ed      	addgt	r5, r5, r3
 800fc3a:	2600      	movs	r6, #0
 800fc3c:	341a      	adds	r4, #26
 800fc3e:	42b5      	cmp	r5, r6
 800fc40:	d11a      	bne.n	800fc78 <_printf_common+0xc8>
 800fc42:	2000      	movs	r0, #0
 800fc44:	e008      	b.n	800fc58 <_printf_common+0xa8>
 800fc46:	2301      	movs	r3, #1
 800fc48:	4652      	mov	r2, sl
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	47c8      	blx	r9
 800fc50:	3001      	adds	r0, #1
 800fc52:	d103      	bne.n	800fc5c <_printf_common+0xac>
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	e7c6      	b.n	800fbee <_printf_common+0x3e>
 800fc60:	18e1      	adds	r1, r4, r3
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	2030      	movs	r0, #48	@ 0x30
 800fc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc6a:	4422      	add	r2, r4
 800fc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc74:	3302      	adds	r3, #2
 800fc76:	e7c7      	b.n	800fc08 <_printf_common+0x58>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	4641      	mov	r1, r8
 800fc7e:	4638      	mov	r0, r7
 800fc80:	47c8      	blx	r9
 800fc82:	3001      	adds	r0, #1
 800fc84:	d0e6      	beq.n	800fc54 <_printf_common+0xa4>
 800fc86:	3601      	adds	r6, #1
 800fc88:	e7d9      	b.n	800fc3e <_printf_common+0x8e>
	...

0800fc8c <_printf_i>:
 800fc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc90:	7e0f      	ldrb	r7, [r1, #24]
 800fc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc94:	2f78      	cmp	r7, #120	@ 0x78
 800fc96:	4691      	mov	r9, r2
 800fc98:	4680      	mov	r8, r0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	469a      	mov	sl, r3
 800fc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fca2:	d807      	bhi.n	800fcb4 <_printf_i+0x28>
 800fca4:	2f62      	cmp	r7, #98	@ 0x62
 800fca6:	d80a      	bhi.n	800fcbe <_printf_i+0x32>
 800fca8:	2f00      	cmp	r7, #0
 800fcaa:	f000 80d2 	beq.w	800fe52 <_printf_i+0x1c6>
 800fcae:	2f58      	cmp	r7, #88	@ 0x58
 800fcb0:	f000 80b9 	beq.w	800fe26 <_printf_i+0x19a>
 800fcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcbc:	e03a      	b.n	800fd34 <_printf_i+0xa8>
 800fcbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcc2:	2b15      	cmp	r3, #21
 800fcc4:	d8f6      	bhi.n	800fcb4 <_printf_i+0x28>
 800fcc6:	a101      	add	r1, pc, #4	@ (adr r1, 800fccc <_printf_i+0x40>)
 800fcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fccc:	0800fd25 	.word	0x0800fd25
 800fcd0:	0800fd39 	.word	0x0800fd39
 800fcd4:	0800fcb5 	.word	0x0800fcb5
 800fcd8:	0800fcb5 	.word	0x0800fcb5
 800fcdc:	0800fcb5 	.word	0x0800fcb5
 800fce0:	0800fcb5 	.word	0x0800fcb5
 800fce4:	0800fd39 	.word	0x0800fd39
 800fce8:	0800fcb5 	.word	0x0800fcb5
 800fcec:	0800fcb5 	.word	0x0800fcb5
 800fcf0:	0800fcb5 	.word	0x0800fcb5
 800fcf4:	0800fcb5 	.word	0x0800fcb5
 800fcf8:	0800fe39 	.word	0x0800fe39
 800fcfc:	0800fd63 	.word	0x0800fd63
 800fd00:	0800fdf3 	.word	0x0800fdf3
 800fd04:	0800fcb5 	.word	0x0800fcb5
 800fd08:	0800fcb5 	.word	0x0800fcb5
 800fd0c:	0800fe5b 	.word	0x0800fe5b
 800fd10:	0800fcb5 	.word	0x0800fcb5
 800fd14:	0800fd63 	.word	0x0800fd63
 800fd18:	0800fcb5 	.word	0x0800fcb5
 800fd1c:	0800fcb5 	.word	0x0800fcb5
 800fd20:	0800fdfb 	.word	0x0800fdfb
 800fd24:	6833      	ldr	r3, [r6, #0]
 800fd26:	1d1a      	adds	r2, r3, #4
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6032      	str	r2, [r6, #0]
 800fd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd34:	2301      	movs	r3, #1
 800fd36:	e09d      	b.n	800fe74 <_printf_i+0x1e8>
 800fd38:	6833      	ldr	r3, [r6, #0]
 800fd3a:	6820      	ldr	r0, [r4, #0]
 800fd3c:	1d19      	adds	r1, r3, #4
 800fd3e:	6031      	str	r1, [r6, #0]
 800fd40:	0606      	lsls	r6, r0, #24
 800fd42:	d501      	bpl.n	800fd48 <_printf_i+0xbc>
 800fd44:	681d      	ldr	r5, [r3, #0]
 800fd46:	e003      	b.n	800fd50 <_printf_i+0xc4>
 800fd48:	0645      	lsls	r5, r0, #25
 800fd4a:	d5fb      	bpl.n	800fd44 <_printf_i+0xb8>
 800fd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	da03      	bge.n	800fd5c <_printf_i+0xd0>
 800fd54:	232d      	movs	r3, #45	@ 0x2d
 800fd56:	426d      	negs	r5, r5
 800fd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd5c:	4859      	ldr	r0, [pc, #356]	@ (800fec4 <_printf_i+0x238>)
 800fd5e:	230a      	movs	r3, #10
 800fd60:	e011      	b.n	800fd86 <_printf_i+0xfa>
 800fd62:	6821      	ldr	r1, [r4, #0]
 800fd64:	6833      	ldr	r3, [r6, #0]
 800fd66:	0608      	lsls	r0, r1, #24
 800fd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd6c:	d402      	bmi.n	800fd74 <_printf_i+0xe8>
 800fd6e:	0649      	lsls	r1, r1, #25
 800fd70:	bf48      	it	mi
 800fd72:	b2ad      	uxthmi	r5, r5
 800fd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd76:	4853      	ldr	r0, [pc, #332]	@ (800fec4 <_printf_i+0x238>)
 800fd78:	6033      	str	r3, [r6, #0]
 800fd7a:	bf14      	ite	ne
 800fd7c:	230a      	movne	r3, #10
 800fd7e:	2308      	moveq	r3, #8
 800fd80:	2100      	movs	r1, #0
 800fd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd86:	6866      	ldr	r6, [r4, #4]
 800fd88:	60a6      	str	r6, [r4, #8]
 800fd8a:	2e00      	cmp	r6, #0
 800fd8c:	bfa2      	ittt	ge
 800fd8e:	6821      	ldrge	r1, [r4, #0]
 800fd90:	f021 0104 	bicge.w	r1, r1, #4
 800fd94:	6021      	strge	r1, [r4, #0]
 800fd96:	b90d      	cbnz	r5, 800fd9c <_printf_i+0x110>
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	d04b      	beq.n	800fe34 <_printf_i+0x1a8>
 800fd9c:	4616      	mov	r6, r2
 800fd9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fda2:	fb03 5711 	mls	r7, r3, r1, r5
 800fda6:	5dc7      	ldrb	r7, [r0, r7]
 800fda8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdac:	462f      	mov	r7, r5
 800fdae:	42bb      	cmp	r3, r7
 800fdb0:	460d      	mov	r5, r1
 800fdb2:	d9f4      	bls.n	800fd9e <_printf_i+0x112>
 800fdb4:	2b08      	cmp	r3, #8
 800fdb6:	d10b      	bne.n	800fdd0 <_printf_i+0x144>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	07df      	lsls	r7, r3, #31
 800fdbc:	d508      	bpl.n	800fdd0 <_printf_i+0x144>
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	6861      	ldr	r1, [r4, #4]
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	bfde      	ittt	le
 800fdc6:	2330      	movle	r3, #48	@ 0x30
 800fdc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fdd0:	1b92      	subs	r2, r2, r6
 800fdd2:	6122      	str	r2, [r4, #16]
 800fdd4:	f8cd a000 	str.w	sl, [sp]
 800fdd8:	464b      	mov	r3, r9
 800fdda:	aa03      	add	r2, sp, #12
 800fddc:	4621      	mov	r1, r4
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7ff fee6 	bl	800fbb0 <_printf_common>
 800fde4:	3001      	adds	r0, #1
 800fde6:	d14a      	bne.n	800fe7e <_printf_i+0x1f2>
 800fde8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdec:	b004      	add	sp, #16
 800fdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	f043 0320 	orr.w	r3, r3, #32
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	4833      	ldr	r0, [pc, #204]	@ (800fec8 <_printf_i+0x23c>)
 800fdfc:	2778      	movs	r7, #120	@ 0x78
 800fdfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	6831      	ldr	r1, [r6, #0]
 800fe06:	061f      	lsls	r7, r3, #24
 800fe08:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe0c:	d402      	bmi.n	800fe14 <_printf_i+0x188>
 800fe0e:	065f      	lsls	r7, r3, #25
 800fe10:	bf48      	it	mi
 800fe12:	b2ad      	uxthmi	r5, r5
 800fe14:	6031      	str	r1, [r6, #0]
 800fe16:	07d9      	lsls	r1, r3, #31
 800fe18:	bf44      	itt	mi
 800fe1a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe1e:	6023      	strmi	r3, [r4, #0]
 800fe20:	b11d      	cbz	r5, 800fe2a <_printf_i+0x19e>
 800fe22:	2310      	movs	r3, #16
 800fe24:	e7ac      	b.n	800fd80 <_printf_i+0xf4>
 800fe26:	4827      	ldr	r0, [pc, #156]	@ (800fec4 <_printf_i+0x238>)
 800fe28:	e7e9      	b.n	800fdfe <_printf_i+0x172>
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	f023 0320 	bic.w	r3, r3, #32
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	e7f6      	b.n	800fe22 <_printf_i+0x196>
 800fe34:	4616      	mov	r6, r2
 800fe36:	e7bd      	b.n	800fdb4 <_printf_i+0x128>
 800fe38:	6833      	ldr	r3, [r6, #0]
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	6961      	ldr	r1, [r4, #20]
 800fe3e:	1d18      	adds	r0, r3, #4
 800fe40:	6030      	str	r0, [r6, #0]
 800fe42:	062e      	lsls	r6, r5, #24
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	d501      	bpl.n	800fe4c <_printf_i+0x1c0>
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <_printf_i+0x1c6>
 800fe4c:	0668      	lsls	r0, r5, #25
 800fe4e:	d5fb      	bpl.n	800fe48 <_printf_i+0x1bc>
 800fe50:	8019      	strh	r1, [r3, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	4616      	mov	r6, r2
 800fe58:	e7bc      	b.n	800fdd4 <_printf_i+0x148>
 800fe5a:	6833      	ldr	r3, [r6, #0]
 800fe5c:	1d1a      	adds	r2, r3, #4
 800fe5e:	6032      	str	r2, [r6, #0]
 800fe60:	681e      	ldr	r6, [r3, #0]
 800fe62:	6862      	ldr	r2, [r4, #4]
 800fe64:	2100      	movs	r1, #0
 800fe66:	4630      	mov	r0, r6
 800fe68:	f7f0 fa42 	bl	80002f0 <memchr>
 800fe6c:	b108      	cbz	r0, 800fe72 <_printf_i+0x1e6>
 800fe6e:	1b80      	subs	r0, r0, r6
 800fe70:	6060      	str	r0, [r4, #4]
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	2300      	movs	r3, #0
 800fe78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe7c:	e7aa      	b.n	800fdd4 <_printf_i+0x148>
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	4632      	mov	r2, r6
 800fe82:	4649      	mov	r1, r9
 800fe84:	4640      	mov	r0, r8
 800fe86:	47d0      	blx	sl
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d0ad      	beq.n	800fde8 <_printf_i+0x15c>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	079b      	lsls	r3, r3, #30
 800fe90:	d413      	bmi.n	800feba <_printf_i+0x22e>
 800fe92:	68e0      	ldr	r0, [r4, #12]
 800fe94:	9b03      	ldr	r3, [sp, #12]
 800fe96:	4298      	cmp	r0, r3
 800fe98:	bfb8      	it	lt
 800fe9a:	4618      	movlt	r0, r3
 800fe9c:	e7a6      	b.n	800fdec <_printf_i+0x160>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4632      	mov	r2, r6
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d09d      	beq.n	800fde8 <_printf_i+0x15c>
 800feac:	3501      	adds	r5, #1
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	9903      	ldr	r1, [sp, #12]
 800feb2:	1a5b      	subs	r3, r3, r1
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dcf2      	bgt.n	800fe9e <_printf_i+0x212>
 800feb8:	e7eb      	b.n	800fe92 <_printf_i+0x206>
 800feba:	2500      	movs	r5, #0
 800febc:	f104 0619 	add.w	r6, r4, #25
 800fec0:	e7f5      	b.n	800feae <_printf_i+0x222>
 800fec2:	bf00      	nop
 800fec4:	080115a4 	.word	0x080115a4
 800fec8:	080115b5 	.word	0x080115b5

0800fecc <__sflush_r>:
 800fecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed4:	0716      	lsls	r6, r2, #28
 800fed6:	4605      	mov	r5, r0
 800fed8:	460c      	mov	r4, r1
 800feda:	d454      	bmi.n	800ff86 <__sflush_r+0xba>
 800fedc:	684b      	ldr	r3, [r1, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dc02      	bgt.n	800fee8 <__sflush_r+0x1c>
 800fee2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dd48      	ble.n	800ff7a <__sflush_r+0xae>
 800fee8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800feea:	2e00      	cmp	r6, #0
 800feec:	d045      	beq.n	800ff7a <__sflush_r+0xae>
 800feee:	2300      	movs	r3, #0
 800fef0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fef4:	682f      	ldr	r7, [r5, #0]
 800fef6:	6a21      	ldr	r1, [r4, #32]
 800fef8:	602b      	str	r3, [r5, #0]
 800fefa:	d030      	beq.n	800ff5e <__sflush_r+0x92>
 800fefc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	0759      	lsls	r1, r3, #29
 800ff02:	d505      	bpl.n	800ff10 <__sflush_r+0x44>
 800ff04:	6863      	ldr	r3, [r4, #4]
 800ff06:	1ad2      	subs	r2, r2, r3
 800ff08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff0a:	b10b      	cbz	r3, 800ff10 <__sflush_r+0x44>
 800ff0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff0e:	1ad2      	subs	r2, r2, r3
 800ff10:	2300      	movs	r3, #0
 800ff12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff14:	6a21      	ldr	r1, [r4, #32]
 800ff16:	4628      	mov	r0, r5
 800ff18:	47b0      	blx	r6
 800ff1a:	1c43      	adds	r3, r0, #1
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	d106      	bne.n	800ff2e <__sflush_r+0x62>
 800ff20:	6829      	ldr	r1, [r5, #0]
 800ff22:	291d      	cmp	r1, #29
 800ff24:	d82b      	bhi.n	800ff7e <__sflush_r+0xb2>
 800ff26:	4a2a      	ldr	r2, [pc, #168]	@ (800ffd0 <__sflush_r+0x104>)
 800ff28:	410a      	asrs	r2, r1
 800ff2a:	07d6      	lsls	r6, r2, #31
 800ff2c:	d427      	bmi.n	800ff7e <__sflush_r+0xb2>
 800ff2e:	2200      	movs	r2, #0
 800ff30:	6062      	str	r2, [r4, #4]
 800ff32:	04d9      	lsls	r1, r3, #19
 800ff34:	6922      	ldr	r2, [r4, #16]
 800ff36:	6022      	str	r2, [r4, #0]
 800ff38:	d504      	bpl.n	800ff44 <__sflush_r+0x78>
 800ff3a:	1c42      	adds	r2, r0, #1
 800ff3c:	d101      	bne.n	800ff42 <__sflush_r+0x76>
 800ff3e:	682b      	ldr	r3, [r5, #0]
 800ff40:	b903      	cbnz	r3, 800ff44 <__sflush_r+0x78>
 800ff42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff46:	602f      	str	r7, [r5, #0]
 800ff48:	b1b9      	cbz	r1, 800ff7a <__sflush_r+0xae>
 800ff4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff4e:	4299      	cmp	r1, r3
 800ff50:	d002      	beq.n	800ff58 <__sflush_r+0x8c>
 800ff52:	4628      	mov	r0, r5
 800ff54:	f7ff fbd4 	bl	800f700 <_free_r>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff5c:	e00d      	b.n	800ff7a <__sflush_r+0xae>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4628      	mov	r0, r5
 800ff62:	47b0      	blx	r6
 800ff64:	4602      	mov	r2, r0
 800ff66:	1c50      	adds	r0, r2, #1
 800ff68:	d1c9      	bne.n	800fefe <__sflush_r+0x32>
 800ff6a:	682b      	ldr	r3, [r5, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d0c6      	beq.n	800fefe <__sflush_r+0x32>
 800ff70:	2b1d      	cmp	r3, #29
 800ff72:	d001      	beq.n	800ff78 <__sflush_r+0xac>
 800ff74:	2b16      	cmp	r3, #22
 800ff76:	d11e      	bne.n	800ffb6 <__sflush_r+0xea>
 800ff78:	602f      	str	r7, [r5, #0]
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e022      	b.n	800ffc4 <__sflush_r+0xf8>
 800ff7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff82:	b21b      	sxth	r3, r3
 800ff84:	e01b      	b.n	800ffbe <__sflush_r+0xf2>
 800ff86:	690f      	ldr	r7, [r1, #16]
 800ff88:	2f00      	cmp	r7, #0
 800ff8a:	d0f6      	beq.n	800ff7a <__sflush_r+0xae>
 800ff8c:	0793      	lsls	r3, r2, #30
 800ff8e:	680e      	ldr	r6, [r1, #0]
 800ff90:	bf08      	it	eq
 800ff92:	694b      	ldreq	r3, [r1, #20]
 800ff94:	600f      	str	r7, [r1, #0]
 800ff96:	bf18      	it	ne
 800ff98:	2300      	movne	r3, #0
 800ff9a:	eba6 0807 	sub.w	r8, r6, r7
 800ff9e:	608b      	str	r3, [r1, #8]
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	dde9      	ble.n	800ff7a <__sflush_r+0xae>
 800ffa6:	6a21      	ldr	r1, [r4, #32]
 800ffa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ffaa:	4643      	mov	r3, r8
 800ffac:	463a      	mov	r2, r7
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b0      	blx	r6
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	dc08      	bgt.n	800ffc8 <__sflush_r+0xfc>
 800ffb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc8:	4407      	add	r7, r0
 800ffca:	eba8 0800 	sub.w	r8, r8, r0
 800ffce:	e7e7      	b.n	800ffa0 <__sflush_r+0xd4>
 800ffd0:	dfbffffe 	.word	0xdfbffffe

0800ffd4 <_fflush_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	690b      	ldr	r3, [r1, #16]
 800ffd8:	4605      	mov	r5, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	b913      	cbnz	r3, 800ffe4 <_fflush_r+0x10>
 800ffde:	2500      	movs	r5, #0
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	b118      	cbz	r0, 800ffee <_fflush_r+0x1a>
 800ffe6:	6a03      	ldr	r3, [r0, #32]
 800ffe8:	b90b      	cbnz	r3, 800ffee <_fflush_r+0x1a>
 800ffea:	f7ff fa19 	bl	800f420 <__sinit>
 800ffee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0f3      	beq.n	800ffde <_fflush_r+0xa>
 800fff6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fff8:	07d0      	lsls	r0, r2, #31
 800fffa:	d404      	bmi.n	8010006 <_fflush_r+0x32>
 800fffc:	0599      	lsls	r1, r3, #22
 800fffe:	d402      	bmi.n	8010006 <_fflush_r+0x32>
 8010000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010002:	f7ff fb54 	bl	800f6ae <__retarget_lock_acquire_recursive>
 8010006:	4628      	mov	r0, r5
 8010008:	4621      	mov	r1, r4
 801000a:	f7ff ff5f 	bl	800fecc <__sflush_r>
 801000e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010010:	07da      	lsls	r2, r3, #31
 8010012:	4605      	mov	r5, r0
 8010014:	d4e4      	bmi.n	800ffe0 <_fflush_r+0xc>
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	059b      	lsls	r3, r3, #22
 801001a:	d4e1      	bmi.n	800ffe0 <_fflush_r+0xc>
 801001c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801001e:	f7ff fb47 	bl	800f6b0 <__retarget_lock_release_recursive>
 8010022:	e7dd      	b.n	800ffe0 <_fflush_r+0xc>

08010024 <fiprintf>:
 8010024:	b40e      	push	{r1, r2, r3}
 8010026:	b503      	push	{r0, r1, lr}
 8010028:	4601      	mov	r1, r0
 801002a:	ab03      	add	r3, sp, #12
 801002c:	4805      	ldr	r0, [pc, #20]	@ (8010044 <fiprintf+0x20>)
 801002e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010032:	6800      	ldr	r0, [r0, #0]
 8010034:	9301      	str	r3, [sp, #4]
 8010036:	f000 f89d 	bl	8010174 <_vfiprintf_r>
 801003a:	b002      	add	sp, #8
 801003c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010040:	b003      	add	sp, #12
 8010042:	4770      	bx	lr
 8010044:	24000034 	.word	0x24000034

08010048 <memmove>:
 8010048:	4288      	cmp	r0, r1
 801004a:	b510      	push	{r4, lr}
 801004c:	eb01 0402 	add.w	r4, r1, r2
 8010050:	d902      	bls.n	8010058 <memmove+0x10>
 8010052:	4284      	cmp	r4, r0
 8010054:	4623      	mov	r3, r4
 8010056:	d807      	bhi.n	8010068 <memmove+0x20>
 8010058:	1e43      	subs	r3, r0, #1
 801005a:	42a1      	cmp	r1, r4
 801005c:	d008      	beq.n	8010070 <memmove+0x28>
 801005e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010066:	e7f8      	b.n	801005a <memmove+0x12>
 8010068:	4402      	add	r2, r0
 801006a:	4601      	mov	r1, r0
 801006c:	428a      	cmp	r2, r1
 801006e:	d100      	bne.n	8010072 <memmove+0x2a>
 8010070:	bd10      	pop	{r4, pc}
 8010072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801007a:	e7f7      	b.n	801006c <memmove+0x24>

0801007c <_sbrk_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4d06      	ldr	r5, [pc, #24]	@ (8010098 <_sbrk_r+0x1c>)
 8010080:	2300      	movs	r3, #0
 8010082:	4604      	mov	r4, r0
 8010084:	4608      	mov	r0, r1
 8010086:	602b      	str	r3, [r5, #0]
 8010088:	f7f4 fcf2 	bl	8004a70 <_sbrk>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_sbrk_r+0x1a>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_sbrk_r+0x1a>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	240009f0 	.word	0x240009f0

0801009c <memcpy>:
 801009c:	440a      	add	r2, r1
 801009e:	4291      	cmp	r1, r2
 80100a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80100a4:	d100      	bne.n	80100a8 <memcpy+0xc>
 80100a6:	4770      	bx	lr
 80100a8:	b510      	push	{r4, lr}
 80100aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100b2:	4291      	cmp	r1, r2
 80100b4:	d1f9      	bne.n	80100aa <memcpy+0xe>
 80100b6:	bd10      	pop	{r4, pc}

080100b8 <abort>:
 80100b8:	b508      	push	{r3, lr}
 80100ba:	2006      	movs	r0, #6
 80100bc:	f000 fa2e 	bl	801051c <raise>
 80100c0:	2001      	movs	r0, #1
 80100c2:	f7f4 fc5d 	bl	8004980 <_exit>

080100c6 <_realloc_r>:
 80100c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ca:	4680      	mov	r8, r0
 80100cc:	4615      	mov	r5, r2
 80100ce:	460c      	mov	r4, r1
 80100d0:	b921      	cbnz	r1, 80100dc <_realloc_r+0x16>
 80100d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d6:	4611      	mov	r1, r2
 80100d8:	f7ff bb86 	b.w	800f7e8 <_malloc_r>
 80100dc:	b92a      	cbnz	r2, 80100ea <_realloc_r+0x24>
 80100de:	f7ff fb0f 	bl	800f700 <_free_r>
 80100e2:	2400      	movs	r4, #0
 80100e4:	4620      	mov	r0, r4
 80100e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ea:	f000 fa33 	bl	8010554 <_malloc_usable_size_r>
 80100ee:	4285      	cmp	r5, r0
 80100f0:	4606      	mov	r6, r0
 80100f2:	d802      	bhi.n	80100fa <_realloc_r+0x34>
 80100f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80100f8:	d8f4      	bhi.n	80100e4 <_realloc_r+0x1e>
 80100fa:	4629      	mov	r1, r5
 80100fc:	4640      	mov	r0, r8
 80100fe:	f7ff fb73 	bl	800f7e8 <_malloc_r>
 8010102:	4607      	mov	r7, r0
 8010104:	2800      	cmp	r0, #0
 8010106:	d0ec      	beq.n	80100e2 <_realloc_r+0x1c>
 8010108:	42b5      	cmp	r5, r6
 801010a:	462a      	mov	r2, r5
 801010c:	4621      	mov	r1, r4
 801010e:	bf28      	it	cs
 8010110:	4632      	movcs	r2, r6
 8010112:	f7ff ffc3 	bl	801009c <memcpy>
 8010116:	4621      	mov	r1, r4
 8010118:	4640      	mov	r0, r8
 801011a:	f7ff faf1 	bl	800f700 <_free_r>
 801011e:	463c      	mov	r4, r7
 8010120:	e7e0      	b.n	80100e4 <_realloc_r+0x1e>

08010122 <__sfputc_r>:
 8010122:	6893      	ldr	r3, [r2, #8]
 8010124:	3b01      	subs	r3, #1
 8010126:	2b00      	cmp	r3, #0
 8010128:	b410      	push	{r4}
 801012a:	6093      	str	r3, [r2, #8]
 801012c:	da08      	bge.n	8010140 <__sfputc_r+0x1e>
 801012e:	6994      	ldr	r4, [r2, #24]
 8010130:	42a3      	cmp	r3, r4
 8010132:	db01      	blt.n	8010138 <__sfputc_r+0x16>
 8010134:	290a      	cmp	r1, #10
 8010136:	d103      	bne.n	8010140 <__sfputc_r+0x1e>
 8010138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801013c:	f000 b932 	b.w	80103a4 <__swbuf_r>
 8010140:	6813      	ldr	r3, [r2, #0]
 8010142:	1c58      	adds	r0, r3, #1
 8010144:	6010      	str	r0, [r2, #0]
 8010146:	7019      	strb	r1, [r3, #0]
 8010148:	4608      	mov	r0, r1
 801014a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801014e:	4770      	bx	lr

08010150 <__sfputs_r>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	4606      	mov	r6, r0
 8010154:	460f      	mov	r7, r1
 8010156:	4614      	mov	r4, r2
 8010158:	18d5      	adds	r5, r2, r3
 801015a:	42ac      	cmp	r4, r5
 801015c:	d101      	bne.n	8010162 <__sfputs_r+0x12>
 801015e:	2000      	movs	r0, #0
 8010160:	e007      	b.n	8010172 <__sfputs_r+0x22>
 8010162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010166:	463a      	mov	r2, r7
 8010168:	4630      	mov	r0, r6
 801016a:	f7ff ffda 	bl	8010122 <__sfputc_r>
 801016e:	1c43      	adds	r3, r0, #1
 8010170:	d1f3      	bne.n	801015a <__sfputs_r+0xa>
 8010172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010174 <_vfiprintf_r>:
 8010174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010178:	460d      	mov	r5, r1
 801017a:	b09d      	sub	sp, #116	@ 0x74
 801017c:	4614      	mov	r4, r2
 801017e:	4698      	mov	r8, r3
 8010180:	4606      	mov	r6, r0
 8010182:	b118      	cbz	r0, 801018c <_vfiprintf_r+0x18>
 8010184:	6a03      	ldr	r3, [r0, #32]
 8010186:	b90b      	cbnz	r3, 801018c <_vfiprintf_r+0x18>
 8010188:	f7ff f94a 	bl	800f420 <__sinit>
 801018c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801018e:	07d9      	lsls	r1, r3, #31
 8010190:	d405      	bmi.n	801019e <_vfiprintf_r+0x2a>
 8010192:	89ab      	ldrh	r3, [r5, #12]
 8010194:	059a      	lsls	r2, r3, #22
 8010196:	d402      	bmi.n	801019e <_vfiprintf_r+0x2a>
 8010198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801019a:	f7ff fa88 	bl	800f6ae <__retarget_lock_acquire_recursive>
 801019e:	89ab      	ldrh	r3, [r5, #12]
 80101a0:	071b      	lsls	r3, r3, #28
 80101a2:	d501      	bpl.n	80101a8 <_vfiprintf_r+0x34>
 80101a4:	692b      	ldr	r3, [r5, #16]
 80101a6:	b99b      	cbnz	r3, 80101d0 <_vfiprintf_r+0x5c>
 80101a8:	4629      	mov	r1, r5
 80101aa:	4630      	mov	r0, r6
 80101ac:	f000 f938 	bl	8010420 <__swsetup_r>
 80101b0:	b170      	cbz	r0, 80101d0 <_vfiprintf_r+0x5c>
 80101b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101b4:	07dc      	lsls	r4, r3, #31
 80101b6:	d504      	bpl.n	80101c2 <_vfiprintf_r+0x4e>
 80101b8:	f04f 30ff 	mov.w	r0, #4294967295
 80101bc:	b01d      	add	sp, #116	@ 0x74
 80101be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c2:	89ab      	ldrh	r3, [r5, #12]
 80101c4:	0598      	lsls	r0, r3, #22
 80101c6:	d4f7      	bmi.n	80101b8 <_vfiprintf_r+0x44>
 80101c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101ca:	f7ff fa71 	bl	800f6b0 <__retarget_lock_release_recursive>
 80101ce:	e7f3      	b.n	80101b8 <_vfiprintf_r+0x44>
 80101d0:	2300      	movs	r3, #0
 80101d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101d4:	2320      	movs	r3, #32
 80101d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101da:	f8cd 800c 	str.w	r8, [sp, #12]
 80101de:	2330      	movs	r3, #48	@ 0x30
 80101e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010390 <_vfiprintf_r+0x21c>
 80101e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101e8:	f04f 0901 	mov.w	r9, #1
 80101ec:	4623      	mov	r3, r4
 80101ee:	469a      	mov	sl, r3
 80101f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101f4:	b10a      	cbz	r2, 80101fa <_vfiprintf_r+0x86>
 80101f6:	2a25      	cmp	r2, #37	@ 0x25
 80101f8:	d1f9      	bne.n	80101ee <_vfiprintf_r+0x7a>
 80101fa:	ebba 0b04 	subs.w	fp, sl, r4
 80101fe:	d00b      	beq.n	8010218 <_vfiprintf_r+0xa4>
 8010200:	465b      	mov	r3, fp
 8010202:	4622      	mov	r2, r4
 8010204:	4629      	mov	r1, r5
 8010206:	4630      	mov	r0, r6
 8010208:	f7ff ffa2 	bl	8010150 <__sfputs_r>
 801020c:	3001      	adds	r0, #1
 801020e:	f000 80a7 	beq.w	8010360 <_vfiprintf_r+0x1ec>
 8010212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010214:	445a      	add	r2, fp
 8010216:	9209      	str	r2, [sp, #36]	@ 0x24
 8010218:	f89a 3000 	ldrb.w	r3, [sl]
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 809f 	beq.w	8010360 <_vfiprintf_r+0x1ec>
 8010222:	2300      	movs	r3, #0
 8010224:	f04f 32ff 	mov.w	r2, #4294967295
 8010228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801022c:	f10a 0a01 	add.w	sl, sl, #1
 8010230:	9304      	str	r3, [sp, #16]
 8010232:	9307      	str	r3, [sp, #28]
 8010234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010238:	931a      	str	r3, [sp, #104]	@ 0x68
 801023a:	4654      	mov	r4, sl
 801023c:	2205      	movs	r2, #5
 801023e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010242:	4853      	ldr	r0, [pc, #332]	@ (8010390 <_vfiprintf_r+0x21c>)
 8010244:	f7f0 f854 	bl	80002f0 <memchr>
 8010248:	9a04      	ldr	r2, [sp, #16]
 801024a:	b9d8      	cbnz	r0, 8010284 <_vfiprintf_r+0x110>
 801024c:	06d1      	lsls	r1, r2, #27
 801024e:	bf44      	itt	mi
 8010250:	2320      	movmi	r3, #32
 8010252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010256:	0713      	lsls	r3, r2, #28
 8010258:	bf44      	itt	mi
 801025a:	232b      	movmi	r3, #43	@ 0x2b
 801025c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010260:	f89a 3000 	ldrb.w	r3, [sl]
 8010264:	2b2a      	cmp	r3, #42	@ 0x2a
 8010266:	d015      	beq.n	8010294 <_vfiprintf_r+0x120>
 8010268:	9a07      	ldr	r2, [sp, #28]
 801026a:	4654      	mov	r4, sl
 801026c:	2000      	movs	r0, #0
 801026e:	f04f 0c0a 	mov.w	ip, #10
 8010272:	4621      	mov	r1, r4
 8010274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010278:	3b30      	subs	r3, #48	@ 0x30
 801027a:	2b09      	cmp	r3, #9
 801027c:	d94b      	bls.n	8010316 <_vfiprintf_r+0x1a2>
 801027e:	b1b0      	cbz	r0, 80102ae <_vfiprintf_r+0x13a>
 8010280:	9207      	str	r2, [sp, #28]
 8010282:	e014      	b.n	80102ae <_vfiprintf_r+0x13a>
 8010284:	eba0 0308 	sub.w	r3, r0, r8
 8010288:	fa09 f303 	lsl.w	r3, r9, r3
 801028c:	4313      	orrs	r3, r2
 801028e:	9304      	str	r3, [sp, #16]
 8010290:	46a2      	mov	sl, r4
 8010292:	e7d2      	b.n	801023a <_vfiprintf_r+0xc6>
 8010294:	9b03      	ldr	r3, [sp, #12]
 8010296:	1d19      	adds	r1, r3, #4
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	9103      	str	r1, [sp, #12]
 801029c:	2b00      	cmp	r3, #0
 801029e:	bfbb      	ittet	lt
 80102a0:	425b      	neglt	r3, r3
 80102a2:	f042 0202 	orrlt.w	r2, r2, #2
 80102a6:	9307      	strge	r3, [sp, #28]
 80102a8:	9307      	strlt	r3, [sp, #28]
 80102aa:	bfb8      	it	lt
 80102ac:	9204      	strlt	r2, [sp, #16]
 80102ae:	7823      	ldrb	r3, [r4, #0]
 80102b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80102b2:	d10a      	bne.n	80102ca <_vfiprintf_r+0x156>
 80102b4:	7863      	ldrb	r3, [r4, #1]
 80102b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b8:	d132      	bne.n	8010320 <_vfiprintf_r+0x1ac>
 80102ba:	9b03      	ldr	r3, [sp, #12]
 80102bc:	1d1a      	adds	r2, r3, #4
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	9203      	str	r2, [sp, #12]
 80102c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102c6:	3402      	adds	r4, #2
 80102c8:	9305      	str	r3, [sp, #20]
 80102ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103a0 <_vfiprintf_r+0x22c>
 80102ce:	7821      	ldrb	r1, [r4, #0]
 80102d0:	2203      	movs	r2, #3
 80102d2:	4650      	mov	r0, sl
 80102d4:	f7f0 f80c 	bl	80002f0 <memchr>
 80102d8:	b138      	cbz	r0, 80102ea <_vfiprintf_r+0x176>
 80102da:	9b04      	ldr	r3, [sp, #16]
 80102dc:	eba0 000a 	sub.w	r0, r0, sl
 80102e0:	2240      	movs	r2, #64	@ 0x40
 80102e2:	4082      	lsls	r2, r0
 80102e4:	4313      	orrs	r3, r2
 80102e6:	3401      	adds	r4, #1
 80102e8:	9304      	str	r3, [sp, #16]
 80102ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ee:	4829      	ldr	r0, [pc, #164]	@ (8010394 <_vfiprintf_r+0x220>)
 80102f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102f4:	2206      	movs	r2, #6
 80102f6:	f7ef fffb 	bl	80002f0 <memchr>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d03f      	beq.n	801037e <_vfiprintf_r+0x20a>
 80102fe:	4b26      	ldr	r3, [pc, #152]	@ (8010398 <_vfiprintf_r+0x224>)
 8010300:	bb1b      	cbnz	r3, 801034a <_vfiprintf_r+0x1d6>
 8010302:	9b03      	ldr	r3, [sp, #12]
 8010304:	3307      	adds	r3, #7
 8010306:	f023 0307 	bic.w	r3, r3, #7
 801030a:	3308      	adds	r3, #8
 801030c:	9303      	str	r3, [sp, #12]
 801030e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010310:	443b      	add	r3, r7
 8010312:	9309      	str	r3, [sp, #36]	@ 0x24
 8010314:	e76a      	b.n	80101ec <_vfiprintf_r+0x78>
 8010316:	fb0c 3202 	mla	r2, ip, r2, r3
 801031a:	460c      	mov	r4, r1
 801031c:	2001      	movs	r0, #1
 801031e:	e7a8      	b.n	8010272 <_vfiprintf_r+0xfe>
 8010320:	2300      	movs	r3, #0
 8010322:	3401      	adds	r4, #1
 8010324:	9305      	str	r3, [sp, #20]
 8010326:	4619      	mov	r1, r3
 8010328:	f04f 0c0a 	mov.w	ip, #10
 801032c:	4620      	mov	r0, r4
 801032e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010332:	3a30      	subs	r2, #48	@ 0x30
 8010334:	2a09      	cmp	r2, #9
 8010336:	d903      	bls.n	8010340 <_vfiprintf_r+0x1cc>
 8010338:	2b00      	cmp	r3, #0
 801033a:	d0c6      	beq.n	80102ca <_vfiprintf_r+0x156>
 801033c:	9105      	str	r1, [sp, #20]
 801033e:	e7c4      	b.n	80102ca <_vfiprintf_r+0x156>
 8010340:	fb0c 2101 	mla	r1, ip, r1, r2
 8010344:	4604      	mov	r4, r0
 8010346:	2301      	movs	r3, #1
 8010348:	e7f0      	b.n	801032c <_vfiprintf_r+0x1b8>
 801034a:	ab03      	add	r3, sp, #12
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	462a      	mov	r2, r5
 8010350:	4b12      	ldr	r3, [pc, #72]	@ (801039c <_vfiprintf_r+0x228>)
 8010352:	a904      	add	r1, sp, #16
 8010354:	4630      	mov	r0, r6
 8010356:	f3af 8000 	nop.w
 801035a:	4607      	mov	r7, r0
 801035c:	1c78      	adds	r0, r7, #1
 801035e:	d1d6      	bne.n	801030e <_vfiprintf_r+0x19a>
 8010360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010362:	07d9      	lsls	r1, r3, #31
 8010364:	d405      	bmi.n	8010372 <_vfiprintf_r+0x1fe>
 8010366:	89ab      	ldrh	r3, [r5, #12]
 8010368:	059a      	lsls	r2, r3, #22
 801036a:	d402      	bmi.n	8010372 <_vfiprintf_r+0x1fe>
 801036c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801036e:	f7ff f99f 	bl	800f6b0 <__retarget_lock_release_recursive>
 8010372:	89ab      	ldrh	r3, [r5, #12]
 8010374:	065b      	lsls	r3, r3, #25
 8010376:	f53f af1f 	bmi.w	80101b8 <_vfiprintf_r+0x44>
 801037a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801037c:	e71e      	b.n	80101bc <_vfiprintf_r+0x48>
 801037e:	ab03      	add	r3, sp, #12
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	462a      	mov	r2, r5
 8010384:	4b05      	ldr	r3, [pc, #20]	@ (801039c <_vfiprintf_r+0x228>)
 8010386:	a904      	add	r1, sp, #16
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff fc7f 	bl	800fc8c <_printf_i>
 801038e:	e7e4      	b.n	801035a <_vfiprintf_r+0x1e6>
 8010390:	08011593 	.word	0x08011593
 8010394:	0801159d 	.word	0x0801159d
 8010398:	00000000 	.word	0x00000000
 801039c:	08010151 	.word	0x08010151
 80103a0:	08011599 	.word	0x08011599

080103a4 <__swbuf_r>:
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a6:	460e      	mov	r6, r1
 80103a8:	4614      	mov	r4, r2
 80103aa:	4605      	mov	r5, r0
 80103ac:	b118      	cbz	r0, 80103b6 <__swbuf_r+0x12>
 80103ae:	6a03      	ldr	r3, [r0, #32]
 80103b0:	b90b      	cbnz	r3, 80103b6 <__swbuf_r+0x12>
 80103b2:	f7ff f835 	bl	800f420 <__sinit>
 80103b6:	69a3      	ldr	r3, [r4, #24]
 80103b8:	60a3      	str	r3, [r4, #8]
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	071a      	lsls	r2, r3, #28
 80103be:	d501      	bpl.n	80103c4 <__swbuf_r+0x20>
 80103c0:	6923      	ldr	r3, [r4, #16]
 80103c2:	b943      	cbnz	r3, 80103d6 <__swbuf_r+0x32>
 80103c4:	4621      	mov	r1, r4
 80103c6:	4628      	mov	r0, r5
 80103c8:	f000 f82a 	bl	8010420 <__swsetup_r>
 80103cc:	b118      	cbz	r0, 80103d6 <__swbuf_r+0x32>
 80103ce:	f04f 37ff 	mov.w	r7, #4294967295
 80103d2:	4638      	mov	r0, r7
 80103d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	6922      	ldr	r2, [r4, #16]
 80103da:	1a98      	subs	r0, r3, r2
 80103dc:	6963      	ldr	r3, [r4, #20]
 80103de:	b2f6      	uxtb	r6, r6
 80103e0:	4283      	cmp	r3, r0
 80103e2:	4637      	mov	r7, r6
 80103e4:	dc05      	bgt.n	80103f2 <__swbuf_r+0x4e>
 80103e6:	4621      	mov	r1, r4
 80103e8:	4628      	mov	r0, r5
 80103ea:	f7ff fdf3 	bl	800ffd4 <_fflush_r>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d1ed      	bne.n	80103ce <__swbuf_r+0x2a>
 80103f2:	68a3      	ldr	r3, [r4, #8]
 80103f4:	3b01      	subs	r3, #1
 80103f6:	60a3      	str	r3, [r4, #8]
 80103f8:	6823      	ldr	r3, [r4, #0]
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	6022      	str	r2, [r4, #0]
 80103fe:	701e      	strb	r6, [r3, #0]
 8010400:	6962      	ldr	r2, [r4, #20]
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	429a      	cmp	r2, r3
 8010406:	d004      	beq.n	8010412 <__swbuf_r+0x6e>
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	07db      	lsls	r3, r3, #31
 801040c:	d5e1      	bpl.n	80103d2 <__swbuf_r+0x2e>
 801040e:	2e0a      	cmp	r6, #10
 8010410:	d1df      	bne.n	80103d2 <__swbuf_r+0x2e>
 8010412:	4621      	mov	r1, r4
 8010414:	4628      	mov	r0, r5
 8010416:	f7ff fddd 	bl	800ffd4 <_fflush_r>
 801041a:	2800      	cmp	r0, #0
 801041c:	d0d9      	beq.n	80103d2 <__swbuf_r+0x2e>
 801041e:	e7d6      	b.n	80103ce <__swbuf_r+0x2a>

08010420 <__swsetup_r>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	4b29      	ldr	r3, [pc, #164]	@ (80104c8 <__swsetup_r+0xa8>)
 8010424:	4605      	mov	r5, r0
 8010426:	6818      	ldr	r0, [r3, #0]
 8010428:	460c      	mov	r4, r1
 801042a:	b118      	cbz	r0, 8010434 <__swsetup_r+0x14>
 801042c:	6a03      	ldr	r3, [r0, #32]
 801042e:	b90b      	cbnz	r3, 8010434 <__swsetup_r+0x14>
 8010430:	f7fe fff6 	bl	800f420 <__sinit>
 8010434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010438:	0719      	lsls	r1, r3, #28
 801043a:	d422      	bmi.n	8010482 <__swsetup_r+0x62>
 801043c:	06da      	lsls	r2, r3, #27
 801043e:	d407      	bmi.n	8010450 <__swsetup_r+0x30>
 8010440:	2209      	movs	r2, #9
 8010442:	602a      	str	r2, [r5, #0]
 8010444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010448:	81a3      	strh	r3, [r4, #12]
 801044a:	f04f 30ff 	mov.w	r0, #4294967295
 801044e:	e033      	b.n	80104b8 <__swsetup_r+0x98>
 8010450:	0758      	lsls	r0, r3, #29
 8010452:	d512      	bpl.n	801047a <__swsetup_r+0x5a>
 8010454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010456:	b141      	cbz	r1, 801046a <__swsetup_r+0x4a>
 8010458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801045c:	4299      	cmp	r1, r3
 801045e:	d002      	beq.n	8010466 <__swsetup_r+0x46>
 8010460:	4628      	mov	r0, r5
 8010462:	f7ff f94d 	bl	800f700 <_free_r>
 8010466:	2300      	movs	r3, #0
 8010468:	6363      	str	r3, [r4, #52]	@ 0x34
 801046a:	89a3      	ldrh	r3, [r4, #12]
 801046c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010470:	81a3      	strh	r3, [r4, #12]
 8010472:	2300      	movs	r3, #0
 8010474:	6063      	str	r3, [r4, #4]
 8010476:	6923      	ldr	r3, [r4, #16]
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	89a3      	ldrh	r3, [r4, #12]
 801047c:	f043 0308 	orr.w	r3, r3, #8
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	6923      	ldr	r3, [r4, #16]
 8010484:	b94b      	cbnz	r3, 801049a <__swsetup_r+0x7a>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801048c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010490:	d003      	beq.n	801049a <__swsetup_r+0x7a>
 8010492:	4621      	mov	r1, r4
 8010494:	4628      	mov	r0, r5
 8010496:	f000 f88b 	bl	80105b0 <__smakebuf_r>
 801049a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801049e:	f013 0201 	ands.w	r2, r3, #1
 80104a2:	d00a      	beq.n	80104ba <__swsetup_r+0x9a>
 80104a4:	2200      	movs	r2, #0
 80104a6:	60a2      	str	r2, [r4, #8]
 80104a8:	6962      	ldr	r2, [r4, #20]
 80104aa:	4252      	negs	r2, r2
 80104ac:	61a2      	str	r2, [r4, #24]
 80104ae:	6922      	ldr	r2, [r4, #16]
 80104b0:	b942      	cbnz	r2, 80104c4 <__swsetup_r+0xa4>
 80104b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80104b6:	d1c5      	bne.n	8010444 <__swsetup_r+0x24>
 80104b8:	bd38      	pop	{r3, r4, r5, pc}
 80104ba:	0799      	lsls	r1, r3, #30
 80104bc:	bf58      	it	pl
 80104be:	6962      	ldrpl	r2, [r4, #20]
 80104c0:	60a2      	str	r2, [r4, #8]
 80104c2:	e7f4      	b.n	80104ae <__swsetup_r+0x8e>
 80104c4:	2000      	movs	r0, #0
 80104c6:	e7f7      	b.n	80104b8 <__swsetup_r+0x98>
 80104c8:	24000034 	.word	0x24000034

080104cc <_raise_r>:
 80104cc:	291f      	cmp	r1, #31
 80104ce:	b538      	push	{r3, r4, r5, lr}
 80104d0:	4605      	mov	r5, r0
 80104d2:	460c      	mov	r4, r1
 80104d4:	d904      	bls.n	80104e0 <_raise_r+0x14>
 80104d6:	2316      	movs	r3, #22
 80104d8:	6003      	str	r3, [r0, #0]
 80104da:	f04f 30ff 	mov.w	r0, #4294967295
 80104de:	bd38      	pop	{r3, r4, r5, pc}
 80104e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80104e2:	b112      	cbz	r2, 80104ea <_raise_r+0x1e>
 80104e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104e8:	b94b      	cbnz	r3, 80104fe <_raise_r+0x32>
 80104ea:	4628      	mov	r0, r5
 80104ec:	f000 f830 	bl	8010550 <_getpid_r>
 80104f0:	4622      	mov	r2, r4
 80104f2:	4601      	mov	r1, r0
 80104f4:	4628      	mov	r0, r5
 80104f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104fa:	f000 b817 	b.w	801052c <_kill_r>
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d00a      	beq.n	8010518 <_raise_r+0x4c>
 8010502:	1c59      	adds	r1, r3, #1
 8010504:	d103      	bne.n	801050e <_raise_r+0x42>
 8010506:	2316      	movs	r3, #22
 8010508:	6003      	str	r3, [r0, #0]
 801050a:	2001      	movs	r0, #1
 801050c:	e7e7      	b.n	80104de <_raise_r+0x12>
 801050e:	2100      	movs	r1, #0
 8010510:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010514:	4620      	mov	r0, r4
 8010516:	4798      	blx	r3
 8010518:	2000      	movs	r0, #0
 801051a:	e7e0      	b.n	80104de <_raise_r+0x12>

0801051c <raise>:
 801051c:	4b02      	ldr	r3, [pc, #8]	@ (8010528 <raise+0xc>)
 801051e:	4601      	mov	r1, r0
 8010520:	6818      	ldr	r0, [r3, #0]
 8010522:	f7ff bfd3 	b.w	80104cc <_raise_r>
 8010526:	bf00      	nop
 8010528:	24000034 	.word	0x24000034

0801052c <_kill_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	4d07      	ldr	r5, [pc, #28]	@ (801054c <_kill_r+0x20>)
 8010530:	2300      	movs	r3, #0
 8010532:	4604      	mov	r4, r0
 8010534:	4608      	mov	r0, r1
 8010536:	4611      	mov	r1, r2
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	f7f4 fa11 	bl	8004960 <_kill>
 801053e:	1c43      	adds	r3, r0, #1
 8010540:	d102      	bne.n	8010548 <_kill_r+0x1c>
 8010542:	682b      	ldr	r3, [r5, #0]
 8010544:	b103      	cbz	r3, 8010548 <_kill_r+0x1c>
 8010546:	6023      	str	r3, [r4, #0]
 8010548:	bd38      	pop	{r3, r4, r5, pc}
 801054a:	bf00      	nop
 801054c:	240009f0 	.word	0x240009f0

08010550 <_getpid_r>:
 8010550:	f7f4 b9fe 	b.w	8004950 <_getpid>

08010554 <_malloc_usable_size_r>:
 8010554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010558:	1f18      	subs	r0, r3, #4
 801055a:	2b00      	cmp	r3, #0
 801055c:	bfbc      	itt	lt
 801055e:	580b      	ldrlt	r3, [r1, r0]
 8010560:	18c0      	addlt	r0, r0, r3
 8010562:	4770      	bx	lr

08010564 <__swhatbuf_r>:
 8010564:	b570      	push	{r4, r5, r6, lr}
 8010566:	460c      	mov	r4, r1
 8010568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801056c:	2900      	cmp	r1, #0
 801056e:	b096      	sub	sp, #88	@ 0x58
 8010570:	4615      	mov	r5, r2
 8010572:	461e      	mov	r6, r3
 8010574:	da0d      	bge.n	8010592 <__swhatbuf_r+0x2e>
 8010576:	89a3      	ldrh	r3, [r4, #12]
 8010578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801057c:	f04f 0100 	mov.w	r1, #0
 8010580:	bf14      	ite	ne
 8010582:	2340      	movne	r3, #64	@ 0x40
 8010584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010588:	2000      	movs	r0, #0
 801058a:	6031      	str	r1, [r6, #0]
 801058c:	602b      	str	r3, [r5, #0]
 801058e:	b016      	add	sp, #88	@ 0x58
 8010590:	bd70      	pop	{r4, r5, r6, pc}
 8010592:	466a      	mov	r2, sp
 8010594:	f000 f848 	bl	8010628 <_fstat_r>
 8010598:	2800      	cmp	r0, #0
 801059a:	dbec      	blt.n	8010576 <__swhatbuf_r+0x12>
 801059c:	9901      	ldr	r1, [sp, #4]
 801059e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105a6:	4259      	negs	r1, r3
 80105a8:	4159      	adcs	r1, r3
 80105aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105ae:	e7eb      	b.n	8010588 <__swhatbuf_r+0x24>

080105b0 <__smakebuf_r>:
 80105b0:	898b      	ldrh	r3, [r1, #12]
 80105b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105b4:	079d      	lsls	r5, r3, #30
 80105b6:	4606      	mov	r6, r0
 80105b8:	460c      	mov	r4, r1
 80105ba:	d507      	bpl.n	80105cc <__smakebuf_r+0x1c>
 80105bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	6123      	str	r3, [r4, #16]
 80105c4:	2301      	movs	r3, #1
 80105c6:	6163      	str	r3, [r4, #20]
 80105c8:	b003      	add	sp, #12
 80105ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105cc:	ab01      	add	r3, sp, #4
 80105ce:	466a      	mov	r2, sp
 80105d0:	f7ff ffc8 	bl	8010564 <__swhatbuf_r>
 80105d4:	9f00      	ldr	r7, [sp, #0]
 80105d6:	4605      	mov	r5, r0
 80105d8:	4639      	mov	r1, r7
 80105da:	4630      	mov	r0, r6
 80105dc:	f7ff f904 	bl	800f7e8 <_malloc_r>
 80105e0:	b948      	cbnz	r0, 80105f6 <__smakebuf_r+0x46>
 80105e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105e6:	059a      	lsls	r2, r3, #22
 80105e8:	d4ee      	bmi.n	80105c8 <__smakebuf_r+0x18>
 80105ea:	f023 0303 	bic.w	r3, r3, #3
 80105ee:	f043 0302 	orr.w	r3, r3, #2
 80105f2:	81a3      	strh	r3, [r4, #12]
 80105f4:	e7e2      	b.n	80105bc <__smakebuf_r+0xc>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	6020      	str	r0, [r4, #0]
 80105fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	9b01      	ldr	r3, [sp, #4]
 8010602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010606:	b15b      	cbz	r3, 8010620 <__smakebuf_r+0x70>
 8010608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801060c:	4630      	mov	r0, r6
 801060e:	f000 f81d 	bl	801064c <_isatty_r>
 8010612:	b128      	cbz	r0, 8010620 <__smakebuf_r+0x70>
 8010614:	89a3      	ldrh	r3, [r4, #12]
 8010616:	f023 0303 	bic.w	r3, r3, #3
 801061a:	f043 0301 	orr.w	r3, r3, #1
 801061e:	81a3      	strh	r3, [r4, #12]
 8010620:	89a3      	ldrh	r3, [r4, #12]
 8010622:	431d      	orrs	r5, r3
 8010624:	81a5      	strh	r5, [r4, #12]
 8010626:	e7cf      	b.n	80105c8 <__smakebuf_r+0x18>

08010628 <_fstat_r>:
 8010628:	b538      	push	{r3, r4, r5, lr}
 801062a:	4d07      	ldr	r5, [pc, #28]	@ (8010648 <_fstat_r+0x20>)
 801062c:	2300      	movs	r3, #0
 801062e:	4604      	mov	r4, r0
 8010630:	4608      	mov	r0, r1
 8010632:	4611      	mov	r1, r2
 8010634:	602b      	str	r3, [r5, #0]
 8010636:	f7f4 f9f3 	bl	8004a20 <_fstat>
 801063a:	1c43      	adds	r3, r0, #1
 801063c:	d102      	bne.n	8010644 <_fstat_r+0x1c>
 801063e:	682b      	ldr	r3, [r5, #0]
 8010640:	b103      	cbz	r3, 8010644 <_fstat_r+0x1c>
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	bd38      	pop	{r3, r4, r5, pc}
 8010646:	bf00      	nop
 8010648:	240009f0 	.word	0x240009f0

0801064c <_isatty_r>:
 801064c:	b538      	push	{r3, r4, r5, lr}
 801064e:	4d06      	ldr	r5, [pc, #24]	@ (8010668 <_isatty_r+0x1c>)
 8010650:	2300      	movs	r3, #0
 8010652:	4604      	mov	r4, r0
 8010654:	4608      	mov	r0, r1
 8010656:	602b      	str	r3, [r5, #0]
 8010658:	f7f4 f9f2 	bl	8004a40 <_isatty>
 801065c:	1c43      	adds	r3, r0, #1
 801065e:	d102      	bne.n	8010666 <_isatty_r+0x1a>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	b103      	cbz	r3, 8010666 <_isatty_r+0x1a>
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	bd38      	pop	{r3, r4, r5, pc}
 8010668:	240009f0 	.word	0x240009f0
 801066c:	00000000 	.word	0x00000000

08010670 <cos>:
 8010670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010672:	eeb0 7b40 	vmov.f64	d7, d0
 8010676:	ee17 3a90 	vmov	r3, s15
 801067a:	4a21      	ldr	r2, [pc, #132]	@ (8010700 <cos+0x90>)
 801067c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010680:	4293      	cmp	r3, r2
 8010682:	d806      	bhi.n	8010692 <cos+0x22>
 8010684:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80106f8 <cos+0x88>
 8010688:	b005      	add	sp, #20
 801068a:	f85d eb04 	ldr.w	lr, [sp], #4
 801068e:	f000 b887 	b.w	80107a0 <__kernel_cos>
 8010692:	4a1c      	ldr	r2, [pc, #112]	@ (8010704 <cos+0x94>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d904      	bls.n	80106a2 <cos+0x32>
 8010698:	ee30 0b40 	vsub.f64	d0, d0, d0
 801069c:	b005      	add	sp, #20
 801069e:	f85d fb04 	ldr.w	pc, [sp], #4
 80106a2:	4668      	mov	r0, sp
 80106a4:	f000 f93c 	bl	8010920 <__ieee754_rem_pio2>
 80106a8:	f000 0003 	and.w	r0, r0, #3
 80106ac:	2801      	cmp	r0, #1
 80106ae:	d009      	beq.n	80106c4 <cos+0x54>
 80106b0:	2802      	cmp	r0, #2
 80106b2:	d010      	beq.n	80106d6 <cos+0x66>
 80106b4:	b9b0      	cbnz	r0, 80106e4 <cos+0x74>
 80106b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106ba:	ed9d 0b00 	vldr	d0, [sp]
 80106be:	f000 f86f 	bl	80107a0 <__kernel_cos>
 80106c2:	e7eb      	b.n	801069c <cos+0x2c>
 80106c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106c8:	ed9d 0b00 	vldr	d0, [sp]
 80106cc:	f000 f8d0 	bl	8010870 <__kernel_sin>
 80106d0:	eeb1 0b40 	vneg.f64	d0, d0
 80106d4:	e7e2      	b.n	801069c <cos+0x2c>
 80106d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106da:	ed9d 0b00 	vldr	d0, [sp]
 80106de:	f000 f85f 	bl	80107a0 <__kernel_cos>
 80106e2:	e7f5      	b.n	80106d0 <cos+0x60>
 80106e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106e8:	ed9d 0b00 	vldr	d0, [sp]
 80106ec:	2001      	movs	r0, #1
 80106ee:	f000 f8bf 	bl	8010870 <__kernel_sin>
 80106f2:	e7d3      	b.n	801069c <cos+0x2c>
 80106f4:	f3af 8000 	nop.w
	...
 8010700:	3fe921fb 	.word	0x3fe921fb
 8010704:	7fefffff 	.word	0x7fefffff

08010708 <sin>:
 8010708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801070a:	eeb0 7b40 	vmov.f64	d7, d0
 801070e:	ee17 3a90 	vmov	r3, s15
 8010712:	4a21      	ldr	r2, [pc, #132]	@ (8010798 <sin+0x90>)
 8010714:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010718:	4293      	cmp	r3, r2
 801071a:	d807      	bhi.n	801072c <sin+0x24>
 801071c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8010790 <sin+0x88>
 8010720:	2000      	movs	r0, #0
 8010722:	b005      	add	sp, #20
 8010724:	f85d eb04 	ldr.w	lr, [sp], #4
 8010728:	f000 b8a2 	b.w	8010870 <__kernel_sin>
 801072c:	4a1b      	ldr	r2, [pc, #108]	@ (801079c <sin+0x94>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d904      	bls.n	801073c <sin+0x34>
 8010732:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010736:	b005      	add	sp, #20
 8010738:	f85d fb04 	ldr.w	pc, [sp], #4
 801073c:	4668      	mov	r0, sp
 801073e:	f000 f8ef 	bl	8010920 <__ieee754_rem_pio2>
 8010742:	f000 0003 	and.w	r0, r0, #3
 8010746:	2801      	cmp	r0, #1
 8010748:	d00a      	beq.n	8010760 <sin+0x58>
 801074a:	2802      	cmp	r0, #2
 801074c:	d00f      	beq.n	801076e <sin+0x66>
 801074e:	b9c0      	cbnz	r0, 8010782 <sin+0x7a>
 8010750:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010754:	ed9d 0b00 	vldr	d0, [sp]
 8010758:	2001      	movs	r0, #1
 801075a:	f000 f889 	bl	8010870 <__kernel_sin>
 801075e:	e7ea      	b.n	8010736 <sin+0x2e>
 8010760:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010764:	ed9d 0b00 	vldr	d0, [sp]
 8010768:	f000 f81a 	bl	80107a0 <__kernel_cos>
 801076c:	e7e3      	b.n	8010736 <sin+0x2e>
 801076e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010772:	ed9d 0b00 	vldr	d0, [sp]
 8010776:	2001      	movs	r0, #1
 8010778:	f000 f87a 	bl	8010870 <__kernel_sin>
 801077c:	eeb1 0b40 	vneg.f64	d0, d0
 8010780:	e7d9      	b.n	8010736 <sin+0x2e>
 8010782:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010786:	ed9d 0b00 	vldr	d0, [sp]
 801078a:	f000 f809 	bl	80107a0 <__kernel_cos>
 801078e:	e7f5      	b.n	801077c <sin+0x74>
	...
 8010798:	3fe921fb 	.word	0x3fe921fb
 801079c:	7fefffff 	.word	0x7fefffff

080107a0 <__kernel_cos>:
 80107a0:	eeb0 5b40 	vmov.f64	d5, d0
 80107a4:	ee15 1a90 	vmov	r1, s11
 80107a8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80107ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80107b0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80107b4:	d204      	bcs.n	80107c0 <__kernel_cos+0x20>
 80107b6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80107ba:	ee17 3a90 	vmov	r3, s15
 80107be:	b343      	cbz	r3, 8010812 <__kernel_cos+0x72>
 80107c0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80107c4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80107c8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8010838 <__kernel_cos+0x98>
 80107cc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010840 <__kernel_cos+0xa0>
 80107d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80107d4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010848 <__kernel_cos+0xa8>
 80107d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80107dc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010850 <__kernel_cos+0xb0>
 80107e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80107e4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010858 <__kernel_cos+0xb8>
 80107e8:	4b1f      	ldr	r3, [pc, #124]	@ (8010868 <__kernel_cos+0xc8>)
 80107ea:	eea4 7b06 	vfma.f64	d7, d4, d6
 80107ee:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010860 <__kernel_cos+0xc0>
 80107f2:	4299      	cmp	r1, r3
 80107f4:	eea7 4b06 	vfma.f64	d4, d7, d6
 80107f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80107fc:	ee24 4b06 	vmul.f64	d4, d4, d6
 8010800:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010804:	eea6 1b04 	vfma.f64	d1, d6, d4
 8010808:	d804      	bhi.n	8010814 <__kernel_cos+0x74>
 801080a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801080e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010812:	4770      	bx	lr
 8010814:	4b15      	ldr	r3, [pc, #84]	@ (801086c <__kernel_cos+0xcc>)
 8010816:	4299      	cmp	r1, r3
 8010818:	d809      	bhi.n	801082e <__kernel_cos+0x8e>
 801081a:	2200      	movs	r2, #0
 801081c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8010820:	ec43 2b16 	vmov	d6, r2, r3
 8010824:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010828:	ee37 7b46 	vsub.f64	d7, d7, d6
 801082c:	e7ed      	b.n	801080a <__kernel_cos+0x6a>
 801082e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8010832:	e7f7      	b.n	8010824 <__kernel_cos+0x84>
 8010834:	f3af 8000 	nop.w
 8010838:	be8838d4 	.word	0xbe8838d4
 801083c:	bda8fae9 	.word	0xbda8fae9
 8010840:	bdb4b1c4 	.word	0xbdb4b1c4
 8010844:	3e21ee9e 	.word	0x3e21ee9e
 8010848:	809c52ad 	.word	0x809c52ad
 801084c:	be927e4f 	.word	0xbe927e4f
 8010850:	19cb1590 	.word	0x19cb1590
 8010854:	3efa01a0 	.word	0x3efa01a0
 8010858:	16c15177 	.word	0x16c15177
 801085c:	bf56c16c 	.word	0xbf56c16c
 8010860:	5555554c 	.word	0x5555554c
 8010864:	3fa55555 	.word	0x3fa55555
 8010868:	3fd33332 	.word	0x3fd33332
 801086c:	3fe90000 	.word	0x3fe90000

08010870 <__kernel_sin>:
 8010870:	ee10 3a90 	vmov	r3, s1
 8010874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010878:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801087c:	d204      	bcs.n	8010888 <__kernel_sin+0x18>
 801087e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010882:	ee17 3a90 	vmov	r3, s15
 8010886:	b35b      	cbz	r3, 80108e0 <__kernel_sin+0x70>
 8010888:	ee20 6b00 	vmul.f64	d6, d0, d0
 801088c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010890:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80108e8 <__kernel_sin+0x78>
 8010894:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80108f0 <__kernel_sin+0x80>
 8010898:	eea6 4b07 	vfma.f64	d4, d6, d7
 801089c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80108f8 <__kernel_sin+0x88>
 80108a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80108a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8010900 <__kernel_sin+0x90>
 80108a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80108ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8010908 <__kernel_sin+0x98>
 80108b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80108b4:	b930      	cbnz	r0, 80108c4 <__kernel_sin+0x54>
 80108b6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8010910 <__kernel_sin+0xa0>
 80108ba:	eea6 4b07 	vfma.f64	d4, d6, d7
 80108be:	eea4 0b05 	vfma.f64	d0, d4, d5
 80108c2:	4770      	bx	lr
 80108c4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80108c8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80108cc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80108d0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80108d4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8010918 <__kernel_sin+0xa8>
 80108d8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80108dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	f3af 8000 	nop.w
 80108e8:	5acfd57c 	.word	0x5acfd57c
 80108ec:	3de5d93a 	.word	0x3de5d93a
 80108f0:	8a2b9ceb 	.word	0x8a2b9ceb
 80108f4:	be5ae5e6 	.word	0xbe5ae5e6
 80108f8:	57b1fe7d 	.word	0x57b1fe7d
 80108fc:	3ec71de3 	.word	0x3ec71de3
 8010900:	19c161d5 	.word	0x19c161d5
 8010904:	bf2a01a0 	.word	0xbf2a01a0
 8010908:	1110f8a6 	.word	0x1110f8a6
 801090c:	3f811111 	.word	0x3f811111
 8010910:	55555549 	.word	0x55555549
 8010914:	bfc55555 	.word	0xbfc55555
 8010918:	55555549 	.word	0x55555549
 801091c:	3fc55555 	.word	0x3fc55555

08010920 <__ieee754_rem_pio2>:
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	eeb0 7b40 	vmov.f64	d7, d0
 8010926:	ee17 5a90 	vmov	r5, s15
 801092a:	4b99      	ldr	r3, [pc, #612]	@ (8010b90 <__ieee754_rem_pio2+0x270>)
 801092c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010930:	429e      	cmp	r6, r3
 8010932:	b088      	sub	sp, #32
 8010934:	4604      	mov	r4, r0
 8010936:	d807      	bhi.n	8010948 <__ieee754_rem_pio2+0x28>
 8010938:	2200      	movs	r2, #0
 801093a:	2300      	movs	r3, #0
 801093c:	ed84 0b00 	vstr	d0, [r4]
 8010940:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010944:	2000      	movs	r0, #0
 8010946:	e01b      	b.n	8010980 <__ieee754_rem_pio2+0x60>
 8010948:	4b92      	ldr	r3, [pc, #584]	@ (8010b94 <__ieee754_rem_pio2+0x274>)
 801094a:	429e      	cmp	r6, r3
 801094c:	d83b      	bhi.n	80109c6 <__ieee754_rem_pio2+0xa6>
 801094e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8010952:	2d00      	cmp	r5, #0
 8010954:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8010b50 <__ieee754_rem_pio2+0x230>
 8010958:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801095c:	dd19      	ble.n	8010992 <__ieee754_rem_pio2+0x72>
 801095e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010962:	429e      	cmp	r6, r3
 8010964:	d00e      	beq.n	8010984 <__ieee754_rem_pio2+0x64>
 8010966:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8010b58 <__ieee754_rem_pio2+0x238>
 801096a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801096e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010972:	ed84 6b00 	vstr	d6, [r4]
 8010976:	ee37 7b45 	vsub.f64	d7, d7, d5
 801097a:	ed84 7b02 	vstr	d7, [r4, #8]
 801097e:	2001      	movs	r0, #1
 8010980:	b008      	add	sp, #32
 8010982:	bd70      	pop	{r4, r5, r6, pc}
 8010984:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8010b60 <__ieee754_rem_pio2+0x240>
 8010988:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8010b68 <__ieee754_rem_pio2+0x248>
 801098c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010990:	e7eb      	b.n	801096a <__ieee754_rem_pio2+0x4a>
 8010992:	429e      	cmp	r6, r3
 8010994:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010998:	d00e      	beq.n	80109b8 <__ieee754_rem_pio2+0x98>
 801099a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8010b58 <__ieee754_rem_pio2+0x238>
 801099e:	ee37 6b05 	vadd.f64	d6, d7, d5
 80109a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80109a6:	ed84 6b00 	vstr	d6, [r4]
 80109aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 80109ae:	f04f 30ff 	mov.w	r0, #4294967295
 80109b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80109b6:	e7e3      	b.n	8010980 <__ieee754_rem_pio2+0x60>
 80109b8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8010b60 <__ieee754_rem_pio2+0x240>
 80109bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8010b68 <__ieee754_rem_pio2+0x248>
 80109c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80109c4:	e7eb      	b.n	801099e <__ieee754_rem_pio2+0x7e>
 80109c6:	4b74      	ldr	r3, [pc, #464]	@ (8010b98 <__ieee754_rem_pio2+0x278>)
 80109c8:	429e      	cmp	r6, r3
 80109ca:	d870      	bhi.n	8010aae <__ieee754_rem_pio2+0x18e>
 80109cc:	f000 f8ec 	bl	8010ba8 <fabs>
 80109d0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80109d4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010b70 <__ieee754_rem_pio2+0x250>
 80109d8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80109dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80109e0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80109e4:	ee17 0a90 	vmov	r0, s15
 80109e8:	eeb1 4b45 	vneg.f64	d4, d5
 80109ec:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8010b50 <__ieee754_rem_pio2+0x230>
 80109f0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80109f4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8010b58 <__ieee754_rem_pio2+0x238>
 80109f8:	281f      	cmp	r0, #31
 80109fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80109fe:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010a02:	dc05      	bgt.n	8010a10 <__ieee754_rem_pio2+0xf0>
 8010a04:	4b65      	ldr	r3, [pc, #404]	@ (8010b9c <__ieee754_rem_pio2+0x27c>)
 8010a06:	1e42      	subs	r2, r0, #1
 8010a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a0c:	42b3      	cmp	r3, r6
 8010a0e:	d109      	bne.n	8010a24 <__ieee754_rem_pio2+0x104>
 8010a10:	ee16 3a90 	vmov	r3, s13
 8010a14:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010a18:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010a1c:	2b10      	cmp	r3, #16
 8010a1e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010a22:	dc02      	bgt.n	8010a2a <__ieee754_rem_pio2+0x10a>
 8010a24:	ed84 6b00 	vstr	d6, [r4]
 8010a28:	e01a      	b.n	8010a60 <__ieee754_rem_pio2+0x140>
 8010a2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8010b60 <__ieee754_rem_pio2+0x240>
 8010a2e:	eeb0 6b40 	vmov.f64	d6, d0
 8010a32:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010a36:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010a3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010a3e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8010b68 <__ieee754_rem_pio2+0x248>
 8010a42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010a46:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010a4a:	ee13 3a90 	vmov	r3, s7
 8010a4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	2b31      	cmp	r3, #49	@ 0x31
 8010a56:	dc17      	bgt.n	8010a88 <__ieee754_rem_pio2+0x168>
 8010a58:	eeb0 0b46 	vmov.f64	d0, d6
 8010a5c:	ed84 3b00 	vstr	d3, [r4]
 8010a60:	ed94 6b00 	vldr	d6, [r4]
 8010a64:	2d00      	cmp	r5, #0
 8010a66:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010a6a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010a6e:	ed84 0b02 	vstr	d0, [r4, #8]
 8010a72:	da85      	bge.n	8010980 <__ieee754_rem_pio2+0x60>
 8010a74:	eeb1 6b46 	vneg.f64	d6, d6
 8010a78:	eeb1 0b40 	vneg.f64	d0, d0
 8010a7c:	ed84 6b00 	vstr	d6, [r4]
 8010a80:	ed84 0b02 	vstr	d0, [r4, #8]
 8010a84:	4240      	negs	r0, r0
 8010a86:	e77b      	b.n	8010980 <__ieee754_rem_pio2+0x60>
 8010a88:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8010b78 <__ieee754_rem_pio2+0x258>
 8010a8c:	eeb0 0b46 	vmov.f64	d0, d6
 8010a90:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010a94:	ee36 6b40 	vsub.f64	d6, d6, d0
 8010a98:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010a9c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8010b80 <__ieee754_rem_pio2+0x260>
 8010aa0:	eeb0 7b46 	vmov.f64	d7, d6
 8010aa4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8010aa8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010aac:	e7ba      	b.n	8010a24 <__ieee754_rem_pio2+0x104>
 8010aae:	4b3c      	ldr	r3, [pc, #240]	@ (8010ba0 <__ieee754_rem_pio2+0x280>)
 8010ab0:	429e      	cmp	r6, r3
 8010ab2:	d906      	bls.n	8010ac2 <__ieee754_rem_pio2+0x1a2>
 8010ab4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010ab8:	ed80 7b02 	vstr	d7, [r0, #8]
 8010abc:	ed80 7b00 	vstr	d7, [r0]
 8010ac0:	e740      	b.n	8010944 <__ieee754_rem_pio2+0x24>
 8010ac2:	ee10 3a10 	vmov	r3, s0
 8010ac6:	1532      	asrs	r2, r6, #20
 8010ac8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8010acc:	4618      	mov	r0, r3
 8010ace:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010ad2:	ec41 0b17 	vmov	d7, r0, r1
 8010ad6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010ada:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8010b88 <__ieee754_rem_pio2+0x268>
 8010ade:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ae2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ae6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010aea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010aee:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010af2:	a808      	add	r0, sp, #32
 8010af4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010af8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010afc:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010b00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b08:	2103      	movs	r1, #3
 8010b0a:	ed30 7b02 	vldmdb	r0!, {d7}
 8010b0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b16:	460b      	mov	r3, r1
 8010b18:	f101 31ff 	add.w	r1, r1, #4294967295
 8010b1c:	d0f5      	beq.n	8010b0a <__ieee754_rem_pio2+0x1ea>
 8010b1e:	4921      	ldr	r1, [pc, #132]	@ (8010ba4 <__ieee754_rem_pio2+0x284>)
 8010b20:	9101      	str	r1, [sp, #4]
 8010b22:	2102      	movs	r1, #2
 8010b24:	9100      	str	r1, [sp, #0]
 8010b26:	a802      	add	r0, sp, #8
 8010b28:	4621      	mov	r1, r4
 8010b2a:	f000 f845 	bl	8010bb8 <__kernel_rem_pio2>
 8010b2e:	2d00      	cmp	r5, #0
 8010b30:	f6bf af26 	bge.w	8010980 <__ieee754_rem_pio2+0x60>
 8010b34:	ed94 7b00 	vldr	d7, [r4]
 8010b38:	eeb1 7b47 	vneg.f64	d7, d7
 8010b3c:	ed84 7b00 	vstr	d7, [r4]
 8010b40:	ed94 7b02 	vldr	d7, [r4, #8]
 8010b44:	eeb1 7b47 	vneg.f64	d7, d7
 8010b48:	ed84 7b02 	vstr	d7, [r4, #8]
 8010b4c:	e79a      	b.n	8010a84 <__ieee754_rem_pio2+0x164>
 8010b4e:	bf00      	nop
 8010b50:	54400000 	.word	0x54400000
 8010b54:	3ff921fb 	.word	0x3ff921fb
 8010b58:	1a626331 	.word	0x1a626331
 8010b5c:	3dd0b461 	.word	0x3dd0b461
 8010b60:	1a600000 	.word	0x1a600000
 8010b64:	3dd0b461 	.word	0x3dd0b461
 8010b68:	2e037073 	.word	0x2e037073
 8010b6c:	3ba3198a 	.word	0x3ba3198a
 8010b70:	6dc9c883 	.word	0x6dc9c883
 8010b74:	3fe45f30 	.word	0x3fe45f30
 8010b78:	2e000000 	.word	0x2e000000
 8010b7c:	3ba3198a 	.word	0x3ba3198a
 8010b80:	252049c1 	.word	0x252049c1
 8010b84:	397b839a 	.word	0x397b839a
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	41700000 	.word	0x41700000
 8010b90:	3fe921fb 	.word	0x3fe921fb
 8010b94:	4002d97b 	.word	0x4002d97b
 8010b98:	413921fb 	.word	0x413921fb
 8010b9c:	080115c8 	.word	0x080115c8
 8010ba0:	7fefffff 	.word	0x7fefffff
 8010ba4:	08011648 	.word	0x08011648

08010ba8 <fabs>:
 8010ba8:	ec51 0b10 	vmov	r0, r1, d0
 8010bac:	4602      	mov	r2, r0
 8010bae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010bb2:	ec43 2b10 	vmov	d0, r2, r3
 8010bb6:	4770      	bx	lr

08010bb8 <__kernel_rem_pio2>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	ed2d 8b06 	vpush	{d8-d10}
 8010bc0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8010bc4:	469b      	mov	fp, r3
 8010bc6:	9001      	str	r0, [sp, #4]
 8010bc8:	4bbb      	ldr	r3, [pc, #748]	@ (8010eb8 <__kernel_rem_pio2+0x300>)
 8010bca:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8010bcc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8010bd0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8010bd4:	f112 0f14 	cmn.w	r2, #20
 8010bd8:	bfa8      	it	ge
 8010bda:	1ed3      	subge	r3, r2, #3
 8010bdc:	f10b 3aff 	add.w	sl, fp, #4294967295
 8010be0:	bfb8      	it	lt
 8010be2:	2300      	movlt	r3, #0
 8010be4:	f06f 0517 	mvn.w	r5, #23
 8010be8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8010ea0 <__kernel_rem_pio2+0x2e8>
 8010bec:	bfa4      	itt	ge
 8010bee:	2018      	movge	r0, #24
 8010bf0:	fb93 f3f0 	sdivge	r3, r3, r0
 8010bf4:	fb03 5505 	mla	r5, r3, r5, r5
 8010bf8:	eba3 040a 	sub.w	r4, r3, sl
 8010bfc:	4415      	add	r5, r2
 8010bfe:	460f      	mov	r7, r1
 8010c00:	eb09 060a 	add.w	r6, r9, sl
 8010c04:	a81a      	add	r0, sp, #104	@ 0x68
 8010c06:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	42b2      	cmp	r2, r6
 8010c0e:	dd0e      	ble.n	8010c2e <__kernel_rem_pio2+0x76>
 8010c10:	aa1a      	add	r2, sp, #104	@ 0x68
 8010c12:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010c16:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8010c1a:	2600      	movs	r6, #0
 8010c1c:	454e      	cmp	r6, r9
 8010c1e:	dc25      	bgt.n	8010c6c <__kernel_rem_pio2+0xb4>
 8010c20:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8010ea0 <__kernel_rem_pio2+0x2e8>
 8010c24:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010c28:	4614      	mov	r4, r2
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e015      	b.n	8010c5a <__kernel_rem_pio2+0xa2>
 8010c2e:	42d4      	cmn	r4, r2
 8010c30:	d409      	bmi.n	8010c46 <__kernel_rem_pio2+0x8e>
 8010c32:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8010c36:	ee07 1a90 	vmov	s15, r1
 8010c3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c3e:	eca0 7b02 	vstmia	r0!, {d7}
 8010c42:	3201      	adds	r2, #1
 8010c44:	e7e2      	b.n	8010c0c <__kernel_rem_pio2+0x54>
 8010c46:	eeb0 7b46 	vmov.f64	d7, d6
 8010c4a:	e7f8      	b.n	8010c3e <__kernel_rem_pio2+0x86>
 8010c4c:	ecbc 5b02 	vldmia	ip!, {d5}
 8010c50:	ed94 6b00 	vldr	d6, [r4]
 8010c54:	3001      	adds	r0, #1
 8010c56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c5a:	4550      	cmp	r0, sl
 8010c5c:	f1a4 0408 	sub.w	r4, r4, #8
 8010c60:	ddf4      	ble.n	8010c4c <__kernel_rem_pio2+0x94>
 8010c62:	ecae 7b02 	vstmia	lr!, {d7}
 8010c66:	3601      	adds	r6, #1
 8010c68:	3208      	adds	r2, #8
 8010c6a:	e7d7      	b.n	8010c1c <__kernel_rem_pio2+0x64>
 8010c6c:	aa06      	add	r2, sp, #24
 8010c6e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8010ea8 <__kernel_rem_pio2+0x2f0>
 8010c72:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8010eb0 <__kernel_rem_pio2+0x2f8>
 8010c76:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010c7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010c7e:	9203      	str	r2, [sp, #12]
 8010c80:	9302      	str	r3, [sp, #8]
 8010c82:	464c      	mov	r4, r9
 8010c84:	00e3      	lsls	r3, r4, #3
 8010c86:	9304      	str	r3, [sp, #16]
 8010c88:	ab92      	add	r3, sp, #584	@ 0x248
 8010c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c8e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8010c92:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8010c94:	ab06      	add	r3, sp, #24
 8010c96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010c9a:	461e      	mov	r6, r3
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f1a2 0208 	sub.w	r2, r2, #8
 8010ca4:	dc4a      	bgt.n	8010d3c <__kernel_rem_pio2+0x184>
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	9305      	str	r3, [sp, #20]
 8010caa:	f000 fa01 	bl	80110b0 <scalbn>
 8010cae:	eeb0 8b40 	vmov.f64	d8, d0
 8010cb2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8010cb6:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010cba:	f000 fa79 	bl	80111b0 <floor>
 8010cbe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8010cc2:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010cc6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010cca:	2d00      	cmp	r5, #0
 8010ccc:	ee17 8a90 	vmov	r8, s15
 8010cd0:	9b05      	ldr	r3, [sp, #20]
 8010cd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cd6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010cda:	dd41      	ble.n	8010d60 <__kernel_rem_pio2+0x1a8>
 8010cdc:	1e60      	subs	r0, r4, #1
 8010cde:	aa06      	add	r2, sp, #24
 8010ce0:	f1c5 0c18 	rsb	ip, r5, #24
 8010ce4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8010ce8:	fa46 f20c 	asr.w	r2, r6, ip
 8010cec:	4490      	add	r8, r2
 8010cee:	fa02 f20c 	lsl.w	r2, r2, ip
 8010cf2:	1ab6      	subs	r6, r6, r2
 8010cf4:	aa06      	add	r2, sp, #24
 8010cf6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8010cfa:	f1c5 0217 	rsb	r2, r5, #23
 8010cfe:	4116      	asrs	r6, r2
 8010d00:	2e00      	cmp	r6, #0
 8010d02:	dd3c      	ble.n	8010d7e <__kernel_rem_pio2+0x1c6>
 8010d04:	f04f 0c00 	mov.w	ip, #0
 8010d08:	f108 0801 	add.w	r8, r8, #1
 8010d0c:	4660      	mov	r0, ip
 8010d0e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8010d12:	4564      	cmp	r4, ip
 8010d14:	dc66      	bgt.n	8010de4 <__kernel_rem_pio2+0x22c>
 8010d16:	2d00      	cmp	r5, #0
 8010d18:	dd03      	ble.n	8010d22 <__kernel_rem_pio2+0x16a>
 8010d1a:	2d01      	cmp	r5, #1
 8010d1c:	d072      	beq.n	8010e04 <__kernel_rem_pio2+0x24c>
 8010d1e:	2d02      	cmp	r5, #2
 8010d20:	d07a      	beq.n	8010e18 <__kernel_rem_pio2+0x260>
 8010d22:	2e02      	cmp	r6, #2
 8010d24:	d12b      	bne.n	8010d7e <__kernel_rem_pio2+0x1c6>
 8010d26:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010d2a:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010d2e:	b330      	cbz	r0, 8010d7e <__kernel_rem_pio2+0x1c6>
 8010d30:	4628      	mov	r0, r5
 8010d32:	f000 f9bd 	bl	80110b0 <scalbn>
 8010d36:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010d3a:	e020      	b.n	8010d7e <__kernel_rem_pio2+0x1c6>
 8010d3c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010d40:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010d44:	3801      	subs	r0, #1
 8010d46:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010d4a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010d4e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010d52:	eca6 0a01 	vstmia	r6!, {s0}
 8010d56:	ed92 0b00 	vldr	d0, [r2]
 8010d5a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010d5e:	e79e      	b.n	8010c9e <__kernel_rem_pio2+0xe6>
 8010d60:	d105      	bne.n	8010d6e <__kernel_rem_pio2+0x1b6>
 8010d62:	1e62      	subs	r2, r4, #1
 8010d64:	a906      	add	r1, sp, #24
 8010d66:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8010d6a:	15f6      	asrs	r6, r6, #23
 8010d6c:	e7c8      	b.n	8010d00 <__kernel_rem_pio2+0x148>
 8010d6e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8010d72:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7a:	da31      	bge.n	8010de0 <__kernel_rem_pio2+0x228>
 8010d7c:	2600      	movs	r6, #0
 8010d7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d86:	f040 809b 	bne.w	8010ec0 <__kernel_rem_pio2+0x308>
 8010d8a:	1e62      	subs	r2, r4, #1
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	454a      	cmp	r2, r9
 8010d90:	da49      	bge.n	8010e26 <__kernel_rem_pio2+0x26e>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d062      	beq.n	8010e5c <__kernel_rem_pio2+0x2a4>
 8010d96:	3c01      	subs	r4, #1
 8010d98:	ab06      	add	r3, sp, #24
 8010d9a:	3d18      	subs	r5, #24
 8010d9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d0f8      	beq.n	8010d96 <__kernel_rem_pio2+0x1de>
 8010da4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010da8:	4628      	mov	r0, r5
 8010daa:	f000 f981 	bl	80110b0 <scalbn>
 8010dae:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8010ea8 <__kernel_rem_pio2+0x2f0>
 8010db2:	1c62      	adds	r2, r4, #1
 8010db4:	a96a      	add	r1, sp, #424	@ 0x1a8
 8010db6:	00d3      	lsls	r3, r2, #3
 8010db8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010dbc:	4622      	mov	r2, r4
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	f280 80a8 	bge.w	8010f14 <__kernel_rem_pio2+0x35c>
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	f2c0 80c6 	blt.w	8010f58 <__kernel_rem_pio2+0x3a0>
 8010dcc:	a96a      	add	r1, sp, #424	@ 0x1a8
 8010dce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010dd2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8010ea0 <__kernel_rem_pio2+0x2e8>
 8010dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8010ebc <__kernel_rem_pio2+0x304>
 8010dda:	2000      	movs	r0, #0
 8010ddc:	1aa1      	subs	r1, r4, r2
 8010dde:	e0b0      	b.n	8010f42 <__kernel_rem_pio2+0x38a>
 8010de0:	2602      	movs	r6, #2
 8010de2:	e78f      	b.n	8010d04 <__kernel_rem_pio2+0x14c>
 8010de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010de8:	b948      	cbnz	r0, 8010dfe <__kernel_rem_pio2+0x246>
 8010dea:	b122      	cbz	r2, 8010df6 <__kernel_rem_pio2+0x23e>
 8010dec:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8010df0:	f843 2c04 	str.w	r2, [r3, #-4]
 8010df4:	2201      	movs	r2, #1
 8010df6:	f10c 0c01 	add.w	ip, ip, #1
 8010dfa:	4610      	mov	r0, r2
 8010dfc:	e789      	b.n	8010d12 <__kernel_rem_pio2+0x15a>
 8010dfe:	ebae 0202 	sub.w	r2, lr, r2
 8010e02:	e7f5      	b.n	8010df0 <__kernel_rem_pio2+0x238>
 8010e04:	1e62      	subs	r2, r4, #1
 8010e06:	ab06      	add	r3, sp, #24
 8010e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010e10:	a906      	add	r1, sp, #24
 8010e12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010e16:	e784      	b.n	8010d22 <__kernel_rem_pio2+0x16a>
 8010e18:	1e62      	subs	r2, r4, #1
 8010e1a:	ab06      	add	r3, sp, #24
 8010e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010e24:	e7f4      	b.n	8010e10 <__kernel_rem_pio2+0x258>
 8010e26:	ab06      	add	r3, sp, #24
 8010e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e2c:	3a01      	subs	r2, #1
 8010e2e:	4318      	orrs	r0, r3
 8010e30:	e7ad      	b.n	8010d8e <__kernel_rem_pio2+0x1d6>
 8010e32:	3301      	adds	r3, #1
 8010e34:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d0fa      	beq.n	8010e32 <__kernel_rem_pio2+0x27a>
 8010e3c:	9a04      	ldr	r2, [sp, #16]
 8010e3e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8010e42:	446a      	add	r2, sp
 8010e44:	eb04 000b 	add.w	r0, r4, fp
 8010e48:	a91a      	add	r1, sp, #104	@ 0x68
 8010e4a:	1c66      	adds	r6, r4, #1
 8010e4c:	3a98      	subs	r2, #152	@ 0x98
 8010e4e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8010e52:	4423      	add	r3, r4
 8010e54:	42b3      	cmp	r3, r6
 8010e56:	da04      	bge.n	8010e62 <__kernel_rem_pio2+0x2aa>
 8010e58:	461c      	mov	r4, r3
 8010e5a:	e713      	b.n	8010c84 <__kernel_rem_pio2+0xcc>
 8010e5c:	9a03      	ldr	r2, [sp, #12]
 8010e5e:	2301      	movs	r3, #1
 8010e60:	e7e8      	b.n	8010e34 <__kernel_rem_pio2+0x27c>
 8010e62:	9902      	ldr	r1, [sp, #8]
 8010e64:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010e68:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8010e6c:	9104      	str	r1, [sp, #16]
 8010e6e:	ee07 1a90 	vmov	s15, r1
 8010e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e76:	2400      	movs	r4, #0
 8010e78:	eca0 7b02 	vstmia	r0!, {d7}
 8010e7c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010ea0 <__kernel_rem_pio2+0x2e8>
 8010e80:	4686      	mov	lr, r0
 8010e82:	4554      	cmp	r4, sl
 8010e84:	dd03      	ble.n	8010e8e <__kernel_rem_pio2+0x2d6>
 8010e86:	eca2 7b02 	vstmia	r2!, {d7}
 8010e8a:	3601      	adds	r6, #1
 8010e8c:	e7e2      	b.n	8010e54 <__kernel_rem_pio2+0x29c>
 8010e8e:	ecbc 5b02 	vldmia	ip!, {d5}
 8010e92:	ed3e 6b02 	vldmdb	lr!, {d6}
 8010e96:	3401      	adds	r4, #1
 8010e98:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010e9c:	e7f1      	b.n	8010e82 <__kernel_rem_pio2+0x2ca>
 8010e9e:	bf00      	nop
	...
 8010eac:	3e700000 	.word	0x3e700000
 8010eb0:	00000000 	.word	0x00000000
 8010eb4:	41700000 	.word	0x41700000
 8010eb8:	08011790 	.word	0x08011790
 8010ebc:	08011750 	.word	0x08011750
 8010ec0:	4268      	negs	r0, r5
 8010ec2:	eeb0 0b48 	vmov.f64	d0, d8
 8010ec6:	f000 f8f3 	bl	80110b0 <scalbn>
 8010eca:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8011098 <__kernel_rem_pio2+0x4e0>
 8010ece:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed6:	db17      	blt.n	8010f08 <__kernel_rem_pio2+0x350>
 8010ed8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80110a0 <__kernel_rem_pio2+0x4e8>
 8010edc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ee0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010ee4:	aa06      	add	r2, sp, #24
 8010ee6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010eea:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010eee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010ef2:	3518      	adds	r5, #24
 8010ef4:	ee10 3a10 	vmov	r3, s0
 8010ef8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010efc:	ee17 3a10 	vmov	r3, s14
 8010f00:	3401      	adds	r4, #1
 8010f02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010f06:	e74d      	b.n	8010da4 <__kernel_rem_pio2+0x1ec>
 8010f08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010f0c:	aa06      	add	r2, sp, #24
 8010f0e:	ee10 3a10 	vmov	r3, s0
 8010f12:	e7f6      	b.n	8010f02 <__kernel_rem_pio2+0x34a>
 8010f14:	a806      	add	r0, sp, #24
 8010f16:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010f1a:	9001      	str	r0, [sp, #4]
 8010f1c:	ee07 0a90 	vmov	s15, r0
 8010f20:	3a01      	subs	r2, #1
 8010f22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f26:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010f2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010f2e:	ed21 7b02 	vstmdb	r1!, {d7}
 8010f32:	e744      	b.n	8010dbe <__kernel_rem_pio2+0x206>
 8010f34:	ecbc 5b02 	vldmia	ip!, {d5}
 8010f38:	ecb5 6b02 	vldmia	r5!, {d6}
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f42:	4548      	cmp	r0, r9
 8010f44:	dc01      	bgt.n	8010f4a <__kernel_rem_pio2+0x392>
 8010f46:	4281      	cmp	r1, r0
 8010f48:	daf4      	bge.n	8010f34 <__kernel_rem_pio2+0x37c>
 8010f4a:	a842      	add	r0, sp, #264	@ 0x108
 8010f4c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010f50:	ed81 7b00 	vstr	d7, [r1]
 8010f54:	3a01      	subs	r2, #1
 8010f56:	e736      	b.n	8010dc6 <__kernel_rem_pio2+0x20e>
 8010f58:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010f5a:	2a02      	cmp	r2, #2
 8010f5c:	dc0a      	bgt.n	8010f74 <__kernel_rem_pio2+0x3bc>
 8010f5e:	2a00      	cmp	r2, #0
 8010f60:	dc2d      	bgt.n	8010fbe <__kernel_rem_pio2+0x406>
 8010f62:	d046      	beq.n	8010ff2 <__kernel_rem_pio2+0x43a>
 8010f64:	f008 0007 	and.w	r0, r8, #7
 8010f68:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8010f6c:	ecbd 8b06 	vpop	{d8-d10}
 8010f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f74:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010f76:	2a03      	cmp	r2, #3
 8010f78:	d1f4      	bne.n	8010f64 <__kernel_rem_pio2+0x3ac>
 8010f7a:	a942      	add	r1, sp, #264	@ 0x108
 8010f7c:	f1a3 0208 	sub.w	r2, r3, #8
 8010f80:	440a      	add	r2, r1
 8010f82:	4611      	mov	r1, r2
 8010f84:	4620      	mov	r0, r4
 8010f86:	2800      	cmp	r0, #0
 8010f88:	f1a1 0108 	sub.w	r1, r1, #8
 8010f8c:	dc52      	bgt.n	8011034 <__kernel_rem_pio2+0x47c>
 8010f8e:	4621      	mov	r1, r4
 8010f90:	2901      	cmp	r1, #1
 8010f92:	f1a2 0208 	sub.w	r2, r2, #8
 8010f96:	dc5d      	bgt.n	8011054 <__kernel_rem_pio2+0x49c>
 8010f98:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80110a8 <__kernel_rem_pio2+0x4f0>
 8010f9c:	aa42      	add	r2, sp, #264	@ 0x108
 8010f9e:	4413      	add	r3, r2
 8010fa0:	2c01      	cmp	r4, #1
 8010fa2:	dc67      	bgt.n	8011074 <__kernel_rem_pio2+0x4bc>
 8010fa4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8010fa8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8010fac:	2e00      	cmp	r6, #0
 8010fae:	d167      	bne.n	8011080 <__kernel_rem_pio2+0x4c8>
 8010fb0:	ed87 5b00 	vstr	d5, [r7]
 8010fb4:	ed87 6b02 	vstr	d6, [r7, #8]
 8010fb8:	ed87 7b04 	vstr	d7, [r7, #16]
 8010fbc:	e7d2      	b.n	8010f64 <__kernel_rem_pio2+0x3ac>
 8010fbe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80110a8 <__kernel_rem_pio2+0x4f0>
 8010fc2:	aa42      	add	r2, sp, #264	@ 0x108
 8010fc4:	4413      	add	r3, r2
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	2a00      	cmp	r2, #0
 8010fca:	da24      	bge.n	8011016 <__kernel_rem_pio2+0x45e>
 8010fcc:	b34e      	cbz	r6, 8011022 <__kernel_rem_pio2+0x46a>
 8010fce:	eeb1 7b46 	vneg.f64	d7, d6
 8010fd2:	ed87 7b00 	vstr	d7, [r7]
 8010fd6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8010fda:	aa44      	add	r2, sp, #272	@ 0x110
 8010fdc:	2301      	movs	r3, #1
 8010fde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010fe2:	429c      	cmp	r4, r3
 8010fe4:	da20      	bge.n	8011028 <__kernel_rem_pio2+0x470>
 8010fe6:	b10e      	cbz	r6, 8010fec <__kernel_rem_pio2+0x434>
 8010fe8:	eeb1 7b47 	vneg.f64	d7, d7
 8010fec:	ed87 7b02 	vstr	d7, [r7, #8]
 8010ff0:	e7b8      	b.n	8010f64 <__kernel_rem_pio2+0x3ac>
 8010ff2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80110a8 <__kernel_rem_pio2+0x4f0>
 8010ff6:	aa42      	add	r2, sp, #264	@ 0x108
 8010ff8:	4413      	add	r3, r2
 8010ffa:	2c00      	cmp	r4, #0
 8010ffc:	da05      	bge.n	801100a <__kernel_rem_pio2+0x452>
 8010ffe:	b10e      	cbz	r6, 8011004 <__kernel_rem_pio2+0x44c>
 8011000:	eeb1 7b47 	vneg.f64	d7, d7
 8011004:	ed87 7b00 	vstr	d7, [r7]
 8011008:	e7ac      	b.n	8010f64 <__kernel_rem_pio2+0x3ac>
 801100a:	ed33 6b02 	vldmdb	r3!, {d6}
 801100e:	3c01      	subs	r4, #1
 8011010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011014:	e7f1      	b.n	8010ffa <__kernel_rem_pio2+0x442>
 8011016:	ed33 7b02 	vldmdb	r3!, {d7}
 801101a:	3a01      	subs	r2, #1
 801101c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011020:	e7d2      	b.n	8010fc8 <__kernel_rem_pio2+0x410>
 8011022:	eeb0 7b46 	vmov.f64	d7, d6
 8011026:	e7d4      	b.n	8010fd2 <__kernel_rem_pio2+0x41a>
 8011028:	ecb2 6b02 	vldmia	r2!, {d6}
 801102c:	3301      	adds	r3, #1
 801102e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011032:	e7d6      	b.n	8010fe2 <__kernel_rem_pio2+0x42a>
 8011034:	ed91 7b00 	vldr	d7, [r1]
 8011038:	ed91 5b02 	vldr	d5, [r1, #8]
 801103c:	3801      	subs	r0, #1
 801103e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011042:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011046:	ed81 6b00 	vstr	d6, [r1]
 801104a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801104e:	ed81 7b02 	vstr	d7, [r1, #8]
 8011052:	e798      	b.n	8010f86 <__kernel_rem_pio2+0x3ce>
 8011054:	ed92 7b00 	vldr	d7, [r2]
 8011058:	ed92 5b02 	vldr	d5, [r2, #8]
 801105c:	3901      	subs	r1, #1
 801105e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011062:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011066:	ed82 6b00 	vstr	d6, [r2]
 801106a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801106e:	ed82 7b02 	vstr	d7, [r2, #8]
 8011072:	e78d      	b.n	8010f90 <__kernel_rem_pio2+0x3d8>
 8011074:	ed33 6b02 	vldmdb	r3!, {d6}
 8011078:	3c01      	subs	r4, #1
 801107a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801107e:	e78f      	b.n	8010fa0 <__kernel_rem_pio2+0x3e8>
 8011080:	eeb1 5b45 	vneg.f64	d5, d5
 8011084:	eeb1 6b46 	vneg.f64	d6, d6
 8011088:	ed87 5b00 	vstr	d5, [r7]
 801108c:	eeb1 7b47 	vneg.f64	d7, d7
 8011090:	ed87 6b02 	vstr	d6, [r7, #8]
 8011094:	e790      	b.n	8010fb8 <__kernel_rem_pio2+0x400>
 8011096:	bf00      	nop
 8011098:	00000000 	.word	0x00000000
 801109c:	41700000 	.word	0x41700000
 80110a0:	00000000 	.word	0x00000000
 80110a4:	3e700000 	.word	0x3e700000
	...

080110b0 <scalbn>:
 80110b0:	ee10 1a90 	vmov	r1, s1
 80110b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110b8:	b98b      	cbnz	r3, 80110de <scalbn+0x2e>
 80110ba:	ee10 3a10 	vmov	r3, s0
 80110be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80110c2:	4319      	orrs	r1, r3
 80110c4:	d00a      	beq.n	80110dc <scalbn+0x2c>
 80110c6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011178 <scalbn+0xc8>
 80110ca:	4b37      	ldr	r3, [pc, #220]	@ (80111a8 <scalbn+0xf8>)
 80110cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110d0:	4298      	cmp	r0, r3
 80110d2:	da0b      	bge.n	80110ec <scalbn+0x3c>
 80110d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011180 <scalbn+0xd0>
 80110d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110dc:	4770      	bx	lr
 80110de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d107      	bne.n	80110f6 <scalbn+0x46>
 80110e6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80110ea:	4770      	bx	lr
 80110ec:	ee10 1a90 	vmov	r1, s1
 80110f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110f4:	3b36      	subs	r3, #54	@ 0x36
 80110f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80110fa:	4290      	cmp	r0, r2
 80110fc:	dd0d      	ble.n	801111a <scalbn+0x6a>
 80110fe:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011188 <scalbn+0xd8>
 8011102:	ee10 3a90 	vmov	r3, s1
 8011106:	eeb0 6b47 	vmov.f64	d6, d7
 801110a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8011190 <scalbn+0xe0>
 801110e:	2b00      	cmp	r3, #0
 8011110:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011114:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011118:	4770      	bx	lr
 801111a:	4418      	add	r0, r3
 801111c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8011120:	4298      	cmp	r0, r3
 8011122:	dcec      	bgt.n	80110fe <scalbn+0x4e>
 8011124:	2800      	cmp	r0, #0
 8011126:	dd0a      	ble.n	801113e <scalbn+0x8e>
 8011128:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801112c:	ec53 2b10 	vmov	r2, r3, d0
 8011130:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011134:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011138:	ec43 2b10 	vmov	d0, r2, r3
 801113c:	4770      	bx	lr
 801113e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8011142:	da09      	bge.n	8011158 <scalbn+0xa8>
 8011144:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8011180 <scalbn+0xd0>
 8011148:	ee10 3a90 	vmov	r3, s1
 801114c:	eeb0 6b47 	vmov.f64	d6, d7
 8011150:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8011198 <scalbn+0xe8>
 8011154:	2b00      	cmp	r3, #0
 8011156:	e7db      	b.n	8011110 <scalbn+0x60>
 8011158:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801115c:	ec53 2b10 	vmov	r2, r3, d0
 8011160:	3036      	adds	r0, #54	@ 0x36
 8011162:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011166:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801116a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80111a0 <scalbn+0xf0>
 801116e:	ec43 2b10 	vmov	d0, r2, r3
 8011172:	e7b1      	b.n	80110d8 <scalbn+0x28>
 8011174:	f3af 8000 	nop.w
 8011178:	00000000 	.word	0x00000000
 801117c:	43500000 	.word	0x43500000
 8011180:	c2f8f359 	.word	0xc2f8f359
 8011184:	01a56e1f 	.word	0x01a56e1f
 8011188:	8800759c 	.word	0x8800759c
 801118c:	7e37e43c 	.word	0x7e37e43c
 8011190:	8800759c 	.word	0x8800759c
 8011194:	fe37e43c 	.word	0xfe37e43c
 8011198:	c2f8f359 	.word	0xc2f8f359
 801119c:	81a56e1f 	.word	0x81a56e1f
 80111a0:	00000000 	.word	0x00000000
 80111a4:	3c900000 	.word	0x3c900000
 80111a8:	ffff3cb0 	.word	0xffff3cb0
 80111ac:	00000000 	.word	0x00000000

080111b0 <floor>:
 80111b0:	ee10 3a90 	vmov	r3, s1
 80111b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80111b8:	ee10 2a10 	vmov	r2, s0
 80111bc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80111c0:	2913      	cmp	r1, #19
 80111c2:	b530      	push	{r4, r5, lr}
 80111c4:	4615      	mov	r5, r2
 80111c6:	dc33      	bgt.n	8011230 <floor+0x80>
 80111c8:	2900      	cmp	r1, #0
 80111ca:	da18      	bge.n	80111fe <floor+0x4e>
 80111cc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8011290 <floor+0xe0>
 80111d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	dd0a      	ble.n	80111f4 <floor+0x44>
 80111de:	2b00      	cmp	r3, #0
 80111e0:	da50      	bge.n	8011284 <floor+0xd4>
 80111e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80111e6:	4313      	orrs	r3, r2
 80111e8:	2200      	movs	r2, #0
 80111ea:	4293      	cmp	r3, r2
 80111ec:	4b2a      	ldr	r3, [pc, #168]	@ (8011298 <floor+0xe8>)
 80111ee:	bf08      	it	eq
 80111f0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80111f4:	4619      	mov	r1, r3
 80111f6:	4610      	mov	r0, r2
 80111f8:	ec41 0b10 	vmov	d0, r0, r1
 80111fc:	e01f      	b.n	801123e <floor+0x8e>
 80111fe:	4827      	ldr	r0, [pc, #156]	@ (801129c <floor+0xec>)
 8011200:	4108      	asrs	r0, r1
 8011202:	ea03 0400 	and.w	r4, r3, r0
 8011206:	4314      	orrs	r4, r2
 8011208:	d019      	beq.n	801123e <floor+0x8e>
 801120a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011290 <floor+0xe0>
 801120e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011212:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121a:	ddeb      	ble.n	80111f4 <floor+0x44>
 801121c:	2b00      	cmp	r3, #0
 801121e:	bfbe      	ittt	lt
 8011220:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8011224:	410a      	asrlt	r2, r1
 8011226:	189b      	addlt	r3, r3, r2
 8011228:	ea23 0300 	bic.w	r3, r3, r0
 801122c:	2200      	movs	r2, #0
 801122e:	e7e1      	b.n	80111f4 <floor+0x44>
 8011230:	2933      	cmp	r1, #51	@ 0x33
 8011232:	dd05      	ble.n	8011240 <floor+0x90>
 8011234:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011238:	d101      	bne.n	801123e <floor+0x8e>
 801123a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801123e:	bd30      	pop	{r4, r5, pc}
 8011240:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8011244:	f04f 30ff 	mov.w	r0, #4294967295
 8011248:	40e0      	lsrs	r0, r4
 801124a:	4210      	tst	r0, r2
 801124c:	d0f7      	beq.n	801123e <floor+0x8e>
 801124e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011290 <floor+0xe0>
 8011252:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011256:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125e:	ddc9      	ble.n	80111f4 <floor+0x44>
 8011260:	2b00      	cmp	r3, #0
 8011262:	da02      	bge.n	801126a <floor+0xba>
 8011264:	2914      	cmp	r1, #20
 8011266:	d103      	bne.n	8011270 <floor+0xc0>
 8011268:	3301      	adds	r3, #1
 801126a:	ea22 0200 	bic.w	r2, r2, r0
 801126e:	e7c1      	b.n	80111f4 <floor+0x44>
 8011270:	2401      	movs	r4, #1
 8011272:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8011276:	fa04 f101 	lsl.w	r1, r4, r1
 801127a:	440a      	add	r2, r1
 801127c:	42aa      	cmp	r2, r5
 801127e:	bf38      	it	cc
 8011280:	191b      	addcc	r3, r3, r4
 8011282:	e7f2      	b.n	801126a <floor+0xba>
 8011284:	2200      	movs	r2, #0
 8011286:	4613      	mov	r3, r2
 8011288:	e7b4      	b.n	80111f4 <floor+0x44>
 801128a:	bf00      	nop
 801128c:	f3af 8000 	nop.w
 8011290:	8800759c 	.word	0x8800759c
 8011294:	7e37e43c 	.word	0x7e37e43c
 8011298:	bff00000 	.word	0xbff00000
 801129c:	000fffff 	.word	0x000fffff

080112a0 <_init>:
 80112a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a2:	bf00      	nop
 80112a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112a6:	bc08      	pop	{r3}
 80112a8:	469e      	mov	lr, r3
 80112aa:	4770      	bx	lr

080112ac <_fini>:
 80112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ae:	bf00      	nop
 80112b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112b2:	bc08      	pop	{r3}
 80112b4:	469e      	mov	lr, r3
 80112b6:	4770      	bx	lr
