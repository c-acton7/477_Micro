
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800e978  0800e978  0000f978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eb8c  0800eb8c  0000fb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eb94  0800eb94  0000fb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eb98  0800eb98  0000fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800eb9c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000630  2400007c  0800ec18  0001007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006ac  0800ec18  000106ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a8aa  00000000  00000000  000100aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003af0  00000000  00000000  0002a954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b0  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000124f  00000000  00000000  0002fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a953  00000000  00000000  00030e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000207de  00000000  00000000  0006b79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165d40  00000000  00000000  0008bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1cb8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068f8  00000000  00000000  001f1cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001f85f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e960 	.word	0x0800e960

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800e960 	.word	0x0800e960

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:
//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)
//#define LCD_WAIT_STATUS 1

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f881 	bl	80004fc <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f005 f9ae 	bl	8005798 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f009 f90e 	bl	8009668 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, 1000);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f009 f907 	bl	8009668 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f005 f99a 	bl	8005798 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	240002c8 	.word	0x240002c8

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <RA8875_read_data+0x6c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <RA8875_read_data+0x70>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01c      	b.n	80004e4 <RA8875_read_data+0x64>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004b4:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <RA8875_read_data+0x74>)
 80004b6:	f005 f96f 	bl	8005798 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi2, &rs_rw_info, 1, 1000);
 80004ba:	1db9      	adds	r1, r7, #6
 80004bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c0:	2201      	movs	r2, #1
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <RA8875_read_data+0x78>)
 80004c4:	f009 f8d0 	bl	8009668 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &data, 1, 1000);
 80004c8:	1df9      	adds	r1, r7, #7
 80004ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ce:	2201      	movs	r2, #1
 80004d0:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <RA8875_read_data+0x78>)
 80004d2:	f009 fab7 	bl	8009a44 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004dc:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <RA8875_read_data+0x74>)
 80004de:	f005 f95b 	bl	8005798 <HAL_GPIO_WritePin>
  return data;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	240000a0 	.word	0x240000a0
 80004f0:	240000a4 	.word	0x240000a4
 80004f4:	58020400 	.word	0x58020400
 80004f8:	24000350 	.word	0x24000350

080004fc <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <RA8875_write_command+0x68>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	691b      	ldr	r3, [r3, #16]
 800050c:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <RA8875_write_command+0x6c>)
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	4013      	ands	r3, r2
 8000512:	2b00      	cmp	r3, #0
 8000514:	d105      	bne.n	8000522 <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ff50 	bl	80003bc <RA8875_BUS_FREE>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d01b      	beq.n	800055a <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 8000522:	2380      	movs	r3, #128	@ 0x80
 8000524:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	4810      	ldr	r0, [pc, #64]	@ (800056c <RA8875_write_command+0x70>)
 800052c:	f005 f934 	bl	8005798 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000530:	f107 010f 	add.w	r1, r7, #15
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	480d      	ldr	r0, [pc, #52]	@ (8000570 <RA8875_write_command+0x74>)
 800053c:	f009 f894 	bl	8009668 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, 1000);
 8000540:	1df9      	adds	r1, r7, #7
 8000542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <RA8875_write_command+0x74>)
 800054a:	f009 f88d 	bl	8009668 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <RA8875_write_command+0x70>)
 8000554:	f005 f920 	bl	8005798 <HAL_GPIO_WritePin>
 8000558:	e000      	b.n	800055c <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 800055a:	bf00      	nop
}
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	240000a0 	.word	0x240000a0
 8000568:	240000a4 	.word	0x240000a4
 800056c:	58020000 	.word	0x58020000
 8000570:	240002c8 	.word	0x240002c8

08000574 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 800057a:	2040      	movs	r0, #64	@ 0x40
 800057c:	f7ff ffbe 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000580:	f7ff ff7e 	bl	8000480 <RA8875_read_data>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff38 	bl	8000408 <RA8875_write_data>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff18 	bl	80003e8 <RA8875_read_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	4013      	ands	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f3      	bne.n	80005b0 <RA8875_wait_poll+0x10>
 80005c8:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <RA8875_apply_rotation_x+0x34>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d108      	bne.n	80005f8 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <RA8875_apply_rotation_x+0x38>)
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3b01      	subs	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	80fb      	strh	r3, [r7, #6]
      break;
 80005f6:	bf00      	nop
  }

  return x;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2400009d 	.word	0x2400009d
 800060c:	24000098 	.word	0x24000098

08000610 <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <RA8875_apply_rotation_y+0x40>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d108      	bne.n	8000634 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <RA8875_apply_rotation_y+0x44>)
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	3b01      	subs	r3, #1
 800062e:	b29b      	uxth	r3, r3
 8000630:	80fb      	strh	r3, [r7, #6]
      break;
 8000632:	bf00      	nop
  }

  return y + _voffset;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <RA8875_apply_rotation_y+0x48>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21b      	sxth	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2400009d 	.word	0x2400009d
 8000654:	2400009a 	.word	0x2400009a
 8000658:	2400009e 	.word	0x2400009e

0800065c <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4604      	mov	r4, r0
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4623      	mov	r3, r4
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	4603      	mov	r3, r0
 8000670:	80bb      	strh	r3, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	807b      	strh	r3, [r7, #2]
 8000676:	4613      	mov	r3, r2
 8000678:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffa8 	bl	80005d4 <RA8875_apply_rotation_x>
 8000684:	4603      	mov	r3, r0
 8000686:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffbf 	bl	8000610 <RA8875_apply_rotation_y>
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff9a 	bl	80005d4 <RA8875_apply_rotation_x>
 80006a0:	4603      	mov	r3, r0
 80006a2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffb1 	bl	8000610 <RA8875_apply_rotation_y>
 80006ae:	4603      	mov	r3, r0
 80006b0:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006b2:	2091      	movs	r0, #145	@ 0x91
 80006b4:	f7ff ff22 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fea3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006c2:	2092      	movs	r0, #146	@ 0x92
 80006c4:	f7ff ff1a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006cc:	121b      	asrs	r3, r3, #8
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe98 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d8:	2093      	movs	r0, #147	@ 0x93
 80006da:	f7ff ff0f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y);
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe90 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e8:	2094      	movs	r0, #148	@ 0x94
 80006ea:	f7ff ff07 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	121b      	asrs	r3, r3, #8
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe85 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fe:	2095      	movs	r0, #149	@ 0x95
 8000700:	f7ff fefc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (w);
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe7d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070e:	2096      	movs	r0, #150	@ 0x96
 8000710:	f7ff fef4 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000718:	121b      	asrs	r3, r3, #8
 800071a:	b21b      	sxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe72 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000724:	2097      	movs	r0, #151	@ 0x97
 8000726:	f7ff fee9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (h);
 800072a:	883b      	ldrh	r3, [r7, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fe6a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000734:	2098      	movs	r0, #152	@ 0x98
 8000736:	f7ff fee1 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 800073a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073e:	121b      	asrs	r3, r3, #8
 8000740:	b21b      	sxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe5f 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 800074a:	2063      	movs	r0, #99	@ 0x63
 800074c:	f7ff fed6 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000750:	8b3b      	ldrh	r3, [r7, #24]
 8000752:	0adb      	lsrs	r3, r3, #11
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe55 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f7ff fecc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000764:	8b3b      	ldrh	r3, [r7, #24]
 8000766:	115b      	asrs	r3, r3, #5
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe49 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000776:	2065      	movs	r0, #101	@ 0x65
 8000778:	f7ff fec0 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 800077c:	8b3b      	ldrh	r3, [r7, #24]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fe3e 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 800078c:	2090      	movs	r0, #144	@ 0x90
 800078e:	f7ff feb5 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000792:	7f3b      	ldrb	r3, [r7, #28]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000798:	20b0      	movs	r0, #176	@ 0xb0
 800079a:	f7ff fe35 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079e:	e002      	b.n	80007a6 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 80007a0:	2090      	movs	r0, #144	@ 0x90
 80007a2:	f7ff fe31 	bl	8000408 <RA8875_write_data>
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}

080007ae <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007ae:	b590      	push	{r4, r7, lr}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4604      	mov	r4, r0
 80007b6:	4608      	mov	r0, r1
 80007b8:	4611      	mov	r1, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	4623      	mov	r3, r4
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	4603      	mov	r3, r0
 80007c2:	80bb      	strh	r3, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
 80007c8:	4613      	mov	r3, r2
 80007ca:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feff 	bl	80005d4 <RA8875_apply_rotation_x>
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff16 	bl	8000610 <RA8875_apply_rotation_y>
 80007e4:	4603      	mov	r3, r0
 80007e6:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fef1 	bl	80005d4 <RA8875_apply_rotation_x>
 80007f2:	4603      	mov	r3, r0
 80007f4:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff08 	bl	8000610 <RA8875_apply_rotation_y>
 8000800:	4603      	mov	r3, r0
 8000802:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000804:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <RA8875_apply_rotation_x>
 800080e:	4603      	mov	r3, r0
 8000810:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 8000812:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fefa 	bl	8000610 <RA8875_apply_rotation_y>
 800081c:	4603      	mov	r3, r0
 800081e:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 8000820:	2091      	movs	r0, #145	@ 0x91
 8000822:	f7ff fe6b 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x0);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fdec 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000830:	2092      	movs	r0, #146	@ 0x92
 8000832:	f7ff fe63 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083a:	121b      	asrs	r3, r3, #8
 800083c:	b21b      	sxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fde1 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000846:	2093      	movs	r0, #147	@ 0x93
 8000848:	f7ff fe58 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y0);
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fdd9 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000856:	2094      	movs	r0, #148	@ 0x94
 8000858:	f7ff fe50 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	121b      	asrs	r3, r3, #8
 8000862:	b21b      	sxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fdce 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 800086c:	2095      	movs	r0, #149	@ 0x95
 800086e:	f7ff fe45 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x1);
 8000872:	887b      	ldrh	r3, [r7, #2]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fdc6 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800087c:	2096      	movs	r0, #150	@ 0x96
 800087e:	f7ff fe3d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 8000882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000886:	121b      	asrs	r3, r3, #8
 8000888:	b21b      	sxth	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fdbb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 8000892:	2097      	movs	r0, #151	@ 0x97
 8000894:	f7ff fe32 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y1);
 8000898:	883b      	ldrh	r3, [r7, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdb3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 80008a2:	2098      	movs	r0, #152	@ 0x98
 80008a4:	f7ff fe2a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008ac:	121b      	asrs	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fda8 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b8:	20a9      	movs	r0, #169	@ 0xa9
 80008ba:	f7ff fe1f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x2);
 80008be:	8b3b      	ldrh	r3, [r7, #24]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fda0 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c8:	20aa      	movs	r0, #170	@ 0xaa
 80008ca:	f7ff fe17 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008d2:	121b      	asrs	r3, r3, #8
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fd95 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008de:	20ab      	movs	r0, #171	@ 0xab
 80008e0:	f7ff fe0c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y2);
 80008e4:	8bbb      	ldrh	r3, [r7, #28]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fd8d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ee:	20ac      	movs	r0, #172	@ 0xac
 80008f0:	f7ff fe04 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f8:	121b      	asrs	r3, r3, #8
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fd82 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000904:	2063      	movs	r0, #99	@ 0x63
 8000906:	f7ff fdf9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800090a:	8c3b      	ldrh	r3, [r7, #32]
 800090c:	0adb      	lsrs	r3, r3, #11
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fd78 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000918:	2064      	movs	r0, #100	@ 0x64
 800091a:	f7ff fdef 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091e:	8c3b      	ldrh	r3, [r7, #32]
 8000920:	115b      	asrs	r3, r3, #5
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000930:	2065      	movs	r0, #101	@ 0x65
 8000932:	f7ff fde3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000936:	8c3b      	ldrh	r3, [r7, #32]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fd61 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000946:	2090      	movs	r0, #144	@ 0x90
 8000948:	f7ff fdd8 	bl	80004fc <RA8875_write_command>
  if (filled)
 800094c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000954:	20a1      	movs	r0, #161	@ 0xa1
 8000956:	f7ff fd57 	bl	8000408 <RA8875_write_data>
 800095a:	e002      	b.n	8000962 <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 800095c:	2081      	movs	r0, #129	@ 0x81
 800095e:	f7ff fd53 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	2090      	movs	r0, #144	@ 0x90
 8000966:	f7ff fe1b 	bl	80005a0 <RA8875_wait_poll>
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4623      	mov	r3, r4
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4603      	mov	r3, r0
 8000986:	80bb      	strh	r3, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	4613      	mov	r3, r2
 800098e:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 8000990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe1d 	bl	80005d4 <RA8875_apply_rotation_x>
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe34 	bl	8000610 <RA8875_apply_rotation_y>
 80009a8:	4603      	mov	r3, r0
 80009aa:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009ac:	20a5      	movs	r0, #165	@ 0xa5
 80009ae:	f7ff fda5 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009bc:	20a6      	movs	r0, #166	@ 0xa6
 80009be:	f7ff fd9d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c6:	121b      	asrs	r3, r3, #8
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd1b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009d2:	20a7      	movs	r0, #167	@ 0xa7
 80009d4:	f7ff fd92 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009e2:	20a8      	movs	r0, #168	@ 0xa8
 80009e4:	f7ff fd8a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ec:	121b      	asrs	r3, r3, #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd08 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f8:	20a1      	movs	r0, #161	@ 0xa1
 80009fa:	f7ff fd7f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a08:	20a2      	movs	r0, #162	@ 0xa2
 8000a0a:	f7ff fd77 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a12:	121b      	asrs	r3, r3, #8
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fcf5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1e:	20a3      	movs	r0, #163	@ 0xa3
 8000a20:	f7ff fd6c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a24:	883b      	ldrh	r3, [r7, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fced 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2e:	20a4      	movs	r0, #164	@ 0xa4
 8000a30:	f7ff fd64 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a38:	121b      	asrs	r3, r3, #8
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fce2 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a44:	2063      	movs	r0, #99	@ 0x63
 8000a46:	f7ff fd59 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a4a:	8b3b      	ldrh	r3, [r7, #24]
 8000a4c:	0adb      	lsrs	r3, r3, #11
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fcd8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a58:	2064      	movs	r0, #100	@ 0x64
 8000a5a:	f7ff fd4f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5e:	8b3b      	ldrh	r3, [r7, #24]
 8000a60:	115b      	asrs	r3, r3, #5
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fccc 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a70:	2065      	movs	r0, #101	@ 0x65
 8000a72:	f7ff fd43 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a76:	8b3b      	ldrh	r3, [r7, #24]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fcc1 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a86:	20a0      	movs	r0, #160	@ 0xa0
 8000a88:	f7ff fd38 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000a8c:	7f3b      	ldrb	r3, [r7, #28]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a92:	20c0      	movs	r0, #192	@ 0xc0
 8000a94:	f7ff fcb8 	bl	8000408 <RA8875_write_data>
 8000a98:	e002      	b.n	8000aa0 <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a9a:	2080      	movs	r0, #128	@ 0x80
 8000a9c:	f7ff fcb4 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	20a0      	movs	r0, #160	@ 0xa0
 8000aa4:	f7ff fd7c 	bl	80005a0 <RA8875_wait_poll>
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd7e 	bl	80005d4 <RA8875_apply_rotation_x>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd95 	bl	8000610 <RA8875_apply_rotation_y>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd70 	bl	80005d4 <RA8875_apply_rotation_x>
 8000af4:	4603      	mov	r3, r0
 8000af6:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd87 	bl	8000610 <RA8875_apply_rotation_y>
 8000b02:	4603      	mov	r3, r0
 8000b04:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dd05      	ble.n	8000b1e <roundRectHelper+0x6e>
 8000b12:	1cba      	adds	r2, r7, #2
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc39 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dd05      	ble.n	8000b36 <roundRectHelper+0x86>
 8000b2a:	463a      	mov	r2, r7
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc2d 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b36:	2091      	movs	r0, #145	@ 0x91
 8000b38:	f7ff fce0 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x);
 8000b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc60 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b48:	2092      	movs	r0, #146	@ 0x92
 8000b4a:	f7ff fcd7 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b52:	121b      	asrs	r3, r3, #8
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc55 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5e:	2093      	movs	r0, #147	@ 0x93
 8000b60:	f7ff fccc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y);
 8000b64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc4c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b70:	2094      	movs	r0, #148	@ 0x94
 8000b72:	f7ff fcc3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b7a:	121b      	asrs	r3, r3, #8
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fc41 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b86:	2095      	movs	r0, #149	@ 0x95
 8000b88:	f7ff fcb8 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (w);
 8000b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc38 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b98:	2096      	movs	r0, #150	@ 0x96
 8000b9a:	f7ff fcaf 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ba2:	121b      	asrs	r3, r3, #8
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc2d 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000bae:	2097      	movs	r0, #151	@ 0x97
 8000bb0:	f7ff fca4 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (h);
 8000bb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc24 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bc0:	2098      	movs	r0, #152	@ 0x98
 8000bc2:	f7ff fc9b 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bca:	121b      	asrs	r3, r3, #8
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc19 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd6:	20a1      	movs	r0, #161	@ 0xa1
 8000bd8:	f7ff fc90 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (r);
 8000bdc:	8b3b      	ldrh	r3, [r7, #24]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc11 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be6:	20a2      	movs	r0, #162	@ 0xa2
 8000be8:	f7ff fc88 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000bec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bf0:	121b      	asrs	r3, r3, #8
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc06 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bfc:	20a3      	movs	r0, #163	@ 0xa3
 8000bfe:	f7ff fc7d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (r);
 8000c02:	8b3b      	ldrh	r3, [r7, #24]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fbfe 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c0c:	20a4      	movs	r0, #164	@ 0xa4
 8000c0e:	f7ff fc75 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c16:	121b      	asrs	r3, r3, #8
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbf3 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c22:	2063      	movs	r0, #99	@ 0x63
 8000c24:	f7ff fc6a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c28:	8bbb      	ldrh	r3, [r7, #28]
 8000c2a:	0adb      	lsrs	r3, r3, #11
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fbe9 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c36:	2064      	movs	r0, #100	@ 0x64
 8000c38:	f7ff fc60 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	115b      	asrs	r3, r3, #5
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fbdd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4e:	2065      	movs	r0, #101	@ 0x65
 8000c50:	f7ff fc54 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c54:	8bbb      	ldrh	r3, [r7, #28]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fbd2 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c64:	20a0      	movs	r0, #160	@ 0xa0
 8000c66:	f7ff fc49 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c72:	20e0      	movs	r0, #224	@ 0xe0
 8000c74:	f7ff fbc8 	bl	8000408 <RA8875_write_data>
 8000c78:	e002      	b.n	8000c80 <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c7a:	20a0      	movs	r0, #160	@ 0xa0
 8000c7c:	f7ff fbc4 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	20a0      	movs	r0, #160	@ 0xa0
 8000c84:	f7ff fc8c 	bl	80005a0 <RA8875_wait_poll>
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd90      	pop	{r4, r7, pc}

08000c90 <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	4613      	mov	r3, r2
 8000cac:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b21c      	sxth	r4, r3
 8000cbc:	88ba      	ldrh	r2, [r7, #4]
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	8b3b      	ldrh	r3, [r7, #24]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	4622      	mov	r2, r4
 8000cde:	f7ff fcbd 	bl	800065c <rectHelper>
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
	...

08000cec <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <RA8875_fill_screen+0x38>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <RA8875_fill_screen+0x3c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b219      	sxth	r1, r3
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	460b      	mov	r3, r1
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fca0 	bl	800065c <rectHelper>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000098 	.word	0x24000098
 8000d28:	2400009a 	.word	0x2400009a

08000d2c <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d4a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	8c3b      	ldrh	r3, [r7, #32]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4623      	mov	r3, r4
 8000d70:	f7ff fd1d 	bl	80007ae <triangleHelper>
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}

08000d7c <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
 8000d96:	4613      	mov	r3, r2
 8000d98:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d9a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000da2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000daa:	2301      	movs	r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	8b3b      	ldrh	r3, [r7, #24]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4623      	mov	r3, r4
 8000db4:	f7ff fddd 	bl	8000972 <ellipseHelper>
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}

08000dc0 <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af04      	add	r7, sp, #16
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	807b      	strh	r3, [r7, #2]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21c      	sxth	r4, r3
 8000de8:	88ba      	ldrh	r2, [r7, #4]
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	8bbb      	ldrh	r3, [r7, #28]
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	f7ff fe50 	bl	8000ab0 <roundRectHelper>
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1e:	2040      	movs	r0, #64	@ 0x40
 8000e20:	f7ff fb6c 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e24:	f7ff fb2c 	bl	8000480 <RA8875_read_data>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e32:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fae6 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e3c:	2021      	movs	r0, #33	@ 0x21
 8000e3e:	f7ff fb5d 	bl	80004fc <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e42:	f7ff fb1d 	bl	8000480 <RA8875_read_data>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e50:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fad7 	bl	8000408 <RA8875_write_data>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fbac 	bl	80005d4 <RA8875_apply_rotation_x>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fbc3 	bl	8000610 <RA8875_apply_rotation_y>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8e:	202a      	movs	r0, #42	@ 0x2a
 8000e90:	f7ff fb34 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fab5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9e:	202b      	movs	r0, #43	@ 0x2b
 8000ea0:	f7ff fb2c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faab 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eb2:	202c      	movs	r0, #44	@ 0x2c
 8000eb4:	f7ff fb22 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff faa3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ec2:	202d      	movs	r0, #45	@ 0x2d
 8000ec4:	f7ff fb1a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa99 	bl	8000408 <RA8875_write_data>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eee:	2063      	movs	r0, #99	@ 0x63
 8000ef0:	f7ff fb04 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	0adb      	lsrs	r3, r3, #11
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fa83 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f02:	2064      	movs	r0, #100	@ 0x64
 8000f04:	f7ff fafa 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	115b      	asrs	r3, r3, #5
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fa77 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f1a:	2065      	movs	r0, #101	@ 0x65
 8000f1c:	f7ff faee 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa6c 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f30:	2060      	movs	r0, #96	@ 0x60
 8000f32:	f7ff fae3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	0adb      	lsrs	r3, r3, #11
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f44:	2061      	movs	r0, #97	@ 0x61
 8000f46:	f7ff fad9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	115b      	asrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa56 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f5c:	2062      	movs	r0, #98	@ 0x62
 8000f5e:	f7ff facd 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa4b 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f72:	2022      	movs	r0, #34	@ 0x22
 8000f74:	f7ff fac2 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f78:	f7ff fa82 	bl	8000480 <RA8875_read_data>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f86:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fa3c 	bl	8000408 <RA8875_write_data>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d901      	bls.n	8000fac <RA8875_text_scale+0x14>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fac:	2022      	movs	r0, #34	@ 0x22
 8000fae:	f7ff faa5 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fb2:	f7ff fa65 	bl	8000480 <RA8875_read_data>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa18 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd8:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <RA8875_text_scale+0x50>)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	7013      	strb	r3, [r2, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400009c 	.word	0x2400009c

08000fec <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <RA8875_text_write+0x1c>
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f96e 	bl	80002e0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff fa77 	bl	80004fc <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	e010      	b.n	8001036 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f3 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <RA8875_text_write+0x5c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <RA8875_text_write+0x44>
 800102a:	2001      	movs	r0, #1
 800102c:	f001 fa7c 	bl	8002528 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ea      	bcc.n	8001014 <RA8875_text_write+0x28>
  }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400009c 	.word	0x2400009c

0800104c <get_word_matrix>:
        }
    }
}

void get_word_matrix(WordVector* word_matrix)
{
 800104c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001050:	f2ad 5d0c 	subw	sp, sp, #1292	@ 0x50c
 8001054:	af00      	add	r7, sp, #0
 8001056:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 800105a:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
 800105e:	6018      	str	r0, [r3, #0]
 8001060:	466b      	mov	r3, sp
 8001062:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001068:	f001 fa5e 	bl	8002528 <HAL_Delay>
    FATFS fs;
    FIL file;
    FRESULT fr;
    char line[MAX_LINE_LENGTH];

    fr = f_mount(&fs, "", 1);
 800106c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001070:	2201      	movs	r2, #1
 8001072:	4943      	ldr	r1, [pc, #268]	@ (8001180 <get_word_matrix+0x134>)
 8001074:	4618      	mov	r0, r3
 8001076:	f00c fb8f 	bl	800d798 <f_mount>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 3503 	strb.w	r3, [r7, #1283]	@ 0x503
    if (fr != FR_OK) {		//1 means now
 8001080:	f897 3503 	ldrb.w	r3, [r7, #1283]	@ 0x503
 8001084:	2b00      	cmp	r3, #0
 8001086:	d171      	bne.n	800116c <get_word_matrix+0x120>
    	return;
    }

    fr = f_open(&file, "floats.bin", FA_READ);
 8001088:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800108c:	2201      	movs	r2, #1
 800108e:	493d      	ldr	r1, [pc, #244]	@ (8001184 <get_word_matrix+0x138>)
 8001090:	4618      	mov	r0, r3
 8001092:	f00c fbc7 	bl	800d824 <f_open>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3503 	strb.w	r3, [r7, #1283]	@ 0x503
    if (fr != FR_OK) {
 800109c:	f897 3503 	ldrb.w	r3, [r7, #1283]	@ 0x503
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d165      	bne.n	8001170 <get_word_matrix+0x124>
//    // Read lines from the file and parse them
//    for(int i = 0; i < NUM_WORDS; i++) {
//    	f_gets(line, sizeof(line), &file);
//        parse_word_data(line, &word_matrix[i]);
//    }
    const int CHUNK_SIZE = 512;
 80010a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a8:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
    uint8_t buffer[CHUNK_SIZE];
 80010ac:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80010b0:	3b01      	subs	r3, #1
 80010b2:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 80010b6:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80010ba:	2200      	movs	r2, #0
 80010bc:	4698      	mov	r8, r3
 80010be:	4691      	mov	r9, r2
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010d4:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80010d8:	2200      	movs	r2, #0
 80010da:	461c      	mov	r4, r3
 80010dc:	4615      	mov	r5, r2
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	00eb      	lsls	r3, r5, #3
 80010e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010ec:	00e2      	lsls	r2, r4, #3
 80010ee:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 80010f2:	3307      	adds	r3, #7
 80010f4:	08db      	lsrs	r3, r3, #3
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	ebad 0d03 	sub.w	sp, sp, r3
 80010fc:	466b      	mov	r3, sp
 80010fe:	3300      	adds	r3, #0
 8001100:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
    UINT bytesRead;
    FRESULT res;
    long totalFloats = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504

    while (1) {
        res = f_read(&file, buffer, sizeof(buffer), &bytesRead);
 800110a:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001116:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	@ 0x4f4
 800111a:	f00c fd3d 	bl	800db98 <f_read>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 34f3 	strb.w	r3, [r7, #1267]	@ 0x4f3
        if (res != FR_OK || totalFloats >= 100000) {
 8001124:	f897 34f3 	ldrb.w	r3, [r7, #1267]	@ 0x4f3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d114      	bne.n	8001156 <get_word_matrix+0x10a>
 800112c:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 8001130:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <get_word_matrix+0x13c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	dc0f      	bgt.n	8001156 <get_word_matrix+0x10a>
            break;
        }

        uint8_t numFloats = bytesRead / sizeof(float); // Number of floats in the chunk
 8001136:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 800113a:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	f887 34f2 	strb.w	r3, [r7, #1266]	@ 0x4f2

        totalFloats += numFloats; // Keep track of the total floats processed
 8001146:	f897 34f2 	ldrb.w	r3, [r7, #1266]	@ 0x4f2
 800114a:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 800114e:	4413      	add	r3, r2
 8001150:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
    while (1) {
 8001154:	e7d9      	b.n	800110a <get_word_matrix+0xbe>
    }

    //close the file
    f_close(&file);
 8001156:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800115a:	4618      	mov	r0, r3
 800115c:	f00c fed9 	bl	800df12 <f_close>

    //unmount the SD card
    f_mount(NULL, "", 0);
 8001160:	2200      	movs	r2, #0
 8001162:	4907      	ldr	r1, [pc, #28]	@ (8001180 <get_word_matrix+0x134>)
 8001164:	2000      	movs	r0, #0
 8001166:	f00c fb17 	bl	800d798 <f_mount>

    return;
 800116a:	e002      	b.n	8001172 <get_word_matrix+0x126>
    	return;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <get_word_matrix+0x126>
    	return;
 8001170:	bf00      	nop
 8001172:	46b5      	mov	sp, r6
}
 8001174:	f207 570c 	addw	r7, r7, #1292	@ 0x50c
 8001178:	46bd      	mov	sp, r7
 800117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800117e:	bf00      	nop
 8001180:	0800e97c 	.word	0x0800e97c
 8001184:	0800e980 	.word	0x0800e980
 8001188:	0001869f 	.word	0x0001869f

0800118c <game_matrix>:
	RA8875_draw_fill_triangle(CENTER_X+92, 85, CENTER_X+85, 50, CENTER_X+100, 50, RA8875_YELLOW);

	return;
}

void game_matrix(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	mode = GAME_MODE_PLAY;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <game_matrix+0x14>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	get_word_matrix(word_matrix);
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <game_matrix+0x18>)
 8001198:	f7ff ff58 	bl	800104c <get_word_matrix>
//	RA8875_text_write("kitchen", 8);
//	RA8875_graphic_mode();
//
//	HAL_TIM_Base_Start_IT(&htim6);

	return;
 800119c:	bf00      	nop
}
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24000268 	.word	0x24000268
 80011a4:	240000a8 	.word	0x240000a8

080011a8 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 80011ae:	4bdb      	ldr	r3, [pc, #876]	@ (800151c <end_game+0x374>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 80011b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b8:	f001 f9b6 	bl	8002528 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 80011bc:	201f      	movs	r0, #31
 80011be:	f7ff fd95 	bl	8000cec <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 80011c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	230a      	movs	r3, #10
 80011ca:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80011ce:	215a      	movs	r1, #90	@ 0x5a
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fd5d 	bl	8000c90 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 80011d6:	2300      	movs	r3, #0
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	230a      	movs	r3, #10
 80011dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80011e0:	2164      	movs	r1, #100	@ 0x64
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fd54 	bl	8000c90 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 80011e8:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001202:	21b4      	movs	r1, #180	@ 0xb4
 8001204:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001208:	f7ff fd90 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 800120c:	231f      	movs	r3, #31
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001220:	f240 22da 	movw	r2, #730	@ 0x2da
 8001224:	21b4      	movs	r1, #180	@ 0xb4
 8001226:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 800122a:	f7ff fd7f 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 800122e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f240 238a 	movw	r3, #650	@ 0x28a
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001244:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001248:	21b4      	movs	r1, #180	@ 0xb4
 800124a:	f240 208a 	movw	r0, #650	@ 0x28a
 800124e:	f7ff fd6d 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8001252:	231f      	movs	r3, #31
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f240 2376 	movw	r3, #630	@ 0x276
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001266:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800126a:	21b4      	movs	r1, #180	@ 0xb4
 800126c:	f240 2076 	movw	r0, #630	@ 0x276
 8001270:	f7ff fd5c 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8001274:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2346      	movs	r3, #70	@ 0x46
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001288:	2214      	movs	r2, #20
 800128a:	21b4      	movs	r1, #180	@ 0xb4
 800128c:	2046      	movs	r0, #70	@ 0x46
 800128e:	f7ff fd4d 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8001292:	231f      	movs	r3, #31
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	235a      	movs	r3, #90	@ 0x5a
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80012a4:	2228      	movs	r2, #40	@ 0x28
 80012a6:	21b4      	movs	r1, #180	@ 0xb4
 80012a8:	205a      	movs	r0, #90	@ 0x5a
 80012aa:	f7ff fd3f 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 80012ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	2378      	movs	r3, #120	@ 0x78
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80012c2:	2246      	movs	r2, #70	@ 0x46
 80012c4:	21b4      	movs	r1, #180	@ 0xb4
 80012c6:	2078      	movs	r0, #120	@ 0x78
 80012c8:	f7ff fd30 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 80012cc:	231f      	movs	r3, #31
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	238c      	movs	r3, #140	@ 0x8c
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80012de:	225a      	movs	r2, #90	@ 0x5a
 80012e0:	21b4      	movs	r1, #180	@ 0xb4
 80012e2:	208c      	movs	r0, #140	@ 0x8c
 80012e4:	f7ff fd22 	bl	8000d2c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 80012e8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2378      	movs	r3, #120	@ 0x78
 80012f0:	22c8      	movs	r2, #200	@ 0xc8
 80012f2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80012f6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80012fa:	f7ff fd3f 	bl	8000d7c <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 80012fe:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f240 237e 	movw	r3, #638	@ 0x27e
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001314:	f240 224e 	movw	r2, #590	@ 0x24e
 8001318:	21fa      	movs	r1, #250	@ 0xfa
 800131a:	f240 204e 	movw	r0, #590	@ 0x24e
 800131e:	f7ff fd05 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 8001322:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	23ae      	movs	r3, #174	@ 0xae
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001336:	22d4      	movs	r2, #212	@ 0xd4
 8001338:	21fa      	movs	r1, #250	@ 0xfa
 800133a:	20d4      	movs	r0, #212	@ 0xd4
 800133c:	f7ff fcf6 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 8001340:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2382      	movs	r3, #130	@ 0x82
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f240 13db 	movw	r3, #475	@ 0x1db
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	23c0      	movs	r3, #192	@ 0xc0
 8001352:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001356:	21af      	movs	r1, #175	@ 0xaf
 8001358:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800135c:	f7ff fce6 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001360:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2382      	movs	r3, #130	@ 0x82
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f240 1345 	movw	r3, #325	@ 0x145
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	23c0      	movs	r3, #192	@ 0xc0
 8001372:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001376:	21af      	movs	r1, #175	@ 0xaf
 8001378:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800137c:	f7ff fcd6 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001380:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001396:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800139a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800139e:	f240 200a 	movw	r0, #522	@ 0x20a
 80013a2:	f7ff fcc3 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 80013a6:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80013bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013c0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80013c4:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80013c8:	f7ff fcb0 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 80013cc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	23be      	movs	r3, #190	@ 0xbe
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	23c0      	movs	r3, #192	@ 0xc0
 80013de:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80013e2:	21fa      	movs	r1, #250	@ 0xfa
 80013e4:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80013e8:	f7ff fca0 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 80013ec:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	23be      	movs	r3, #190	@ 0xbe
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	23dc      	movs	r3, #220	@ 0xdc
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	23c0      	movs	r3, #192	@ 0xc0
 80013fc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001400:	21fa      	movs	r1, #250	@ 0xfa
 8001402:	20d4      	movs	r0, #212	@ 0xd4
 8001404:	f7ff fc92 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8001408:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800141e:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001422:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001426:	f44f 7014 	mov.w	r0, #592	@ 0x250
 800142a:	f7ff fc7f 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 800142e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001444:	22d4      	movs	r2, #212	@ 0xd4
 8001446:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800144a:	20dc      	movs	r0, #220	@ 0xdc
 800144c:	f7ff fc6e 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 8001450:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	237c      	movs	r3, #124	@ 0x7c
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001464:	22e8      	movs	r2, #232	@ 0xe8
 8001466:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800146a:	20ca      	movs	r0, #202	@ 0xca
 800146c:	f7ff fc5e 	bl	8000d2c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	230a      	movs	r3, #10
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2346      	movs	r3, #70	@ 0x46
 800147c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001480:	21cd      	movs	r1, #205	@ 0xcd
 8001482:	20fa      	movs	r0, #250	@ 0xfa
 8001484:	f7ff fc9c 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	230a      	movs	r3, #10
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2346      	movs	r3, #70	@ 0x46
 8001494:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001498:	f240 1127 	movw	r1, #295	@ 0x127
 800149c:	20fa      	movs	r0, #250	@ 0xfa
 800149e:	f7ff fc8f 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2307      	movs	r3, #7
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2332      	movs	r3, #50	@ 0x32
 80014ac:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80014b0:	21d7      	movs	r1, #215	@ 0xd7
 80014b2:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80014b6:	f7ff fc83 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 80014ba:	2300      	movs	r3, #0
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2307      	movs	r3, #7
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2332      	movs	r3, #50	@ 0x32
 80014c4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80014c8:	f240 1131 	movw	r1, #305	@ 0x131
 80014cc:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80014d0:	f7ff fc76 	bl	8000dc0 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 80014d4:	f7ff fca0 	bl	8000e18 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 80014d8:	2100      	movs	r1, #0
 80014da:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80014de:	f7ff fcfe 	bl	8000ede <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 80014e2:	21d7      	movs	r1, #215	@ 0xd7
 80014e4:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80014e8:	f7ff fcbb 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff fd53 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 80014f2:	210a      	movs	r1, #10
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <end_game+0x378>)
 80014f6:	f7ff fd79 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 80014fa:	f240 1131 	movw	r1, #305	@ 0x131
 80014fe:	f240 1063 	movw	r0, #355	@ 0x163
 8001502:	f7ff fcae 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8001506:	2104      	movs	r1, #4
 8001508:	4806      	ldr	r0, [pc, #24]	@ (8001524 <end_game+0x37c>)
 800150a:	f7ff fd6f 	bl	8000fec <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 800150e:	211f      	movs	r1, #31
 8001510:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001514:	f7ff fce3 	bl	8000ede <RA8875_text_color>
 8001518:	e006      	b.n	8001528 <end_game+0x380>
 800151a:	bf00      	nop
 800151c:	24000268 	.word	0x24000268
 8001520:	0800e9ec 	.word	0x0800e9ec
 8001524:	0800e9f8 	.word	0x0800e9f8
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8001528:	2114      	movs	r1, #20
 800152a:	f240 1001 	movw	r0, #257	@ 0x101
 800152e:	f7ff fc98 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8001532:	2003      	movs	r0, #3
 8001534:	f7ff fd30 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8001538:	2104      	movs	r1, #4
 800153a:	4849      	ldr	r0, [pc, #292]	@ (8001660 <end_game+0x4b8>)
 800153c:	f7ff fd56 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 8001540:	2114      	movs	r1, #20
 8001542:	f240 1095 	movw	r0, #405	@ 0x195
 8001546:	f7ff fc8c 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 800154a:	2104      	movs	r1, #4
 800154c:	4845      	ldr	r0, [pc, #276]	@ (8001664 <end_game+0x4bc>)
 800154e:	f7ff fd4d 	bl	8000fec <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8001552:	211f      	movs	r1, #31
 8001554:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001558:	f7ff fcc1 	bl	8000ede <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	200a      	movs	r0, #10
 8001560:	f7ff fc7f 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fd17 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 800156a:	2106      	movs	r1, #6
 800156c:	483e      	ldr	r0, [pc, #248]	@ (8001668 <end_game+0x4c0>)
 800156e:	f7ff fd3d 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 8001572:	2100      	movs	r1, #0
 8001574:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001578:	f7ff fc73 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 800157c:	210b      	movs	r1, #11
 800157e:	483b      	ldr	r0, [pc, #236]	@ (800166c <end_game+0x4c4>)
 8001580:	f7ff fd34 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8001584:	2137      	movs	r1, #55	@ 0x37
 8001586:	200a      	movs	r0, #10
 8001588:	f7ff fc6b 	bl	8000e62 <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <end_game+0x4c8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4938      	ldr	r1, [pc, #224]	@ (8001674 <end_game+0x4cc>)
 8001594:	4618      	mov	r0, r3
 8001596:	f00c fd43 	bl	800e020 <siprintf>
	RA8875_text_write(buffer, 3);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2103      	movs	r1, #3
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd24 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 80015a4:	2137      	movs	r1, #55	@ 0x37
 80015a6:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80015aa:	f7ff fc5a 	bl	8000e62 <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <end_game+0x4c8>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <end_game+0x4d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dd03      	ble.n	80015c2 <end_game+0x41a>
 80015ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <end_game+0x4c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <end_game+0x4d0>)
 80015c0:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 80015c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <end_game+0x4d0>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	492a      	ldr	r1, [pc, #168]	@ (8001674 <end_game+0x4cc>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00c fd28 	bl	800e020 <siprintf>
	RA8875_text_write(buffer, 3);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2103      	movs	r1, #3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd09 	bl	8000fec <RA8875_text_write>
	RA8875_graphic_mode();
 80015da:	f7fe ffcb 	bl	8000574 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 80015de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	2332      	movs	r3, #50	@ 0x32
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	23df      	movs	r3, #223	@ 0xdf
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2332      	movs	r3, #50	@ 0x32
 80015ee:	22ee      	movs	r2, #238	@ 0xee
 80015f0:	210a      	movs	r1, #10
 80015f2:	20e7      	movs	r0, #231	@ 0xe7
 80015f4:	f7ff fb9a 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 80015f8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2332      	movs	r3, #50	@ 0x32
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	23e6      	movs	r3, #230	@ 0xe6
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2332      	movs	r3, #50	@ 0x32
 8001608:	22f5      	movs	r2, #245	@ 0xf5
 800160a:	2155      	movs	r1, #85	@ 0x55
 800160c:	20ee      	movs	r0, #238	@ 0xee
 800160e:	f7ff fb8d 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8001612:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	2332      	movs	r3, #50	@ 0x32
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f240 2337 	movw	r3, #567	@ 0x237
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2332      	movs	r3, #50	@ 0x32
 8001624:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8001628:	210a      	movs	r1, #10
 800162a:	f240 202f 	movw	r0, #559	@ 0x22f
 800162e:	f7ff fb7d 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 8001632:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2332      	movs	r3, #50	@ 0x32
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2332      	movs	r3, #50	@ 0x32
 8001644:	f240 2221 	movw	r2, #545	@ 0x221
 8001648:	2155      	movs	r1, #85	@ 0x55
 800164a:	f44f 700a 	mov.w	r0, #552	@ 0x228
 800164e:	f7ff fb6d 	bl	8000d2c <RA8875_draw_fill_triangle>

	score = 0;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <end_game+0x4c8>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

	return;
 8001658:	bf00      	nop
}
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0800ea28 	.word	0x0800ea28
 8001664:	0800ea30 	.word	0x0800ea30
 8001668:	0800ea38 	.word	0x0800ea38
 800166c:	0800ea40 	.word	0x0800ea40
 8001670:	2400026c 	.word	0x2400026c
 8001674:	0800ea4c 	.word	0x0800ea4c
 8001678:	24000270 	.word	0x24000270

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f000 febf 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f81d 	bl	80016c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800168a:	f000 f885 	bl	8001798 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168e:	f000 f9df 	bl	8001a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001692:	f000 f9b5 	bl	8001a00 <MX_DMA_Init>
  MX_SPI1_Init();
 8001696:	f000 f8cf 	bl	8001838 <MX_SPI1_Init>
  MX_SPI2_Init();
 800169a:	f000 f923 	bl	80018e4 <MX_SPI2_Init>
  MX_FATFS_Init();
 800169e:	f009 fdd9 	bl	800b254 <MX_FATFS_Init>
  MX_TIM6_Init();
 80016a2:	f000 f975 	bl	8001990 <MX_TIM6_Init>
  MX_I2S3_Init();
 80016a6:	f000 f895 	bl	80017d4 <MX_I2S3_Init>
//
//  RA8875_pwm1_out(255);
//  RA8875_fill_screen(RA8875_RED);
//
//  title_screen();
  game_matrix();
 80016aa:	f7ff fd6f 	bl	800118c <game_matrix>
  HAL_GPIO_WritePin(LEDY_GPIO_Port, LEDY_Pin, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2101      	movs	r1, #1
 80016b2:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <main+0x44>)
 80016b4:	f004 f870 	bl	8005798 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
  uint8_t pdata = 0x55;
 80016b8:	2355      	movs	r3, #85	@ 0x55
 80016ba:	71fb      	strb	r3, [r7, #7]
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <main+0x40>
 80016c0:	58021000 	.word	0x58021000

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b09c      	sub	sp, #112	@ 0x70
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ce:	224c      	movs	r2, #76	@ 0x4c
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00c fcc4 	bl	800e060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2220      	movs	r2, #32
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00c fcbe 	bl	800e060 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f004 f993 	bl	8005a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <SystemClock_Config+0xcc>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <SystemClock_Config+0xcc>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <SystemClock_Config+0xcc>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <SystemClock_Config+0xd0>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <SystemClock_Config+0xd0>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <SystemClock_Config+0xd0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001720:	bf00      	nop
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <SystemClock_Config+0xd0>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800172e:	d1f8      	bne.n	8001722 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8001734:	2311      	movs	r3, #17
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2340      	movs	r3, #64	@ 0x40
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001744:	4618      	mov	r0, r3
 8001746:	f004 f99d 	bl	8005a84 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001750:	f000 fa72 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	233f      	movs	r3, #63	@ 0x3f
 8001756:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fddd 	bl	8006338 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001784:	f000 fa58 	bl	8001c38 <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3770      	adds	r7, #112	@ 0x70
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	58000400 	.word	0x58000400
 8001794:	58024800 	.word	0x58024800

08001798 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0b0      	sub	sp, #192	@ 0xc0
 800179c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	22c0      	movs	r2, #192	@ 0xc0
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c fc5b 	bl	800e060 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80017aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 f931 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80017c8:	f000 fa36 	bl	8001c38 <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	37c0      	adds	r7, #192	@ 0xc0
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017da:	4a16      	ldr	r2, [pc, #88]	@ (8001834 <MX_I2S3_Init+0x60>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_I2S3_Init+0x5c>)
 80017f8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80017fc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_I2S3_Init+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_I2S3_Init+0x5c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_I2S3_Init+0x5c>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_I2S3_Init+0x5c>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_I2S3_Init+0x5c>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_I2S3_Init+0x5c>)
 800181e:	f003 ffd5 	bl	80057cc <HAL_I2S_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8001828:	f000 fa06 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	24000274 	.word	0x24000274
 8001834:	40003c00 	.word	0x40003c00

08001838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800183e:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <MX_SPI1_Init+0xa8>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001844:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001852:	2207      	movs	r2, #7
 8001854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185c:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001864:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800186c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <MX_SPI1_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_SPI1_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_SPI1_Init+0xa4>)
 80018c8:	f007 fdaa 	bl	8009420 <HAL_SPI_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80018d2:	f000 f9b1 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	240002c8 	.word	0x240002c8
 80018e0:	40013000 	.word	0x40013000

080018e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_SPI2_Init+0xa4>)
 80018ea:	4a28      	ldr	r2, [pc, #160]	@ (800198c <MX_SPI2_Init+0xa8>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <MX_SPI2_Init+0xa4>)
 80018f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_SPI2_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_SPI2_Init+0xa4>)
 80018fe:	2207      	movs	r2, #7
 8001900:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_SPI2_Init+0xa4>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001910:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001914:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001918:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800191c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_SPI2_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_SPI2_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001958:	2200      	movs	r2, #0
 800195a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_SPI2_Init+0xa4>)
 800195e:	2200      	movs	r2, #0
 8001960:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001964:	2200      	movs	r2, #0
 8001966:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <MX_SPI2_Init+0xa4>)
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <MX_SPI2_Init+0xa4>)
 8001976:	f007 fd53 	bl	8009420 <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001980:	f000 f95a 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	24000350 	.word	0x24000350
 800198c:	40003800 	.word	0x40003800

08001990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019a2:	4a16      	ldr	r2, [pc, #88]	@ (80019fc <MX_TIM6_Init+0x6c>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019a8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80019ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019c2:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019c4:	f009 f935 	bl	800ac32 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019ce:	f000 f933 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019d2:	2320      	movs	r3, #32
 80019d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	@ (80019f8 <MX_TIM6_Init+0x68>)
 80019e0:	f009 fb8c 	bl	800b0fc <HAL_TIMEx_MasterConfigSynchronization>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019ea:	f000 f925 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	240004c8 	.word	0x240004c8
 80019fc:	40001000 	.word	0x40001000

08001a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_DMA_Init+0x4c>)
 8001a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <MX_DMA_Init+0x4c>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <MX_DMA_Init+0x4c>)
 8001a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	200b      	movs	r0, #11
 8001a2a:	f000 fe88 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a2e:	200b      	movs	r0, #11
 8001a30:	f000 fe9f 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f000 fe80 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a3e:	200c      	movs	r0, #12
 8001a40:	f000 fe97 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	58024400 	.word	0x58024400

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	4a6c      	ldr	r2, [pc, #432]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a76:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	4a65      	ldr	r2, [pc, #404]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a94:	4b62      	ldr	r3, [pc, #392]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac0:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ade:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aee:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <MX_GPIO_Init+0x1d0>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2110      	movs	r1, #16
 8001b00:	4848      	ldr	r0, [pc, #288]	@ (8001c24 <MX_GPIO_Init+0x1d4>)
 8001b02:	f003 fe49 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2120      	movs	r1, #32
 8001b0a:	4847      	ldr	r0, [pc, #284]	@ (8001c28 <MX_GPIO_Init+0x1d8>)
 8001b0c:	f003 fe44 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b16:	4845      	ldr	r0, [pc, #276]	@ (8001c2c <MX_GPIO_Init+0x1dc>)
 8001b18:	f003 fe3e 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	21e0      	movs	r1, #224	@ 0xe0
 8001b20:	4843      	ldr	r0, [pc, #268]	@ (8001c30 <MX_GPIO_Init+0x1e0>)
 8001b22:	f003 fe39 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b2c:	483f      	ldr	r0, [pc, #252]	@ (8001c2c <MX_GPIO_Init+0x1dc>)
 8001b2e:	f003 fe33 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2103      	movs	r1, #3
 8001b36:	483f      	ldr	r0, [pc, #252]	@ (8001c34 <MX_GPIO_Init+0x1e4>)
 8001b38:	f003 fe2e 	bl	8005798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4834      	ldr	r0, [pc, #208]	@ (8001c24 <MX_GPIO_Init+0x1d4>)
 8001b54:	f003 fc70 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8001b58:	2310      	movs	r3, #16
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	482f      	ldr	r0, [pc, #188]	@ (8001c28 <MX_GPIO_Init+0x1d8>)
 8001b6c:	f003 fc64 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001b70:	2320      	movs	r3, #32
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4828      	ldr	r0, [pc, #160]	@ (8001c28 <MX_GPIO_Init+0x1d8>)
 8001b88:	f003 fc56 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4821      	ldr	r0, [pc, #132]	@ (8001c2c <MX_GPIO_Init+0x1dc>)
 8001ba6:	f003 fc47 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001baa:	231f      	movs	r3, #31
 8001bac:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481c      	ldr	r0, [pc, #112]	@ (8001c30 <MX_GPIO_Init+0x1e0>)
 8001bbe:	f003 fc3b 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8001bc2:	23e0      	movs	r3, #224	@ 0xe0
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4815      	ldr	r0, [pc, #84]	@ (8001c30 <MX_GPIO_Init+0x1e0>)
 8001bda:	f003 fc2d 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDG_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin;
 8001bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDG_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_GPIO_Init+0x1dc>)
 8001bf8:	f003 fc1e 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <MX_GPIO_Init+0x1e4>)
 8001c14:	f003 fc10 	bl	8005438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	@ 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58020000 	.word	0x58020000
 8001c28:	58020800 	.word	0x58020800
 8001c2c:	58020400 	.word	0x58020400
 8001c30:	58020c00 	.word	0x58020c00
 8001c34:	58021000 	.word	0x58021000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_MspInit+0x30>)
 8001c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c50:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_MspInit+0x30>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_MspInit+0x30>)
 8001c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	58024400 	.word	0x58024400

08001c78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0bc      	sub	sp, #240	@ 0xf0
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	22c0      	movs	r2, #192	@ 0xc0
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00c f9e1 	bl	800e060 <memset>
  if(hi2s->Instance==SPI3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd4 <HAL_I2S_MspInit+0x15c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	f040 8090 	bne.w	8001dca <HAL_I2S_MspInit+0x152>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001caa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001cb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cba:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbc:	f107 0318 	add.w	r3, r7, #24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 feaf 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001ccc:	f7ff ffb4 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cd0:	4b41      	ldr	r3, [pc, #260]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd6:	4a40      	ldr	r2, [pc, #256]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf4:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d12:	4a31      	ldr	r2, [pc, #196]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <HAL_I2S_MspInit+0x160>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d60:	2307      	movs	r3, #7
 8001d62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481b      	ldr	r0, [pc, #108]	@ (8001ddc <HAL_I2S_MspInit+0x164>)
 8001d6e:	f003 fb63 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d96:	4619      	mov	r1, r3
 8001d98:	4811      	ldr	r0, [pc, #68]	@ (8001de0 <HAL_I2S_MspInit+0x168>)
 8001d9a:	f003 fb4d 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db8:	2306      	movs	r3, #6
 8001dba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	@ (8001de4 <HAL_I2S_MspInit+0x16c>)
 8001dc6:	f003 fb37 	bl	8005438 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	37f0      	adds	r7, #240	@ 0xf0
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40003c00 	.word	0x40003c00
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58020000 	.word	0x58020000
 8001de4:	58020800 	.word	0x58020800

08001de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0be      	sub	sp, #248	@ 0xf8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	22c0      	movs	r2, #192	@ 0xc0
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00c f929 	bl	800e060 <memset>
  if(hspi->Instance==SPI1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4aa3      	ldr	r2, [pc, #652]	@ (80020a0 <HAL_SPI_MspInit+0x2b8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d16b      	bne.n	8001ef0 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001e24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fdf7 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001e3c:	f7ff fefc 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e40:	4b98      	ldr	r3, [pc, #608]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e46:	4a97      	ldr	r2, [pc, #604]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e50:	4b94      	ldr	r3, [pc, #592]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4a8f      	ldr	r2, [pc, #572]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e82:	4a88      	ldr	r2, [pc, #544]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8c:	4b85      	ldr	r3, [pc, #532]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	23c0      	movs	r3, #192	@ 0xc0
 8001e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	487a      	ldr	r0, [pc, #488]	@ (80020a8 <HAL_SPI_MspInit+0x2c0>)
 8001ec0:	f003 faba 	bl	8005438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001edc:	2305      	movs	r3, #5
 8001ede:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4870      	ldr	r0, [pc, #448]	@ (80020ac <HAL_SPI_MspInit+0x2c4>)
 8001eea:	f003 faa5 	bl	8005438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001eee:	e0d3      	b.n	8002098 <HAL_SPI_MspInit+0x2b0>
  else if(hspi->Instance==SPI2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80020b0 <HAL_SPI_MspInit+0x2c8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f040 80ce 	bne.w	8002098 <HAL_SPI_MspInit+0x2b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001efc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001f08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f10:	f107 0320 	add.w	r3, r7, #32
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fd85 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_SPI_MspInit+0x13c>
      Error_Handler();
 8001f20:	f7ff fe8a 	bl	8001c38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f24:	4b5f      	ldr	r3, [pc, #380]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f2a:	4a5e      	ldr	r2, [pc, #376]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f34:	4b5b      	ldr	r3, [pc, #364]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b58      	ldr	r3, [pc, #352]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f52:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	4a4f      	ldr	r2, [pc, #316]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f70:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_SPI_MspInit+0x2bc>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f7e:	2306      	movs	r3, #6
 8001f80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f96:	2305      	movs	r3, #5
 8001f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4844      	ldr	r0, [pc, #272]	@ (80020b4 <HAL_SPI_MspInit+0x2cc>)
 8001fa4:	f003 fa48 	bl	8005438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4837      	ldr	r0, [pc, #220]	@ (80020ac <HAL_SPI_MspInit+0x2c4>)
 8001fd0:	f003 fa32 	bl	8005438 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001fd4:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001fd6:	4a39      	ldr	r2, [pc, #228]	@ (80020bc <HAL_SPI_MspInit+0x2d4>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001fda:	4b37      	ldr	r3, [pc, #220]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001fdc:	2227      	movs	r2, #39	@ 0x27
 8001fde:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe0:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fec:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001fee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002006:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002012:	4829      	ldr	r0, [pc, #164]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8002014:	f000 fbc8 	bl	80027a8 <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 800201e:	f7ff fe0b 	bl	8001c38 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 8002026:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002028:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <HAL_SPI_MspInit+0x2d0>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 800202e:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002030:	4a24      	ldr	r2, [pc, #144]	@ (80020c4 <HAL_SPI_MspInit+0x2dc>)
 8002032:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002034:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002036:	2228      	movs	r2, #40	@ 0x28
 8002038:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800203a:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 800203c:	2240      	movs	r2, #64	@ 0x40
 800203e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002040:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002046:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002048:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800204c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204e:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002054:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800205a:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002060:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800206c:	4814      	ldr	r0, [pc, #80]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 800206e:	f000 fb9b 	bl	80027a8 <HAL_DMA_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_SPI_MspInit+0x294>
      Error_Handler();
 8002078:	f7ff fdde 	bl	8001c38 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a10      	ldr	r2, [pc, #64]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002080:	679a      	str	r2, [r3, #120]	@ 0x78
 8002082:	4a0f      	ldr	r2, [pc, #60]	@ (80020c0 <HAL_SPI_MspInit+0x2d8>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2024      	movs	r0, #36	@ 0x24
 800208e:	f000 fb56 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002092:	2024      	movs	r0, #36	@ 0x24
 8002094:	f000 fb6d 	bl	8002772 <HAL_NVIC_EnableIRQ>
}
 8002098:	bf00      	nop
 800209a:	37f8      	adds	r7, #248	@ 0xf8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013000 	.word	0x40013000
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020000 	.word	0x58020000
 80020ac:	58020400 	.word	0x58020400
 80020b0:	40003800 	.word	0x40003800
 80020b4:	58020800 	.word	0x58020800
 80020b8:	240003d8 	.word	0x240003d8
 80020bc:	40020010 	.word	0x40020010
 80020c0:	24000450 	.word	0x24000450
 80020c4:	40020028 	.word	0x40020028

080020c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <HAL_TIM_Base_MspInit+0x48>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d116      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_TIM_Base_MspInit+0x4c>)
 80020ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2101      	movs	r1, #1
 80020fc:	2036      	movs	r0, #54	@ 0x36
 80020fe:	f000 fb1e 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002102:	2036      	movs	r0, #54	@ 0x36
 8002104:	f000 fb35 	bl	8002772 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40001000 	.word	0x40001000
 8002114:	58024400 	.word	0x58024400

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
//  }
//  if (Timer2) {
//	Timer2--;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f000 f9bb 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <DMA1_Stream0_IRQHandler+0x10>)
 800217e:	f001 fe3d 	bl	8003dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	240003d8 	.word	0x240003d8

0800218c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <DMA1_Stream1_IRQHandler+0x10>)
 8002192:	f001 fe33 	bl	8003dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	24000450 	.word	0x24000450

080021a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <SPI2_IRQHandler+0x10>)
 80021a6:	f008 f9a7 	bl	800a4f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	24000350 	.word	0x24000350

080021b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ba:	481b      	ldr	r0, [pc, #108]	@ (8002228 <TIM6_DAC_IRQHandler+0x74>)
 80021bc:	f008 fdbf 	bl	800ad3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <TIM6_DAC_IRQHandler+0x78>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <TIM6_DAC_IRQHandler+0x78>)
 80021ca:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <TIM6_DAC_IRQHandler+0x78>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <TIM6_DAC_IRQHandler+0x7c>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00b ff22 	bl	800e020 <siprintf>
  RA8875_text_mode();
 80021dc:	f7fe fe1c 	bl	8000e18 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 80021e0:	2132      	movs	r1, #50	@ 0x32
 80021e2:	20c8      	movs	r0, #200	@ 0xc8
 80021e4:	f7fe fe3d 	bl	8000e62 <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80021e8:	211f      	movs	r1, #31
 80021ea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021ee:	f7fe fe76 	bl	8000ede <RA8875_text_color>
  RA8875_text_scale(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7fe fed0 	bl	8000f98 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	2102      	movs	r1, #2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fef5 	bl	8000fec <RA8875_text_write>
  RA8875_graphic_mode();
 8002202:	f7fe f9b7 	bl	8000574 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <TIM6_DAC_IRQHandler+0x78>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <TIM6_DAC_IRQHandler+0x78>)
 8002210:	220a      	movs	r2, #10
 8002212:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <TIM6_DAC_IRQHandler+0x74>)
 8002216:	f008 fd63 	bl	800ace0 <HAL_TIM_Base_Stop_IT>
	  end_game();
 800221a:	f7fe ffc5 	bl	80011a8 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	240004c8 	.word	0x240004c8
 800222c:	24000000 	.word	0x24000000
 8002230:	0800ea78 	.word	0x0800ea78

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f00b ff04 	bl	800e070 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	24080000 	.word	0x24080000
 8002294:	00000400 	.word	0x00000400
 8002298:	24000514 	.word	0x24000514
 800229c:	240006b0 	.word	0x240006b0

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022a4:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <SystemInit+0xe4>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a36      	ldr	r2, [pc, #216]	@ (8002384 <SystemInit+0xe4>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022b4:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <SystemInit+0xe8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d807      	bhi.n	80022d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022c0:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <SystemInit+0xe8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 030f 	bic.w	r3, r3, #15
 80022c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <SystemInit+0xe8>)
 80022ca:	f043 0307 	orr.w	r3, r3, #7
 80022ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <SystemInit+0xec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2d      	ldr	r2, [pc, #180]	@ (800238c <SystemInit+0xec>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <SystemInit+0xec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <SystemInit+0xec>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4929      	ldr	r1, [pc, #164]	@ (800238c <SystemInit+0xec>)
 80022e8:	4b29      	ldr	r3, [pc, #164]	@ (8002390 <SystemInit+0xf0>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <SystemInit+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <SystemInit+0xe8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 030f 	bic.w	r3, r3, #15
 8002302:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <SystemInit+0xe8>)
 8002304:	f043 0307 	orr.w	r3, r3, #7
 8002308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <SystemInit+0xec>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002310:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <SystemInit+0xec>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <SystemInit+0xec>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <SystemInit+0xec>)
 800231e:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <SystemInit+0xf4>)
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <SystemInit+0xec>)
 8002324:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <SystemInit+0xf8>)
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <SystemInit+0xec>)
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <SystemInit+0xfc>)
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800232e:	4b17      	ldr	r3, [pc, #92]	@ (800238c <SystemInit+0xec>)
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <SystemInit+0xec>)
 8002336:	4a19      	ldr	r2, [pc, #100]	@ (800239c <SystemInit+0xfc>)
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <SystemInit+0xec>)
 800233c:	2200      	movs	r2, #0
 800233e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <SystemInit+0xec>)
 8002342:	4a16      	ldr	r2, [pc, #88]	@ (800239c <SystemInit+0xfc>)
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <SystemInit+0xec>)
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <SystemInit+0xec>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <SystemInit+0xec>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <SystemInit+0xec>)
 800235a:	2200      	movs	r2, #0
 800235c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <SystemInit+0x100>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <SystemInit+0x104>)
 8002364:	4013      	ands	r3, r2
 8002366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800236a:	d202      	bcs.n	8002372 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800236c:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <SystemInit+0x108>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <SystemInit+0x10c>)
 8002374:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002378:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	52002000 	.word	0x52002000
 800238c:	58024400 	.word	0x58024400
 8002390:	eaf6ed7f 	.word	0xeaf6ed7f
 8002394:	02020200 	.word	0x02020200
 8002398:	01ff0000 	.word	0x01ff0000
 800239c:	01010280 	.word	0x01010280
 80023a0:	5c001000 	.word	0x5c001000
 80023a4:	ffff0000 	.word	0xffff0000
 80023a8:	51008108 	.word	0x51008108
 80023ac:	52004000 	.word	0x52004000

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b4:	f7ff ff74 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023de:	f00b fe4d 	bl	800e07c <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 80023e2:	f7ff f94b 	bl	800167c <main>
  bx  lr
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023f0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80023f4:	0800eb9c 	.word	0x0800eb9c
  ldr r2, =_sbss
 80023f8:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80023fc:	240006ac 	.word	0x240006ac

08002400 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC3_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240a:	2003      	movs	r0, #3
 800240c:	f000 f98c 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002410:	f004 f948 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_Init+0x68>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	4913      	ldr	r1, [pc, #76]	@ (8002470 <HAL_Init+0x6c>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <HAL_Init+0x68>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	4a0e      	ldr	r2, [pc, #56]	@ (8002470 <HAL_Init+0x6c>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_Init+0x70>)
 8002446:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002448:	4a0b      	ldr	r2, [pc, #44]	@ (8002478 <HAL_Init+0x74>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244e:	200f      	movs	r0, #15
 8002450:	f000 f814 	bl	800247c <HAL_InitTick>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e002      	b.n	8002464 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800245e:	f7ff fbf1 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	0800eac0 	.word	0x0800eac0
 8002474:	24000008 	.word	0x24000008
 8002478:	24000004 	.word	0x24000004

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_InitTick+0x60>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e021      	b.n	80024d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_InitTick+0x64>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_InitTick+0x60>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f971 	bl	800278e <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 f93b 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	@ (80024e4 <HAL_InitTick+0x68>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	24000010 	.word	0x24000010
 80024e0:	24000004 	.word	0x24000004
 80024e4:	2400000c 	.word	0x2400000c

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	24000010 	.word	0x24000010
 800250c:	24000518 	.word	0x24000518

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	24000518 	.word	0x24000518

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	24000010 	.word	0x24000010

08002570 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <HAL_GetREVID+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0c1b      	lsrs	r3, r3, #16
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	5c001000 	.word	0x5c001000

08002588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x40>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x40>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00
 80025cc:	05fa0000 	.word	0x05fa0000

080025d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	@ (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	@ (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	@ (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	@ 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff29 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff40 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff90 	bl	800267c <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5f 	bl	8002628 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff33 	bl	80025ec <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa4 	bl	80026e4 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff feae 	bl	8002510 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e316      	b.n	8002dee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a66      	ldr	r2, [pc, #408]	@ (8002960 <HAL_DMA_Init+0x1b8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_DMA_Init+0x1bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a63      	ldr	r2, [pc, #396]	@ (8002968 <HAL_DMA_Init+0x1c0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a62      	ldr	r2, [pc, #392]	@ (800296c <HAL_DMA_Init+0x1c4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a60      	ldr	r2, [pc, #384]	@ (8002970 <HAL_DMA_Init+0x1c8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002974 <HAL_DMA_Init+0x1cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5d      	ldr	r2, [pc, #372]	@ (8002978 <HAL_DMA_Init+0x1d0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5c      	ldr	r2, [pc, #368]	@ (800297c <HAL_DMA_Init+0x1d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5a      	ldr	r2, [pc, #360]	@ (8002980 <HAL_DMA_Init+0x1d8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a59      	ldr	r2, [pc, #356]	@ (8002984 <HAL_DMA_Init+0x1dc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a57      	ldr	r2, [pc, #348]	@ (8002988 <HAL_DMA_Init+0x1e0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a56      	ldr	r2, [pc, #344]	@ (800298c <HAL_DMA_Init+0x1e4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a54      	ldr	r2, [pc, #336]	@ (8002990 <HAL_DMA_Init+0x1e8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a53      	ldr	r2, [pc, #332]	@ (8002994 <HAL_DMA_Init+0x1ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a51      	ldr	r2, [pc, #324]	@ (8002998 <HAL_DMA_Init+0x1f0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Init+0xb8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a50      	ldr	r2, [pc, #320]	@ (800299c <HAL_DMA_Init+0x1f4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Init+0xbc>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_DMA_Init+0xbe>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 813b 	beq.w	8002ae2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a37      	ldr	r2, [pc, #220]	@ (8002960 <HAL_DMA_Init+0x1b8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d04a      	beq.n	800291c <HAL_DMA_Init+0x174>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_DMA_Init+0x1bc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d045      	beq.n	800291c <HAL_DMA_Init+0x174>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <HAL_DMA_Init+0x1c0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d040      	beq.n	800291c <HAL_DMA_Init+0x174>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a33      	ldr	r2, [pc, #204]	@ (800296c <HAL_DMA_Init+0x1c4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d03b      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_DMA_Init+0x1c8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d036      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <HAL_DMA_Init+0x1cc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d031      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002978 <HAL_DMA_Init+0x1d0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02c      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <HAL_DMA_Init+0x1d4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d027      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002980 <HAL_DMA_Init+0x1d8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_DMA_Init+0x1dc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d01d      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_DMA_Init+0x1e0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d018      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a27      	ldr	r2, [pc, #156]	@ (800298c <HAL_DMA_Init+0x1e4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <HAL_DMA_Init+0x1e8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_DMA_Init+0x174>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a24      	ldr	r2, [pc, #144]	@ (8002994 <HAL_DMA_Init+0x1ec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_DMA_Init+0x174>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a22      	ldr	r2, [pc, #136]	@ (8002998 <HAL_DMA_Init+0x1f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_DMA_Init+0x174>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_DMA_Init+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <HAL_DMA_Init+0x186>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e007      	b.n	800293e <HAL_DMA_Init+0x196>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800293e:	e02f      	b.n	80029a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002940:	f7ff fde6 	bl	8002510 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d928      	bls.n	80029a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e246      	b.n	8002dee <HAL_DMA_Init+0x646>
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1c8      	bne.n	8002940 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4b83      	ldr	r3, [pc, #524]	@ (8002bc8 <HAL_DMA_Init+0x420>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	4313      	orrs	r3, r2
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a04:	4b71      	ldr	r3, [pc, #452]	@ (8002bcc <HAL_DMA_Init+0x424>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b71      	ldr	r3, [pc, #452]	@ (8002bd0 <HAL_DMA_Init+0x428>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a10:	d328      	bcc.n	8002a64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b28      	cmp	r3, #40	@ 0x28
 8002a18:	d903      	bls.n	8002a22 <HAL_DMA_Init+0x27a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a20:	d917      	bls.n	8002a52 <HAL_DMA_Init+0x2aa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a28:	d903      	bls.n	8002a32 <HAL_DMA_Init+0x28a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b42      	cmp	r3, #66	@ 0x42
 8002a30:	d90f      	bls.n	8002a52 <HAL_DMA_Init+0x2aa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b46      	cmp	r3, #70	@ 0x46
 8002a38:	d903      	bls.n	8002a42 <HAL_DMA_Init+0x29a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b48      	cmp	r3, #72	@ 0x48
 8002a40:	d907      	bls.n	8002a52 <HAL_DMA_Init+0x2aa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b4e      	cmp	r3, #78	@ 0x4e
 8002a48:	d905      	bls.n	8002a56 <HAL_DMA_Init+0x2ae>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b52      	cmp	r3, #82	@ 0x52
 8002a50:	d801      	bhi.n	8002a56 <HAL_DMA_Init+0x2ae>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_DMA_Init+0x2b0>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d117      	bne.n	8002abe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f002 fb3f 	bl	8005124 <DMA_CheckFifoParam>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e197      	b.n	8002dee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f002 fa7a 	bl	8004fc0 <DMA_CalcBaseAndBitshift>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	223f      	movs	r2, #63	@ 0x3f
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	e0cd      	b.n	8002c7e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_DMA_Init+0x42c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a39      	ldr	r2, [pc, #228]	@ (8002bd8 <HAL_DMA_Init+0x430>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01d      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a38      	ldr	r2, [pc, #224]	@ (8002bdc <HAL_DMA_Init+0x434>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d018      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a36      	ldr	r2, [pc, #216]	@ (8002be0 <HAL_DMA_Init+0x438>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a35      	ldr	r2, [pc, #212]	@ (8002be4 <HAL_DMA_Init+0x43c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a33      	ldr	r2, [pc, #204]	@ (8002be8 <HAL_DMA_Init+0x440>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a32      	ldr	r2, [pc, #200]	@ (8002bec <HAL_DMA_Init+0x444>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_DMA_Init+0x38a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a30      	ldr	r2, [pc, #192]	@ (8002bf0 <HAL_DMA_Init+0x448>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_DMA_Init+0x38e>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_DMA_Init+0x390>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8097 	beq.w	8002c6c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	@ (8002bd4 <HAL_DMA_Init+0x42c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d021      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_DMA_Init+0x430>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01c      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <HAL_DMA_Init+0x434>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d017      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	@ (8002be0 <HAL_DMA_Init+0x438>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d012      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002be4 <HAL_DMA_Init+0x43c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00d      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_DMA_Init+0x440>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d008      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bec <HAL_DMA_Init+0x444>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_Init+0x3e4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_DMA_Init+0x448>)
 8002b8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_DMA_Init+0x44c>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b40      	cmp	r3, #64	@ 0x40
 8002bb2:	d021      	beq.n	8002bf8 <HAL_DMA_Init+0x450>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b80      	cmp	r3, #128	@ 0x80
 8002bba:	d102      	bne.n	8002bc2 <HAL_DMA_Init+0x41a>
 8002bbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bc0:	e01b      	b.n	8002bfa <HAL_DMA_Init+0x452>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e019      	b.n	8002bfa <HAL_DMA_Init+0x452>
 8002bc6:	bf00      	nop
 8002bc8:	fe10803f 	.word	0xfe10803f
 8002bcc:	5c001000 	.word	0x5c001000
 8002bd0:	ffff0000 	.word	0xffff0000
 8002bd4:	58025408 	.word	0x58025408
 8002bd8:	5802541c 	.word	0x5802541c
 8002bdc:	58025430 	.word	0x58025430
 8002be0:	58025444 	.word	0x58025444
 8002be4:	58025458 	.word	0x58025458
 8002be8:	5802546c 	.word	0x5802546c
 8002bec:	58025480 	.word	0x58025480
 8002bf0:	58025494 	.word	0x58025494
 8002bf4:	fffe000f 	.word	0xfffe000f
 8002bf8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002df8 <HAL_DMA_Init+0x650>)
 8002c40:	4413      	add	r3, r2
 8002c42:	4a6e      	ldr	r2, [pc, #440]	@ (8002dfc <HAL_DMA_Init+0x654>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f002 f9b5 	bl	8004fc0 <DMA_CalcBaseAndBitshift>
 8002c56:	4603      	mov	r3, r0
 8002c58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2201      	movs	r2, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	e008      	b.n	8002c7e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2240      	movs	r2, #64	@ 0x40
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0b7      	b.n	8002dee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5f      	ldr	r2, [pc, #380]	@ (8002e00 <HAL_DMA_Init+0x658>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d072      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <HAL_DMA_Init+0x65c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d06d      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5c      	ldr	r2, [pc, #368]	@ (8002e08 <HAL_DMA_Init+0x660>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d068      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e0c <HAL_DMA_Init+0x664>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d063      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a59      	ldr	r2, [pc, #356]	@ (8002e10 <HAL_DMA_Init+0x668>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d05e      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_DMA_Init+0x66c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d059      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_DMA_Init+0x670>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d054      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a54      	ldr	r2, [pc, #336]	@ (8002e1c <HAL_DMA_Init+0x674>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04f      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a53      	ldr	r2, [pc, #332]	@ (8002e20 <HAL_DMA_Init+0x678>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04a      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	@ (8002e24 <HAL_DMA_Init+0x67c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d045      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a50      	ldr	r2, [pc, #320]	@ (8002e28 <HAL_DMA_Init+0x680>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d040      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e2c <HAL_DMA_Init+0x684>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d03b      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8002e30 <HAL_DMA_Init+0x688>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d036      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a4b      	ldr	r2, [pc, #300]	@ (8002e34 <HAL_DMA_Init+0x68c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d031      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e38 <HAL_DMA_Init+0x690>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d02c      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a48      	ldr	r2, [pc, #288]	@ (8002e3c <HAL_DMA_Init+0x694>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d027      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a47      	ldr	r2, [pc, #284]	@ (8002e40 <HAL_DMA_Init+0x698>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a45      	ldr	r2, [pc, #276]	@ (8002e44 <HAL_DMA_Init+0x69c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a44      	ldr	r2, [pc, #272]	@ (8002e48 <HAL_DMA_Init+0x6a0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	@ (8002e4c <HAL_DMA_Init+0x6a4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a41      	ldr	r2, [pc, #260]	@ (8002e50 <HAL_DMA_Init+0x6a8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3f      	ldr	r2, [pc, #252]	@ (8002e54 <HAL_DMA_Init+0x6ac>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e58 <HAL_DMA_Init+0x6b0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Init+0x5c6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	@ (8002e5c <HAL_DMA_Init+0x6b4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Init+0x5ca>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_DMA_Init+0x5cc>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d032      	beq.n	8002dde <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f002 fa4f 	bl	800521c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	d102      	bne.n	8002d8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002da0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_DMA_Init+0x624>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d80c      	bhi.n	8002dcc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f002 facc 	bl	8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	e008      	b.n	8002dde <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	a7fdabf8 	.word	0xa7fdabf8
 8002dfc:	cccccccd 	.word	0xcccccccd
 8002e00:	40020010 	.word	0x40020010
 8002e04:	40020028 	.word	0x40020028
 8002e08:	40020040 	.word	0x40020040
 8002e0c:	40020058 	.word	0x40020058
 8002e10:	40020070 	.word	0x40020070
 8002e14:	40020088 	.word	0x40020088
 8002e18:	400200a0 	.word	0x400200a0
 8002e1c:	400200b8 	.word	0x400200b8
 8002e20:	40020410 	.word	0x40020410
 8002e24:	40020428 	.word	0x40020428
 8002e28:	40020440 	.word	0x40020440
 8002e2c:	40020458 	.word	0x40020458
 8002e30:	40020470 	.word	0x40020470
 8002e34:	40020488 	.word	0x40020488
 8002e38:	400204a0 	.word	0x400204a0
 8002e3c:	400204b8 	.word	0x400204b8
 8002e40:	58025408 	.word	0x58025408
 8002e44:	5802541c 	.word	0x5802541c
 8002e48:	58025430 	.word	0x58025430
 8002e4c:	58025444 	.word	0x58025444
 8002e50:	58025458 	.word	0x58025458
 8002e54:	5802546c 	.word	0x5802546c
 8002e58:	58025480 	.word	0x58025480
 8002e5c:	58025494 	.word	0x58025494

08002e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e226      	b.n	80032ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Start_IT+0x2a>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e21f      	b.n	80032ca <HAL_DMA_Start_IT+0x46a>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	f040 820a 	bne.w	80032b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a68      	ldr	r2, [pc, #416]	@ (8003054 <HAL_DMA_Start_IT+0x1f4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d04a      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a66      	ldr	r2, [pc, #408]	@ (8003058 <HAL_DMA_Start_IT+0x1f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d045      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a65      	ldr	r2, [pc, #404]	@ (800305c <HAL_DMA_Start_IT+0x1fc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d040      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a63      	ldr	r2, [pc, #396]	@ (8003060 <HAL_DMA_Start_IT+0x200>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d03b      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a62      	ldr	r2, [pc, #392]	@ (8003064 <HAL_DMA_Start_IT+0x204>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d036      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a60      	ldr	r2, [pc, #384]	@ (8003068 <HAL_DMA_Start_IT+0x208>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d031      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5f      	ldr	r2, [pc, #380]	@ (800306c <HAL_DMA_Start_IT+0x20c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d02c      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8003070 <HAL_DMA_Start_IT+0x210>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d027      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5c      	ldr	r2, [pc, #368]	@ (8003074 <HAL_DMA_Start_IT+0x214>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d022      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003078 <HAL_DMA_Start_IT+0x218>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a59      	ldr	r2, [pc, #356]	@ (800307c <HAL_DMA_Start_IT+0x21c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d018      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a57      	ldr	r2, [pc, #348]	@ (8003080 <HAL_DMA_Start_IT+0x220>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a56      	ldr	r2, [pc, #344]	@ (8003084 <HAL_DMA_Start_IT+0x224>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a54      	ldr	r2, [pc, #336]	@ (8003088 <HAL_DMA_Start_IT+0x228>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a53      	ldr	r2, [pc, #332]	@ (800308c <HAL_DMA_Start_IT+0x22c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a51      	ldr	r2, [pc, #324]	@ (8003090 <HAL_DMA_Start_IT+0x230>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d108      	bne.n	8002f60 <HAL_DMA_Start_IT+0x100>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e007      	b.n	8002f70 <HAL_DMA_Start_IT+0x110>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f001 fe76 	bl	8004c68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	@ (8003054 <HAL_DMA_Start_IT+0x1f4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a33      	ldr	r2, [pc, #204]	@ (8003058 <HAL_DMA_Start_IT+0x1f8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d045      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a31      	ldr	r2, [pc, #196]	@ (800305c <HAL_DMA_Start_IT+0x1fc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d040      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a30      	ldr	r2, [pc, #192]	@ (8003060 <HAL_DMA_Start_IT+0x200>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03b      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <HAL_DMA_Start_IT+0x204>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d036      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003068 <HAL_DMA_Start_IT+0x208>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d031      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <HAL_DMA_Start_IT+0x20c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02c      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <HAL_DMA_Start_IT+0x210>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d027      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <HAL_DMA_Start_IT+0x214>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a27      	ldr	r2, [pc, #156]	@ (8003078 <HAL_DMA_Start_IT+0x218>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01d      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a25      	ldr	r2, [pc, #148]	@ (800307c <HAL_DMA_Start_IT+0x21c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a24      	ldr	r2, [pc, #144]	@ (8003080 <HAL_DMA_Start_IT+0x220>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	@ (8003084 <HAL_DMA_Start_IT+0x224>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a21      	ldr	r2, [pc, #132]	@ (8003088 <HAL_DMA_Start_IT+0x228>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_DMA_Start_IT+0x22c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_DMA_Start_IT+0x1bc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_DMA_Start_IT+0x230>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Start_IT+0x1c0>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_DMA_Start_IT+0x1c2>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 021e 	bic.w	r2, r3, #30
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0216 	orr.w	r2, r2, #22
 8003038:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03e      	beq.n	80030c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0208 	orr.w	r2, r2, #8
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e035      	b.n	80030c0 <HAL_DMA_Start_IT+0x260>
 8003054:	40020010 	.word	0x40020010
 8003058:	40020028 	.word	0x40020028
 800305c:	40020040 	.word	0x40020040
 8003060:	40020058 	.word	0x40020058
 8003064:	40020070 	.word	0x40020070
 8003068:	40020088 	.word	0x40020088
 800306c:	400200a0 	.word	0x400200a0
 8003070:	400200b8 	.word	0x400200b8
 8003074:	40020410 	.word	0x40020410
 8003078:	40020428 	.word	0x40020428
 800307c:	40020440 	.word	0x40020440
 8003080:	40020458 	.word	0x40020458
 8003084:	40020470 	.word	0x40020470
 8003088:	40020488 	.word	0x40020488
 800308c:	400204a0 	.word	0x400204a0
 8003090:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020e 	bic.w	r2, r3, #14
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 020a 	orr.w	r2, r2, #10
 80030a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0204 	orr.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a83      	ldr	r2, [pc, #524]	@ (80032d4 <HAL_DMA_Start_IT+0x474>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d072      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a82      	ldr	r2, [pc, #520]	@ (80032d8 <HAL_DMA_Start_IT+0x478>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d06d      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a80      	ldr	r2, [pc, #512]	@ (80032dc <HAL_DMA_Start_IT+0x47c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d068      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7f      	ldr	r2, [pc, #508]	@ (80032e0 <HAL_DMA_Start_IT+0x480>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d063      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7d      	ldr	r2, [pc, #500]	@ (80032e4 <HAL_DMA_Start_IT+0x484>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d05e      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7c      	ldr	r2, [pc, #496]	@ (80032e8 <HAL_DMA_Start_IT+0x488>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d059      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a7a      	ldr	r2, [pc, #488]	@ (80032ec <HAL_DMA_Start_IT+0x48c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d054      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a79      	ldr	r2, [pc, #484]	@ (80032f0 <HAL_DMA_Start_IT+0x490>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d04f      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a77      	ldr	r2, [pc, #476]	@ (80032f4 <HAL_DMA_Start_IT+0x494>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d04a      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a76      	ldr	r2, [pc, #472]	@ (80032f8 <HAL_DMA_Start_IT+0x498>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d045      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a74      	ldr	r2, [pc, #464]	@ (80032fc <HAL_DMA_Start_IT+0x49c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d040      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a73      	ldr	r2, [pc, #460]	@ (8003300 <HAL_DMA_Start_IT+0x4a0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d03b      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a71      	ldr	r2, [pc, #452]	@ (8003304 <HAL_DMA_Start_IT+0x4a4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d036      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a70      	ldr	r2, [pc, #448]	@ (8003308 <HAL_DMA_Start_IT+0x4a8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d031      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_DMA_Start_IT+0x4ac>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d02c      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <HAL_DMA_Start_IT+0x4b0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d027      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_DMA_Start_IT+0x4b4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d022      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6a      	ldr	r2, [pc, #424]	@ (8003318 <HAL_DMA_Start_IT+0x4b8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d01d      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_DMA_Start_IT+0x4bc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d018      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_DMA_Start_IT+0x4c0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_DMA_Start_IT+0x4c4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00e      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a64      	ldr	r2, [pc, #400]	@ (8003328 <HAL_DMA_Start_IT+0x4c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d009      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_DMA_Start_IT+0x4cc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_DMA_Start_IT+0x350>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a61      	ldr	r2, [pc, #388]	@ (8003330 <HAL_DMA_Start_IT+0x4d0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Start_IT+0x354>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_DMA_Start_IT+0x356>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01a      	beq.n	80031f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a37      	ldr	r2, [pc, #220]	@ (80032d4 <HAL_DMA_Start_IT+0x474>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d04a      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a36      	ldr	r2, [pc, #216]	@ (80032d8 <HAL_DMA_Start_IT+0x478>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d045      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a34      	ldr	r2, [pc, #208]	@ (80032dc <HAL_DMA_Start_IT+0x47c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d040      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a33      	ldr	r2, [pc, #204]	@ (80032e0 <HAL_DMA_Start_IT+0x480>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d03b      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a31      	ldr	r2, [pc, #196]	@ (80032e4 <HAL_DMA_Start_IT+0x484>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d036      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a30      	ldr	r2, [pc, #192]	@ (80032e8 <HAL_DMA_Start_IT+0x488>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d031      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2e      	ldr	r2, [pc, #184]	@ (80032ec <HAL_DMA_Start_IT+0x48c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02c      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2d      	ldr	r2, [pc, #180]	@ (80032f0 <HAL_DMA_Start_IT+0x490>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d027      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <HAL_DMA_Start_IT+0x494>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d022      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <HAL_DMA_Start_IT+0x498>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d01d      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <HAL_DMA_Start_IT+0x49c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d018      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a27      	ldr	r2, [pc, #156]	@ (8003300 <HAL_DMA_Start_IT+0x4a0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <HAL_DMA_Start_IT+0x4a4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00e      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <HAL_DMA_Start_IT+0x4a8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d009      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_DMA_Start_IT+0x4ac>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_Start_IT+0x430>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	@ (8003310 <HAL_DMA_Start_IT+0x4b0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <HAL_DMA_Start_IT+0x442>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e012      	b.n	80032c8 <HAL_DMA_Start_IT+0x468>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e009      	b.n	80032c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40020010 	.word	0x40020010
 80032d8:	40020028 	.word	0x40020028
 80032dc:	40020040 	.word	0x40020040
 80032e0:	40020058 	.word	0x40020058
 80032e4:	40020070 	.word	0x40020070
 80032e8:	40020088 	.word	0x40020088
 80032ec:	400200a0 	.word	0x400200a0
 80032f0:	400200b8 	.word	0x400200b8
 80032f4:	40020410 	.word	0x40020410
 80032f8:	40020428 	.word	0x40020428
 80032fc:	40020440 	.word	0x40020440
 8003300:	40020458 	.word	0x40020458
 8003304:	40020470 	.word	0x40020470
 8003308:	40020488 	.word	0x40020488
 800330c:	400204a0 	.word	0x400204a0
 8003310:	400204b8 	.word	0x400204b8
 8003314:	58025408 	.word	0x58025408
 8003318:	5802541c 	.word	0x5802541c
 800331c:	58025430 	.word	0x58025430
 8003320:	58025444 	.word	0x58025444
 8003324:	58025458 	.word	0x58025458
 8003328:	5802546c 	.word	0x5802546c
 800332c:	58025480 	.word	0x58025480
 8003330:	58025494 	.word	0x58025494

08003334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800333c:	f7ff f8e8 	bl	8002510 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e2dc      	b.n	8003906 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d008      	beq.n	800336a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2280      	movs	r2, #128	@ 0x80
 800335c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e2cd      	b.n	8003906 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a76      	ldr	r2, [pc, #472]	@ (8003548 <HAL_DMA_Abort+0x214>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04a      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a74      	ldr	r2, [pc, #464]	@ (800354c <HAL_DMA_Abort+0x218>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d045      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a73      	ldr	r2, [pc, #460]	@ (8003550 <HAL_DMA_Abort+0x21c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d040      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a71      	ldr	r2, [pc, #452]	@ (8003554 <HAL_DMA_Abort+0x220>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d03b      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a70      	ldr	r2, [pc, #448]	@ (8003558 <HAL_DMA_Abort+0x224>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d036      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6e      	ldr	r2, [pc, #440]	@ (800355c <HAL_DMA_Abort+0x228>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003560 <HAL_DMA_Abort+0x22c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d02c      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003564 <HAL_DMA_Abort+0x230>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d027      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6a      	ldr	r2, [pc, #424]	@ (8003568 <HAL_DMA_Abort+0x234>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a68      	ldr	r2, [pc, #416]	@ (800356c <HAL_DMA_Abort+0x238>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a67      	ldr	r2, [pc, #412]	@ (8003570 <HAL_DMA_Abort+0x23c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a65      	ldr	r2, [pc, #404]	@ (8003574 <HAL_DMA_Abort+0x240>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a64      	ldr	r2, [pc, #400]	@ (8003578 <HAL_DMA_Abort+0x244>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a62      	ldr	r2, [pc, #392]	@ (800357c <HAL_DMA_Abort+0x248>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <HAL_DMA_Abort+0x24c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_DMA_Abort+0xd6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5f      	ldr	r2, [pc, #380]	@ (8003584 <HAL_DMA_Abort+0x250>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_DMA_Abort+0xda>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_DMA_Abort+0xdc>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 021e 	bic.w	r2, r2, #30
 8003422:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003432:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e00a      	b.n	8003452 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 020e 	bic.w	r2, r2, #14
 800344a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a3c      	ldr	r2, [pc, #240]	@ (8003548 <HAL_DMA_Abort+0x214>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d072      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3a      	ldr	r2, [pc, #232]	@ (800354c <HAL_DMA_Abort+0x218>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d06d      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a39      	ldr	r2, [pc, #228]	@ (8003550 <HAL_DMA_Abort+0x21c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d068      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a37      	ldr	r2, [pc, #220]	@ (8003554 <HAL_DMA_Abort+0x220>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d063      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a36      	ldr	r2, [pc, #216]	@ (8003558 <HAL_DMA_Abort+0x224>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d05e      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a34      	ldr	r2, [pc, #208]	@ (800355c <HAL_DMA_Abort+0x228>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d059      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <HAL_DMA_Abort+0x22c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d054      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a31      	ldr	r2, [pc, #196]	@ (8003564 <HAL_DMA_Abort+0x230>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04f      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a30      	ldr	r2, [pc, #192]	@ (8003568 <HAL_DMA_Abort+0x234>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2e      	ldr	r2, [pc, #184]	@ (800356c <HAL_DMA_Abort+0x238>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <HAL_DMA_Abort+0x23c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003574 <HAL_DMA_Abort+0x240>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <HAL_DMA_Abort+0x244>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a28      	ldr	r2, [pc, #160]	@ (800357c <HAL_DMA_Abort+0x248>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <HAL_DMA_Abort+0x24c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <HAL_DMA_Abort+0x250>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_DMA_Abort+0x254>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <HAL_DMA_Abort+0x258>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_DMA_Abort+0x25c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_DMA_Abort+0x260>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_DMA_Abort+0x264>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_DMA_Abort+0x268>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_DMA_Abort+0x26c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_Abort+0x20e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_DMA_Abort+0x270>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d132      	bne.n	80035a8 <HAL_DMA_Abort+0x274>
 8003542:	2301      	movs	r3, #1
 8003544:	e031      	b.n	80035aa <HAL_DMA_Abort+0x276>
 8003546:	bf00      	nop
 8003548:	40020010 	.word	0x40020010
 800354c:	40020028 	.word	0x40020028
 8003550:	40020040 	.word	0x40020040
 8003554:	40020058 	.word	0x40020058
 8003558:	40020070 	.word	0x40020070
 800355c:	40020088 	.word	0x40020088
 8003560:	400200a0 	.word	0x400200a0
 8003564:	400200b8 	.word	0x400200b8
 8003568:	40020410 	.word	0x40020410
 800356c:	40020428 	.word	0x40020428
 8003570:	40020440 	.word	0x40020440
 8003574:	40020458 	.word	0x40020458
 8003578:	40020470 	.word	0x40020470
 800357c:	40020488 	.word	0x40020488
 8003580:	400204a0 	.word	0x400204a0
 8003584:	400204b8 	.word	0x400204b8
 8003588:	58025408 	.word	0x58025408
 800358c:	5802541c 	.word	0x5802541c
 8003590:	58025430 	.word	0x58025430
 8003594:	58025444 	.word	0x58025444
 8003598:	58025458 	.word	0x58025458
 800359c:	5802546c 	.word	0x5802546c
 80035a0:	58025480 	.word	0x58025480
 80035a4:	58025494 	.word	0x58025494
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003778 <HAL_DMA_Abort+0x444>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d04a      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6b      	ldr	r2, [pc, #428]	@ (800377c <HAL_DMA_Abort+0x448>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d045      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003780 <HAL_DMA_Abort+0x44c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d040      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a68      	ldr	r2, [pc, #416]	@ (8003784 <HAL_DMA_Abort+0x450>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d03b      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a67      	ldr	r2, [pc, #412]	@ (8003788 <HAL_DMA_Abort+0x454>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d036      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a65      	ldr	r2, [pc, #404]	@ (800378c <HAL_DMA_Abort+0x458>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a64      	ldr	r2, [pc, #400]	@ (8003790 <HAL_DMA_Abort+0x45c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02c      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a62      	ldr	r2, [pc, #392]	@ (8003794 <HAL_DMA_Abort+0x460>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d027      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a61      	ldr	r2, [pc, #388]	@ (8003798 <HAL_DMA_Abort+0x464>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5f      	ldr	r2, [pc, #380]	@ (800379c <HAL_DMA_Abort+0x468>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5e      	ldr	r2, [pc, #376]	@ (80037a0 <HAL_DMA_Abort+0x46c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5c      	ldr	r2, [pc, #368]	@ (80037a4 <HAL_DMA_Abort+0x470>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5b      	ldr	r2, [pc, #364]	@ (80037a8 <HAL_DMA_Abort+0x474>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a59      	ldr	r2, [pc, #356]	@ (80037ac <HAL_DMA_Abort+0x478>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a58      	ldr	r2, [pc, #352]	@ (80037b0 <HAL_DMA_Abort+0x47c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_DMA_Abort+0x32a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a56      	ldr	r2, [pc, #344]	@ (80037b4 <HAL_DMA_Abort+0x480>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <HAL_DMA_Abort+0x33c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <HAL_DMA_Abort+0x34c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003680:	e013      	b.n	80036aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7fe ff45 	bl	8002510 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d90c      	bls.n	80036aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e12d      	b.n	8003906 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003778 <HAL_DMA_Abort+0x444>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <HAL_DMA_Abort+0x448>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003780 <HAL_DMA_Abort+0x44c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <HAL_DMA_Abort+0x450>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a29      	ldr	r2, [pc, #164]	@ (8003788 <HAL_DMA_Abort+0x454>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a27      	ldr	r2, [pc, #156]	@ (800378c <HAL_DMA_Abort+0x458>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <HAL_DMA_Abort+0x45c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <HAL_DMA_Abort+0x460>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a23      	ldr	r2, [pc, #140]	@ (8003798 <HAL_DMA_Abort+0x464>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_DMA_Abort+0x468>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_DMA_Abort+0x46c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_DMA_Abort+0x470>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_DMA_Abort+0x474>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <HAL_DMA_Abort+0x478>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_DMA_Abort+0x47c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Abort+0x422>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_DMA_Abort+0x480>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_DMA_Abort+0x426>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_DMA_Abort+0x428>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02b      	beq.n	80037b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	223f      	movs	r2, #63	@ 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	e02a      	b.n	80037ce <HAL_DMA_Abort+0x49a>
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003910 <HAL_DMA_Abort+0x5dc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d072      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003914 <HAL_DMA_Abort+0x5e0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d06d      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003918 <HAL_DMA_Abort+0x5e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d068      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	@ (800391c <HAL_DMA_Abort+0x5e8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d063      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a49      	ldr	r2, [pc, #292]	@ (8003920 <HAL_DMA_Abort+0x5ec>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d05e      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a47      	ldr	r2, [pc, #284]	@ (8003924 <HAL_DMA_Abort+0x5f0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d059      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a46      	ldr	r2, [pc, #280]	@ (8003928 <HAL_DMA_Abort+0x5f4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d054      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a44      	ldr	r2, [pc, #272]	@ (800392c <HAL_DMA_Abort+0x5f8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d04f      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a43      	ldr	r2, [pc, #268]	@ (8003930 <HAL_DMA_Abort+0x5fc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a41      	ldr	r2, [pc, #260]	@ (8003934 <HAL_DMA_Abort+0x600>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a40      	ldr	r2, [pc, #256]	@ (8003938 <HAL_DMA_Abort+0x604>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3e      	ldr	r2, [pc, #248]	@ (800393c <HAL_DMA_Abort+0x608>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3d      	ldr	r2, [pc, #244]	@ (8003940 <HAL_DMA_Abort+0x60c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <HAL_DMA_Abort+0x610>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3a      	ldr	r2, [pc, #232]	@ (8003948 <HAL_DMA_Abort+0x614>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a38      	ldr	r2, [pc, #224]	@ (800394c <HAL_DMA_Abort+0x618>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a37      	ldr	r2, [pc, #220]	@ (8003950 <HAL_DMA_Abort+0x61c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	@ (8003954 <HAL_DMA_Abort+0x620>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a34      	ldr	r2, [pc, #208]	@ (8003958 <HAL_DMA_Abort+0x624>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a32      	ldr	r2, [pc, #200]	@ (800395c <HAL_DMA_Abort+0x628>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a31      	ldr	r2, [pc, #196]	@ (8003960 <HAL_DMA_Abort+0x62c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_DMA_Abort+0x630>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003968 <HAL_DMA_Abort+0x634>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Abort+0x58a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <HAL_DMA_Abort+0x638>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_DMA_Abort+0x58e>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_Abort+0x590>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40020010 	.word	0x40020010
 8003914:	40020028 	.word	0x40020028
 8003918:	40020040 	.word	0x40020040
 800391c:	40020058 	.word	0x40020058
 8003920:	40020070 	.word	0x40020070
 8003924:	40020088 	.word	0x40020088
 8003928:	400200a0 	.word	0x400200a0
 800392c:	400200b8 	.word	0x400200b8
 8003930:	40020410 	.word	0x40020410
 8003934:	40020428 	.word	0x40020428
 8003938:	40020440 	.word	0x40020440
 800393c:	40020458 	.word	0x40020458
 8003940:	40020470 	.word	0x40020470
 8003944:	40020488 	.word	0x40020488
 8003948:	400204a0 	.word	0x400204a0
 800394c:	400204b8 	.word	0x400204b8
 8003950:	58025408 	.word	0x58025408
 8003954:	5802541c 	.word	0x5802541c
 8003958:	58025430 	.word	0x58025430
 800395c:	58025444 	.word	0x58025444
 8003960:	58025458 	.word	0x58025458
 8003964:	5802546c 	.word	0x5802546c
 8003968:	58025480 	.word	0x58025480
 800396c:	58025494 	.word	0x58025494

08003970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e237      	b.n	8003df2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2280      	movs	r2, #128	@ 0x80
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e22c      	b.n	8003df2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5c      	ldr	r2, [pc, #368]	@ (8003b10 <HAL_DMA_Abort_IT+0x1a0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d04a      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b14 <HAL_DMA_Abort_IT+0x1a4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d045      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a59      	ldr	r2, [pc, #356]	@ (8003b18 <HAL_DMA_Abort_IT+0x1a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d040      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a58      	ldr	r2, [pc, #352]	@ (8003b1c <HAL_DMA_Abort_IT+0x1ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d03b      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a56      	ldr	r2, [pc, #344]	@ (8003b20 <HAL_DMA_Abort_IT+0x1b0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d036      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a55      	ldr	r2, [pc, #340]	@ (8003b24 <HAL_DMA_Abort_IT+0x1b4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d031      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a53      	ldr	r2, [pc, #332]	@ (8003b28 <HAL_DMA_Abort_IT+0x1b8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02c      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a52      	ldr	r2, [pc, #328]	@ (8003b2c <HAL_DMA_Abort_IT+0x1bc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d027      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a50      	ldr	r2, [pc, #320]	@ (8003b30 <HAL_DMA_Abort_IT+0x1c0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d022      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003b34 <HAL_DMA_Abort_IT+0x1c4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4d      	ldr	r2, [pc, #308]	@ (8003b38 <HAL_DMA_Abort_IT+0x1c8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b3c <HAL_DMA_Abort_IT+0x1cc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4a      	ldr	r2, [pc, #296]	@ (8003b40 <HAL_DMA_Abort_IT+0x1d0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a49      	ldr	r2, [pc, #292]	@ (8003b44 <HAL_DMA_Abort_IT+0x1d4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a47      	ldr	r2, [pc, #284]	@ (8003b48 <HAL_DMA_Abort_IT+0x1d8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xc8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a46      	ldr	r2, [pc, #280]	@ (8003b4c <HAL_DMA_Abort_IT+0x1dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Abort_IT+0xcc>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_Abort_IT+0xce>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8086 	beq.w	8003b50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2204      	movs	r2, #4
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2f      	ldr	r2, [pc, #188]	@ (8003b10 <HAL_DMA_Abort_IT+0x1a0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04a      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003b14 <HAL_DMA_Abort_IT+0x1a4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d045      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <HAL_DMA_Abort_IT+0x1a8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b1c <HAL_DMA_Abort_IT+0x1ac>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03b      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a29      	ldr	r2, [pc, #164]	@ (8003b20 <HAL_DMA_Abort_IT+0x1b0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a28      	ldr	r2, [pc, #160]	@ (8003b24 <HAL_DMA_Abort_IT+0x1b4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d031      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <HAL_DMA_Abort_IT+0x1b8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02c      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a25      	ldr	r2, [pc, #148]	@ (8003b2c <HAL_DMA_Abort_IT+0x1bc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <HAL_DMA_Abort_IT+0x1c0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	@ (8003b34 <HAL_DMA_Abort_IT+0x1c4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d01d      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	@ (8003b38 <HAL_DMA_Abort_IT+0x1c8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b3c <HAL_DMA_Abort_IT+0x1cc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b40 <HAL_DMA_Abort_IT+0x1d0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b44 <HAL_DMA_Abort_IT+0x1d4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b48 <HAL_DMA_Abort_IT+0x1d8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Abort_IT+0x17c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <HAL_DMA_Abort_IT+0x1dc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <HAL_DMA_Abort_IT+0x18e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e178      	b.n	8003df0 <HAL_DMA_Abort_IT+0x480>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e16f      	b.n	8003df0 <HAL_DMA_Abort_IT+0x480>
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 020e 	bic.w	r2, r2, #14
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6c      	ldr	r2, [pc, #432]	@ (8003d18 <HAL_DMA_Abort_IT+0x3a8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8003d1c <HAL_DMA_Abort_IT+0x3ac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a69      	ldr	r2, [pc, #420]	@ (8003d20 <HAL_DMA_Abort_IT+0x3b0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_DMA_Abort_IT+0x3b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a66      	ldr	r2, [pc, #408]	@ (8003d28 <HAL_DMA_Abort_IT+0x3b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a65      	ldr	r2, [pc, #404]	@ (8003d2c <HAL_DMA_Abort_IT+0x3bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a63      	ldr	r2, [pc, #396]	@ (8003d30 <HAL_DMA_Abort_IT+0x3c0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a62      	ldr	r2, [pc, #392]	@ (8003d34 <HAL_DMA_Abort_IT+0x3c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a60      	ldr	r2, [pc, #384]	@ (8003d38 <HAL_DMA_Abort_IT+0x3c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d3c <HAL_DMA_Abort_IT+0x3cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003d40 <HAL_DMA_Abort_IT+0x3d0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d44 <HAL_DMA_Abort_IT+0x3d4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d48 <HAL_DMA_Abort_IT+0x3d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a59      	ldr	r2, [pc, #356]	@ (8003d4c <HAL_DMA_Abort_IT+0x3dc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a57      	ldr	r2, [pc, #348]	@ (8003d50 <HAL_DMA_Abort_IT+0x3e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x290>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a56      	ldr	r2, [pc, #344]	@ (8003d54 <HAL_DMA_Abort_IT+0x3e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <HAL_DMA_Abort_IT+0x2a2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e007      	b.n	8003c22 <HAL_DMA_Abort_IT+0x2b2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3c      	ldr	r2, [pc, #240]	@ (8003d18 <HAL_DMA_Abort_IT+0x3a8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d072      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a3a      	ldr	r2, [pc, #232]	@ (8003d1c <HAL_DMA_Abort_IT+0x3ac>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d06d      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a39      	ldr	r2, [pc, #228]	@ (8003d20 <HAL_DMA_Abort_IT+0x3b0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d068      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a37      	ldr	r2, [pc, #220]	@ (8003d24 <HAL_DMA_Abort_IT+0x3b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d063      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a36      	ldr	r2, [pc, #216]	@ (8003d28 <HAL_DMA_Abort_IT+0x3b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d05e      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <HAL_DMA_Abort_IT+0x3bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d059      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a33      	ldr	r2, [pc, #204]	@ (8003d30 <HAL_DMA_Abort_IT+0x3c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d054      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a31      	ldr	r2, [pc, #196]	@ (8003d34 <HAL_DMA_Abort_IT+0x3c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d04f      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a30      	ldr	r2, [pc, #192]	@ (8003d38 <HAL_DMA_Abort_IT+0x3c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04a      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2e      	ldr	r2, [pc, #184]	@ (8003d3c <HAL_DMA_Abort_IT+0x3cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d045      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d40 <HAL_DMA_Abort_IT+0x3d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <HAL_DMA_Abort_IT+0x3d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <HAL_DMA_Abort_IT+0x3d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d036      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	@ (8003d4c <HAL_DMA_Abort_IT+0x3dc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d031      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a27      	ldr	r2, [pc, #156]	@ (8003d50 <HAL_DMA_Abort_IT+0x3e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a25      	ldr	r2, [pc, #148]	@ (8003d54 <HAL_DMA_Abort_IT+0x3e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d027      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <HAL_DMA_Abort_IT+0x3e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_DMA_Abort_IT+0x3ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <HAL_DMA_Abort_IT+0x3f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <HAL_DMA_Abort_IT+0x3f4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <HAL_DMA_Abort_IT+0x3f8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <HAL_DMA_Abort_IT+0x3fc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_DMA_Abort_IT+0x400>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x3a2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_DMA_Abort_IT+0x404>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d132      	bne.n	8003d78 <HAL_DMA_Abort_IT+0x408>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e031      	b.n	8003d7a <HAL_DMA_Abort_IT+0x40a>
 8003d16:	bf00      	nop
 8003d18:	40020010 	.word	0x40020010
 8003d1c:	40020028 	.word	0x40020028
 8003d20:	40020040 	.word	0x40020040
 8003d24:	40020058 	.word	0x40020058
 8003d28:	40020070 	.word	0x40020070
 8003d2c:	40020088 	.word	0x40020088
 8003d30:	400200a0 	.word	0x400200a0
 8003d34:	400200b8 	.word	0x400200b8
 8003d38:	40020410 	.word	0x40020410
 8003d3c:	40020428 	.word	0x40020428
 8003d40:	40020440 	.word	0x40020440
 8003d44:	40020458 	.word	0x40020458
 8003d48:	40020470 	.word	0x40020470
 8003d4c:	40020488 	.word	0x40020488
 8003d50:	400204a0 	.word	0x400204a0
 8003d54:	400204b8 	.word	0x400204b8
 8003d58:	58025408 	.word	0x58025408
 8003d5c:	5802541c 	.word	0x5802541c
 8003d60:	58025430 	.word	0x58025430
 8003d64:	58025444 	.word	0x58025444
 8003d68:	58025458 	.word	0x58025458
 8003d6c:	5802546c 	.word	0x5802546c
 8003d70:	58025480 	.word	0x58025480
 8003d74:	58025494 	.word	0x58025494
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d028      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003dac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop

08003dfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	@ 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e08:	4b67      	ldr	r3, [pc, #412]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a67      	ldr	r2, [pc, #412]	@ (8003fac <HAL_DMA_IRQHandler+0x1b0>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0a9b      	lsrs	r3, r3, #10
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04a      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d045      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d040      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5a      	ldr	r2, [pc, #360]	@ (8003fbc <HAL_DMA_IRQHandler+0x1c0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a59      	ldr	r2, [pc, #356]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d036      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a57      	ldr	r2, [pc, #348]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d031      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a56      	ldr	r2, [pc, #344]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02c      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a54      	ldr	r2, [pc, #336]	@ (8003fcc <HAL_DMA_IRQHandler+0x1d0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a53      	ldr	r2, [pc, #332]	@ (8003fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a51      	ldr	r2, [pc, #324]	@ (8003fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a50      	ldr	r2, [pc, #320]	@ (8003fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8003fdc <HAL_DMA_IRQHandler+0x1e0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a48      	ldr	r2, [pc, #288]	@ (8003fec <HAL_DMA_IRQHandler+0x1f0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0xd6>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_DMA_IRQHandler+0xd8>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 842b 	beq.w	8004730 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80a2 	beq.w	8004034 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d04a      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d045      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d040      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <HAL_DMA_IRQHandler+0x1c0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d03b      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d036      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d031      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02c      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <HAL_DMA_IRQHandler+0x1d0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d027      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01d      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	@ (8003fdc <HAL_DMA_IRQHandler+0x1e0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	@ (8003fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a18      	ldr	r2, [pc, #96]	@ (8003fec <HAL_DMA_IRQHandler+0x1f0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d12f      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x1f4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e02e      	b.n	8004004 <HAL_DMA_IRQHandler+0x208>
 8003fa6:	bf00      	nop
 8003fa8:	24000004 	.word	0x24000004
 8003fac:	1b4e81b5 	.word	0x1b4e81b5
 8003fb0:	40020010 	.word	0x40020010
 8003fb4:	40020028 	.word	0x40020028
 8003fb8:	40020040 	.word	0x40020040
 8003fbc:	40020058 	.word	0x40020058
 8003fc0:	40020070 	.word	0x40020070
 8003fc4:	40020088 	.word	0x40020088
 8003fc8:	400200a0 	.word	0x400200a0
 8003fcc:	400200b8 	.word	0x400200b8
 8003fd0:	40020410 	.word	0x40020410
 8003fd4:	40020428 	.word	0x40020428
 8003fd8:	40020440 	.word	0x40020440
 8003fdc:	40020458 	.word	0x40020458
 8003fe0:	40020470 	.word	0x40020470
 8003fe4:	40020488 	.word	0x40020488
 8003fe8:	400204a0 	.word	0x400204a0
 8003fec:	400204b8 	.word	0x400204b8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2208      	movs	r2, #8
 8004022:	409a      	lsls	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06e      	beq.n	8004128 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a69      	ldr	r2, [pc, #420]	@ (80041f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04a      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a67      	ldr	r2, [pc, #412]	@ (80041f8 <HAL_DMA_IRQHandler+0x3fc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d045      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a66      	ldr	r2, [pc, #408]	@ (80041fc <HAL_DMA_IRQHandler+0x400>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d040      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a64      	ldr	r2, [pc, #400]	@ (8004200 <HAL_DMA_IRQHandler+0x404>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d03b      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a63      	ldr	r2, [pc, #396]	@ (8004204 <HAL_DMA_IRQHandler+0x408>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d036      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a61      	ldr	r2, [pc, #388]	@ (8004208 <HAL_DMA_IRQHandler+0x40c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d031      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a60      	ldr	r2, [pc, #384]	@ (800420c <HAL_DMA_IRQHandler+0x410>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d02c      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a5e      	ldr	r2, [pc, #376]	@ (8004210 <HAL_DMA_IRQHandler+0x414>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d027      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a5d      	ldr	r2, [pc, #372]	@ (8004214 <HAL_DMA_IRQHandler+0x418>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004218 <HAL_DMA_IRQHandler+0x41c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a5a      	ldr	r2, [pc, #360]	@ (800421c <HAL_DMA_IRQHandler+0x420>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a58      	ldr	r2, [pc, #352]	@ (8004220 <HAL_DMA_IRQHandler+0x424>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a57      	ldr	r2, [pc, #348]	@ (8004224 <HAL_DMA_IRQHandler+0x428>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a55      	ldr	r2, [pc, #340]	@ (8004228 <HAL_DMA_IRQHandler+0x42c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a54      	ldr	r2, [pc, #336]	@ (800422c <HAL_DMA_IRQHandler+0x430>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a52      	ldr	r2, [pc, #328]	@ (8004230 <HAL_DMA_IRQHandler+0x434>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10a      	bne.n	8004100 <HAL_DMA_IRQHandler+0x304>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e003      	b.n	8004108 <HAL_DMA_IRQHandler+0x30c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	f043 0202 	orr.w	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	2204      	movs	r2, #4
 8004132:	409a      	lsls	r2, r3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 808f 	beq.w	800425c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04a      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a2a      	ldr	r2, [pc, #168]	@ (80041f8 <HAL_DMA_IRQHandler+0x3fc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d045      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a29      	ldr	r2, [pc, #164]	@ (80041fc <HAL_DMA_IRQHandler+0x400>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <HAL_DMA_IRQHandler+0x404>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d03b      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a26      	ldr	r2, [pc, #152]	@ (8004204 <HAL_DMA_IRQHandler+0x408>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d036      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <HAL_DMA_IRQHandler+0x40c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a23      	ldr	r2, [pc, #140]	@ (800420c <HAL_DMA_IRQHandler+0x410>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02c      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <HAL_DMA_IRQHandler+0x414>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d027      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <HAL_DMA_IRQHandler+0x418>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <HAL_DMA_IRQHandler+0x41c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01d      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <HAL_DMA_IRQHandler+0x420>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004220 <HAL_DMA_IRQHandler+0x424>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004224 <HAL_DMA_IRQHandler+0x428>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a18      	ldr	r2, [pc, #96]	@ (8004228 <HAL_DMA_IRQHandler+0x42c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	@ (800422c <HAL_DMA_IRQHandler+0x430>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <HAL_DMA_IRQHandler+0x434>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d12a      	bne.n	8004234 <HAL_DMA_IRQHandler+0x438>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e023      	b.n	800423c <HAL_DMA_IRQHandler+0x440>
 80041f4:	40020010 	.word	0x40020010
 80041f8:	40020028 	.word	0x40020028
 80041fc:	40020040 	.word	0x40020040
 8004200:	40020058 	.word	0x40020058
 8004204:	40020070 	.word	0x40020070
 8004208:	40020088 	.word	0x40020088
 800420c:	400200a0 	.word	0x400200a0
 8004210:	400200b8 	.word	0x400200b8
 8004214:	40020410 	.word	0x40020410
 8004218:	40020428 	.word	0x40020428
 800421c:	40020440 	.word	0x40020440
 8004220:	40020458 	.word	0x40020458
 8004224:	40020470 	.word	0x40020470
 8004228:	40020488 	.word	0x40020488
 800422c:	400204a0 	.word	0x400204a0
 8004230:	400204b8 	.word	0x400204b8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2204      	movs	r2, #4
 800424a:	409a      	lsls	r2, r3
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2210      	movs	r2, #16
 8004266:	409a      	lsls	r2, r3
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80a6 	beq.w	80043be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a85      	ldr	r2, [pc, #532]	@ (800448c <HAL_DMA_IRQHandler+0x690>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d04a      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a83      	ldr	r2, [pc, #524]	@ (8004490 <HAL_DMA_IRQHandler+0x694>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d045      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a82      	ldr	r2, [pc, #520]	@ (8004494 <HAL_DMA_IRQHandler+0x698>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d040      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a80      	ldr	r2, [pc, #512]	@ (8004498 <HAL_DMA_IRQHandler+0x69c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d03b      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7f      	ldr	r2, [pc, #508]	@ (800449c <HAL_DMA_IRQHandler+0x6a0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d036      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7d      	ldr	r2, [pc, #500]	@ (80044a0 <HAL_DMA_IRQHandler+0x6a4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d031      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7c      	ldr	r2, [pc, #496]	@ (80044a4 <HAL_DMA_IRQHandler+0x6a8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d02c      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7a      	ldr	r2, [pc, #488]	@ (80044a8 <HAL_DMA_IRQHandler+0x6ac>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d027      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a79      	ldr	r2, [pc, #484]	@ (80044ac <HAL_DMA_IRQHandler+0x6b0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d022      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a77      	ldr	r2, [pc, #476]	@ (80044b0 <HAL_DMA_IRQHandler+0x6b4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01d      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a76      	ldr	r2, [pc, #472]	@ (80044b4 <HAL_DMA_IRQHandler+0x6b8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a74      	ldr	r2, [pc, #464]	@ (80044b8 <HAL_DMA_IRQHandler+0x6bc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a73      	ldr	r2, [pc, #460]	@ (80044bc <HAL_DMA_IRQHandler+0x6c0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a71      	ldr	r2, [pc, #452]	@ (80044c0 <HAL_DMA_IRQHandler+0x6c4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a70      	ldr	r2, [pc, #448]	@ (80044c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6e      	ldr	r2, [pc, #440]	@ (80044c8 <HAL_DMA_IRQHandler+0x6cc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10a      	bne.n	8004328 <HAL_DMA_IRQHandler+0x52c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e009      	b.n	800433c <HAL_DMA_IRQHandler+0x540>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03e      	beq.n	80043be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2210      	movs	r2, #16
 800434a:	409a      	lsls	r2, r3
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d108      	bne.n	800437e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d024      	beq.n	80043be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
 800437c:	e01f      	b.n	80043be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01b      	beq.n	80043be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
 800438e:	e016      	b.n	80043be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0208 	bic.w	r2, r2, #8
 80043ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2220      	movs	r2, #32
 80043c8:	409a      	lsls	r2, r3
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8110 	beq.w	80045f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	@ (800448c <HAL_DMA_IRQHandler+0x690>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d04a      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004490 <HAL_DMA_IRQHandler+0x694>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d045      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <HAL_DMA_IRQHandler+0x698>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d040      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <HAL_DMA_IRQHandler+0x69c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d03b      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a26      	ldr	r2, [pc, #152]	@ (800449c <HAL_DMA_IRQHandler+0x6a0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d036      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a25      	ldr	r2, [pc, #148]	@ (80044a0 <HAL_DMA_IRQHandler+0x6a4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d031      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <HAL_DMA_IRQHandler+0x6a8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02c      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <HAL_DMA_IRQHandler+0x6ac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d027      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a20      	ldr	r2, [pc, #128]	@ (80044ac <HAL_DMA_IRQHandler+0x6b0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1f      	ldr	r2, [pc, #124]	@ (80044b0 <HAL_DMA_IRQHandler+0x6b4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01d      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <HAL_DMA_IRQHandler+0x6b8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <HAL_DMA_IRQHandler+0x6bc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <HAL_DMA_IRQHandler+0x6c0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_DMA_IRQHandler+0x6c4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <HAL_DMA_IRQHandler+0x6cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d12b      	bne.n	80044cc <HAL_DMA_IRQHandler+0x6d0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e02a      	b.n	80044e0 <HAL_DMA_IRQHandler+0x6e4>
 800448a:	bf00      	nop
 800448c:	40020010 	.word	0x40020010
 8004490:	40020028 	.word	0x40020028
 8004494:	40020040 	.word	0x40020040
 8004498:	40020058 	.word	0x40020058
 800449c:	40020070 	.word	0x40020070
 80044a0:	40020088 	.word	0x40020088
 80044a4:	400200a0 	.word	0x400200a0
 80044a8:	400200b8 	.word	0x400200b8
 80044ac:	40020410 	.word	0x40020410
 80044b0:	40020428 	.word	0x40020428
 80044b4:	40020440 	.word	0x40020440
 80044b8:	40020458 	.word	0x40020458
 80044bc:	40020470 	.word	0x40020470
 80044c0:	40020488 	.word	0x40020488
 80044c4:	400204a0 	.word	0x400204a0
 80044c8:	400204b8 	.word	0x400204b8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8087 	beq.w	80045f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2220      	movs	r2, #32
 80044f0:	409a      	lsls	r2, r3
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d139      	bne.n	8004576 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0216 	bic.w	r2, r2, #22
 8004510:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004520:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_DMA_IRQHandler+0x736>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0208 	bic.w	r2, r2, #8
 8004540:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	223f      	movs	r2, #63	@ 0x3f
 800454c:	409a      	lsls	r2, r3
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 834a 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
          }
          return;
 8004574:	e344      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d018      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02c      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
 80045a2:	e027      	b.n	80045f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d023      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e01e      	b.n	80045f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0210 	bic.w	r2, r2, #16
 80045d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8306 	beq.w	8004c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8088 	beq.w	800471c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7a      	ldr	r2, [pc, #488]	@ (8004804 <HAL_DMA_IRQHandler+0xa08>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d04a      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a79      	ldr	r2, [pc, #484]	@ (8004808 <HAL_DMA_IRQHandler+0xa0c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d045      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a77      	ldr	r2, [pc, #476]	@ (800480c <HAL_DMA_IRQHandler+0xa10>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d040      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a76      	ldr	r2, [pc, #472]	@ (8004810 <HAL_DMA_IRQHandler+0xa14>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d03b      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a74      	ldr	r2, [pc, #464]	@ (8004814 <HAL_DMA_IRQHandler+0xa18>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d036      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	@ (8004818 <HAL_DMA_IRQHandler+0xa1c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d031      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a71      	ldr	r2, [pc, #452]	@ (800481c <HAL_DMA_IRQHandler+0xa20>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02c      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a70      	ldr	r2, [pc, #448]	@ (8004820 <HAL_DMA_IRQHandler+0xa24>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d027      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6e      	ldr	r2, [pc, #440]	@ (8004824 <HAL_DMA_IRQHandler+0xa28>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d022      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6d      	ldr	r2, [pc, #436]	@ (8004828 <HAL_DMA_IRQHandler+0xa2c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01d      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6b      	ldr	r2, [pc, #428]	@ (800482c <HAL_DMA_IRQHandler+0xa30>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d018      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_DMA_IRQHandler+0xa34>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <HAL_DMA_IRQHandler+0xa38>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a67      	ldr	r2, [pc, #412]	@ (8004838 <HAL_DMA_IRQHandler+0xa3c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_DMA_IRQHandler+0xa40>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a64      	ldr	r2, [pc, #400]	@ (8004840 <HAL_DMA_IRQHandler+0xa44>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x8ca>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e007      	b.n	80046d6 <HAL_DMA_IRQHandler+0x8da>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046de:	429a      	cmp	r2, r3
 80046e0:	d307      	bcc.n	80046f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f2      	bne.n	80046d6 <HAL_DMA_IRQHandler+0x8da>
 80046f0:	e000      	b.n	80046f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2203      	movs	r2, #3
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800470a:	e003      	b.n	8004714 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8272 	beq.w	8004c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e26c      	b.n	8004c0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a43      	ldr	r2, [pc, #268]	@ (8004844 <HAL_DMA_IRQHandler+0xa48>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a42      	ldr	r2, [pc, #264]	@ (8004848 <HAL_DMA_IRQHandler+0xa4c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d01d      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a40      	ldr	r2, [pc, #256]	@ (800484c <HAL_DMA_IRQHandler+0xa50>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3f      	ldr	r2, [pc, #252]	@ (8004850 <HAL_DMA_IRQHandler+0xa54>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3d      	ldr	r2, [pc, #244]	@ (8004854 <HAL_DMA_IRQHandler+0xa58>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a3c      	ldr	r2, [pc, #240]	@ (8004858 <HAL_DMA_IRQHandler+0xa5c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a3a      	ldr	r2, [pc, #232]	@ (800485c <HAL_DMA_IRQHandler+0xa60>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_DMA_IRQHandler+0x984>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a39      	ldr	r2, [pc, #228]	@ (8004860 <HAL_DMA_IRQHandler+0xa64>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_DMA_IRQHandler+0x988>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_DMA_IRQHandler+0x98a>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 823f 	beq.w	8004c0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2204      	movs	r2, #4
 800479e:	409a      	lsls	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80cd 	beq.w	8004944 <HAL_DMA_IRQHandler+0xb48>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80c7 	beq.w	8004944 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2204      	movs	r2, #4
 80047c0:	409a      	lsls	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d049      	beq.n	8004864 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8210 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ec:	e20a      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8206 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004800:	e200      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe08>
 8004802:	bf00      	nop
 8004804:	40020010 	.word	0x40020010
 8004808:	40020028 	.word	0x40020028
 800480c:	40020040 	.word	0x40020040
 8004810:	40020058 	.word	0x40020058
 8004814:	40020070 	.word	0x40020070
 8004818:	40020088 	.word	0x40020088
 800481c:	400200a0 	.word	0x400200a0
 8004820:	400200b8 	.word	0x400200b8
 8004824:	40020410 	.word	0x40020410
 8004828:	40020428 	.word	0x40020428
 800482c:	40020440 	.word	0x40020440
 8004830:	40020458 	.word	0x40020458
 8004834:	40020470 	.word	0x40020470
 8004838:	40020488 	.word	0x40020488
 800483c:	400204a0 	.word	0x400204a0
 8004840:	400204b8 	.word	0x400204b8
 8004844:	58025408 	.word	0x58025408
 8004848:	5802541c 	.word	0x5802541c
 800484c:	58025430 	.word	0x58025430
 8004850:	58025444 	.word	0x58025444
 8004854:	58025458 	.word	0x58025458
 8004858:	5802546c 	.word	0x5802546c
 800485c:	58025480 	.word	0x58025480
 8004860:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d160      	bne.n	8004930 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a7f      	ldr	r2, [pc, #508]	@ (8004a70 <HAL_DMA_IRQHandler+0xc74>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04a      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a74 <HAL_DMA_IRQHandler+0xc78>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d045      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7c      	ldr	r2, [pc, #496]	@ (8004a78 <HAL_DMA_IRQHandler+0xc7c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d040      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a7a      	ldr	r2, [pc, #488]	@ (8004a7c <HAL_DMA_IRQHandler+0xc80>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d03b      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a79      	ldr	r2, [pc, #484]	@ (8004a80 <HAL_DMA_IRQHandler+0xc84>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d036      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a77      	ldr	r2, [pc, #476]	@ (8004a84 <HAL_DMA_IRQHandler+0xc88>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a76      	ldr	r2, [pc, #472]	@ (8004a88 <HAL_DMA_IRQHandler+0xc8c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d02c      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a74      	ldr	r2, [pc, #464]	@ (8004a8c <HAL_DMA_IRQHandler+0xc90>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d027      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a73      	ldr	r2, [pc, #460]	@ (8004a90 <HAL_DMA_IRQHandler+0xc94>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a71      	ldr	r2, [pc, #452]	@ (8004a94 <HAL_DMA_IRQHandler+0xc98>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a70      	ldr	r2, [pc, #448]	@ (8004a98 <HAL_DMA_IRQHandler+0xc9c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a9c <HAL_DMA_IRQHandler+0xca0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6d      	ldr	r2, [pc, #436]	@ (8004aa0 <HAL_DMA_IRQHandler+0xca4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	@ (8004aa4 <HAL_DMA_IRQHandler+0xca8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa8 <HAL_DMA_IRQHandler+0xcac>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a68      	ldr	r2, [pc, #416]	@ (8004aac <HAL_DMA_IRQHandler+0xcb0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <HAL_DMA_IRQHandler+0xb24>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0208 	bic.w	r2, r2, #8
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e007      	b.n	8004930 <HAL_DMA_IRQHandler+0xb34>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8165 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004942:	e15f      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	2202      	movs	r2, #2
 800494e:	409a      	lsls	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80c5 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0xce8>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80bf 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2202      	movs	r2, #2
 8004970:	409a      	lsls	r2, r3
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d018      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 813a 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499c:	e134      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8130 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b0:	e12a      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 8089 	bne.w	8004ad0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <HAL_DMA_IRQHandler+0xc74>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d04a      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a29      	ldr	r2, [pc, #164]	@ (8004a74 <HAL_DMA_IRQHandler+0xc78>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d045      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a28      	ldr	r2, [pc, #160]	@ (8004a78 <HAL_DMA_IRQHandler+0xc7c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d040      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a26      	ldr	r2, [pc, #152]	@ (8004a7c <HAL_DMA_IRQHandler+0xc80>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d03b      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a25      	ldr	r2, [pc, #148]	@ (8004a80 <HAL_DMA_IRQHandler+0xc84>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d036      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_DMA_IRQHandler+0xc88>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d031      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a22      	ldr	r2, [pc, #136]	@ (8004a88 <HAL_DMA_IRQHandler+0xc8c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d02c      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <HAL_DMA_IRQHandler+0xc90>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d027      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <HAL_DMA_IRQHandler+0xc94>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <HAL_DMA_IRQHandler+0xc98>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	@ (8004a98 <HAL_DMA_IRQHandler+0xc9c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d018      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1a      	ldr	r2, [pc, #104]	@ (8004a9c <HAL_DMA_IRQHandler+0xca0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a19      	ldr	r2, [pc, #100]	@ (8004aa0 <HAL_DMA_IRQHandler+0xca4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a17      	ldr	r2, [pc, #92]	@ (8004aa4 <HAL_DMA_IRQHandler+0xca8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	@ (8004aa8 <HAL_DMA_IRQHandler+0xcac>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xc62>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a14      	ldr	r2, [pc, #80]	@ (8004aac <HAL_DMA_IRQHandler+0xcb0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d128      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0xcb4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0214 	bic.w	r2, r2, #20
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e027      	b.n	8004ac0 <HAL_DMA_IRQHandler+0xcc4>
 8004a70:	40020010 	.word	0x40020010
 8004a74:	40020028 	.word	0x40020028
 8004a78:	40020040 	.word	0x40020040
 8004a7c:	40020058 	.word	0x40020058
 8004a80:	40020070 	.word	0x40020070
 8004a84:	40020088 	.word	0x40020088
 8004a88:	400200a0 	.word	0x400200a0
 8004a8c:	400200b8 	.word	0x400200b8
 8004a90:	40020410 	.word	0x40020410
 8004a94:	40020428 	.word	0x40020428
 8004a98:	40020440 	.word	0x40020440
 8004a9c:	40020458 	.word	0x40020458
 8004aa0:	40020470 	.word	0x40020470
 8004aa4:	40020488 	.word	0x40020488
 8004aa8:	400204a0 	.word	0x400204a0
 8004aac:	400204b8 	.word	0x400204b8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020a 	bic.w	r2, r2, #10
 8004abe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8097 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae2:	e091      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2208      	movs	r2, #8
 8004aee:	409a      	lsls	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8088 	beq.w	8004c0a <HAL_DMA_IRQHandler+0xe0e>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8082 	beq.w	8004c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a41      	ldr	r2, [pc, #260]	@ (8004c10 <HAL_DMA_IRQHandler+0xe14>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d04a      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3f      	ldr	r2, [pc, #252]	@ (8004c14 <HAL_DMA_IRQHandler+0xe18>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d045      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c18 <HAL_DMA_IRQHandler+0xe1c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d040      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a3c      	ldr	r2, [pc, #240]	@ (8004c1c <HAL_DMA_IRQHandler+0xe20>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d03b      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a3b      	ldr	r2, [pc, #236]	@ (8004c20 <HAL_DMA_IRQHandler+0xe24>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d036      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a39      	ldr	r2, [pc, #228]	@ (8004c24 <HAL_DMA_IRQHandler+0xe28>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d031      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a38      	ldr	r2, [pc, #224]	@ (8004c28 <HAL_DMA_IRQHandler+0xe2c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d02c      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a36      	ldr	r2, [pc, #216]	@ (8004c2c <HAL_DMA_IRQHandler+0xe30>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d027      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a35      	ldr	r2, [pc, #212]	@ (8004c30 <HAL_DMA_IRQHandler+0xe34>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d022      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a33      	ldr	r2, [pc, #204]	@ (8004c34 <HAL_DMA_IRQHandler+0xe38>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01d      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a32      	ldr	r2, [pc, #200]	@ (8004c38 <HAL_DMA_IRQHandler+0xe3c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a30      	ldr	r2, [pc, #192]	@ (8004c3c <HAL_DMA_IRQHandler+0xe40>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2f      	ldr	r2, [pc, #188]	@ (8004c40 <HAL_DMA_IRQHandler+0xe44>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c44 <HAL_DMA_IRQHandler+0xe48>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2c      	ldr	r2, [pc, #176]	@ (8004c48 <HAL_DMA_IRQHandler+0xe4c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c4c <HAL_DMA_IRQHandler+0xe50>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <HAL_DMA_IRQHandler+0xdbc>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 021c 	bic.w	r2, r2, #28
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e007      	b.n	8004bc8 <HAL_DMA_IRQHandler+0xdcc>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 020e 	bic.w	r2, r2, #14
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
 8004bfe:	e004      	b.n	8004c0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c00:	bf00      	nop
 8004c02:	e002      	b.n	8004c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c04:	bf00      	nop
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c0a:	3728      	adds	r7, #40	@ 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8

08004c50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a7f      	ldr	r2, [pc, #508]	@ (8004e84 <DMA_SetConfig+0x21c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d072      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a7d      	ldr	r2, [pc, #500]	@ (8004e88 <DMA_SetConfig+0x220>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d06d      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e8c <DMA_SetConfig+0x224>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d068      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8004e90 <DMA_SetConfig+0x228>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d063      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a79      	ldr	r2, [pc, #484]	@ (8004e94 <DMA_SetConfig+0x22c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d05e      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a77      	ldr	r2, [pc, #476]	@ (8004e98 <DMA_SetConfig+0x230>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d059      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a76      	ldr	r2, [pc, #472]	@ (8004e9c <DMA_SetConfig+0x234>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d054      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a74      	ldr	r2, [pc, #464]	@ (8004ea0 <DMA_SetConfig+0x238>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d04f      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a73      	ldr	r2, [pc, #460]	@ (8004ea4 <DMA_SetConfig+0x23c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d04a      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a71      	ldr	r2, [pc, #452]	@ (8004ea8 <DMA_SetConfig+0x240>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d045      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a70      	ldr	r2, [pc, #448]	@ (8004eac <DMA_SetConfig+0x244>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d040      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb0 <DMA_SetConfig+0x248>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d03b      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004eb4 <DMA_SetConfig+0x24c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d036      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6b      	ldr	r2, [pc, #428]	@ (8004eb8 <DMA_SetConfig+0x250>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d031      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6a      	ldr	r2, [pc, #424]	@ (8004ebc <DMA_SetConfig+0x254>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d02c      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a68      	ldr	r2, [pc, #416]	@ (8004ec0 <DMA_SetConfig+0x258>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d027      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a67      	ldr	r2, [pc, #412]	@ (8004ec4 <DMA_SetConfig+0x25c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a65      	ldr	r2, [pc, #404]	@ (8004ec8 <DMA_SetConfig+0x260>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01d      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a64      	ldr	r2, [pc, #400]	@ (8004ecc <DMA_SetConfig+0x264>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a62      	ldr	r2, [pc, #392]	@ (8004ed0 <DMA_SetConfig+0x268>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a61      	ldr	r2, [pc, #388]	@ (8004ed4 <DMA_SetConfig+0x26c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5f      	ldr	r2, [pc, #380]	@ (8004ed8 <DMA_SetConfig+0x270>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5e      	ldr	r2, [pc, #376]	@ (8004edc <DMA_SetConfig+0x274>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee0 <DMA_SetConfig+0x278>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <DMA_SetConfig+0x10e>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <DMA_SetConfig+0x110>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a39      	ldr	r2, [pc, #228]	@ (8004e84 <DMA_SetConfig+0x21c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04a      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a38      	ldr	r2, [pc, #224]	@ (8004e88 <DMA_SetConfig+0x220>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d045      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a36      	ldr	r2, [pc, #216]	@ (8004e8c <DMA_SetConfig+0x224>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a35      	ldr	r2, [pc, #212]	@ (8004e90 <DMA_SetConfig+0x228>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d03b      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	@ (8004e94 <DMA_SetConfig+0x22c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d036      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a32      	ldr	r2, [pc, #200]	@ (8004e98 <DMA_SetConfig+0x230>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d031      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a30      	ldr	r2, [pc, #192]	@ (8004e9c <DMA_SetConfig+0x234>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02c      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea0 <DMA_SetConfig+0x238>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d027      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea4 <DMA_SetConfig+0x23c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <DMA_SetConfig+0x240>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01d      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <DMA_SetConfig+0x244>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a29      	ldr	r2, [pc, #164]	@ (8004eb0 <DMA_SetConfig+0x248>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <DMA_SetConfig+0x24c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <DMA_SetConfig+0x250>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a24      	ldr	r2, [pc, #144]	@ (8004ebc <DMA_SetConfig+0x254>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <DMA_SetConfig+0x1d0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <DMA_SetConfig+0x258>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <DMA_SetConfig+0x1d4>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <DMA_SetConfig+0x1d6>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d059      	beq.n	8004ef6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	223f      	movs	r2, #63	@ 0x3f
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d138      	bne.n	8004ee4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e82:	e086      	b.n	8004f92 <DMA_SetConfig+0x32a>
 8004e84:	40020010 	.word	0x40020010
 8004e88:	40020028 	.word	0x40020028
 8004e8c:	40020040 	.word	0x40020040
 8004e90:	40020058 	.word	0x40020058
 8004e94:	40020070 	.word	0x40020070
 8004e98:	40020088 	.word	0x40020088
 8004e9c:	400200a0 	.word	0x400200a0
 8004ea0:	400200b8 	.word	0x400200b8
 8004ea4:	40020410 	.word	0x40020410
 8004ea8:	40020428 	.word	0x40020428
 8004eac:	40020440 	.word	0x40020440
 8004eb0:	40020458 	.word	0x40020458
 8004eb4:	40020470 	.word	0x40020470
 8004eb8:	40020488 	.word	0x40020488
 8004ebc:	400204a0 	.word	0x400204a0
 8004ec0:	400204b8 	.word	0x400204b8
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
}
 8004ef4:	e04d      	b.n	8004f92 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a29      	ldr	r2, [pc, #164]	@ (8004fa0 <DMA_SetConfig+0x338>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a27      	ldr	r2, [pc, #156]	@ (8004fa4 <DMA_SetConfig+0x33c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <DMA_SetConfig+0x340>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a24      	ldr	r2, [pc, #144]	@ (8004fac <DMA_SetConfig+0x344>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <DMA_SetConfig+0x348>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a21      	ldr	r2, [pc, #132]	@ (8004fb4 <DMA_SetConfig+0x34c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a20      	ldr	r2, [pc, #128]	@ (8004fb8 <DMA_SetConfig+0x350>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <DMA_SetConfig+0x2de>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	@ (8004fbc <DMA_SetConfig+0x354>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <DMA_SetConfig+0x2e2>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <DMA_SetConfig+0x2e4>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b40      	cmp	r3, #64	@ 0x40
 8004f6e:	d108      	bne.n	8004f82 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
}
 8004f80:	e007      	b.n	8004f92 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	58025408 	.word	0x58025408
 8004fa4:	5802541c 	.word	0x5802541c
 8004fa8:	58025430 	.word	0x58025430
 8004fac:	58025444 	.word	0x58025444
 8004fb0:	58025458 	.word	0x58025458
 8004fb4:	5802546c 	.word	0x5802546c
 8004fb8:	58025480 	.word	0x58025480
 8004fbc:	58025494 	.word	0x58025494

08004fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a42      	ldr	r2, [pc, #264]	@ (80050d8 <DMA_CalcBaseAndBitshift+0x118>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04a      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a41      	ldr	r2, [pc, #260]	@ (80050dc <DMA_CalcBaseAndBitshift+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d045      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3f      	ldr	r2, [pc, #252]	@ (80050e0 <DMA_CalcBaseAndBitshift+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d040      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a3e      	ldr	r2, [pc, #248]	@ (80050e4 <DMA_CalcBaseAndBitshift+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d03b      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80050e8 <DMA_CalcBaseAndBitshift+0x128>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d036      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80050ec <DMA_CalcBaseAndBitshift+0x12c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a39      	ldr	r2, [pc, #228]	@ (80050f0 <DMA_CalcBaseAndBitshift+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a38      	ldr	r2, [pc, #224]	@ (80050f4 <DMA_CalcBaseAndBitshift+0x134>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d027      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a36      	ldr	r2, [pc, #216]	@ (80050f8 <DMA_CalcBaseAndBitshift+0x138>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a35      	ldr	r2, [pc, #212]	@ (80050fc <DMA_CalcBaseAndBitshift+0x13c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01d      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a33      	ldr	r2, [pc, #204]	@ (8005100 <DMA_CalcBaseAndBitshift+0x140>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a32      	ldr	r2, [pc, #200]	@ (8005104 <DMA_CalcBaseAndBitshift+0x144>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a30      	ldr	r2, [pc, #192]	@ (8005108 <DMA_CalcBaseAndBitshift+0x148>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2f      	ldr	r2, [pc, #188]	@ (800510c <DMA_CalcBaseAndBitshift+0x14c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <DMA_CalcBaseAndBitshift+0x150>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <DMA_CalcBaseAndBitshift+0xa8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2c      	ldr	r2, [pc, #176]	@ (8005114 <DMA_CalcBaseAndBitshift+0x154>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <DMA_CalcBaseAndBitshift+0xac>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <DMA_CalcBaseAndBitshift+0xae>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d024      	beq.n	80050bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	3b10      	subs	r3, #16
 800507a:	4a27      	ldr	r2, [pc, #156]	@ (8005118 <DMA_CalcBaseAndBitshift+0x158>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	4a24      	ldr	r2, [pc, #144]	@ (800511c <DMA_CalcBaseAndBitshift+0x15c>)
 800508c:	5cd3      	ldrb	r3, [r2, r3]
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d908      	bls.n	80050ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <DMA_CalcBaseAndBitshift+0x160>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80050aa:	e00d      	b.n	80050c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <DMA_CalcBaseAndBitshift+0x160>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ba:	e005      	b.n	80050c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40020010 	.word	0x40020010
 80050dc:	40020028 	.word	0x40020028
 80050e0:	40020040 	.word	0x40020040
 80050e4:	40020058 	.word	0x40020058
 80050e8:	40020070 	.word	0x40020070
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	400200b8 	.word	0x400200b8
 80050f8:	40020410 	.word	0x40020410
 80050fc:	40020428 	.word	0x40020428
 8005100:	40020440 	.word	0x40020440
 8005104:	40020458 	.word	0x40020458
 8005108:	40020470 	.word	0x40020470
 800510c:	40020488 	.word	0x40020488
 8005110:	400204a0 	.word	0x400204a0
 8005114:	400204b8 	.word	0x400204b8
 8005118:	aaaaaaab 	.word	0xaaaaaaab
 800511c:	0800ead0 	.word	0x0800ead0
 8005120:	fffffc00 	.word	0xfffffc00

08005124 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d120      	bne.n	800517a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	2b03      	cmp	r3, #3
 800513e:	d858      	bhi.n	80051f2 <DMA_CheckFifoParam+0xce>
 8005140:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <DMA_CheckFifoParam+0x24>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	08005159 	.word	0x08005159
 800514c:	0800516b 	.word	0x0800516b
 8005150:	08005159 	.word	0x08005159
 8005154:	080051f3 	.word	0x080051f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d048      	beq.n	80051f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005168:	e045      	b.n	80051f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005172:	d142      	bne.n	80051fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005178:	e03f      	b.n	80051fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005182:	d123      	bne.n	80051cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	2b03      	cmp	r3, #3
 800518a:	d838      	bhi.n	80051fe <DMA_CheckFifoParam+0xda>
 800518c:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <DMA_CheckFifoParam+0x70>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051ab 	.word	0x080051ab
 800519c:	080051a5 	.word	0x080051a5
 80051a0:	080051bd 	.word	0x080051bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
        break;
 80051a8:	e030      	b.n	800520c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d025      	beq.n	8005202 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ba:	e022      	b.n	8005202 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051c4:	d11f      	bne.n	8005206 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ca:	e01c      	b.n	8005206 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d902      	bls.n	80051da <DMA_CheckFifoParam+0xb6>
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d003      	beq.n	80051e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051d8:	e018      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
        break;
 80051de:	e015      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
    break;
 80051f0:	e00b      	b.n	800520a <DMA_CheckFifoParam+0xe6>
        break;
 80051f2:	bf00      	nop
 80051f4:	e00a      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        break;
 80051f6:	bf00      	nop
 80051f8:	e008      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        break;
 80051fa:	bf00      	nop
 80051fc:	e006      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <DMA_CheckFifoParam+0xe8>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <DMA_CheckFifoParam+0xe8>
    break;
 800520a:	bf00      	nop
    }
  }

  return status;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop

0800521c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a38      	ldr	r2, [pc, #224]	@ (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a36      	ldr	r2, [pc, #216]	@ (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a33      	ldr	r2, [pc, #204]	@ (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a32      	ldr	r2, [pc, #200]	@ (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a30      	ldr	r2, [pc, #192]	@ (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2f      	ldr	r2, [pc, #188]	@ (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01a      	beq.n	80052ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	3b08      	subs	r3, #8
 800528c:	4a28      	ldr	r2, [pc, #160]	@ (8005330 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	461a      	mov	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a24      	ldr	r2, [pc, #144]	@ (8005338 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2201      	movs	r2, #1
 80052b2:	409a      	lsls	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052b8:	e024      	b.n	8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	3b10      	subs	r3, #16
 80052c2:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005340 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d806      	bhi.n	80052e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005344 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d902      	bls.n	80052e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3308      	adds	r3, #8
 80052e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4b18      	ldr	r3, [pc, #96]	@ (8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a16      	ldr	r2, [pc, #88]	@ (800534c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2201      	movs	r2, #1
 80052fe:	409a      	lsls	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	58025408 	.word	0x58025408
 8005314:	5802541c 	.word	0x5802541c
 8005318:	58025430 	.word	0x58025430
 800531c:	58025444 	.word	0x58025444
 8005320:	58025458 	.word	0x58025458
 8005324:	5802546c 	.word	0x5802546c
 8005328:	58025480 	.word	0x58025480
 800532c:	58025494 	.word	0x58025494
 8005330:	cccccccd 	.word	0xcccccccd
 8005334:	16009600 	.word	0x16009600
 8005338:	58025880 	.word	0x58025880
 800533c:	aaaaaaab 	.word	0xaaaaaaab
 8005340:	400204b8 	.word	0x400204b8
 8005344:	4002040f 	.word	0x4002040f
 8005348:	10008200 	.word	0x10008200
 800534c:	40020880 	.word	0x40020880

08005350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04a      	beq.n	80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d847      	bhi.n	80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a25      	ldr	r2, [pc, #148]	@ (8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d022      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a24      	ldr	r2, [pc, #144]	@ (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01d      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a15      	ldr	r2, [pc, #84]	@ (800542c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80053da:	e009      	b.n	80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4b14      	ldr	r3, [pc, #80]	@ (8005430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2201      	movs	r2, #1
 80053f6:	409a      	lsls	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	58025408 	.word	0x58025408
 800540c:	5802541c 	.word	0x5802541c
 8005410:	58025430 	.word	0x58025430
 8005414:	58025444 	.word	0x58025444
 8005418:	58025458 	.word	0x58025458
 800541c:	5802546c 	.word	0x5802546c
 8005420:	58025480 	.word	0x58025480
 8005424:	58025494 	.word	0x58025494
 8005428:	1600963f 	.word	0x1600963f
 800542c:	58025940 	.word	0x58025940
 8005430:	1000823f 	.word	0x1000823f
 8005434:	40020940 	.word	0x40020940

08005438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	@ 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005446:	4b89      	ldr	r3, [pc, #548]	@ (800566c <HAL_GPIO_Init+0x234>)
 8005448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800544a:	e194      	b.n	8005776 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8186 	beq.w	8005770 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d005      	beq.n	800547c <HAL_GPIO_Init+0x44>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d130      	bne.n	80054de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	2203      	movs	r2, #3
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054b2:	2201      	movs	r2, #1
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0201 	and.w	r2, r3, #1
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d017      	beq.n	800551a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d123      	bne.n	800556e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	08da      	lsrs	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3208      	adds	r2, #8
 800552e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	220f      	movs	r2, #15
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	08da      	lsrs	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3208      	adds	r2, #8
 8005568:	69b9      	ldr	r1, [r7, #24]
 800556a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	2203      	movs	r2, #3
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 0203 	and.w	r2, r3, #3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80e0 	beq.w	8005770 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005670 <HAL_GPIO_Init+0x238>)
 80055b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005670 <HAL_GPIO_Init+0x238>)
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80055c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005670 <HAL_GPIO_Init+0x238>)
 80055c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ce:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <HAL_GPIO_Init+0x23c>)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	3302      	adds	r3, #2
 80055d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	220f      	movs	r2, #15
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a20      	ldr	r2, [pc, #128]	@ (8005678 <HAL_GPIO_Init+0x240>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d052      	beq.n	80056a0 <HAL_GPIO_Init+0x268>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <HAL_GPIO_Init+0x244>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_GPIO_Init+0x22e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <HAL_GPIO_Init+0x248>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02b      	beq.n	8005662 <HAL_GPIO_Init+0x22a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <HAL_GPIO_Init+0x24c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d025      	beq.n	800565e <HAL_GPIO_Init+0x226>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <HAL_GPIO_Init+0x250>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01f      	beq.n	800565a <HAL_GPIO_Init+0x222>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_GPIO_Init+0x254>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d019      	beq.n	8005656 <HAL_GPIO_Init+0x21e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_GPIO_Init+0x258>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_GPIO_Init+0x21a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_GPIO_Init+0x25c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00d      	beq.n	800564e <HAL_GPIO_Init+0x216>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a18      	ldr	r2, [pc, #96]	@ (8005698 <HAL_GPIO_Init+0x260>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <HAL_GPIO_Init+0x212>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a17      	ldr	r2, [pc, #92]	@ (800569c <HAL_GPIO_Init+0x264>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d101      	bne.n	8005646 <HAL_GPIO_Init+0x20e>
 8005642:	2309      	movs	r3, #9
 8005644:	e02d      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 8005646:	230a      	movs	r3, #10
 8005648:	e02b      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 800564a:	2308      	movs	r3, #8
 800564c:	e029      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 800564e:	2307      	movs	r3, #7
 8005650:	e027      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 8005652:	2306      	movs	r3, #6
 8005654:	e025      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 8005656:	2305      	movs	r3, #5
 8005658:	e023      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 800565a:	2304      	movs	r3, #4
 800565c:	e021      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 800565e:	2303      	movs	r3, #3
 8005660:	e01f      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 8005662:	2302      	movs	r3, #2
 8005664:	e01d      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 8005666:	2301      	movs	r3, #1
 8005668:	e01b      	b.n	80056a2 <HAL_GPIO_Init+0x26a>
 800566a:	bf00      	nop
 800566c:	58000080 	.word	0x58000080
 8005670:	58024400 	.word	0x58024400
 8005674:	58000400 	.word	0x58000400
 8005678:	58020000 	.word	0x58020000
 800567c:	58020400 	.word	0x58020400
 8005680:	58020800 	.word	0x58020800
 8005684:	58020c00 	.word	0x58020c00
 8005688:	58021000 	.word	0x58021000
 800568c:	58021400 	.word	0x58021400
 8005690:	58021800 	.word	0x58021800
 8005694:	58021c00 	.word	0x58021c00
 8005698:	58022000 	.word	0x58022000
 800569c:	58022400 	.word	0x58022400
 80056a0:	2300      	movs	r3, #0
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	f002 0203 	and.w	r2, r2, #3
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	4093      	lsls	r3, r2
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b2:	4938      	ldr	r1, [pc, #224]	@ (8005794 <HAL_GPIO_Init+0x35c>)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	3302      	adds	r3, #2
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4013      	ands	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	3301      	adds	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	f47f ae63 	bne.w	800544c <HAL_GPIO_Init+0x14>
  }
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	3724      	adds	r7, #36	@ 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	58000400 	.word	0x58000400

08005798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	807b      	strh	r3, [r7, #2]
 80057a4:	4613      	mov	r3, r2
 80057a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057a8:	787b      	ldrb	r3, [r7, #1]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057b4:	e003      	b.n	80057be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057b6:	887b      	ldrh	r3, [r7, #2]
 80057b8:	041a      	lsls	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	619a      	str	r2, [r3, #24]
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e10d      	b.n	80059fa <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc fa40 	bl	8001c78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d008      	beq.n	8005840 <HAL_I2S_Init+0x74>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b06      	cmp	r3, #6
 8005834:	d004      	beq.n	8005840 <HAL_I2S_Init+0x74>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b0a      	cmp	r3, #10
 800583c:	f040 8087 	bne.w	800594e <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d05a      	beq.n	80058fe <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005850:	2302      	movs	r3, #2
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e001      	b.n	800585a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005856:	2301      	movs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b30      	cmp	r3, #48	@ 0x30
 8005860:	d003      	beq.n	800586a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005866:	2bb0      	cmp	r3, #176	@ 0xb0
 8005868:	d102      	bne.n	8005870 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800586a:	2301      	movs	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e001      	b.n	8005874 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005874:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	f002 fadc 	bl	8007e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8005880:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800588a:	d113      	bne.n	80058b4 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800588c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	fbb2 f2f3 	udiv	r2, r2, r3
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	3305      	adds	r3, #5
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e014      	b.n	80058de <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80058b4:	2220      	movs	r2, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	3305      	adds	r3, #5
 80058dc:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4a48      	ldr	r2, [pc, #288]	@ (8005a04 <HAL_I2S_Init+0x238>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	08db      	lsrs	r3, r3, #3
 80058e8:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	e003      	b.n	8005906 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80058fe:	2302      	movs	r3, #2
 8005900:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d102      	bne.n	8005912 <HAL_I2S_Init+0x146>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d002      	beq.n	8005918 <HAL_I2S_Init+0x14c>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2bff      	cmp	r3, #255	@ 0xff
 8005916:	d907      	bls.n	8005928 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	f043 0210 	orr.w	r2, r3, #16
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e068      	b.n	80059fa <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 800592e:	2301      	movs	r3, #1
 8005930:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005938:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <HAL_I2S_Init+0x23c>)
 800593a:	4013      	ands	r3, r2
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	0411      	lsls	r1, r2, #16
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0612      	lsls	r2, r2, #24
 8005944:	4311      	orrs	r1, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	430b      	orrs	r3, r1
 800594c:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005954:	4b2d      	ldr	r3, [pc, #180]	@ (8005a0c <HAL_I2S_Init+0x240>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6851      	ldr	r1, [r2, #4]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	4311      	orrs	r1, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	4311      	orrs	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6992      	ldr	r2, [r2, #24]
 800596c:	4311      	orrs	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6a12      	ldr	r2, [r2, #32]
 8005972:	4311      	orrs	r1, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005978:	4311      	orrs	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6912      	ldr	r2, [r2, #16]
 800597e:	430a      	orrs	r2, r1
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8005994:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80059a4:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d007      	beq.n	80059d4 <HAL_I2S_Init+0x208>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b06      	cmp	r3, #6
 80059ca:	d003      	beq.n	80059d4 <HAL_I2S_Init+0x208>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b0a      	cmp	r3, #10
 80059d2:	d10a      	bne.n	80059ea <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	cccccccd 	.word	0xcccccccd
 8005a08:	fe00ffff 	.word	0xfe00ffff
 8005a0c:	fdff9040 	.word	0xfdff9040

08005a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a18:	4b19      	ldr	r3, [pc, #100]	@ (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00a      	beq.n	8005a3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e01f      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e01d      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a3a:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	490f      	ldr	r1, [pc, #60]	@ (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a4a:	f7fc fd61 	bl	8002510 <HAL_GetTick>
 8005a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a50:	e009      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a52:	f7fc fd5d 	bl	8002510 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a60:	d901      	bls.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e007      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a72:	d1ee      	bne.n	8005a52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	58024800 	.word	0x58024800

08005a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	@ 0x30
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f000 bc48 	b.w	8006328 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8088 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa6:	4b99      	ldr	r3, [pc, #612]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ab0:	4b96      	ldr	r3, [pc, #600]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d007      	beq.n	8005acc <HAL_RCC_OscConfig+0x48>
 8005abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abe:	2b18      	cmp	r3, #24
 8005ac0:	d111      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x62>
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d10c      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	4b8f      	ldr	r3, [pc, #572]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d06d      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x130>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d169      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f000 bc21 	b.w	8006328 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x7a>
 8005af0:	4b86      	ldr	r3, [pc, #536]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a85      	ldr	r2, [pc, #532]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e02e      	b.n	8005b5c <HAL_RCC_OscConfig+0xd8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x9c>
 8005b06:	4b81      	ldr	r3, [pc, #516]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a80      	ldr	r2, [pc, #512]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4b7e      	ldr	r3, [pc, #504]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a7d      	ldr	r2, [pc, #500]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e01d      	b.n	8005b5c <HAL_RCC_OscConfig+0xd8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCC_OscConfig+0xc0>
 8005b2a:	4b78      	ldr	r3, [pc, #480]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a77      	ldr	r2, [pc, #476]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4b75      	ldr	r3, [pc, #468]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a74      	ldr	r2, [pc, #464]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e00b      	b.n	8005b5c <HAL_RCC_OscConfig+0xd8>
 8005b44:	4b71      	ldr	r3, [pc, #452]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a70      	ldr	r2, [pc, #448]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	4b6e      	ldr	r3, [pc, #440]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a6d      	ldr	r2, [pc, #436]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d013      	beq.n	8005b8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc fcd4 	bl	8002510 <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fc fcd0 	bl	8002510 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	@ 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e3d4      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b7e:	4b63      	ldr	r3, [pc, #396]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0xe8>
 8005b8a:	e014      	b.n	8005bb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fc fcc0 	bl	8002510 <HAL_GetTick>
 8005b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fc fcbc 	bl	8002510 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e3c0      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ba6:	4b59      	ldr	r3, [pc, #356]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x110>
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80ca 	beq.w	8005d58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc4:	4b51      	ldr	r3, [pc, #324]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bcc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bce:	4b4f      	ldr	r3, [pc, #316]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_RCC_OscConfig+0x166>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	2b18      	cmp	r3, #24
 8005bde:	d156      	bne.n	8005c8e <HAL_RCC_OscConfig+0x20a>
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d151      	bne.n	8005c8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bea:	4b48      	ldr	r3, [pc, #288]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_RCC_OscConfig+0x17e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e392      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c02:	4b42      	ldr	r3, [pc, #264]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 0219 	bic.w	r2, r3, #25
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	493f      	ldr	r1, [pc, #252]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fc fc7c 	bl	8002510 <HAL_GetTick>
 8005c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c1c:	f7fc fc78 	bl	8002510 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e37c      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2e:	4b37      	ldr	r3, [pc, #220]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3a:	f7fc fc99 	bl	8002570 <HAL_GetREVID>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d817      	bhi.n	8005c78 <HAL_RCC_OscConfig+0x1f4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d108      	bne.n	8005c62 <HAL_RCC_OscConfig+0x1de>
 8005c50:	4b2e      	ldr	r3, [pc, #184]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005c58:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c60:	e07a      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c62:	4b2a      	ldr	r3, [pc, #168]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	031b      	lsls	r3, r3, #12
 8005c70:	4926      	ldr	r1, [pc, #152]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c76:	e06f      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c78:	4b24      	ldr	r3, [pc, #144]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	4921      	ldr	r1, [pc, #132]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c8c:	e064      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d047      	beq.n	8005d26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c96:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0219 	bic.w	r2, r3, #25
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	491a      	ldr	r1, [pc, #104]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fc fc32 	bl	8002510 <HAL_GetTick>
 8005cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb0:	f7fc fc2e 	bl	8002510 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e332      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cc2:	4b12      	ldr	r3, [pc, #72]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cce:	f7fc fc4f 	bl	8002570 <HAL_GetREVID>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d819      	bhi.n	8005d10 <HAL_RCC_OscConfig+0x28c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	d108      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x272>
 8005ce4:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005cec:	4a07      	ldr	r2, [pc, #28]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf2:	6053      	str	r3, [r2, #4]
 8005cf4:	e030      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
 8005cf6:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	031b      	lsls	r3, r3, #12
 8005d04:	4901      	ldr	r1, [pc, #4]	@ (8005d0c <HAL_RCC_OscConfig+0x288>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	604b      	str	r3, [r1, #4]
 8005d0a:	e025      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	4b9a      	ldr	r3, [pc, #616]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	4997      	ldr	r1, [pc, #604]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	e018      	b.n	8005d58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b95      	ldr	r3, [pc, #596]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a94      	ldr	r2, [pc, #592]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fc fbed 	bl	8002510 <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fbe9 	bl	8002510 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e2ed      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a9 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d66:	4b85      	ldr	r3, [pc, #532]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d70:	4b82      	ldr	r3, [pc, #520]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d007      	beq.n	8005d8c <HAL_RCC_OscConfig+0x308>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b18      	cmp	r3, #24
 8005d80:	d13a      	bne.n	8005df8 <HAL_RCC_OscConfig+0x374>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d135      	bne.n	8005df8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_OscConfig+0x320>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b80      	cmp	r3, #128	@ 0x80
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e2c1      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005da4:	f7fc fbe4 	bl	8002570 <HAL_GetREVID>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d817      	bhi.n	8005de2 <HAL_RCC_OscConfig+0x35e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d108      	bne.n	8005dcc <HAL_RCC_OscConfig+0x348>
 8005dba:	4b70      	ldr	r3, [pc, #448]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dca:	e075      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	069b      	lsls	r3, r3, #26
 8005dda:	4968      	ldr	r1, [pc, #416]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005de0:	e06a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005de2:	4b66      	ldr	r3, [pc, #408]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	4962      	ldr	r1, [pc, #392]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005df6:	e05f      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d042      	beq.n	8005e86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e00:	4b5e      	ldr	r3, [pc, #376]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5d      	ldr	r2, [pc, #372]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fc fb80 	bl	8002510 <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e14:	f7fc fb7c 	bl	8002510 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e280      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e26:	4b55      	ldr	r3, [pc, #340]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e32:	f7fc fb9d 	bl	8002570 <HAL_GetREVID>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d817      	bhi.n	8005e70 <HAL_RCC_OscConfig+0x3ec>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d108      	bne.n	8005e5a <HAL_RCC_OscConfig+0x3d6>
 8005e48:	4b4c      	ldr	r3, [pc, #304]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005e50:	4a4a      	ldr	r2, [pc, #296]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e56:	6053      	str	r3, [r2, #4]
 8005e58:	e02e      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
 8005e5a:	4b48      	ldr	r3, [pc, #288]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	069b      	lsls	r3, r3, #26
 8005e68:	4944      	ldr	r1, [pc, #272]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	604b      	str	r3, [r1, #4]
 8005e6e:	e023      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
 8005e70:	4b42      	ldr	r3, [pc, #264]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	493f      	ldr	r1, [pc, #252]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60cb      	str	r3, [r1, #12]
 8005e84:	e018      	b.n	8005eb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e86:	4b3d      	ldr	r3, [pc, #244]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e92:	f7fc fb3d 	bl	8002510 <HAL_GetTick>
 8005e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e9a:	f7fc fb39 	bl	8002510 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e23d      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005eac:	4b33      	ldr	r3, [pc, #204]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d036      	beq.n	8005f32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d019      	beq.n	8005f00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fc fb1a 	bl	8002510 <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee0:	f7fc fb16 	bl	8002510 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e21a      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ef2:	4b22      	ldr	r3, [pc, #136]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x45c>
 8005efe:	e018      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f00:	4b1e      	ldr	r3, [pc, #120]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f04:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fb00 	bl	8002510 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f14:	f7fc fafc 	bl	8002510 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e200      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f26:	4b15      	ldr	r3, [pc, #84]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d039      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01c      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f46:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f52:	f7fc fadd 	bl	8002510 <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5a:	f7fc fad9 	bl	8002510 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1dd      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f6c:	4b03      	ldr	r3, [pc, #12]	@ (8005f7c <HAL_RCC_OscConfig+0x4f8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x4d6>
 8005f78:	e01b      	b.n	8005fb2 <HAL_RCC_OscConfig+0x52e>
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f80:	4b9b      	ldr	r3, [pc, #620]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a9a      	ldr	r2, [pc, #616]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8005f86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f8c:	f7fc fac0 	bl	8002510 <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f94:	f7fc fabc 	bl	8002510 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e1c0      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fa6:	4b92      	ldr	r3, [pc, #584]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8081 	beq.w	80060c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fc0:	4b8c      	ldr	r3, [pc, #560]	@ (80061f4 <HAL_RCC_OscConfig+0x770>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a8b      	ldr	r2, [pc, #556]	@ (80061f4 <HAL_RCC_OscConfig+0x770>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fcc:	f7fc faa0 	bl	8002510 <HAL_GetTick>
 8005fd0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd4:	f7fc fa9c 	bl	8002510 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	@ 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e1a0      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fe6:	4b83      	ldr	r3, [pc, #524]	@ (80061f4 <HAL_RCC_OscConfig+0x770>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d106      	bne.n	8006008 <HAL_RCC_OscConfig+0x584>
 8005ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	4a7c      	ldr	r2, [pc, #496]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6713      	str	r3, [r2, #112]	@ 0x70
 8006006:	e02d      	b.n	8006064 <HAL_RCC_OscConfig+0x5e0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10c      	bne.n	800602a <HAL_RCC_OscConfig+0x5a6>
 8006010:	4b77      	ldr	r3, [pc, #476]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	4a76      	ldr	r2, [pc, #472]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	@ 0x70
 800601c:	4b74      	ldr	r3, [pc, #464]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	4a73      	ldr	r2, [pc, #460]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006022:	f023 0304 	bic.w	r3, r3, #4
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x5e0>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b05      	cmp	r3, #5
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x5c8>
 8006032:	4b6f      	ldr	r3, [pc, #444]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	4a6e      	ldr	r2, [pc, #440]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006038:	f043 0304 	orr.w	r3, r3, #4
 800603c:	6713      	str	r3, [r2, #112]	@ 0x70
 800603e:	4b6c      	ldr	r3, [pc, #432]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006042:	4a6b      	ldr	r2, [pc, #428]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6713      	str	r3, [r2, #112]	@ 0x70
 800604a:	e00b      	b.n	8006064 <HAL_RCC_OscConfig+0x5e0>
 800604c:	4b68      	ldr	r3, [pc, #416]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006050:	4a67      	ldr	r2, [pc, #412]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	6713      	str	r3, [r2, #112]	@ 0x70
 8006058:	4b65      	ldr	r3, [pc, #404]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605c:	4a64      	ldr	r2, [pc, #400]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d015      	beq.n	8006098 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc fa50 	bl	8002510 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006072:	e00a      	b.n	800608a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006074:	f7fc fa4c 	bl	8002510 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e14e      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800608a:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ee      	beq.n	8006074 <HAL_RCC_OscConfig+0x5f0>
 8006096:	e014      	b.n	80060c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fc fa3a 	bl	8002510 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fc fa36 	bl	8002510 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e138      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060b6:	4b4e      	ldr	r3, [pc, #312]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ee      	bne.n	80060a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 812d 	beq.w	8006326 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060cc:	4b48      	ldr	r3, [pc, #288]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d4:	2b18      	cmp	r3, #24
 80060d6:	f000 80bd 	beq.w	8006254 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	2b02      	cmp	r3, #2
 80060e0:	f040 809e 	bne.w	8006220 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e4:	4b42      	ldr	r3, [pc, #264]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a41      	ldr	r2, [pc, #260]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80060ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fc fa0e 	bl	8002510 <HAL_GetTick>
 80060f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fc fa0a 	bl	8002510 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e10e      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800610a:	4b39      	ldr	r3, [pc, #228]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006116:	4b36      	ldr	r3, [pc, #216]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800611a:	4b37      	ldr	r3, [pc, #220]	@ (80061f8 <HAL_RCC_OscConfig+0x774>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006126:	0112      	lsls	r2, r2, #4
 8006128:	430a      	orrs	r2, r1
 800612a:	4931      	ldr	r1, [pc, #196]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006134:	3b01      	subs	r3, #1
 8006136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	3b01      	subs	r3, #1
 8006140:	025b      	lsls	r3, r3, #9
 8006142:	b29b      	uxth	r3, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	3b01      	subs	r3, #1
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	3b01      	subs	r3, #1
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006160:	4923      	ldr	r1, [pc, #140]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006166:	4b22      	ldr	r3, [pc, #136]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a21      	ldr	r2, [pc, #132]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006172:	4b1f      	ldr	r3, [pc, #124]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006176:	4b21      	ldr	r3, [pc, #132]	@ (80061fc <HAL_RCC_OscConfig+0x778>)
 8006178:	4013      	ands	r3, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800617e:	00d2      	lsls	r2, r2, #3
 8006180:	491b      	ldr	r1, [pc, #108]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006182:	4313      	orrs	r3, r2
 8006184:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006186:	4b1a      	ldr	r3, [pc, #104]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	f023 020c 	bic.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	4917      	ldr	r1, [pc, #92]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 8006194:	4313      	orrs	r3, r2
 8006196:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006198:	4b15      	ldr	r3, [pc, #84]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	f023 0202 	bic.w	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a4:	4912      	ldr	r1, [pc, #72]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061aa:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	4a10      	ldr	r2, [pc, #64]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b6:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	4a0d      	ldr	r2, [pc, #52]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061c2:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	4a0a      	ldr	r2, [pc, #40]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061ce:	4b08      	ldr	r3, [pc, #32]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	4a07      	ldr	r2, [pc, #28]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061da:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a04      	ldr	r2, [pc, #16]	@ (80061f0 <HAL_RCC_OscConfig+0x76c>)
 80061e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fc f993 	bl	8002510 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ec:	e011      	b.n	8006212 <HAL_RCC_OscConfig+0x78e>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
 80061f4:	58024800 	.word	0x58024800
 80061f8:	fffffc0c 	.word	0xfffffc0c
 80061fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006200:	f7fc f986 	bl	8002510 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e08a      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006212:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x77c>
 800621e:	e082      	b.n	8006326 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006220:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a42      	ldr	r2, [pc, #264]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800622a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622c:	f7fc f970 	bl	8002510 <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fc f96c 	bl	8002510 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e070      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006246:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x7b0>
 8006252:	e068      	b.n	8006326 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006254:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006258:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800625a:	4b35      	ldr	r3, [pc, #212]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	2b01      	cmp	r3, #1
 8006266:	d031      	beq.n	80062cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f003 0203 	and.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d12a      	bne.n	80062cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d122      	bne.n	80062cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006292:	429a      	cmp	r2, r3
 8006294:	d11a      	bne.n	80062cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	0a5b      	lsrs	r3, r3, #9
 800629a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d111      	bne.n	80062cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d108      	bne.n	80062cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	0e1b      	lsrs	r3, r3, #24
 80062be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02b      	b.n	8006328 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062d0:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	08db      	lsrs	r3, r3, #3
 80062d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d01f      	beq.n	8006326 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80062e6:	4b12      	ldr	r3, [pc, #72]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	4a11      	ldr	r2, [pc, #68]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062f2:	f7fc f90d 	bl	8002510 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062f8:	bf00      	nop
 80062fa:	f7fc f909 	bl	8002510 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	4293      	cmp	r3, r2
 8006304:	d0f9      	beq.n	80062fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800630a:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <HAL_RCC_OscConfig+0x8b0>)
 800630c:	4013      	ands	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006312:	00d2      	lsls	r2, r2, #3
 8006314:	4906      	ldr	r1, [pc, #24]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006316:	4313      	orrs	r3, r2
 8006318:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800631a:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	4a04      	ldr	r2, [pc, #16]	@ (8006330 <HAL_RCC_OscConfig+0x8ac>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	@ 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	58024400 	.word	0x58024400
 8006334:	ffff0007 	.word	0xffff0007

08006338 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e19c      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800634c:	4b8a      	ldr	r3, [pc, #552]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d910      	bls.n	800637c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635a:	4b87      	ldr	r3, [pc, #540]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 020f 	bic.w	r2, r3, #15
 8006362:	4985      	ldr	r1, [pc, #532]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b83      	ldr	r3, [pc, #524]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e184      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d010      	beq.n	80063aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	4b7b      	ldr	r3, [pc, #492]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006394:	429a      	cmp	r2, r3
 8006396:	d908      	bls.n	80063aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006398:	4b78      	ldr	r3, [pc, #480]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	4975      	ldr	r1, [pc, #468]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d010      	beq.n	80063d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	4b70      	ldr	r3, [pc, #448]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d908      	bls.n	80063d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063c6:	4b6d      	ldr	r3, [pc, #436]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	496a      	ldr	r1, [pc, #424]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	4b64      	ldr	r3, [pc, #400]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d908      	bls.n	8006406 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063f4:	4b61      	ldr	r3, [pc, #388]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	495e      	ldr	r1, [pc, #376]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006402:	4313      	orrs	r3, r2
 8006404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	4b59      	ldr	r3, [pc, #356]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800641e:	429a      	cmp	r2, r3
 8006420:	d908      	bls.n	8006434 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006422:	4b56      	ldr	r3, [pc, #344]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	4953      	ldr	r1, [pc, #332]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006430:	4313      	orrs	r3, r2
 8006432:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	4b4d      	ldr	r3, [pc, #308]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	429a      	cmp	r2, r3
 800644e:	d908      	bls.n	8006462 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006450:	4b4a      	ldr	r3, [pc, #296]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f023 020f 	bic.w	r2, r3, #15
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4947      	ldr	r1, [pc, #284]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800645e:	4313      	orrs	r3, r2
 8006460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d055      	beq.n	800651a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800646e:	4b43      	ldr	r3, [pc, #268]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4940      	ldr	r1, [pc, #256]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800647c:	4313      	orrs	r3, r2
 800647e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d107      	bne.n	8006498 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006488:	4b3c      	ldr	r3, [pc, #240]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d121      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e0f6      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a0:	4b36      	ldr	r3, [pc, #216]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d115      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0ea      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064b8:	4b30      	ldr	r3, [pc, #192]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0de      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c8:	4b2c      	ldr	r3, [pc, #176]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0d6      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064d8:	4b28      	ldr	r3, [pc, #160]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f023 0207 	bic.w	r2, r3, #7
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4925      	ldr	r1, [pc, #148]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ea:	f7fc f811 	bl	8002510 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f0:	e00a      	b.n	8006508 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f2:	f7fc f80d 	bl	8002510 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0be      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006508:	4b1c      	ldr	r3, [pc, #112]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	429a      	cmp	r2, r3
 8006518:	d1eb      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d010      	beq.n	8006548 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	4b14      	ldr	r3, [pc, #80]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	429a      	cmp	r2, r3
 8006534:	d208      	bcs.n	8006548 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006536:	4b11      	ldr	r3, [pc, #68]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f023 020f 	bic.w	r2, r3, #15
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	490e      	ldr	r1, [pc, #56]	@ (800657c <HAL_RCC_ClockConfig+0x244>)
 8006544:	4313      	orrs	r3, r2
 8006546:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006548:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d214      	bcs.n	8006580 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 020f 	bic.w	r2, r3, #15
 800655e:	4906      	ldr	r1, [pc, #24]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <HAL_RCC_ClockConfig+0x240>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d005      	beq.n	8006580 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e086      	b.n	8006686 <HAL_RCC_ClockConfig+0x34e>
 8006578:	52002000 	.word	0x52002000
 800657c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	4b3f      	ldr	r3, [pc, #252]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006598:	429a      	cmp	r2, r3
 800659a:	d208      	bcs.n	80065ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800659c:	4b3c      	ldr	r3, [pc, #240]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	4939      	ldr	r1, [pc, #228]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	4b34      	ldr	r3, [pc, #208]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d208      	bcs.n	80065dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ca:	4b31      	ldr	r3, [pc, #196]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	492e      	ldr	r1, [pc, #184]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	4b28      	ldr	r3, [pc, #160]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d208      	bcs.n	800660a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065f8:	4b25      	ldr	r3, [pc, #148]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	4922      	ldr	r1, [pc, #136]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006606:	4313      	orrs	r3, r2
 8006608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d010      	beq.n	8006638 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	4b1d      	ldr	r3, [pc, #116]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006622:	429a      	cmp	r2, r3
 8006624:	d208      	bcs.n	8006638 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006626:	4b1a      	ldr	r3, [pc, #104]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	4917      	ldr	r1, [pc, #92]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006634:	4313      	orrs	r3, r2
 8006636:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006638:	f000 f834 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 800663c:	4602      	mov	r2, r0
 800663e:	4b14      	ldr	r3, [pc, #80]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	4912      	ldr	r1, [pc, #72]	@ (8006694 <HAL_RCC_ClockConfig+0x35c>)
 800664a:	5ccb      	ldrb	r3, [r1, r3]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006656:	4b0e      	ldr	r3, [pc, #56]	@ (8006690 <HAL_RCC_ClockConfig+0x358>)
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	4a0d      	ldr	r2, [pc, #52]	@ (8006694 <HAL_RCC_ClockConfig+0x35c>)
 8006660:	5cd3      	ldrb	r3, [r2, r3]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	4a0a      	ldr	r2, [pc, #40]	@ (8006698 <HAL_RCC_ClockConfig+0x360>)
 800666e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006670:	4a0a      	ldr	r2, [pc, #40]	@ (800669c <HAL_RCC_ClockConfig+0x364>)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006676:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <HAL_RCC_ClockConfig+0x368>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fb fefe 	bl	800247c <HAL_InitTick>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
 8006694:	0800eac0 	.word	0x0800eac0
 8006698:	24000008 	.word	0x24000008
 800669c:	24000004 	.word	0x24000004
 80066a0:	2400000c 	.word	0x2400000c

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b089      	sub	sp, #36	@ 0x24
 80066a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066aa:	4bb3      	ldr	r3, [pc, #716]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066b2:	2b18      	cmp	r3, #24
 80066b4:	f200 8155 	bhi.w	8006962 <HAL_RCC_GetSysClockFreq+0x2be>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	08006725 	.word	0x08006725
 80066c4:	08006963 	.word	0x08006963
 80066c8:	08006963 	.word	0x08006963
 80066cc:	08006963 	.word	0x08006963
 80066d0:	08006963 	.word	0x08006963
 80066d4:	08006963 	.word	0x08006963
 80066d8:	08006963 	.word	0x08006963
 80066dc:	08006963 	.word	0x08006963
 80066e0:	0800674b 	.word	0x0800674b
 80066e4:	08006963 	.word	0x08006963
 80066e8:	08006963 	.word	0x08006963
 80066ec:	08006963 	.word	0x08006963
 80066f0:	08006963 	.word	0x08006963
 80066f4:	08006963 	.word	0x08006963
 80066f8:	08006963 	.word	0x08006963
 80066fc:	08006963 	.word	0x08006963
 8006700:	08006751 	.word	0x08006751
 8006704:	08006963 	.word	0x08006963
 8006708:	08006963 	.word	0x08006963
 800670c:	08006963 	.word	0x08006963
 8006710:	08006963 	.word	0x08006963
 8006714:	08006963 	.word	0x08006963
 8006718:	08006963 	.word	0x08006963
 800671c:	08006963 	.word	0x08006963
 8006720:	08006757 	.word	0x08006757
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006724:	4b94      	ldr	r3, [pc, #592]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006730:	4b91      	ldr	r3, [pc, #580]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	4a90      	ldr	r2, [pc, #576]	@ (800697c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006742:	e111      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006744:	4b8d      	ldr	r3, [pc, #564]	@ (800697c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006746:	61bb      	str	r3, [r7, #24]
      break;
 8006748:	e10e      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800674a:	4b8d      	ldr	r3, [pc, #564]	@ (8006980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800674c:	61bb      	str	r3, [r7, #24]
      break;
 800674e:	e10b      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006750:	4b8c      	ldr	r3, [pc, #560]	@ (8006984 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006752:	61bb      	str	r3, [r7, #24]
      break;
 8006754:	e108      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006756:	4b88      	ldr	r3, [pc, #544]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006760:	4b85      	ldr	r3, [pc, #532]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800676a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800676c:	4b82      	ldr	r3, [pc, #520]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006776:	4b80      	ldr	r3, [pc, #512]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	fb02 f303 	mul.w	r3, r2, r3
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80e1 	beq.w	800695c <HAL_RCC_GetSysClockFreq+0x2b8>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b02      	cmp	r3, #2
 800679e:	f000 8083 	beq.w	80068a8 <HAL_RCC_GetSysClockFreq+0x204>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	f200 80a1 	bhi.w	80068ec <HAL_RCC_GetSysClockFreq+0x248>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x114>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d056      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067b6:	e099      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02d      	beq.n	8006820 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067c4:	4b6c      	ldr	r3, [pc, #432]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a6b      	ldr	r2, [pc, #428]	@ (800697c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b62      	ldr	r3, [pc, #392]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006802:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006988 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800681e:	e087      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800698c <HAL_RCC_GetSysClockFreq+0x2e8>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b51      	ldr	r3, [pc, #324]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a02 	vldr	s12, [r7, #8]
 8006846:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006862:	e065      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006990 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b40      	ldr	r3, [pc, #256]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a02 	vldr	s12, [r7, #8]
 800688a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068a6:	e043      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006994 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006988 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ea:	e021      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006990 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006912:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006988 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800692e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006930:	4b11      	ldr	r3, [pc, #68]	@ (8006978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006934:	0a5b      	lsrs	r3, r3, #9
 8006936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800693a:	3301      	adds	r3, #1
 800693c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006948:	edd7 6a07 	vldr	s13, [r7, #28]
 800694c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006954:	ee17 3a90 	vmov	r3, s15
 8006958:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800695a:	e005      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
      break;
 8006960:	e002      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006962:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006964:	61bb      	str	r3, [r7, #24]
      break;
 8006966:	bf00      	nop
  }

  return sysclockfreq;
 8006968:	69bb      	ldr	r3, [r7, #24]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3724      	adds	r7, #36	@ 0x24
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
 800697c:	03d09000 	.word	0x03d09000
 8006980:	003d0900 	.word	0x003d0900
 8006984:	00f42400 	.word	0x00f42400
 8006988:	46000000 	.word	0x46000000
 800698c:	4c742400 	.word	0x4c742400
 8006990:	4a742400 	.word	0x4a742400
 8006994:	4b742400 	.word	0x4b742400

08006998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800699e:	f7ff fe81 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 80069a2:	4602      	mov	r2, r0
 80069a4:	4b10      	ldr	r3, [pc, #64]	@ (80069e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	490f      	ldr	r1, [pc, #60]	@ (80069ec <HAL_RCC_GetHCLKFreq+0x54>)
 80069b0:	5ccb      	ldrb	r3, [r1, r3]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069bc:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <HAL_RCC_GetHCLKFreq+0x54>)
 80069c6:	5cd3      	ldrb	r3, [r2, r3]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	4a07      	ldr	r2, [pc, #28]	@ (80069f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069d6:	4a07      	ldr	r2, [pc, #28]	@ (80069f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069dc:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069de:	681b      	ldr	r3, [r3, #0]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	58024400 	.word	0x58024400
 80069ec:	0800eac0 	.word	0x0800eac0
 80069f0:	24000008 	.word	0x24000008
 80069f4:	24000004 	.word	0x24000004

080069f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069fc:	f7ff ffcc 	bl	8006998 <HAL_RCC_GetHCLKFreq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	091b      	lsrs	r3, r3, #4
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	4904      	ldr	r1, [pc, #16]	@ (8006a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a0e:	5ccb      	ldrb	r3, [r1, r3]
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	0800eac0 	.word	0x0800eac0

08006a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a28:	b0ca      	sub	sp, #296	@ 0x128
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a36:	2300      	movs	r3, #0
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a48:	2500      	movs	r5, #0
 8006a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a4e:	d049      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a5a:	d02f      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a60:	d828      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a66:	d01a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a6c:	d822      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a76:	d007      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a78:	e01c      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a86:	e01a      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f002 fb61 	bl	8009158 <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a9c:	e00f      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 fc08 	bl	80092bc <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006af0:	f04f 0900 	mov.w	r9, #0
 8006af4:	ea58 0309 	orrs.w	r3, r8, r9
 8006af8:	d047      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d82a      	bhi.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b04:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b21 	.word	0x08006b21
 8006b10:	08006b2f 	.word	0x08006b2f
 8006b14:	08006b45 	.word	0x08006b45
 8006b18:	08006b63 	.word	0x08006b63
 8006b1c:	08006b63 	.word	0x08006b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b20:	4b8e      	ldr	r3, [pc, #568]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	4a8d      	ldr	r2, [pc, #564]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b2c:	e01a      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	3308      	adds	r3, #8
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f002 fb0e 	bl	8009158 <RCCEx_PLL2_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b42:	e00f      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	3328      	adds	r3, #40	@ 0x28
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f002 fbb5 	bl	80092bc <RCCEx_PLL3_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b58:	e004      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b70:	f023 0107 	bic.w	r1, r3, #7
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	4a78      	ldr	r2, [pc, #480]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b80:	e003      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006b96:	f04f 0b00 	mov.w	fp, #0
 8006b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b9e:	d04c      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006baa:	d030      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bb0:	d829      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bb4:	d02d      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bb8:	d825      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bba:	2b80      	cmp	r3, #128	@ 0x80
 8006bbc:	d018      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006bbe:	2b80      	cmp	r3, #128	@ 0x80
 8006bc0:	d821      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006bc6:	2b40      	cmp	r3, #64	@ 0x40
 8006bc8:	d007      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006bca:	e01c      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bcc:	4b63      	ldr	r3, [pc, #396]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	4a62      	ldr	r2, [pc, #392]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e01c      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	3308      	adds	r3, #8
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f002 fab8 	bl	8009158 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bee:	e011      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	3328      	adds	r3, #40	@ 0x28
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 fb5f 	bl	80092bc <RCCEx_PLL3_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c04:	e006      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0c:	e002      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c30:	e003      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006c54:	460b      	mov	r3, r1
 8006c56:	4313      	orrs	r3, r2
 8006c58:	d053      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c66:	d035      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c6c:	d82e      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c72:	d031      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c78:	d828      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c7e:	d01a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c84:	d822      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c8e:	d007      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c90:	e01c      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c92:	4b32      	ldr	r3, [pc, #200]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	4a31      	ldr	r2, [pc, #196]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c9e:	e01c      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 fa55 	bl	8009158 <RCCEx_PLL2_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e011      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3328      	adds	r3, #40	@ 0x28
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f002 fafc 	bl	80092bc <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cca:	e006      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d056      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d2e:	d038      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d34:	d831      	bhi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d3a:	d034      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d40:	d82b      	bhi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d46:	d01d      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d4c:	d825      	bhi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d56:	d00a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d58:	e01f      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4ba2      	ldr	r3, [pc, #648]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	4aa1      	ldr	r2, [pc, #644]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	3308      	adds	r3, #8
 8006d74:	2100      	movs	r1, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f002 f9ee 	bl	8009158 <RCCEx_PLL2_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d82:	e011      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d88:	3328      	adds	r3, #40	@ 0x28
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 fa95 	bl	80092bc <RCCEx_PLL3_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d98:	e006      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006da0:	e002      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006db0:	4b8e      	ldr	r3, [pc, #568]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dc6:	e003      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d03a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df6:	2b30      	cmp	r3, #48	@ 0x30
 8006df8:	d01f      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006dfa:	2b30      	cmp	r3, #48	@ 0x30
 8006dfc:	d819      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d00c      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d815      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d019      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d111      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0e:	4b77      	ldr	r3, [pc, #476]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	4a76      	ldr	r2, [pc, #472]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e1a:	e011      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	3308      	adds	r3, #8
 8006e22:	2102      	movs	r1, #2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 f997 	bl	8009158 <RCCEx_PLL2_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e48:	4b68      	ldr	r3, [pc, #416]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e56:	4a65      	ldr	r2, [pc, #404]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d051      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e90:	d035      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e96:	d82e      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e9c:	d031      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ea2:	d828      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea8:	d01a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eae:	d822      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb8:	d007      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006eba:	e01c      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ec8:	e01c      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	3308      	adds	r3, #8
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f002 f940 	bl	8009158 <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ede:	e011      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	3328      	adds	r3, #40	@ 0x28
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 f9e7 	bl	80092bc <RCCEx_PLL3_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e006      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efc:	e002      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006efe:	bf00      	nop
 8006f00:	e000      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f0c:	4b37      	ldr	r3, [pc, #220]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1a:	4a34      	ldr	r2, [pc, #208]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d056      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f54:	d033      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f5a:	d82c      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f60:	d02f      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f66:	d826      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f6c:	d02b      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f72:	d820      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f78:	d012      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7e:	d81a      	bhi.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d022      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f88:	d115      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	3308      	adds	r3, #8
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f002 f8e0 	bl	8009158 <RCCEx_PLL2_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f9e:	e015      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	3328      	adds	r3, #40	@ 0x28
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f002 f987 	bl	80092bc <RCCEx_PLL3_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fbc:	e006      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fbe:	bf00      	nop
 8006fc0:	e004      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e002      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10d      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fd4:	4b05      	ldr	r3, [pc, #20]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fe2:	4a02      	ldr	r2, [pc, #8]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fe8:	e006      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fea:	bf00      	nop
 8006fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800700e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d055      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007024:	d033      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800702a:	d82c      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007030:	d02f      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d826      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800703c:	d02b      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800703e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007042:	d820      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007048:	d012      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800704a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704e:	d81a      	bhi.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d022      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007058:	d115      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705e:	3308      	adds	r3, #8
 8007060:	2101      	movs	r1, #1
 8007062:	4618      	mov	r0, r3
 8007064:	f002 f878 	bl	8009158 <RCCEx_PLL2_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800706e:	e015      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	3328      	adds	r3, #40	@ 0x28
 8007076:	2101      	movs	r1, #1
 8007078:	4618      	mov	r0, r3
 800707a:	f002 f91f 	bl	80092bc <RCCEx_PLL3_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007084:	e00a      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800708e:	bf00      	nop
 8007090:	e004      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800709a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070a4:	4ba3      	ldr	r3, [pc, #652]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070b4:	4a9f      	ldr	r2, [pc, #636]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d037      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ee:	d00e      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070f4:	d816      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d018      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80070fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070fe:	d111      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b8c      	ldr	r3, [pc, #560]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4a8b      	ldr	r2, [pc, #556]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800710c:	e00f      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	3308      	adds	r3, #8
 8007114:	2101      	movs	r1, #1
 8007116:	4618      	mov	r0, r3
 8007118:	f002 f81e 	bl	8009158 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007122:	e004      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800712a:	e000      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800712c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007136:	4b7f      	ldr	r3, [pc, #508]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007144:	4a7b      	ldr	r2, [pc, #492]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007146:	430b      	orrs	r3, r1
 8007148:	6513      	str	r3, [r2, #80]	@ 0x50
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007164:	2300      	movs	r3, #0
 8007166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800716a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800716e:	460b      	mov	r3, r1
 8007170:	4313      	orrs	r3, r2
 8007172:	d039      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717a:	2b03      	cmp	r3, #3
 800717c:	d81c      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800717e:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071c1 	.word	0x080071c1
 8007188:	08007195 	.word	0x08007195
 800718c:	080071a3 	.word	0x080071a3
 8007190:	080071c1 	.word	0x080071c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007194:	4b67      	ldr	r3, [pc, #412]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	4a66      	ldr	r2, [pc, #408]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800719e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071a0:	e00f      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	3308      	adds	r3, #8
 80071a8:	2102      	movs	r1, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 ffd4 	bl	8009158 <RCCEx_PLL2_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ce:	f023 0103 	bic.w	r1, r3, #3
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d8:	4a56      	ldr	r2, [pc, #344]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071da:	430b      	orrs	r3, r1
 80071dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071de:	e003      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80071f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007202:	460b      	mov	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	f000 809f 	beq.w	8007348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800720a:	4b4b      	ldr	r3, [pc, #300]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4a      	ldr	r2, [pc, #296]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007216:	f7fb f97b 	bl	8002510 <HAL_GetTick>
 800721a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800721e:	e00b      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007220:	f7fb f976 	bl	8002510 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b64      	cmp	r3, #100	@ 0x64
 800722e:	d903      	bls.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007236:	e005      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007238:	4b3f      	ldr	r3, [pc, #252]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0ed      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007248:	2b00      	cmp	r3, #0
 800724a:	d179      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800724c:	4b39      	ldr	r3, [pc, #228]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800724e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007258:	4053      	eors	r3, r2
 800725a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725e:	2b00      	cmp	r3, #0
 8007260:	d015      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007262:	4b34      	ldr	r3, [pc, #208]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800726a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800726e:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007272:	4a30      	ldr	r2, [pc, #192]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800727a:	4b2e      	ldr	r3, [pc, #184]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a2d      	ldr	r2, [pc, #180]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007286:	4a2b      	ldr	r2, [pc, #172]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800728c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729a:	d118      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fb f938 	bl	8002510 <HAL_GetTick>
 80072a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a4:	e00d      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fb f933 	bl	8002510 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d903      	bls.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80072c0:	e005      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0eb      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80072ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d129      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e6:	d10e      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80072e8:	4b12      	ldr	r3, [pc, #72]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072f8:	091a      	lsrs	r2, r3, #4
 80072fa:	4b10      	ldr	r3, [pc, #64]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007300:	430b      	orrs	r3, r1
 8007302:	6113      	str	r3, [r2, #16]
 8007304:	e005      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	4a0a      	ldr	r2, [pc, #40]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007310:	6113      	str	r3, [r2, #16]
 8007312:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800731e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007322:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007324:	430b      	orrs	r3, r1
 8007326:	6713      	str	r3, [r2, #112]	@ 0x70
 8007328:	e00e      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800732a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800732e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007332:	e009      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007334:	58024400 	.word	0x58024400
 8007338:	58024800 	.word	0x58024800
 800733c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f002 0301 	and.w	r3, r2, #1
 8007354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800735e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	f000 8089 	beq.w	800747c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007370:	2b28      	cmp	r3, #40	@ 0x28
 8007372:	d86b      	bhi.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007374:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	08007455 	.word	0x08007455
 8007380:	0800744d 	.word	0x0800744d
 8007384:	0800744d 	.word	0x0800744d
 8007388:	0800744d 	.word	0x0800744d
 800738c:	0800744d 	.word	0x0800744d
 8007390:	0800744d 	.word	0x0800744d
 8007394:	0800744d 	.word	0x0800744d
 8007398:	0800744d 	.word	0x0800744d
 800739c:	08007421 	.word	0x08007421
 80073a0:	0800744d 	.word	0x0800744d
 80073a4:	0800744d 	.word	0x0800744d
 80073a8:	0800744d 	.word	0x0800744d
 80073ac:	0800744d 	.word	0x0800744d
 80073b0:	0800744d 	.word	0x0800744d
 80073b4:	0800744d 	.word	0x0800744d
 80073b8:	0800744d 	.word	0x0800744d
 80073bc:	08007437 	.word	0x08007437
 80073c0:	0800744d 	.word	0x0800744d
 80073c4:	0800744d 	.word	0x0800744d
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	0800744d 	.word	0x0800744d
 80073d0:	0800744d 	.word	0x0800744d
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	0800744d 	.word	0x0800744d
 80073dc:	08007455 	.word	0x08007455
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	0800744d 	.word	0x0800744d
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	08007455 	.word	0x08007455
 8007400:	0800744d 	.word	0x0800744d
 8007404:	0800744d 	.word	0x0800744d
 8007408:	0800744d 	.word	0x0800744d
 800740c:	0800744d 	.word	0x0800744d
 8007410:	0800744d 	.word	0x0800744d
 8007414:	0800744d 	.word	0x0800744d
 8007418:	0800744d 	.word	0x0800744d
 800741c:	08007455 	.word	0x08007455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007424:	3308      	adds	r3, #8
 8007426:	2101      	movs	r1, #1
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fe95 	bl	8009158 <RCCEx_PLL2_Config>
 800742e:	4603      	mov	r3, r0
 8007430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007434:	e00f      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743a:	3328      	adds	r3, #40	@ 0x28
 800743c:	2101      	movs	r1, #1
 800743e:	4618      	mov	r0, r3
 8007440:	f001 ff3c 	bl	80092bc <RCCEx_PLL3_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800745e:	4bbf      	ldr	r3, [pc, #764]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800746c:	4abb      	ldr	r2, [pc, #748]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800746e:	430b      	orrs	r3, r1
 8007470:	6553      	str	r3, [r2, #84]	@ 0x54
 8007472:	e003      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f002 0302 	and.w	r3, r2, #2
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800748c:	2300      	movs	r3, #0
 800748e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d041      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d824      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80074a6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074db 	.word	0x080074db
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c8:	3308      	adds	r3, #8
 80074ca:	2101      	movs	r1, #1
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fe43 	bl	8009158 <RCCEx_PLL2_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074d8:	e00f      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	3328      	adds	r3, #40	@ 0x28
 80074e0:	2101      	movs	r1, #1
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 feea 	bl	80092bc <RCCEx_PLL3_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074ee:	e004      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074f6:	e000      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80074f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007502:	4b96      	ldr	r3, [pc, #600]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007506:	f023 0107 	bic.w	r1, r3, #7
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007510:	4a92      	ldr	r2, [pc, #584]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6553      	str	r3, [r2, #84]	@ 0x54
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 0304 	and.w	r3, r2, #4
 800752c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800753a:	460b      	mov	r3, r1
 800753c:	4313      	orrs	r3, r2
 800753e:	d044      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007548:	2b05      	cmp	r3, #5
 800754a:	d825      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800754c:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	080075a1 	.word	0x080075a1
 8007558:	0800756d 	.word	0x0800756d
 800755c:	08007583 	.word	0x08007583
 8007560:	080075a1 	.word	0x080075a1
 8007564:	080075a1 	.word	0x080075a1
 8007568:	080075a1 	.word	0x080075a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007570:	3308      	adds	r3, #8
 8007572:	2101      	movs	r1, #1
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fdef 	bl	8009158 <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007580:	e00f      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	3328      	adds	r3, #40	@ 0x28
 8007588:	2101      	movs	r1, #1
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fe96 	bl	80092bc <RCCEx_PLL3_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007596:	e004      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800759e:	e000      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80075a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075aa:	4b6c      	ldr	r3, [pc, #432]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ae:	f023 0107 	bic.w	r1, r3, #7
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ba:	4a68      	ldr	r2, [pc, #416]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075bc:	430b      	orrs	r3, r1
 80075be:	6593      	str	r3, [r2, #88]	@ 0x58
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f002 0320 	and.w	r3, r2, #32
 80075d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075da:	2300      	movs	r3, #0
 80075dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d055      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075f6:	d033      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80075f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075fc:	d82c      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007602:	d02f      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007608:	d826      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800760a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800760e:	d02b      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007614:	d820      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761a:	d012      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800761c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007620:	d81a      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d022      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800762a:	d115      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007630:	3308      	adds	r3, #8
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fd8f 	bl	8009158 <RCCEx_PLL2_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007640:	e015      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	3328      	adds	r3, #40	@ 0x28
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fe36 	bl	80092bc <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007656:	e00a      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800765e:	e006      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007676:	4b39      	ldr	r3, [pc, #228]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007686:	4a35      	ldr	r2, [pc, #212]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007688:	430b      	orrs	r3, r1
 800768a:	6553      	str	r3, [r2, #84]	@ 0x54
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076a6:	2300      	movs	r3, #0
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d058      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076c2:	d033      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80076c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076c8:	d82c      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ce:	d02f      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d826      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076da:	d02b      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80076dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076e0:	d820      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076e6:	d012      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80076e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ec:	d81a      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d022      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80076f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f6:	d115      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fc:	3308      	adds	r3, #8
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fd29 	bl	8009158 <RCCEx_PLL2_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800770c:	e015      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800770e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007712:	3328      	adds	r3, #40	@ 0x28
 8007714:	2102      	movs	r1, #2
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fdd0 	bl	80092bc <RCCEx_PLL3_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007722:	e00a      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800772a:	e006      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800772c:	bf00      	nop
 800772e:	e004      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007730:	bf00      	nop
 8007732:	e002      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10e      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007742:	4b06      	ldr	r3, [pc, #24]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007752:	4a02      	ldr	r2, [pc, #8]	@ (800775c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007754:	430b      	orrs	r3, r1
 8007756:	6593      	str	r3, [r2, #88]	@ 0x58
 8007758:	e006      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800775a:	bf00      	nop
 800775c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007778:	2300      	movs	r3, #0
 800777a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800777e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007782:	460b      	mov	r3, r1
 8007784:	4313      	orrs	r3, r2
 8007786:	d055      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007794:	d033      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800779a:	d82c      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800779c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a0:	d02f      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80077a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a6:	d826      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077ac:	d02b      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80077ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077b2:	d820      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077b8:	d012      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80077ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077be:	d81a      	bhi.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d022      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c8:	d115      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	3308      	adds	r3, #8
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 fcc0 	bl	8009158 <RCCEx_PLL2_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077de:	e015      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e4:	3328      	adds	r3, #40	@ 0x28
 80077e6:	2102      	movs	r1, #2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 fd67 	bl	80092bc <RCCEx_PLL3_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077f4:	e00a      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077fc:	e006      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077fe:	bf00      	nop
 8007800:	e004      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007802:	bf00      	nop
 8007804:	e002      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007806:	bf00      	nop
 8007808:	e000      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800780a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007814:	4ba1      	ldr	r3, [pc, #644]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007824:	4a9d      	ldr	r2, [pc, #628]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007826:	430b      	orrs	r3, r1
 8007828:	6593      	str	r3, [r2, #88]	@ 0x58
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f002 0308 	and.w	r3, r2, #8
 8007840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007844:	2300      	movs	r3, #0
 8007846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800784a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800784e:	460b      	mov	r3, r1
 8007850:	4313      	orrs	r3, r2
 8007852:	d01e      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007860:	d10c      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	3328      	adds	r3, #40	@ 0x28
 8007868:	2102      	movs	r1, #2
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fd26 	bl	80092bc <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800787c:	4b87      	ldr	r3, [pc, #540]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800787e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800788c:	4a83      	ldr	r2, [pc, #524]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800788e:	430b      	orrs	r3, r1
 8007890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f002 0310 	and.w	r3, r2, #16
 800789e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078a2:	2300      	movs	r3, #0
 80078a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d01e      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078be:	d10c      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	3328      	adds	r3, #40	@ 0x28
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fcf7 	bl	80092bc <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078da:	4b70      	ldr	r3, [pc, #448]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078ea:	4a6c      	ldr	r2, [pc, #432]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80078fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007900:	2300      	movs	r3, #0
 8007902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800790a:	460b      	mov	r3, r1
 800790c:	4313      	orrs	r3, r2
 800790e:	d03e      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800791c:	d022      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007922:	d81b      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800792c:	d00b      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800792e:	e015      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	3308      	adds	r3, #8
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f001 fc0d 	bl	8009158 <RCCEx_PLL2_Config>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007944:	e00f      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	3328      	adds	r3, #40	@ 0x28
 800794c:	2102      	movs	r1, #2
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fcb4 	bl	80092bc <RCCEx_PLL3_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800795a:	e004      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800796e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800797e:	4a47      	ldr	r2, [pc, #284]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007980:	430b      	orrs	r3, r1
 8007982:	6593      	str	r3, [r2, #88]	@ 0x58
 8007984:	e003      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800799a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800799c:	2300      	movs	r3, #0
 800799e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d03b      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079b6:	d01f      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80079b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079bc:	d818      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c2:	d003      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80079c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079c8:	d007      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80079ca:	e011      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079cc:	4b33      	ldr	r3, [pc, #204]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079d8:	e00f      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	3328      	adds	r3, #40	@ 0x28
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fc6a 	bl	80092bc <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80079ee:	e004      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80079f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a02:	4b26      	ldr	r3, [pc, #152]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a12:	4a22      	ldr	r2, [pc, #136]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a18:	e003      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a30:	2300      	movs	r3, #0
 8007a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d034      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a4c:	d007      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a4e:	e011      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a50:	4b12      	ldr	r3, [pc, #72]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	4a11      	ldr	r2, [pc, #68]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a5c:	e00e      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	3308      	adds	r3, #8
 8007a64:	2102      	movs	r1, #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 fb76 	bl	8009158 <RCCEx_PLL2_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a72:	e003      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10d      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a92:	4a02      	ldr	r2, [pc, #8]	@ (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a9a:	bf00      	nop
 8007a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d00c      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac8:	3328      	adds	r3, #40	@ 0x28
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fbf5 	bl	80092bc <RCCEx_PLL3_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aec:	2300      	movs	r3, #0
 8007aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8007af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007af4:	460b      	mov	r3, r1
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d038      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b06:	d018      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b0c:	d811      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b12:	d014      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b18:	d80b      	bhi.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d011      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b22:	d106      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b24:	4bc3      	ldr	r3, [pc, #780]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4ac2      	ldr	r2, [pc, #776]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b30:	e008      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b38:	e004      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10b      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5c:	4ab5      	ldr	r2, [pc, #724]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b62:	e003      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d009      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b88:	4baa      	ldr	r3, [pc, #680]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b96:	4aa7      	ldr	r2, [pc, #668]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007baa:	2300      	movs	r3, #0
 8007bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bc8:	4a9a      	ldr	r2, [pc, #616]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bdc:	2300      	movs	r3, #0
 8007bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007be0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007be4:	460b      	mov	r3, r1
 8007be6:	4313      	orrs	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bea:	4b92      	ldr	r3, [pc, #584]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d00e      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c1a:	4b86      	ldr	r3, [pc, #536]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	4a85      	ldr	r2, [pc, #532]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c24:	6113      	str	r3, [r2, #16]
 8007c26:	4b83      	ldr	r3, [pc, #524]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c28:	6919      	ldr	r1, [r3, #16]
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c32:	4a80      	ldr	r2, [pc, #512]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c46:	2300      	movs	r3, #0
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d009      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c54:	4b77      	ldr	r3, [pc, #476]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	4a74      	ldr	r2, [pc, #464]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c64:	430b      	orrs	r3, r1
 8007c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c76:	2300      	movs	r3, #0
 8007c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d00a      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c84:	4b6b      	ldr	r3, [pc, #428]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c94:	4a67      	ldr	r2, [pc, #412]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	d011      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	3308      	adds	r3, #8
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 fa4a 	bl	8009158 <RCCEx_PLL2_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6239      	str	r1, [r7, #32]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	d011      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fa2a 	bl	8009158 <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	2100      	movs	r1, #0
 8007d24:	61b9      	str	r1, [r7, #24]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d30:	460b      	mov	r3, r1
 8007d32:	4313      	orrs	r3, r2
 8007d34:	d011      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fa0a 	bl	8009158 <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	2100      	movs	r1, #0
 8007d64:	6139      	str	r1, [r7, #16]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d011      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	3328      	adds	r3, #40	@ 0x28
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fa9c 	bl	80092bc <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	2100      	movs	r1, #0
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007db0:	460b      	mov	r3, r1
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d011      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	3328      	adds	r3, #40	@ 0x28
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fa7c 	bl	80092bc <RCCEx_PLL3_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	2100      	movs	r1, #0
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d011      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fa5c 	bl	80092bc <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007e1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e34:	58024400 	.word	0x58024400

08007e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b090      	sub	sp, #64	@ 0x40
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007e4a:	430b      	orrs	r3, r1
 8007e4c:	f040 8094 	bne.w	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e50:	4b9e      	ldr	r3, [pc, #632]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	f200 8087 	bhi.w	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e62:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007ea5 	.word	0x08007ea5
 8007e70:	08007ecd 	.word	0x08007ecd
 8007e74:	08007f69 	.word	0x08007f69
 8007e78:	08007ef5 	.word	0x08007ef5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e7c:	4b93      	ldr	r3, [pc, #588]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e88:	d108      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f810 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e98:	f000 bd45 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	f000 bd41 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ea4:	4b89      	ldr	r3, [pc, #548]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eb0:	d108      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb2:	f107 0318 	add.w	r3, r7, #24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fd54 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec0:	f000 bd31 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	f000 bd2d 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ecc:	4b7f      	ldr	r3, [pc, #508]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed8:	d108      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eda:	f107 030c 	add.w	r3, r7, #12
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fe94 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee8:	f000 bd1d 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	f000 bd19 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ef4:	4b75      	ldr	r3, [pc, #468]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007efc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007efe:	4b73      	ldr	r3, [pc, #460]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d10c      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f10:	4b6e      	ldr	r3, [pc, #440]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a6d      	ldr	r2, [pc, #436]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f22:	e01f      	b.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f24:	4b69      	ldr	r3, [pc, #420]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f30:	d106      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f38:	d102      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f3a:	4b66      	ldr	r3, [pc, #408]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3e:	e011      	b.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f40:	4b62      	ldr	r3, [pc, #392]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f4c:	d106      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f54:	d102      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f56:	4b60      	ldr	r3, [pc, #384]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f5a:	e003      	b.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f60:	f000 bce1 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f64:	f000 bcdf 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f68:	4b5c      	ldr	r3, [pc, #368]	@ (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f6c:	f000 bcdb 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f74:	f000 bcd7 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007f80:	430b      	orrs	r3, r1
 8007f82:	f040 80ad 	bne.w	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f86:	4b51      	ldr	r3, [pc, #324]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007f8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	d056      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f9e:	f200 8090 	bhi.w	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fa6:	f000 8088 	beq.w	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fae:	f200 8088 	bhi.w	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	2b80      	cmp	r3, #128	@ 0x80
 8007fb6:	d032      	beq.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	2b80      	cmp	r3, #128	@ 0x80
 8007fbc:	f200 8081 	bhi.w	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d014      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007fcc:	e079      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fce:	4b3f      	ldr	r3, [pc, #252]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fda:	d108      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 ff67 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fea:	f000 bc9c 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff2:	f000 bc98 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ff6:	4b35      	ldr	r3, [pc, #212]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008002:	d108      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008004:	f107 0318 	add.w	r3, r7, #24
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fcab 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008012:	f000 bc88 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801a:	f000 bc84 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800801e:	4b2b      	ldr	r3, [pc, #172]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800802a:	d108      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fdeb 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800803a:	f000 bc74 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008042:	f000 bc70 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008046:	4b21      	ldr	r3, [pc, #132]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008050:	4b1e      	ldr	r3, [pc, #120]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b04      	cmp	r3, #4
 800805a:	d10c      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008062:	4b1a      	ldr	r3, [pc, #104]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a18      	ldr	r2, [pc, #96]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008074:	e01f      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008076:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008082:	d106      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800808a:	d102      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800808c:	4b11      	ldr	r3, [pc, #68]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008090:	e011      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008092:	4b0e      	ldr	r3, [pc, #56]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800809e:	d106      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080a6:	d102      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080a8:	4b0b      	ldr	r3, [pc, #44]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80080b2:	f000 bc38 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080b6:	f000 bc36 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080be:	f000 bc32 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c6:	f000 bc2e 	b.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080ca:	bf00      	nop
 80080cc:	58024400 	.word	0x58024400
 80080d0:	03d09000 	.word	0x03d09000
 80080d4:	003d0900 	.word	0x003d0900
 80080d8:	00f42400 	.word	0x00f42400
 80080dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80080e8:	430b      	orrs	r3, r1
 80080ea:	f040 809c 	bne.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80080ee:	4b9e      	ldr	r3, [pc, #632]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080fe:	d054      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008106:	f200 808b 	bhi.w	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008110:	f000 8083 	beq.w	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800811a:	f200 8081 	bhi.w	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008124:	d02f      	beq.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800812c:	d878      	bhi.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800813a:	d012      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800813c:	e070      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800813e:	4b8a      	ldr	r3, [pc, #552]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800814a:	d107      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800814c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008150:	4618      	mov	r0, r3
 8008152:	f000 feaf 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800815a:	e3e4      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008160:	e3e1      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008162:	4b81      	ldr	r3, [pc, #516]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800816a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800816e:	d107      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008170:	f107 0318 	add.w	r3, r7, #24
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fbf5 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800817e:	e3d2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008184:	e3cf      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008186:	4b78      	ldr	r3, [pc, #480]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800818e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008192:	d107      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fd37 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a2:	e3c0      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a8:	e3bd      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d10c      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80081c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081c6:	4b68      	ldr	r3, [pc, #416]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	08db      	lsrs	r3, r3, #3
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	4a66      	ldr	r2, [pc, #408]	@ (800836c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081d2:	fa22 f303 	lsr.w	r3, r2, r3
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d8:	e01e      	b.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081da:	4b63      	ldr	r3, [pc, #396]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e6:	d106      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80081e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081ee:	d102      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f4:	e010      	b.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008202:	d106      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800820a:	d102      	bne.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800820c:	4b59      	ldr	r3, [pc, #356]	@ (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008216:	e386      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008218:	e385      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800821a:	4b57      	ldr	r3, [pc, #348]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821e:	e382      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008224:	e37f      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800822e:	430b      	orrs	r3, r1
 8008230:	f040 80a7 	bne.w	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008234:	4b4c      	ldr	r3, [pc, #304]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008238:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800823c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008244:	d055      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800824c:	f200 8096 	bhi.w	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008256:	f000 8084 	beq.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008260:	f200 808c 	bhi.w	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800826a:	d030      	beq.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008272:	f200 8083 	bhi.w	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008282:	d012      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008284:	e07a      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008286:	4b38      	ldr	r3, [pc, #224]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800828e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008292:	d107      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008298:	4618      	mov	r0, r3
 800829a:	f000 fe0b 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a2:	e340      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e33d      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b6:	d107      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b8:	f107 0318 	add.w	r3, r7, #24
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fb51 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c6:	e32e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082cc:	e32b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082ce:	4b26      	ldr	r3, [pc, #152]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082da:	d107      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fc93 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ea:	e31c      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f0:	e319      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b04      	cmp	r3, #4
 8008306:	d10c      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800830e:	4b16      	ldr	r3, [pc, #88]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	4a14      	ldr	r2, [pc, #80]	@ (800836c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008320:	e01e      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008322:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800832a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832e:	d106      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008336:	d102      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008338:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800833c:	e010      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800833e:	4b0a      	ldr	r3, [pc, #40]	@ (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800834a:	d106      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800834c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008352:	d102      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008354:	4b07      	ldr	r3, [pc, #28]	@ (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008358:	e002      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800835e:	e2e2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008360:	e2e1      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008362:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008366:	e2de      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008368:	58024400 	.word	0x58024400
 800836c:	03d09000 	.word	0x03d09000
 8008370:	003d0900 	.word	0x003d0900
 8008374:	00f42400 	.word	0x00f42400
 8008378:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008380:	e2d1      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008386:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800838a:	430b      	orrs	r3, r1
 800838c:	f040 809c 	bne.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008390:	4b93      	ldr	r3, [pc, #588]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008394:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008398:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a0:	d054      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a8:	f200 808b 	bhi.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083b2:	f000 8083 	beq.w	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083bc:	f200 8081 	bhi.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083c6:	d02f      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ce:	d878      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083dc:	d012      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80083de:	e070      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e0:	4b7f      	ldr	r3, [pc, #508]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ec:	d107      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fd5e 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fc:	e293      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008402:	e290      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008404:	4b76      	ldr	r3, [pc, #472]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800840c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008410:	d107      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008412:	f107 0318 	add.w	r3, r7, #24
 8008416:	4618      	mov	r0, r3
 8008418:	f000 faa4 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008420:	e281      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008426:	e27e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008428:	4b6d      	ldr	r3, [pc, #436]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008436:	f107 030c 	add.w	r3, r7, #12
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fbe6 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008444:	e26f      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800844a:	e26c      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800844c:	4b64      	ldr	r3, [pc, #400]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800844e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008456:	4b62      	ldr	r3, [pc, #392]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d10c      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008468:	4b5d      	ldr	r3, [pc, #372]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	08db      	lsrs	r3, r3, #3
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	4a5c      	ldr	r2, [pc, #368]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800847a:	e01e      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800847c:	4b58      	ldr	r3, [pc, #352]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008488:	d106      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800848a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008490:	d102      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008492:	4b55      	ldr	r3, [pc, #340]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008496:	e010      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008498:	4b51      	ldr	r3, [pc, #324]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ac:	d102      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ae:	4b4f      	ldr	r3, [pc, #316]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084b8:	e235      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084ba:	e234      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084bc:	4b4c      	ldr	r3, [pc, #304]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c0:	e231      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e22e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80084c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80084d0:	430b      	orrs	r3, r1
 80084d2:	f040 808f 	bne.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084d6:	4b42      	ldr	r3, [pc, #264]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80084de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084e6:	d06b      	beq.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084ee:	d874      	bhi.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084f6:	d056      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084fe:	d86c      	bhi.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008506:	d03b      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800850e:	d864      	bhi.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008516:	d021      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800851e:	d85c      	bhi.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852c:	d004      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800852e:	e054      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008530:	f7fe fa62 	bl	80069f8 <HAL_RCC_GetPCLK1Freq>
 8008534:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008536:	e1f6      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008538:	4b29      	ldr	r3, [pc, #164]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008544:	d107      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008546:	f107 0318 	add.w	r3, r7, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fa0a 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008554:	e1e7      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855a:	e1e4      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800855c:	4b20      	ldr	r3, [pc, #128]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d107      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800856a:	f107 030c 	add.w	r3, r7, #12
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb4c 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008578:	e1d5      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857e:	e1d2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008580:	4b17      	ldr	r3, [pc, #92]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b04      	cmp	r3, #4
 800858a:	d109      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	08db      	lsrs	r3, r3, #3
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	4a13      	ldr	r2, [pc, #76]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008598:	fa22 f303 	lsr.w	r3, r2, r3
 800859c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859e:	e1c2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a4:	e1bf      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085a6:	4b0e      	ldr	r3, [pc, #56]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b8:	e1b5      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085be:	e1b2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085cc:	d102      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80085ce:	4b07      	ldr	r3, [pc, #28]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d2:	e1a8      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e1a5      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085de:	e1a2      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e0:	58024400 	.word	0x58024400
 80085e4:	03d09000 	.word	0x03d09000
 80085e8:	003d0900 	.word	0x003d0900
 80085ec:	00f42400 	.word	0x00f42400
 80085f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80085f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80085fc:	430b      	orrs	r3, r1
 80085fe:	d173      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008600:	4b9c      	ldr	r3, [pc, #624]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008608:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800860a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008610:	d02f      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008618:	d863      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008626:	d012      	beq.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008628:	e05b      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862a:	4b92      	ldr	r3, [pc, #584]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008636:	d107      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008638:	f107 0318 	add.w	r3, r7, #24
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f991 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008646:	e16e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864c:	e16b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800864e:	4b89      	ldr	r3, [pc, #548]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800865a:	d107      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865c:	f107 030c 	add.w	r3, r7, #12
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fad3 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866a:	e15c      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008670:	e159      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008672:	4b80      	ldr	r3, [pc, #512]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800867c:	4b7d      	ldr	r3, [pc, #500]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d10c      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800868e:	4b79      	ldr	r3, [pc, #484]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	4a77      	ldr	r2, [pc, #476]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a0:	e01e      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086a2:	4b74      	ldr	r3, [pc, #464]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ae:	d106      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086b8:	4b70      	ldr	r3, [pc, #448]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086bc:	e010      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086be:	4b6d      	ldr	r3, [pc, #436]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ca:	d106      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d2:	d102      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d8:	e002      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086de:	e122      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086e0:	e121      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086e6:	e11e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80086f0:	430b      	orrs	r3, r1
 80086f2:	d133      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800870a:	d012      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800870c:	e023      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800870e:	4b59      	ldr	r3, [pc, #356]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800871a:	d107      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800871c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fbc7 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872a:	e0fc      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008730:	e0f9      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008732:	4b50      	ldr	r3, [pc, #320]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800873a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800873e:	d107      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f90d 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874e:	e0ea      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008754:	e0e7      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800875a:	e0e4      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800875c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008760:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008764:	430b      	orrs	r3, r1
 8008766:	f040 808d 	bne.w	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800876a:	4b42      	ldr	r3, [pc, #264]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800876c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008772:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800877a:	d06b      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008782:	d874      	bhi.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878a:	d056      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008792:	d86c      	bhi.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800879a:	d03b      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087a2:	d864      	bhi.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087aa:	d021      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b2:	d85c      	bhi.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087c0:	d004      	beq.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80087c2:	e054      	b.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80087c4:	f000 f8b8 	bl	8008938 <HAL_RCCEx_GetD3PCLK1Freq>
 80087c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087ca:	e0ac      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087cc:	4b29      	ldr	r3, [pc, #164]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d8:	d107      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f8c0 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e8:	e09d      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ee:	e09a      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f0:	4b20      	ldr	r3, [pc, #128]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fc:	d107      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fe:	f107 030c 	add.w	r3, r7, #12
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fa02 	bl	8008c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880c:	e08b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008812:	e088      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008814:	4b17      	ldr	r3, [pc, #92]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d109      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008820:	4b14      	ldr	r3, [pc, #80]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a13      	ldr	r2, [pc, #76]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008832:	e078      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008838:	e075      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800883a:	4b0e      	ldr	r3, [pc, #56]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	d102      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008848:	4b0c      	ldr	r3, [pc, #48]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884c:	e06b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008852:	e068      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008854:	4b07      	ldr	r3, [pc, #28]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800885c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008860:	d102      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008862:	4b07      	ldr	r3, [pc, #28]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008866:	e05e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886c:	e05b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008872:	e058      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008874:	58024400 	.word	0x58024400
 8008878:	03d09000 	.word	0x03d09000
 800887c:	003d0900 	.word	0x003d0900
 8008880:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008888:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800888c:	430b      	orrs	r3, r1
 800888e:	d148      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008890:	4b27      	ldr	r3, [pc, #156]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008898:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a0:	d02a      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a8:	d838      	bhi.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b6:	d00d      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80088b8:	e030      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c6:	d102      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80088c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088cc:	e02b      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d2:	e028      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088d4:	4b16      	ldr	r3, [pc, #88]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088e0:	d107      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fae4 	bl	8008eb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f0:	e019      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f6:	e016      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008904:	d107      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008906:	f107 0318 	add.w	r3, r7, #24
 800890a:	4618      	mov	r0, r3
 800890c:	f000 f82a 	bl	8008964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008914:	e007      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008920:	e001      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008928:	4618      	mov	r0, r3
 800892a:	3740      	adds	r7, #64	@ 0x40
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	58024400 	.word	0x58024400
 8008934:	00f42400 	.word	0x00f42400

08008938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800893c:	f7fe f82c 	bl	8006998 <HAL_RCC_GetHCLKFreq>
 8008940:	4602      	mov	r2, r0
 8008942:	4b06      	ldr	r3, [pc, #24]	@ (800895c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	091b      	lsrs	r3, r3, #4
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	4904      	ldr	r1, [pc, #16]	@ (8008960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800894e:	5ccb      	ldrb	r3, [r1, r3]
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008958:	4618      	mov	r0, r3
 800895a:	bd80      	pop	{r7, pc}
 800895c:	58024400 	.word	0x58024400
 8008960:	0800eac0 	.word	0x0800eac0

08008964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008964:	b480      	push	{r7}
 8008966:	b089      	sub	sp, #36	@ 0x24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800896c:	4ba1      	ldr	r3, [pc, #644]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008976:	4b9f      	ldr	r3, [pc, #636]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897a:	0b1b      	lsrs	r3, r3, #12
 800897c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008982:	4b9c      	ldr	r3, [pc, #624]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800898e:	4b99      	ldr	r3, [pc, #612]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008992:	08db      	lsrs	r3, r3, #3
 8008994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	fb02 f303 	mul.w	r3, r2, r3
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8111 	beq.w	8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	f000 8083 	beq.w	8008ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	f200 80a1 	bhi.w	8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d056      	beq.n	8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089ce:	e099      	b.n	8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d0:	4b88      	ldr	r3, [pc, #544]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d02d      	beq.n	8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089dc:	4b85      	ldr	r3, [pc, #532]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	4a84      	ldr	r2, [pc, #528]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a06:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a36:	e087      	b.n	8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7a:	e065      	b.n	8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b59      	ldr	r3, [pc, #356]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008abe:	e043      	b.n	8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b48      	ldr	r3, [pc, #288]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b02:	e021      	b.n	8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b37      	ldr	r3, [pc, #220]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b48:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	0a5b      	lsrs	r3, r3, #9
 8008b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b6e:	ee17 2a90 	vmov	r2, s15
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b76:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	0c1b      	lsrs	r3, r3, #16
 8008b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9c:	ee17 2a90 	vmov	r2, s15
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ba4:	4b13      	ldr	r3, [pc, #76]	@ (8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	0e1b      	lsrs	r3, r3, #24
 8008baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bca:	ee17 2a90 	vmov	r2, s15
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bd2:	e008      	b.n	8008be6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	609a      	str	r2, [r3, #8]
}
 8008be6:	bf00      	nop
 8008be8:	3724      	adds	r7, #36	@ 0x24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	03d09000 	.word	0x03d09000
 8008bfc:	46000000 	.word	0x46000000
 8008c00:	4c742400 	.word	0x4c742400
 8008c04:	4a742400 	.word	0x4a742400
 8008c08:	4b742400 	.word	0x4b742400

08008c0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b089      	sub	sp, #36	@ 0x24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c14:	4ba1      	ldr	r3, [pc, #644]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	0d1b      	lsrs	r3, r3, #20
 8008c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c36:	4b99      	ldr	r3, [pc, #612]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3a:	08db      	lsrs	r3, r3, #3
 8008c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	fb02 f303 	mul.w	r3, r2, r3
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8111 	beq.w	8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	f000 8083 	beq.w	8008d68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	f200 80a1 	bhi.w	8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d056      	beq.n	8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c76:	e099      	b.n	8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c78:	4b88      	ldr	r3, [pc, #544]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d02d      	beq.n	8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c84:	4b85      	ldr	r3, [pc, #532]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	4a84      	ldr	r2, [pc, #528]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c90:	fa22 f303 	lsr.w	r3, r2, r3
 8008c94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cae:	4b7b      	ldr	r3, [pc, #492]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cde:	e087      	b.n	8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d22:	e065      	b.n	8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b59      	ldr	r3, [pc, #356]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d66:	e043      	b.n	8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b48      	ldr	r3, [pc, #288]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008daa:	e021      	b.n	8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbe:	4b37      	ldr	r3, [pc, #220]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008df0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df4:	0a5b      	lsrs	r3, r3, #9
 8008df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e16:	ee17 2a90 	vmov	r2, s15
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e22:	0c1b      	lsrs	r3, r3, #16
 8008e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e44:	ee17 2a90 	vmov	r2, s15
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e4c:	4b13      	ldr	r3, [pc, #76]	@ (8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e50:	0e1b      	lsrs	r3, r3, #24
 8008e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e72:	ee17 2a90 	vmov	r2, s15
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e7a:	e008      	b.n	8008e8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
}
 8008e8e:	bf00      	nop
 8008e90:	3724      	adds	r7, #36	@ 0x24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	03d09000 	.word	0x03d09000
 8008ea4:	46000000 	.word	0x46000000
 8008ea8:	4c742400 	.word	0x4c742400
 8008eac:	4a742400 	.word	0x4a742400
 8008eb0:	4b742400 	.word	0x4b742400

08008eb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	@ 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ebc:	4ba0      	ldr	r3, [pc, #640]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	091b      	lsrs	r3, r3, #4
 8008ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ed0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008edc:	4b98      	ldr	r3, [pc, #608]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8111 	beq.w	8009122 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	f000 8083 	beq.w	800900e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	f200 80a1 	bhi.w	8009052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d056      	beq.n	8008fca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f1c:	e099      	b.n	8009052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f1e:	4b88      	ldr	r3, [pc, #544]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d02d      	beq.n	8008f86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f2a:	4b85      	ldr	r3, [pc, #532]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	08db      	lsrs	r3, r3, #3
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	4a83      	ldr	r2, [pc, #524]	@ (8009144 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f36:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	ee07 3a90 	vmov	s15, r3
 8008f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f54:	4b7a      	ldr	r3, [pc, #488]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f84:	e087      	b.n	8009096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800914c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f98:	4b69      	ldr	r3, [pc, #420]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa0:	ee07 3a90 	vmov	s15, r3
 8008fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fc8:	e065      	b.n	8009096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009150 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fdc:	4b58      	ldr	r3, [pc, #352]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800900c:	e043      	b.n	8009096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009018:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800901c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009020:	4b47      	ldr	r3, [pc, #284]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009030:	ed97 6a03 	vldr	s12, [r7, #12]
 8009034:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009050:	e021      	b.n	8009096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800914c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009064:	4b36      	ldr	r3, [pc, #216]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906c:	ee07 3a90 	vmov	s15, r3
 8009070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009074:	ed97 6a03 	vldr	s12, [r7, #12]
 8009078:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800907c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009094:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009096:	4b2a      	ldr	r3, [pc, #168]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	0a5b      	lsrs	r3, r3, #9
 800909c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090bc:	ee17 2a90 	vmov	r2, s15
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80090c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c8:	0c1b      	lsrs	r3, r3, #16
 80090ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090de:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ea:	ee17 2a90 	vmov	r2, s15
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80090f2:	4b13      	ldr	r3, [pc, #76]	@ (8009140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f6:	0e1b      	lsrs	r3, r3, #24
 80090f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009118:	ee17 2a90 	vmov	r2, s15
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009120:	e008      	b.n	8009134 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	609a      	str	r2, [r3, #8]
}
 8009134:	bf00      	nop
 8009136:	3724      	adds	r7, #36	@ 0x24
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	58024400 	.word	0x58024400
 8009144:	03d09000 	.word	0x03d09000
 8009148:	46000000 	.word	0x46000000
 800914c:	4c742400 	.word	0x4c742400
 8009150:	4a742400 	.word	0x4a742400
 8009154:	4b742400 	.word	0x4b742400

08009158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009166:	4b53      	ldr	r3, [pc, #332]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	2b03      	cmp	r3, #3
 8009170:	d101      	bne.n	8009176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e099      	b.n	80092aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009176:	4b4f      	ldr	r3, [pc, #316]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a4e      	ldr	r2, [pc, #312]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800917c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009182:	f7f9 f9c5 	bl	8002510 <HAL_GetTick>
 8009186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009188:	e008      	b.n	800919c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800918a:	f7f9 f9c1 	bl	8002510 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d901      	bls.n	800919c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e086      	b.n	80092aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800919c:	4b45      	ldr	r3, [pc, #276]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1f0      	bne.n	800918a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091a8:	4b42      	ldr	r3, [pc, #264]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 80091aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	031b      	lsls	r3, r3, #12
 80091b6:	493f      	ldr	r1, [pc, #252]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	025b      	lsls	r3, r3, #9
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	061b      	lsls	r3, r3, #24
 80091e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80091ec:	4931      	ldr	r1, [pc, #196]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091f2:	4b30      	ldr	r3, [pc, #192]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	492d      	ldr	r1, [pc, #180]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009200:	4313      	orrs	r3, r2
 8009202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009204:	4b2b      	ldr	r3, [pc, #172]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009208:	f023 0220 	bic.w	r2, r3, #32
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	4928      	ldr	r1, [pc, #160]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009212:	4313      	orrs	r3, r2
 8009214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009216:	4b27      	ldr	r3, [pc, #156]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921a:	4a26      	ldr	r2, [pc, #152]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800921c:	f023 0310 	bic.w	r3, r3, #16
 8009220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009222:	4b24      	ldr	r3, [pc, #144]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009226:	4b24      	ldr	r3, [pc, #144]	@ (80092b8 <RCCEx_PLL2_Config+0x160>)
 8009228:	4013      	ands	r3, r2
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	69d2      	ldr	r2, [r2, #28]
 800922e:	00d2      	lsls	r2, r2, #3
 8009230:	4920      	ldr	r1, [pc, #128]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009232:	4313      	orrs	r3, r2
 8009234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009236:	4b1f      	ldr	r3, [pc, #124]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923a:	4a1e      	ldr	r2, [pc, #120]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800923c:	f043 0310 	orr.w	r3, r3, #16
 8009240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009248:	4b1a      	ldr	r3, [pc, #104]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924c:	4a19      	ldr	r2, [pc, #100]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800924e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009254:	e00f      	b.n	8009276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d106      	bne.n	800926a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800925c:	4b15      	ldr	r3, [pc, #84]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800925e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009260:	4a14      	ldr	r2, [pc, #80]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009268:	e005      	b.n	8009276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800926a:	4b12      	ldr	r3, [pc, #72]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a11      	ldr	r2, [pc, #68]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009276:	4b0f      	ldr	r3, [pc, #60]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a0e      	ldr	r2, [pc, #56]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800927c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009282:	f7f9 f945 	bl	8002510 <HAL_GetTick>
 8009286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009288:	e008      	b.n	800929c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800928a:	f7f9 f941 	bl	8002510 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d901      	bls.n	800929c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e006      	b.n	80092aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800929c:	4b05      	ldr	r3, [pc, #20]	@ (80092b4 <RCCEx_PLL2_Config+0x15c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0f0      	beq.n	800928a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	58024400 	.word	0x58024400
 80092b8:	ffff0007 	.word	0xffff0007

080092bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092ca:	4b53      	ldr	r3, [pc, #332]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d101      	bne.n	80092da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e099      	b.n	800940e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092da:	4b4f      	ldr	r3, [pc, #316]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a4e      	ldr	r2, [pc, #312]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80092e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e6:	f7f9 f913 	bl	8002510 <HAL_GetTick>
 80092ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092ec:	e008      	b.n	8009300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092ee:	f7f9 f90f 	bl	8002510 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d901      	bls.n	8009300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e086      	b.n	800940e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009300:	4b45      	ldr	r3, [pc, #276]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1f0      	bne.n	80092ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800930c:	4b42      	ldr	r3, [pc, #264]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 800930e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	051b      	lsls	r3, r3, #20
 800931a:	493f      	ldr	r1, [pc, #252]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 800931c:	4313      	orrs	r3, r2
 800931e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	3b01      	subs	r3, #1
 8009326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	025b      	lsls	r3, r3, #9
 8009332:	b29b      	uxth	r3, r3
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	3b01      	subs	r3, #1
 800933c:	041b      	lsls	r3, r3, #16
 800933e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	3b01      	subs	r3, #1
 800934a:	061b      	lsls	r3, r3, #24
 800934c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009350:	4931      	ldr	r1, [pc, #196]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009352:	4313      	orrs	r3, r2
 8009354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009356:	4b30      	ldr	r3, [pc, #192]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	492d      	ldr	r1, [pc, #180]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009364:	4313      	orrs	r3, r2
 8009366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009368:	4b2b      	ldr	r3, [pc, #172]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	4928      	ldr	r1, [pc, #160]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009376:	4313      	orrs	r3, r2
 8009378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800937a:	4b27      	ldr	r3, [pc, #156]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	4a26      	ldr	r2, [pc, #152]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009386:	4b24      	ldr	r3, [pc, #144]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800938a:	4b24      	ldr	r3, [pc, #144]	@ (800941c <RCCEx_PLL3_Config+0x160>)
 800938c:	4013      	ands	r3, r2
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	69d2      	ldr	r2, [r2, #28]
 8009392:	00d2      	lsls	r2, r2, #3
 8009394:	4920      	ldr	r1, [pc, #128]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009396:	4313      	orrs	r3, r2
 8009398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800939a:	4b1f      	ldr	r3, [pc, #124]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 800939c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939e:	4a1e      	ldr	r2, [pc, #120]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80093b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093b8:	e00f      	b.n	80093da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d106      	bne.n	80093ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093c0:	4b15      	ldr	r3, [pc, #84]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c4:	4a14      	ldr	r2, [pc, #80]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80093ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093cc:	e005      	b.n	80093da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093ce:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d2:	4a11      	ldr	r2, [pc, #68]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093da:	4b0f      	ldr	r3, [pc, #60]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a0e      	ldr	r2, [pc, #56]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 80093e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e6:	f7f9 f893 	bl	8002510 <HAL_GetTick>
 80093ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093ec:	e008      	b.n	8009400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093ee:	f7f9 f88f 	bl	8002510 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e006      	b.n	800940e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <RCCEx_PLL3_Config+0x15c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0f0      	beq.n	80093ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	58024400 	.word	0x58024400
 800941c:	ffff0007 	.word	0xffff0007

08009420 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e10f      	b.n	8009652 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a87      	ldr	r2, [pc, #540]	@ (800965c <HAL_SPI_Init+0x23c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00f      	beq.n	8009462 <HAL_SPI_Init+0x42>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a86      	ldr	r2, [pc, #536]	@ (8009660 <HAL_SPI_Init+0x240>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00a      	beq.n	8009462 <HAL_SPI_Init+0x42>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a84      	ldr	r2, [pc, #528]	@ (8009664 <HAL_SPI_Init+0x244>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d005      	beq.n	8009462 <HAL_SPI_Init+0x42>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	2b0f      	cmp	r3, #15
 800945c:	d901      	bls.n	8009462 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0f7      	b.n	8009652 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 fbca 	bl	800abfc <SPI_GetPacketSize>
 8009468:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a7b      	ldr	r2, [pc, #492]	@ (800965c <HAL_SPI_Init+0x23c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00c      	beq.n	800948e <HAL_SPI_Init+0x6e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a79      	ldr	r2, [pc, #484]	@ (8009660 <HAL_SPI_Init+0x240>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d007      	beq.n	800948e <HAL_SPI_Init+0x6e>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a78      	ldr	r2, [pc, #480]	@ (8009664 <HAL_SPI_Init+0x244>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d002      	beq.n	800948e <HAL_SPI_Init+0x6e>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b08      	cmp	r3, #8
 800948c:	d811      	bhi.n	80094b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009492:	4a72      	ldr	r2, [pc, #456]	@ (800965c <HAL_SPI_Init+0x23c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d009      	beq.n	80094ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a70      	ldr	r2, [pc, #448]	@ (8009660 <HAL_SPI_Init+0x240>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d004      	beq.n	80094ac <HAL_SPI_Init+0x8c>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a6f      	ldr	r2, [pc, #444]	@ (8009664 <HAL_SPI_Init+0x244>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d104      	bne.n	80094b6 <HAL_SPI_Init+0x96>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d901      	bls.n	80094b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e0cd      	b.n	8009652 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7f8 fc8c 	bl	8001de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80094f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094fc:	d119      	bne.n	8009532 <HAL_SPI_Init+0x112>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009506:	d103      	bne.n	8009510 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800951c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009520:	d107      	bne.n	8009532 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009530:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <HAL_SPI_Init+0x13e>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b06      	cmp	r3, #6
 8009544:	d90b      	bls.n	800955e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	e007      	b.n	800956e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800956c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69da      	ldr	r2, [r3, #28]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	431a      	orrs	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009580:	ea42 0103 	orr.w	r1, r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959e:	431a      	orrs	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	431a      	orrs	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ce:	ea42 0103 	orr.w	r1, r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d113      	bne.n	800960e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800960c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f022 0201 	bic.w	r2, r2, #1
 800961c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	40013000 	.word	0x40013000
 8009660:	40003800 	.word	0x40003800
 8009664:	40003c00 	.word	0x40003c00

08009668 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3320      	adds	r3, #32
 800967e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009680:	f7f8 ff46 	bl	8002510 <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b01      	cmp	r3, #1
 8009690:	d001      	beq.n	8009696 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009692:	2302      	movs	r3, #2
 8009694:	e1d1      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <HAL_SPI_Transmit+0x3a>
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e1c9      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_SPI_Transmit+0x4c>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e1c2      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2203      	movs	r2, #3
 80096c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	88fa      	ldrh	r2, [r7, #6]
 80096d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	88fa      	ldrh	r2, [r7, #6]
 80096de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800970c:	d108      	bne.n	8009720 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e009      	b.n	8009734 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009732:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	4b96      	ldr	r3, [pc, #600]	@ (8009994 <HAL_SPI_Transmit+0x32c>)
 800973c:	4013      	ands	r3, r2
 800973e:	88f9      	ldrh	r1, [r7, #6]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	6812      	ldr	r2, [r2, #0]
 8009744:	430b      	orrs	r3, r1
 8009746:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0201 	orr.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009760:	d107      	bne.n	8009772 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b0f      	cmp	r3, #15
 8009778:	d947      	bls.n	800980a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800977a:	e03f      	b.n	80097fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d114      	bne.n	80097b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6812      	ldr	r2, [r2, #0]
 8009794:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800979a:	1d1a      	adds	r2, r3, #4
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80097b2:	e023      	b.n	80097fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097b4:	f7f8 feac 	bl	8002510 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d803      	bhi.n	80097cc <HAL_SPI_Transmit+0x164>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ca:	d102      	bne.n	80097d2 <HAL_SPI_Transmit+0x16a>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d114      	bne.n	80097fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f001 f944 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e11e      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1b9      	bne.n	800977c <HAL_SPI_Transmit+0x114>
 8009808:	e0f1      	b.n	80099ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	2b07      	cmp	r3, #7
 8009810:	f240 80e6 	bls.w	80099e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009814:	e05d      	b.n	80098d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b02      	cmp	r3, #2
 8009822:	d132      	bne.n	800988a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800982a:	b29b      	uxth	r3, r3
 800982c:	2b01      	cmp	r3, #1
 800982e:	d918      	bls.n	8009862 <HAL_SPI_Transmit+0x1fa>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d014      	beq.n	8009862 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6812      	ldr	r2, [r2, #0]
 8009842:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009848:	1d1a      	adds	r2, r3, #4
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b02      	subs	r3, #2
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009860:	e037      	b.n	80098d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009866:	881a      	ldrh	r2, [r3, #0]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009870:	1c9a      	adds	r2, r3, #2
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009888:	e023      	b.n	80098d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800988a:	f7f8 fe41 	bl	8002510 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d803      	bhi.n	80098a2 <HAL_SPI_Transmit+0x23a>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d102      	bne.n	80098a8 <HAL_SPI_Transmit+0x240>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d114      	bne.n	80098d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f001 f8d9 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e0b3      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098d8:	b29b      	uxth	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d19b      	bne.n	8009816 <HAL_SPI_Transmit+0x1ae>
 80098de:	e086      	b.n	80099ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d154      	bne.n	8009998 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d918      	bls.n	800992c <HAL_SPI_Transmit+0x2c4>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fe:	2b40      	cmp	r3, #64	@ 0x40
 8009900:	d914      	bls.n	800992c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009912:	1d1a      	adds	r2, r3, #4
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b04      	subs	r3, #4
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800992a:	e059      	b.n	80099e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009932:	b29b      	uxth	r3, r3
 8009934:	2b01      	cmp	r3, #1
 8009936:	d917      	bls.n	8009968 <HAL_SPI_Transmit+0x300>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d013      	beq.n	8009968 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009944:	881a      	ldrh	r2, [r3, #0]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800994e:	1c9a      	adds	r2, r3, #2
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b02      	subs	r3, #2
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009966:	e03b      	b.n	80099e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3320      	adds	r3, #32
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009992:	e025      	b.n	80099e0 <HAL_SPI_Transmit+0x378>
 8009994:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009998:	f7f8 fdba 	bl	8002510 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d803      	bhi.n	80099b0 <HAL_SPI_Transmit+0x348>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d102      	bne.n	80099b6 <HAL_SPI_Transmit+0x34e>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d114      	bne.n	80099e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f001 f852 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e02c      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f47f af79 	bne.w	80098e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2200      	movs	r2, #0
 80099f6:	2108      	movs	r1, #8
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f001 f8d1 	bl	800aba0 <SPI_WaitOnFlagUntilTimeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a0a:	f043 0220 	orr.w	r2, r3, #32
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f001 f823 	bl	800aa60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009a38:	2300      	movs	r3, #0
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop

08009a44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3330      	adds	r3, #48	@ 0x30
 8009a66:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a68:	f7f8 fd52 	bl	8002510 <HAL_GetTick>
 8009a6c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d001      	beq.n	8009a7e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e250      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <HAL_SPI_Receive+0x46>
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e248      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_SPI_Receive+0x58>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e241      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	88fa      	ldrh	r2, [r7, #6]
 8009ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009af4:	d108      	bne.n	8009b08 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e009      	b.n	8009b1c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009b1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	4b95      	ldr	r3, [pc, #596]	@ (8009d78 <HAL_SPI_Receive+0x334>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	88f9      	ldrh	r1, [r7, #6]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	430b      	orrs	r3, r1
 8009b2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b48:	d107      	bne.n	8009b5a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b0f      	cmp	r3, #15
 8009b60:	d96c      	bls.n	8009c3c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009b62:	e064      	b.n	8009c2e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d114      	bne.n	8009ba4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b84:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ba2:	e044      	b.n	8009c2e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	8bfa      	ldrh	r2, [r7, #30]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d919      	bls.n	8009be6 <HAL_SPI_Receive+0x1a2>
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d014      	beq.n	8009be6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bc6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009be4:	e023      	b.n	8009c2e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009be6:	f7f8 fc93 	bl	8002510 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d803      	bhi.n	8009bfe <HAL_SPI_Receive+0x1ba>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d102      	bne.n	8009c04 <HAL_SPI_Receive+0x1c0>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d114      	bne.n	8009c2e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 ff2b 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e178      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d194      	bne.n	8009b64 <HAL_SPI_Receive+0x120>
 8009c3a:	e15e      	b.n	8009efa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	2b07      	cmp	r3, #7
 8009c42:	f240 8153 	bls.w	8009eec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009c46:	e08f      	b.n	8009d68 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d114      	bne.n	8009c88 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	8812      	ldrh	r2, [r2, #0]
 8009c66:	b292      	uxth	r2, r2
 8009c68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c6e:	1c9a      	adds	r2, r3, #2
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c86:	e06f      	b.n	8009d68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	8bfa      	ldrh	r2, [r7, #30]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d924      	bls.n	8009ce0 <HAL_SPI_Receive+0x29c>
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01f      	beq.n	8009ce0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	8812      	ldrh	r2, [r2, #0]
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb0:	1c9a      	adds	r2, r3, #2
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	8812      	ldrh	r2, [r2, #0]
 8009cbe:	b292      	uxth	r2, r2
 8009cc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc6:	1c9a      	adds	r2, r3, #2
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	3b02      	subs	r3, #2
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009cde:	e043      	b.n	8009d68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d119      	bne.n	8009d20 <HAL_SPI_Receive+0x2dc>
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d014      	beq.n	8009d20 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	8812      	ldrh	r2, [r2, #0]
 8009cfe:	b292      	uxth	r2, r2
 8009d00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d06:	1c9a      	adds	r2, r3, #2
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d1e:	e023      	b.n	8009d68 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d20:	f7f8 fbf6 	bl	8002510 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d803      	bhi.n	8009d38 <HAL_SPI_Receive+0x2f4>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d36:	d102      	bne.n	8009d3e <HAL_SPI_Receive+0x2fa>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d114      	bne.n	8009d68 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 fe8e 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e0db      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f47f af69 	bne.w	8009c48 <HAL_SPI_Receive+0x204>
 8009d76:	e0c0      	b.n	8009efa <HAL_SPI_Receive+0x4b6>
 8009d78:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d117      	bne.n	8009dc2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009dc0:	e094      	b.n	8009eec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	8bfa      	ldrh	r2, [r7, #30]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d946      	bls.n	8009e5e <HAL_SPI_Receive+0x41a>
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d041      	beq.n	8009e5e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009de6:	7812      	ldrb	r2, [r2, #0]
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	b2d2      	uxtb	r2, r2
 8009e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e1e:	7812      	ldrb	r2, [r2, #0]
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	b2d2      	uxtb	r2, r2
 8009e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b04      	subs	r3, #4
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009e5c:	e046      	b.n	8009eec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d81c      	bhi.n	8009ea4 <HAL_SPI_Receive+0x460>
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d017      	beq.n	8009ea4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ea2:	e023      	b.n	8009eec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ea4:	f7f8 fb34 	bl	8002510 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d803      	bhi.n	8009ebc <HAL_SPI_Receive+0x478>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d102      	bne.n	8009ec2 <HAL_SPI_Receive+0x47e>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d114      	bne.n	8009eec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fdcc 	bl	800aa60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e019      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f af41 	bne.w	8009d7c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fdb0 	bl	800aa60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
  }
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d001      	beq.n	8009f46 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009f42:	2302      	movs	r3, #2
 8009f44:	e126      	b.n	800a194 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <HAL_SPI_Transmit_DMA+0x2a>
 8009f4c:	88fb      	ldrh	r3, [r7, #6]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e11e      	b.n	800a194 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d101      	bne.n	8009f64 <HAL_SPI_Transmit_DMA+0x3c>
 8009f60:	2302      	movs	r3, #2
 8009f62:	e117      	b.n	800a194 <HAL_SPI_Transmit_DMA+0x26c>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	88fa      	ldrh	r2, [r7, #6]
 8009f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009fbc:	d108      	bne.n	8009fd0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e009      	b.n	8009fe4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009fe2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b0f      	cmp	r3, #15
 8009fea:	d905      	bls.n	8009ff8 <HAL_SPI_Transmit_DMA+0xd0>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ff6:	d10f      	bne.n	800a018 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	d911      	bls.n	800a024 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a00a:	d00b      	beq.n	800a024 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a010:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a016:	d005      	beq.n	800a024 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e0b7      	b.n	800a194 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b07      	cmp	r3, #7
 800a02a:	d820      	bhi.n	800a06e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a036:	d109      	bne.n	800a04c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3301      	adds	r3, #1
 800a042:	105b      	asrs	r3, r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a056:	d11e      	bne.n	800a096 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3303      	adds	r3, #3
 800a062:	109b      	asrs	r3, r3, #2
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a06c:	e013      	b.n	800a096 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d80f      	bhi.n	800a096 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a080:	d109      	bne.n	800a096 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3301      	adds	r3, #1
 800a08c:	105b      	asrs	r3, r3, #1
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a09a:	4a40      	ldr	r2, [pc, #256]	@ (800a19c <HAL_SPI_Transmit_DMA+0x274>)
 800a09c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0a2:	4a3f      	ldr	r2, [pc, #252]	@ (800a1a0 <HAL_SPI_Transmit_DMA+0x278>)
 800a0a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0aa:	4a3e      	ldr	r2, [pc, #248]	@ (800a1a4 <HAL_SPI_Transmit_DMA+0x27c>)
 800a0ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0c4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3320      	adds	r3, #32
 800a0d6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a0e0:	f7f8 febe 	bl	8002e60 <HAL_DMA_Start_IT>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d011      	beq.n	800a10e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0f0:	f043 0210 	orr.w	r2, r3, #16
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e042      	b.n	800a194 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a118:	d108      	bne.n	800a12c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6859      	ldr	r1, [r3, #4]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	4b20      	ldr	r3, [pc, #128]	@ (800a1a8 <HAL_SPI_Transmit_DMA+0x280>)
 800a126:	400b      	ands	r3, r1
 800a128:	6053      	str	r3, [r2, #4]
 800a12a:	e009      	b.n	800a140 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <HAL_SPI_Transmit_DMA+0x280>)
 800a134:	4013      	ands	r3, r2
 800a136:	88f9      	ldrh	r1, [r7, #6]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a14e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a15e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0201 	orr.w	r2, r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a178:	d107      	bne.n	800a18a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a188:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	0800a9ad 	.word	0x0800a9ad
 800a1a0:	0800a921 	.word	0x0800a921
 800a1a4:	0800a9e5 	.word	0x0800a9e5
 800a1a8:	ffff0000 	.word	0xffff0000

0800a1ac <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d001      	beq.n	800a1ca <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e18a      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x30>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x30>
 800a1d6:	887b      	ldrh	r3, [r7, #2]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e17f      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d101      	bne.n	800a1ee <HAL_SPI_TransmitReceive_DMA+0x42>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e178      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2205      	movs	r2, #5
 800a1fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	887a      	ldrh	r2, [r7, #2]
 800a210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	887a      	ldrh	r2, [r7, #2]
 800a226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	887a      	ldrh	r2, [r7, #2]
 800a22e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a24c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a25c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2b0f      	cmp	r3, #15
 800a264:	d905      	bls.n	800a272 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a270:	d10f      	bne.n	800a292 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a276:	2b07      	cmp	r3, #7
 800a278:	d911      	bls.n	800a29e <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a284:	d00b      	beq.n	800a29e <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a28a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a28c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a290:	d005      	beq.n	800a29e <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e120      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	2b07      	cmp	r3, #7
 800a2a4:	d840      	bhi.n	800a328 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b0:	d109      	bne.n	800a2c6 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	105b      	asrs	r3, r3, #1
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2d0:	d109      	bne.n	800a2e6 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	3303      	adds	r3, #3
 800a2dc:	109b      	asrs	r3, r3, #2
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f0:	d109      	bne.n	800a306 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	105b      	asrs	r3, r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a310:	d12e      	bne.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a318:	b29b      	uxth	r3, r3
 800a31a:	3303      	adds	r3, #3
 800a31c:	109b      	asrs	r3, r3, #2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a326:	e023      	b.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b0f      	cmp	r3, #15
 800a32e:	d81f      	bhi.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a33a:	d109      	bne.n	800a350 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a342:	b29b      	uxth	r3, r3
 800a344:	3301      	adds	r3, #1
 800a346:	105b      	asrs	r3, r3, #1
 800a348:	b29a      	uxth	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a35a:	d109      	bne.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a362:	b29b      	uxth	r3, r3
 800a364:	3301      	adds	r3, #1
 800a366:	105b      	asrs	r3, r3, #1
 800a368:	b29a      	uxth	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a374:	4a5c      	ldr	r2, [pc, #368]	@ (800a4e8 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a376:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a37c:	4a5b      	ldr	r2, [pc, #364]	@ (800a4ec <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a37e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a384:	4a5a      	ldr	r2, [pc, #360]	@ (800a4f0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a38c:	2200      	movs	r2, #0
 800a38e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3330      	adds	r3, #48	@ 0x30
 800a39a:	4619      	mov	r1, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a3aa:	f7f8 fd59 	bl	8002e60 <HAL_DMA_Start_IT>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d011      	beq.n	800a3d8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ba:	f043 0210 	orr.w	r2, r3, #16
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e083      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3e6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a404:	4a3a      	ldr	r2, [pc, #232]	@ (800a4f0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a406:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a410:	4619      	mov	r1, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3320      	adds	r3, #32
 800a418:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a420:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a422:	f7f8 fd1d 	bl	8002e60 <HAL_DMA_Start_IT>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d016      	beq.n	800a45a <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a430:	4618      	mov	r0, r3
 800a432:	f7f8 ff7f 	bl	8003334 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a43c:	f043 0210 	orr.w	r2, r3, #16
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e042      	b.n	800a4e0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a464:	d108      	bne.n	800a478 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6859      	ldr	r1, [r3, #4]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	4b20      	ldr	r3, [pc, #128]	@ (800a4f4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a472:	400b      	ands	r3, r1
 800a474:	6053      	str	r3, [r2, #4]
 800a476:	e009      	b.n	800a48c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4f4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a480:	4013      	ands	r3, r2
 800a482:	8879      	ldrh	r1, [r7, #2]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	430b      	orrs	r3, r1
 800a48a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a49a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691a      	ldr	r2, [r3, #16]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a4aa:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f042 0201 	orr.w	r2, r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4c4:	d107      	bne.n	800a4d6 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4d4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800a9c9 	.word	0x0800a9c9
 800a4ec:	0800a967 	.word	0x0800a967
 800a4f0:	0800a9e5 	.word	0x0800a9e5
 800a4f4:	ffff0000 	.word	0xffff0000

0800a4f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	@ 0x28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a510:	6a3a      	ldr	r2, [r7, #32]
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	4013      	ands	r3, r2
 800a516:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a520:	2300      	movs	r3, #0
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a52a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3330      	adds	r3, #48	@ 0x30
 800a532:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d010      	beq.n	800a560 <HAL_SPI_IRQHandler+0x68>
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699a      	ldr	r2, [r3, #24]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a556:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f9d7 	bl	800a90c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a55e:	e192      	b.n	800a886 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d113      	bne.n	800a592 <HAL_SPI_IRQHandler+0x9a>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f003 0320 	and.w	r3, r3, #32
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10e      	bne.n	800a592 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
    handled = 1UL;
 800a58e:	2301      	movs	r3, #1
 800a590:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10f      	bne.n	800a5bc <HAL_SPI_IRQHandler+0xc4>
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d105      	bne.n	800a5bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
    handled = 1UL;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10f      	bne.n	800a5e6 <HAL_SPI_IRQHandler+0xee>
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	4798      	blx	r3
    handled = 1UL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f040 8147 	bne.w	800a87c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	f003 0308 	and.w	r3, r3, #8
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 808b 	beq.w	800a710 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0208 	orr.w	r2, r2, #8
 800a608:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	699a      	ldr	r2, [r3, #24]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0210 	orr.w	r2, r2, #16
 800a618:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	699a      	ldr	r2, [r3, #24]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a628:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0208 	bic.w	r2, r2, #8
 800a638:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d13d      	bne.n	800a6c4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a648:	e036      	b.n	800a6b8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	2b0f      	cmp	r3, #15
 800a650:	d90b      	bls.n	800a66a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a65a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a65c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	665a      	str	r2, [r3, #100]	@ 0x64
 800a668:	e01d      	b.n	800a6a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b07      	cmp	r3, #7
 800a670:	d90b      	bls.n	800a68a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	8812      	ldrh	r2, [r2, #0]
 800a67a:	b292      	uxth	r2, r2
 800a67c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a682:	1c9a      	adds	r2, r3, #2
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	665a      	str	r2, [r3, #100]	@ 0x64
 800a688:	e00d      	b.n	800a6a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a696:	7812      	ldrb	r2, [r2, #0]
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1c2      	bne.n	800a64a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f9cb 	bl	800aa60 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f90b 	bl	800a8f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a6e2:	e0d0      	b.n	800a886 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a6e4:	7cfb      	ldrb	r3, [r7, #19]
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d103      	bne.n	800a6f2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f8e6 	bl	800a8bc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a6f0:	e0c6      	b.n	800a880 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a6f2:	7cfb      	ldrb	r3, [r7, #19]
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d103      	bne.n	800a700 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f8d5 	bl	800a8a8 <HAL_SPI_RxCpltCallback>
    return;
 800a6fe:	e0bf      	b.n	800a880 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a700:	7cfb      	ldrb	r3, [r7, #19]
 800a702:	2b03      	cmp	r3, #3
 800a704:	f040 80bc 	bne.w	800a880 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f8c3 	bl	800a894 <HAL_SPI_TxCpltCallback>
    return;
 800a70e:	e0b7      	b.n	800a880 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80b5 	beq.w	800a886 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00f      	beq.n	800a746 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a72c:	f043 0204 	orr.w	r2, r3, #4
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a744:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00f      	beq.n	800a770 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a756:	f043 0201 	orr.w	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	699a      	ldr	r2, [r3, #24]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a76e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00f      	beq.n	800a79a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a780:	f043 0208 	orr.w	r2, r3, #8
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	699a      	ldr	r2, [r3, #24]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a798:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00f      	beq.n	800a7c4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f042 0220 	orr.w	r2, r2, #32
 800a7c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d05a      	beq.n	800a884 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 0201 	bic.w	r2, r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6919      	ldr	r1, [r3, #16]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b28      	ldr	r3, [pc, #160]	@ (800a88c <HAL_SPI_IRQHandler+0x394>)
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a7f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a7f8:	d138      	bne.n	800a86c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a808:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d013      	beq.n	800a83a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a816:	4a1e      	ldr	r2, [pc, #120]	@ (800a890 <HAL_SPI_IRQHandler+0x398>)
 800a818:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f9 f8a6 	bl	8003970 <HAL_DMA_Abort_IT>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a830:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d020      	beq.n	800a884 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a846:	4a12      	ldr	r2, [pc, #72]	@ (800a890 <HAL_SPI_IRQHandler+0x398>)
 800a848:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f9 f88e 	bl	8003970 <HAL_DMA_Abort_IT>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d014      	beq.n	800a884 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a860:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a86a:	e00b      	b.n	800a884 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f83f 	bl	800a8f8 <HAL_SPI_ErrorCallback>
    return;
 800a87a:	e003      	b.n	800a884 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a87c:	bf00      	nop
 800a87e:	e002      	b.n	800a886 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a884:	bf00      	nop
  }
}
 800a886:	3728      	adds	r7, #40	@ 0x28
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	fffffc94 	.word	0xfffffc94
 800a890:	0800aa2b 	.word	0x0800aa2b

0800a894 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b07      	cmp	r3, #7
 800a938:	d011      	beq.n	800a95e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a944:	d103      	bne.n	800a94e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff ffa4 	bl	800a894 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a94c:	e007      	b.n	800a95e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	691a      	ldr	r2, [r3, #16]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0208 	orr.w	r2, r2, #8
 800a95c:	611a      	str	r2, [r3, #16]
}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a972:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	d011      	beq.n	800a9a4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a98a:	d103      	bne.n	800a994 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff ff95 	bl	800a8bc <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a992:	e007      	b.n	800a9a4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691a      	ldr	r2, [r3, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0208 	orr.w	r2, r2, #8
 800a9a2:	611a      	str	r2, [r3, #16]
}
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff ff88 	bl	800a8d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d4:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7ff ff84 	bl	800a8e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7fa f92c 	bl	8004c50 <HAL_DMA_GetError>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d011      	beq.n	800aa22 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 f82e 	bl	800aa60 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa0a:	f043 0210 	orr.w	r2, r3, #16
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff ff6b 	bl	800a8f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa36:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff ff51 	bl	800a8f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	699a      	ldr	r2, [r3, #24]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0208 	orr.w	r2, r2, #8
 800aa7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f042 0210 	orr.w	r2, r2, #16
 800aa8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0201 	bic.w	r2, r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6919      	ldr	r1, [r3, #16]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b3c      	ldr	r3, [pc, #240]	@ (800ab9c <SPI_CloseTransfer+0x13c>)
 800aaac:	400b      	ands	r3, r1
 800aaae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aabe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d014      	beq.n	800aaf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00f      	beq.n	800aaf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aadc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	699a      	ldr	r2, [r3, #24]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f042 0220 	orr.w	r2, r2, #32
 800aaf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d014      	beq.n	800ab2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00f      	beq.n	800ab2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab12:	f043 0204 	orr.w	r2, r3, #4
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00f      	beq.n	800ab56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab3c:	f043 0201 	orr.w	r2, r3, #1
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00f      	beq.n	800ab80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab66:	f043 0208 	orr.w	r2, r3, #8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	fffffc90 	.word	0xfffffc90

0800aba0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	4613      	mov	r3, r2
 800abae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800abb0:	e010      	b.n	800abd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abb2:	f7f7 fcad 	bl	8002510 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d803      	bhi.n	800abca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d102      	bne.n	800abd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e00f      	b.n	800abf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695a      	ldr	r2, [r3, #20]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	4013      	ands	r3, r2
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	bf0c      	ite	eq
 800abe4:	2301      	moveq	r3, #1
 800abe6:	2300      	movne	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	461a      	mov	r2, r3
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d0df      	beq.n	800abb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac08:	095b      	lsrs	r3, r3, #5
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	3307      	adds	r3, #7
 800ac1a:	08db      	lsrs	r3, r3, #3
 800ac1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e049      	b.n	800acd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7f7 fa35 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f000 f99d 	bl	800afb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0201 	bic.w	r2, r2, #1
 800acf6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6a1a      	ldr	r2, [r3, #32]
 800acfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ad02:	4013      	ands	r3, r2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10f      	bne.n	800ad28 <HAL_TIM_Base_Stop_IT+0x48>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6a1a      	ldr	r2, [r3, #32]
 800ad0e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ad12:	4013      	ands	r3, r2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <HAL_TIM_Base_Stop_IT+0x48>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 0201 	bic.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d020      	beq.n	800ada2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01b      	beq.n	800ada2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f06f 0202 	mvn.w	r2, #2
 800ad72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f8f3 	bl	800af74 <HAL_TIM_IC_CaptureCallback>
 800ad8e:	e005      	b.n	800ad9c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8e5 	bl	800af60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f8f6 	bl	800af88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f003 0304 	and.w	r3, r3, #4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d020      	beq.n	800adee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f003 0304 	and.w	r3, r3, #4
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d01b      	beq.n	800adee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f06f 0204 	mvn.w	r2, #4
 800adbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2202      	movs	r2, #2
 800adc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8cd 	bl	800af74 <HAL_TIM_IC_CaptureCallback>
 800adda:	e005      	b.n	800ade8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f8bf 	bl	800af60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f8d0 	bl	800af88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d020      	beq.n	800ae3a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f003 0308 	and.w	r3, r3, #8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d01b      	beq.n	800ae3a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f06f 0208 	mvn.w	r2, #8
 800ae0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2204      	movs	r2, #4
 800ae10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f003 0303 	and.w	r3, r3, #3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f8a7 	bl	800af74 <HAL_TIM_IC_CaptureCallback>
 800ae26:	e005      	b.n	800ae34 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f899 	bl	800af60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f8aa 	bl	800af88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f003 0310 	and.w	r3, r3, #16
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d020      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f003 0310 	and.w	r3, r3, #16
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d01b      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f06f 0210 	mvn.w	r2, #16
 800ae56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69db      	ldr	r3, [r3, #28]
 800ae64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f881 	bl	800af74 <HAL_TIM_IC_CaptureCallback>
 800ae72:	e005      	b.n	800ae80 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f873 	bl	800af60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f884 	bl	800af88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f06f 0201 	mvn.w	r2, #1
 800aea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f851 	bl	800af4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d104      	bne.n	800aebe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00c      	beq.n	800aed8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d007      	beq.n	800aed8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f9aa 	bl	800b22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00c      	beq.n	800aefc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d007      	beq.n	800aefc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f9a2 	bl	800b240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00c      	beq.n	800af20 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d007      	beq.n	800af20 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f83e 	bl	800af9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f003 0320 	and.w	r3, r3, #32
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f06f 0220 	mvn.w	r2, #32
 800af3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f96a 	bl	800b218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a46      	ldr	r2, [pc, #280]	@ (800b0dc <TIM_Base_SetConfig+0x12c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d013      	beq.n	800aff0 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afce:	d00f      	beq.n	800aff0 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a43      	ldr	r2, [pc, #268]	@ (800b0e0 <TIM_Base_SetConfig+0x130>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d00b      	beq.n	800aff0 <TIM_Base_SetConfig+0x40>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a42      	ldr	r2, [pc, #264]	@ (800b0e4 <TIM_Base_SetConfig+0x134>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d007      	beq.n	800aff0 <TIM_Base_SetConfig+0x40>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a41      	ldr	r2, [pc, #260]	@ (800b0e8 <TIM_Base_SetConfig+0x138>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d003      	beq.n	800aff0 <TIM_Base_SetConfig+0x40>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a40      	ldr	r2, [pc, #256]	@ (800b0ec <TIM_Base_SetConfig+0x13c>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d108      	bne.n	800b002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a35      	ldr	r2, [pc, #212]	@ (800b0dc <TIM_Base_SetConfig+0x12c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d01f      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b010:	d01b      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a32      	ldr	r2, [pc, #200]	@ (800b0e0 <TIM_Base_SetConfig+0x130>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d017      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a31      	ldr	r2, [pc, #196]	@ (800b0e4 <TIM_Base_SetConfig+0x134>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d013      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a30      	ldr	r2, [pc, #192]	@ (800b0e8 <TIM_Base_SetConfig+0x138>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d00f      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a2f      	ldr	r2, [pc, #188]	@ (800b0ec <TIM_Base_SetConfig+0x13c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00b      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a2e      	ldr	r2, [pc, #184]	@ (800b0f0 <TIM_Base_SetConfig+0x140>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d007      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f4 <TIM_Base_SetConfig+0x144>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d003      	beq.n	800b04a <TIM_Base_SetConfig+0x9a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a2c      	ldr	r2, [pc, #176]	@ (800b0f8 <TIM_Base_SetConfig+0x148>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d108      	bne.n	800b05c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a16      	ldr	r2, [pc, #88]	@ (800b0dc <TIM_Base_SetConfig+0x12c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d00f      	beq.n	800b0a8 <TIM_Base_SetConfig+0xf8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a18      	ldr	r2, [pc, #96]	@ (800b0ec <TIM_Base_SetConfig+0x13c>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00b      	beq.n	800b0a8 <TIM_Base_SetConfig+0xf8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a17      	ldr	r2, [pc, #92]	@ (800b0f0 <TIM_Base_SetConfig+0x140>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d007      	beq.n	800b0a8 <TIM_Base_SetConfig+0xf8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a16      	ldr	r2, [pc, #88]	@ (800b0f4 <TIM_Base_SetConfig+0x144>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d003      	beq.n	800b0a8 <TIM_Base_SetConfig+0xf8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a15      	ldr	r2, [pc, #84]	@ (800b0f8 <TIM_Base_SetConfig+0x148>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d103      	bne.n	800b0b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d105      	bne.n	800b0ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	f023 0201 	bic.w	r2, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	611a      	str	r2, [r3, #16]
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	40010000 	.word	0x40010000
 800b0e0:	40000400 	.word	0x40000400
 800b0e4:	40000800 	.word	0x40000800
 800b0e8:	40000c00 	.word	0x40000c00
 800b0ec:	40010400 	.word	0x40010400
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40014400 	.word	0x40014400
 800b0f8:	40014800 	.word	0x40014800

0800b0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b110:	2302      	movs	r3, #2
 800b112:	e06d      	b.n	800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a30      	ldr	r2, [pc, #192]	@ (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d004      	beq.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a2f      	ldr	r2, [pc, #188]	@ (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d108      	bne.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b14e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a20      	ldr	r2, [pc, #128]	@ (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d022      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b186:	d01d      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a1d      	ldr	r2, [pc, #116]	@ (800b204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d018      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a1c      	ldr	r2, [pc, #112]	@ (800b208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d013      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b20c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00e      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a15      	ldr	r2, [pc, #84]	@ (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d009      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a16      	ldr	r2, [pc, #88]	@ (800b210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a15      	ldr	r2, [pc, #84]	@ (800b214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d10c      	bne.n	800b1de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	40010000 	.word	0x40010000
 800b200:	40010400 	.word	0x40010400
 800b204:	40000400 	.word	0x40000400
 800b208:	40000800 	.word	0x40000800
 800b20c:	40000c00 	.word	0x40000c00
 800b210:	40001800 	.word	0x40001800
 800b214:	40014000 	.word	0x40014000

0800b218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b258:	4904      	ldr	r1, [pc, #16]	@ (800b26c <MX_FATFS_Init+0x18>)
 800b25a:	4805      	ldr	r0, [pc, #20]	@ (800b270 <MX_FATFS_Init+0x1c>)
 800b25c:	f002 fed0 	bl	800e000 <FATFS_LinkDriver>
 800b260:	4603      	mov	r3, r0
 800b262:	461a      	mov	r2, r3
 800b264:	4b03      	ldr	r3, [pc, #12]	@ (800b274 <MX_FATFS_Init+0x20>)
 800b266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	24000520 	.word	0x24000520
 800b270:	24000014 	.word	0x24000014
 800b274:	2400051c 	.word	0x2400051c

0800b278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b27c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b27e:	4618      	mov	r0, r3
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	4618      	mov	r0, r3
 800b296:	f000 f9f9 	bl	800b68c <USER_SPI_initialize>
 800b29a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 facd 	bl	800b850 <USER_SPI_status>
 800b2b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	607a      	str	r2, [r7, #4]
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b2d0:	7bf8      	ldrb	r0, [r7, #15]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	68b9      	ldr	r1, [r7, #8]
 800b2d8:	f000 fad0 	bl	800b87c <USER_SPI_read>
 800b2dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b2f6:	7bf8      	ldrb	r0, [r7, #15]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	f000 fb23 	bl	800b948 <USER_SPI_write>
 800b302:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	603a      	str	r2, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
 800b318:	460b      	mov	r3, r1
 800b31a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b31c:	79b9      	ldrb	r1, [r7, #6]
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fb8c 	bl	800ba40 <USER_SPI_ioctl>
 800b328:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0201 	bic.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	071a      	lsls	r2, r3, #28
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f042 0201 	orr.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]
}
 800b372:	bf00      	nop
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
	...

0800b380 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b388:	f7f7 f8c2 	bl	8002510 <HAL_GetTick>
 800b38c:	4603      	mov	r3, r0
 800b38e:	4a04      	ldr	r2, [pc, #16]	@ (800b3a0 <SPI_Timer_On+0x20>)
 800b390:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b392:	4a04      	ldr	r2, [pc, #16]	@ (800b3a4 <SPI_Timer_On+0x24>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	24000528 	.word	0x24000528
 800b3a4:	2400052c 	.word	0x2400052c

0800b3a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b3ac:	f7f7 f8b0 	bl	8002510 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	4b06      	ldr	r3, [pc, #24]	@ (800b3cc <SPI_Timer_Status+0x24>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	4b05      	ldr	r3, [pc, #20]	@ (800b3d0 <SPI_Timer_Status+0x28>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	bf34      	ite	cc
 800b3c0:	2301      	movcc	r3, #1
 800b3c2:	2300      	movcs	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	24000528 	.word	0x24000528
 800b3d0:	2400052c 	.word	0x2400052c

0800b3d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive_DMA(&SD_SPI_HANDLE, &dat, &rxDat, 1);
 800b3de:	f107 020f 	add.w	r2, r7, #15
 800b3e2:	1df9      	adds	r1, r7, #7
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4804      	ldr	r0, [pc, #16]	@ (800b3f8 <xchg_spi+0x24>)
 800b3e8:	f7fe fee0 	bl	800a1ac <HAL_SPI_TransmitReceive_DMA>

    return rxDat;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	24000350 	.word	0x24000350

0800b3fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	e00a      	b.n	800b422 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	18d4      	adds	r4, r2, r3
 800b412:	20ff      	movs	r0, #255	@ 0xff
 800b414:	f7ff ffde 	bl	800b3d4 <xchg_spi>
 800b418:	4603      	mov	r3, r0
 800b41a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d3f0      	bcc.n	800b40c <rcvr_spi_multi+0x10>
	}
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}

0800b434 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, btx);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	b29b      	uxth	r3, r3
 800b442:	461a      	mov	r2, r3
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	4803      	ldr	r0, [pc, #12]	@ (800b454 <xmit_spi_multi+0x20>)
 800b448:	f7fe fd6e 	bl	8009f28 <HAL_SPI_Transmit_DMA>
//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	24000350 	.word	0x24000350

0800b458 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b460:	f7f7 f856 	bl	8002510 <HAL_GetTick>
 800b464:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b46a:	20ff      	movs	r0, #255	@ 0xff
 800b46c:	f7ff ffb2 	bl	800b3d4 <xchg_spi>
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	2bff      	cmp	r3, #255	@ 0xff
 800b478:	d007      	beq.n	800b48a <wait_ready+0x32>
 800b47a:	f7f7 f849 	bl	8002510 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	429a      	cmp	r2, r3
 800b488:	d8ef      	bhi.n	800b46a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
 800b48c:	2bff      	cmp	r3, #255	@ 0xff
 800b48e:	bf0c      	ite	eq
 800b490:	2301      	moveq	r3, #1
 800b492:	2300      	movne	r3, #0
 800b494:	b2db      	uxtb	r3, r3
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b4aa:	4804      	ldr	r0, [pc, #16]	@ (800b4bc <despiselect+0x1c>)
 800b4ac:	f7fa f974 	bl	8005798 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b4b0:	20ff      	movs	r0, #255	@ 0xff
 800b4b2:	f7ff ff8f 	bl	800b3d4 <xchg_spi>

}
 800b4b6:	bf00      	nop
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	58020400 	.word	0x58020400

0800b4c0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b4ca:	480a      	ldr	r0, [pc, #40]	@ (800b4f4 <spiselect+0x34>)
 800b4cc:	f7fa f964 	bl	8005798 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b4d0:	20ff      	movs	r0, #255	@ 0xff
 800b4d2:	f7ff ff7f 	bl	800b3d4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b4d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b4da:	f7ff ffbd 	bl	800b458 <wait_ready>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <spiselect+0x28>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e002      	b.n	800b4ee <spiselect+0x2e>

	despiselect();
 800b4e8:	f7ff ffda 	bl	800b4a0 <despiselect>
	return 0;	/* Timeout */
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	58020400 	.word	0x58020400

0800b4f8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b502:	20c8      	movs	r0, #200	@ 0xc8
 800b504:	f7ff ff3c 	bl	800b380 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b508:	20ff      	movs	r0, #255	@ 0xff
 800b50a:	f7ff ff63 	bl	800b3d4 <xchg_spi>
 800b50e:	4603      	mov	r3, r0
 800b510:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	2bff      	cmp	r3, #255	@ 0xff
 800b516:	d104      	bne.n	800b522 <rcvr_datablock+0x2a>
 800b518:	f7ff ff46 	bl	800b3a8 <SPI_Timer_Status>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1f2      	bne.n	800b508 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2bfe      	cmp	r3, #254	@ 0xfe
 800b526:	d001      	beq.n	800b52c <rcvr_datablock+0x34>
 800b528:	2300      	movs	r3, #0
 800b52a:	e00a      	b.n	800b542 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff ff64 	bl	800b3fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b534:	20ff      	movs	r0, #255	@ 0xff
 800b536:	f7ff ff4d 	bl	800b3d4 <xchg_spi>
 800b53a:	20ff      	movs	r0, #255	@ 0xff
 800b53c:	f7ff ff4a 	bl	800b3d4 <xchg_spi>

	return 1;						/* Function succeeded */
 800b540:	2301      	movs	r3, #1
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b55a:	f7ff ff7d 	bl	800b458 <wait_ready>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <xmit_datablock+0x1e>
 800b564:	2300      	movs	r3, #0
 800b566:	e01e      	b.n	800b5a6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff ff32 	bl	800b3d4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	2bfd      	cmp	r3, #253	@ 0xfd
 800b574:	d016      	beq.n	800b5a4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b576:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff ff5a 	bl	800b434 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b580:	20ff      	movs	r0, #255	@ 0xff
 800b582:	f7ff ff27 	bl	800b3d4 <xchg_spi>
 800b586:	20ff      	movs	r0, #255	@ 0xff
 800b588:	f7ff ff24 	bl	800b3d4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b58c:	20ff      	movs	r0, #255	@ 0xff
 800b58e:	f7ff ff21 	bl	800b3d4 <xchg_spi>
 800b592:	4603      	mov	r3, r0
 800b594:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	f003 031f 	and.w	r3, r3, #31
 800b59c:	2b05      	cmp	r3, #5
 800b59e:	d001      	beq.n	800b5a4 <xmit_datablock+0x5a>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e000      	b.n	800b5a6 <xmit_datablock+0x5c>
	}
	return 1;
 800b5a4:	2301      	movs	r3, #1
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	6039      	str	r1, [r7, #0]
 800b5b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da0e      	bge.n	800b5e0 <send_cmd+0x32>
		cmd &= 0x7F;
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5c8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	2037      	movs	r0, #55	@ 0x37
 800b5ce:	f7ff ffee 	bl	800b5ae <send_cmd>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d901      	bls.n	800b5e0 <send_cmd+0x32>
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	e051      	b.n	800b684 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	2b0c      	cmp	r3, #12
 800b5e4:	d008      	beq.n	800b5f8 <send_cmd+0x4a>
		despiselect();
 800b5e6:	f7ff ff5b 	bl	800b4a0 <despiselect>
		if (!spiselect()) return 0xFF;
 800b5ea:	f7ff ff69 	bl	800b4c0 <spiselect>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <send_cmd+0x4a>
 800b5f4:	23ff      	movs	r3, #255	@ 0xff
 800b5f6:	e045      	b.n	800b684 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fee7 	bl	800b3d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	0e1b      	lsrs	r3, r3, #24
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fee1 	bl	800b3d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	0c1b      	lsrs	r3, r3, #16
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff fedb 	bl	800b3d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	b2db      	uxtb	r3, r3
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fed5 	bl	800b3d4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fed0 	bl	800b3d4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <send_cmd+0x94>
 800b63e:	2395      	movs	r3, #149	@ 0x95
 800b640:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b642:	79fb      	ldrb	r3, [r7, #7]
 800b644:	2b08      	cmp	r3, #8
 800b646:	d101      	bne.n	800b64c <send_cmd+0x9e>
 800b648:	2387      	movs	r3, #135	@ 0x87
 800b64a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fec0 	bl	800b3d4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b0c      	cmp	r3, #12
 800b658:	d102      	bne.n	800b660 <send_cmd+0xb2>
 800b65a:	20ff      	movs	r0, #255	@ 0xff
 800b65c:	f7ff feba 	bl	800b3d4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b660:	230a      	movs	r3, #10
 800b662:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b664:	20ff      	movs	r0, #255	@ 0xff
 800b666:	f7ff feb5 	bl	800b3d4 <xchg_spi>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b66e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b672:	2b00      	cmp	r3, #0
 800b674:	da05      	bge.n	800b682 <send_cmd+0xd4>
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	3b01      	subs	r3, #1
 800b67a:	73fb      	strb	r3, [r7, #15]
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f0      	bne.n	800b664 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b682:	7bbb      	ldrb	r3, [r7, #14]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <USER_SPI_initialize+0x14>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e0cc      	b.n	800b83a <USER_SPI_initialize+0x1ae>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b6a0:	4b68      	ldr	r3, [pc, #416]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <USER_SPI_initialize+0x2a>
 800b6ae:	4b65      	ldr	r3, [pc, #404]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	e0c1      	b.n	800b83a <USER_SPI_initialize+0x1ae>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_64);
 800b6b6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800b6ba:	4863      	ldr	r0, [pc, #396]	@ (800b848 <USER_SPI_initialize+0x1bc>)
 800b6bc:	f7ff fe39 	bl	800b332 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b6c0:	230a      	movs	r3, #10
 800b6c2:	73fb      	strb	r3, [r7, #15]
 800b6c4:	e005      	b.n	800b6d2 <USER_SPI_initialize+0x46>
 800b6c6:	20ff      	movs	r0, #255	@ 0xff
 800b6c8:	f7ff fe84 	bl	800b3d4 <xchg_spi>
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	73fb      	strb	r3, [r7, #15]
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1f6      	bne.n	800b6c6 <USER_SPI_initialize+0x3a>

	ty = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b6dc:	2100      	movs	r1, #0
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f7ff ff65 	bl	800b5ae <send_cmd>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	f040 808b 	bne.w	800b802 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b6ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6f0:	f7ff fe46 	bl	800b380 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b6f4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b6f8:	2008      	movs	r0, #8
 800b6fa:	f7ff ff58 	bl	800b5ae <send_cmd>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b01      	cmp	r3, #1
 800b702:	d151      	bne.n	800b7a8 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
 800b708:	e00d      	b.n	800b726 <USER_SPI_initialize+0x9a>
 800b70a:	7bfc      	ldrb	r4, [r7, #15]
 800b70c:	20ff      	movs	r0, #255	@ 0xff
 800b70e:	f7ff fe61 	bl	800b3d4 <xchg_spi>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	f104 0310 	add.w	r3, r4, #16
 800b71a:	443b      	add	r3, r7
 800b71c:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	3301      	adds	r3, #1
 800b724:	73fb      	strb	r3, [r7, #15]
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d9ee      	bls.n	800b70a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b72c:	7abb      	ldrb	r3, [r7, #10]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d167      	bne.n	800b802 <USER_SPI_initialize+0x176>
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	2baa      	cmp	r3, #170	@ 0xaa
 800b736:	d164      	bne.n	800b802 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b738:	bf00      	nop
 800b73a:	f7ff fe35 	bl	800b3a8 <SPI_Timer_Status>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <USER_SPI_initialize+0xc8>
 800b744:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b748:	20a9      	movs	r0, #169	@ 0xa9
 800b74a:	f7ff ff30 	bl	800b5ae <send_cmd>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1f2      	bne.n	800b73a <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b754:	f7ff fe28 	bl	800b3a8 <SPI_Timer_Status>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d051      	beq.n	800b802 <USER_SPI_initialize+0x176>
 800b75e:	2100      	movs	r1, #0
 800b760:	203a      	movs	r0, #58	@ 0x3a
 800b762:	f7ff ff24 	bl	800b5ae <send_cmd>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d14a      	bne.n	800b802 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
 800b770:	e00d      	b.n	800b78e <USER_SPI_initialize+0x102>
 800b772:	7bfc      	ldrb	r4, [r7, #15]
 800b774:	20ff      	movs	r0, #255	@ 0xff
 800b776:	f7ff fe2d 	bl	800b3d4 <xchg_spi>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	f104 0310 	add.w	r3, r4, #16
 800b782:	443b      	add	r3, r7
 800b784:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	3301      	adds	r3, #1
 800b78c:	73fb      	strb	r3, [r7, #15]
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	2b03      	cmp	r3, #3
 800b792:	d9ee      	bls.n	800b772 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b794:	7a3b      	ldrb	r3, [r7, #8]
 800b796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <USER_SPI_initialize+0x116>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	e000      	b.n	800b7a4 <USER_SPI_initialize+0x118>
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	737b      	strb	r3, [r7, #13]
 800b7a6:	e02c      	b.n	800b802 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	20a9      	movs	r0, #169	@ 0xa9
 800b7ac:	f7ff feff 	bl	800b5ae <send_cmd>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d804      	bhi.n	800b7c0 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	737b      	strb	r3, [r7, #13]
 800b7ba:	23a9      	movs	r3, #169	@ 0xa9
 800b7bc:	73bb      	strb	r3, [r7, #14]
 800b7be:	e003      	b.n	800b7c8 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	737b      	strb	r3, [r7, #13]
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b7c8:	bf00      	nop
 800b7ca:	f7ff fded 	bl	800b3a8 <SPI_Timer_Status>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <USER_SPI_initialize+0x158>
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff fee8 	bl	800b5ae <send_cmd>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f2      	bne.n	800b7ca <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b7e4:	f7ff fde0 	bl	800b3a8 <SPI_Timer_Status>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <USER_SPI_initialize+0x172>
 800b7ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b7f2:	2010      	movs	r0, #16
 800b7f4:	f7ff fedb 	bl	800b5ae <send_cmd>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <USER_SPI_initialize+0x176>
				ty = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b802:	4a12      	ldr	r2, [pc, #72]	@ (800b84c <USER_SPI_initialize+0x1c0>)
 800b804:	7b7b      	ldrb	r3, [r7, #13]
 800b806:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b808:	f7ff fe4a 	bl	800b4a0 <despiselect>

	if (ty) {			/* OK */
 800b80c:	7b7b      	ldrb	r3, [r7, #13]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00d      	beq.n	800b82e <USER_SPI_initialize+0x1a2>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_4);	/* Set fast clock */
 800b812:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800b816:	480c      	ldr	r0, [pc, #48]	@ (800b848 <USER_SPI_initialize+0x1bc>)
 800b818:	f7ff fd8b 	bl	800b332 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b81c:	4b09      	ldr	r3, [pc, #36]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	b2da      	uxtb	r2, r3
 800b828:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b82a:	701a      	strb	r2, [r3, #0]
 800b82c:	e002      	b.n	800b834 <USER_SPI_initialize+0x1a8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b82e:	4b05      	ldr	r3, [pc, #20]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b834:	4b03      	ldr	r3, [pc, #12]	@ (800b844 <USER_SPI_initialize+0x1b8>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	b2db      	uxtb	r3, r3
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd90      	pop	{r4, r7, pc}
 800b842:	bf00      	nop
 800b844:	24000028 	.word	0x24000028
 800b848:	24000350 	.word	0x24000350
 800b84c:	24000524 	.word	0x24000524

0800b850 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <USER_SPI_status+0x14>
 800b860:	2301      	movs	r3, #1
 800b862:	e002      	b.n	800b86a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b864:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <USER_SPI_status+0x28>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	b2db      	uxtb	r3, r3
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	24000028 	.word	0x24000028

0800b87c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60b9      	str	r1, [r7, #8]
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <USER_SPI_read+0x1c>
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <USER_SPI_read+0x20>
 800b898:	2304      	movs	r3, #4
 800b89a:	e04d      	b.n	800b938 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b89c:	4b28      	ldr	r3, [pc, #160]	@ (800b940 <USER_SPI_read+0xc4>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <USER_SPI_read+0x32>
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e044      	b.n	800b938 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b8ae:	4b25      	ldr	r3, [pc, #148]	@ (800b944 <USER_SPI_read+0xc8>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f003 0308 	and.w	r3, r3, #8
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <USER_SPI_read+0x44>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	025b      	lsls	r3, r3, #9
 800b8be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d111      	bne.n	800b8ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	2011      	movs	r0, #17
 800b8ca:	f7ff fe70 	bl	800b5ae <send_cmd>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d129      	bne.n	800b928 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b8d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8d8:	68b8      	ldr	r0, [r7, #8]
 800b8da:	f7ff fe0d 	bl	800b4f8 <rcvr_datablock>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d021      	beq.n	800b928 <USER_SPI_read+0xac>
			count = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	e01e      	b.n	800b928 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	2012      	movs	r0, #18
 800b8ee:	f7ff fe5e 	bl	800b5ae <send_cmd>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d117      	bne.n	800b928 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b8f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8fc:	68b8      	ldr	r0, [r7, #8]
 800b8fe:	f7ff fdfb 	bl	800b4f8 <rcvr_datablock>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00a      	beq.n	800b91e <USER_SPI_read+0xa2>
				buff += 512;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b90e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	3b01      	subs	r3, #1
 800b914:	603b      	str	r3, [r7, #0]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1ed      	bne.n	800b8f8 <USER_SPI_read+0x7c>
 800b91c:	e000      	b.n	800b920 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b91e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b920:	2100      	movs	r1, #0
 800b922:	200c      	movs	r0, #12
 800b924:	f7ff fe43 	bl	800b5ae <send_cmd>
		}
	}
	despiselect();
 800b928:	f7ff fdba 	bl	800b4a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bf14      	ite	ne
 800b932:	2301      	movne	r3, #1
 800b934:	2300      	moveq	r3, #0
 800b936:	b2db      	uxtb	r3, r3
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	24000028 	.word	0x24000028
 800b944:	24000524 	.word	0x24000524

0800b948 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60b9      	str	r1, [r7, #8]
 800b950:	607a      	str	r2, [r7, #4]
 800b952:	603b      	str	r3, [r7, #0]
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d102      	bne.n	800b964 <USER_SPI_write+0x1c>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <USER_SPI_write+0x20>
 800b964:	2304      	movs	r3, #4
 800b966:	e063      	b.n	800ba30 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b968:	4b33      	ldr	r3, [pc, #204]	@ (800ba38 <USER_SPI_write+0xf0>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <USER_SPI_write+0x32>
 800b976:	2303      	movs	r3, #3
 800b978:	e05a      	b.n	800ba30 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b97a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba38 <USER_SPI_write+0xf0>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0304 	and.w	r3, r3, #4
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <USER_SPI_write+0x44>
 800b988:	2302      	movs	r3, #2
 800b98a:	e051      	b.n	800ba30 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b98c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba3c <USER_SPI_write+0xf4>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <USER_SPI_write+0x56>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	025b      	lsls	r3, r3, #9
 800b99c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d110      	bne.n	800b9c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	2018      	movs	r0, #24
 800b9a8:	f7ff fe01 	bl	800b5ae <send_cmd>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d136      	bne.n	800ba20 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b9b2:	21fe      	movs	r1, #254	@ 0xfe
 800b9b4:	68b8      	ldr	r0, [r7, #8]
 800b9b6:	f7ff fdc8 	bl	800b54a <xmit_datablock>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d02f      	beq.n	800ba20 <USER_SPI_write+0xd8>
			count = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	e02c      	b.n	800ba20 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b9c6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba3c <USER_SPI_write+0xf4>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0306 	and.w	r3, r3, #6
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <USER_SPI_write+0x92>
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	2097      	movs	r0, #151	@ 0x97
 800b9d6:	f7ff fdea 	bl	800b5ae <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	2019      	movs	r0, #25
 800b9de:	f7ff fde6 	bl	800b5ae <send_cmd>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d11b      	bne.n	800ba20 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b9e8:	21fc      	movs	r1, #252	@ 0xfc
 800b9ea:	68b8      	ldr	r0, [r7, #8]
 800b9ec:	f7ff fdad 	bl	800b54a <xmit_datablock>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <USER_SPI_write+0xc4>
				buff += 512;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b9fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1ee      	bne.n	800b9e8 <USER_SPI_write+0xa0>
 800ba0a:	e000      	b.n	800ba0e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800ba0c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800ba0e:	21fd      	movs	r1, #253	@ 0xfd
 800ba10:	2000      	movs	r0, #0
 800ba12:	f7ff fd9a 	bl	800b54a <xmit_datablock>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USER_SPI_write+0xd8>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800ba20:	f7ff fd3e 	bl	800b4a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bf14      	ite	ne
 800ba2a:	2301      	movne	r3, #1
 800ba2c:	2300      	moveq	r3, #0
 800ba2e:	b2db      	uxtb	r3, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	24000028 	.word	0x24000028
 800ba3c:	24000524 	.word	0x24000524

0800ba40 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08c      	sub	sp, #48	@ 0x30
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	603a      	str	r2, [r7, #0]
 800ba4a:	71fb      	strb	r3, [r7, #7]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <USER_SPI_ioctl+0x1a>
 800ba56:	2304      	movs	r3, #4
 800ba58:	e15a      	b.n	800bd10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ba5a:	4baf      	ldr	r3, [pc, #700]	@ (800bd18 <USER_SPI_ioctl+0x2d8>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <USER_SPI_ioctl+0x2c>
 800ba68:	2303      	movs	r3, #3
 800ba6a:	e151      	b.n	800bd10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800ba72:	79bb      	ldrb	r3, [r7, #6]
 800ba74:	2b04      	cmp	r3, #4
 800ba76:	f200 8136 	bhi.w	800bce6 <USER_SPI_ioctl+0x2a6>
 800ba7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba80 <USER_SPI_ioctl+0x40>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800ba95 	.word	0x0800ba95
 800ba84:	0800baa9 	.word	0x0800baa9
 800ba88:	0800bce7 	.word	0x0800bce7
 800ba8c:	0800bb55 	.word	0x0800bb55
 800ba90:	0800bc4b 	.word	0x0800bc4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ba94:	f7ff fd14 	bl	800b4c0 <spiselect>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 8127 	beq.w	800bcee <USER_SPI_ioctl+0x2ae>
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800baa6:	e122      	b.n	800bcee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800baa8:	2100      	movs	r1, #0
 800baaa:	2009      	movs	r0, #9
 800baac:	f7ff fd7f 	bl	800b5ae <send_cmd>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f040 811d 	bne.w	800bcf2 <USER_SPI_ioctl+0x2b2>
 800bab8:	f107 030c 	add.w	r3, r7, #12
 800babc:	2110      	movs	r1, #16
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff fd1a 	bl	800b4f8 <rcvr_datablock>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 8113 	beq.w	800bcf2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bacc:	7b3b      	ldrb	r3, [r7, #12]
 800bace:	099b      	lsrs	r3, r3, #6
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d111      	bne.n	800bafa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bad6:	7d7b      	ldrb	r3, [r7, #21]
 800bad8:	461a      	mov	r2, r3
 800bada:	7d3b      	ldrb	r3, [r7, #20]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	4413      	add	r3, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	7cfb      	ldrb	r3, [r7, #19]
 800bae4:	041b      	lsls	r3, r3, #16
 800bae6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800baea:	4413      	add	r3, r2
 800baec:	3301      	adds	r3, #1
 800baee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	029a      	lsls	r2, r3, #10
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	e028      	b.n	800bb4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bafa:	7c7b      	ldrb	r3, [r7, #17]
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
 800bb04:	09db      	lsrs	r3, r3, #7
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	4413      	add	r3, r2
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	7d7b      	ldrb	r3, [r7, #21]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 0306 	and.w	r3, r3, #6
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	4413      	add	r3, r2
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	3302      	adds	r3, #2
 800bb1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bb22:	7d3b      	ldrb	r3, [r7, #20]
 800bb24:	099b      	lsrs	r3, r3, #6
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	461a      	mov	r2, r3
 800bb2a:	7cfb      	ldrb	r3, [r7, #19]
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	441a      	add	r2, r3
 800bb30:	7cbb      	ldrb	r3, [r7, #18]
 800bb32:	029b      	lsls	r3, r3, #10
 800bb34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb38:	4413      	add	r3, r2
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bb3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb42:	3b09      	subs	r3, #9
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	409a      	lsls	r2, r3
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bb52:	e0ce      	b.n	800bcf2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bb54:	4b71      	ldr	r3, [pc, #452]	@ (800bd1c <USER_SPI_ioctl+0x2dc>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	f003 0304 	and.w	r3, r3, #4
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d031      	beq.n	800bbc4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bb60:	2100      	movs	r1, #0
 800bb62:	208d      	movs	r0, #141	@ 0x8d
 800bb64:	f7ff fd23 	bl	800b5ae <send_cmd>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f040 80c3 	bne.w	800bcf6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bb70:	20ff      	movs	r0, #255	@ 0xff
 800bb72:	f7ff fc2f 	bl	800b3d4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	2110      	movs	r1, #16
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff fcbb 	bl	800b4f8 <rcvr_datablock>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80b6 	beq.w	800bcf6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bb8a:	2330      	movs	r3, #48	@ 0x30
 800bb8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bb90:	e007      	b.n	800bba2 <USER_SPI_ioctl+0x162>
 800bb92:	20ff      	movs	r0, #255	@ 0xff
 800bb94:	f7ff fc1e 	bl	800b3d4 <xchg_spi>
 800bb98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bba2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f3      	bne.n	800bb92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bbaa:	7dbb      	ldrb	r3, [r7, #22]
 800bbac:	091b      	lsrs	r3, r3, #4
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	2310      	movs	r3, #16
 800bbb4:	fa03 f202 	lsl.w	r2, r3, r2
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bbc2:	e098      	b.n	800bcf6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	2009      	movs	r0, #9
 800bbc8:	f7ff fcf1 	bl	800b5ae <send_cmd>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f040 8091 	bne.w	800bcf6 <USER_SPI_ioctl+0x2b6>
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	2110      	movs	r1, #16
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff fc8c 	bl	800b4f8 <rcvr_datablock>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 8087 	beq.w	800bcf6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800bbe8:	4b4c      	ldr	r3, [pc, #304]	@ (800bd1c <USER_SPI_ioctl+0x2dc>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d012      	beq.n	800bc1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800bbf4:	7dbb      	ldrb	r3, [r7, #22]
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800bbfc:	7dfa      	ldrb	r2, [r7, #23]
 800bbfe:	09d2      	lsrs	r2, r2, #7
 800bc00:	b2d2      	uxtb	r2, r2
 800bc02:	4413      	add	r3, r2
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	7e7b      	ldrb	r3, [r7, #25]
 800bc08:	099b      	lsrs	r3, r3, #6
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc12:	461a      	mov	r2, r3
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	e013      	b.n	800bc42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800bc1a:	7dbb      	ldrb	r3, [r7, #22]
 800bc1c:	109b      	asrs	r3, r3, #2
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f003 031f 	and.w	r3, r3, #31
 800bc24:	3301      	adds	r3, #1
 800bc26:	7dfa      	ldrb	r2, [r7, #23]
 800bc28:	00d2      	lsls	r2, r2, #3
 800bc2a:	f002 0218 	and.w	r2, r2, #24
 800bc2e:	7df9      	ldrb	r1, [r7, #23]
 800bc30:	0949      	lsrs	r1, r1, #5
 800bc32:	b2c9      	uxtb	r1, r1
 800bc34:	440a      	add	r2, r1
 800bc36:	3201      	adds	r2, #1
 800bc38:	fb02 f303 	mul.w	r3, r2, r3
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800bc48:	e055      	b.n	800bcf6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bc4a:	4b34      	ldr	r3, [pc, #208]	@ (800bd1c <USER_SPI_ioctl+0x2dc>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	f003 0306 	and.w	r3, r3, #6
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d051      	beq.n	800bcfa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bc56:	f107 020c 	add.w	r2, r7, #12
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	210b      	movs	r1, #11
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7ff feee 	bl	800ba40 <USER_SPI_ioctl>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d149      	bne.n	800bcfe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800bc6a:	7b3b      	ldrb	r3, [r7, #12]
 800bc6c:	099b      	lsrs	r3, r3, #6
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d104      	bne.n	800bc7e <USER_SPI_ioctl+0x23e>
 800bc74:	7dbb      	ldrb	r3, [r7, #22]
 800bc76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d041      	beq.n	800bd02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	623b      	str	r3, [r7, #32]
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800bc8e:	4b23      	ldr	r3, [pc, #140]	@ (800bd1c <USER_SPI_ioctl+0x2dc>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d105      	bne.n	800bca6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800bc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9c:	025b      	lsls	r3, r3, #9
 800bc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	025b      	lsls	r3, r3, #9
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800bca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bca8:	2020      	movs	r0, #32
 800bcaa:	f7ff fc80 	bl	800b5ae <send_cmd>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d128      	bne.n	800bd06 <USER_SPI_ioctl+0x2c6>
 800bcb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcb6:	2021      	movs	r0, #33	@ 0x21
 800bcb8:	f7ff fc79 	bl	800b5ae <send_cmd>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d121      	bne.n	800bd06 <USER_SPI_ioctl+0x2c6>
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	2026      	movs	r0, #38	@ 0x26
 800bcc6:	f7ff fc72 	bl	800b5ae <send_cmd>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d11a      	bne.n	800bd06 <USER_SPI_ioctl+0x2c6>
 800bcd0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800bcd4:	f7ff fbc0 	bl	800b458 <wait_ready>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d013      	beq.n	800bd06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800bcde:	2300      	movs	r3, #0
 800bce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bce4:	e00f      	b.n	800bd06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800bce6:	2304      	movs	r3, #4
 800bce8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bcec:	e00c      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		break;
 800bcee:	bf00      	nop
 800bcf0:	e00a      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		break;
 800bcf2:	bf00      	nop
 800bcf4:	e008      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		break;
 800bcf6:	bf00      	nop
 800bcf8:	e006      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bcfa:	bf00      	nop
 800bcfc:	e004      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bcfe:	bf00      	nop
 800bd00:	e002      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800bd02:	bf00      	nop
 800bd04:	e000      	b.n	800bd08 <USER_SPI_ioctl+0x2c8>
		break;
 800bd06:	bf00      	nop
	}

	despiselect();
 800bd08:	f7ff fbca 	bl	800b4a0 <despiselect>

	return res;
 800bd0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3730      	adds	r7, #48	@ 0x30
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	24000028 	.word	0x24000028
 800bd1c:	24000524 	.word	0x24000524

0800bd20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	4a08      	ldr	r2, [pc, #32]	@ (800bd50 <disk_status+0x30>)
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	79fa      	ldrb	r2, [r7, #7]
 800bd38:	4905      	ldr	r1, [pc, #20]	@ (800bd50 <disk_status+0x30>)
 800bd3a:	440a      	add	r2, r1
 800bd3c:	7a12      	ldrb	r2, [r2, #8]
 800bd3e:	4610      	mov	r0, r2
 800bd40:	4798      	blx	r3
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	24000558 	.word	0x24000558

0800bd54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	4a0e      	ldr	r2, [pc, #56]	@ (800bda0 <disk_initialize+0x4c>)
 800bd66:	5cd3      	ldrb	r3, [r2, r3]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d114      	bne.n	800bd96 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	4a0c      	ldr	r2, [pc, #48]	@ (800bda0 <disk_initialize+0x4c>)
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	79fa      	ldrb	r2, [r7, #7]
 800bd7a:	4909      	ldr	r1, [pc, #36]	@ (800bda0 <disk_initialize+0x4c>)
 800bd7c:	440a      	add	r2, r1
 800bd7e:	7a12      	ldrb	r2, [r2, #8]
 800bd80:	4610      	mov	r0, r2
 800bd82:	4798      	blx	r3
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	4a03      	ldr	r2, [pc, #12]	@ (800bda0 <disk_initialize+0x4c>)
 800bd92:	2101      	movs	r1, #1
 800bd94:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	24000558 	.word	0x24000558

0800bda4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bde0 <disk_read+0x3c>)
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	689c      	ldr	r4, [r3, #8]
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4a07      	ldr	r2, [pc, #28]	@ (800bde0 <disk_read+0x3c>)
 800bdc4:	4413      	add	r3, r2
 800bdc6:	7a18      	ldrb	r0, [r3, #8]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	47a0      	blx	r4
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	24000558 	.word	0x24000558

0800bde4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bde4:	b590      	push	{r4, r7, lr}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60b9      	str	r1, [r7, #8]
 800bdec:	607a      	str	r2, [r7, #4]
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4a0a      	ldr	r2, [pc, #40]	@ (800be20 <disk_write+0x3c>)
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	68dc      	ldr	r4, [r3, #12]
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	4a07      	ldr	r2, [pc, #28]	@ (800be20 <disk_write+0x3c>)
 800be04:	4413      	add	r3, r2
 800be06:	7a18      	ldrb	r0, [r3, #8]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	68b9      	ldr	r1, [r7, #8]
 800be0e:	47a0      	blx	r4
 800be10:	4603      	mov	r3, r0
 800be12:	75fb      	strb	r3, [r7, #23]
  return res;
 800be14:	7dfb      	ldrb	r3, [r7, #23]
}
 800be16:	4618      	mov	r0, r3
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd90      	pop	{r4, r7, pc}
 800be1e:	bf00      	nop
 800be20:	24000558 	.word	0x24000558

0800be24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	603a      	str	r2, [r7, #0]
 800be2e:	71fb      	strb	r3, [r7, #7]
 800be30:	460b      	mov	r3, r1
 800be32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	4a09      	ldr	r2, [pc, #36]	@ (800be5c <disk_ioctl+0x38>)
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	4906      	ldr	r1, [pc, #24]	@ (800be5c <disk_ioctl+0x38>)
 800be44:	440a      	add	r2, r1
 800be46:	7a10      	ldrb	r0, [r2, #8]
 800be48:	79b9      	ldrb	r1, [r7, #6]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4798      	blx	r3
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
  return res;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	24000558 	.word	0x24000558

0800be60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3301      	adds	r3, #1
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	b21a      	sxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b21b      	sxth	r3, r3
 800be7c:	4313      	orrs	r3, r2
 800be7e:	b21b      	sxth	r3, r3
 800be80:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be82:	89fb      	ldrh	r3, [r7, #14]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3303      	adds	r3, #3
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	3202      	adds	r2, #2
 800bea8:	7812      	ldrb	r2, [r2, #0]
 800beaa:	4313      	orrs	r3, r2
 800beac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	021b      	lsls	r3, r3, #8
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	3201      	adds	r2, #1
 800beb6:	7812      	ldrb	r2, [r2, #0]
 800beb8:	4313      	orrs	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	021b      	lsls	r3, r3, #8
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	60fb      	str	r3, [r7, #12]
	return rv;
 800bec8:	68fb      	ldr	r3, [r7, #12]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	460b      	mov	r3, r1
 800bee0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	887a      	ldrh	r2, [r7, #2]
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	701a      	strb	r2, [r3, #0]
 800beee:	887b      	ldrh	r3, [r7, #2]
 800bef0:	0a1b      	lsrs	r3, r3, #8
 800bef2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	887a      	ldrh	r2, [r7, #2]
 800befc:	b2d2      	uxtb	r2, r2
 800befe:	701a      	strb	r2, [r3, #0]
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	b2d2      	uxtb	r2, r2
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	0a1b      	lsrs	r3, r3, #8
 800bf4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	607a      	str	r2, [r7, #4]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	b2d2      	uxtb	r2, r2
 800bf56:	701a      	strb	r2, [r3, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00d      	beq.n	800bf9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	1c53      	adds	r3, r2, #1
 800bf82:	613b      	str	r3, [r7, #16]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	1c59      	adds	r1, r3, #1
 800bf88:	6179      	str	r1, [r7, #20]
 800bf8a:	7812      	ldrb	r2, [r2, #0]
 800bf8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1f1      	bne.n	800bf7e <mem_cpy+0x1a>
	}
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bfa6:	b480      	push	{r7}
 800bfa8:	b087      	sub	sp, #28
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	617a      	str	r2, [r7, #20]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	b2d2      	uxtb	r2, r2
 800bfc0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	607b      	str	r3, [r7, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f3      	bne.n	800bfb6 <mem_set+0x10>
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	371c      	adds	r7, #28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bfdc:	b480      	push	{r7}
 800bfde:	b089      	sub	sp, #36	@ 0x24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	61fb      	str	r3, [r7, #28]
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	61fa      	str	r2, [r7, #28]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	4619      	mov	r1, r3
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	61ba      	str	r2, [r7, #24]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	1acb      	subs	r3, r1, r3
 800c008:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	607b      	str	r3, [r7, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d002      	beq.n	800c01c <mem_cmp+0x40>
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0eb      	beq.n	800bff4 <mem_cmp+0x18>

	return r;
 800c01c:	697b      	ldr	r3, [r7, #20]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3724      	adds	r7, #36	@ 0x24
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c02a:	b480      	push	{r7}
 800c02c:	b083      	sub	sp, #12
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c034:	e002      	b.n	800c03c <chk_chr+0x12>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3301      	adds	r3, #1
 800c03a:	607b      	str	r3, [r7, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <chk_chr+0x26>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d1f2      	bne.n	800c036 <chk_chr+0xc>
	return *str;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	781b      	ldrb	r3, [r3, #0]
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	60fb      	str	r3, [r7, #12]
 800c072:	e029      	b.n	800c0c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c074:	4a27      	ldr	r2, [pc, #156]	@ (800c114 <chk_lock+0xb4>)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	011b      	lsls	r3, r3, #4
 800c07a:	4413      	add	r3, r2
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d01d      	beq.n	800c0be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c082:	4a24      	ldr	r2, [pc, #144]	@ (800c114 <chk_lock+0xb4>)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	4413      	add	r3, r2
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d116      	bne.n	800c0c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c094:	4a1f      	ldr	r2, [pc, #124]	@ (800c114 <chk_lock+0xb4>)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	011b      	lsls	r3, r3, #4
 800c09a:	4413      	add	r3, r2
 800c09c:	3304      	adds	r3, #4
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d10c      	bne.n	800c0c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c114 <chk_lock+0xb4>)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	4413      	add	r3, r2
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d102      	bne.n	800c0c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0bc:	e007      	b.n	800c0ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d9d2      	bls.n	800c074 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d109      	bne.n	800c0e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d102      	bne.n	800c0e0 <chk_lock+0x80>
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d101      	bne.n	800c0e4 <chk_lock+0x84>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	e010      	b.n	800c106 <chk_lock+0xa6>
 800c0e4:	2312      	movs	r3, #18
 800c0e6:	e00e      	b.n	800c106 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d108      	bne.n	800c100 <chk_lock+0xa0>
 800c0ee:	4a09      	ldr	r2, [pc, #36]	@ (800c114 <chk_lock+0xb4>)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	011b      	lsls	r3, r3, #4
 800c0f4:	4413      	add	r3, r2
 800c0f6:	330c      	adds	r3, #12
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0fe:	d101      	bne.n	800c104 <chk_lock+0xa4>
 800c100:	2310      	movs	r3, #16
 800c102:	e000      	b.n	800c106 <chk_lock+0xa6>
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	24000538 	.word	0x24000538

0800c118 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c11e:	2300      	movs	r3, #0
 800c120:	607b      	str	r3, [r7, #4]
 800c122:	e002      	b.n	800c12a <enq_lock+0x12>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3301      	adds	r3, #1
 800c128:	607b      	str	r3, [r7, #4]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d806      	bhi.n	800c13e <enq_lock+0x26>
 800c130:	4a09      	ldr	r2, [pc, #36]	@ (800c158 <enq_lock+0x40>)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	4413      	add	r3, r2
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f2      	bne.n	800c124 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b02      	cmp	r3, #2
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	24000538 	.word	0x24000538

0800c15c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c166:	2300      	movs	r3, #0
 800c168:	60fb      	str	r3, [r7, #12]
 800c16a:	e01f      	b.n	800c1ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c16c:	4a41      	ldr	r2, [pc, #260]	@ (800c274 <inc_lock+0x118>)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	4413      	add	r3, r2
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d113      	bne.n	800c1a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c17e:	4a3d      	ldr	r2, [pc, #244]	@ (800c274 <inc_lock+0x118>)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	4413      	add	r3, r2
 800c186:	3304      	adds	r3, #4
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c18e:	429a      	cmp	r2, r3
 800c190:	d109      	bne.n	800c1a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c192:	4a38      	ldr	r2, [pc, #224]	@ (800c274 <inc_lock+0x118>)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	4413      	add	r3, r2
 800c19a:	3308      	adds	r3, #8
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d006      	beq.n	800c1b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d9dc      	bls.n	800c16c <inc_lock+0x10>
 800c1b2:	e000      	b.n	800c1b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d132      	bne.n	800c222 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	e002      	b.n	800c1c8 <inc_lock+0x6c>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d806      	bhi.n	800c1dc <inc_lock+0x80>
 800c1ce:	4a29      	ldr	r2, [pc, #164]	@ (800c274 <inc_lock+0x118>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	4413      	add	r3, r2
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1f2      	bne.n	800c1c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d101      	bne.n	800c1e6 <inc_lock+0x8a>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e040      	b.n	800c268 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	4922      	ldr	r1, [pc, #136]	@ (800c274 <inc_lock+0x118>)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	440b      	add	r3, r1
 800c1f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689a      	ldr	r2, [r3, #8]
 800c1f8:	491e      	ldr	r1, [pc, #120]	@ (800c274 <inc_lock+0x118>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	440b      	add	r3, r1
 800c200:	3304      	adds	r3, #4
 800c202:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	695a      	ldr	r2, [r3, #20]
 800c208:	491a      	ldr	r1, [pc, #104]	@ (800c274 <inc_lock+0x118>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	011b      	lsls	r3, r3, #4
 800c20e:	440b      	add	r3, r1
 800c210:	3308      	adds	r3, #8
 800c212:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c214:	4a17      	ldr	r2, [pc, #92]	@ (800c274 <inc_lock+0x118>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	4413      	add	r3, r2
 800c21c:	330c      	adds	r3, #12
 800c21e:	2200      	movs	r2, #0
 800c220:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <inc_lock+0xe0>
 800c228:	4a12      	ldr	r2, [pc, #72]	@ (800c274 <inc_lock+0x118>)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	4413      	add	r3, r2
 800c230:	330c      	adds	r3, #12
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <inc_lock+0xe0>
 800c238:	2300      	movs	r3, #0
 800c23a:	e015      	b.n	800c268 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d108      	bne.n	800c254 <inc_lock+0xf8>
 800c242:	4a0c      	ldr	r2, [pc, #48]	@ (800c274 <inc_lock+0x118>)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	011b      	lsls	r3, r3, #4
 800c248:	4413      	add	r3, r2
 800c24a:	330c      	adds	r3, #12
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	3301      	adds	r3, #1
 800c250:	b29a      	uxth	r2, r3
 800c252:	e001      	b.n	800c258 <inc_lock+0xfc>
 800c254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c258:	4906      	ldr	r1, [pc, #24]	@ (800c274 <inc_lock+0x118>)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	011b      	lsls	r3, r3, #4
 800c25e:	440b      	add	r3, r1
 800c260:	330c      	adds	r3, #12
 800c262:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3301      	adds	r3, #1
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	24000538 	.word	0x24000538

0800c278 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3b01      	subs	r3, #1
 800c284:	607b      	str	r3, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d825      	bhi.n	800c2d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c28c:	4a17      	ldr	r2, [pc, #92]	@ (800c2ec <dec_lock+0x74>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	011b      	lsls	r3, r3, #4
 800c292:	4413      	add	r3, r2
 800c294:	330c      	adds	r3, #12
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2a0:	d101      	bne.n	800c2a6 <dec_lock+0x2e>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c2a6:	89fb      	ldrh	r3, [r7, #14]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <dec_lock+0x3a>
 800c2ac:	89fb      	ldrh	r3, [r7, #14]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2b2:	4a0e      	ldr	r2, [pc, #56]	@ (800c2ec <dec_lock+0x74>)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	4413      	add	r3, r2
 800c2ba:	330c      	adds	r3, #12
 800c2bc:	89fa      	ldrh	r2, [r7, #14]
 800c2be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2c0:	89fb      	ldrh	r3, [r7, #14]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d105      	bne.n	800c2d2 <dec_lock+0x5a>
 800c2c6:	4a09      	ldr	r2, [pc, #36]	@ (800c2ec <dec_lock+0x74>)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	737b      	strb	r3, [r7, #13]
 800c2d6:	e001      	b.n	800c2dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c2d8:	2302      	movs	r3, #2
 800c2da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c2dc:	7b7b      	ldrb	r3, [r7, #13]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	24000538 	.word	0x24000538

0800c2f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e010      	b.n	800c320 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c2fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c334 <clear_lock+0x44>)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4413      	add	r3, r2
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d105      	bne.n	800c31a <clear_lock+0x2a>
 800c30e:	4a09      	ldr	r2, [pc, #36]	@ (800c334 <clear_lock+0x44>)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	4413      	add	r3, r2
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3301      	adds	r3, #1
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d9eb      	bls.n	800c2fe <clear_lock+0xe>
	}
}
 800c326:	bf00      	nop
 800c328:	bf00      	nop
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	24000538 	.word	0x24000538

0800c338 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	78db      	ldrb	r3, [r3, #3]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d034      	beq.n	800c3b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c350:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7858      	ldrb	r0, [r3, #1]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c35c:	2301      	movs	r3, #1
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	f7ff fd40 	bl	800bde4 <disk_write>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	73fb      	strb	r3, [r7, #15]
 800c36e:	e022      	b.n	800c3b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	1ad2      	subs	r2, r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	429a      	cmp	r2, r3
 800c384:	d217      	bcs.n	800c3b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	789b      	ldrb	r3, [r3, #2]
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	e010      	b.n	800c3b0 <sync_window+0x78>
					wsect += fs->fsize;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	4413      	add	r3, r2
 800c396:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7858      	ldrb	r0, [r3, #1]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	f7ff fd1d 	bl	800bde4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d8eb      	bhi.n	800c38e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d01b      	beq.n	800c410 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff ffad 	bl	800c338 <sync_window>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d113      	bne.n	800c410 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7858      	ldrb	r0, [r3, #1]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	f7ff fcd5 	bl	800bda4 <disk_read>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d004      	beq.n	800c40a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c400:	f04f 33ff 	mov.w	r3, #4294967295
 800c404:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c406:	2301      	movs	r3, #1
 800c408:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c410:	7bfb      	ldrb	r3, [r7, #15]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ff87 	bl	800c338 <sync_window>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d158      	bne.n	800c4e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d148      	bne.n	800c4ce <sync_fs+0xb2>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	791b      	ldrb	r3, [r3, #4]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d144      	bne.n	800c4ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3330      	adds	r3, #48	@ 0x30
 800c448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c44c:	2100      	movs	r1, #0
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff fda9 	bl	800bfa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3330      	adds	r3, #48	@ 0x30
 800c458:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c45c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fd38 	bl	800bed6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	3330      	adds	r3, #48	@ 0x30
 800c46a:	4921      	ldr	r1, [pc, #132]	@ (800c4f0 <sync_fs+0xd4>)
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff fd4d 	bl	800bf0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3330      	adds	r3, #48	@ 0x30
 800c476:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c47a:	491e      	ldr	r1, [pc, #120]	@ (800c4f4 <sync_fs+0xd8>)
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fd45 	bl	800bf0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3330      	adds	r3, #48	@ 0x30
 800c486:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7ff fd3b 	bl	800bf0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3330      	adds	r3, #48	@ 0x30
 800c49a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7ff fd31 	bl	800bf0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7858      	ldrb	r0, [r3, #1]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	f7ff fc8e 	bl	800bde4 <disk_write>
			fs->fsi_flag = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	785b      	ldrb	r3, [r3, #1]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fca4 	bl	800be24 <disk_ioctl>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <sync_fs+0xca>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	41615252 	.word	0x41615252
 800c4f4:	61417272 	.word	0x61417272

0800c4f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	3b02      	subs	r3, #2
 800c506:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	3b02      	subs	r3, #2
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d301      	bcc.n	800c518 <clust2sect+0x20>
 800c514:	2300      	movs	r3, #0
 800c516:	e008      	b.n	800c52a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	895b      	ldrh	r3, [r3, #10]
 800c51c:	461a      	mov	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	fb03 f202 	mul.w	r2, r3, r2
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c528:	4413      	add	r3, r2
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d904      	bls.n	800c556 <get_fat+0x20>
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d302      	bcc.n	800c55c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c556:	2301      	movs	r3, #1
 800c558:	617b      	str	r3, [r7, #20]
 800c55a:	e08e      	b.n	800c67a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c55c:	f04f 33ff 	mov.w	r3, #4294967295
 800c560:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b03      	cmp	r3, #3
 800c568:	d061      	beq.n	800c62e <get_fat+0xf8>
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	dc7b      	bgt.n	800c666 <get_fat+0x130>
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d002      	beq.n	800c578 <get_fat+0x42>
 800c572:	2b02      	cmp	r3, #2
 800c574:	d041      	beq.n	800c5fa <get_fat+0xc4>
 800c576:	e076      	b.n	800c666 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	085b      	lsrs	r3, r3, #1
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	6a1a      	ldr	r2, [r3, #32]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	0a5b      	lsrs	r3, r3, #9
 800c58e:	4413      	add	r3, r2
 800c590:	4619      	mov	r1, r3
 800c592:	6938      	ldr	r0, [r7, #16]
 800c594:	f7ff ff14 	bl	800c3c0 <move_window>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d166      	bne.n	800c66c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	60fa      	str	r2, [r7, #12]
 800c5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	6a1a      	ldr	r2, [r3, #32]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	0a5b      	lsrs	r3, r3, #9
 800c5ba:	4413      	add	r3, r2
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6938      	ldr	r0, [r7, #16]
 800c5c0:	f7ff fefe 	bl	800c3c0 <move_window>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d152      	bne.n	800c670 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5d8:	021b      	lsls	r3, r3, #8
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <get_fat+0xba>
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	091b      	lsrs	r3, r3, #4
 800c5ee:	e002      	b.n	800c5f6 <get_fat+0xc0>
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5f6:	617b      	str	r3, [r7, #20]
			break;
 800c5f8:	e03f      	b.n	800c67a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6a1a      	ldr	r2, [r3, #32]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	0a1b      	lsrs	r3, r3, #8
 800c602:	4413      	add	r3, r2
 800c604:	4619      	mov	r1, r3
 800c606:	6938      	ldr	r0, [r7, #16]
 800c608:	f7ff feda 	bl	800c3c0 <move_window>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d130      	bne.n	800c674 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c620:	4413      	add	r3, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff fc1c 	bl	800be60 <ld_word>
 800c628:	4603      	mov	r3, r0
 800c62a:	617b      	str	r3, [r7, #20]
			break;
 800c62c:	e025      	b.n	800c67a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6a1a      	ldr	r2, [r3, #32]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	09db      	lsrs	r3, r3, #7
 800c636:	4413      	add	r3, r2
 800c638:	4619      	mov	r1, r3
 800c63a:	6938      	ldr	r0, [r7, #16]
 800c63c:	f7ff fec0 	bl	800c3c0 <move_window>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d118      	bne.n	800c678 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c654:	4413      	add	r3, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fc1a 	bl	800be90 <ld_dword>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c662:	617b      	str	r3, [r7, #20]
			break;
 800c664:	e009      	b.n	800c67a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c666:	2301      	movs	r3, #1
 800c668:	617b      	str	r3, [r7, #20]
 800c66a:	e006      	b.n	800c67a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c66c:	bf00      	nop
 800c66e:	e004      	b.n	800c67a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c670:	bf00      	nop
 800c672:	e002      	b.n	800c67a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c674:	bf00      	nop
 800c676:	e000      	b.n	800c67a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c678:	bf00      	nop
		}
	}

	return val;
 800c67a:	697b      	ldr	r3, [r7, #20]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b089      	sub	sp, #36	@ 0x24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c690:	2302      	movs	r3, #2
 800c692:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2b01      	cmp	r3, #1
 800c698:	f240 80d9 	bls.w	800c84e <put_fat+0x1ca>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	f080 80d3 	bcs.w	800c84e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	f000 8096 	beq.w	800c7de <put_fat+0x15a>
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	f300 80cb 	bgt.w	800c84e <put_fat+0x1ca>
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d002      	beq.n	800c6c2 <put_fat+0x3e>
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d06e      	beq.n	800c79e <put_fat+0x11a>
 800c6c0:	e0c5      	b.n	800c84e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	61bb      	str	r3, [r7, #24]
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	085b      	lsrs	r3, r3, #1
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a1a      	ldr	r2, [r3, #32]
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	0a5b      	lsrs	r3, r3, #9
 800c6d8:	4413      	add	r3, r2
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7ff fe6f 	bl	800c3c0 <move_window>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6e6:	7ffb      	ldrb	r3, [r7, #31]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f040 80a9 	bne.w	800c840 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	1c59      	adds	r1, r3, #1
 800c6f8:	61b9      	str	r1, [r7, #24]
 800c6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fe:	4413      	add	r3, r2
 800c700:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00d      	beq.n	800c728 <put_fat+0xa4>
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	b25b      	sxtb	r3, r3
 800c712:	f003 030f 	and.w	r3, r3, #15
 800c716:	b25a      	sxtb	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	011b      	lsls	r3, r3, #4
 800c71e:	b25b      	sxtb	r3, r3
 800c720:	4313      	orrs	r3, r2
 800c722:	b25b      	sxtb	r3, r3
 800c724:	b2db      	uxtb	r3, r3
 800c726:	e001      	b.n	800c72c <put_fat+0xa8>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2201      	movs	r2, #1
 800c734:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6a1a      	ldr	r2, [r3, #32]
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	0a5b      	lsrs	r3, r3, #9
 800c73e:	4413      	add	r3, r2
 800c740:	4619      	mov	r1, r3
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff fe3c 	bl	800c3c0 <move_window>
 800c748:	4603      	mov	r3, r0
 800c74a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c74c:	7ffb      	ldrb	r3, [r7, #31]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d178      	bne.n	800c844 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75e:	4413      	add	r3, r2
 800c760:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <put_fat+0xf0>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	091b      	lsrs	r3, r3, #4
 800c770:	b2db      	uxtb	r3, r3
 800c772:	e00e      	b.n	800c792 <put_fat+0x10e>
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	b25b      	sxtb	r3, r3
 800c77a:	f023 030f 	bic.w	r3, r3, #15
 800c77e:	b25a      	sxtb	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	0a1b      	lsrs	r3, r3, #8
 800c784:	b25b      	sxtb	r3, r3
 800c786:	f003 030f 	and.w	r3, r3, #15
 800c78a:	b25b      	sxtb	r3, r3
 800c78c:	4313      	orrs	r3, r2
 800c78e:	b25b      	sxtb	r3, r3
 800c790:	b2db      	uxtb	r3, r3
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2201      	movs	r2, #1
 800c79a:	70da      	strb	r2, [r3, #3]
			break;
 800c79c:	e057      	b.n	800c84e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a1a      	ldr	r2, [r3, #32]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	0a1b      	lsrs	r3, r3, #8
 800c7a6:	4413      	add	r3, r2
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fe08 	bl	800c3c0 <move_window>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7b4:	7ffb      	ldrb	r3, [r7, #31]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d146      	bne.n	800c848 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c7c8:	4413      	add	r3, r2
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	b292      	uxth	r2, r2
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fb80 	bl	800bed6 <st_word>
			fs->wflag = 1;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	70da      	strb	r2, [r3, #3]
			break;
 800c7dc:	e037      	b.n	800c84e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6a1a      	ldr	r2, [r3, #32]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	09db      	lsrs	r3, r3, #7
 800c7e6:	4413      	add	r3, r2
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f7ff fde8 	bl	800c3c0 <move_window>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7f4:	7ffb      	ldrb	r3, [r7, #31]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d128      	bne.n	800c84c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c80e:	4413      	add	r3, r2
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fb3d 	bl	800be90 <ld_dword>
 800c816:	4603      	mov	r3, r0
 800c818:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c81c:	4323      	orrs	r3, r4
 800c81e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c82e:	4413      	add	r3, r2
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fb6a 	bl	800bf0c <st_dword>
			fs->wflag = 1;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2201      	movs	r2, #1
 800c83c:	70da      	strb	r2, [r3, #3]
			break;
 800c83e:	e006      	b.n	800c84e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c840:	bf00      	nop
 800c842:	e004      	b.n	800c84e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c844:	bf00      	nop
 800c846:	e002      	b.n	800c84e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c848:	bf00      	nop
 800c84a:	e000      	b.n	800c84e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c84c:	bf00      	nop
		}
	}
	return res;
 800c84e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3724      	adds	r7, #36	@ 0x24
 800c854:	46bd      	mov	sp, r7
 800c856:	bd90      	pop	{r4, r7, pc}

0800c858 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d904      	bls.n	800c87e <remove_chain+0x26>
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d301      	bcc.n	800c882 <remove_chain+0x2a>
 800c87e:	2302      	movs	r3, #2
 800c880:	e04b      	b.n	800c91a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00c      	beq.n	800c8a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c888:	f04f 32ff 	mov.w	r2, #4294967295
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	69b8      	ldr	r0, [r7, #24]
 800c890:	f7ff fef8 	bl	800c684 <put_fat>
 800c894:	4603      	mov	r3, r0
 800c896:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c898:	7ffb      	ldrb	r3, [r7, #31]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <remove_chain+0x4a>
 800c89e:	7ffb      	ldrb	r3, [r7, #31]
 800c8a0:	e03b      	b.n	800c91a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f7ff fe46 	bl	800c536 <get_fat>
 800c8aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d031      	beq.n	800c916 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d101      	bne.n	800c8bc <remove_chain+0x64>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e02e      	b.n	800c91a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c2:	d101      	bne.n	800c8c8 <remove_chain+0x70>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e028      	b.n	800c91a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	69b8      	ldr	r0, [r7, #24]
 800c8ce:	f7ff fed9 	bl	800c684 <put_fat>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c8d6:	7ffb      	ldrb	r3, [r7, #31]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <remove_chain+0x88>
 800c8dc:	7ffb      	ldrb	r3, [r7, #31]
 800c8de:	e01c      	b.n	800c91a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	691a      	ldr	r2, [r3, #16]
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	3b02      	subs	r3, #2
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d20b      	bcs.n	800c906 <remove_chain+0xae>
			fs->free_clst++;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	791b      	ldrb	r3, [r3, #4]
 800c8fc:	f043 0301 	orr.w	r3, r3, #1
 800c900:	b2da      	uxtb	r2, r3
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	429a      	cmp	r2, r3
 800c912:	d3c6      	bcc.n	800c8a2 <remove_chain+0x4a>
 800c914:	e000      	b.n	800c918 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c916:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3720      	adds	r7, #32
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b088      	sub	sp, #32
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10d      	bne.n	800c954 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d004      	beq.n	800c94e <create_chain+0x2c>
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d31b      	bcc.n	800c986 <create_chain+0x64>
 800c94e:	2301      	movs	r3, #1
 800c950:	61bb      	str	r3, [r7, #24]
 800c952:	e018      	b.n	800c986 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fded 	bl	800c536 <get_fat>
 800c95c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d801      	bhi.n	800c968 <create_chain+0x46>
 800c964:	2301      	movs	r3, #1
 800c966:	e070      	b.n	800ca4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96e:	d101      	bne.n	800c974 <create_chain+0x52>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	e06a      	b.n	800ca4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d201      	bcs.n	800c982 <create_chain+0x60>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	e063      	b.n	800ca4a <create_chain+0x128>
		scl = clst;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	3301      	adds	r3, #1
 800c98e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	429a      	cmp	r2, r3
 800c998:	d307      	bcc.n	800c9aa <create_chain+0x88>
				ncl = 2;
 800c99a:	2302      	movs	r3, #2
 800c99c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d901      	bls.n	800c9aa <create_chain+0x88>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e04f      	b.n	800ca4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9aa:	69f9      	ldr	r1, [r7, #28]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff fdc2 	bl	800c536 <get_fat>
 800c9b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00e      	beq.n	800c9d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d003      	beq.n	800c9c8 <create_chain+0xa6>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d101      	bne.n	800c9cc <create_chain+0xaa>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	e03e      	b.n	800ca4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d1da      	bne.n	800c98a <create_chain+0x68>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e038      	b.n	800ca4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c9d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c9da:	f04f 32ff 	mov.w	r2, #4294967295
 800c9de:	69f9      	ldr	r1, [r7, #28]
 800c9e0:	6938      	ldr	r0, [r7, #16]
 800c9e2:	f7ff fe4f 	bl	800c684 <put_fat>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d109      	bne.n	800ca04 <create_chain+0xe2>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d006      	beq.n	800ca04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6938      	ldr	r0, [r7, #16]
 800c9fc:	f7ff fe42 	bl	800c684 <put_fat>
 800ca00:	4603      	mov	r3, r0
 800ca02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d116      	bne.n	800ca38 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	69fa      	ldr	r2, [r7, #28]
 800ca0e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	691a      	ldr	r2, [r3, #16]
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	3b02      	subs	r3, #2
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d804      	bhi.n	800ca28 <create_chain+0x106>
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	791b      	ldrb	r3, [r3, #4]
 800ca2c:	f043 0301 	orr.w	r3, r3, #1
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	711a      	strb	r2, [r3, #4]
 800ca36:	e007      	b.n	800ca48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d102      	bne.n	800ca44 <create_chain+0x122>
 800ca3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca42:	e000      	b.n	800ca46 <create_chain+0x124>
 800ca44:	2301      	movs	r3, #1
 800ca46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca48:	69fb      	ldr	r3, [r7, #28]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3720      	adds	r7, #32
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b087      	sub	sp, #28
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca66:	3304      	adds	r3, #4
 800ca68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	0a5b      	lsrs	r3, r3, #9
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	8952      	ldrh	r2, [r2, #10]
 800ca72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	1d1a      	adds	r2, r3, #4
 800ca7c:	613a      	str	r2, [r7, #16]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <clmt_clust+0x3a>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e010      	b.n	800caae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d307      	bcc.n	800caa4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	617b      	str	r3, [r7, #20]
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caa2:	e7e9      	b.n	800ca78 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800caa4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	4413      	add	r3, r2
}
 800caae:	4618      	mov	r0, r3
 800cab0:	371c      	adds	r7, #28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b086      	sub	sp, #24
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cad0:	d204      	bcs.n	800cadc <dir_sdi+0x22>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cadc:	2302      	movs	r3, #2
 800cade:	e063      	b.n	800cba8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <dir_sdi+0x46>
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d902      	bls.n	800cb00 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cafe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10c      	bne.n	800cb20 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	095b      	lsrs	r3, r3, #5
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	8912      	ldrh	r2, [r2, #8]
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d301      	bcc.n	800cb16 <dir_sdi+0x5c>
 800cb12:	2302      	movs	r3, #2
 800cb14:	e048      	b.n	800cba8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	61da      	str	r2, [r3, #28]
 800cb1e:	e029      	b.n	800cb74 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	895b      	ldrh	r3, [r3, #10]
 800cb24:	025b      	lsls	r3, r3, #9
 800cb26:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb28:	e019      	b.n	800cb5e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6979      	ldr	r1, [r7, #20]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff fd01 	bl	800c536 <get_fat>
 800cb34:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3c:	d101      	bne.n	800cb42 <dir_sdi+0x88>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e032      	b.n	800cba8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d904      	bls.n	800cb52 <dir_sdi+0x98>
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	695b      	ldr	r3, [r3, #20]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d301      	bcc.n	800cb56 <dir_sdi+0x9c>
 800cb52:	2302      	movs	r3, #2
 800cb54:	e028      	b.n	800cba8 <dir_sdi+0xee>
			ofs -= csz;
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d2e1      	bcs.n	800cb2a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb66:	6979      	ldr	r1, [r7, #20]
 800cb68:	6938      	ldr	r0, [r7, #16]
 800cb6a:	f7ff fcc5 	bl	800c4f8 <clust2sect>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	69db      	ldr	r3, [r3, #28]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <dir_sdi+0xcc>
 800cb82:	2302      	movs	r3, #2
 800cb84:	e010      	b.n	800cba8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	69da      	ldr	r2, [r3, #28]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	0a5b      	lsrs	r3, r3, #9
 800cb8e:	441a      	add	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba0:	441a      	add	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	3320      	adds	r3, #32
 800cbc6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	69db      	ldr	r3, [r3, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <dir_next+0x28>
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cbd6:	d301      	bcc.n	800cbdc <dir_next+0x2c>
 800cbd8:	2304      	movs	r3, #4
 800cbda:	e0aa      	b.n	800cd32 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f040 8098 	bne.w	800cd18 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	69db      	ldr	r3, [r3, #28]
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10b      	bne.n	800cc12 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	095b      	lsrs	r3, r3, #5
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	8912      	ldrh	r2, [r2, #8]
 800cc02:	4293      	cmp	r3, r2
 800cc04:	f0c0 8088 	bcc.w	800cd18 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	61da      	str	r2, [r3, #28]
 800cc0e:	2304      	movs	r3, #4
 800cc10:	e08f      	b.n	800cd32 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	0a5b      	lsrs	r3, r3, #9
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	8952      	ldrh	r2, [r2, #10]
 800cc1a:	3a01      	subs	r2, #1
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d17a      	bne.n	800cd18 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f7ff fc83 	bl	800c536 <get_fat>
 800cc30:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d801      	bhi.n	800cc3c <dir_next+0x8c>
 800cc38:	2302      	movs	r3, #2
 800cc3a:	e07a      	b.n	800cd32 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc42:	d101      	bne.n	800cc48 <dir_next+0x98>
 800cc44:	2301      	movs	r3, #1
 800cc46:	e074      	b.n	800cd32 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	695b      	ldr	r3, [r3, #20]
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d358      	bcc.n	800cd04 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	61da      	str	r2, [r3, #28]
 800cc5e:	2304      	movs	r3, #4
 800cc60:	e067      	b.n	800cd32 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	f7ff fe59 	bl	800c922 <create_chain>
 800cc70:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d101      	bne.n	800cc7c <dir_next+0xcc>
 800cc78:	2307      	movs	r3, #7
 800cc7a:	e05a      	b.n	800cd32 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d101      	bne.n	800cc86 <dir_next+0xd6>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e055      	b.n	800cd32 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8c:	d101      	bne.n	800cc92 <dir_next+0xe2>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e04f      	b.n	800cd32 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f7ff fb50 	bl	800c338 <sync_window>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <dir_next+0xf2>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e047      	b.n	800cd32 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3330      	adds	r3, #48	@ 0x30
 800cca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccaa:	2100      	movs	r1, #0
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff f97a 	bl	800bfa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	613b      	str	r3, [r7, #16]
 800ccb6:	6979      	ldr	r1, [r7, #20]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f7ff fc1d 	bl	800c4f8 <clust2sect>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ccc4:	e012      	b.n	800ccec <dir_next+0x13c>
						fs->wflag = 1;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fb33 	bl	800c338 <sync_window>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d001      	beq.n	800ccdc <dir_next+0x12c>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e02a      	b.n	800cd32 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	3301      	adds	r3, #1
 800cce0:	613b      	str	r3, [r7, #16]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	895b      	ldrh	r3, [r3, #10]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d3e6      	bcc.n	800ccc6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd0a:	6979      	ldr	r1, [r7, #20]
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f7ff fbf3 	bl	800c4f8 <clust2sect>
 800cd12:	4602      	mov	r2, r0
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2a:	441a      	add	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff feb4 	bl	800caba <dir_sdi>
 800cd52:	4603      	mov	r3, r0
 800cd54:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d12b      	bne.n	800cdb4 <dir_alloc+0x7a>
		n = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	4619      	mov	r1, r3
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f7ff fb2a 	bl	800c3c0 <move_window>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d11d      	bne.n	800cdb2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2be5      	cmp	r3, #229	@ 0xe5
 800cd7e:	d004      	beq.n	800cd8a <dir_alloc+0x50>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a1b      	ldr	r3, [r3, #32]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	613b      	str	r3, [r7, #16]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d102      	bne.n	800cd9e <dir_alloc+0x64>
 800cd98:	e00c      	b.n	800cdb4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd9e:	2101      	movs	r1, #1
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff ff05 	bl	800cbb0 <dir_next>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d0d7      	beq.n	800cd60 <dir_alloc+0x26>
 800cdb0:	e000      	b.n	800cdb4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cdb2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b04      	cmp	r3, #4
 800cdb8:	d101      	bne.n	800cdbe <dir_alloc+0x84>
 800cdba:	2307      	movs	r3, #7
 800cdbc:	75fb      	strb	r3, [r7, #23]
	return res;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	331a      	adds	r3, #26
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff f842 	bl	800be60 <ld_word>
 800cddc:	4603      	mov	r3, r0
 800cdde:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d109      	bne.n	800cdfc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	3314      	adds	r3, #20
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff f837 	bl	800be60 <ld_word>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	041b      	lsls	r3, r3, #16
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	331a      	adds	r3, #26
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	b292      	uxth	r2, r2
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff f85a 	bl	800bed6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d109      	bne.n	800ce3e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f103 0214 	add.w	r2, r3, #20
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	0c1b      	lsrs	r3, r3, #16
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	4610      	mov	r0, r2
 800ce3a:	f7ff f84c 	bl	800bed6 <st_word>
	}
}
 800ce3e:	bf00      	nop
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b086      	sub	sp, #24
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce54:	2100      	movs	r1, #0
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7ff fe2f 	bl	800caba <dir_sdi>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <dir_find+0x24>
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	e03e      	b.n	800cee8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6938      	ldr	r0, [r7, #16]
 800ce72:	f7ff faa5 	bl	800c3c0 <move_window>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d12f      	bne.n	800cee0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6a1b      	ldr	r3, [r3, #32]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d102      	bne.n	800ce94 <dir_find+0x4e>
 800ce8e:	2304      	movs	r3, #4
 800ce90:	75fb      	strb	r3, [r7, #23]
 800ce92:	e028      	b.n	800cee6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a1b      	ldr	r3, [r3, #32]
 800ce98:	330b      	adds	r3, #11
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	330b      	adds	r3, #11
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	f003 0308 	and.w	r3, r3, #8
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <dir_find+0x86>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a18      	ldr	r0, [r3, #32]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3324      	adds	r3, #36	@ 0x24
 800cebe:	220b      	movs	r2, #11
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7ff f88b 	bl	800bfdc <mem_cmp>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00b      	beq.n	800cee4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cecc:	2100      	movs	r1, #0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff fe6e 	bl	800cbb0 <dir_next>
 800ced4:	4603      	mov	r3, r0
 800ced6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0c5      	beq.n	800ce6a <dir_find+0x24>
 800cede:	e002      	b.n	800cee6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cee0:	bf00      	nop
 800cee2:	e000      	b.n	800cee6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cee4:	bf00      	nop

	return res;
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cefe:	2101      	movs	r1, #1
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff ff1a 	bl	800cd3a <dir_alloc>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d11c      	bne.n	800cf4a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	4619      	mov	r1, r3
 800cf16:	68b8      	ldr	r0, [r7, #8]
 800cf18:	f7ff fa52 	bl	800c3c0 <move_window>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d111      	bne.n	800cf4a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7ff f839 	bl	800bfa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a18      	ldr	r0, [r3, #32]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3324      	adds	r3, #36	@ 0x24
 800cf3c:	220b      	movs	r2, #11
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f7ff f810 	bl	800bf64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2201      	movs	r2, #1
 800cf48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	3324      	adds	r3, #36	@ 0x24
 800cf68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cf6a:	220b      	movs	r2, #11
 800cf6c:	2120      	movs	r1, #32
 800cf6e:	68b8      	ldr	r0, [r7, #8]
 800cf70:	f7ff f819 	bl	800bfa6 <mem_set>
	si = i = 0; ni = 8;
 800cf74:	2300      	movs	r3, #0
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	61fb      	str	r3, [r7, #28]
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	61fa      	str	r2, [r7, #28]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4413      	add	r3, r2
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cf8e:	7efb      	ldrb	r3, [r7, #27]
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	d94e      	bls.n	800d032 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cf94:	7efb      	ldrb	r3, [r7, #27]
 800cf96:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf98:	d006      	beq.n	800cfa8 <create_name+0x54>
 800cf9a:	7efb      	ldrb	r3, [r7, #27]
 800cf9c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cf9e:	d110      	bne.n	800cfc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cfa0:	e002      	b.n	800cfa8 <create_name+0x54>
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	61fb      	str	r3, [r7, #28]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	4413      	add	r3, r2
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b2f      	cmp	r3, #47	@ 0x2f
 800cfb2:	d0f6      	beq.n	800cfa2 <create_name+0x4e>
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	4413      	add	r3, r2
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2b5c      	cmp	r3, #92	@ 0x5c
 800cfbe:	d0f0      	beq.n	800cfa2 <create_name+0x4e>
			break;
 800cfc0:	e038      	b.n	800d034 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cfc2:	7efb      	ldrb	r3, [r7, #27]
 800cfc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfc6:	d003      	beq.n	800cfd0 <create_name+0x7c>
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d30c      	bcc.n	800cfea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b0b      	cmp	r3, #11
 800cfd4:	d002      	beq.n	800cfdc <create_name+0x88>
 800cfd6:	7efb      	ldrb	r3, [r7, #27]
 800cfd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfda:	d001      	beq.n	800cfe0 <create_name+0x8c>
 800cfdc:	2306      	movs	r3, #6
 800cfde:	e044      	b.n	800d06a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cfe0:	2308      	movs	r3, #8
 800cfe2:	613b      	str	r3, [r7, #16]
 800cfe4:	230b      	movs	r3, #11
 800cfe6:	617b      	str	r3, [r7, #20]
			continue;
 800cfe8:	e022      	b.n	800d030 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cfea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	da04      	bge.n	800cffc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cff2:	7efb      	ldrb	r3, [r7, #27]
 800cff4:	3b80      	subs	r3, #128	@ 0x80
 800cff6:	4a1f      	ldr	r2, [pc, #124]	@ (800d074 <create_name+0x120>)
 800cff8:	5cd3      	ldrb	r3, [r2, r3]
 800cffa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cffc:	7efb      	ldrb	r3, [r7, #27]
 800cffe:	4619      	mov	r1, r3
 800d000:	481d      	ldr	r0, [pc, #116]	@ (800d078 <create_name+0x124>)
 800d002:	f7ff f812 	bl	800c02a <chk_chr>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <create_name+0xbc>
 800d00c:	2306      	movs	r3, #6
 800d00e:	e02c      	b.n	800d06a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d010:	7efb      	ldrb	r3, [r7, #27]
 800d012:	2b60      	cmp	r3, #96	@ 0x60
 800d014:	d905      	bls.n	800d022 <create_name+0xce>
 800d016:	7efb      	ldrb	r3, [r7, #27]
 800d018:	2b7a      	cmp	r3, #122	@ 0x7a
 800d01a:	d802      	bhi.n	800d022 <create_name+0xce>
 800d01c:	7efb      	ldrb	r3, [r7, #27]
 800d01e:	3b20      	subs	r3, #32
 800d020:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	613a      	str	r2, [r7, #16]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	4413      	add	r3, r2
 800d02c:	7efa      	ldrb	r2, [r7, #27]
 800d02e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d030:	e7a6      	b.n	800cf80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d032:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	441a      	add	r2, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <create_name+0xf4>
 800d044:	2306      	movs	r3, #6
 800d046:	e010      	b.n	800d06a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2be5      	cmp	r3, #229	@ 0xe5
 800d04e:	d102      	bne.n	800d056 <create_name+0x102>
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2205      	movs	r2, #5
 800d054:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d056:	7efb      	ldrb	r3, [r7, #27]
 800d058:	2b20      	cmp	r3, #32
 800d05a:	d801      	bhi.n	800d060 <create_name+0x10c>
 800d05c:	2204      	movs	r2, #4
 800d05e:	e000      	b.n	800d062 <create_name+0x10e>
 800d060:	2200      	movs	r2, #0
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	330b      	adds	r3, #11
 800d066:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d068:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	0800ead8 	.word	0x0800ead8
 800d078:	0800ea7c 	.word	0x0800ea7c

0800d07c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d090:	e002      	b.n	800d098 <follow_path+0x1c>
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	603b      	str	r3, [r7, #0]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d09e:	d0f8      	beq.n	800d092 <follow_path+0x16>
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0a6:	d0f4      	beq.n	800d092 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b1f      	cmp	r3, #31
 800d0b4:	d80a      	bhi.n	800d0cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2280      	movs	r2, #128	@ 0x80
 800d0ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d0be:	2100      	movs	r1, #0
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7ff fcfa 	bl	800caba <dir_sdi>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	75fb      	strb	r3, [r7, #23]
 800d0ca:	e043      	b.n	800d154 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d0cc:	463b      	mov	r3, r7
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff ff3f 	bl	800cf54 <create_name>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d134      	bne.n	800d14a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff feb0 	bl	800ce46 <dir_find>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d0f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
 800d0fa:	2b04      	cmp	r3, #4
 800d0fc:	d127      	bne.n	800d14e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d0fe:	7afb      	ldrb	r3, [r7, #11]
 800d100:	f003 0304 	and.w	r3, r3, #4
 800d104:	2b00      	cmp	r3, #0
 800d106:	d122      	bne.n	800d14e <follow_path+0xd2>
 800d108:	2305      	movs	r3, #5
 800d10a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d10c:	e01f      	b.n	800d14e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d10e:	7afb      	ldrb	r3, [r7, #11]
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d11c      	bne.n	800d152 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	799b      	ldrb	r3, [r3, #6]
 800d11c:	f003 0310 	and.w	r3, r3, #16
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d124:	2305      	movs	r3, #5
 800d126:	75fb      	strb	r3, [r7, #23]
 800d128:	e014      	b.n	800d154 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	695b      	ldr	r3, [r3, #20]
 800d134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d138:	4413      	add	r3, r2
 800d13a:	4619      	mov	r1, r3
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff fe43 	bl	800cdc8 <ld_clust>
 800d142:	4602      	mov	r2, r0
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d148:	e7c0      	b.n	800d0cc <follow_path+0x50>
			if (res != FR_OK) break;
 800d14a:	bf00      	nop
 800d14c:	e002      	b.n	800d154 <follow_path+0xd8>
				break;
 800d14e:	bf00      	nop
 800d150:	e000      	b.n	800d154 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d152:	bf00      	nop
			}
		}
	}

	return res;
 800d154:	7dfb      	ldrb	r3, [r7, #23]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3718      	adds	r7, #24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d15e:	b480      	push	{r7}
 800d160:	b087      	sub	sp, #28
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d166:	f04f 33ff 	mov.w	r3, #4294967295
 800d16a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d031      	beq.n	800d1d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	e002      	b.n	800d182 <get_ldnumber+0x24>
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	3301      	adds	r3, #1
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2b20      	cmp	r3, #32
 800d188:	d903      	bls.n	800d192 <get_ldnumber+0x34>
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d190:	d1f4      	bne.n	800d17c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b3a      	cmp	r3, #58	@ 0x3a
 800d198:	d11c      	bne.n	800d1d4 <get_ldnumber+0x76>
			tp = *path;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	60fa      	str	r2, [r7, #12]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	3b30      	subs	r3, #48	@ 0x30
 800d1aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	2b09      	cmp	r3, #9
 800d1b0:	d80e      	bhi.n	800d1d0 <get_ldnumber+0x72>
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d10a      	bne.n	800d1d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d107      	bne.n	800d1d0 <get_ldnumber+0x72>
					vol = (int)i;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	e002      	b.n	800d1da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d1d8:	693b      	ldr	r3, [r7, #16]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
	...

0800d1e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	70da      	strb	r2, [r3, #3]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff f8dc 	bl	800c3c0 <move_window>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <check_fs+0x2a>
 800d20e:	2304      	movs	r3, #4
 800d210:	e038      	b.n	800d284 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3330      	adds	r3, #48	@ 0x30
 800d216:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fe20 	bl	800be60 <ld_word>
 800d220:	4603      	mov	r3, r0
 800d222:	461a      	mov	r2, r3
 800d224:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d228:	429a      	cmp	r2, r3
 800d22a:	d001      	beq.n	800d230 <check_fs+0x48>
 800d22c:	2303      	movs	r3, #3
 800d22e:	e029      	b.n	800d284 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d236:	2be9      	cmp	r3, #233	@ 0xe9
 800d238:	d009      	beq.n	800d24e <check_fs+0x66>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d240:	2beb      	cmp	r3, #235	@ 0xeb
 800d242:	d11e      	bne.n	800d282 <check_fs+0x9a>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d24a:	2b90      	cmp	r3, #144	@ 0x90
 800d24c:	d119      	bne.n	800d282 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3330      	adds	r3, #48	@ 0x30
 800d252:	3336      	adds	r3, #54	@ 0x36
 800d254:	4618      	mov	r0, r3
 800d256:	f7fe fe1b 	bl	800be90 <ld_dword>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d260:	4a0a      	ldr	r2, [pc, #40]	@ (800d28c <check_fs+0xa4>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d101      	bne.n	800d26a <check_fs+0x82>
 800d266:	2300      	movs	r3, #0
 800d268:	e00c      	b.n	800d284 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3330      	adds	r3, #48	@ 0x30
 800d26e:	3352      	adds	r3, #82	@ 0x52
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fe0d 	bl	800be90 <ld_dword>
 800d276:	4603      	mov	r3, r0
 800d278:	4a05      	ldr	r2, [pc, #20]	@ (800d290 <check_fs+0xa8>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d101      	bne.n	800d282 <check_fs+0x9a>
 800d27e:	2300      	movs	r3, #0
 800d280:	e000      	b.n	800d284 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d282:	2302      	movs	r3, #2
}
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	00544146 	.word	0x00544146
 800d290:	33544146 	.word	0x33544146

0800d294 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b096      	sub	sp, #88	@ 0x58
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff ff58 	bl	800d15e <get_ldnumber>
 800d2ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	da01      	bge.n	800d2ba <find_volume+0x26>
 800d2b6:	230b      	movs	r3, #11
 800d2b8:	e22d      	b.n	800d716 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d2ba:	4aa1      	ldr	r2, [pc, #644]	@ (800d540 <find_volume+0x2ac>)
 800d2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <find_volume+0x3a>
 800d2ca:	230c      	movs	r3, #12
 800d2cc:	e223      	b.n	800d716 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d2d4:	79fb      	ldrb	r3, [r7, #7]
 800d2d6:	f023 0301 	bic.w	r3, r3, #1
 800d2da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01a      	beq.n	800d31a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	785b      	ldrb	r3, [r3, #1]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe fd19 	bl	800bd20 <disk_status>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d2f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d2f8:	f003 0301 	and.w	r3, r3, #1
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10c      	bne.n	800d31a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <find_volume+0x82>
 800d306:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d312:	230a      	movs	r3, #10
 800d314:	e1ff      	b.n	800d716 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d316:	2300      	movs	r3, #0
 800d318:	e1fd      	b.n	800d716 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d322:	b2da      	uxtb	r2, r3
 800d324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d326:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32a:	785b      	ldrb	r3, [r3, #1]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe fd11 	bl	800bd54 <disk_initialize>
 800d332:	4603      	mov	r3, r0
 800d334:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d338:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d344:	2303      	movs	r3, #3
 800d346:	e1e6      	b.n	800d716 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <find_volume+0xca>
 800d34e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d35a:	230a      	movs	r3, #10
 800d35c:	e1db      	b.n	800d716 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d364:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d366:	f7ff ff3f 	bl	800d1e8 <check_fs>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d374:	2b02      	cmp	r3, #2
 800d376:	d149      	bne.n	800d40c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d378:	2300      	movs	r3, #0
 800d37a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d37c:	e01e      	b.n	800d3bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d386:	011b      	lsls	r3, r3, #4
 800d388:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d38c:	4413      	add	r3, r2
 800d38e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	3304      	adds	r3, #4
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d006      	beq.n	800d3a8 <find_volume+0x114>
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	3308      	adds	r3, #8
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fd76 	bl	800be90 <ld_dword>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	e000      	b.n	800d3aa <find_volume+0x116>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	3358      	adds	r3, #88	@ 0x58
 800d3b0:	443b      	add	r3, r7
 800d3b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d9dd      	bls.n	800d37e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <find_volume+0x13e>
 800d3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d3d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	3358      	adds	r3, #88	@ 0x58
 800d3d8:	443b      	add	r3, r7
 800d3da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d3de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d005      	beq.n	800d3f2 <find_volume+0x15e>
 800d3e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3ea:	f7ff fefd 	bl	800d1e8 <check_fs>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	e000      	b.n	800d3f4 <find_volume+0x160>
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d905      	bls.n	800d40c <find_volume+0x178>
 800d400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d402:	3301      	adds	r3, #1
 800d404:	643b      	str	r3, [r7, #64]	@ 0x40
 800d406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d9e2      	bls.n	800d3d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d40c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d410:	2b04      	cmp	r3, #4
 800d412:	d101      	bne.n	800d418 <find_volume+0x184>
 800d414:	2301      	movs	r3, #1
 800d416:	e17e      	b.n	800d716 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d418:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d901      	bls.n	800d424 <find_volume+0x190>
 800d420:	230d      	movs	r3, #13
 800d422:	e178      	b.n	800d716 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d426:	3330      	adds	r3, #48	@ 0x30
 800d428:	330b      	adds	r3, #11
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe fd18 	bl	800be60 <ld_word>
 800d430:	4603      	mov	r3, r0
 800d432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d436:	d001      	beq.n	800d43c <find_volume+0x1a8>
 800d438:	230d      	movs	r3, #13
 800d43a:	e16c      	b.n	800d716 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	3330      	adds	r3, #48	@ 0x30
 800d440:	3316      	adds	r3, #22
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fd0c 	bl	800be60 <ld_word>
 800d448:	4603      	mov	r3, r0
 800d44a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d44c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <find_volume+0x1cc>
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	3330      	adds	r3, #48	@ 0x30
 800d456:	3324      	adds	r3, #36	@ 0x24
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe fd19 	bl	800be90 <ld_dword>
 800d45e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d464:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	789b      	ldrb	r3, [r3, #2]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d005      	beq.n	800d484 <find_volume+0x1f0>
 800d478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47a:	789b      	ldrb	r3, [r3, #2]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d001      	beq.n	800d484 <find_volume+0x1f0>
 800d480:	230d      	movs	r3, #13
 800d482:	e148      	b.n	800d716 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d486:	789b      	ldrb	r3, [r3, #2]
 800d488:	461a      	mov	r2, r3
 800d48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48c:	fb02 f303 	mul.w	r3, r2, r3
 800d490:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d498:	461a      	mov	r2, r3
 800d49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a0:	895b      	ldrh	r3, [r3, #10]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d008      	beq.n	800d4b8 <find_volume+0x224>
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a8:	895b      	ldrh	r3, [r3, #10]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ae:	895b      	ldrh	r3, [r3, #10]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <find_volume+0x228>
 800d4b8:	230d      	movs	r3, #13
 800d4ba:	e12c      	b.n	800d716 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4be:	3330      	adds	r3, #48	@ 0x30
 800d4c0:	3311      	adds	r3, #17
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe fccc 	bl	800be60 <ld_word>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d2:	891b      	ldrh	r3, [r3, #8]
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <find_volume+0x24e>
 800d4de:	230d      	movs	r3, #13
 800d4e0:	e119      	b.n	800d716 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	3330      	adds	r3, #48	@ 0x30
 800d4e6:	3313      	adds	r3, #19
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fe fcb9 	bl	800be60 <ld_word>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d4f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <find_volume+0x272>
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fa:	3330      	adds	r3, #48	@ 0x30
 800d4fc:	3320      	adds	r3, #32
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fcc6 	bl	800be90 <ld_dword>
 800d504:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d508:	3330      	adds	r3, #48	@ 0x30
 800d50a:	330e      	adds	r3, #14
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe fca7 	bl	800be60 <ld_word>
 800d512:	4603      	mov	r3, r0
 800d514:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d516:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d101      	bne.n	800d520 <find_volume+0x28c>
 800d51c:	230d      	movs	r3, #13
 800d51e:	e0fa      	b.n	800d716 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d520:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d524:	4413      	add	r3, r2
 800d526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d528:	8912      	ldrh	r2, [r2, #8]
 800d52a:	0912      	lsrs	r2, r2, #4
 800d52c:	b292      	uxth	r2, r2
 800d52e:	4413      	add	r3, r2
 800d530:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	429a      	cmp	r2, r3
 800d538:	d204      	bcs.n	800d544 <find_volume+0x2b0>
 800d53a:	230d      	movs	r3, #13
 800d53c:	e0eb      	b.n	800d716 <find_volume+0x482>
 800d53e:	bf00      	nop
 800d540:	24000530 	.word	0x24000530
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d54c:	8952      	ldrh	r2, [r2, #10]
 800d54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d552:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <find_volume+0x2ca>
 800d55a:	230d      	movs	r3, #13
 800d55c:	e0db      	b.n	800d716 <find_volume+0x482>
		fmt = FS_FAT32;
 800d55e:	2303      	movs	r3, #3
 800d560:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d566:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d802      	bhi.n	800d574 <find_volume+0x2e0>
 800d56e:	2302      	movs	r3, #2
 800d570:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d576:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d802      	bhi.n	800d584 <find_volume+0x2f0>
 800d57e:	2301      	movs	r3, #1
 800d580:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	1c9a      	adds	r2, r3, #2
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d590:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d592:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d596:	441a      	add	r2, r3
 800d598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d59c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	441a      	add	r2, r3
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d5a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d11e      	bne.n	800d5ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b0:	3330      	adds	r3, #48	@ 0x30
 800d5b2:	332a      	adds	r3, #42	@ 0x2a
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7fe fc53 	bl	800be60 <ld_word>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <find_volume+0x330>
 800d5c0:	230d      	movs	r3, #13
 800d5c2:	e0a8      	b.n	800d716 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c6:	891b      	ldrh	r3, [r3, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d001      	beq.n	800d5d0 <find_volume+0x33c>
 800d5cc:	230d      	movs	r3, #13
 800d5ce:	e0a2      	b.n	800d716 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d2:	3330      	adds	r3, #48	@ 0x30
 800d5d4:	332c      	adds	r3, #44	@ 0x2c
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fc5a 	bl	800be90 <ld_dword>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5ea:	e01f      	b.n	800d62c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	891b      	ldrh	r3, [r3, #8]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d101      	bne.n	800d5f8 <find_volume+0x364>
 800d5f4:	230d      	movs	r3, #13
 800d5f6:	e08e      	b.n	800d716 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	6a1a      	ldr	r2, [r3, #32]
 800d5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5fe:	441a      	add	r2, r3
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d604:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d103      	bne.n	800d614 <find_volume+0x380>
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	e00a      	b.n	800d62a <find_volume+0x396>
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	695a      	ldr	r2, [r3, #20]
 800d618:	4613      	mov	r3, r2
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	4413      	add	r3, r2
 800d61e:	085a      	lsrs	r2, r3, #1
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d62a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62e:	699a      	ldr	r2, [r3, #24]
 800d630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d632:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d636:	0a5b      	lsrs	r3, r3, #9
 800d638:	429a      	cmp	r2, r3
 800d63a:	d201      	bcs.n	800d640 <find_volume+0x3ac>
 800d63c:	230d      	movs	r3, #13
 800d63e:	e06a      	b.n	800d716 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	f04f 32ff 	mov.w	r2, #4294967295
 800d646:	611a      	str	r2, [r3, #16]
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	691a      	ldr	r2, [r3, #16]
 800d64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	2280      	movs	r2, #128	@ 0x80
 800d654:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d656:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d149      	bne.n	800d6f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	3330      	adds	r3, #48	@ 0x30
 800d662:	3330      	adds	r3, #48	@ 0x30
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe fbfb 	bl	800be60 <ld_word>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d140      	bne.n	800d6f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d672:	3301      	adds	r3, #1
 800d674:	4619      	mov	r1, r3
 800d676:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d678:	f7fe fea2 	bl	800c3c0 <move_window>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d137      	bne.n	800d6f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d684:	2200      	movs	r2, #0
 800d686:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	3330      	adds	r3, #48	@ 0x30
 800d68c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d690:	4618      	mov	r0, r3
 800d692:	f7fe fbe5 	bl	800be60 <ld_word>
 800d696:	4603      	mov	r3, r0
 800d698:	461a      	mov	r2, r3
 800d69a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d127      	bne.n	800d6f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	3330      	adds	r3, #48	@ 0x30
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fbf2 	bl	800be90 <ld_dword>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	4a1c      	ldr	r2, [pc, #112]	@ (800d720 <find_volume+0x48c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d11e      	bne.n	800d6f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b6:	3330      	adds	r3, #48	@ 0x30
 800d6b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fe fbe7 	bl	800be90 <ld_dword>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	4a17      	ldr	r2, [pc, #92]	@ (800d724 <find_volume+0x490>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d113      	bne.n	800d6f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6cc:	3330      	adds	r3, #48	@ 0x30
 800d6ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe fbdc 	bl	800be90 <ld_dword>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e0:	3330      	adds	r3, #48	@ 0x30
 800d6e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fbd2 	bl	800be90 <ld_dword>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d6f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d728 <find_volume+0x494>)
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	b29a      	uxth	r2, r3
 800d702:	4b09      	ldr	r3, [pc, #36]	@ (800d728 <find_volume+0x494>)
 800d704:	801a      	strh	r2, [r3, #0]
 800d706:	4b08      	ldr	r3, [pc, #32]	@ (800d728 <find_volume+0x494>)
 800d708:	881a      	ldrh	r2, [r3, #0]
 800d70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d70e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d710:	f7fe fdee 	bl	800c2f0 <clear_lock>
#endif
	return FR_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3758      	adds	r7, #88	@ 0x58
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	41615252 	.word	0x41615252
 800d724:	61417272 	.word	0x61417272
 800d728:	24000534 	.word	0x24000534

0800d72c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d736:	2309      	movs	r3, #9
 800d738:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d01c      	beq.n	800d77a <validate+0x4e>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d018      	beq.n	800d77a <validate+0x4e>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d013      	beq.n	800d77a <validate+0x4e>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	889a      	ldrh	r2, [r3, #4]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	88db      	ldrh	r3, [r3, #6]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d10c      	bne.n	800d77a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fada 	bl	800bd20 <disk_status>
 800d76c:	4603      	mov	r3, r0
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <validate+0x4e>
			res = FR_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <validate+0x5a>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	e000      	b.n	800d788 <validate+0x5c>
 800d786:	2300      	movs	r3, #0
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	6013      	str	r3, [r2, #0]
	return res;
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d7aa:	f107 0310 	add.w	r3, r7, #16
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fcd5 	bl	800d15e <get_ldnumber>
 800d7b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	da01      	bge.n	800d7c0 <f_mount+0x28>
 800d7bc:	230b      	movs	r3, #11
 800d7be:	e02b      	b.n	800d818 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7c0:	4a17      	ldr	r2, [pc, #92]	@ (800d820 <f_mount+0x88>)
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d005      	beq.n	800d7dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d7d0:	69b8      	ldr	r0, [r7, #24]
 800d7d2:	f7fe fd8d 	bl	800c2f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	490d      	ldr	r1, [pc, #52]	@ (800d820 <f_mount+0x88>)
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d002      	beq.n	800d7fe <f_mount+0x66>
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d001      	beq.n	800d802 <f_mount+0x6a>
 800d7fe:	2300      	movs	r3, #0
 800d800:	e00a      	b.n	800d818 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d802:	f107 010c 	add.w	r1, r7, #12
 800d806:	f107 0308 	add.w	r3, r7, #8
 800d80a:	2200      	movs	r2, #0
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7ff fd41 	bl	800d294 <find_volume>
 800d812:	4603      	mov	r3, r0
 800d814:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d816:	7dfb      	ldrb	r3, [r7, #23]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3720      	adds	r7, #32
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	24000530 	.word	0x24000530

0800d824 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b098      	sub	sp, #96	@ 0x60
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <f_open+0x18>
 800d838:	2309      	movs	r3, #9
 800d83a:	e1a9      	b.n	800db90 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d83c:	79fb      	ldrb	r3, [r7, #7]
 800d83e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d842:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d844:	79fa      	ldrb	r2, [r7, #7]
 800d846:	f107 0110 	add.w	r1, r7, #16
 800d84a:	f107 0308 	add.w	r3, r7, #8
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff fd20 	bl	800d294 <find_volume>
 800d854:	4603      	mov	r3, r0
 800d856:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d85a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f040 818d 	bne.w	800db7e <f_open+0x35a>
		dj.obj.fs = fs;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	f107 0314 	add.w	r3, r7, #20
 800d86e:	4611      	mov	r1, r2
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc03 	bl	800d07c <follow_path>
 800d876:	4603      	mov	r3, r0
 800d878:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d87c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d880:	2b00      	cmp	r3, #0
 800d882:	d118      	bne.n	800d8b6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d884:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d888:	b25b      	sxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	da03      	bge.n	800d896 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d88e:	2306      	movs	r3, #6
 800d890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d894:	e00f      	b.n	800d8b6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	bf8c      	ite	hi
 800d89c:	2301      	movhi	r3, #1
 800d89e:	2300      	movls	r3, #0
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f107 0314 	add.w	r3, r7, #20
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fbd8 	bl	800c060 <chk_lock>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	f003 031c 	and.w	r3, r3, #28
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d07f      	beq.n	800d9c0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d017      	beq.n	800d8f8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d8c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	d10e      	bne.n	800d8ee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d8d0:	f7fe fc22 	bl	800c118 <enq_lock>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <f_open+0xc4>
 800d8da:	f107 0314 	add.w	r3, r7, #20
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fb06 	bl	800cef0 <dir_register>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	e000      	b.n	800d8ea <f_open+0xc6>
 800d8e8:	2312      	movs	r3, #18
 800d8ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	f043 0308 	orr.w	r3, r3, #8
 800d8f4:	71fb      	strb	r3, [r7, #7]
 800d8f6:	e010      	b.n	800d91a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d8f8:	7ebb      	ldrb	r3, [r7, #26]
 800d8fa:	f003 0311 	and.w	r3, r3, #17
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <f_open+0xe6>
					res = FR_DENIED;
 800d902:	2307      	movs	r3, #7
 800d904:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d908:	e007      	b.n	800d91a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <f_open+0xf6>
 800d914:	2308      	movs	r3, #8
 800d916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d91a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d168      	bne.n	800d9f4 <f_open+0x1d0>
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d063      	beq.n	800d9f4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d92c:	f7fd fca4 	bl	800b278 <get_fattime>
 800d930:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d934:	330e      	adds	r3, #14
 800d936:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe fae7 	bl	800bf0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d940:	3316      	adds	r3, #22
 800d942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fae1 	bl	800bf0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	330b      	adds	r3, #11
 800d94e:	2220      	movs	r2, #32
 800d950:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d956:	4611      	mov	r1, r2
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fa35 	bl	800cdc8 <ld_clust>
 800d95e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d964:	2200      	movs	r2, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff fa4d 	bl	800ce06 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96e:	331c      	adds	r3, #28
 800d970:	2100      	movs	r1, #0
 800d972:	4618      	mov	r0, r3
 800d974:	f7fe faca 	bl	800bf0c <st_dword>
					fs->wflag = 1;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	2201      	movs	r2, #1
 800d97c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d980:	2b00      	cmp	r3, #0
 800d982:	d037      	beq.n	800d9f4 <f_open+0x1d0>
						dw = fs->winsect;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d988:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d98a:	f107 0314 	add.w	r3, r7, #20
 800d98e:	2200      	movs	r2, #0
 800d990:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe ff60 	bl	800c858 <remove_chain>
 800d998:	4603      	mov	r3, r0
 800d99a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d99e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d126      	bne.n	800d9f4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fe fd08 	bl	800c3c0 <move_window>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9ba:	3a01      	subs	r2, #1
 800d9bc:	60da      	str	r2, [r3, #12]
 800d9be:	e019      	b.n	800d9f4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d115      	bne.n	800d9f4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d9c8:	7ebb      	ldrb	r3, [r7, #26]
 800d9ca:	f003 0310 	and.w	r3, r3, #16
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d003      	beq.n	800d9da <f_open+0x1b6>
					res = FR_NO_FILE;
 800d9d2:	2304      	movs	r3, #4
 800d9d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d9d8:	e00c      	b.n	800d9f4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d9da:	79fb      	ldrb	r3, [r7, #7]
 800d9dc:	f003 0302 	and.w	r3, r3, #2
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d007      	beq.n	800d9f4 <f_open+0x1d0>
 800d9e4:	7ebb      	ldrb	r3, [r7, #26]
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <f_open+0x1d0>
						res = FR_DENIED;
 800d9ee:	2307      	movs	r3, #7
 800d9f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d126      	bne.n	800da4a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	f003 0308 	and.w	r3, r3, #8
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800da16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	bf8c      	ite	hi
 800da22:	2301      	movhi	r3, #1
 800da24:	2300      	movls	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	f107 0314 	add.w	r3, r7, #20
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fb93 	bl	800c15c <inc_lock>
 800da36:	4602      	mov	r2, r0
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <f_open+0x226>
 800da44:	2302      	movs	r3, #2
 800da46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f040 8095 	bne.w	800db7e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da58:	4611      	mov	r1, r2
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff f9b4 	bl	800cdc8 <ld_clust>
 800da60:	4602      	mov	r2, r0
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	331c      	adds	r3, #28
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fa10 	bl	800be90 <ld_dword>
 800da70:	4602      	mov	r2, r0
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	88da      	ldrh	r2, [r3, #6]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	79fa      	ldrb	r2, [r7, #7]
 800da8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3330      	adds	r3, #48	@ 0x30
 800daa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daaa:	2100      	movs	r1, #0
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fa7a 	bl	800bfa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	f003 0320 	and.w	r3, r3, #32
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d060      	beq.n	800db7e <f_open+0x35a>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d05c      	beq.n	800db7e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	68da      	ldr	r2, [r3, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	895b      	ldrh	r3, [r3, #10]
 800dad0:	025b      	lsls	r3, r3, #9
 800dad2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	657b      	str	r3, [r7, #84]	@ 0x54
 800dae0:	e016      	b.n	800db10 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe fd25 	bl	800c536 <get_fat>
 800daec:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800daee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d802      	bhi.n	800dafa <f_open+0x2d6>
 800daf4:	2302      	movs	r3, #2
 800daf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dafa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db00:	d102      	bne.n	800db08 <f_open+0x2e4>
 800db02:	2301      	movs	r3, #1
 800db04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800db10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <f_open+0x2fc>
 800db18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d8e0      	bhi.n	800dae2 <f_open+0x2be>
				}
				fp->clust = clst;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d127      	bne.n	800db7e <f_open+0x35a>
 800db2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db34:	2b00      	cmp	r3, #0
 800db36:	d022      	beq.n	800db7e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fcdb 	bl	800c4f8 <clust2sect>
 800db42:	6478      	str	r0, [r7, #68]	@ 0x44
 800db44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db46:	2b00      	cmp	r3, #0
 800db48:	d103      	bne.n	800db52 <f_open+0x32e>
						res = FR_INT_ERR;
 800db4a:	2302      	movs	r3, #2
 800db4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db50:	e015      	b.n	800db7e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db54:	0a5a      	lsrs	r2, r3, #9
 800db56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db58:	441a      	add	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	7858      	ldrb	r0, [r3, #1]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a1a      	ldr	r2, [r3, #32]
 800db6c:	2301      	movs	r3, #1
 800db6e:	f7fe f919 	bl	800bda4 <disk_read>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <f_open+0x35a>
 800db78:	2301      	movs	r3, #1
 800db7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <f_open+0x368>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800db90:	4618      	mov	r0, r3
 800db92:	3760      	adds	r7, #96	@ 0x60
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b08e      	sub	sp, #56	@ 0x38
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
 800dba4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f107 0214 	add.w	r2, r7, #20
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fdb7 	bl	800d72c <validate>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d107      	bne.n	800dbdc <f_read+0x44>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	7d5b      	ldrb	r3, [r3, #21]
 800dbd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dbd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <f_read+0x4a>
 800dbdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbe0:	e115      	b.n	800de0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	7d1b      	ldrb	r3, [r3, #20]
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <f_read+0x5a>
 800dbee:	2307      	movs	r3, #7
 800dbf0:	e10d      	b.n	800de0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	f240 80fe 	bls.w	800de04 <f_read+0x26c>
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dc0c:	e0fa      	b.n	800de04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f040 80c6 	bne.w	800dda8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	0a5b      	lsrs	r3, r3, #9
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	8952      	ldrh	r2, [r2, #10]
 800dc26:	3a01      	subs	r2, #1
 800dc28:	4013      	ands	r3, r2
 800dc2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d12f      	bne.n	800dc92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d103      	bne.n	800dc42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc40:	e013      	b.n	800dc6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d007      	beq.n	800dc5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7fe fefe 	bl	800ca52 <clmt_clust>
 800dc56:	6338      	str	r0, [r7, #48]	@ 0x30
 800dc58:	e007      	b.n	800dc6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	69db      	ldr	r3, [r3, #28]
 800dc60:	4619      	mov	r1, r3
 800dc62:	4610      	mov	r0, r2
 800dc64:	f7fe fc67 	bl	800c536 <get_fat>
 800dc68:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d804      	bhi.n	800dc7a <f_read+0xe2>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2202      	movs	r2, #2
 800dc74:	755a      	strb	r2, [r3, #21]
 800dc76:	2302      	movs	r3, #2
 800dc78:	e0c9      	b.n	800de0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc80:	d104      	bne.n	800dc8c <f_read+0xf4>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2201      	movs	r2, #1
 800dc86:	755a      	strb	r2, [r3, #21]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e0c0      	b.n	800de0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dc92:	697a      	ldr	r2, [r7, #20]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe fc2c 	bl	800c4f8 <clust2sect>
 800dca0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <f_read+0x11a>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	755a      	strb	r2, [r3, #21]
 800dcae:	2302      	movs	r3, #2
 800dcb0:	e0ad      	b.n	800de0e <f_read+0x276>
			sect += csect;
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	0a5b      	lsrs	r3, r3, #9
 800dcbe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d039      	beq.n	800dd3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	4413      	add	r3, r2
 800dccc:	697a      	ldr	r2, [r7, #20]
 800dcce:	8952      	ldrh	r2, [r2, #10]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d905      	bls.n	800dce0 <f_read+0x148>
					cc = fs->csize - csect;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	895b      	ldrh	r3, [r3, #10]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	7858      	ldrb	r0, [r3, #1]
 800dce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcea:	f7fe f85b 	bl	800bda4 <disk_read>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d004      	beq.n	800dcfe <f_read+0x166>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	755a      	strb	r2, [r3, #21]
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e087      	b.n	800de0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	7d1b      	ldrb	r3, [r3, #20]
 800dd02:	b25b      	sxtb	r3, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da14      	bge.n	800dd32 <f_read+0x19a>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6a1a      	ldr	r2, [r3, #32]
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d90d      	bls.n	800dd32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1a      	ldr	r2, [r3, #32]
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	025b      	lsls	r3, r3, #9
 800dd20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd22:	18d0      	adds	r0, r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3330      	adds	r3, #48	@ 0x30
 800dd28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	f7fe f919 	bl	800bf64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd34:	025b      	lsls	r3, r3, #9
 800dd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dd38:	e050      	b.n	800dddc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	69ba      	ldr	r2, [r7, #24]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d02e      	beq.n	800dda2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	b25b      	sxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da18      	bge.n	800dd80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	7858      	ldrb	r0, [r3, #1]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6a1a      	ldr	r2, [r3, #32]
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	f7fe f841 	bl	800bde4 <disk_write>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <f_read+0x1da>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	755a      	strb	r2, [r3, #21]
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e04d      	b.n	800de0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
 800dd76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	7858      	ldrb	r0, [r3, #1]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	69ba      	ldr	r2, [r7, #24]
 800dd8e:	f7fe f809 	bl	800bda4 <disk_read>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <f_read+0x20a>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	755a      	strb	r2, [r3, #21]
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e035      	b.n	800de0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	69ba      	ldr	r2, [r7, #24]
 800dda6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ddb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ddb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d901      	bls.n	800ddc2 <f_read+0x22a>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddd0:	4413      	add	r3, r2
 800ddd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddd8:	f7fe f8c4 	bl	800bf64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde0:	4413      	add	r3, r2
 800dde2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	699a      	ldr	r2, [r3, #24]
 800dde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddea:	441a      	add	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	619a      	str	r2, [r3, #24]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf6:	441a      	add	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f47f af01 	bne.w	800dc0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3738      	adds	r7, #56	@ 0x38
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b086      	sub	sp, #24
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f107 0208 	add.w	r2, r7, #8
 800de24:	4611      	mov	r1, r2
 800de26:	4618      	mov	r0, r3
 800de28:	f7ff fc80 	bl	800d72c <validate>
 800de2c:	4603      	mov	r3, r0
 800de2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de30:	7dfb      	ldrb	r3, [r7, #23]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d168      	bne.n	800df08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	7d1b      	ldrb	r3, [r3, #20]
 800de3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d062      	beq.n	800df08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	7d1b      	ldrb	r3, [r3, #20]
 800de46:	b25b      	sxtb	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	da15      	bge.n	800de78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	7858      	ldrb	r0, [r3, #1]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a1a      	ldr	r2, [r3, #32]
 800de5a:	2301      	movs	r3, #1
 800de5c:	f7fd ffc2 	bl	800bde4 <disk_write>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <f_sync+0x54>
 800de66:	2301      	movs	r3, #1
 800de68:	e04f      	b.n	800df0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	7d1b      	ldrb	r3, [r3, #20]
 800de6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de72:	b2da      	uxtb	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800de78:	f7fd f9fe 	bl	800b278 <get_fattime>
 800de7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de84:	4619      	mov	r1, r3
 800de86:	4610      	mov	r0, r2
 800de88:	f7fe fa9a 	bl	800c3c0 <move_window>
 800de8c:	4603      	mov	r3, r0
 800de8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d138      	bne.n	800df08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	330b      	adds	r3, #11
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	330b      	adds	r3, #11
 800dea6:	f042 0220 	orr.w	r2, r2, #32
 800deaa:	b2d2      	uxtb	r2, r2
 800deac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6818      	ldr	r0, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	461a      	mov	r2, r3
 800deb8:	68f9      	ldr	r1, [r7, #12]
 800deba:	f7fe ffa4 	bl	800ce06 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f103 021c 	add.w	r2, r3, #28
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f7fe f81e 	bl	800bf0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3316      	adds	r3, #22
 800ded4:	6939      	ldr	r1, [r7, #16]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe f818 	bl	800bf0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3312      	adds	r3, #18
 800dee0:	2100      	movs	r1, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fff7 	bl	800bed6 <st_word>
					fs->wflag = 1;
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2201      	movs	r2, #1
 800deec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fa93 	bl	800c41c <sync_fs>
 800def6:	4603      	mov	r3, r0
 800def8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d1b      	ldrb	r3, [r3, #20]
 800defe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df02:	b2da      	uxtb	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800df08:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff ff7b 	bl	800de16 <f_sync>
 800df20:	4603      	mov	r3, r0
 800df22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d118      	bne.n	800df5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f107 0208 	add.w	r2, r7, #8
 800df30:	4611      	mov	r1, r2
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fbfa 	bl	800d72c <validate>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d10c      	bne.n	800df5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe f996 	bl	800c278 <dec_lock>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df68:	b480      	push	{r7}
 800df6a:	b087      	sub	sp, #28
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	4613      	mov	r3, r2
 800df74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df76:	2301      	movs	r3, #1
 800df78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df7e:	4b1f      	ldr	r3, [pc, #124]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800df80:	7a5b      	ldrb	r3, [r3, #9]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b00      	cmp	r3, #0
 800df86:	d131      	bne.n	800dfec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df88:	4b1c      	ldr	r3, [pc, #112]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800df8a:	7a5b      	ldrb	r3, [r3, #9]
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	461a      	mov	r2, r3
 800df90:	4b1a      	ldr	r3, [pc, #104]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800df92:	2100      	movs	r1, #0
 800df94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df96:	4b19      	ldr	r3, [pc, #100]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800df98:	7a5b      	ldrb	r3, [r3, #9]
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	4a17      	ldr	r2, [pc, #92]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dfa6:	4b15      	ldr	r3, [pc, #84]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800dfa8:	7a5b      	ldrb	r3, [r3, #9]
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	461a      	mov	r2, r3
 800dfae:	4b13      	ldr	r3, [pc, #76]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800dfb0:	4413      	add	r3, r2
 800dfb2:	79fa      	ldrb	r2, [r7, #7]
 800dfb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dfb6:	4b11      	ldr	r3, [pc, #68]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800dfb8:	7a5b      	ldrb	r3, [r3, #9]
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	b2d1      	uxtb	r1, r2
 800dfc0:	4a0e      	ldr	r2, [pc, #56]	@ (800dffc <FATFS_LinkDriverEx+0x94>)
 800dfc2:	7251      	strb	r1, [r2, #9]
 800dfc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dfc6:	7dbb      	ldrb	r3, [r7, #22]
 800dfc8:	3330      	adds	r3, #48	@ 0x30
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	223a      	movs	r2, #58	@ 0x3a
 800dfd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	3302      	adds	r3, #2
 800dfdc:	222f      	movs	r2, #47	@ 0x2f
 800dfde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	3303      	adds	r3, #3
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	371c      	adds	r7, #28
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	24000558 	.word	0x24000558

0800e000 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e00a:	2200      	movs	r2, #0
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff ffaa 	bl	800df68 <FATFS_LinkDriverEx>
 800e014:	4603      	mov	r3, r0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
	...

0800e020 <siprintf>:
 800e020:	b40e      	push	{r1, r2, r3}
 800e022:	b500      	push	{lr}
 800e024:	b09c      	sub	sp, #112	@ 0x70
 800e026:	ab1d      	add	r3, sp, #116	@ 0x74
 800e028:	9002      	str	r0, [sp, #8]
 800e02a:	9006      	str	r0, [sp, #24]
 800e02c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e030:	4809      	ldr	r0, [pc, #36]	@ (800e058 <siprintf+0x38>)
 800e032:	9107      	str	r1, [sp, #28]
 800e034:	9104      	str	r1, [sp, #16]
 800e036:	4909      	ldr	r1, [pc, #36]	@ (800e05c <siprintf+0x3c>)
 800e038:	f853 2b04 	ldr.w	r2, [r3], #4
 800e03c:	9105      	str	r1, [sp, #20]
 800e03e:	6800      	ldr	r0, [r0, #0]
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	a902      	add	r1, sp, #8
 800e044:	f000 f9a2 	bl	800e38c <_svfiprintf_r>
 800e048:	9b02      	ldr	r3, [sp, #8]
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	b01c      	add	sp, #112	@ 0x70
 800e050:	f85d eb04 	ldr.w	lr, [sp], #4
 800e054:	b003      	add	sp, #12
 800e056:	4770      	bx	lr
 800e058:	2400002c 	.word	0x2400002c
 800e05c:	ffff0208 	.word	0xffff0208

0800e060 <memset>:
 800e060:	4402      	add	r2, r0
 800e062:	4603      	mov	r3, r0
 800e064:	4293      	cmp	r3, r2
 800e066:	d100      	bne.n	800e06a <memset+0xa>
 800e068:	4770      	bx	lr
 800e06a:	f803 1b01 	strb.w	r1, [r3], #1
 800e06e:	e7f9      	b.n	800e064 <memset+0x4>

0800e070 <__errno>:
 800e070:	4b01      	ldr	r3, [pc, #4]	@ (800e078 <__errno+0x8>)
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	2400002c 	.word	0x2400002c

0800e07c <__libc_init_array>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4d0d      	ldr	r5, [pc, #52]	@ (800e0b4 <__libc_init_array+0x38>)
 800e080:	4c0d      	ldr	r4, [pc, #52]	@ (800e0b8 <__libc_init_array+0x3c>)
 800e082:	1b64      	subs	r4, r4, r5
 800e084:	10a4      	asrs	r4, r4, #2
 800e086:	2600      	movs	r6, #0
 800e088:	42a6      	cmp	r6, r4
 800e08a:	d109      	bne.n	800e0a0 <__libc_init_array+0x24>
 800e08c:	4d0b      	ldr	r5, [pc, #44]	@ (800e0bc <__libc_init_array+0x40>)
 800e08e:	4c0c      	ldr	r4, [pc, #48]	@ (800e0c0 <__libc_init_array+0x44>)
 800e090:	f000 fc66 	bl	800e960 <_init>
 800e094:	1b64      	subs	r4, r4, r5
 800e096:	10a4      	asrs	r4, r4, #2
 800e098:	2600      	movs	r6, #0
 800e09a:	42a6      	cmp	r6, r4
 800e09c:	d105      	bne.n	800e0aa <__libc_init_array+0x2e>
 800e09e:	bd70      	pop	{r4, r5, r6, pc}
 800e0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0a4:	4798      	blx	r3
 800e0a6:	3601      	adds	r6, #1
 800e0a8:	e7ee      	b.n	800e088 <__libc_init_array+0xc>
 800e0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ae:	4798      	blx	r3
 800e0b0:	3601      	adds	r6, #1
 800e0b2:	e7f2      	b.n	800e09a <__libc_init_array+0x1e>
 800e0b4:	0800eb94 	.word	0x0800eb94
 800e0b8:	0800eb94 	.word	0x0800eb94
 800e0bc:	0800eb94 	.word	0x0800eb94
 800e0c0:	0800eb98 	.word	0x0800eb98

0800e0c4 <__retarget_lock_acquire_recursive>:
 800e0c4:	4770      	bx	lr

0800e0c6 <__retarget_lock_release_recursive>:
 800e0c6:	4770      	bx	lr

0800e0c8 <memcpy>:
 800e0c8:	440a      	add	r2, r1
 800e0ca:	4291      	cmp	r1, r2
 800e0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0d0:	d100      	bne.n	800e0d4 <memcpy+0xc>
 800e0d2:	4770      	bx	lr
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0de:	4291      	cmp	r1, r2
 800e0e0:	d1f9      	bne.n	800e0d6 <memcpy+0xe>
 800e0e2:	bd10      	pop	{r4, pc}

0800e0e4 <_free_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	2900      	cmp	r1, #0
 800e0ea:	d041      	beq.n	800e170 <_free_r+0x8c>
 800e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f0:	1f0c      	subs	r4, r1, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bfb8      	it	lt
 800e0f6:	18e4      	addlt	r4, r4, r3
 800e0f8:	f000 f8e0 	bl	800e2bc <__malloc_lock>
 800e0fc:	4a1d      	ldr	r2, [pc, #116]	@ (800e174 <_free_r+0x90>)
 800e0fe:	6813      	ldr	r3, [r2, #0]
 800e100:	b933      	cbnz	r3, 800e110 <_free_r+0x2c>
 800e102:	6063      	str	r3, [r4, #4]
 800e104:	6014      	str	r4, [r2, #0]
 800e106:	4628      	mov	r0, r5
 800e108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e10c:	f000 b8dc 	b.w	800e2c8 <__malloc_unlock>
 800e110:	42a3      	cmp	r3, r4
 800e112:	d908      	bls.n	800e126 <_free_r+0x42>
 800e114:	6820      	ldr	r0, [r4, #0]
 800e116:	1821      	adds	r1, r4, r0
 800e118:	428b      	cmp	r3, r1
 800e11a:	bf01      	itttt	eq
 800e11c:	6819      	ldreq	r1, [r3, #0]
 800e11e:	685b      	ldreq	r3, [r3, #4]
 800e120:	1809      	addeq	r1, r1, r0
 800e122:	6021      	streq	r1, [r4, #0]
 800e124:	e7ed      	b.n	800e102 <_free_r+0x1e>
 800e126:	461a      	mov	r2, r3
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	b10b      	cbz	r3, 800e130 <_free_r+0x4c>
 800e12c:	42a3      	cmp	r3, r4
 800e12e:	d9fa      	bls.n	800e126 <_free_r+0x42>
 800e130:	6811      	ldr	r1, [r2, #0]
 800e132:	1850      	adds	r0, r2, r1
 800e134:	42a0      	cmp	r0, r4
 800e136:	d10b      	bne.n	800e150 <_free_r+0x6c>
 800e138:	6820      	ldr	r0, [r4, #0]
 800e13a:	4401      	add	r1, r0
 800e13c:	1850      	adds	r0, r2, r1
 800e13e:	4283      	cmp	r3, r0
 800e140:	6011      	str	r1, [r2, #0]
 800e142:	d1e0      	bne.n	800e106 <_free_r+0x22>
 800e144:	6818      	ldr	r0, [r3, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	6053      	str	r3, [r2, #4]
 800e14a:	4408      	add	r0, r1
 800e14c:	6010      	str	r0, [r2, #0]
 800e14e:	e7da      	b.n	800e106 <_free_r+0x22>
 800e150:	d902      	bls.n	800e158 <_free_r+0x74>
 800e152:	230c      	movs	r3, #12
 800e154:	602b      	str	r3, [r5, #0]
 800e156:	e7d6      	b.n	800e106 <_free_r+0x22>
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	1821      	adds	r1, r4, r0
 800e15c:	428b      	cmp	r3, r1
 800e15e:	bf04      	itt	eq
 800e160:	6819      	ldreq	r1, [r3, #0]
 800e162:	685b      	ldreq	r3, [r3, #4]
 800e164:	6063      	str	r3, [r4, #4]
 800e166:	bf04      	itt	eq
 800e168:	1809      	addeq	r1, r1, r0
 800e16a:	6021      	streq	r1, [r4, #0]
 800e16c:	6054      	str	r4, [r2, #4]
 800e16e:	e7ca      	b.n	800e106 <_free_r+0x22>
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	240006a8 	.word	0x240006a8

0800e178 <sbrk_aligned>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1b8 <sbrk_aligned+0x40>)
 800e17c:	460c      	mov	r4, r1
 800e17e:	6831      	ldr	r1, [r6, #0]
 800e180:	4605      	mov	r5, r0
 800e182:	b911      	cbnz	r1, 800e18a <sbrk_aligned+0x12>
 800e184:	f000 fba6 	bl	800e8d4 <_sbrk_r>
 800e188:	6030      	str	r0, [r6, #0]
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 fba1 	bl	800e8d4 <_sbrk_r>
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	d103      	bne.n	800e19e <sbrk_aligned+0x26>
 800e196:	f04f 34ff 	mov.w	r4, #4294967295
 800e19a:	4620      	mov	r0, r4
 800e19c:	bd70      	pop	{r4, r5, r6, pc}
 800e19e:	1cc4      	adds	r4, r0, #3
 800e1a0:	f024 0403 	bic.w	r4, r4, #3
 800e1a4:	42a0      	cmp	r0, r4
 800e1a6:	d0f8      	beq.n	800e19a <sbrk_aligned+0x22>
 800e1a8:	1a21      	subs	r1, r4, r0
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f000 fb92 	bl	800e8d4 <_sbrk_r>
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	d1f2      	bne.n	800e19a <sbrk_aligned+0x22>
 800e1b4:	e7ef      	b.n	800e196 <sbrk_aligned+0x1e>
 800e1b6:	bf00      	nop
 800e1b8:	240006a4 	.word	0x240006a4

0800e1bc <_malloc_r>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	1ccd      	adds	r5, r1, #3
 800e1c2:	f025 0503 	bic.w	r5, r5, #3
 800e1c6:	3508      	adds	r5, #8
 800e1c8:	2d0c      	cmp	r5, #12
 800e1ca:	bf38      	it	cc
 800e1cc:	250c      	movcc	r5, #12
 800e1ce:	2d00      	cmp	r5, #0
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	db01      	blt.n	800e1d8 <_malloc_r+0x1c>
 800e1d4:	42a9      	cmp	r1, r5
 800e1d6:	d904      	bls.n	800e1e2 <_malloc_r+0x26>
 800e1d8:	230c      	movs	r3, #12
 800e1da:	6033      	str	r3, [r6, #0]
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2b8 <_malloc_r+0xfc>
 800e1e6:	f000 f869 	bl	800e2bc <__malloc_lock>
 800e1ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	bb44      	cbnz	r4, 800e244 <_malloc_r+0x88>
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	f7ff ffbf 	bl	800e178 <sbrk_aligned>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	d158      	bne.n	800e2b2 <_malloc_r+0xf6>
 800e200:	f8d8 4000 	ldr.w	r4, [r8]
 800e204:	4627      	mov	r7, r4
 800e206:	2f00      	cmp	r7, #0
 800e208:	d143      	bne.n	800e292 <_malloc_r+0xd6>
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	d04b      	beq.n	800e2a6 <_malloc_r+0xea>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	4639      	mov	r1, r7
 800e212:	4630      	mov	r0, r6
 800e214:	eb04 0903 	add.w	r9, r4, r3
 800e218:	f000 fb5c 	bl	800e8d4 <_sbrk_r>
 800e21c:	4581      	cmp	r9, r0
 800e21e:	d142      	bne.n	800e2a6 <_malloc_r+0xea>
 800e220:	6821      	ldr	r1, [r4, #0]
 800e222:	1a6d      	subs	r5, r5, r1
 800e224:	4629      	mov	r1, r5
 800e226:	4630      	mov	r0, r6
 800e228:	f7ff ffa6 	bl	800e178 <sbrk_aligned>
 800e22c:	3001      	adds	r0, #1
 800e22e:	d03a      	beq.n	800e2a6 <_malloc_r+0xea>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	442b      	add	r3, r5
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	f8d8 3000 	ldr.w	r3, [r8]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	bb62      	cbnz	r2, 800e298 <_malloc_r+0xdc>
 800e23e:	f8c8 7000 	str.w	r7, [r8]
 800e242:	e00f      	b.n	800e264 <_malloc_r+0xa8>
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	1b52      	subs	r2, r2, r5
 800e248:	d420      	bmi.n	800e28c <_malloc_r+0xd0>
 800e24a:	2a0b      	cmp	r2, #11
 800e24c:	d917      	bls.n	800e27e <_malloc_r+0xc2>
 800e24e:	1961      	adds	r1, r4, r5
 800e250:	42a3      	cmp	r3, r4
 800e252:	6025      	str	r5, [r4, #0]
 800e254:	bf18      	it	ne
 800e256:	6059      	strne	r1, [r3, #4]
 800e258:	6863      	ldr	r3, [r4, #4]
 800e25a:	bf08      	it	eq
 800e25c:	f8c8 1000 	streq.w	r1, [r8]
 800e260:	5162      	str	r2, [r4, r5]
 800e262:	604b      	str	r3, [r1, #4]
 800e264:	4630      	mov	r0, r6
 800e266:	f000 f82f 	bl	800e2c8 <__malloc_unlock>
 800e26a:	f104 000b 	add.w	r0, r4, #11
 800e26e:	1d23      	adds	r3, r4, #4
 800e270:	f020 0007 	bic.w	r0, r0, #7
 800e274:	1ac2      	subs	r2, r0, r3
 800e276:	bf1c      	itt	ne
 800e278:	1a1b      	subne	r3, r3, r0
 800e27a:	50a3      	strne	r3, [r4, r2]
 800e27c:	e7af      	b.n	800e1de <_malloc_r+0x22>
 800e27e:	6862      	ldr	r2, [r4, #4]
 800e280:	42a3      	cmp	r3, r4
 800e282:	bf0c      	ite	eq
 800e284:	f8c8 2000 	streq.w	r2, [r8]
 800e288:	605a      	strne	r2, [r3, #4]
 800e28a:	e7eb      	b.n	800e264 <_malloc_r+0xa8>
 800e28c:	4623      	mov	r3, r4
 800e28e:	6864      	ldr	r4, [r4, #4]
 800e290:	e7ae      	b.n	800e1f0 <_malloc_r+0x34>
 800e292:	463c      	mov	r4, r7
 800e294:	687f      	ldr	r7, [r7, #4]
 800e296:	e7b6      	b.n	800e206 <_malloc_r+0x4a>
 800e298:	461a      	mov	r2, r3
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	d1fb      	bne.n	800e298 <_malloc_r+0xdc>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	6053      	str	r3, [r2, #4]
 800e2a4:	e7de      	b.n	800e264 <_malloc_r+0xa8>
 800e2a6:	230c      	movs	r3, #12
 800e2a8:	6033      	str	r3, [r6, #0]
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f000 f80c 	bl	800e2c8 <__malloc_unlock>
 800e2b0:	e794      	b.n	800e1dc <_malloc_r+0x20>
 800e2b2:	6005      	str	r5, [r0, #0]
 800e2b4:	e7d6      	b.n	800e264 <_malloc_r+0xa8>
 800e2b6:	bf00      	nop
 800e2b8:	240006a8 	.word	0x240006a8

0800e2bc <__malloc_lock>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	@ (800e2c4 <__malloc_lock+0x8>)
 800e2be:	f7ff bf01 	b.w	800e0c4 <__retarget_lock_acquire_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	240006a0 	.word	0x240006a0

0800e2c8 <__malloc_unlock>:
 800e2c8:	4801      	ldr	r0, [pc, #4]	@ (800e2d0 <__malloc_unlock+0x8>)
 800e2ca:	f7ff befc 	b.w	800e0c6 <__retarget_lock_release_recursive>
 800e2ce:	bf00      	nop
 800e2d0:	240006a0 	.word	0x240006a0

0800e2d4 <__ssputs_r>:
 800e2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	688e      	ldr	r6, [r1, #8]
 800e2da:	461f      	mov	r7, r3
 800e2dc:	42be      	cmp	r6, r7
 800e2de:	680b      	ldr	r3, [r1, #0]
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	4690      	mov	r8, r2
 800e2e6:	d82d      	bhi.n	800e344 <__ssputs_r+0x70>
 800e2e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2f0:	d026      	beq.n	800e340 <__ssputs_r+0x6c>
 800e2f2:	6965      	ldr	r5, [r4, #20]
 800e2f4:	6909      	ldr	r1, [r1, #16]
 800e2f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2fa:	eba3 0901 	sub.w	r9, r3, r1
 800e2fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e302:	1c7b      	adds	r3, r7, #1
 800e304:	444b      	add	r3, r9
 800e306:	106d      	asrs	r5, r5, #1
 800e308:	429d      	cmp	r5, r3
 800e30a:	bf38      	it	cc
 800e30c:	461d      	movcc	r5, r3
 800e30e:	0553      	lsls	r3, r2, #21
 800e310:	d527      	bpl.n	800e362 <__ssputs_r+0x8e>
 800e312:	4629      	mov	r1, r5
 800e314:	f7ff ff52 	bl	800e1bc <_malloc_r>
 800e318:	4606      	mov	r6, r0
 800e31a:	b360      	cbz	r0, 800e376 <__ssputs_r+0xa2>
 800e31c:	6921      	ldr	r1, [r4, #16]
 800e31e:	464a      	mov	r2, r9
 800e320:	f7ff fed2 	bl	800e0c8 <memcpy>
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e32e:	81a3      	strh	r3, [r4, #12]
 800e330:	6126      	str	r6, [r4, #16]
 800e332:	6165      	str	r5, [r4, #20]
 800e334:	444e      	add	r6, r9
 800e336:	eba5 0509 	sub.w	r5, r5, r9
 800e33a:	6026      	str	r6, [r4, #0]
 800e33c:	60a5      	str	r5, [r4, #8]
 800e33e:	463e      	mov	r6, r7
 800e340:	42be      	cmp	r6, r7
 800e342:	d900      	bls.n	800e346 <__ssputs_r+0x72>
 800e344:	463e      	mov	r6, r7
 800e346:	6820      	ldr	r0, [r4, #0]
 800e348:	4632      	mov	r2, r6
 800e34a:	4641      	mov	r1, r8
 800e34c:	f000 faa8 	bl	800e8a0 <memmove>
 800e350:	68a3      	ldr	r3, [r4, #8]
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	4433      	add	r3, r6
 800e35a:	6023      	str	r3, [r4, #0]
 800e35c:	2000      	movs	r0, #0
 800e35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e362:	462a      	mov	r2, r5
 800e364:	f000 fac6 	bl	800e8f4 <_realloc_r>
 800e368:	4606      	mov	r6, r0
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d1e0      	bne.n	800e330 <__ssputs_r+0x5c>
 800e36e:	6921      	ldr	r1, [r4, #16]
 800e370:	4650      	mov	r0, sl
 800e372:	f7ff feb7 	bl	800e0e4 <_free_r>
 800e376:	230c      	movs	r3, #12
 800e378:	f8ca 3000 	str.w	r3, [sl]
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	e7e9      	b.n	800e35e <__ssputs_r+0x8a>
	...

0800e38c <_svfiprintf_r>:
 800e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e390:	4698      	mov	r8, r3
 800e392:	898b      	ldrh	r3, [r1, #12]
 800e394:	061b      	lsls	r3, r3, #24
 800e396:	b09d      	sub	sp, #116	@ 0x74
 800e398:	4607      	mov	r7, r0
 800e39a:	460d      	mov	r5, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	d510      	bpl.n	800e3c2 <_svfiprintf_r+0x36>
 800e3a0:	690b      	ldr	r3, [r1, #16]
 800e3a2:	b973      	cbnz	r3, 800e3c2 <_svfiprintf_r+0x36>
 800e3a4:	2140      	movs	r1, #64	@ 0x40
 800e3a6:	f7ff ff09 	bl	800e1bc <_malloc_r>
 800e3aa:	6028      	str	r0, [r5, #0]
 800e3ac:	6128      	str	r0, [r5, #16]
 800e3ae:	b930      	cbnz	r0, 800e3be <_svfiprintf_r+0x32>
 800e3b0:	230c      	movs	r3, #12
 800e3b2:	603b      	str	r3, [r7, #0]
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	b01d      	add	sp, #116	@ 0x74
 800e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	2340      	movs	r3, #64	@ 0x40
 800e3c0:	616b      	str	r3, [r5, #20]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3c6:	2320      	movs	r3, #32
 800e3c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d0:	2330      	movs	r3, #48	@ 0x30
 800e3d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e570 <_svfiprintf_r+0x1e4>
 800e3d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3da:	f04f 0901 	mov.w	r9, #1
 800e3de:	4623      	mov	r3, r4
 800e3e0:	469a      	mov	sl, r3
 800e3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3e6:	b10a      	cbz	r2, 800e3ec <_svfiprintf_r+0x60>
 800e3e8:	2a25      	cmp	r2, #37	@ 0x25
 800e3ea:	d1f9      	bne.n	800e3e0 <_svfiprintf_r+0x54>
 800e3ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f0:	d00b      	beq.n	800e40a <_svfiprintf_r+0x7e>
 800e3f2:	465b      	mov	r3, fp
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	f7ff ff6b 	bl	800e2d4 <__ssputs_r>
 800e3fe:	3001      	adds	r0, #1
 800e400:	f000 80a7 	beq.w	800e552 <_svfiprintf_r+0x1c6>
 800e404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e406:	445a      	add	r2, fp
 800e408:	9209      	str	r2, [sp, #36]	@ 0x24
 800e40a:	f89a 3000 	ldrb.w	r3, [sl]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 809f 	beq.w	800e552 <_svfiprintf_r+0x1c6>
 800e414:	2300      	movs	r3, #0
 800e416:	f04f 32ff 	mov.w	r2, #4294967295
 800e41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e41e:	f10a 0a01 	add.w	sl, sl, #1
 800e422:	9304      	str	r3, [sp, #16]
 800e424:	9307      	str	r3, [sp, #28]
 800e426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e42a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e42c:	4654      	mov	r4, sl
 800e42e:	2205      	movs	r2, #5
 800e430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e434:	484e      	ldr	r0, [pc, #312]	@ (800e570 <_svfiprintf_r+0x1e4>)
 800e436:	f7f1 ff5b 	bl	80002f0 <memchr>
 800e43a:	9a04      	ldr	r2, [sp, #16]
 800e43c:	b9d8      	cbnz	r0, 800e476 <_svfiprintf_r+0xea>
 800e43e:	06d0      	lsls	r0, r2, #27
 800e440:	bf44      	itt	mi
 800e442:	2320      	movmi	r3, #32
 800e444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e448:	0711      	lsls	r1, r2, #28
 800e44a:	bf44      	itt	mi
 800e44c:	232b      	movmi	r3, #43	@ 0x2b
 800e44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e452:	f89a 3000 	ldrb.w	r3, [sl]
 800e456:	2b2a      	cmp	r3, #42	@ 0x2a
 800e458:	d015      	beq.n	800e486 <_svfiprintf_r+0xfa>
 800e45a:	9a07      	ldr	r2, [sp, #28]
 800e45c:	4654      	mov	r4, sl
 800e45e:	2000      	movs	r0, #0
 800e460:	f04f 0c0a 	mov.w	ip, #10
 800e464:	4621      	mov	r1, r4
 800e466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e46a:	3b30      	subs	r3, #48	@ 0x30
 800e46c:	2b09      	cmp	r3, #9
 800e46e:	d94b      	bls.n	800e508 <_svfiprintf_r+0x17c>
 800e470:	b1b0      	cbz	r0, 800e4a0 <_svfiprintf_r+0x114>
 800e472:	9207      	str	r2, [sp, #28]
 800e474:	e014      	b.n	800e4a0 <_svfiprintf_r+0x114>
 800e476:	eba0 0308 	sub.w	r3, r0, r8
 800e47a:	fa09 f303 	lsl.w	r3, r9, r3
 800e47e:	4313      	orrs	r3, r2
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	46a2      	mov	sl, r4
 800e484:	e7d2      	b.n	800e42c <_svfiprintf_r+0xa0>
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	1d19      	adds	r1, r3, #4
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	9103      	str	r1, [sp, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bfbb      	ittet	lt
 800e492:	425b      	neglt	r3, r3
 800e494:	f042 0202 	orrlt.w	r2, r2, #2
 800e498:	9307      	strge	r3, [sp, #28]
 800e49a:	9307      	strlt	r3, [sp, #28]
 800e49c:	bfb8      	it	lt
 800e49e:	9204      	strlt	r2, [sp, #16]
 800e4a0:	7823      	ldrb	r3, [r4, #0]
 800e4a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4a4:	d10a      	bne.n	800e4bc <_svfiprintf_r+0x130>
 800e4a6:	7863      	ldrb	r3, [r4, #1]
 800e4a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4aa:	d132      	bne.n	800e512 <_svfiprintf_r+0x186>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	1d1a      	adds	r2, r3, #4
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	9203      	str	r2, [sp, #12]
 800e4b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4b8:	3402      	adds	r4, #2
 800e4ba:	9305      	str	r3, [sp, #20]
 800e4bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e580 <_svfiprintf_r+0x1f4>
 800e4c0:	7821      	ldrb	r1, [r4, #0]
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	4650      	mov	r0, sl
 800e4c6:	f7f1 ff13 	bl	80002f0 <memchr>
 800e4ca:	b138      	cbz	r0, 800e4dc <_svfiprintf_r+0x150>
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	eba0 000a 	sub.w	r0, r0, sl
 800e4d2:	2240      	movs	r2, #64	@ 0x40
 800e4d4:	4082      	lsls	r2, r0
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	3401      	adds	r4, #1
 800e4da:	9304      	str	r3, [sp, #16]
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	4824      	ldr	r0, [pc, #144]	@ (800e574 <_svfiprintf_r+0x1e8>)
 800e4e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4e6:	2206      	movs	r2, #6
 800e4e8:	f7f1 ff02 	bl	80002f0 <memchr>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d036      	beq.n	800e55e <_svfiprintf_r+0x1d2>
 800e4f0:	4b21      	ldr	r3, [pc, #132]	@ (800e578 <_svfiprintf_r+0x1ec>)
 800e4f2:	bb1b      	cbnz	r3, 800e53c <_svfiprintf_r+0x1b0>
 800e4f4:	9b03      	ldr	r3, [sp, #12]
 800e4f6:	3307      	adds	r3, #7
 800e4f8:	f023 0307 	bic.w	r3, r3, #7
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	9303      	str	r3, [sp, #12]
 800e500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e502:	4433      	add	r3, r6
 800e504:	9309      	str	r3, [sp, #36]	@ 0x24
 800e506:	e76a      	b.n	800e3de <_svfiprintf_r+0x52>
 800e508:	fb0c 3202 	mla	r2, ip, r2, r3
 800e50c:	460c      	mov	r4, r1
 800e50e:	2001      	movs	r0, #1
 800e510:	e7a8      	b.n	800e464 <_svfiprintf_r+0xd8>
 800e512:	2300      	movs	r3, #0
 800e514:	3401      	adds	r4, #1
 800e516:	9305      	str	r3, [sp, #20]
 800e518:	4619      	mov	r1, r3
 800e51a:	f04f 0c0a 	mov.w	ip, #10
 800e51e:	4620      	mov	r0, r4
 800e520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e524:	3a30      	subs	r2, #48	@ 0x30
 800e526:	2a09      	cmp	r2, #9
 800e528:	d903      	bls.n	800e532 <_svfiprintf_r+0x1a6>
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d0c6      	beq.n	800e4bc <_svfiprintf_r+0x130>
 800e52e:	9105      	str	r1, [sp, #20]
 800e530:	e7c4      	b.n	800e4bc <_svfiprintf_r+0x130>
 800e532:	fb0c 2101 	mla	r1, ip, r1, r2
 800e536:	4604      	mov	r4, r0
 800e538:	2301      	movs	r3, #1
 800e53a:	e7f0      	b.n	800e51e <_svfiprintf_r+0x192>
 800e53c:	ab03      	add	r3, sp, #12
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	462a      	mov	r2, r5
 800e542:	4b0e      	ldr	r3, [pc, #56]	@ (800e57c <_svfiprintf_r+0x1f0>)
 800e544:	a904      	add	r1, sp, #16
 800e546:	4638      	mov	r0, r7
 800e548:	f3af 8000 	nop.w
 800e54c:	1c42      	adds	r2, r0, #1
 800e54e:	4606      	mov	r6, r0
 800e550:	d1d6      	bne.n	800e500 <_svfiprintf_r+0x174>
 800e552:	89ab      	ldrh	r3, [r5, #12]
 800e554:	065b      	lsls	r3, r3, #25
 800e556:	f53f af2d 	bmi.w	800e3b4 <_svfiprintf_r+0x28>
 800e55a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e55c:	e72c      	b.n	800e3b8 <_svfiprintf_r+0x2c>
 800e55e:	ab03      	add	r3, sp, #12
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	462a      	mov	r2, r5
 800e564:	4b05      	ldr	r3, [pc, #20]	@ (800e57c <_svfiprintf_r+0x1f0>)
 800e566:	a904      	add	r1, sp, #16
 800e568:	4638      	mov	r0, r7
 800e56a:	f000 f879 	bl	800e660 <_printf_i>
 800e56e:	e7ed      	b.n	800e54c <_svfiprintf_r+0x1c0>
 800e570:	0800eb58 	.word	0x0800eb58
 800e574:	0800eb62 	.word	0x0800eb62
 800e578:	00000000 	.word	0x00000000
 800e57c:	0800e2d5 	.word	0x0800e2d5
 800e580:	0800eb5e 	.word	0x0800eb5e

0800e584 <_printf_common>:
 800e584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e588:	4616      	mov	r6, r2
 800e58a:	4698      	mov	r8, r3
 800e58c:	688a      	ldr	r2, [r1, #8]
 800e58e:	690b      	ldr	r3, [r1, #16]
 800e590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e594:	4293      	cmp	r3, r2
 800e596:	bfb8      	it	lt
 800e598:	4613      	movlt	r3, r2
 800e59a:	6033      	str	r3, [r6, #0]
 800e59c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5a0:	4607      	mov	r7, r0
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	b10a      	cbz	r2, 800e5aa <_printf_common+0x26>
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	6033      	str	r3, [r6, #0]
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	0699      	lsls	r1, r3, #26
 800e5ae:	bf42      	ittt	mi
 800e5b0:	6833      	ldrmi	r3, [r6, #0]
 800e5b2:	3302      	addmi	r3, #2
 800e5b4:	6033      	strmi	r3, [r6, #0]
 800e5b6:	6825      	ldr	r5, [r4, #0]
 800e5b8:	f015 0506 	ands.w	r5, r5, #6
 800e5bc:	d106      	bne.n	800e5cc <_printf_common+0x48>
 800e5be:	f104 0a19 	add.w	sl, r4, #25
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	6832      	ldr	r2, [r6, #0]
 800e5c6:	1a9b      	subs	r3, r3, r2
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	dc26      	bgt.n	800e61a <_printf_common+0x96>
 800e5cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	3b00      	subs	r3, #0
 800e5d4:	bf18      	it	ne
 800e5d6:	2301      	movne	r3, #1
 800e5d8:	0692      	lsls	r2, r2, #26
 800e5da:	d42b      	bmi.n	800e634 <_printf_common+0xb0>
 800e5dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5e0:	4641      	mov	r1, r8
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	47c8      	blx	r9
 800e5e6:	3001      	adds	r0, #1
 800e5e8:	d01e      	beq.n	800e628 <_printf_common+0xa4>
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	6922      	ldr	r2, [r4, #16]
 800e5ee:	f003 0306 	and.w	r3, r3, #6
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	bf02      	ittt	eq
 800e5f6:	68e5      	ldreq	r5, [r4, #12]
 800e5f8:	6833      	ldreq	r3, [r6, #0]
 800e5fa:	1aed      	subeq	r5, r5, r3
 800e5fc:	68a3      	ldr	r3, [r4, #8]
 800e5fe:	bf0c      	ite	eq
 800e600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e604:	2500      	movne	r5, #0
 800e606:	4293      	cmp	r3, r2
 800e608:	bfc4      	itt	gt
 800e60a:	1a9b      	subgt	r3, r3, r2
 800e60c:	18ed      	addgt	r5, r5, r3
 800e60e:	2600      	movs	r6, #0
 800e610:	341a      	adds	r4, #26
 800e612:	42b5      	cmp	r5, r6
 800e614:	d11a      	bne.n	800e64c <_printf_common+0xc8>
 800e616:	2000      	movs	r0, #0
 800e618:	e008      	b.n	800e62c <_printf_common+0xa8>
 800e61a:	2301      	movs	r3, #1
 800e61c:	4652      	mov	r2, sl
 800e61e:	4641      	mov	r1, r8
 800e620:	4638      	mov	r0, r7
 800e622:	47c8      	blx	r9
 800e624:	3001      	adds	r0, #1
 800e626:	d103      	bne.n	800e630 <_printf_common+0xac>
 800e628:	f04f 30ff 	mov.w	r0, #4294967295
 800e62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e630:	3501      	adds	r5, #1
 800e632:	e7c6      	b.n	800e5c2 <_printf_common+0x3e>
 800e634:	18e1      	adds	r1, r4, r3
 800e636:	1c5a      	adds	r2, r3, #1
 800e638:	2030      	movs	r0, #48	@ 0x30
 800e63a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e63e:	4422      	add	r2, r4
 800e640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e648:	3302      	adds	r3, #2
 800e64a:	e7c7      	b.n	800e5dc <_printf_common+0x58>
 800e64c:	2301      	movs	r3, #1
 800e64e:	4622      	mov	r2, r4
 800e650:	4641      	mov	r1, r8
 800e652:	4638      	mov	r0, r7
 800e654:	47c8      	blx	r9
 800e656:	3001      	adds	r0, #1
 800e658:	d0e6      	beq.n	800e628 <_printf_common+0xa4>
 800e65a:	3601      	adds	r6, #1
 800e65c:	e7d9      	b.n	800e612 <_printf_common+0x8e>
	...

0800e660 <_printf_i>:
 800e660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e664:	7e0f      	ldrb	r7, [r1, #24]
 800e666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e668:	2f78      	cmp	r7, #120	@ 0x78
 800e66a:	4691      	mov	r9, r2
 800e66c:	4680      	mov	r8, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	469a      	mov	sl, r3
 800e672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e676:	d807      	bhi.n	800e688 <_printf_i+0x28>
 800e678:	2f62      	cmp	r7, #98	@ 0x62
 800e67a:	d80a      	bhi.n	800e692 <_printf_i+0x32>
 800e67c:	2f00      	cmp	r7, #0
 800e67e:	f000 80d2 	beq.w	800e826 <_printf_i+0x1c6>
 800e682:	2f58      	cmp	r7, #88	@ 0x58
 800e684:	f000 80b9 	beq.w	800e7fa <_printf_i+0x19a>
 800e688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e68c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e690:	e03a      	b.n	800e708 <_printf_i+0xa8>
 800e692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e696:	2b15      	cmp	r3, #21
 800e698:	d8f6      	bhi.n	800e688 <_printf_i+0x28>
 800e69a:	a101      	add	r1, pc, #4	@ (adr r1, 800e6a0 <_printf_i+0x40>)
 800e69c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6a0:	0800e6f9 	.word	0x0800e6f9
 800e6a4:	0800e70d 	.word	0x0800e70d
 800e6a8:	0800e689 	.word	0x0800e689
 800e6ac:	0800e689 	.word	0x0800e689
 800e6b0:	0800e689 	.word	0x0800e689
 800e6b4:	0800e689 	.word	0x0800e689
 800e6b8:	0800e70d 	.word	0x0800e70d
 800e6bc:	0800e689 	.word	0x0800e689
 800e6c0:	0800e689 	.word	0x0800e689
 800e6c4:	0800e689 	.word	0x0800e689
 800e6c8:	0800e689 	.word	0x0800e689
 800e6cc:	0800e80d 	.word	0x0800e80d
 800e6d0:	0800e737 	.word	0x0800e737
 800e6d4:	0800e7c7 	.word	0x0800e7c7
 800e6d8:	0800e689 	.word	0x0800e689
 800e6dc:	0800e689 	.word	0x0800e689
 800e6e0:	0800e82f 	.word	0x0800e82f
 800e6e4:	0800e689 	.word	0x0800e689
 800e6e8:	0800e737 	.word	0x0800e737
 800e6ec:	0800e689 	.word	0x0800e689
 800e6f0:	0800e689 	.word	0x0800e689
 800e6f4:	0800e7cf 	.word	0x0800e7cf
 800e6f8:	6833      	ldr	r3, [r6, #0]
 800e6fa:	1d1a      	adds	r2, r3, #4
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6032      	str	r2, [r6, #0]
 800e700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e708:	2301      	movs	r3, #1
 800e70a:	e09d      	b.n	800e848 <_printf_i+0x1e8>
 800e70c:	6833      	ldr	r3, [r6, #0]
 800e70e:	6820      	ldr	r0, [r4, #0]
 800e710:	1d19      	adds	r1, r3, #4
 800e712:	6031      	str	r1, [r6, #0]
 800e714:	0606      	lsls	r6, r0, #24
 800e716:	d501      	bpl.n	800e71c <_printf_i+0xbc>
 800e718:	681d      	ldr	r5, [r3, #0]
 800e71a:	e003      	b.n	800e724 <_printf_i+0xc4>
 800e71c:	0645      	lsls	r5, r0, #25
 800e71e:	d5fb      	bpl.n	800e718 <_printf_i+0xb8>
 800e720:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e724:	2d00      	cmp	r5, #0
 800e726:	da03      	bge.n	800e730 <_printf_i+0xd0>
 800e728:	232d      	movs	r3, #45	@ 0x2d
 800e72a:	426d      	negs	r5, r5
 800e72c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e730:	4859      	ldr	r0, [pc, #356]	@ (800e898 <_printf_i+0x238>)
 800e732:	230a      	movs	r3, #10
 800e734:	e011      	b.n	800e75a <_printf_i+0xfa>
 800e736:	6821      	ldr	r1, [r4, #0]
 800e738:	6833      	ldr	r3, [r6, #0]
 800e73a:	0608      	lsls	r0, r1, #24
 800e73c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e740:	d402      	bmi.n	800e748 <_printf_i+0xe8>
 800e742:	0649      	lsls	r1, r1, #25
 800e744:	bf48      	it	mi
 800e746:	b2ad      	uxthmi	r5, r5
 800e748:	2f6f      	cmp	r7, #111	@ 0x6f
 800e74a:	4853      	ldr	r0, [pc, #332]	@ (800e898 <_printf_i+0x238>)
 800e74c:	6033      	str	r3, [r6, #0]
 800e74e:	bf14      	ite	ne
 800e750:	230a      	movne	r3, #10
 800e752:	2308      	moveq	r3, #8
 800e754:	2100      	movs	r1, #0
 800e756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e75a:	6866      	ldr	r6, [r4, #4]
 800e75c:	60a6      	str	r6, [r4, #8]
 800e75e:	2e00      	cmp	r6, #0
 800e760:	bfa2      	ittt	ge
 800e762:	6821      	ldrge	r1, [r4, #0]
 800e764:	f021 0104 	bicge.w	r1, r1, #4
 800e768:	6021      	strge	r1, [r4, #0]
 800e76a:	b90d      	cbnz	r5, 800e770 <_printf_i+0x110>
 800e76c:	2e00      	cmp	r6, #0
 800e76e:	d04b      	beq.n	800e808 <_printf_i+0x1a8>
 800e770:	4616      	mov	r6, r2
 800e772:	fbb5 f1f3 	udiv	r1, r5, r3
 800e776:	fb03 5711 	mls	r7, r3, r1, r5
 800e77a:	5dc7      	ldrb	r7, [r0, r7]
 800e77c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e780:	462f      	mov	r7, r5
 800e782:	42bb      	cmp	r3, r7
 800e784:	460d      	mov	r5, r1
 800e786:	d9f4      	bls.n	800e772 <_printf_i+0x112>
 800e788:	2b08      	cmp	r3, #8
 800e78a:	d10b      	bne.n	800e7a4 <_printf_i+0x144>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	07df      	lsls	r7, r3, #31
 800e790:	d508      	bpl.n	800e7a4 <_printf_i+0x144>
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	6861      	ldr	r1, [r4, #4]
 800e796:	4299      	cmp	r1, r3
 800e798:	bfde      	ittt	le
 800e79a:	2330      	movle	r3, #48	@ 0x30
 800e79c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7a4:	1b92      	subs	r2, r2, r6
 800e7a6:	6122      	str	r2, [r4, #16]
 800e7a8:	f8cd a000 	str.w	sl, [sp]
 800e7ac:	464b      	mov	r3, r9
 800e7ae:	aa03      	add	r2, sp, #12
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	4640      	mov	r0, r8
 800e7b4:	f7ff fee6 	bl	800e584 <_printf_common>
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d14a      	bne.n	800e852 <_printf_i+0x1f2>
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	b004      	add	sp, #16
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	f043 0320 	orr.w	r3, r3, #32
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	4833      	ldr	r0, [pc, #204]	@ (800e89c <_printf_i+0x23c>)
 800e7d0:	2778      	movs	r7, #120	@ 0x78
 800e7d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	6831      	ldr	r1, [r6, #0]
 800e7da:	061f      	lsls	r7, r3, #24
 800e7dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7e0:	d402      	bmi.n	800e7e8 <_printf_i+0x188>
 800e7e2:	065f      	lsls	r7, r3, #25
 800e7e4:	bf48      	it	mi
 800e7e6:	b2ad      	uxthmi	r5, r5
 800e7e8:	6031      	str	r1, [r6, #0]
 800e7ea:	07d9      	lsls	r1, r3, #31
 800e7ec:	bf44      	itt	mi
 800e7ee:	f043 0320 	orrmi.w	r3, r3, #32
 800e7f2:	6023      	strmi	r3, [r4, #0]
 800e7f4:	b11d      	cbz	r5, 800e7fe <_printf_i+0x19e>
 800e7f6:	2310      	movs	r3, #16
 800e7f8:	e7ac      	b.n	800e754 <_printf_i+0xf4>
 800e7fa:	4827      	ldr	r0, [pc, #156]	@ (800e898 <_printf_i+0x238>)
 800e7fc:	e7e9      	b.n	800e7d2 <_printf_i+0x172>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	f023 0320 	bic.w	r3, r3, #32
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	e7f6      	b.n	800e7f6 <_printf_i+0x196>
 800e808:	4616      	mov	r6, r2
 800e80a:	e7bd      	b.n	800e788 <_printf_i+0x128>
 800e80c:	6833      	ldr	r3, [r6, #0]
 800e80e:	6825      	ldr	r5, [r4, #0]
 800e810:	6961      	ldr	r1, [r4, #20]
 800e812:	1d18      	adds	r0, r3, #4
 800e814:	6030      	str	r0, [r6, #0]
 800e816:	062e      	lsls	r6, r5, #24
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	d501      	bpl.n	800e820 <_printf_i+0x1c0>
 800e81c:	6019      	str	r1, [r3, #0]
 800e81e:	e002      	b.n	800e826 <_printf_i+0x1c6>
 800e820:	0668      	lsls	r0, r5, #25
 800e822:	d5fb      	bpl.n	800e81c <_printf_i+0x1bc>
 800e824:	8019      	strh	r1, [r3, #0]
 800e826:	2300      	movs	r3, #0
 800e828:	6123      	str	r3, [r4, #16]
 800e82a:	4616      	mov	r6, r2
 800e82c:	e7bc      	b.n	800e7a8 <_printf_i+0x148>
 800e82e:	6833      	ldr	r3, [r6, #0]
 800e830:	1d1a      	adds	r2, r3, #4
 800e832:	6032      	str	r2, [r6, #0]
 800e834:	681e      	ldr	r6, [r3, #0]
 800e836:	6862      	ldr	r2, [r4, #4]
 800e838:	2100      	movs	r1, #0
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7f1 fd58 	bl	80002f0 <memchr>
 800e840:	b108      	cbz	r0, 800e846 <_printf_i+0x1e6>
 800e842:	1b80      	subs	r0, r0, r6
 800e844:	6060      	str	r0, [r4, #4]
 800e846:	6863      	ldr	r3, [r4, #4]
 800e848:	6123      	str	r3, [r4, #16]
 800e84a:	2300      	movs	r3, #0
 800e84c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e850:	e7aa      	b.n	800e7a8 <_printf_i+0x148>
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	4632      	mov	r2, r6
 800e856:	4649      	mov	r1, r9
 800e858:	4640      	mov	r0, r8
 800e85a:	47d0      	blx	sl
 800e85c:	3001      	adds	r0, #1
 800e85e:	d0ad      	beq.n	800e7bc <_printf_i+0x15c>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	079b      	lsls	r3, r3, #30
 800e864:	d413      	bmi.n	800e88e <_printf_i+0x22e>
 800e866:	68e0      	ldr	r0, [r4, #12]
 800e868:	9b03      	ldr	r3, [sp, #12]
 800e86a:	4298      	cmp	r0, r3
 800e86c:	bfb8      	it	lt
 800e86e:	4618      	movlt	r0, r3
 800e870:	e7a6      	b.n	800e7c0 <_printf_i+0x160>
 800e872:	2301      	movs	r3, #1
 800e874:	4632      	mov	r2, r6
 800e876:	4649      	mov	r1, r9
 800e878:	4640      	mov	r0, r8
 800e87a:	47d0      	blx	sl
 800e87c:	3001      	adds	r0, #1
 800e87e:	d09d      	beq.n	800e7bc <_printf_i+0x15c>
 800e880:	3501      	adds	r5, #1
 800e882:	68e3      	ldr	r3, [r4, #12]
 800e884:	9903      	ldr	r1, [sp, #12]
 800e886:	1a5b      	subs	r3, r3, r1
 800e888:	42ab      	cmp	r3, r5
 800e88a:	dcf2      	bgt.n	800e872 <_printf_i+0x212>
 800e88c:	e7eb      	b.n	800e866 <_printf_i+0x206>
 800e88e:	2500      	movs	r5, #0
 800e890:	f104 0619 	add.w	r6, r4, #25
 800e894:	e7f5      	b.n	800e882 <_printf_i+0x222>
 800e896:	bf00      	nop
 800e898:	0800eb69 	.word	0x0800eb69
 800e89c:	0800eb7a 	.word	0x0800eb7a

0800e8a0 <memmove>:
 800e8a0:	4288      	cmp	r0, r1
 800e8a2:	b510      	push	{r4, lr}
 800e8a4:	eb01 0402 	add.w	r4, r1, r2
 800e8a8:	d902      	bls.n	800e8b0 <memmove+0x10>
 800e8aa:	4284      	cmp	r4, r0
 800e8ac:	4623      	mov	r3, r4
 800e8ae:	d807      	bhi.n	800e8c0 <memmove+0x20>
 800e8b0:	1e43      	subs	r3, r0, #1
 800e8b2:	42a1      	cmp	r1, r4
 800e8b4:	d008      	beq.n	800e8c8 <memmove+0x28>
 800e8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8be:	e7f8      	b.n	800e8b2 <memmove+0x12>
 800e8c0:	4402      	add	r2, r0
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	428a      	cmp	r2, r1
 800e8c6:	d100      	bne.n	800e8ca <memmove+0x2a>
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8d2:	e7f7      	b.n	800e8c4 <memmove+0x24>

0800e8d4 <_sbrk_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4d06      	ldr	r5, [pc, #24]	@ (800e8f0 <_sbrk_r+0x1c>)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	4604      	mov	r4, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	602b      	str	r3, [r5, #0]
 800e8e0:	f7f3 fca8 	bl	8002234 <_sbrk>
 800e8e4:	1c43      	adds	r3, r0, #1
 800e8e6:	d102      	bne.n	800e8ee <_sbrk_r+0x1a>
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	b103      	cbz	r3, 800e8ee <_sbrk_r+0x1a>
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	bd38      	pop	{r3, r4, r5, pc}
 800e8f0:	2400069c 	.word	0x2400069c

0800e8f4 <_realloc_r>:
 800e8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	4615      	mov	r5, r2
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	b921      	cbnz	r1, 800e90a <_realloc_r+0x16>
 800e900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e904:	4611      	mov	r1, r2
 800e906:	f7ff bc59 	b.w	800e1bc <_malloc_r>
 800e90a:	b92a      	cbnz	r2, 800e918 <_realloc_r+0x24>
 800e90c:	f7ff fbea 	bl	800e0e4 <_free_r>
 800e910:	2400      	movs	r4, #0
 800e912:	4620      	mov	r0, r4
 800e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e918:	f000 f81a 	bl	800e950 <_malloc_usable_size_r>
 800e91c:	4285      	cmp	r5, r0
 800e91e:	4606      	mov	r6, r0
 800e920:	d802      	bhi.n	800e928 <_realloc_r+0x34>
 800e922:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e926:	d8f4      	bhi.n	800e912 <_realloc_r+0x1e>
 800e928:	4629      	mov	r1, r5
 800e92a:	4640      	mov	r0, r8
 800e92c:	f7ff fc46 	bl	800e1bc <_malloc_r>
 800e930:	4607      	mov	r7, r0
 800e932:	2800      	cmp	r0, #0
 800e934:	d0ec      	beq.n	800e910 <_realloc_r+0x1c>
 800e936:	42b5      	cmp	r5, r6
 800e938:	462a      	mov	r2, r5
 800e93a:	4621      	mov	r1, r4
 800e93c:	bf28      	it	cs
 800e93e:	4632      	movcs	r2, r6
 800e940:	f7ff fbc2 	bl	800e0c8 <memcpy>
 800e944:	4621      	mov	r1, r4
 800e946:	4640      	mov	r0, r8
 800e948:	f7ff fbcc 	bl	800e0e4 <_free_r>
 800e94c:	463c      	mov	r4, r7
 800e94e:	e7e0      	b.n	800e912 <_realloc_r+0x1e>

0800e950 <_malloc_usable_size_r>:
 800e950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e954:	1f18      	subs	r0, r3, #4
 800e956:	2b00      	cmp	r3, #0
 800e958:	bfbc      	itt	lt
 800e95a:	580b      	ldrlt	r3, [r1, r0]
 800e95c:	18c0      	addlt	r0, r0, r3
 800e95e:	4770      	bx	lr

0800e960 <_init>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	bf00      	nop
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr

0800e96c <_fini>:
 800e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96e:	bf00      	nop
 800e970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e972:	bc08      	pop	{r3}
 800e974:	469e      	mov	lr, r3
 800e976:	4770      	bx	lr
