
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800ef4c  0800ef4c  0000ff4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f520  0800f520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f528  0800f528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f52c  0800f52c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800f530  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000830  2400007c  0800f5ac  0001107c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  0800f5ac  000118ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a1f6  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a5d  00000000  00000000  0002b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001770  00000000  00000000  0002ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000121c  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acca  00000000  00000000  0003168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021312  00000000  00000000  0006c356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165d26  00000000  00000000  0008d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f338e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006794  00000000  00000000  001f33d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001f9b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ef34 	.word	0x0800ef34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800ef34 	.word	0x0800ef34

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:
//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)
//#define LCD_WAIT_STATUS 1

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f881 	bl	80004fc <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f005 f96e 	bl	8005718 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f009 f8ce 	bl	80095e8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, 1000);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f009 f8c7 	bl	80095e8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f005 f95a 	bl	8005718 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	240002c8 	.word	0x240002c8

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <RA8875_read_data+0x6c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <RA8875_read_data+0x70>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01c      	b.n	80004e4 <RA8875_read_data+0x64>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004b4:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <RA8875_read_data+0x74>)
 80004b6:	f005 f92f 	bl	8005718 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi2, &rs_rw_info, 1, 1000);
 80004ba:	1db9      	adds	r1, r7, #6
 80004bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c0:	2201      	movs	r2, #1
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <RA8875_read_data+0x78>)
 80004c4:	f009 f890 	bl	80095e8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &data, 1, 1000);
 80004c8:	1df9      	adds	r1, r7, #7
 80004ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ce:	2201      	movs	r2, #1
 80004d0:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <RA8875_read_data+0x78>)
 80004d2:	f009 fa77 	bl	80099c4 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004dc:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <RA8875_read_data+0x74>)
 80004de:	f005 f91b 	bl	8005718 <HAL_GPIO_WritePin>
  return data;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	240000a0 	.word	0x240000a0
 80004f0:	240000a4 	.word	0x240000a4
 80004f4:	58020400 	.word	0x58020400
 80004f8:	24000350 	.word	0x24000350

080004fc <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <RA8875_write_command+0x68>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	691b      	ldr	r3, [r3, #16]
 800050c:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <RA8875_write_command+0x6c>)
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	4013      	ands	r3, r2
 8000512:	2b00      	cmp	r3, #0
 8000514:	d105      	bne.n	8000522 <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff ff50 	bl	80003bc <RA8875_BUS_FREE>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d01b      	beq.n	800055a <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 8000522:	2380      	movs	r3, #128	@ 0x80
 8000524:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	4810      	ldr	r0, [pc, #64]	@ (800056c <RA8875_write_command+0x70>)
 800052c:	f005 f8f4 	bl	8005718 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000530:	f107 010f 	add.w	r1, r7, #15
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	480d      	ldr	r0, [pc, #52]	@ (8000570 <RA8875_write_command+0x74>)
 800053c:	f009 f854 	bl	80095e8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, 1000);
 8000540:	1df9      	adds	r1, r7, #7
 8000542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <RA8875_write_command+0x74>)
 800054a:	f009 f84d 	bl	80095e8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <RA8875_write_command+0x70>)
 8000554:	f005 f8e0 	bl	8005718 <HAL_GPIO_WritePin>
 8000558:	e000      	b.n	800055c <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 800055a:	bf00      	nop
}
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	240000a0 	.word	0x240000a0
 8000568:	240000a4 	.word	0x240000a4
 800056c:	58020000 	.word	0x58020000
 8000570:	240002c8 	.word	0x240002c8

08000574 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 800057a:	2040      	movs	r0, #64	@ 0x40
 800057c:	f7ff ffbe 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000580:	f7ff ff7e 	bl	8000480 <RA8875_read_data>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff38 	bl	8000408 <RA8875_write_data>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff18 	bl	80003e8 <RA8875_read_reg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005bc:	7bfa      	ldrb	r2, [r7, #15]
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	4013      	ands	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f3      	bne.n	80005b0 <RA8875_wait_poll+0x10>
 80005c8:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <RA8875_apply_rotation_x+0x34>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d108      	bne.n	80005f8 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <RA8875_apply_rotation_x+0x38>)
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3b01      	subs	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	80fb      	strh	r3, [r7, #6]
      break;
 80005f6:	bf00      	nop
  }

  return x;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2400009d 	.word	0x2400009d
 800060c:	24000098 	.word	0x24000098

08000610 <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <RA8875_apply_rotation_y+0x40>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d108      	bne.n	8000634 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <RA8875_apply_rotation_y+0x44>)
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	3b01      	subs	r3, #1
 800062e:	b29b      	uxth	r3, r3
 8000630:	80fb      	strh	r3, [r7, #6]
      break;
 8000632:	bf00      	nop
  }

  return y + _voffset;
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <RA8875_apply_rotation_y+0x48>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21b      	sxth	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2400009d 	.word	0x2400009d
 8000654:	2400009a 	.word	0x2400009a
 8000658:	2400009e 	.word	0x2400009e

0800065c <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4604      	mov	r4, r0
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4623      	mov	r3, r4
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	4603      	mov	r3, r0
 8000670:	80bb      	strh	r3, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	807b      	strh	r3, [r7, #2]
 8000676:	4613      	mov	r3, r2
 8000678:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffa8 	bl	80005d4 <RA8875_apply_rotation_x>
 8000684:	4603      	mov	r3, r0
 8000686:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffbf 	bl	8000610 <RA8875_apply_rotation_y>
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff9a 	bl	80005d4 <RA8875_apply_rotation_x>
 80006a0:	4603      	mov	r3, r0
 80006a2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffb1 	bl	8000610 <RA8875_apply_rotation_y>
 80006ae:	4603      	mov	r3, r0
 80006b0:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006b2:	2091      	movs	r0, #145	@ 0x91
 80006b4:	f7ff ff22 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fea3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006c2:	2092      	movs	r0, #146	@ 0x92
 80006c4:	f7ff ff1a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006cc:	121b      	asrs	r3, r3, #8
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe98 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d8:	2093      	movs	r0, #147	@ 0x93
 80006da:	f7ff ff0f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y);
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe90 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e8:	2094      	movs	r0, #148	@ 0x94
 80006ea:	f7ff ff07 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	121b      	asrs	r3, r3, #8
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe85 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fe:	2095      	movs	r0, #149	@ 0x95
 8000700:	f7ff fefc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (w);
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe7d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070e:	2096      	movs	r0, #150	@ 0x96
 8000710:	f7ff fef4 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000718:	121b      	asrs	r3, r3, #8
 800071a:	b21b      	sxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe72 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000724:	2097      	movs	r0, #151	@ 0x97
 8000726:	f7ff fee9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (h);
 800072a:	883b      	ldrh	r3, [r7, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fe6a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000734:	2098      	movs	r0, #152	@ 0x98
 8000736:	f7ff fee1 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 800073a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073e:	121b      	asrs	r3, r3, #8
 8000740:	b21b      	sxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe5f 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 800074a:	2063      	movs	r0, #99	@ 0x63
 800074c:	f7ff fed6 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000750:	8b3b      	ldrh	r3, [r7, #24]
 8000752:	0adb      	lsrs	r3, r3, #11
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe55 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f7ff fecc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000764:	8b3b      	ldrh	r3, [r7, #24]
 8000766:	115b      	asrs	r3, r3, #5
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe49 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000776:	2065      	movs	r0, #101	@ 0x65
 8000778:	f7ff fec0 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 800077c:	8b3b      	ldrh	r3, [r7, #24]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fe3e 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 800078c:	2090      	movs	r0, #144	@ 0x90
 800078e:	f7ff feb5 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000792:	7f3b      	ldrb	r3, [r7, #28]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000798:	20b0      	movs	r0, #176	@ 0xb0
 800079a:	f7ff fe35 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079e:	e002      	b.n	80007a6 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 80007a0:	2090      	movs	r0, #144	@ 0x90
 80007a2:	f7ff fe31 	bl	8000408 <RA8875_write_data>
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}

080007ae <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007ae:	b590      	push	{r4, r7, lr}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4604      	mov	r4, r0
 80007b6:	4608      	mov	r0, r1
 80007b8:	4611      	mov	r1, r2
 80007ba:	461a      	mov	r2, r3
 80007bc:	4623      	mov	r3, r4
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	4603      	mov	r3, r0
 80007c2:	80bb      	strh	r3, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
 80007c8:	4613      	mov	r3, r2
 80007ca:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feff 	bl	80005d4 <RA8875_apply_rotation_x>
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff16 	bl	8000610 <RA8875_apply_rotation_y>
 80007e4:	4603      	mov	r3, r0
 80007e6:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fef1 	bl	80005d4 <RA8875_apply_rotation_x>
 80007f2:	4603      	mov	r3, r0
 80007f4:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff08 	bl	8000610 <RA8875_apply_rotation_y>
 8000800:	4603      	mov	r3, r0
 8000802:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000804:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fee3 	bl	80005d4 <RA8875_apply_rotation_x>
 800080e:	4603      	mov	r3, r0
 8000810:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 8000812:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fefa 	bl	8000610 <RA8875_apply_rotation_y>
 800081c:	4603      	mov	r3, r0
 800081e:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 8000820:	2091      	movs	r0, #145	@ 0x91
 8000822:	f7ff fe6b 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x0);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fdec 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000830:	2092      	movs	r0, #146	@ 0x92
 8000832:	f7ff fe63 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083a:	121b      	asrs	r3, r3, #8
 800083c:	b21b      	sxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fde1 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000846:	2093      	movs	r0, #147	@ 0x93
 8000848:	f7ff fe58 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y0);
 800084c:	88bb      	ldrh	r3, [r7, #4]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fdd9 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000856:	2094      	movs	r0, #148	@ 0x94
 8000858:	f7ff fe50 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	121b      	asrs	r3, r3, #8
 8000862:	b21b      	sxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fdce 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 800086c:	2095      	movs	r0, #149	@ 0x95
 800086e:	f7ff fe45 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x1);
 8000872:	887b      	ldrh	r3, [r7, #2]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fdc6 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800087c:	2096      	movs	r0, #150	@ 0x96
 800087e:	f7ff fe3d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 8000882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000886:	121b      	asrs	r3, r3, #8
 8000888:	b21b      	sxth	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fdbb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 8000892:	2097      	movs	r0, #151	@ 0x97
 8000894:	f7ff fe32 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y1);
 8000898:	883b      	ldrh	r3, [r7, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdb3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 80008a2:	2098      	movs	r0, #152	@ 0x98
 80008a4:	f7ff fe2a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008ac:	121b      	asrs	r3, r3, #8
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fda8 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b8:	20a9      	movs	r0, #169	@ 0xa9
 80008ba:	f7ff fe1f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x2);
 80008be:	8b3b      	ldrh	r3, [r7, #24]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fda0 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c8:	20aa      	movs	r0, #170	@ 0xaa
 80008ca:	f7ff fe17 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008d2:	121b      	asrs	r3, r3, #8
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fd95 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008de:	20ab      	movs	r0, #171	@ 0xab
 80008e0:	f7ff fe0c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y2);
 80008e4:	8bbb      	ldrh	r3, [r7, #28]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fd8d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ee:	20ac      	movs	r0, #172	@ 0xac
 80008f0:	f7ff fe04 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f8:	121b      	asrs	r3, r3, #8
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fd82 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000904:	2063      	movs	r0, #99	@ 0x63
 8000906:	f7ff fdf9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800090a:	8c3b      	ldrh	r3, [r7, #32]
 800090c:	0adb      	lsrs	r3, r3, #11
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fd78 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000918:	2064      	movs	r0, #100	@ 0x64
 800091a:	f7ff fdef 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091e:	8c3b      	ldrh	r3, [r7, #32]
 8000920:	115b      	asrs	r3, r3, #5
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000930:	2065      	movs	r0, #101	@ 0x65
 8000932:	f7ff fde3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000936:	8c3b      	ldrh	r3, [r7, #32]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fd61 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000946:	2090      	movs	r0, #144	@ 0x90
 8000948:	f7ff fdd8 	bl	80004fc <RA8875_write_command>
  if (filled)
 800094c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000954:	20a1      	movs	r0, #161	@ 0xa1
 8000956:	f7ff fd57 	bl	8000408 <RA8875_write_data>
 800095a:	e002      	b.n	8000962 <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 800095c:	2081      	movs	r0, #129	@ 0x81
 800095e:	f7ff fd53 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	2090      	movs	r0, #144	@ 0x90
 8000966:	f7ff fe1b 	bl	80005a0 <RA8875_wait_poll>
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4623      	mov	r3, r4
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4603      	mov	r3, r0
 8000986:	80bb      	strh	r3, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	4613      	mov	r3, r2
 800098e:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 8000990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe1d 	bl	80005d4 <RA8875_apply_rotation_x>
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe34 	bl	8000610 <RA8875_apply_rotation_y>
 80009a8:	4603      	mov	r3, r0
 80009aa:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009ac:	20a5      	movs	r0, #165	@ 0xa5
 80009ae:	f7ff fda5 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009bc:	20a6      	movs	r0, #166	@ 0xa6
 80009be:	f7ff fd9d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c6:	121b      	asrs	r3, r3, #8
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd1b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009d2:	20a7      	movs	r0, #167	@ 0xa7
 80009d4:	f7ff fd92 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009e2:	20a8      	movs	r0, #168	@ 0xa8
 80009e4:	f7ff fd8a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009ec:	121b      	asrs	r3, r3, #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd08 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f8:	20a1      	movs	r0, #161	@ 0xa1
 80009fa:	f7ff fd7f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a08:	20a2      	movs	r0, #162	@ 0xa2
 8000a0a:	f7ff fd77 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a12:	121b      	asrs	r3, r3, #8
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fcf5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1e:	20a3      	movs	r0, #163	@ 0xa3
 8000a20:	f7ff fd6c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a24:	883b      	ldrh	r3, [r7, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fced 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2e:	20a4      	movs	r0, #164	@ 0xa4
 8000a30:	f7ff fd64 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a38:	121b      	asrs	r3, r3, #8
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fce2 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a44:	2063      	movs	r0, #99	@ 0x63
 8000a46:	f7ff fd59 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a4a:	8b3b      	ldrh	r3, [r7, #24]
 8000a4c:	0adb      	lsrs	r3, r3, #11
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fcd8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a58:	2064      	movs	r0, #100	@ 0x64
 8000a5a:	f7ff fd4f 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5e:	8b3b      	ldrh	r3, [r7, #24]
 8000a60:	115b      	asrs	r3, r3, #5
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fccc 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a70:	2065      	movs	r0, #101	@ 0x65
 8000a72:	f7ff fd43 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a76:	8b3b      	ldrh	r3, [r7, #24]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fcc1 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a86:	20a0      	movs	r0, #160	@ 0xa0
 8000a88:	f7ff fd38 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000a8c:	7f3b      	ldrb	r3, [r7, #28]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a92:	20c0      	movs	r0, #192	@ 0xc0
 8000a94:	f7ff fcb8 	bl	8000408 <RA8875_write_data>
 8000a98:	e002      	b.n	8000aa0 <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a9a:	2080      	movs	r0, #128	@ 0x80
 8000a9c:	f7ff fcb4 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	20a0      	movs	r0, #160	@ 0xa0
 8000aa4:	f7ff fd7c 	bl	80005a0 <RA8875_wait_poll>
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd7e 	bl	80005d4 <RA8875_apply_rotation_x>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd95 	bl	8000610 <RA8875_apply_rotation_y>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd70 	bl	80005d4 <RA8875_apply_rotation_x>
 8000af4:	4603      	mov	r3, r0
 8000af6:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd87 	bl	8000610 <RA8875_apply_rotation_y>
 8000b02:	4603      	mov	r3, r0
 8000b04:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dd05      	ble.n	8000b1e <roundRectHelper+0x6e>
 8000b12:	1cba      	adds	r2, r7, #2
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc39 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dd05      	ble.n	8000b36 <roundRectHelper+0x86>
 8000b2a:	463a      	mov	r2, r7
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc2d 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b36:	2091      	movs	r0, #145	@ 0x91
 8000b38:	f7ff fce0 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x);
 8000b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc60 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b48:	2092      	movs	r0, #146	@ 0x92
 8000b4a:	f7ff fcd7 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b52:	121b      	asrs	r3, r3, #8
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc55 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5e:	2093      	movs	r0, #147	@ 0x93
 8000b60:	f7ff fccc 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y);
 8000b64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc4c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b70:	2094      	movs	r0, #148	@ 0x94
 8000b72:	f7ff fcc3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b7a:	121b      	asrs	r3, r3, #8
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fc41 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b86:	2095      	movs	r0, #149	@ 0x95
 8000b88:	f7ff fcb8 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (w);
 8000b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc38 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b98:	2096      	movs	r0, #150	@ 0x96
 8000b9a:	f7ff fcaf 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ba2:	121b      	asrs	r3, r3, #8
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc2d 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000bae:	2097      	movs	r0, #151	@ 0x97
 8000bb0:	f7ff fca4 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (h);
 8000bb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc24 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bc0:	2098      	movs	r0, #152	@ 0x98
 8000bc2:	f7ff fc9b 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bca:	121b      	asrs	r3, r3, #8
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc19 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd6:	20a1      	movs	r0, #161	@ 0xa1
 8000bd8:	f7ff fc90 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (r);
 8000bdc:	8b3b      	ldrh	r3, [r7, #24]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc11 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be6:	20a2      	movs	r0, #162	@ 0xa2
 8000be8:	f7ff fc88 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000bec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bf0:	121b      	asrs	r3, r3, #8
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc06 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bfc:	20a3      	movs	r0, #163	@ 0xa3
 8000bfe:	f7ff fc7d 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (r);
 8000c02:	8b3b      	ldrh	r3, [r7, #24]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fbfe 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c0c:	20a4      	movs	r0, #164	@ 0xa4
 8000c0e:	f7ff fc75 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c16:	121b      	asrs	r3, r3, #8
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbf3 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c22:	2063      	movs	r0, #99	@ 0x63
 8000c24:	f7ff fc6a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c28:	8bbb      	ldrh	r3, [r7, #28]
 8000c2a:	0adb      	lsrs	r3, r3, #11
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fbe9 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c36:	2064      	movs	r0, #100	@ 0x64
 8000c38:	f7ff fc60 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	115b      	asrs	r3, r3, #5
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fbdd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4e:	2065      	movs	r0, #101	@ 0x65
 8000c50:	f7ff fc54 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c54:	8bbb      	ldrh	r3, [r7, #28]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fbd2 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c64:	20a0      	movs	r0, #160	@ 0xa0
 8000c66:	f7ff fc49 	bl	80004fc <RA8875_write_command>
  if (filled)
 8000c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c72:	20e0      	movs	r0, #224	@ 0xe0
 8000c74:	f7ff fbc8 	bl	8000408 <RA8875_write_data>
 8000c78:	e002      	b.n	8000c80 <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c7a:	20a0      	movs	r0, #160	@ 0xa0
 8000c7c:	f7ff fbc4 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	20a0      	movs	r0, #160	@ 0xa0
 8000c84:	f7ff fc8c 	bl	80005a0 <RA8875_wait_poll>
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd90      	pop	{r4, r7, pc}

08000c90 <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4604      	mov	r4, r0
 8000c98:	4608      	mov	r0, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	807b      	strh	r3, [r7, #2]
 8000caa:	4613      	mov	r3, r2
 8000cac:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b21c      	sxth	r4, r3
 8000cbc:	88ba      	ldrh	r2, [r7, #4]
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	8b3b      	ldrh	r3, [r7, #24]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	4622      	mov	r2, r4
 8000cde:	f7ff fcbd 	bl	800065c <rectHelper>
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
	...

08000cec <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <RA8875_fill_screen+0x38>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <RA8875_fill_screen+0x3c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b219      	sxth	r1, r3
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	460b      	mov	r3, r1
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fca0 	bl	800065c <rectHelper>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000098 	.word	0x24000098
 8000d28:	2400009a 	.word	0x2400009a

08000d2c <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d4a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	8c3b      	ldrh	r3, [r7, #32]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4623      	mov	r3, r4
 8000d70:	f7ff fd1d 	bl	80007ae <triangleHelper>
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}

08000d7c <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
 8000d96:	4613      	mov	r3, r2
 8000d98:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d9a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000da2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000daa:	2301      	movs	r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	8b3b      	ldrh	r3, [r7, #24]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4623      	mov	r3, r4
 8000db4:	f7ff fddd 	bl	8000972 <ellipseHelper>
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}

08000dc0 <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af04      	add	r7, sp, #16
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	807b      	strh	r3, [r7, #2]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dde:	88fa      	ldrh	r2, [r7, #6]
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21c      	sxth	r4, r3
 8000de8:	88ba      	ldrh	r2, [r7, #4]
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	8bbb      	ldrh	r3, [r7, #28]
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	f7ff fe50 	bl	8000ab0 <roundRectHelper>
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1e:	2040      	movs	r0, #64	@ 0x40
 8000e20:	f7ff fb6c 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e24:	f7ff fb2c 	bl	8000480 <RA8875_read_data>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e32:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fae6 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e3c:	2021      	movs	r0, #33	@ 0x21
 8000e3e:	f7ff fb5d 	bl	80004fc <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e42:	f7ff fb1d 	bl	8000480 <RA8875_read_data>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e50:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fad7 	bl	8000408 <RA8875_write_data>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fbac 	bl	80005d4 <RA8875_apply_rotation_x>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fbc3 	bl	8000610 <RA8875_apply_rotation_y>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8e:	202a      	movs	r0, #42	@ 0x2a
 8000e90:	f7ff fb34 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fab5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9e:	202b      	movs	r0, #43	@ 0x2b
 8000ea0:	f7ff fb2c 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faab 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eb2:	202c      	movs	r0, #44	@ 0x2c
 8000eb4:	f7ff fb22 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff faa3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ec2:	202d      	movs	r0, #45	@ 0x2d
 8000ec4:	f7ff fb1a 	bl	80004fc <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa99 	bl	8000408 <RA8875_write_data>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eee:	2063      	movs	r0, #99	@ 0x63
 8000ef0:	f7ff fb04 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	0adb      	lsrs	r3, r3, #11
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fa83 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f02:	2064      	movs	r0, #100	@ 0x64
 8000f04:	f7ff fafa 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	115b      	asrs	r3, r3, #5
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fa77 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f1a:	2065      	movs	r0, #101	@ 0x65
 8000f1c:	f7ff faee 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa6c 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f30:	2060      	movs	r0, #96	@ 0x60
 8000f32:	f7ff fae3 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	0adb      	lsrs	r3, r3, #11
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f44:	2061      	movs	r0, #97	@ 0x61
 8000f46:	f7ff fad9 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	115b      	asrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa56 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f5c:	2062      	movs	r0, #98	@ 0x62
 8000f5e:	f7ff facd 	bl	80004fc <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa4b 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f72:	2022      	movs	r0, #34	@ 0x22
 8000f74:	f7ff fac2 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f78:	f7ff fa82 	bl	8000480 <RA8875_read_data>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f86:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fa3c 	bl	8000408 <RA8875_write_data>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d901      	bls.n	8000fac <RA8875_text_scale+0x14>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fac:	2022      	movs	r0, #34	@ 0x22
 8000fae:	f7ff faa5 	bl	80004fc <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fb2:	f7ff fa65 	bl	8000480 <RA8875_read_data>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa18 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd8:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <RA8875_text_scale+0x50>)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	7013      	strb	r3, [r2, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400009c 	.word	0x2400009c

08000fec <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <RA8875_text_write+0x1c>
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f96e 	bl	80002e0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff fa77 	bl	80004fc <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	e010      	b.n	8001036 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f3 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <RA8875_text_write+0x5c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <RA8875_text_write+0x44>
 800102a:	2001      	movs	r0, #1
 800102c:	f001 fa3c 	bl	80024a8 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ea      	bcc.n	8001014 <RA8875_text_write+0x28>
  }
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400009c 	.word	0x2400009c

0800104c <get_word_matrix>:
#include "fatfs.h"

#include <string.h>

void get_word_matrix(WordVector* word_matrix)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	f5ad 6dcf 	sub.w	sp, sp, #1656	@ 0x678
 8001052:	af00      	add	r7, sp, #0
 8001054:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 8001058:	f2a3 6374 	subw	r3, r3, #1652	@ 0x674
 800105c:	6018      	str	r0, [r3, #0]
	HAL_Delay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001062:	f001 fa21 	bl	80024a8 <HAL_Delay>
    FATFS fs;
    FIL file;
    FRESULT fr;

    fr = f_mount(&fs, "", 1);
 8001066:	f207 433c 	addw	r3, r7, #1084	@ 0x43c
 800106a:	2201      	movs	r2, #1
 800106c:	492e      	ldr	r1, [pc, #184]	@ (8001128 <get_word_matrix+0xdc>)
 800106e:	4618      	mov	r0, r3
 8001070:	f00c fdb6 	bl	800dbe0 <f_mount>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3673 	strb.w	r3, [r7, #1651]	@ 0x673
    if (fr != FR_OK) {		//1 means now
 800107a:	f897 3673 	ldrb.w	r3, [r7, #1651]	@ 0x673
 800107e:	2b00      	cmp	r3, #0
 8001080:	d14b      	bne.n	800111a <get_word_matrix+0xce>
    	return;
    }

    fr = f_open(&file, "floats.bin", FA_READ);
 8001082:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001086:	2201      	movs	r2, #1
 8001088:	4928      	ldr	r1, [pc, #160]	@ (800112c <get_word_matrix+0xe0>)
 800108a:	4618      	mov	r0, r3
 800108c:	f00c fdee 	bl	800dc6c <f_open>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 3673 	strb.w	r3, [r7, #1651]	@ 0x673
    if (fr != FR_OK) {
 8001096:	f897 3673 	ldrb.w	r3, [r7, #1651]	@ 0x673
 800109a:	2b00      	cmp	r3, #0
 800109c:	d13f      	bne.n	800111e <get_word_matrix+0xd2>
//    }

    float buffer[128];
    UINT bytesRead;
    FRESULT res;
    long totalFloats = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
    while (1) {
    	bytesRead = 0;
 80010a4:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 80010a8:	f5a3 63ce 	sub.w	r3, r3, #1648	@ 0x670
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
        res = f_read(&file, buffer, 512, &bytesRead);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	f107 010c 	add.w	r1, r7, #12
 80010b8:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80010bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c0:	f00c ff8e 	bl	800dfe0 <f_read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3672 	strb.w	r3, [r7, #1650]	@ 0x672
        if (res != FR_OK || totalFloats >= 10000000) {
 80010ca:	f897 3672 	ldrb.w	r3, [r7, #1650]	@ 0x672
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <get_word_matrix+0xb8>
 80010d2:	f8d7 3674 	ldr.w	r3, [r7, #1652]	@ 0x674
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <get_word_matrix+0xe4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	da13      	bge.n	8001104 <get_word_matrix+0xb8>
            break;
        }
        if(bytesRead != 512){
 80010dc:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 80010e0:	f5a3 63ce 	sub.w	r3, r3, #1648	@ 0x670
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ea:	d10a      	bne.n	8001102 <get_word_matrix+0xb6>
        	break;
        }
        totalFloats += bytesRead; // Keep track of the total floats processed
 80010ec:	f8d7 2674 	ldr.w	r2, [r7, #1652]	@ 0x674
 80010f0:	f507 63cf 	add.w	r3, r7, #1656	@ 0x678
 80010f4:	f5a3 63ce 	sub.w	r3, r3, #1648	@ 0x670
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
    	bytesRead = 0;
 8001100:	e7d0      	b.n	80010a4 <get_word_matrix+0x58>
        	break;
 8001102:	bf00      	nop
    }

    //close the file
    f_close(&file);
 8001104:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001108:	4618      	mov	r0, r3
 800110a:	f00d f926 	bl	800e35a <f_close>

    //unmount the SD card
    f_mount(NULL, "", 0);
 800110e:	2200      	movs	r2, #0
 8001110:	4905      	ldr	r1, [pc, #20]	@ (8001128 <get_word_matrix+0xdc>)
 8001112:	2000      	movs	r0, #0
 8001114:	f00c fd64 	bl	800dbe0 <f_mount>

    return;
 8001118:	e002      	b.n	8001120 <get_word_matrix+0xd4>
    	return;
 800111a:	bf00      	nop
 800111c:	e000      	b.n	8001120 <get_word_matrix+0xd4>
    	return;
 800111e:	bf00      	nop
}
 8001120:	f507 67cf 	add.w	r7, r7, #1656	@ 0x678
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800ef4c 	.word	0x0800ef4c
 800112c:	0800ef50 	.word	0x0800ef50
 8001130:	00989680 	.word	0x00989680

08001134 <game_matrix>:
	RA8875_draw_fill_triangle(CENTER_X+92, 85, CENTER_X+85, 50, CENTER_X+100, 50, RA8875_YELLOW);

	return;
}

void game_matrix(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	mode = GAME_MODE_PLAY;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <game_matrix+0x14>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	get_word_matrix(word_matrix);
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <game_matrix+0x18>)
 8001140:	f7ff ff84 	bl	800104c <get_word_matrix>
//	RA8875_text_write("kitchen", 8);
//	RA8875_graphic_mode();
//
//	HAL_TIM_Base_Start_IT(&htim6);

	return;
 8001144:	bf00      	nop
}
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24000268 	.word	0x24000268
 800114c:	240000a8 	.word	0x240000a8

08001150 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 8001156:	4bdb      	ldr	r3, [pc, #876]	@ (80014c4 <end_game+0x374>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001160:	f001 f9a2 	bl	80024a8 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8001164:	201f      	movs	r0, #31
 8001166:	f7ff fdc1 	bl	8000cec <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 800116a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	230a      	movs	r3, #10
 8001172:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001176:	215a      	movs	r1, #90	@ 0x5a
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fd89 	bl	8000c90 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	230a      	movs	r3, #10
 8001184:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001188:	2164      	movs	r1, #100	@ 0x64
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fd80 	bl	8000c90 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8001190:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011a6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80011aa:	21b4      	movs	r1, #180	@ 0xb4
 80011ac:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80011b0:	f7ff fdbc 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 80011b4:	231f      	movs	r3, #31
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011c8:	f240 22da 	movw	r2, #730	@ 0x2da
 80011cc:	21b4      	movs	r1, #180	@ 0xb4
 80011ce:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80011d2:	f7ff fdab 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80011d6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f240 238a 	movw	r3, #650	@ 0x28a
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011ec:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80011f0:	21b4      	movs	r1, #180	@ 0xb4
 80011f2:	f240 208a 	movw	r0, #650	@ 0x28a
 80011f6:	f7ff fd99 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 80011fa:	231f      	movs	r3, #31
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f240 2376 	movw	r3, #630	@ 0x276
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800120e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8001212:	21b4      	movs	r1, #180	@ 0xb4
 8001214:	f240 2076 	movw	r0, #630	@ 0x276
 8001218:	f7ff fd88 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 800121c:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2346      	movs	r3, #70	@ 0x46
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001230:	2214      	movs	r2, #20
 8001232:	21b4      	movs	r1, #180	@ 0xb4
 8001234:	2046      	movs	r0, #70	@ 0x46
 8001236:	f7ff fd79 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 800123a:	231f      	movs	r3, #31
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	235a      	movs	r3, #90	@ 0x5a
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800124c:	2228      	movs	r2, #40	@ 0x28
 800124e:	21b4      	movs	r1, #180	@ 0xb4
 8001250:	205a      	movs	r0, #90	@ 0x5a
 8001252:	f7ff fd6b 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8001256:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2378      	movs	r3, #120	@ 0x78
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800126a:	2246      	movs	r2, #70	@ 0x46
 800126c:	21b4      	movs	r1, #180	@ 0xb4
 800126e:	2078      	movs	r0, #120	@ 0x78
 8001270:	f7ff fd5c 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8001274:	231f      	movs	r3, #31
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	238c      	movs	r3, #140	@ 0x8c
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001286:	225a      	movs	r2, #90	@ 0x5a
 8001288:	21b4      	movs	r1, #180	@ 0xb4
 800128a:	208c      	movs	r0, #140	@ 0x8c
 800128c:	f7ff fd4e 	bl	8000d2c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8001290:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2378      	movs	r3, #120	@ 0x78
 8001298:	22c8      	movs	r2, #200	@ 0xc8
 800129a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800129e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80012a2:	f7ff fd6b 	bl	8000d7c <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 80012a6:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	f240 237e 	movw	r3, #638	@ 0x27e
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80012bc:	f240 224e 	movw	r2, #590	@ 0x24e
 80012c0:	21fa      	movs	r1, #250	@ 0xfa
 80012c2:	f240 204e 	movw	r0, #590	@ 0x24e
 80012c6:	f7ff fd31 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 80012ca:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	23ae      	movs	r3, #174	@ 0xae
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80012de:	22d4      	movs	r2, #212	@ 0xd4
 80012e0:	21fa      	movs	r1, #250	@ 0xfa
 80012e2:	20d4      	movs	r0, #212	@ 0xd4
 80012e4:	f7ff fd22 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 80012e8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2382      	movs	r3, #130	@ 0x82
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f240 13db 	movw	r3, #475	@ 0x1db
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	23c0      	movs	r3, #192	@ 0xc0
 80012fa:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80012fe:	21af      	movs	r1, #175	@ 0xaf
 8001300:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001304:	f7ff fd12 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001308:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2382      	movs	r3, #130	@ 0x82
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f240 1345 	movw	r3, #325	@ 0x145
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	23c0      	movs	r3, #192	@ 0xc0
 800131a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800131e:	21af      	movs	r1, #175	@ 0xaf
 8001320:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001324:	f7ff fd02 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001328:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800133e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001342:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001346:	f240 200a 	movw	r0, #522	@ 0x20a
 800134a:	f7ff fcef 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 800134e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001364:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001368:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800136c:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001370:	f7ff fcdc 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 8001374:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	23be      	movs	r3, #190	@ 0xbe
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	23c0      	movs	r3, #192	@ 0xc0
 8001386:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800138a:	21fa      	movs	r1, #250	@ 0xfa
 800138c:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001390:	f7ff fccc 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 8001394:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	23be      	movs	r3, #190	@ 0xbe
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	23dc      	movs	r3, #220	@ 0xdc
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	23c0      	movs	r3, #192	@ 0xc0
 80013a4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80013a8:	21fa      	movs	r1, #250	@ 0xfa
 80013aa:	20d4      	movs	r0, #212	@ 0xd4
 80013ac:	f7ff fcbe 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 80013b0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80013c6:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80013ca:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80013ce:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80013d2:	f7ff fcab 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 80013d6:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80013ec:	22d4      	movs	r2, #212	@ 0xd4
 80013ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80013f2:	20dc      	movs	r0, #220	@ 0xdc
 80013f4:	f7ff fc9a 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 80013f8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	237c      	movs	r3, #124	@ 0x7c
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800140c:	22e8      	movs	r2, #232	@ 0xe8
 800140e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001412:	20ca      	movs	r0, #202	@ 0xca
 8001414:	f7ff fc8a 	bl	8000d2c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	230a      	movs	r3, #10
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2346      	movs	r3, #70	@ 0x46
 8001424:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001428:	21cd      	movs	r1, #205	@ 0xcd
 800142a:	20fa      	movs	r0, #250	@ 0xfa
 800142c:	f7ff fcc8 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	230a      	movs	r3, #10
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2346      	movs	r3, #70	@ 0x46
 800143c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001440:	f240 1127 	movw	r1, #295	@ 0x127
 8001444:	20fa      	movs	r0, #250	@ 0xfa
 8001446:	f7ff fcbb 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 800144a:	2300      	movs	r3, #0
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2307      	movs	r3, #7
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2332      	movs	r3, #50	@ 0x32
 8001454:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001458:	21d7      	movs	r1, #215	@ 0xd7
 800145a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800145e:	f7ff fcaf 	bl	8000dc0 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2307      	movs	r3, #7
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2332      	movs	r3, #50	@ 0x32
 800146c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001470:	f240 1131 	movw	r1, #305	@ 0x131
 8001474:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001478:	f7ff fca2 	bl	8000dc0 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 800147c:	f7ff fccc 	bl	8000e18 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001480:	2100      	movs	r1, #0
 8001482:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001486:	f7ff fd2a 	bl	8000ede <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 800148a:	21d7      	movs	r1, #215	@ 0xd7
 800148c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001490:	f7ff fce7 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff fd7f 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 800149a:	210a      	movs	r1, #10
 800149c:	480a      	ldr	r0, [pc, #40]	@ (80014c8 <end_game+0x378>)
 800149e:	f7ff fda5 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 80014a2:	f240 1131 	movw	r1, #305	@ 0x131
 80014a6:	f240 1063 	movw	r0, #355	@ 0x163
 80014aa:	f7ff fcda 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 80014ae:	2104      	movs	r1, #4
 80014b0:	4806      	ldr	r0, [pc, #24]	@ (80014cc <end_game+0x37c>)
 80014b2:	f7ff fd9b 	bl	8000fec <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80014b6:	211f      	movs	r1, #31
 80014b8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80014bc:	f7ff fd0f 	bl	8000ede <RA8875_text_color>
 80014c0:	e006      	b.n	80014d0 <end_game+0x380>
 80014c2:	bf00      	nop
 80014c4:	24000268 	.word	0x24000268
 80014c8:	0800efbc 	.word	0x0800efbc
 80014cc:	0800efc8 	.word	0x0800efc8
	RA8875_text_cursor_position(CENTER_X-143, 20);
 80014d0:	2114      	movs	r1, #20
 80014d2:	f240 1001 	movw	r0, #257	@ 0x101
 80014d6:	f7ff fcc4 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80014da:	2003      	movs	r0, #3
 80014dc:	f7ff fd5c 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 80014e0:	2104      	movs	r1, #4
 80014e2:	4849      	ldr	r0, [pc, #292]	@ (8001608 <end_game+0x4b8>)
 80014e4:	f7ff fd82 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 80014e8:	2114      	movs	r1, #20
 80014ea:	f240 1095 	movw	r0, #405	@ 0x195
 80014ee:	f7ff fcb8 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 80014f2:	2104      	movs	r1, #4
 80014f4:	4845      	ldr	r0, [pc, #276]	@ (800160c <end_game+0x4bc>)
 80014f6:	f7ff fd79 	bl	8000fec <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80014fa:	211f      	movs	r1, #31
 80014fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001500:	f7ff fced 	bl	8000ede <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	200a      	movs	r0, #10
 8001508:	f7ff fcab 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fd43 	bl	8000f98 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 8001512:	2106      	movs	r1, #6
 8001514:	483e      	ldr	r0, [pc, #248]	@ (8001610 <end_game+0x4c0>)
 8001516:	f7ff fd69 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 800151a:	2100      	movs	r1, #0
 800151c:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001520:	f7ff fc9f 	bl	8000e62 <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 8001524:	210b      	movs	r1, #11
 8001526:	483b      	ldr	r0, [pc, #236]	@ (8001614 <end_game+0x4c4>)
 8001528:	f7ff fd60 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 800152c:	2137      	movs	r1, #55	@ 0x37
 800152e:	200a      	movs	r0, #10
 8001530:	f7ff fc97 	bl	8000e62 <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 8001534:	4b38      	ldr	r3, [pc, #224]	@ (8001618 <end_game+0x4c8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4938      	ldr	r1, [pc, #224]	@ (800161c <end_game+0x4cc>)
 800153c:	4618      	mov	r0, r3
 800153e:	f00d f859 	bl	800e5f4 <siprintf>
	RA8875_text_write(buffer, 3);
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2103      	movs	r1, #3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fd50 	bl	8000fec <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 800154c:	2137      	movs	r1, #55	@ 0x37
 800154e:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001552:	f7ff fc86 	bl	8000e62 <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <end_game+0x4c8>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <end_game+0x4d0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	dd03      	ble.n	800156a <end_game+0x41a>
 8001562:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <end_game+0x4c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2e      	ldr	r2, [pc, #184]	@ (8001620 <end_game+0x4d0>)
 8001568:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <end_game+0x4d0>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	492a      	ldr	r1, [pc, #168]	@ (800161c <end_game+0x4cc>)
 8001572:	4618      	mov	r0, r3
 8001574:	f00d f83e 	bl	800e5f4 <siprintf>
	RA8875_text_write(buffer, 3);
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2103      	movs	r1, #3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd35 	bl	8000fec <RA8875_text_write>
	RA8875_graphic_mode();
 8001582:	f7fe fff7 	bl	8000574 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 8001586:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2332      	movs	r3, #50	@ 0x32
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	23df      	movs	r3, #223	@ 0xdf
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2332      	movs	r3, #50	@ 0x32
 8001596:	22ee      	movs	r2, #238	@ 0xee
 8001598:	210a      	movs	r1, #10
 800159a:	20e7      	movs	r0, #231	@ 0xe7
 800159c:	f7ff fbc6 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 80015a0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	2332      	movs	r3, #50	@ 0x32
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	23e6      	movs	r3, #230	@ 0xe6
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2332      	movs	r3, #50	@ 0x32
 80015b0:	22f5      	movs	r2, #245	@ 0xf5
 80015b2:	2155      	movs	r1, #85	@ 0x55
 80015b4:	20ee      	movs	r0, #238	@ 0xee
 80015b6:	f7ff fbb9 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 80015ba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2332      	movs	r3, #50	@ 0x32
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f240 2337 	movw	r3, #567	@ 0x237
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2332      	movs	r3, #50	@ 0x32
 80015cc:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80015d0:	210a      	movs	r1, #10
 80015d2:	f240 202f 	movw	r0, #559	@ 0x22f
 80015d6:	f7ff fba9 	bl	8000d2c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80015da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2332      	movs	r3, #50	@ 0x32
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2332      	movs	r3, #50	@ 0x32
 80015ec:	f240 2221 	movw	r2, #545	@ 0x221
 80015f0:	2155      	movs	r1, #85	@ 0x55
 80015f2:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80015f6:	f7ff fb99 	bl	8000d2c <RA8875_draw_fill_triangle>

	score = 0;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <end_game+0x4c8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

	return;
 8001600:	bf00      	nop
}
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800eff8 	.word	0x0800eff8
 800160c:	0800f000 	.word	0x0800f000
 8001610:	0800f008 	.word	0x0800f008
 8001614:	0800f010 	.word	0x0800f010
 8001618:	2400026c 	.word	0x2400026c
 800161c:	0800f01c 	.word	0x0800f01c
 8001620:	24000270 	.word	0x24000270

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f000 feac 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 f81a 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f000 f9d2 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001634:	f000 f9a8 	bl	8001988 <MX_DMA_Init>
  MX_SPI1_Init();
 8001638:	f000 f8c2 	bl	80017c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800163c:	f000 f916 	bl	800186c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001640:	f009 fc4a 	bl	800aed8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8001644:	f000 f968 	bl	8001918 <MX_TIM6_Init>
  MX_I2S3_Init();
 8001648:	f000 f888 	bl	800175c <MX_I2S3_Init>
//
//  RA8875_pwm1_out(255);
//  RA8875_fill_screen(RA8875_RED);
//
//  title_screen();
  game_matrix();
 800164c:	f7ff fd72 	bl	8001134 <game_matrix>
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001656:	4802      	ldr	r0, [pc, #8]	@ (8001660 <main+0x3c>)
 8001658:	f004 f85e 	bl	8005718 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <main+0x38>
 8001660:	58020400 	.word	0x58020400

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09c      	sub	sp, #112	@ 0x70
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166e:	224c      	movs	r2, #76	@ 0x4c
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00c ffde 	bl	800e634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2220      	movs	r2, #32
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f00c ffd8 	bl	800e634 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001684:	2002      	movs	r0, #2
 8001686:	f004 f983 	bl	8005990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <SystemClock_Config+0xf0>)
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	4a30      	ldr	r2, [pc, #192]	@ (8001754 <SystemClock_Config+0xf0>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <SystemClock_Config+0xf0>)
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <SystemClock_Config+0xf4>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001758 <SystemClock_Config+0xf4>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <SystemClock_Config+0xf4>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016c0:	bf00      	nop
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <SystemClock_Config+0xf4>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ce:	d1f8      	bne.n	80016c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d0:	2302      	movs	r3, #2
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d8:	2340      	movs	r3, #64	@ 0x40
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016dc:	2302      	movs	r3, #2
 80016de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e0:	2300      	movs	r3, #0
 80016e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80016e8:	230c      	movs	r3, #12
 80016ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016f8:	230c      	movs	r3, #12
 80016fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f97b 	bl	8005a04 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001714:	f000 fa54 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	233f      	movs	r3, #63	@ 0x3f
 800171a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2303      	movs	r3, #3
 800171e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2102      	movs	r1, #2
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fdbb 	bl	80062b8 <HAL_RCC_ClockConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001748:	f000 fa3a 	bl	8001bc0 <Error_Handler>
  }
}
 800174c:	bf00      	nop
 800174e:	3770      	adds	r7, #112	@ 0x70
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58000400 	.word	0x58000400
 8001758:	58024800 	.word	0x58024800

0800175c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <MX_I2S3_Init+0x60>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001768:	220a      	movs	r2, #10
 800176a:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001780:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001784:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800178c:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <MX_I2S3_Init+0x5c>)
 80017a6:	f003 ffd1 	bl	800574c <HAL_I2S_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 80017b0:	f000 fa06 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	24000274 	.word	0x24000274
 80017bc:	40003c00 	.word	0x40003c00

080017c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017c6:	4a28      	ldr	r2, [pc, #160]	@ (8001868 <MX_SPI1_Init+0xa8>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017da:	2207      	movs	r2, #7
 80017dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_SPI1_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <MX_SPI1_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <MX_SPI1_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_SPI1_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_SPI1_Init+0xa4>)
 800183e:	2200      	movs	r2, #0
 8001840:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_SPI1_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_SPI1_Init+0xa4>)
 8001850:	f007 fda6 	bl	80093a0 <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800185a:	f000 f9b1 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	240002c8 	.word	0x240002c8
 8001868:	40013000 	.word	0x40013000

0800186c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <MX_SPI2_Init+0xa8>)
 8001874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001878:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800187c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800187e:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001886:	2207      	movs	r2, #7
 8001888:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <MX_SPI2_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_SPI2_Init+0xa4>)
 8001898:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800189c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_SPI2_Init+0xa4>)
 80018fc:	f007 fd50 	bl	80093a0 <HAL_SPI_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001906:	f000 f95b 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000350 	.word	0x24000350
 8001914:	40003800 	.word	0x40003800

08001918 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <MX_TIM6_Init+0x68>)
 800192a:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MX_TIM6_Init+0x6c>)
 800192c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_TIM6_Init+0x68>)
 8001930:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001934:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <MX_TIM6_Init+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <MX_TIM6_Init+0x68>)
 800193e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001942:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <MX_TIM6_Init+0x68>)
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <MX_TIM6_Init+0x68>)
 800194c:	f008 ffb3 	bl	800a8b6 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001956:	f000 f933 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800195a:	2320      	movs	r3, #32
 800195c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	@ (8001980 <MX_TIM6_Init+0x68>)
 8001968:	f009 fa0a 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001972:	f000 f925 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	240004c8 	.word	0x240004c8
 8001984:	40001000 	.word	0x40001000

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_DMA_Init+0x4c>)
 8001990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001994:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <MX_DMA_Init+0x4c>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <MX_DMA_Init+0x4c>)
 80019a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	200b      	movs	r0, #11
 80019b2:	f000 fe84 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019b6:	200b      	movs	r0, #11
 80019b8:	f000 fe9b 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	200c      	movs	r0, #12
 80019c2:	f000 fe7c 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019c6:	200c      	movs	r0, #12
 80019c8:	f000 fe93 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58024400 	.word	0x58024400

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f4:	4a6c      	ldr	r2, [pc, #432]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019fe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a12:	4a65      	ldr	r2, [pc, #404]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a30:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	4a56      	ldr	r2, [pc, #344]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a76:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <MX_GPIO_Init+0x1d0>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	4848      	ldr	r0, [pc, #288]	@ (8001bac <MX_GPIO_Init+0x1d4>)
 8001a8a:	f003 fe45 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2120      	movs	r1, #32
 8001a92:	4847      	ldr	r0, [pc, #284]	@ (8001bb0 <MX_GPIO_Init+0x1d8>)
 8001a94:	f003 fe40 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9e:	4845      	ldr	r0, [pc, #276]	@ (8001bb4 <MX_GPIO_Init+0x1dc>)
 8001aa0:	f003 fe3a 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	21e0      	movs	r1, #224	@ 0xe0
 8001aa8:	4843      	ldr	r0, [pc, #268]	@ (8001bb8 <MX_GPIO_Init+0x1e0>)
 8001aaa:	f003 fe35 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ab4:	483f      	ldr	r0, [pc, #252]	@ (8001bb4 <MX_GPIO_Init+0x1dc>)
 8001ab6:	f003 fe2f 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2103      	movs	r1, #3
 8001abe:	483f      	ldr	r0, [pc, #252]	@ (8001bbc <MX_GPIO_Init+0x1e4>)
 8001ac0:	f003 fe2a 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4834      	ldr	r0, [pc, #208]	@ (8001bac <MX_GPIO_Init+0x1d4>)
 8001adc:	f003 fc6c 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	482f      	ldr	r0, [pc, #188]	@ (8001bb0 <MX_GPIO_Init+0x1d8>)
 8001af4:	f003 fc60 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001af8:	2320      	movs	r3, #32
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4828      	ldr	r0, [pc, #160]	@ (8001bb0 <MX_GPIO_Init+0x1d8>)
 8001b10:	f003 fc52 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4821      	ldr	r0, [pc, #132]	@ (8001bb4 <MX_GPIO_Init+0x1dc>)
 8001b2e:	f003 fc43 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001b32:	231f      	movs	r3, #31
 8001b34:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <MX_GPIO_Init+0x1e0>)
 8001b46:	f003 fc37 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8001b4a:	23e0      	movs	r3, #224	@ 0xe0
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4815      	ldr	r0, [pc, #84]	@ (8001bb8 <MX_GPIO_Init+0x1e0>)
 8001b62:	f003 fc29 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDG_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin;
 8001b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDG_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_GPIO_Init+0x1dc>)
 8001b80:	f003 fc1a 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8001b84:	2303      	movs	r3, #3
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <MX_GPIO_Init+0x1e4>)
 8001b9c:	f003 fc0c 	bl	80053b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58020000 	.word	0x58020000
 8001bb0:	58020800 	.word	0x58020800
 8001bb4:	58020400 	.word	0x58020400
 8001bb8:	58020c00 	.word	0x58020c00
 8001bbc:	58021000 	.word	0x58021000

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <Error_Handler+0x8>

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_MspInit+0x30>)
 8001bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bd8:	4a08      	ldr	r2, [pc, #32]	@ (8001bfc <HAL_MspInit+0x30>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_MspInit+0x30>)
 8001be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	58024400 	.word	0x58024400

08001c00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0bc      	sub	sp, #240	@ 0xf0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	22c0      	movs	r2, #192	@ 0xc0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00c fd07 	bl	800e634 <memset>
  if(hi2s->Instance==SPI3)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_I2S_MspInit+0x158>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	f040 808f 	bne.w	8001d50 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 feac 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001c52:	f7ff ffb5 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	4a38      	ldr	r2, [pc, #224]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb6:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_I2S_MspInit+0x15c>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <HAL_I2S_MspInit+0x160>)
 8001cf4:	f003 fb60 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d12:	2306      	movs	r3, #6
 8001d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <HAL_I2S_MspInit+0x164>)
 8001d20:	f003 fb4a 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <HAL_I2S_MspInit+0x168>)
 8001d4c:	f003 fb34 	bl	80053b8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d50:	bf00      	nop
 8001d52:	37f0      	adds	r7, #240	@ 0xf0
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40003c00 	.word	0x40003c00
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	58020400 	.word	0x58020400
 8001d64:	58020000 	.word	0x58020000
 8001d68:	58020800 	.word	0x58020800

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0be      	sub	sp, #248	@ 0xf8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	22c0      	movs	r2, #192	@ 0xc0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00c fc51 	bl	800e634 <memset>
  if(hspi->Instance==SPI1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4aa2      	ldr	r2, [pc, #648]	@ (8002020 <HAL_SPI_MspInit+0x2b4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d16a      	bne.n	8001e72 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dae:	f107 0320 	add.w	r3, r7, #32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fdf6 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001dbe:	f7ff feff 	bl	8001bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc2:	4b98      	ldr	r3, [pc, #608]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc8:	4a96      	ldr	r2, [pc, #600]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001dca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dd2:	4b94      	ldr	r3, [pc, #592]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b90      	ldr	r3, [pc, #576]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de6:	4a8f      	ldr	r2, [pc, #572]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df0:	4b8c      	ldr	r3, [pc, #560]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b89      	ldr	r3, [pc, #548]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	4a87      	ldr	r2, [pc, #540]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0e:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1c:	23c0      	movs	r3, #192	@ 0xc0
 8001e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e34:	2305      	movs	r3, #5
 8001e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4879      	ldr	r0, [pc, #484]	@ (8002028 <HAL_SPI_MspInit+0x2bc>)
 8001e42:	f003 fab9 	bl	80053b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e46:	2308      	movs	r3, #8
 8001e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4870      	ldr	r0, [pc, #448]	@ (800202c <HAL_SPI_MspInit+0x2c0>)
 8001e6c:	f003 faa4 	bl	80053b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e70:	e0d2      	b.n	8002018 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6e      	ldr	r2, [pc, #440]	@ (8002030 <HAL_SPI_MspInit+0x2c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f040 80cd 	bne.w	8002018 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fd85 	bl	80069a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001ea0:	f7ff fe8e 	bl	8001bc0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b58      	ldr	r3, [pc, #352]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	4a56      	ldr	r2, [pc, #344]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed2:	4b54      	ldr	r3, [pc, #336]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	4b50      	ldr	r3, [pc, #320]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	4a4f      	ldr	r2, [pc, #316]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8002024 <HAL_SPI_MspInit+0x2b8>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001efe:	2306      	movs	r3, #6
 8001f00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f16:	2305      	movs	r3, #5
 8001f18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4844      	ldr	r0, [pc, #272]	@ (8002034 <HAL_SPI_MspInit+0x2c8>)
 8001f24:	f003 fa48 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f42:	2305      	movs	r3, #5
 8001f44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4837      	ldr	r0, [pc, #220]	@ (800202c <HAL_SPI_MspInit+0x2c0>)
 8001f50:	f003 fa32 	bl	80053b8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001f54:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f56:	4a39      	ldr	r2, [pc, #228]	@ (800203c <HAL_SPI_MspInit+0x2d0>)
 8001f58:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f5c:	2227      	movs	r2, #39	@ 0x27
 8001f5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f60:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001f80:	4b2d      	ldr	r3, [pc, #180]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f92:	4829      	ldr	r0, [pc, #164]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001f94:	f000 fbc8 	bl	8002728 <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_SPI_MspInit+0x236>
      Error_Handler();
 8001f9e:	f7ff fe0f 	bl	8001bc0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001fa6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001fa8:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <HAL_SPI_MspInit+0x2cc>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fb0:	4a24      	ldr	r2, [pc, #144]	@ (8002044 <HAL_SPI_MspInit+0x2d8>)
 8001fb2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fb6:	2228      	movs	r2, #40	@ 0x28
 8001fb8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fbc:	2240      	movs	r2, #64	@ 0x40
 8001fbe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fcc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001fec:	4814      	ldr	r0, [pc, #80]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8001fee:	f000 fb9b 	bl	8002728 <HAL_DMA_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8001ff8:	f7ff fde2 	bl	8001bc0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a10      	ldr	r2, [pc, #64]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8002000:	679a      	str	r2, [r3, #120]	@ 0x78
 8002002:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <HAL_SPI_MspInit+0x2d4>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2024      	movs	r0, #36	@ 0x24
 800200e:	f000 fb56 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002012:	2024      	movs	r0, #36	@ 0x24
 8002014:	f000 fb6d 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 8002018:	bf00      	nop
 800201a:	37f8      	adds	r7, #248	@ 0xf8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013000 	.word	0x40013000
 8002024:	58024400 	.word	0x58024400
 8002028:	58020000 	.word	0x58020000
 800202c:	58020400 	.word	0x58020400
 8002030:	40003800 	.word	0x40003800
 8002034:	58020800 	.word	0x58020800
 8002038:	240003d8 	.word	0x240003d8
 800203c:	40020010 	.word	0x40020010
 8002040:	24000450 	.word	0x24000450
 8002044:	40020028 	.word	0x40020028

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_TIM_Base_MspInit+0x48>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d116      	bne.n	8002088 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_Base_MspInit+0x4c>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2101      	movs	r1, #1
 800207c:	2036      	movs	r0, #54	@ 0x36
 800207e:	f000 fb1e 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002082:	2036      	movs	r0, #54	@ 0x36
 8002084:	f000 fb35 	bl	80026f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40001000 	.word	0x40001000
 8002094:	58024400 	.word	0x58024400

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <NMI_Handler+0x4>

080020a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <MemManage_Handler+0x4>

080020b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <UsageFault_Handler+0x4>

080020c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
//  }
//  if (Timer2) {
//	Timer2--;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ee:	f000 f9bb 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <DMA1_Stream0_IRQHandler+0x10>)
 80020fe:	f001 fe3d 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	240003d8 	.word	0x240003d8

0800210c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <DMA1_Stream1_IRQHandler+0x10>)
 8002112:	f001 fe33 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	24000450 	.word	0x24000450

08002120 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <SPI2_IRQHandler+0x10>)
 8002126:	f008 f865 	bl	800a1f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	24000350 	.word	0x24000350

08002134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800213a:	481b      	ldr	r0, [pc, #108]	@ (80021a8 <TIM6_DAC_IRQHandler+0x74>)
 800213c:	f008 fc41 	bl	800a9c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <TIM6_DAC_IRQHandler+0x78>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3b01      	subs	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <TIM6_DAC_IRQHandler+0x78>)
 800214a:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 800214c:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <TIM6_DAC_IRQHandler+0x78>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4916      	ldr	r1, [pc, #88]	@ (80021b0 <TIM6_DAC_IRQHandler+0x7c>)
 8002156:	4618      	mov	r0, r3
 8002158:	f00c fa4c 	bl	800e5f4 <siprintf>
  RA8875_text_mode();
 800215c:	f7fe fe5c 	bl	8000e18 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8002160:	2132      	movs	r1, #50	@ 0x32
 8002162:	20c8      	movs	r0, #200	@ 0xc8
 8002164:	f7fe fe7d 	bl	8000e62 <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002168:	211f      	movs	r1, #31
 800216a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800216e:	f7fe feb6 	bl	8000ede <RA8875_text_color>
  RA8875_text_scale(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f7fe ff10 	bl	8000f98 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe ff35 	bl	8000fec <RA8875_text_write>
  RA8875_graphic_mode();
 8002182:	f7fe f9f7 	bl	8000574 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <TIM6_DAC_IRQHandler+0x78>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <TIM6_DAC_IRQHandler+0x78>)
 8002190:	220a      	movs	r2, #10
 8002192:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 8002194:	4804      	ldr	r0, [pc, #16]	@ (80021a8 <TIM6_DAC_IRQHandler+0x74>)
 8002196:	f008 fbe5 	bl	800a964 <HAL_TIM_Base_Stop_IT>
	  end_game();
 800219a:	f7fe ffd9 	bl	8001150 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	240004c8 	.word	0x240004c8
 80021ac:	24000000 	.word	0x24000000
 80021b0:	0800f048 	.word	0x0800f048

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f00c fa2e 	bl	800e644 <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	24080000 	.word	0x24080000
 8002214:	00000400 	.word	0x00000400
 8002218:	24000514 	.word	0x24000514
 800221c:	240008b0 	.word	0x240008b0

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002224:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <SystemInit+0xe4>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	4a36      	ldr	r2, [pc, #216]	@ (8002304 <SystemInit+0xe4>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <SystemInit+0xe8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2b06      	cmp	r3, #6
 800223e:	d807      	bhi.n	8002250 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <SystemInit+0xe8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 030f 	bic.w	r3, r3, #15
 8002248:	4a2f      	ldr	r2, [pc, #188]	@ (8002308 <SystemInit+0xe8>)
 800224a:	f043 0307 	orr.w	r3, r3, #7
 800224e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002250:	4b2e      	ldr	r3, [pc, #184]	@ (800230c <SystemInit+0xec>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <SystemInit+0xec>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800225c:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <SystemInit+0xec>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002262:	4b2a      	ldr	r3, [pc, #168]	@ (800230c <SystemInit+0xec>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4929      	ldr	r1, [pc, #164]	@ (800230c <SystemInit+0xec>)
 8002268:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <SystemInit+0xf0>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <SystemInit+0xe8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800227a:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <SystemInit+0xe8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 030f 	bic.w	r3, r3, #15
 8002282:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <SystemInit+0xe8>)
 8002284:	f043 0307 	orr.w	r3, r3, #7
 8002288:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <SystemInit+0xec>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002290:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <SystemInit+0xec>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002296:	4b1d      	ldr	r3, [pc, #116]	@ (800230c <SystemInit+0xec>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <SystemInit+0xec>)
 800229e:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <SystemInit+0xf4>)
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <SystemInit+0xec>)
 80022a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002318 <SystemInit+0xf8>)
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022a8:	4b18      	ldr	r3, [pc, #96]	@ (800230c <SystemInit+0xec>)
 80022aa:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <SystemInit+0xfc>)
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <SystemInit+0xec>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022b4:	4b15      	ldr	r3, [pc, #84]	@ (800230c <SystemInit+0xec>)
 80022b6:	4a19      	ldr	r2, [pc, #100]	@ (800231c <SystemInit+0xfc>)
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <SystemInit+0xec>)
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <SystemInit+0xec>)
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <SystemInit+0xfc>)
 80022c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <SystemInit+0xec>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <SystemInit+0xec>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <SystemInit+0xec>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <SystemInit+0xec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <SystemInit+0x100>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <SystemInit+0x104>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ea:	d202      	bcs.n	80022f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <SystemInit+0x108>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <SystemInit+0x10c>)
 80022f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00
 8002308:	52002000 	.word	0x52002000
 800230c:	58024400 	.word	0x58024400
 8002310:	eaf6ed7f 	.word	0xeaf6ed7f
 8002314:	02020200 	.word	0x02020200
 8002318:	01ff0000 	.word	0x01ff0000
 800231c:	01010280 	.word	0x01010280
 8002320:	5c001000 	.word	0x5c001000
 8002324:	ffff0000 	.word	0xffff0000
 8002328:	51008108 	.word	0x51008108
 800232c:	52004000 	.word	0x52004000

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002334:	f7ff ff74 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	@ (8002370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	@ (800237c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f00c f977 	bl	800e650 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 8002362:	f7ff f95f 	bl	8001624 <main>
  bx  lr
 8002366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800236c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002370:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002374:	0800f530 	.word	0x0800f530
  ldr r2, =_sbss
 8002378:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 800237c:	240008ac 	.word	0x240008ac

08002380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC3_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238a:	2003      	movs	r0, #3
 800238c:	f000 f98c 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002390:	f004 f948 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_Init+0x68>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	4913      	ldr	r1, [pc, #76]	@ (80023f0 <HAL_Init+0x6c>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_Init+0x68>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a0e      	ldr	r2, [pc, #56]	@ (80023f0 <HAL_Init+0x6c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	4a0b      	ldr	r2, [pc, #44]	@ (80023f4 <HAL_Init+0x70>)
 80023c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c8:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_Init+0x74>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ce:	200f      	movs	r0, #15
 80023d0:	f000 f814 	bl	80023fc <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e002      	b.n	80023e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023de:	f7ff fbf5 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	58024400 	.word	0x58024400
 80023f0:	0800f094 	.word	0x0800f094
 80023f4:	24000008 	.word	0x24000008
 80023f8:	24000004 	.word	0x24000004

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_InitTick+0x60>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e021      	b.n	8002454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_InitTick+0x64>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_InitTick+0x60>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f971 	bl	800270e <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00e      	b.n	8002454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d80a      	bhi.n	8002452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 f93b 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002448:	4a06      	ldr	r2, [pc, #24]	@ (8002464 <HAL_InitTick+0x68>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000010 	.word	0x24000010
 8002460:	24000004 	.word	0x24000004
 8002464:	2400000c 	.word	0x2400000c

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	24000010 	.word	0x24000010
 800248c:	24000518 	.word	0x24000518

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	24000518 	.word	0x24000518

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000010 	.word	0x24000010

080024f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetREVID+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0c1b      	lsrs	r3, r3, #16
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	5c001000 	.word	0x5c001000

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0000 	.word	0x05fa0000

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	@ (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff40 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff90 	bl	80025fc <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5f 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff33 	bl	800256c <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa4 	bl	8002664 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff feae 	bl	8002490 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e316      	b.n	8002d6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a66      	ldr	r2, [pc, #408]	@ (80028e0 <HAL_DMA_Init+0x1b8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04a      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_DMA_Init+0x1bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d045      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	@ (80028e8 <HAL_DMA_Init+0x1c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d040      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a62      	ldr	r2, [pc, #392]	@ (80028ec <HAL_DMA_Init+0x1c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d03b      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a60      	ldr	r2, [pc, #384]	@ (80028f0 <HAL_DMA_Init+0x1c8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d036      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5f      	ldr	r2, [pc, #380]	@ (80028f4 <HAL_DMA_Init+0x1cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d031      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_DMA_Init+0x1d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02c      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	@ (80028fc <HAL_DMA_Init+0x1d4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d027      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_DMA_Init+0x1d8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d022      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a59      	ldr	r2, [pc, #356]	@ (8002904 <HAL_DMA_Init+0x1dc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d01d      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_DMA_Init+0x1e0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d018      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_DMA_Init+0x1e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	@ (8002910 <HAL_DMA_Init+0x1e8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a53      	ldr	r2, [pc, #332]	@ (8002914 <HAL_DMA_Init+0x1ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a51      	ldr	r2, [pc, #324]	@ (8002918 <HAL_DMA_Init+0x1f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a50      	ldr	r2, [pc, #320]	@ (800291c <HAL_DMA_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_Init+0xbc>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_DMA_Init+0xbe>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 813b 	beq.w	8002a62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <HAL_DMA_Init+0x1b8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_DMA_Init+0x1bc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a34      	ldr	r2, [pc, #208]	@ (80028e8 <HAL_DMA_Init+0x1c0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a33      	ldr	r2, [pc, #204]	@ (80028ec <HAL_DMA_Init+0x1c4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a31      	ldr	r2, [pc, #196]	@ (80028f0 <HAL_DMA_Init+0x1c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a30      	ldr	r2, [pc, #192]	@ (80028f4 <HAL_DMA_Init+0x1cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2e      	ldr	r2, [pc, #184]	@ (80028f8 <HAL_DMA_Init+0x1d0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2d      	ldr	r2, [pc, #180]	@ (80028fc <HAL_DMA_Init+0x1d4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2b      	ldr	r2, [pc, #172]	@ (8002900 <HAL_DMA_Init+0x1d8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2a      	ldr	r2, [pc, #168]	@ (8002904 <HAL_DMA_Init+0x1dc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <HAL_DMA_Init+0x1e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Init+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a27      	ldr	r2, [pc, #156]	@ (800290c <HAL_DMA_Init+0x1e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <HAL_DMA_Init+0x1e8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Init+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_DMA_Init+0x1ec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_DMA_Init+0x1f0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a21      	ldr	r2, [pc, #132]	@ (800291c <HAL_DMA_Init+0x1f4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_DMA_Init+0x186>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <HAL_DMA_Init+0x196>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028be:	e02f      	b.n	8002920 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c0:	f7ff fde6 	bl	8002490 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d928      	bls.n	8002920 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e246      	b.n	8002d6e <HAL_DMA_Init+0x646>
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1c8      	bne.n	80028c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4b83      	ldr	r3, [pc, #524]	@ (8002b48 <HAL_DMA_Init+0x420>)
 800293a:	4013      	ands	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002946:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	2b04      	cmp	r3, #4
 8002972:	d107      	bne.n	8002984 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002984:	4b71      	ldr	r3, [pc, #452]	@ (8002b4c <HAL_DMA_Init+0x424>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b71      	ldr	r3, [pc, #452]	@ (8002b50 <HAL_DMA_Init+0x428>)
 800298a:	4013      	ands	r3, r2
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002990:	d328      	bcc.n	80029e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b28      	cmp	r3, #40	@ 0x28
 8002998:	d903      	bls.n	80029a2 <HAL_DMA_Init+0x27a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b2e      	cmp	r3, #46	@ 0x2e
 80029a0:	d917      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80029a8:	d903      	bls.n	80029b2 <HAL_DMA_Init+0x28a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b42      	cmp	r3, #66	@ 0x42
 80029b0:	d90f      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b46      	cmp	r3, #70	@ 0x46
 80029b8:	d903      	bls.n	80029c2 <HAL_DMA_Init+0x29a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b48      	cmp	r3, #72	@ 0x48
 80029c0:	d907      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80029c8:	d905      	bls.n	80029d6 <HAL_DMA_Init+0x2ae>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b52      	cmp	r3, #82	@ 0x52
 80029d0:	d801      	bhi.n	80029d6 <HAL_DMA_Init+0x2ae>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_DMA_Init+0x2b0>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d117      	bne.n	8002a3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f002 fb3f 	bl	80050a4 <DMA_CheckFifoParam>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e197      	b.n	8002d6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f002 fa7a 	bl	8004f40 <DMA_CalcBaseAndBitshift>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	223f      	movs	r2, #63	@ 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e0cd      	b.n	8002bfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_DMA_Init+0x42c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <HAL_DMA_Init+0x430>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a38      	ldr	r2, [pc, #224]	@ (8002b5c <HAL_DMA_Init+0x434>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d018      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a36      	ldr	r2, [pc, #216]	@ (8002b60 <HAL_DMA_Init+0x438>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a35      	ldr	r2, [pc, #212]	@ (8002b64 <HAL_DMA_Init+0x43c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_DMA_Init+0x440>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_DMA_Init+0x444>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a30      	ldr	r2, [pc, #192]	@ (8002b70 <HAL_DMA_Init+0x448>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Init+0x38e>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_Init+0x390>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8097 	beq.w	8002bec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a24      	ldr	r2, [pc, #144]	@ (8002b54 <HAL_DMA_Init+0x42c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d021      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a22      	ldr	r2, [pc, #136]	@ (8002b58 <HAL_DMA_Init+0x430>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01c      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_DMA_Init+0x434>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d017      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <HAL_DMA_Init+0x438>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d012      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_DMA_Init+0x43c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <HAL_DMA_Init+0x440>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <HAL_DMA_Init+0x444>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <HAL_DMA_Init+0x448>)
 8002b0a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_DMA_Init+0x44c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d021      	beq.n	8002b78 <HAL_DMA_Init+0x450>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b80      	cmp	r3, #128	@ 0x80
 8002b3a:	d102      	bne.n	8002b42 <HAL_DMA_Init+0x41a>
 8002b3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b40:	e01b      	b.n	8002b7a <HAL_DMA_Init+0x452>
 8002b42:	2300      	movs	r3, #0
 8002b44:	e019      	b.n	8002b7a <HAL_DMA_Init+0x452>
 8002b46:	bf00      	nop
 8002b48:	fe10803f 	.word	0xfe10803f
 8002b4c:	5c001000 	.word	0x5c001000
 8002b50:	ffff0000 	.word	0xffff0000
 8002b54:	58025408 	.word	0x58025408
 8002b58:	5802541c 	.word	0x5802541c
 8002b5c:	58025430 	.word	0x58025430
 8002b60:	58025444 	.word	0x58025444
 8002b64:	58025458 	.word	0x58025458
 8002b68:	5802546c 	.word	0x5802546c
 8002b6c:	58025480 	.word	0x58025480
 8002b70:	58025494 	.word	0x58025494
 8002b74:	fffe000f 	.word	0xfffe000f
 8002b78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ba8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002d78 <HAL_DMA_Init+0x650>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d7c <HAL_DMA_Init+0x654>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f002 f9b5 	bl	8004f40 <DMA_CalcBaseAndBitshift>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2201      	movs	r2, #1
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e008      	b.n	8002bfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0b7      	b.n	8002d6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_DMA_Init+0x658>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d072      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_DMA_Init+0x65c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d06d      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_DMA_Init+0x660>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d068      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5a      	ldr	r2, [pc, #360]	@ (8002d8c <HAL_DMA_Init+0x664>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d063      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <HAL_DMA_Init+0x668>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_DMA_Init+0x66c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d059      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a56      	ldr	r2, [pc, #344]	@ (8002d98 <HAL_DMA_Init+0x670>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d054      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <HAL_DMA_Init+0x674>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04f      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a53      	ldr	r2, [pc, #332]	@ (8002da0 <HAL_DMA_Init+0x678>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a51      	ldr	r2, [pc, #324]	@ (8002da4 <HAL_DMA_Init+0x67c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_DMA_Init+0x680>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_DMA_Init+0x684>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_DMA_Init+0x688>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	@ (8002db4 <HAL_DMA_Init+0x68c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_DMA_Init+0x690>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a48      	ldr	r2, [pc, #288]	@ (8002dbc <HAL_DMA_Init+0x694>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a47      	ldr	r2, [pc, #284]	@ (8002dc0 <HAL_DMA_Init+0x698>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a45      	ldr	r2, [pc, #276]	@ (8002dc4 <HAL_DMA_Init+0x69c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a44      	ldr	r2, [pc, #272]	@ (8002dc8 <HAL_DMA_Init+0x6a0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a42      	ldr	r2, [pc, #264]	@ (8002dcc <HAL_DMA_Init+0x6a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a41      	ldr	r2, [pc, #260]	@ (8002dd0 <HAL_DMA_Init+0x6a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd4 <HAL_DMA_Init+0x6ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd8 <HAL_DMA_Init+0x6b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ddc <HAL_DMA_Init+0x6b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Init+0x5ca>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_Init+0x5cc>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d032      	beq.n	8002d5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f002 fa4f 	bl	800519c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b80      	cmp	r3, #128	@ 0x80
 8002d04:	d102      	bne.n	8002d0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_DMA_Init+0x624>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d80c      	bhi.n	8002d4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f002 facc 	bl	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e008      	b.n	8002d5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	a7fdabf8 	.word	0xa7fdabf8
 8002d7c:	cccccccd 	.word	0xcccccccd
 8002d80:	40020010 	.word	0x40020010
 8002d84:	40020028 	.word	0x40020028
 8002d88:	40020040 	.word	0x40020040
 8002d8c:	40020058 	.word	0x40020058
 8002d90:	40020070 	.word	0x40020070
 8002d94:	40020088 	.word	0x40020088
 8002d98:	400200a0 	.word	0x400200a0
 8002d9c:	400200b8 	.word	0x400200b8
 8002da0:	40020410 	.word	0x40020410
 8002da4:	40020428 	.word	0x40020428
 8002da8:	40020440 	.word	0x40020440
 8002dac:	40020458 	.word	0x40020458
 8002db0:	40020470 	.word	0x40020470
 8002db4:	40020488 	.word	0x40020488
 8002db8:	400204a0 	.word	0x400204a0
 8002dbc:	400204b8 	.word	0x400204b8
 8002dc0:	58025408 	.word	0x58025408
 8002dc4:	5802541c 	.word	0x5802541c
 8002dc8:	58025430 	.word	0x58025430
 8002dcc:	58025444 	.word	0x58025444
 8002dd0:	58025458 	.word	0x58025458
 8002dd4:	5802546c 	.word	0x5802546c
 8002dd8:	58025480 	.word	0x58025480
 8002ddc:	58025494 	.word	0x58025494

08002de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e226      	b.n	800324a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_DMA_Start_IT+0x2a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e21f      	b.n	800324a <HAL_DMA_Start_IT+0x46a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 820a 	bne.w	8003234 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a68      	ldr	r2, [pc, #416]	@ (8002fd4 <HAL_DMA_Start_IT+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a66      	ldr	r2, [pc, #408]	@ (8002fd8 <HAL_DMA_Start_IT+0x1f8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a65      	ldr	r2, [pc, #404]	@ (8002fdc <HAL_DMA_Start_IT+0x1fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a63      	ldr	r2, [pc, #396]	@ (8002fe0 <HAL_DMA_Start_IT+0x200>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a62      	ldr	r2, [pc, #392]	@ (8002fe4 <HAL_DMA_Start_IT+0x204>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a60      	ldr	r2, [pc, #384]	@ (8002fe8 <HAL_DMA_Start_IT+0x208>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fec <HAL_DMA_Start_IT+0x20c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff0 <HAL_DMA_Start_IT+0x210>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff4 <HAL_DMA_Start_IT+0x214>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff8 <HAL_DMA_Start_IT+0x218>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a59      	ldr	r2, [pc, #356]	@ (8002ffc <HAL_DMA_Start_IT+0x21c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a57      	ldr	r2, [pc, #348]	@ (8003000 <HAL_DMA_Start_IT+0x220>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a56      	ldr	r2, [pc, #344]	@ (8003004 <HAL_DMA_Start_IT+0x224>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a54      	ldr	r2, [pc, #336]	@ (8003008 <HAL_DMA_Start_IT+0x228>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	@ (800300c <HAL_DMA_Start_IT+0x22c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_Start_IT+0xee>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a51      	ldr	r2, [pc, #324]	@ (8003010 <HAL_DMA_Start_IT+0x230>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <HAL_DMA_Start_IT+0x100>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e007      	b.n	8002ef0 <HAL_DMA_Start_IT+0x110>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f001 fe76 	bl	8004be8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Start_IT+0x1f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04a      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Start_IT+0x1f8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d045      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Start_IT+0x1fc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d040      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Start_IT+0x200>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d03b      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Start_IT+0x204>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d036      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Start_IT+0x208>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d031      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Start_IT+0x20c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02c      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Start_IT+0x210>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d027      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Start_IT+0x214>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Start_IT+0x218>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01d      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Start_IT+0x21c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Start_IT+0x220>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Start_IT+0x224>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Start_IT+0x228>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_DMA_Start_IT+0x22c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_Start_IT+0x1bc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <HAL_DMA_Start_IT+0x230>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Start_IT+0x1c0>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_Start_IT+0x1c2>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d036      	beq.n	8003014 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 021e 	bic.w	r2, r3, #30
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0216 	orr.w	r2, r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d03e      	beq.n	8003040 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0208 	orr.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e035      	b.n	8003040 <HAL_DMA_Start_IT+0x260>
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 020e 	bic.w	r2, r3, #14
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 020a 	orr.w	r2, r2, #10
 8003026:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0204 	orr.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a83      	ldr	r2, [pc, #524]	@ (8003254 <HAL_DMA_Start_IT+0x474>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d072      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a82      	ldr	r2, [pc, #520]	@ (8003258 <HAL_DMA_Start_IT+0x478>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d06d      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a80      	ldr	r2, [pc, #512]	@ (800325c <HAL_DMA_Start_IT+0x47c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d068      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7f      	ldr	r2, [pc, #508]	@ (8003260 <HAL_DMA_Start_IT+0x480>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d063      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7d      	ldr	r2, [pc, #500]	@ (8003264 <HAL_DMA_Start_IT+0x484>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d05e      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7c      	ldr	r2, [pc, #496]	@ (8003268 <HAL_DMA_Start_IT+0x488>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d059      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7a      	ldr	r2, [pc, #488]	@ (800326c <HAL_DMA_Start_IT+0x48c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d054      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a79      	ldr	r2, [pc, #484]	@ (8003270 <HAL_DMA_Start_IT+0x490>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04f      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a77      	ldr	r2, [pc, #476]	@ (8003274 <HAL_DMA_Start_IT+0x494>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04a      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a76      	ldr	r2, [pc, #472]	@ (8003278 <HAL_DMA_Start_IT+0x498>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d045      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a74      	ldr	r2, [pc, #464]	@ (800327c <HAL_DMA_Start_IT+0x49c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d040      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a73      	ldr	r2, [pc, #460]	@ (8003280 <HAL_DMA_Start_IT+0x4a0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d03b      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a71      	ldr	r2, [pc, #452]	@ (8003284 <HAL_DMA_Start_IT+0x4a4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d036      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a70      	ldr	r2, [pc, #448]	@ (8003288 <HAL_DMA_Start_IT+0x4a8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6e      	ldr	r2, [pc, #440]	@ (800328c <HAL_DMA_Start_IT+0x4ac>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02c      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6d      	ldr	r2, [pc, #436]	@ (8003290 <HAL_DMA_Start_IT+0x4b0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d027      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003294 <HAL_DMA_Start_IT+0x4b4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003298 <HAL_DMA_Start_IT+0x4b8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a68      	ldr	r2, [pc, #416]	@ (800329c <HAL_DMA_Start_IT+0x4bc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a67      	ldr	r2, [pc, #412]	@ (80032a0 <HAL_DMA_Start_IT+0x4c0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_DMA_Start_IT+0x4c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a64      	ldr	r2, [pc, #400]	@ (80032a8 <HAL_DMA_Start_IT+0x4c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a62      	ldr	r2, [pc, #392]	@ (80032ac <HAL_DMA_Start_IT+0x4cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_Start_IT+0x350>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a61      	ldr	r2, [pc, #388]	@ (80032b0 <HAL_DMA_Start_IT+0x4d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x354>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_DMA_Start_IT+0x356>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01a      	beq.n	8003170 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003156:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800316a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800316e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a37      	ldr	r2, [pc, #220]	@ (8003254 <HAL_DMA_Start_IT+0x474>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04a      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a36      	ldr	r2, [pc, #216]	@ (8003258 <HAL_DMA_Start_IT+0x478>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d045      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a34      	ldr	r2, [pc, #208]	@ (800325c <HAL_DMA_Start_IT+0x47c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d040      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a33      	ldr	r2, [pc, #204]	@ (8003260 <HAL_DMA_Start_IT+0x480>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d03b      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a31      	ldr	r2, [pc, #196]	@ (8003264 <HAL_DMA_Start_IT+0x484>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d036      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a30      	ldr	r2, [pc, #192]	@ (8003268 <HAL_DMA_Start_IT+0x488>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d031      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	@ (800326c <HAL_DMA_Start_IT+0x48c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02c      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003270 <HAL_DMA_Start_IT+0x490>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d027      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003274 <HAL_DMA_Start_IT+0x494>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003278 <HAL_DMA_Start_IT+0x498>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01d      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	@ (800327c <HAL_DMA_Start_IT+0x49c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <HAL_DMA_Start_IT+0x4a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <HAL_DMA_Start_IT+0x4a4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a24      	ldr	r2, [pc, #144]	@ (8003288 <HAL_DMA_Start_IT+0x4a8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	@ (800328c <HAL_DMA_Start_IT+0x4ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_Start_IT+0x430>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	@ (8003290 <HAL_DMA_Start_IT+0x4b0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <HAL_DMA_Start_IT+0x442>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e012      	b.n	8003248 <HAL_DMA_Start_IT+0x468>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e009      	b.n	8003248 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	58025408 	.word	0x58025408
 8003298:	5802541c 	.word	0x5802541c
 800329c:	58025430 	.word	0x58025430
 80032a0:	58025444 	.word	0x58025444
 80032a4:	58025458 	.word	0x58025458
 80032a8:	5802546c 	.word	0x5802546c
 80032ac:	58025480 	.word	0x58025480
 80032b0:	58025494 	.word	0x58025494

080032b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff f8e8 	bl	8002490 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2dc      	b.n	8003886 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d008      	beq.n	80032ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e2cd      	b.n	8003886 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a76      	ldr	r2, [pc, #472]	@ (80034c8 <HAL_DMA_Abort+0x214>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04a      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a74      	ldr	r2, [pc, #464]	@ (80034cc <HAL_DMA_Abort+0x218>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d045      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a73      	ldr	r2, [pc, #460]	@ (80034d0 <HAL_DMA_Abort+0x21c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d040      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a71      	ldr	r2, [pc, #452]	@ (80034d4 <HAL_DMA_Abort+0x220>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03b      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a70      	ldr	r2, [pc, #448]	@ (80034d8 <HAL_DMA_Abort+0x224>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d036      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6e      	ldr	r2, [pc, #440]	@ (80034dc <HAL_DMA_Abort+0x228>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6d      	ldr	r2, [pc, #436]	@ (80034e0 <HAL_DMA_Abort+0x22c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d02c      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a6b      	ldr	r2, [pc, #428]	@ (80034e4 <HAL_DMA_Abort+0x230>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6a      	ldr	r2, [pc, #424]	@ (80034e8 <HAL_DMA_Abort+0x234>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	@ (80034ec <HAL_DMA_Abort+0x238>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a67      	ldr	r2, [pc, #412]	@ (80034f0 <HAL_DMA_Abort+0x23c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d018      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	@ (80034f4 <HAL_DMA_Abort+0x240>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a64      	ldr	r2, [pc, #400]	@ (80034f8 <HAL_DMA_Abort+0x244>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a62      	ldr	r2, [pc, #392]	@ (80034fc <HAL_DMA_Abort+0x248>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a61      	ldr	r2, [pc, #388]	@ (8003500 <HAL_DMA_Abort+0x24c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_DMA_Abort+0xd6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5f      	ldr	r2, [pc, #380]	@ (8003504 <HAL_DMA_Abort+0x250>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_DMA_Abort+0xda>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_DMA_Abort+0xdc>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 021e 	bic.w	r2, r2, #30
 80033a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e00a      	b.n	80033d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 020e 	bic.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3c      	ldr	r2, [pc, #240]	@ (80034c8 <HAL_DMA_Abort+0x214>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d072      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3a      	ldr	r2, [pc, #232]	@ (80034cc <HAL_DMA_Abort+0x218>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d06d      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a39      	ldr	r2, [pc, #228]	@ (80034d0 <HAL_DMA_Abort+0x21c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d068      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a37      	ldr	r2, [pc, #220]	@ (80034d4 <HAL_DMA_Abort+0x220>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d063      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a36      	ldr	r2, [pc, #216]	@ (80034d8 <HAL_DMA_Abort+0x224>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d05e      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a34      	ldr	r2, [pc, #208]	@ (80034dc <HAL_DMA_Abort+0x228>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d059      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a33      	ldr	r2, [pc, #204]	@ (80034e0 <HAL_DMA_Abort+0x22c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d054      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a31      	ldr	r2, [pc, #196]	@ (80034e4 <HAL_DMA_Abort+0x230>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d04f      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a30      	ldr	r2, [pc, #192]	@ (80034e8 <HAL_DMA_Abort+0x234>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <HAL_DMA_Abort+0x238>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2d      	ldr	r2, [pc, #180]	@ (80034f0 <HAL_DMA_Abort+0x23c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2b      	ldr	r2, [pc, #172]	@ (80034f4 <HAL_DMA_Abort+0x240>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2a      	ldr	r2, [pc, #168]	@ (80034f8 <HAL_DMA_Abort+0x244>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <HAL_DMA_Abort+0x248>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a27      	ldr	r2, [pc, #156]	@ (8003500 <HAL_DMA_Abort+0x24c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a25      	ldr	r2, [pc, #148]	@ (8003504 <HAL_DMA_Abort+0x250>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a24      	ldr	r2, [pc, #144]	@ (8003508 <HAL_DMA_Abort+0x254>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_DMA_Abort+0x258>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <HAL_DMA_Abort+0x25c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_DMA_Abort+0x260>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_DMA_Abort+0x264>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_DMA_Abort+0x268>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_DMA_Abort+0x26c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Abort+0x20e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_DMA_Abort+0x270>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d132      	bne.n	8003528 <HAL_DMA_Abort+0x274>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e031      	b.n	800352a <HAL_DMA_Abort+0x276>
 80034c6:	bf00      	nop
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	58025408 	.word	0x58025408
 800350c:	5802541c 	.word	0x5802541c
 8003510:	58025430 	.word	0x58025430
 8003514:	58025444 	.word	0x58025444
 8003518:	58025458 	.word	0x58025458
 800351c:	5802546c 	.word	0x5802546c
 8003520:	58025480 	.word	0x58025480
 8003524:	58025494 	.word	0x58025494
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800353c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6d      	ldr	r2, [pc, #436]	@ (80036f8 <HAL_DMA_Abort+0x444>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6b      	ldr	r2, [pc, #428]	@ (80036fc <HAL_DMA_Abort+0x448>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6a      	ldr	r2, [pc, #424]	@ (8003700 <HAL_DMA_Abort+0x44c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a68      	ldr	r2, [pc, #416]	@ (8003704 <HAL_DMA_Abort+0x450>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a67      	ldr	r2, [pc, #412]	@ (8003708 <HAL_DMA_Abort+0x454>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_DMA_Abort+0x458>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a64      	ldr	r2, [pc, #400]	@ (8003710 <HAL_DMA_Abort+0x45c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a62      	ldr	r2, [pc, #392]	@ (8003714 <HAL_DMA_Abort+0x460>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a61      	ldr	r2, [pc, #388]	@ (8003718 <HAL_DMA_Abort+0x464>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a5f      	ldr	r2, [pc, #380]	@ (800371c <HAL_DMA_Abort+0x468>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003720 <HAL_DMA_Abort+0x46c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003724 <HAL_DMA_Abort+0x470>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003728 <HAL_DMA_Abort+0x474>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a59      	ldr	r2, [pc, #356]	@ (800372c <HAL_DMA_Abort+0x478>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a58      	ldr	r2, [pc, #352]	@ (8003730 <HAL_DMA_Abort+0x47c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_Abort+0x32a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_DMA_Abort+0x480>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_Abort+0x33c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <HAL_DMA_Abort+0x34c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003600:	e013      	b.n	800362a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003602:	f7fe ff45 	bl	8002490 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b05      	cmp	r3, #5
 800360e:	d90c      	bls.n	800362a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e12d      	b.n	8003886 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2f      	ldr	r2, [pc, #188]	@ (80036f8 <HAL_DMA_Abort+0x444>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d04a      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2d      	ldr	r2, [pc, #180]	@ (80036fc <HAL_DMA_Abort+0x448>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d045      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <HAL_DMA_Abort+0x44c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d040      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_DMA_Abort+0x450>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d03b      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <HAL_DMA_Abort+0x454>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d036      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a27      	ldr	r2, [pc, #156]	@ (800370c <HAL_DMA_Abort+0x458>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a26      	ldr	r2, [pc, #152]	@ (8003710 <HAL_DMA_Abort+0x45c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d02c      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_DMA_Abort+0x460>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d027      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a23      	ldr	r2, [pc, #140]	@ (8003718 <HAL_DMA_Abort+0x464>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_DMA_Abort+0x468>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <HAL_DMA_Abort+0x46c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_DMA_Abort+0x470>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_DMA_Abort+0x474>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <HAL_DMA_Abort+0x478>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003730 <HAL_DMA_Abort+0x47c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_Abort+0x422>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <HAL_DMA_Abort+0x480>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_DMA_Abort+0x426>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_DMA_Abort+0x428>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02b      	beq.n	8003738 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	223f      	movs	r2, #63	@ 0x3f
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	e02a      	b.n	800374e <HAL_DMA_Abort+0x49a>
 80036f8:	40020010 	.word	0x40020010
 80036fc:	40020028 	.word	0x40020028
 8003700:	40020040 	.word	0x40020040
 8003704:	40020058 	.word	0x40020058
 8003708:	40020070 	.word	0x40020070
 800370c:	40020088 	.word	0x40020088
 8003710:	400200a0 	.word	0x400200a0
 8003714:	400200b8 	.word	0x400200b8
 8003718:	40020410 	.word	0x40020410
 800371c:	40020428 	.word	0x40020428
 8003720:	40020440 	.word	0x40020440
 8003724:	40020458 	.word	0x40020458
 8003728:	40020470 	.word	0x40020470
 800372c:	40020488 	.word	0x40020488
 8003730:	400204a0 	.word	0x400204a0
 8003734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2201      	movs	r2, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a4f      	ldr	r2, [pc, #316]	@ (8003890 <HAL_DMA_Abort+0x5dc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d072      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4d      	ldr	r2, [pc, #308]	@ (8003894 <HAL_DMA_Abort+0x5e0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d06d      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a4c      	ldr	r2, [pc, #304]	@ (8003898 <HAL_DMA_Abort+0x5e4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d068      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4a      	ldr	r2, [pc, #296]	@ (800389c <HAL_DMA_Abort+0x5e8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d063      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a49      	ldr	r2, [pc, #292]	@ (80038a0 <HAL_DMA_Abort+0x5ec>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d05e      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a47      	ldr	r2, [pc, #284]	@ (80038a4 <HAL_DMA_Abort+0x5f0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d059      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a46      	ldr	r2, [pc, #280]	@ (80038a8 <HAL_DMA_Abort+0x5f4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d054      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a44      	ldr	r2, [pc, #272]	@ (80038ac <HAL_DMA_Abort+0x5f8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04f      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a43      	ldr	r2, [pc, #268]	@ (80038b0 <HAL_DMA_Abort+0x5fc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04a      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a41      	ldr	r2, [pc, #260]	@ (80038b4 <HAL_DMA_Abort+0x600>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d045      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <HAL_DMA_Abort+0x604>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d040      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a3e      	ldr	r2, [pc, #248]	@ (80038bc <HAL_DMA_Abort+0x608>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3d      	ldr	r2, [pc, #244]	@ (80038c0 <HAL_DMA_Abort+0x60c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d036      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3b      	ldr	r2, [pc, #236]	@ (80038c4 <HAL_DMA_Abort+0x610>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d031      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3a      	ldr	r2, [pc, #232]	@ (80038c8 <HAL_DMA_Abort+0x614>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d02c      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <HAL_DMA_Abort+0x618>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <HAL_DMA_Abort+0x61c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <HAL_DMA_Abort+0x620>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a34      	ldr	r2, [pc, #208]	@ (80038d8 <HAL_DMA_Abort+0x624>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a32      	ldr	r2, [pc, #200]	@ (80038dc <HAL_DMA_Abort+0x628>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a31      	ldr	r2, [pc, #196]	@ (80038e0 <HAL_DMA_Abort+0x62c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2f      	ldr	r2, [pc, #188]	@ (80038e4 <HAL_DMA_Abort+0x630>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <HAL_DMA_Abort+0x634>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_DMA_Abort+0x58a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2c      	ldr	r2, [pc, #176]	@ (80038ec <HAL_DMA_Abort+0x638>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_DMA_Abort+0x58e>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_DMA_Abort+0x590>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003850:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003868:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003872:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028
 8003898:	40020040 	.word	0x40020040
 800389c:	40020058 	.word	0x40020058
 80038a0:	40020070 	.word	0x40020070
 80038a4:	40020088 	.word	0x40020088
 80038a8:	400200a0 	.word	0x400200a0
 80038ac:	400200b8 	.word	0x400200b8
 80038b0:	40020410 	.word	0x40020410
 80038b4:	40020428 	.word	0x40020428
 80038b8:	40020440 	.word	0x40020440
 80038bc:	40020458 	.word	0x40020458
 80038c0:	40020470 	.word	0x40020470
 80038c4:	40020488 	.word	0x40020488
 80038c8:	400204a0 	.word	0x400204a0
 80038cc:	400204b8 	.word	0x400204b8
 80038d0:	58025408 	.word	0x58025408
 80038d4:	5802541c 	.word	0x5802541c
 80038d8:	58025430 	.word	0x58025430
 80038dc:	58025444 	.word	0x58025444
 80038e0:	58025458 	.word	0x58025458
 80038e4:	5802546c 	.word	0x5802546c
 80038e8:	58025480 	.word	0x58025480
 80038ec:	58025494 	.word	0x58025494

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e237      	b.n	8003d72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d004      	beq.n	8003918 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2280      	movs	r2, #128	@ 0x80
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e22c      	b.n	8003d72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a90 <HAL_DMA_Abort_IT+0x1a0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5b      	ldr	r2, [pc, #364]	@ (8003a94 <HAL_DMA_Abort_IT+0x1a4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a59      	ldr	r2, [pc, #356]	@ (8003a98 <HAL_DMA_Abort_IT+0x1a8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a58      	ldr	r2, [pc, #352]	@ (8003a9c <HAL_DMA_Abort_IT+0x1ac>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a56      	ldr	r2, [pc, #344]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1b0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a55      	ldr	r2, [pc, #340]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a53      	ldr	r2, [pc, #332]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1b8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a52      	ldr	r2, [pc, #328]	@ (8003aac <HAL_DMA_Abort_IT+0x1bc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a50      	ldr	r2, [pc, #320]	@ (8003ab0 <HAL_DMA_Abort_IT+0x1c0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a4f      	ldr	r2, [pc, #316]	@ (8003ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a4c      	ldr	r2, [pc, #304]	@ (8003abc <HAL_DMA_Abort_IT+0x1cc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4a      	ldr	r2, [pc, #296]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a49      	ldr	r2, [pc, #292]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1d4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a47      	ldr	r2, [pc, #284]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1d8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_Abort_IT+0xc8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a46      	ldr	r2, [pc, #280]	@ (8003acc <HAL_DMA_Abort_IT+0x1dc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Abort_IT+0xcc>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_DMA_Abort_IT+0xce>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8086 	beq.w	8003ad0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <HAL_DMA_Abort_IT+0x1a0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04a      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2e      	ldr	r2, [pc, #184]	@ (8003a94 <HAL_DMA_Abort_IT+0x1a4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d045      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a98 <HAL_DMA_Abort_IT+0x1a8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d040      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2b      	ldr	r2, [pc, #172]	@ (8003a9c <HAL_DMA_Abort_IT+0x1ac>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d03b      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1b0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d036      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d031      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1b8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02c      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a25      	ldr	r2, [pc, #148]	@ (8003aac <HAL_DMA_Abort_IT+0x1bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d027      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a23      	ldr	r2, [pc, #140]	@ (8003ab0 <HAL_DMA_Abort_IT+0x1c0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a22      	ldr	r2, [pc, #136]	@ (8003ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d01d      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a20      	ldr	r2, [pc, #128]	@ (8003ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003abc <HAL_DMA_Abort_IT+0x1cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1d4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1d8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <HAL_DMA_Abort_IT+0x1dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <HAL_DMA_Abort_IT+0x18e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e178      	b.n	8003d70 <HAL_DMA_Abort_IT+0x480>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e16f      	b.n	8003d70 <HAL_DMA_Abort_IT+0x480>
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8003c98 <HAL_DMA_Abort_IT+0x3a8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d04a      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6b      	ldr	r2, [pc, #428]	@ (8003c9c <HAL_DMA_Abort_IT+0x3ac>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d045      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a69      	ldr	r2, [pc, #420]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d040      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a68      	ldr	r2, [pc, #416]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d03b      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a66      	ldr	r2, [pc, #408]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d036      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_DMA_Abort_IT+0x3bc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d031      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a63      	ldr	r2, [pc, #396]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02c      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a62      	ldr	r2, [pc, #392]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d027      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a60      	ldr	r2, [pc, #384]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cbc <HAL_DMA_Abort_IT+0x3cc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01d      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a59      	ldr	r2, [pc, #356]	@ (8003ccc <HAL_DMA_Abort_IT+0x3dc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a57      	ldr	r2, [pc, #348]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x290>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a56      	ldr	r2, [pc, #344]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <HAL_DMA_Abort_IT+0x2a2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e007      	b.n	8003ba2 <HAL_DMA_Abort_IT+0x2b2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8003c98 <HAL_DMA_Abort_IT+0x3a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d072      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8003c9c <HAL_DMA_Abort_IT+0x3ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d06d      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a39      	ldr	r2, [pc, #228]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d068      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a37      	ldr	r2, [pc, #220]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d063      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a36      	ldr	r2, [pc, #216]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d05e      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a34      	ldr	r2, [pc, #208]	@ (8003cac <HAL_DMA_Abort_IT+0x3bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d059      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a33      	ldr	r2, [pc, #204]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d054      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a31      	ldr	r2, [pc, #196]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d04f      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a30      	ldr	r2, [pc, #192]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d04a      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2e      	ldr	r2, [pc, #184]	@ (8003cbc <HAL_DMA_Abort_IT+0x3cc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d045      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d040      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d03b      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d036      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <HAL_DMA_Abort_IT+0x3dc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d031      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a27      	ldr	r2, [pc, #156]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d02c      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a25      	ldr	r2, [pc, #148]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d027      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a24      	ldr	r2, [pc, #144]	@ (8003cd8 <HAL_DMA_Abort_IT+0x3e8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a22      	ldr	r2, [pc, #136]	@ (8003cdc <HAL_DMA_Abort_IT+0x3ec>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01d      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3f0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3f4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3f8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	@ (8003cec <HAL_DMA_Abort_IT+0x3fc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf0 <HAL_DMA_Abort_IT+0x400>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x3a2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <HAL_DMA_Abort_IT+0x404>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d132      	bne.n	8003cf8 <HAL_DMA_Abort_IT+0x408>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e031      	b.n	8003cfa <HAL_DMA_Abort_IT+0x40a>
 8003c96:	bf00      	nop
 8003c98:	40020010 	.word	0x40020010
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	40020040 	.word	0x40020040
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	40020070 	.word	0x40020070
 8003cac:	40020088 	.word	0x40020088
 8003cb0:	400200a0 	.word	0x400200a0
 8003cb4:	400200b8 	.word	0x400200b8
 8003cb8:	40020410 	.word	0x40020410
 8003cbc:	40020428 	.word	0x40020428
 8003cc0:	40020440 	.word	0x40020440
 8003cc4:	40020458 	.word	0x40020458
 8003cc8:	40020470 	.word	0x40020470
 8003ccc:	40020488 	.word	0x40020488
 8003cd0:	400204a0 	.word	0x400204a0
 8003cd4:	400204b8 	.word	0x400204b8
 8003cd8:	58025408 	.word	0x58025408
 8003cdc:	5802541c 	.word	0x5802541c
 8003ce0:	58025430 	.word	0x58025430
 8003ce4:	58025444 	.word	0x58025444
 8003ce8:	58025458 	.word	0x58025458
 8003cec:	5802546c 	.word	0x5802546c
 8003cf0:	58025480 	.word	0x58025480
 8003cf4:	58025494 	.word	0x58025494
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop

08003d7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d88:	4b67      	ldr	r3, [pc, #412]	@ (8003f28 <HAL_DMA_IRQHandler+0x1ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a67      	ldr	r2, [pc, #412]	@ (8003f2c <HAL_DMA_IRQHandler+0x1b0>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a9b      	lsrs	r3, r3, #10
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a5f      	ldr	r2, [pc, #380]	@ (8003f30 <HAL_DMA_IRQHandler+0x1b4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f34 <HAL_DMA_IRQHandler+0x1b8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f38 <HAL_DMA_IRQHandler+0x1bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f3c <HAL_DMA_IRQHandler+0x1c0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a59      	ldr	r2, [pc, #356]	@ (8003f40 <HAL_DMA_IRQHandler+0x1c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a57      	ldr	r2, [pc, #348]	@ (8003f44 <HAL_DMA_IRQHandler+0x1c8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a56      	ldr	r2, [pc, #344]	@ (8003f48 <HAL_DMA_IRQHandler+0x1cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a54      	ldr	r2, [pc, #336]	@ (8003f4c <HAL_DMA_IRQHandler+0x1d0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a53      	ldr	r2, [pc, #332]	@ (8003f50 <HAL_DMA_IRQHandler+0x1d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a51      	ldr	r2, [pc, #324]	@ (8003f54 <HAL_DMA_IRQHandler+0x1d8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a50      	ldr	r2, [pc, #320]	@ (8003f58 <HAL_DMA_IRQHandler+0x1dc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4e      	ldr	r2, [pc, #312]	@ (8003f5c <HAL_DMA_IRQHandler+0x1e0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f60 <HAL_DMA_IRQHandler+0x1e4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4b      	ldr	r2, [pc, #300]	@ (8003f64 <HAL_DMA_IRQHandler+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f68 <HAL_DMA_IRQHandler+0x1ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_IRQHandler+0xd2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a48      	ldr	r2, [pc, #288]	@ (8003f6c <HAL_DMA_IRQHandler+0x1f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_IRQHandler+0xd6>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_DMA_IRQHandler+0xd8>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 842b 	beq.w	80046b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2208      	movs	r2, #8
 8003e64:	409a      	lsls	r2, r3
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80a2 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	@ (8003f30 <HAL_DMA_IRQHandler+0x1b4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <HAL_DMA_IRQHandler+0x1b8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	@ (8003f38 <HAL_DMA_IRQHandler+0x1bc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <HAL_DMA_IRQHandler+0x1c0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	@ (8003f40 <HAL_DMA_IRQHandler+0x1c4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a27      	ldr	r2, [pc, #156]	@ (8003f44 <HAL_DMA_IRQHandler+0x1c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <HAL_DMA_IRQHandler+0x1cc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a24      	ldr	r2, [pc, #144]	@ (8003f4c <HAL_DMA_IRQHandler+0x1d0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	@ (8003f50 <HAL_DMA_IRQHandler+0x1d4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	@ (8003f54 <HAL_DMA_IRQHandler+0x1d8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <HAL_DMA_IRQHandler+0x1dc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <HAL_DMA_IRQHandler+0x1e0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_DMA_IRQHandler+0x1e4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <HAL_DMA_IRQHandler+0x1e8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_DMA_IRQHandler+0x1ec>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x194>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_DMA_IRQHandler+0x1f0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d12f      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x1f4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e02e      	b.n	8003f84 <HAL_DMA_IRQHandler+0x208>
 8003f26:	bf00      	nop
 8003f28:	24000004 	.word	0x24000004
 8003f2c:	1b4e81b5 	.word	0x1b4e81b5
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d06e      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a69      	ldr	r2, [pc, #420]	@ (8004174 <HAL_DMA_IRQHandler+0x3f8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a67      	ldr	r2, [pc, #412]	@ (8004178 <HAL_DMA_IRQHandler+0x3fc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a66      	ldr	r2, [pc, #408]	@ (800417c <HAL_DMA_IRQHandler+0x400>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a64      	ldr	r2, [pc, #400]	@ (8004180 <HAL_DMA_IRQHandler+0x404>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a63      	ldr	r2, [pc, #396]	@ (8004184 <HAL_DMA_IRQHandler+0x408>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a61      	ldr	r2, [pc, #388]	@ (8004188 <HAL_DMA_IRQHandler+0x40c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a60      	ldr	r2, [pc, #384]	@ (800418c <HAL_DMA_IRQHandler+0x410>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5e      	ldr	r2, [pc, #376]	@ (8004190 <HAL_DMA_IRQHandler+0x414>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5d      	ldr	r2, [pc, #372]	@ (8004194 <HAL_DMA_IRQHandler+0x418>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5b      	ldr	r2, [pc, #364]	@ (8004198 <HAL_DMA_IRQHandler+0x41c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5a      	ldr	r2, [pc, #360]	@ (800419c <HAL_DMA_IRQHandler+0x420>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_DMA_IRQHandler+0x424>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a57      	ldr	r2, [pc, #348]	@ (80041a4 <HAL_DMA_IRQHandler+0x428>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a55      	ldr	r2, [pc, #340]	@ (80041a8 <HAL_DMA_IRQHandler+0x42c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a54      	ldr	r2, [pc, #336]	@ (80041ac <HAL_DMA_IRQHandler+0x430>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_DMA_IRQHandler+0x2ee>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a52      	ldr	r2, [pc, #328]	@ (80041b0 <HAL_DMA_IRQHandler+0x434>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10a      	bne.n	8004080 <HAL_DMA_IRQHandler+0x304>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e003      	b.n	8004088 <HAL_DMA_IRQHandler+0x30c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0202 	orr.w	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2204      	movs	r2, #4
 80040b2:	409a      	lsls	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 808f 	beq.w	80041dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <HAL_DMA_IRQHandler+0x3f8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <HAL_DMA_IRQHandler+0x3fc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a29      	ldr	r2, [pc, #164]	@ (800417c <HAL_DMA_IRQHandler+0x400>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a27      	ldr	r2, [pc, #156]	@ (8004180 <HAL_DMA_IRQHandler+0x404>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <HAL_DMA_IRQHandler+0x408>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a24      	ldr	r2, [pc, #144]	@ (8004188 <HAL_DMA_IRQHandler+0x40c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a23      	ldr	r2, [pc, #140]	@ (800418c <HAL_DMA_IRQHandler+0x410>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a21      	ldr	r2, [pc, #132]	@ (8004190 <HAL_DMA_IRQHandler+0x414>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a20      	ldr	r2, [pc, #128]	@ (8004194 <HAL_DMA_IRQHandler+0x418>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1e      	ldr	r2, [pc, #120]	@ (8004198 <HAL_DMA_IRQHandler+0x41c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <HAL_DMA_IRQHandler+0x420>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <HAL_DMA_IRQHandler+0x424>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1a      	ldr	r2, [pc, #104]	@ (80041a4 <HAL_DMA_IRQHandler+0x428>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_DMA_IRQHandler+0x42c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_DMA_IRQHandler+0x430>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_IRQHandler+0x3e2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <HAL_DMA_IRQHandler+0x434>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d12a      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x438>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e023      	b.n	80041bc <HAL_DMA_IRQHandler+0x440>
 8004174:	40020010 	.word	0x40020010
 8004178:	40020028 	.word	0x40020028
 800417c:	40020040 	.word	0x40020040
 8004180:	40020058 	.word	0x40020058
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	400200a0 	.word	0x400200a0
 8004190:	400200b8 	.word	0x400200b8
 8004194:	40020410 	.word	0x40020410
 8004198:	40020428 	.word	0x40020428
 800419c:	40020440 	.word	0x40020440
 80041a0:	40020458 	.word	0x40020458
 80041a4:	40020470 	.word	0x40020470
 80041a8:	40020488 	.word	0x40020488
 80041ac:	400204a0 	.word	0x400204a0
 80041b0:	400204b8 	.word	0x400204b8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2204      	movs	r2, #4
 80041ca:	409a      	lsls	r2, r3
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2210      	movs	r2, #16
 80041e6:	409a      	lsls	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a6 	beq.w	800433e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a85      	ldr	r2, [pc, #532]	@ (800440c <HAL_DMA_IRQHandler+0x690>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d04a      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a83      	ldr	r2, [pc, #524]	@ (8004410 <HAL_DMA_IRQHandler+0x694>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d045      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a82      	ldr	r2, [pc, #520]	@ (8004414 <HAL_DMA_IRQHandler+0x698>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a80      	ldr	r2, [pc, #512]	@ (8004418 <HAL_DMA_IRQHandler+0x69c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d03b      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7f      	ldr	r2, [pc, #508]	@ (800441c <HAL_DMA_IRQHandler+0x6a0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d036      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7d      	ldr	r2, [pc, #500]	@ (8004420 <HAL_DMA_IRQHandler+0x6a4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7c      	ldr	r2, [pc, #496]	@ (8004424 <HAL_DMA_IRQHandler+0x6a8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a7a      	ldr	r2, [pc, #488]	@ (8004428 <HAL_DMA_IRQHandler+0x6ac>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a79      	ldr	r2, [pc, #484]	@ (800442c <HAL_DMA_IRQHandler+0x6b0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a77      	ldr	r2, [pc, #476]	@ (8004430 <HAL_DMA_IRQHandler+0x6b4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a76      	ldr	r2, [pc, #472]	@ (8004434 <HAL_DMA_IRQHandler+0x6b8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a74      	ldr	r2, [pc, #464]	@ (8004438 <HAL_DMA_IRQHandler+0x6bc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a73      	ldr	r2, [pc, #460]	@ (800443c <HAL_DMA_IRQHandler+0x6c0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a71      	ldr	r2, [pc, #452]	@ (8004440 <HAL_DMA_IRQHandler+0x6c4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a70      	ldr	r2, [pc, #448]	@ (8004444 <HAL_DMA_IRQHandler+0x6c8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_IRQHandler+0x516>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a6e      	ldr	r2, [pc, #440]	@ (8004448 <HAL_DMA_IRQHandler+0x6cc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10a      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x52c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e009      	b.n	80042bc <HAL_DMA_IRQHandler+0x540>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d03e      	beq.n	800433e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2210      	movs	r2, #16
 80042ca:	409a      	lsls	r2, r3
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d024      	beq.n	800433e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e01f      	b.n	800433e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01b      	beq.n	800433e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
 800430e:	e016      	b.n	800433e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0208 	bic.w	r2, r2, #8
 800432c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2220      	movs	r2, #32
 8004348:	409a      	lsls	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8110 	beq.w	8004574 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <HAL_DMA_IRQHandler+0x690>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d04a      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2b      	ldr	r2, [pc, #172]	@ (8004410 <HAL_DMA_IRQHandler+0x694>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d045      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <HAL_DMA_IRQHandler+0x698>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d040      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a28      	ldr	r2, [pc, #160]	@ (8004418 <HAL_DMA_IRQHandler+0x69c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d03b      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a26      	ldr	r2, [pc, #152]	@ (800441c <HAL_DMA_IRQHandler+0x6a0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d036      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a25      	ldr	r2, [pc, #148]	@ (8004420 <HAL_DMA_IRQHandler+0x6a4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d031      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <HAL_DMA_IRQHandler+0x6a8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02c      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <HAL_DMA_IRQHandler+0x6ac>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d027      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a20      	ldr	r2, [pc, #128]	@ (800442c <HAL_DMA_IRQHandler+0x6b0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_DMA_IRQHandler+0x6b4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01d      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <HAL_DMA_IRQHandler+0x6b8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <HAL_DMA_IRQHandler+0x6bc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1a      	ldr	r2, [pc, #104]	@ (800443c <HAL_DMA_IRQHandler+0x6c0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a19      	ldr	r2, [pc, #100]	@ (8004440 <HAL_DMA_IRQHandler+0x6c4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a17      	ldr	r2, [pc, #92]	@ (8004444 <HAL_DMA_IRQHandler+0x6c8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x678>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a16      	ldr	r2, [pc, #88]	@ (8004448 <HAL_DMA_IRQHandler+0x6cc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d12b      	bne.n	800444c <HAL_DMA_IRQHandler+0x6d0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	e02a      	b.n	8004460 <HAL_DMA_IRQHandler+0x6e4>
 800440a:	bf00      	nop
 800440c:	40020010 	.word	0x40020010
 8004410:	40020028 	.word	0x40020028
 8004414:	40020040 	.word	0x40020040
 8004418:	40020058 	.word	0x40020058
 800441c:	40020070 	.word	0x40020070
 8004420:	40020088 	.word	0x40020088
 8004424:	400200a0 	.word	0x400200a0
 8004428:	400200b8 	.word	0x400200b8
 800442c:	40020410 	.word	0x40020410
 8004430:	40020428 	.word	0x40020428
 8004434:	40020440 	.word	0x40020440
 8004438:	40020458 	.word	0x40020458
 800443c:	40020470 	.word	0x40020470
 8004440:	40020488 	.word	0x40020488
 8004444:	400204a0 	.word	0x400204a0
 8004448:	400204b8 	.word	0x400204b8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8087 	beq.w	8004574 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2220      	movs	r2, #32
 8004470:	409a      	lsls	r2, r3
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b04      	cmp	r3, #4
 8004480:	d139      	bne.n	80044f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0216 	bic.w	r2, r2, #22
 8004490:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x736>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0208 	bic.w	r2, r2, #8
 80044c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	223f      	movs	r2, #63	@ 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 834a 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
          }
          return;
 80044f4:	e344      	b.n	8004b80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02c      	beq.n	8004574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e027      	b.n	8004574 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d023      	beq.n	8004574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
 8004534:	e01e      	b.n	8004574 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10f      	bne.n	8004564 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0210 	bic.w	r2, r2, #16
 8004552:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8306 	beq.w	8004b8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8088 	beq.w	800469c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2204      	movs	r2, #4
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7a      	ldr	r2, [pc, #488]	@ (8004784 <HAL_DMA_IRQHandler+0xa08>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04a      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a79      	ldr	r2, [pc, #484]	@ (8004788 <HAL_DMA_IRQHandler+0xa0c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d045      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a77      	ldr	r2, [pc, #476]	@ (800478c <HAL_DMA_IRQHandler+0xa10>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d040      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a76      	ldr	r2, [pc, #472]	@ (8004790 <HAL_DMA_IRQHandler+0xa14>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d03b      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a74      	ldr	r2, [pc, #464]	@ (8004794 <HAL_DMA_IRQHandler+0xa18>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d036      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a73      	ldr	r2, [pc, #460]	@ (8004798 <HAL_DMA_IRQHandler+0xa1c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a71      	ldr	r2, [pc, #452]	@ (800479c <HAL_DMA_IRQHandler+0xa20>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02c      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a70      	ldr	r2, [pc, #448]	@ (80047a0 <HAL_DMA_IRQHandler+0xa24>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d027      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6e      	ldr	r2, [pc, #440]	@ (80047a4 <HAL_DMA_IRQHandler+0xa28>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6d      	ldr	r2, [pc, #436]	@ (80047a8 <HAL_DMA_IRQHandler+0xa2c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01d      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6b      	ldr	r2, [pc, #428]	@ (80047ac <HAL_DMA_IRQHandler+0xa30>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6a      	ldr	r2, [pc, #424]	@ (80047b0 <HAL_DMA_IRQHandler+0xa34>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a68      	ldr	r2, [pc, #416]	@ (80047b4 <HAL_DMA_IRQHandler+0xa38>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a67      	ldr	r2, [pc, #412]	@ (80047b8 <HAL_DMA_IRQHandler+0xa3c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a65      	ldr	r2, [pc, #404]	@ (80047bc <HAL_DMA_IRQHandler+0xa40>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0x8b8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a64      	ldr	r2, [pc, #400]	@ (80047c0 <HAL_DMA_IRQHandler+0xa44>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_DMA_IRQHandler+0x8ca>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e007      	b.n	8004656 <HAL_DMA_IRQHandler+0x8da>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465e:	429a      	cmp	r2, r3
 8004660:	d307      	bcc.n	8004672 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f2      	bne.n	8004656 <HAL_DMA_IRQHandler+0x8da>
 8004670:	e000      	b.n	8004674 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004672:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2203      	movs	r2, #3
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800468a:	e003      	b.n	8004694 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8272 	beq.w	8004b8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
 80046ae:	e26c      	b.n	8004b8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a43      	ldr	r2, [pc, #268]	@ (80047c4 <HAL_DMA_IRQHandler+0xa48>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d022      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a42      	ldr	r2, [pc, #264]	@ (80047c8 <HAL_DMA_IRQHandler+0xa4c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d01d      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a40      	ldr	r2, [pc, #256]	@ (80047cc <HAL_DMA_IRQHandler+0xa50>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d018      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	@ (80047d0 <HAL_DMA_IRQHandler+0xa54>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3d      	ldr	r2, [pc, #244]	@ (80047d4 <HAL_DMA_IRQHandler+0xa58>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <HAL_DMA_IRQHandler+0xa5c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3a      	ldr	r2, [pc, #232]	@ (80047dc <HAL_DMA_IRQHandler+0xa60>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_DMA_IRQHandler+0x984>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a39      	ldr	r2, [pc, #228]	@ (80047e0 <HAL_DMA_IRQHandler+0xa64>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_DMA_IRQHandler+0x988>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_DMA_IRQHandler+0x98a>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 823f 	beq.w	8004b8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2204      	movs	r2, #4
 800471e:	409a      	lsls	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80cd 	beq.w	80048c4 <HAL_DMA_IRQHandler+0xb48>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80c7 	beq.w	80048c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2204      	movs	r2, #4
 8004740:	409a      	lsls	r2, r3
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d049      	beq.n	80047e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8210 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476c:	e20a      	b.n	8004b84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8206 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004780:	e200      	b.n	8004b84 <HAL_DMA_IRQHandler+0xe08>
 8004782:	bf00      	nop
 8004784:	40020010 	.word	0x40020010
 8004788:	40020028 	.word	0x40020028
 800478c:	40020040 	.word	0x40020040
 8004790:	40020058 	.word	0x40020058
 8004794:	40020070 	.word	0x40020070
 8004798:	40020088 	.word	0x40020088
 800479c:	400200a0 	.word	0x400200a0
 80047a0:	400200b8 	.word	0x400200b8
 80047a4:	40020410 	.word	0x40020410
 80047a8:	40020428 	.word	0x40020428
 80047ac:	40020440 	.word	0x40020440
 80047b0:	40020458 	.word	0x40020458
 80047b4:	40020470 	.word	0x40020470
 80047b8:	40020488 	.word	0x40020488
 80047bc:	400204a0 	.word	0x400204a0
 80047c0:	400204b8 	.word	0x400204b8
 80047c4:	58025408 	.word	0x58025408
 80047c8:	5802541c 	.word	0x5802541c
 80047cc:	58025430 	.word	0x58025430
 80047d0:	58025444 	.word	0x58025444
 80047d4:	58025458 	.word	0x58025458
 80047d8:	5802546c 	.word	0x5802546c
 80047dc:	58025480 	.word	0x58025480
 80047e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d160      	bne.n	80048b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7f      	ldr	r2, [pc, #508]	@ (80049f0 <HAL_DMA_IRQHandler+0xc74>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a7d      	ldr	r2, [pc, #500]	@ (80049f4 <HAL_DMA_IRQHandler+0xc78>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7c      	ldr	r2, [pc, #496]	@ (80049f8 <HAL_DMA_IRQHandler+0xc7c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a7a      	ldr	r2, [pc, #488]	@ (80049fc <HAL_DMA_IRQHandler+0xc80>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a79      	ldr	r2, [pc, #484]	@ (8004a00 <HAL_DMA_IRQHandler+0xc84>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a77      	ldr	r2, [pc, #476]	@ (8004a04 <HAL_DMA_IRQHandler+0xc88>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a76      	ldr	r2, [pc, #472]	@ (8004a08 <HAL_DMA_IRQHandler+0xc8c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a74      	ldr	r2, [pc, #464]	@ (8004a0c <HAL_DMA_IRQHandler+0xc90>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a73      	ldr	r2, [pc, #460]	@ (8004a10 <HAL_DMA_IRQHandler+0xc94>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a71      	ldr	r2, [pc, #452]	@ (8004a14 <HAL_DMA_IRQHandler+0xc98>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a70      	ldr	r2, [pc, #448]	@ (8004a18 <HAL_DMA_IRQHandler+0xc9c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6e      	ldr	r2, [pc, #440]	@ (8004a1c <HAL_DMA_IRQHandler+0xca0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6d      	ldr	r2, [pc, #436]	@ (8004a20 <HAL_DMA_IRQHandler+0xca4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6b      	ldr	r2, [pc, #428]	@ (8004a24 <HAL_DMA_IRQHandler+0xca8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a28 <HAL_DMA_IRQHandler+0xcac>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_IRQHandler+0xb12>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a68      	ldr	r2, [pc, #416]	@ (8004a2c <HAL_DMA_IRQHandler+0xcb0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <HAL_DMA_IRQHandler+0xb24>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0208 	bic.w	r2, r2, #8
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e007      	b.n	80048b0 <HAL_DMA_IRQHandler+0xb34>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8165 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c2:	e15f      	b.n	8004b84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2202      	movs	r2, #2
 80048ce:	409a      	lsls	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80c5 	beq.w	8004a64 <HAL_DMA_IRQHandler+0xce8>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80bf 	beq.w	8004a64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2202      	movs	r2, #2
 80048f0:	409a      	lsls	r2, r3
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 813a 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491c:	e134      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8130 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004930:	e12a      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 8089 	bne.w	8004a50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2b      	ldr	r2, [pc, #172]	@ (80049f0 <HAL_DMA_IRQHandler+0xc74>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04a      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <HAL_DMA_IRQHandler+0xc78>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d045      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a28      	ldr	r2, [pc, #160]	@ (80049f8 <HAL_DMA_IRQHandler+0xc7c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <HAL_DMA_IRQHandler+0xc80>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03b      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a25      	ldr	r2, [pc, #148]	@ (8004a00 <HAL_DMA_IRQHandler+0xc84>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <HAL_DMA_IRQHandler+0xc88>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a22      	ldr	r2, [pc, #136]	@ (8004a08 <HAL_DMA_IRQHandler+0xc8c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02c      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a20      	ldr	r2, [pc, #128]	@ (8004a0c <HAL_DMA_IRQHandler+0xc90>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d027      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <HAL_DMA_IRQHandler+0xc94>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_DMA_IRQHandler+0xc98>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <HAL_DMA_IRQHandler+0xc9c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a1c <HAL_DMA_IRQHandler+0xca0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a19      	ldr	r2, [pc, #100]	@ (8004a20 <HAL_DMA_IRQHandler+0xca4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <HAL_DMA_IRQHandler+0xca8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <HAL_DMA_IRQHandler+0xcac>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_DMA_IRQHandler+0xc62>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <HAL_DMA_IRQHandler+0xcb0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d128      	bne.n	8004a30 <HAL_DMA_IRQHandler+0xcb4>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0214 	bic.w	r2, r2, #20
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e027      	b.n	8004a40 <HAL_DMA_IRQHandler+0xcc4>
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 020a 	bic.w	r2, r2, #10
 8004a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8097 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a62:	e091      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8088 	beq.w	8004b8a <HAL_DMA_IRQHandler+0xe0e>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8082 	beq.w	8004b8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a41      	ldr	r2, [pc, #260]	@ (8004b90 <HAL_DMA_IRQHandler+0xe14>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d04a      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3f      	ldr	r2, [pc, #252]	@ (8004b94 <HAL_DMA_IRQHandler+0xe18>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d045      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b98 <HAL_DMA_IRQHandler+0xe1c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d040      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8004b9c <HAL_DMA_IRQHandler+0xe20>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d03b      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba0 <HAL_DMA_IRQHandler+0xe24>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d036      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a39      	ldr	r2, [pc, #228]	@ (8004ba4 <HAL_DMA_IRQHandler+0xe28>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d031      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	@ (8004ba8 <HAL_DMA_IRQHandler+0xe2c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d02c      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a36      	ldr	r2, [pc, #216]	@ (8004bac <HAL_DMA_IRQHandler+0xe30>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d027      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <HAL_DMA_IRQHandler+0xe34>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a33      	ldr	r2, [pc, #204]	@ (8004bb4 <HAL_DMA_IRQHandler+0xe38>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01d      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a32      	ldr	r2, [pc, #200]	@ (8004bb8 <HAL_DMA_IRQHandler+0xe3c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d018      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	@ (8004bbc <HAL_DMA_IRQHandler+0xe40>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <HAL_DMA_IRQHandler+0xe44>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <HAL_DMA_IRQHandler+0xe48>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <HAL_DMA_IRQHandler+0xe4c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xdaa>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2a      	ldr	r2, [pc, #168]	@ (8004bcc <HAL_DMA_IRQHandler+0xe50>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <HAL_DMA_IRQHandler+0xdbc>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 021c 	bic.w	r2, r2, #28
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e007      	b.n	8004b48 <HAL_DMA_IRQHandler+0xdcc>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 020e 	bic.w	r2, r2, #14
 8004b46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
 8004b7e:	e004      	b.n	8004b8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b8a:	3728      	adds	r7, #40	@ 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	40020058 	.word	0x40020058
 8004ba0:	40020070 	.word	0x40020070
 8004ba4:	40020088 	.word	0x40020088
 8004ba8:	400200a0 	.word	0x400200a0
 8004bac:	400200b8 	.word	0x400200b8
 8004bb0:	40020410 	.word	0x40020410
 8004bb4:	40020428 	.word	0x40020428
 8004bb8:	40020440 	.word	0x40020440
 8004bbc:	40020458 	.word	0x40020458
 8004bc0:	40020470 	.word	0x40020470
 8004bc4:	40020488 	.word	0x40020488
 8004bc8:	400204a0 	.word	0x400204a0
 8004bcc:	400204b8 	.word	0x400204b8

08004bd0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7f      	ldr	r2, [pc, #508]	@ (8004e04 <DMA_SetConfig+0x21c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d072      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7d      	ldr	r2, [pc, #500]	@ (8004e08 <DMA_SetConfig+0x220>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d06d      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e0c <DMA_SetConfig+0x224>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d068      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a7a      	ldr	r2, [pc, #488]	@ (8004e10 <DMA_SetConfig+0x228>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d063      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a79      	ldr	r2, [pc, #484]	@ (8004e14 <DMA_SetConfig+0x22c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d05e      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a77      	ldr	r2, [pc, #476]	@ (8004e18 <DMA_SetConfig+0x230>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d059      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a76      	ldr	r2, [pc, #472]	@ (8004e1c <DMA_SetConfig+0x234>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d054      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a74      	ldr	r2, [pc, #464]	@ (8004e20 <DMA_SetConfig+0x238>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04f      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a73      	ldr	r2, [pc, #460]	@ (8004e24 <DMA_SetConfig+0x23c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d04a      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a71      	ldr	r2, [pc, #452]	@ (8004e28 <DMA_SetConfig+0x240>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d045      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a70      	ldr	r2, [pc, #448]	@ (8004e2c <DMA_SetConfig+0x244>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d040      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	@ (8004e30 <DMA_SetConfig+0x248>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d03b      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e34 <DMA_SetConfig+0x24c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d036      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a6b      	ldr	r2, [pc, #428]	@ (8004e38 <DMA_SetConfig+0x250>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6a      	ldr	r2, [pc, #424]	@ (8004e3c <DMA_SetConfig+0x254>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d02c      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a68      	ldr	r2, [pc, #416]	@ (8004e40 <DMA_SetConfig+0x258>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d027      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a67      	ldr	r2, [pc, #412]	@ (8004e44 <DMA_SetConfig+0x25c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d022      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a65      	ldr	r2, [pc, #404]	@ (8004e48 <DMA_SetConfig+0x260>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01d      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a64      	ldr	r2, [pc, #400]	@ (8004e4c <DMA_SetConfig+0x264>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a62      	ldr	r2, [pc, #392]	@ (8004e50 <DMA_SetConfig+0x268>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a61      	ldr	r2, [pc, #388]	@ (8004e54 <DMA_SetConfig+0x26c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e58 <DMA_SetConfig+0x270>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e5c <DMA_SetConfig+0x274>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <DMA_SetConfig+0x10a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5c      	ldr	r2, [pc, #368]	@ (8004e60 <DMA_SetConfig+0x278>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <DMA_SetConfig+0x10e>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <DMA_SetConfig+0x110>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a39      	ldr	r2, [pc, #228]	@ (8004e04 <DMA_SetConfig+0x21c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04a      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a38      	ldr	r2, [pc, #224]	@ (8004e08 <DMA_SetConfig+0x220>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a36      	ldr	r2, [pc, #216]	@ (8004e0c <DMA_SetConfig+0x224>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d040      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a35      	ldr	r2, [pc, #212]	@ (8004e10 <DMA_SetConfig+0x228>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03b      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a33      	ldr	r2, [pc, #204]	@ (8004e14 <DMA_SetConfig+0x22c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d036      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a32      	ldr	r2, [pc, #200]	@ (8004e18 <DMA_SetConfig+0x230>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d031      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a30      	ldr	r2, [pc, #192]	@ (8004e1c <DMA_SetConfig+0x234>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02c      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <DMA_SetConfig+0x238>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d027      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e24 <DMA_SetConfig+0x23c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2c      	ldr	r2, [pc, #176]	@ (8004e28 <DMA_SetConfig+0x240>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	@ (8004e2c <DMA_SetConfig+0x244>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <DMA_SetConfig+0x248>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a27      	ldr	r2, [pc, #156]	@ (8004e34 <DMA_SetConfig+0x24c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a26      	ldr	r2, [pc, #152]	@ (8004e38 <DMA_SetConfig+0x250>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a24      	ldr	r2, [pc, #144]	@ (8004e3c <DMA_SetConfig+0x254>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <DMA_SetConfig+0x1d0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a23      	ldr	r2, [pc, #140]	@ (8004e40 <DMA_SetConfig+0x258>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <DMA_SetConfig+0x1d4>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <DMA_SetConfig+0x1d6>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d059      	beq.n	8004e76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	223f      	movs	r2, #63	@ 0x3f
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004de0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d138      	bne.n	8004e64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e02:	e086      	b.n	8004f12 <DMA_SetConfig+0x32a>
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
 8004e44:	58025408 	.word	0x58025408
 8004e48:	5802541c 	.word	0x5802541c
 8004e4c:	58025430 	.word	0x58025430
 8004e50:	58025444 	.word	0x58025444
 8004e54:	58025458 	.word	0x58025458
 8004e58:	5802546c 	.word	0x5802546c
 8004e5c:	58025480 	.word	0x58025480
 8004e60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
}
 8004e74:	e04d      	b.n	8004f12 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a29      	ldr	r2, [pc, #164]	@ (8004f20 <DMA_SetConfig+0x338>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a27      	ldr	r2, [pc, #156]	@ (8004f24 <DMA_SetConfig+0x33c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a26      	ldr	r2, [pc, #152]	@ (8004f28 <DMA_SetConfig+0x340>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a24      	ldr	r2, [pc, #144]	@ (8004f2c <DMA_SetConfig+0x344>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a23      	ldr	r2, [pc, #140]	@ (8004f30 <DMA_SetConfig+0x348>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <DMA_SetConfig+0x34c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a20      	ldr	r2, [pc, #128]	@ (8004f38 <DMA_SetConfig+0x350>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <DMA_SetConfig+0x2de>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <DMA_SetConfig+0x354>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <DMA_SetConfig+0x2e2>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <DMA_SetConfig+0x2e4>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d108      	bne.n	8004f02 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	60da      	str	r2, [r3, #12]
}
 8004f00:	e007      	b.n	8004f12 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	58025408 	.word	0x58025408
 8004f24:	5802541c 	.word	0x5802541c
 8004f28:	58025430 	.word	0x58025430
 8004f2c:	58025444 	.word	0x58025444
 8004f30:	58025458 	.word	0x58025458
 8004f34:	5802546c 	.word	0x5802546c
 8004f38:	58025480 	.word	0x58025480
 8004f3c:	58025494 	.word	0x58025494

08004f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a42      	ldr	r2, [pc, #264]	@ (8005058 <DMA_CalcBaseAndBitshift+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a41      	ldr	r2, [pc, #260]	@ (800505c <DMA_CalcBaseAndBitshift+0x11c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3f      	ldr	r2, [pc, #252]	@ (8005060 <DMA_CalcBaseAndBitshift+0x120>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005064 <DMA_CalcBaseAndBitshift+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3c      	ldr	r2, [pc, #240]	@ (8005068 <DMA_CalcBaseAndBitshift+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800506c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a39      	ldr	r2, [pc, #228]	@ (8005070 <DMA_CalcBaseAndBitshift+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <DMA_CalcBaseAndBitshift+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a36      	ldr	r2, [pc, #216]	@ (8005078 <DMA_CalcBaseAndBitshift+0x138>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <DMA_CalcBaseAndBitshift+0x13c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a33      	ldr	r2, [pc, #204]	@ (8005080 <DMA_CalcBaseAndBitshift+0x140>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a32      	ldr	r2, [pc, #200]	@ (8005084 <DMA_CalcBaseAndBitshift+0x144>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <DMA_CalcBaseAndBitshift+0x148>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <DMA_CalcBaseAndBitshift+0x14c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005090 <DMA_CalcBaseAndBitshift+0x150>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xa8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <DMA_CalcBaseAndBitshift+0x154>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <DMA_CalcBaseAndBitshift+0xac>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <DMA_CalcBaseAndBitshift+0xae>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3b10      	subs	r3, #16
 8004ffa:	4a27      	ldr	r2, [pc, #156]	@ (8005098 <DMA_CalcBaseAndBitshift+0x158>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	4a24      	ldr	r2, [pc, #144]	@ (800509c <DMA_CalcBaseAndBitshift+0x15c>)
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d908      	bls.n	800502c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005022:	4013      	ands	r3, r2
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	659a      	str	r2, [r3, #88]	@ 0x58
 800502a:	e00d      	b.n	8005048 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6593      	str	r3, [r2, #88]	@ 0x58
 800503a:	e005      	b.n	8005048 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	aaaaaaab 	.word	0xaaaaaaab
 800509c:	0800f0a4 	.word	0x0800f0a4
 80050a0:	fffffc00 	.word	0xfffffc00

080050a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d120      	bne.n	80050fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d858      	bhi.n	8005172 <DMA_CheckFifoParam+0xce>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <DMA_CheckFifoParam+0x24>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050eb 	.word	0x080050eb
 80050d0:	080050d9 	.word	0x080050d9
 80050d4:	08005173 	.word	0x08005173
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d048      	beq.n	8005176 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050e8:	e045      	b.n	8005176 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050f2:	d142      	bne.n	800517a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f8:	e03f      	b.n	800517a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005102:	d123      	bne.n	800514c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	2b03      	cmp	r3, #3
 800510a:	d838      	bhi.n	800517e <DMA_CheckFifoParam+0xda>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <DMA_CheckFifoParam+0x70>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005125 	.word	0x08005125
 8005118:	0800512b 	.word	0x0800512b
 800511c:	08005125 	.word	0x08005125
 8005120:	0800513d 	.word	0x0800513d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
        break;
 8005128:	e030      	b.n	800518c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d025      	beq.n	8005182 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800513a:	e022      	b.n	8005182 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005144:	d11f      	bne.n	8005186 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800514a:	e01c      	b.n	8005186 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	2b02      	cmp	r3, #2
 8005152:	d902      	bls.n	800515a <DMA_CheckFifoParam+0xb6>
 8005154:	2b03      	cmp	r3, #3
 8005156:	d003      	beq.n	8005160 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005158:	e018      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
        break;
 800515e:	e015      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
    break;
 8005170:	e00b      	b.n	800518a <DMA_CheckFifoParam+0xe6>
        break;
 8005172:	bf00      	nop
 8005174:	e00a      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005176:	bf00      	nop
 8005178:	e008      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 800517a:	bf00      	nop
 800517c:	e006      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <DMA_CheckFifoParam+0xe8>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <DMA_CheckFifoParam+0xe8>
    break;
 800518a:	bf00      	nop
    }
  }

  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop

0800519c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a36      	ldr	r2, [pc, #216]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a35      	ldr	r2, [pc, #212]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a33      	ldr	r2, [pc, #204]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a32      	ldr	r2, [pc, #200]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	3b08      	subs	r3, #8
 800520c:	4a28      	ldr	r2, [pc, #160]	@ (80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a24      	ldr	r2, [pc, #144]	@ (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005228:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005238:	e024      	b.n	8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	3b10      	subs	r3, #16
 8005242:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a1c      	ldr	r2, [pc, #112]	@ (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d806      	bhi.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a1b      	ldr	r2, [pc, #108]	@ (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d902      	bls.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3308      	adds	r3, #8
 8005260:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4b18      	ldr	r3, [pc, #96]	@ (80052c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005274:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	58025408 	.word	0x58025408
 8005294:	5802541c 	.word	0x5802541c
 8005298:	58025430 	.word	0x58025430
 800529c:	58025444 	.word	0x58025444
 80052a0:	58025458 	.word	0x58025458
 80052a4:	5802546c 	.word	0x5802546c
 80052a8:	58025480 	.word	0x58025480
 80052ac:	58025494 	.word	0x58025494
 80052b0:	cccccccd 	.word	0xcccccccd
 80052b4:	16009600 	.word	0x16009600
 80052b8:	58025880 	.word	0x58025880
 80052bc:	aaaaaaab 	.word	0xaaaaaaab
 80052c0:	400204b8 	.word	0x400204b8
 80052c4:	4002040f 	.word	0x4002040f
 80052c8:	10008200 	.word	0x10008200
 80052cc:	40020880 	.word	0x40020880

080052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d04a      	beq.n	800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d847      	bhi.n	800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a25      	ldr	r2, [pc, #148]	@ (8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a24      	ldr	r2, [pc, #144]	@ (800538c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01d      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	@ (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	@ (8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d101      	bne.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005340:	2300      	movs	r3, #0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005358:	671a      	str	r2, [r3, #112]	@ 0x70
 800535a:	e009      	b.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800536e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	58025408 	.word	0x58025408
 800538c:	5802541c 	.word	0x5802541c
 8005390:	58025430 	.word	0x58025430
 8005394:	58025444 	.word	0x58025444
 8005398:	58025458 	.word	0x58025458
 800539c:	5802546c 	.word	0x5802546c
 80053a0:	58025480 	.word	0x58025480
 80053a4:	58025494 	.word	0x58025494
 80053a8:	1600963f 	.word	0x1600963f
 80053ac:	58025940 	.word	0x58025940
 80053b0:	1000823f 	.word	0x1000823f
 80053b4:	40020940 	.word	0x40020940

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	@ 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80053c6:	4b89      	ldr	r3, [pc, #548]	@ (80055ec <HAL_GPIO_Init+0x234>)
 80053c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053ca:	e194      	b.n	80056f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8186 	beq.w	80056f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d005      	beq.n	80053fc <HAL_GPIO_Init+0x44>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d130      	bne.n	800545e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005432:	2201      	movs	r2, #1
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0201 	and.w	r2, r3, #1
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	4313      	orrs	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b03      	cmp	r3, #3
 8005468:	d017      	beq.n	800549a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	2203      	movs	r2, #3
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4313      	orrs	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d123      	bne.n	80054ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	08da      	lsrs	r2, r3, #3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3208      	adds	r2, #8
 80054ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	220f      	movs	r2, #15
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	08da      	lsrs	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3208      	adds	r2, #8
 80054e8:	69b9      	ldr	r1, [r7, #24]
 80054ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2203      	movs	r2, #3
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80e0 	beq.w	80056f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005530:	4b2f      	ldr	r3, [pc, #188]	@ (80055f0 <HAL_GPIO_Init+0x238>)
 8005532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005536:	4a2e      	ldr	r2, [pc, #184]	@ (80055f0 <HAL_GPIO_Init+0x238>)
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005540:	4b2b      	ldr	r3, [pc, #172]	@ (80055f0 <HAL_GPIO_Init+0x238>)
 8005542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800554e:	4a29      	ldr	r2, [pc, #164]	@ (80055f4 <HAL_GPIO_Init+0x23c>)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	3302      	adds	r3, #2
 8005556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a20      	ldr	r2, [pc, #128]	@ (80055f8 <HAL_GPIO_Init+0x240>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d052      	beq.n	8005620 <HAL_GPIO_Init+0x268>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <HAL_GPIO_Init+0x244>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_GPIO_Init+0x22e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1e      	ldr	r2, [pc, #120]	@ (8005600 <HAL_GPIO_Init+0x248>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d02b      	beq.n	80055e2 <HAL_GPIO_Init+0x22a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1d      	ldr	r2, [pc, #116]	@ (8005604 <HAL_GPIO_Init+0x24c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d025      	beq.n	80055de <HAL_GPIO_Init+0x226>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_GPIO_Init+0x250>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01f      	beq.n	80055da <HAL_GPIO_Init+0x222>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_GPIO_Init+0x254>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d019      	beq.n	80055d6 <HAL_GPIO_Init+0x21e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005610 <HAL_GPIO_Init+0x258>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_GPIO_Init+0x21a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a19      	ldr	r2, [pc, #100]	@ (8005614 <HAL_GPIO_Init+0x25c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00d      	beq.n	80055ce <HAL_GPIO_Init+0x216>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a18      	ldr	r2, [pc, #96]	@ (8005618 <HAL_GPIO_Init+0x260>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <HAL_GPIO_Init+0x212>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a17      	ldr	r2, [pc, #92]	@ (800561c <HAL_GPIO_Init+0x264>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <HAL_GPIO_Init+0x20e>
 80055c2:	2309      	movs	r3, #9
 80055c4:	e02d      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055c6:	230a      	movs	r3, #10
 80055c8:	e02b      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055ca:	2308      	movs	r3, #8
 80055cc:	e029      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055ce:	2307      	movs	r3, #7
 80055d0:	e027      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055d2:	2306      	movs	r3, #6
 80055d4:	e025      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055d6:	2305      	movs	r3, #5
 80055d8:	e023      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055da:	2304      	movs	r3, #4
 80055dc:	e021      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055de:	2303      	movs	r3, #3
 80055e0:	e01f      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e01d      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e01b      	b.n	8005622 <HAL_GPIO_Init+0x26a>
 80055ea:	bf00      	nop
 80055ec:	58000080 	.word	0x58000080
 80055f0:	58024400 	.word	0x58024400
 80055f4:	58000400 	.word	0x58000400
 80055f8:	58020000 	.word	0x58020000
 80055fc:	58020400 	.word	0x58020400
 8005600:	58020800 	.word	0x58020800
 8005604:	58020c00 	.word	0x58020c00
 8005608:	58021000 	.word	0x58021000
 800560c:	58021400 	.word	0x58021400
 8005610:	58021800 	.word	0x58021800
 8005614:	58021c00 	.word	0x58021c00
 8005618:	58022000 	.word	0x58022000
 800561c:	58022400 	.word	0x58022400
 8005620:	2300      	movs	r3, #0
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	f002 0203 	and.w	r2, r2, #3
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	4093      	lsls	r3, r2
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4313      	orrs	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005632:	4938      	ldr	r1, [pc, #224]	@ (8005714 <HAL_GPIO_Init+0x35c>)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005666:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f ae63 	bne.w	80053cc <HAL_GPIO_Init+0x14>
  }
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	3724      	adds	r7, #36	@ 0x24
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	58000400 	.word	0x58000400

08005718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
 8005724:	4613      	mov	r3, r2
 8005726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005728:	787b      	ldrb	r3, [r7, #1]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005734:	e003      	b.n	800573e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	041a      	lsls	r2, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	619a      	str	r2, [r3, #24]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e10d      	b.n	800597a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc fa44 	bl	8001c00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d107      	bne.n	800579e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d008      	beq.n	80057c0 <HAL_I2S_Init+0x74>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d004      	beq.n	80057c0 <HAL_I2S_Init+0x74>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b0a      	cmp	r3, #10
 80057bc:	f040 8087 	bne.w	80058ce <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d05a      	beq.n	800587e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80057d0:	2302      	movs	r3, #2
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e001      	b.n	80057da <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80057d6:	2301      	movs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b30      	cmp	r3, #48	@ 0x30
 80057e0:	d003      	beq.n	80057ea <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80057e6:	2bb0      	cmp	r3, #176	@ 0xb0
 80057e8:	d102      	bne.n	80057f0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80057ea:	2301      	movs	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e001      	b.n	80057f4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80057f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	f002 fadc 	bl	8007db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005800:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580a:	d113      	bne.n	8005834 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800580c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	fa22 f303 	lsr.w	r3, r2, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	fbb2 f2f3 	udiv	r2, r2, r3
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	3305      	adds	r3, #5
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e014      	b.n	800585e <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005834:	2220      	movs	r2, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	fbb2 f2f3 	udiv	r2, r2, r3
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	3305      	adds	r3, #5
 800585c:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a48      	ldr	r2, [pc, #288]	@ (8005984 <HAL_I2S_Init+0x238>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	08db      	lsrs	r3, r3, #3
 8005868:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	e003      	b.n	8005886 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800587e:	2302      	movs	r3, #2
 8005880:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d102      	bne.n	8005892 <HAL_I2S_Init+0x146>
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d002      	beq.n	8005898 <HAL_I2S_Init+0x14c>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2bff      	cmp	r3, #255	@ 0xff
 8005896:	d907      	bls.n	80058a8 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	f043 0210 	orr.w	r2, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e068      	b.n	800597a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058b8:	4b33      	ldr	r3, [pc, #204]	@ (8005988 <HAL_I2S_Init+0x23c>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	0411      	lsls	r1, r2, #16
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	0612      	lsls	r2, r2, #24
 80058c4:	4311      	orrs	r1, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058d4:	4b2d      	ldr	r3, [pc, #180]	@ (800598c <HAL_I2S_Init+0x240>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6851      	ldr	r1, [r2, #4]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6892      	ldr	r2, [r2, #8]
 80058e0:	4311      	orrs	r1, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68d2      	ldr	r2, [r2, #12]
 80058e6:	4311      	orrs	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6992      	ldr	r2, [r2, #24]
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6a12      	ldr	r2, [r2, #32]
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6912      	ldr	r2, [r2, #16]
 80058fe:	430a      	orrs	r2, r1
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8005914:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005924:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d007      	beq.n	8005954 <HAL_I2S_Init+0x208>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d003      	beq.n	8005954 <HAL_I2S_Init+0x208>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b0a      	cmp	r3, #10
 8005952:	d10a      	bne.n	800596a <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	cccccccd 	.word	0xcccccccd
 8005988:	fe00ffff 	.word	0xfe00ffff
 800598c:	fdff9040 	.word	0xfdff9040

08005990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005998:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <HAL_PWREx_ConfigSupply+0x70>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d00a      	beq.n	80059ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059a4:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <HAL_PWREx_ConfigSupply+0x70>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d001      	beq.n	80059b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e01f      	b.n	80059f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e01d      	b.n	80059f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059ba:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_PWREx_ConfigSupply+0x70>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f023 0207 	bic.w	r2, r3, #7
 80059c2:	490f      	ldr	r1, [pc, #60]	@ (8005a00 <HAL_PWREx_ConfigSupply+0x70>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059ca:	f7fc fd61 	bl	8002490 <HAL_GetTick>
 80059ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059d0:	e009      	b.n	80059e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059d2:	f7fc fd5d 	bl	8002490 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059e0:	d901      	bls.n	80059e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e007      	b.n	80059f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_PWREx_ConfigSupply+0x70>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059f2:	d1ee      	bne.n	80059d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	58024800 	.word	0x58024800

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	@ 0x30
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f000 bc48 	b.w	80062a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8088 	beq.w	8005b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a26:	4b99      	ldr	r3, [pc, #612]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a30:	4b96      	ldr	r3, [pc, #600]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCC_OscConfig+0x48>
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	2b18      	cmp	r3, #24
 8005a40:	d111      	bne.n	8005a66 <HAL_RCC_OscConfig+0x62>
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d06d      	beq.n	8005b34 <HAL_RCC_OscConfig+0x130>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d169      	bne.n	8005b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f000 bc21 	b.w	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x7a>
 8005a70:	4b86      	ldr	r3, [pc, #536]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a85      	ldr	r2, [pc, #532]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e02e      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x9c>
 8005a86:	4b81      	ldr	r3, [pc, #516]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a80      	ldr	r2, [pc, #512]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4b7e      	ldr	r3, [pc, #504]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a7d      	ldr	r2, [pc, #500]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005aaa:	4b78      	ldr	r3, [pc, #480]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a77      	ldr	r2, [pc, #476]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b75      	ldr	r3, [pc, #468]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a74      	ldr	r2, [pc, #464]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005ac4:	4b71      	ldr	r3, [pc, #452]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a70      	ldr	r2, [pc, #448]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b6e      	ldr	r3, [pc, #440]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fc fcd4 	bl	8002490 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fc fcd0 	bl	8002490 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	@ 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e3d4      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afe:	4b63      	ldr	r3, [pc, #396]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fcc0 	bl	8002490 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fc fcbc 	bl	8002490 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	@ 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e3c0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b26:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x110>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80ca 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b44:	4b51      	ldr	r3, [pc, #324]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_RCC_OscConfig+0x166>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b18      	cmp	r3, #24
 8005b5e:	d156      	bne.n	8005c0e <HAL_RCC_OscConfig+0x20a>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d151      	bne.n	8005c0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b6a:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e392      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b82:	4b42      	ldr	r3, [pc, #264]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0219 	bic.w	r2, r3, #25
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	493f      	ldr	r1, [pc, #252]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fc fc7c 	bl	8002490 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fc fc78 	bl	8002490 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e37c      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bae:	4b37      	ldr	r3, [pc, #220]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	f7fc fc99 	bl	80024f0 <HAL_GetREVID>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d817      	bhi.n	8005bf8 <HAL_RCC_OscConfig+0x1f4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d108      	bne.n	8005be2 <HAL_RCC_OscConfig+0x1de>
 8005bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be0:	e07a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	031b      	lsls	r3, r3, #12
 8005bf0:	4926      	ldr	r1, [pc, #152]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf6:	e06f      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	4b24      	ldr	r3, [pc, #144]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	061b      	lsls	r3, r3, #24
 8005c06:	4921      	ldr	r1, [pc, #132]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	e064      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d047      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 0219 	bic.w	r2, r3, #25
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	491a      	ldr	r1, [pc, #104]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fc fc32 	bl	8002490 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fc fc2e 	bl	8002490 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e332      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c42:	4b12      	ldr	r3, [pc, #72]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4e:	f7fc fc4f 	bl	80024f0 <HAL_GetREVID>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d819      	bhi.n	8005c90 <HAL_RCC_OscConfig+0x28c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b40      	cmp	r3, #64	@ 0x40
 8005c62:	d108      	bne.n	8005c76 <HAL_RCC_OscConfig+0x272>
 8005c64:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005c6c:	4a07      	ldr	r2, [pc, #28]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c72:	6053      	str	r3, [r2, #4]
 8005c74:	e030      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c76:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	4901      	ldr	r1, [pc, #4]	@ (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
 8005c8a:	e025      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	4b9a      	ldr	r3, [pc, #616]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	4997      	ldr	r1, [pc, #604]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	e018      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca6:	4b95      	ldr	r3, [pc, #596]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a94      	ldr	r2, [pc, #592]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fbed 	bl	8002490 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fc fbe9 	bl	8002490 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e2ed      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b8b      	ldr	r3, [pc, #556]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a9 	beq.w	8005e38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce6:	4b85      	ldr	r3, [pc, #532]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf0:	4b82      	ldr	r3, [pc, #520]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCC_OscConfig+0x308>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d13a      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d135      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b80      	cmp	r3, #128	@ 0x80
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e2c1      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d24:	f7fc fbe4 	bl	80024f0 <HAL_GetREVID>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d817      	bhi.n	8005d62 <HAL_RCC_OscConfig+0x35e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d108      	bne.n	8005d4c <HAL_RCC_OscConfig+0x348>
 8005d3a:	4b70      	ldr	r3, [pc, #448]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d42:	4a6e      	ldr	r2, [pc, #440]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d4a:	e075      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	069b      	lsls	r3, r3, #26
 8005d5a:	4968      	ldr	r1, [pc, #416]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d60:	e06a      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d62:	4b66      	ldr	r3, [pc, #408]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4962      	ldr	r1, [pc, #392]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d76:	e05f      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d042      	beq.n	8005e06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d80:	4b5e      	ldr	r3, [pc, #376]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5d      	ldr	r2, [pc, #372]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fc fb80 	bl	8002490 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d94:	f7fc fb7c 	bl	8002490 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e280      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005da6:	4b55      	ldr	r3, [pc, #340]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005db2:	f7fc fb9d 	bl	80024f0 <HAL_GetREVID>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d817      	bhi.n	8005df0 <HAL_RCC_OscConfig+0x3ec>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d108      	bne.n	8005dda <HAL_RCC_OscConfig+0x3d6>
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	e02e      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005dda:	4b48      	ldr	r3, [pc, #288]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	069b      	lsls	r3, r3, #26
 8005de8:	4944      	ldr	r1, [pc, #272]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
 8005dee:	e023      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005df0:	4b42      	ldr	r3, [pc, #264]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	493f      	ldr	r1, [pc, #252]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
 8005e04:	e018      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e06:	4b3d      	ldr	r3, [pc, #244]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fc fb3d 	bl	8002490 <HAL_GetTick>
 8005e16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e1a:	f7fc fb39 	bl	8002490 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e23d      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e2c:	4b33      	ldr	r3, [pc, #204]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d036      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e50:	4a2a      	ldr	r2, [pc, #168]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc fb1a 	bl	8002490 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e60:	f7fc fb16 	bl	8002490 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e21a      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e72:	4b22      	ldr	r3, [pc, #136]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x45c>
 8005e7e:	e018      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b1e      	ldr	r3, [pc, #120]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e84:	4a1d      	ldr	r2, [pc, #116]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fc fb00 	bl	8002490 <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fc fafc 	bl	8002490 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e200      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d039      	beq.n	8005f32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01c      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0c      	ldr	r2, [pc, #48]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fadd 	bl	8002490 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eda:	f7fc fad9 	bl	8002490 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1dd      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x4d6>
 8005ef8:	e01b      	b.n	8005f32 <HAL_RCC_OscConfig+0x52e>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f00:	4b9b      	ldr	r3, [pc, #620]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a9a      	ldr	r2, [pc, #616]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fac0 	bl	8002490 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f14:	f7fc fabc 	bl	8002490 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e1c0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f26:	4b92      	ldr	r3, [pc, #584]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8081 	beq.w	8006042 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f40:	4b8c      	ldr	r3, [pc, #560]	@ (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a8b      	ldr	r2, [pc, #556]	@ (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f4c:	f7fc faa0 	bl	8002490 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f54:	f7fc fa9c 	bl	8002490 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	@ 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e1a0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f66:	4b83      	ldr	r3, [pc, #524]	@ (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x584>
 8005f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f86:	e02d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x5a6>
 8005f90:	4b77      	ldr	r3, [pc, #476]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f94:	4a76      	ldr	r2, [pc, #472]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f9c:	4b74      	ldr	r3, [pc, #464]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa0:	4a73      	ldr	r2, [pc, #460]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fa2:	f023 0304 	bic.w	r3, r3, #4
 8005fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c8>
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005fcc:	4b68      	ldr	r3, [pc, #416]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a67      	ldr	r2, [pc, #412]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	4b65      	ldr	r3, [pc, #404]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fdc:	4a64      	ldr	r2, [pc, #400]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fc fa50 	bl	8002490 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fc fa4c 	bl	8002490 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e14e      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800600a:	4b59      	ldr	r3, [pc, #356]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ee      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x5f0>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fc fa3a 	bl	8002490 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fc fa36 	bl	8002490 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e138      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006036:	4b4e      	ldr	r3, [pc, #312]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ee      	bne.n	8006020 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 812d 	beq.w	80062a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800604c:	4b48      	ldr	r3, [pc, #288]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006054:	2b18      	cmp	r3, #24
 8006056:	f000 80bd 	beq.w	80061d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	2b02      	cmp	r3, #2
 8006060:	f040 809e 	bne.w	80061a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b42      	ldr	r3, [pc, #264]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a41      	ldr	r2, [pc, #260]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc fa0e 	bl	8002490 <HAL_GetTick>
 8006074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006078:	f7fc fa0a 	bl	8002490 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e10e      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800608a:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006096:	4b36      	ldr	r3, [pc, #216]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006098:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800609a:	4b37      	ldr	r3, [pc, #220]	@ (8006178 <HAL_RCC_OscConfig+0x774>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	430a      	orrs	r2, r1
 80060aa:	4931      	ldr	r1, [pc, #196]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	3b01      	subs	r3, #1
 80060c0:	025b      	lsls	r3, r3, #9
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	3b01      	subs	r3, #1
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d8:	3b01      	subs	r3, #1
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060e0:	4923      	ldr	r1, [pc, #140]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060e6:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	4a21      	ldr	r2, [pc, #132]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f6:	4b21      	ldr	r3, [pc, #132]	@ (800617c <HAL_RCC_OscConfig+0x778>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060fe:	00d2      	lsls	r2, r2, #3
 8006100:	491b      	ldr	r1, [pc, #108]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006106:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	f023 020c 	bic.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	4917      	ldr	r1, [pc, #92]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006118:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	f023 0202 	bic.w	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006124:	4912      	ldr	r1, [pc, #72]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006126:	4313      	orrs	r3, r2
 8006128:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800612a:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006136:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800613c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006142:	4b0b      	ldr	r3, [pc, #44]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800614c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800614e:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	4a07      	ldr	r2, [pc, #28]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800615a:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fc f993 	bl	8002490 <HAL_GetTick>
 800616a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800616c:	e011      	b.n	8006192 <HAL_RCC_OscConfig+0x78e>
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	58024800 	.word	0x58024800
 8006178:	fffffc0c 	.word	0xfffffc0c
 800617c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fc f986 	bl	8002490 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e08a      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006192:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x77c>
 800619e:	e082      	b.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b43      	ldr	r3, [pc, #268]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a42      	ldr	r2, [pc, #264]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fc f970 	bl	8002490 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fc f96c 	bl	8002490 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e070      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061c6:	4b3a      	ldr	r3, [pc, #232]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x7b0>
 80061d2:	e068      	b.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061d4:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061da:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d031      	beq.n	800624c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f003 0203 	and.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d12a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d122      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d108      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e02b      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006250:	4b17      	ldr	r3, [pc, #92]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d01f      	beq.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006272:	f7fc f90d 	bl	8002490 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006278:	bf00      	nop
 800627a:	f7fc f909 	bl	8002490 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	4293      	cmp	r3, r2
 8006284:	d0f9      	beq.n	800627a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800628a:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <HAL_RCC_OscConfig+0x8b0>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4906      	ldr	r1, [pc, #24]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006296:	4313      	orrs	r3, r2
 8006298:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800629a:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	4a04      	ldr	r2, [pc, #16]	@ (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3730      	adds	r7, #48	@ 0x30
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	58024400 	.word	0x58024400
 80062b4:	ffff0007 	.word	0xffff0007

080062b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e19c      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b8a      	ldr	r3, [pc, #552]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b87      	ldr	r3, [pc, #540]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 020f 	bic.w	r2, r3, #15
 80062e2:	4985      	ldr	r1, [pc, #532]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b83      	ldr	r3, [pc, #524]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e184      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	4b7b      	ldr	r3, [pc, #492]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006318:	4b78      	ldr	r3, [pc, #480]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4975      	ldr	r1, [pc, #468]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	4b70      	ldr	r3, [pc, #448]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006342:	429a      	cmp	r2, r3
 8006344:	d908      	bls.n	8006358 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006346:	4b6d      	ldr	r3, [pc, #436]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	496a      	ldr	r1, [pc, #424]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	4b64      	ldr	r3, [pc, #400]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006370:	429a      	cmp	r2, r3
 8006372:	d908      	bls.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006374:	4b61      	ldr	r3, [pc, #388]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	495e      	ldr	r1, [pc, #376]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006382:	4313      	orrs	r3, r2
 8006384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	4b59      	ldr	r3, [pc, #356]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639e:	429a      	cmp	r2, r3
 80063a0:	d908      	bls.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063a2:	4b56      	ldr	r3, [pc, #344]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4953      	ldr	r1, [pc, #332]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	4b4d      	ldr	r3, [pc, #308]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d908      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d0:	4b4a      	ldr	r3, [pc, #296]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f023 020f 	bic.w	r2, r3, #15
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4947      	ldr	r1, [pc, #284]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d055      	beq.n	800649a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ee:	4b43      	ldr	r3, [pc, #268]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4940      	ldr	r1, [pc, #256]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d107      	bne.n	8006418 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006408:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d121      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0f6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006420:	4b36      	ldr	r3, [pc, #216]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d115      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0ea      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006438:	4b30      	ldr	r3, [pc, #192]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0de      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	4b2c      	ldr	r3, [pc, #176]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0d6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f023 0207 	bic.w	r2, r3, #7
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4925      	ldr	r1, [pc, #148]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006466:	4313      	orrs	r3, r2
 8006468:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fc f811 	bl	8002490 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006470:	e00a      	b.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006472:	f7fc f80d 	bl	8002490 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e0be      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006488:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	429a      	cmp	r2, r3
 8006498:	d1eb      	bne.n	8006472 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d208      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b6:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f023 020f 	bic.w	r2, r3, #15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	490e      	ldr	r1, [pc, #56]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c8:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d214      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020f 	bic.w	r2, r3, #15
 80064de:	4906      	ldr	r1, [pc, #24]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e086      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
 80064f8:	52002000 	.word	0x52002000
 80064fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d010      	beq.n	800652e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	4b3f      	ldr	r3, [pc, #252]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006518:	429a      	cmp	r2, r3
 800651a:	d208      	bcs.n	800652e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800651c:	4b3c      	ldr	r3, [pc, #240]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	4939      	ldr	r1, [pc, #228]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800652a:	4313      	orrs	r3, r2
 800652c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695a      	ldr	r2, [r3, #20]
 800653e:	4b34      	ldr	r3, [pc, #208]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006546:	429a      	cmp	r2, r3
 8006548:	d208      	bcs.n	800655c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800654a:	4b31      	ldr	r3, [pc, #196]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	492e      	ldr	r1, [pc, #184]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006558:	4313      	orrs	r3, r2
 800655a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006574:	429a      	cmp	r2, r3
 8006576:	d208      	bcs.n	800658a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006578:	4b25      	ldr	r3, [pc, #148]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4922      	ldr	r1, [pc, #136]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006586:	4313      	orrs	r3, r2
 8006588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d208      	bcs.n	80065b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4917      	ldr	r1, [pc, #92]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b8:	f000 f834 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	4912      	ldr	r1, [pc, #72]	@ (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	4a0d      	ldr	r2, [pc, #52]	@ (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065e0:	5cd3      	ldrb	r3, [r2, r3]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x360>)
 80065ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065f0:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <HAL_RCC_ClockConfig+0x364>)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <HAL_RCC_ClockConfig+0x368>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fb fefe 	bl	80023fc <HAL_InitTick>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	58024400 	.word	0x58024400
 8006614:	0800f094 	.word	0x0800f094
 8006618:	24000008 	.word	0x24000008
 800661c:	24000004 	.word	0x24000004
 8006620:	2400000c 	.word	0x2400000c

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	@ 0x24
 8006628:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800662a:	4bb3      	ldr	r3, [pc, #716]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006632:	2b18      	cmp	r3, #24
 8006634:	f200 8155 	bhi.w	80068e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006638:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <HAL_RCC_GetSysClockFreq+0x1c>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080068e3 	.word	0x080068e3
 8006648:	080068e3 	.word	0x080068e3
 800664c:	080068e3 	.word	0x080068e3
 8006650:	080068e3 	.word	0x080068e3
 8006654:	080068e3 	.word	0x080068e3
 8006658:	080068e3 	.word	0x080068e3
 800665c:	080068e3 	.word	0x080068e3
 8006660:	080066cb 	.word	0x080066cb
 8006664:	080068e3 	.word	0x080068e3
 8006668:	080068e3 	.word	0x080068e3
 800666c:	080068e3 	.word	0x080068e3
 8006670:	080068e3 	.word	0x080068e3
 8006674:	080068e3 	.word	0x080068e3
 8006678:	080068e3 	.word	0x080068e3
 800667c:	080068e3 	.word	0x080068e3
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080068e3 	.word	0x080068e3
 8006688:	080068e3 	.word	0x080068e3
 800668c:	080068e3 	.word	0x080068e3
 8006690:	080068e3 	.word	0x080068e3
 8006694:	080068e3 	.word	0x080068e3
 8006698:	080068e3 	.word	0x080068e3
 800669c:	080068e3 	.word	0x080068e3
 80066a0:	080066d7 	.word	0x080066d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b94      	ldr	r3, [pc, #592]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b91      	ldr	r3, [pc, #580]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a90      	ldr	r2, [pc, #576]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066c2:	e111      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066c4:	4b8d      	ldr	r3, [pc, #564]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066c6:	61bb      	str	r3, [r7, #24]
      break;
 80066c8:	e10e      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066cc:	61bb      	str	r3, [r7, #24]
      break;
 80066ce:	e10b      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066d2:	61bb      	str	r3, [r7, #24]
      break;
 80066d4:	e108      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d6:	4b88      	ldr	r3, [pc, #544]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066e0:	4b85      	ldr	r3, [pc, #532]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066ec:	4b82      	ldr	r3, [pc, #520]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066f6:	4b80      	ldr	r3, [pc, #512]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80e1 	beq.w	80068dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b02      	cmp	r3, #2
 800671e:	f000 8083 	beq.w	8006828 <HAL_RCC_GetSysClockFreq+0x204>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b02      	cmp	r3, #2
 8006726:	f200 80a1 	bhi.w	800686c <HAL_RCC_GetSysClockFreq+0x248>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x114>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d056      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006736:	e099      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006738:	4b6f      	ldr	r3, [pc, #444]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006744:	4b6c      	ldr	r3, [pc, #432]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a6b      	ldr	r2, [pc, #428]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b62      	ldr	r3, [pc, #392]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006782:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800679e:	e087      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800690c <HAL_RCC_GetSysClockFreq+0x2e8>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b51      	ldr	r3, [pc, #324]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067e2:	e065      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b40      	ldr	r3, [pc, #256]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a02 	vldr	s12, [r7, #8]
 800680a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006826:	e043      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006914 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b2f      	ldr	r3, [pc, #188]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a02 	vldr	s12, [r7, #8]
 800684e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800686a:	e021      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b1e      	ldr	r3, [pc, #120]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006892:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068b0:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ba:	3301      	adds	r3, #1
 80068bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d4:	ee17 3a90 	vmov	r3, s15
 80068d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068da:	e005      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
      break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068e2:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068e4:	61bb      	str	r3, [r7, #24]
      break;
 80068e6:	bf00      	nop
  }

  return sysclockfreq;
 80068e8:	69bb      	ldr	r3, [r7, #24]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3724      	adds	r7, #36	@ 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	003d0900 	.word	0x003d0900
 8006904:	00f42400 	.word	0x00f42400
 8006908:	46000000 	.word	0x46000000
 800690c:	4c742400 	.word	0x4c742400
 8006910:	4a742400 	.word	0x4a742400
 8006914:	4b742400 	.word	0x4b742400

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800691e:	f7ff fe81 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8006922:	4602      	mov	r2, r0
 8006924:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	490f      	ldr	r1, [pc, #60]	@ (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006930:	5ccb      	ldrb	r3, [r1, r3]
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	4a09      	ldr	r2, [pc, #36]	@ (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006946:	5cd3      	ldrb	r3, [r2, r3]
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4a07      	ldr	r2, [pc, #28]	@ (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 8006954:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006956:	4a07      	ldr	r2, [pc, #28]	@ (8006974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	0800f094 	.word	0x0800f094
 8006970:	24000008 	.word	0x24000008
 8006974:	24000004 	.word	0x24000004

08006978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800697c:	f7ff ffcc 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4904      	ldr	r1, [pc, #16]	@ (80069a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}
 800699c:	58024400 	.word	0x58024400
 80069a0:	0800f094 	.word	0x0800f094

080069a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b0ca      	sub	sp, #296	@ 0x128
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069b6:	2300      	movs	r3, #0
 80069b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80069c8:	2500      	movs	r5, #0
 80069ca:	ea54 0305 	orrs.w	r3, r4, r5
 80069ce:	d049      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069da:	d02f      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80069dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069e0:	d828      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069e6:	d01a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ec:	d822      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069f6:	d007      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069f8:	e01c      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fa:	4bb8      	ldr	r3, [pc, #736]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	4ab7      	ldr	r2, [pc, #732]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a06:	e01a      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	2102      	movs	r1, #2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 fb61 	bl	80090d8 <RCCEx_PLL2_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a1c:	e00f      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	3328      	adds	r3, #40	@ 0x28
 8006a24:	2102      	movs	r1, #2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f002 fc08 	bl	800923c <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a46:	4ba5      	ldr	r3, [pc, #660]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a54:	4aa1      	ldr	r2, [pc, #644]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a56:	430b      	orrs	r3, r1
 8006a58:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a5a:	e003      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a70:	f04f 0900 	mov.w	r9, #0
 8006a74:	ea58 0309 	orrs.w	r3, r8, r9
 8006a78:	d047      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d82a      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a84:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006aa1 	.word	0x08006aa1
 8006a90:	08006aaf 	.word	0x08006aaf
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006ae3 	.word	0x08006ae3
 8006a9c:	08006ae3 	.word	0x08006ae3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a8d      	ldr	r2, [pc, #564]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aac:	e01a      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 fb0e 	bl	80090d8 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e00f      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f002 fbb5 	bl	800923c <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e004      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aec:	4b7b      	ldr	r3, [pc, #492]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af0:	f023 0107 	bic.w	r1, r3, #7
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	4a78      	ldr	r2, [pc, #480]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006afc:	430b      	orrs	r3, r1
 8006afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b00:	e003      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006b16:	f04f 0b00 	mov.w	fp, #0
 8006b1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b1e:	d04c      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2a:	d030      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b30:	d829      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b34:	d02d      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b38:	d825      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d018      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b3e:	2b80      	cmp	r3, #128	@ 0x80
 8006b40:	d821      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b46:	2b40      	cmp	r3, #64	@ 0x40
 8006b48:	d007      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b4a:	e01c      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4b63      	ldr	r3, [pc, #396]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	4a62      	ldr	r2, [pc, #392]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b58:	e01c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	3308      	adds	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 fab8 	bl	80090d8 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3328      	adds	r3, #40	@ 0x28
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 fb5f 	bl	800923c <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b84:	e006      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8c:	e002      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006baa:	4a4c      	ldr	r2, [pc, #304]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006bc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006bd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d053      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006be2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006be6:	d035      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006be8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bec:	d82e      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bf2:	d031      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006bf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bf8:	d828      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bfe:	d01a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c04:	d822      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c0e:	d007      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c10:	e01c      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c12:	4b32      	ldr	r3, [pc, #200]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	4a31      	ldr	r2, [pc, #196]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c1e:	e01c      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c24:	3308      	adds	r3, #8
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f002 fa55 	bl	80090d8 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c34:	e011      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f002 fafc 	bl	800923c <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e006      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c52:	e002      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c62:	4b1e      	ldr	r3, [pc, #120]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c72:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c92:	2300      	movs	r3, #0
 8006c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d056      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006caa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cae:	d038      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cb4:	d831      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cba:	d034      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006cbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cc0:	d82b      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006cc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ccc:	d825      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd6:	d00a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cd8:	e01f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4ba2      	ldr	r3, [pc, #648]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4aa1      	ldr	r2, [pc, #644]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cec:	e01c      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 f9ee 	bl	80090d8 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d02:	e011      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d08:	3328      	adds	r3, #40	@ 0x28
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 fa95 	bl	800923c <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d30:	4b8e      	ldr	r3, [pc, #568]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d40:	4a8a      	ldr	r2, [pc, #552]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d46:	e003      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d60:	2300      	movs	r3, #0
 8006d62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	d03a      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	2b30      	cmp	r3, #48	@ 0x30
 8006d78:	d01f      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d7a:	2b30      	cmp	r3, #48	@ 0x30
 8006d7c:	d819      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d00c      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d815      	bhi.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d019      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d111      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d8e:	4b77      	ldr	r3, [pc, #476]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d92:	4a76      	ldr	r2, [pc, #472]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d9a:	e011      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	3308      	adds	r3, #8
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 f997 	bl	80090d8 <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006db8:	e002      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006dc8:	4b68      	ldr	r3, [pc, #416]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd6:	4a65      	ldr	r2, [pc, #404]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ddc:	e003      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006df2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d051      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e10:	d035      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e16:	d82e      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e1c:	d031      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e22:	d828      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e28:	d01a      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2e:	d822      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e38:	d007      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e3a:	e01c      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	4a4a      	ldr	r2, [pc, #296]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e48:	e01c      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4e:	3308      	adds	r3, #8
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f002 f940 	bl	80090d8 <RCCEx_PLL2_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e5e:	e011      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e64:	3328      	adds	r3, #40	@ 0x28
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f002 f9e7 	bl	800923c <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e74:	e006      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e7c:	e002      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e8c:	4b37      	ldr	r3, [pc, #220]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e9a:	4a34      	ldr	r2, [pc, #208]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ec0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d056      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ed4:	d033      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006ed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eda:	d82c      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006edc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ee0:	d02f      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006ee2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ee6:	d826      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006eec:	d02b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ef2:	d820      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef8:	d012      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006efe:	d81a      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d022      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f08:	d115      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	3308      	adds	r3, #8
 8006f10:	2101      	movs	r1, #1
 8006f12:	4618      	mov	r0, r3
 8006f14:	f002 f8e0 	bl	80090d8 <RCCEx_PLL2_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f1e:	e015      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	3328      	adds	r3, #40	@ 0x28
 8006f26:	2101      	movs	r1, #1
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f002 f987 	bl	800923c <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f34:	e00a      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e004      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f42:	bf00      	nop
 8006f44:	e002      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f46:	bf00      	nop
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f62:	4a02      	ldr	r2, [pc, #8]	@ (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f68:	e006      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f6a:	bf00      	nop
 8006f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d055      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fa4:	d033      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006faa:	d82c      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb0:	d02f      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb6:	d826      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fbc:	d02b      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006fbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fc2:	d820      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc8:	d012      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fce:	d81a      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d022      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fd8:	d115      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fde:	3308      	adds	r3, #8
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f002 f878 	bl	80090d8 <RCCEx_PLL2_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fee:	e015      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff4:	3328      	adds	r3, #40	@ 0x28
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 f91f 	bl	800923c <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007004:	e00a      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800700c:	e006      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800700e:	bf00      	nop
 8007010:	e004      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800701a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007024:	4ba3      	ldr	r3, [pc, #652]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007028:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007034:	4a9f      	ldr	r2, [pc, #636]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007036:	430b      	orrs	r3, r1
 8007038:	6593      	str	r3, [r2, #88]	@ 0x58
 800703a:	e003      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800705a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800705e:	460b      	mov	r3, r1
 8007060:	4313      	orrs	r3, r2
 8007062:	d037      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800706e:	d00e      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007074:	d816      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d018      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800707a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800707e:	d111      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007080:	4b8c      	ldr	r3, [pc, #560]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4a8b      	ldr	r2, [pc, #556]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800708a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800708c:	e00f      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	3308      	adds	r3, #8
 8007094:	2101      	movs	r1, #1
 8007096:	4618      	mov	r0, r3
 8007098:	f002 f81e 	bl	80090d8 <RCCEx_PLL2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070a2:	e004      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070aa:	e000      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80070ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070b6:	4b7f      	ldr	r3, [pc, #508]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c4:	4a7b      	ldr	r2, [pc, #492]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c6:	430b      	orrs	r3, r1
 80070c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80070ca:	e003      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4313      	orrs	r3, r2
 80070f2:	d039      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d81c      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80070fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007141 	.word	0x08007141
 8007108:	08007115 	.word	0x08007115
 800710c:	08007123 	.word	0x08007123
 8007110:	08007141 	.word	0x08007141
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007114:	4b67      	ldr	r3, [pc, #412]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	4a66      	ldr	r2, [pc, #408]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007120:	e00f      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007126:	3308      	adds	r3, #8
 8007128:	2102      	movs	r1, #2
 800712a:	4618      	mov	r0, r3
 800712c:	f001 ffd4 	bl	80090d8 <RCCEx_PLL2_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007136:	e004      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800713e:	e000      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800714a:	4b5a      	ldr	r3, [pc, #360]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800714e:	f023 0103 	bic.w	r1, r3, #3
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007158:	4a56      	ldr	r2, [pc, #344]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800715a:	430b      	orrs	r3, r1
 800715c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800717e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	f000 809f 	beq.w	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800718a:	4b4b      	ldr	r3, [pc, #300]	@ (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a4a      	ldr	r2, [pc, #296]	@ (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007196:	f7fb f97b 	bl	8002490 <HAL_GetTick>
 800719a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800719e:	e00b      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a0:	f7fb f976 	bl	8002490 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	@ 0x64
 80071ae:	d903      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b8:	4b3f      	ldr	r3, [pc, #252]	@ (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0ed      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d179      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071cc:	4b39      	ldr	r3, [pc, #228]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071d8:	4053      	eors	r3, r2
 80071da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d015      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e2:	4b34      	ldr	r3, [pc, #208]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071fa:	4b2e      	ldr	r3, [pc, #184]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fe:	4a2d      	ldr	r2, [pc, #180]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007204:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007206:	4a2b      	ldr	r2, [pc, #172]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800720c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721a:	d118      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fb f938 	bl	8002490 <HAL_GetTick>
 8007220:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007224:	e00d      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fb f933 	bl	8002490 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007236:	429a      	cmp	r2, r3
 8007238:	d903      	bls.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007240:	e005      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007242:	4b1c      	ldr	r3, [pc, #112]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0eb      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800724e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007252:	2b00      	cmp	r3, #0
 8007254:	d129      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800725e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007266:	d10e      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007268:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007278:	091a      	lsrs	r2, r3, #4
 800727a:	4b10      	ldr	r3, [pc, #64]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800727c:	4013      	ands	r3, r2
 800727e:	4a0d      	ldr	r2, [pc, #52]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007280:	430b      	orrs	r3, r1
 8007282:	6113      	str	r3, [r2, #16]
 8007284:	e005      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	4a0a      	ldr	r2, [pc, #40]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800728c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007290:	6113      	str	r3, [r2, #16]
 8007292:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007294:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800729e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a2:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a8:	e00e      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80072b2:	e009      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80072b4:	58024400 	.word	0x58024400
 80072b8:	58024800 	.word	0x58024800
 80072bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 0301 	and.w	r3, r2, #1
 80072d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f000 8089 	beq.w	80073fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f0:	2b28      	cmp	r3, #40	@ 0x28
 80072f2:	d86b      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	080073d5 	.word	0x080073d5
 8007300:	080073cd 	.word	0x080073cd
 8007304:	080073cd 	.word	0x080073cd
 8007308:	080073cd 	.word	0x080073cd
 800730c:	080073cd 	.word	0x080073cd
 8007310:	080073cd 	.word	0x080073cd
 8007314:	080073cd 	.word	0x080073cd
 8007318:	080073cd 	.word	0x080073cd
 800731c:	080073a1 	.word	0x080073a1
 8007320:	080073cd 	.word	0x080073cd
 8007324:	080073cd 	.word	0x080073cd
 8007328:	080073cd 	.word	0x080073cd
 800732c:	080073cd 	.word	0x080073cd
 8007330:	080073cd 	.word	0x080073cd
 8007334:	080073cd 	.word	0x080073cd
 8007338:	080073cd 	.word	0x080073cd
 800733c:	080073b7 	.word	0x080073b7
 8007340:	080073cd 	.word	0x080073cd
 8007344:	080073cd 	.word	0x080073cd
 8007348:	080073cd 	.word	0x080073cd
 800734c:	080073cd 	.word	0x080073cd
 8007350:	080073cd 	.word	0x080073cd
 8007354:	080073cd 	.word	0x080073cd
 8007358:	080073cd 	.word	0x080073cd
 800735c:	080073d5 	.word	0x080073d5
 8007360:	080073cd 	.word	0x080073cd
 8007364:	080073cd 	.word	0x080073cd
 8007368:	080073cd 	.word	0x080073cd
 800736c:	080073cd 	.word	0x080073cd
 8007370:	080073cd 	.word	0x080073cd
 8007374:	080073cd 	.word	0x080073cd
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073d5 	.word	0x080073d5
 8007380:	080073cd 	.word	0x080073cd
 8007384:	080073cd 	.word	0x080073cd
 8007388:	080073cd 	.word	0x080073cd
 800738c:	080073cd 	.word	0x080073cd
 8007390:	080073cd 	.word	0x080073cd
 8007394:	080073cd 	.word	0x080073cd
 8007398:	080073cd 	.word	0x080073cd
 800739c:	080073d5 	.word	0x080073d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	3308      	adds	r3, #8
 80073a6:	2101      	movs	r1, #1
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fe95 	bl	80090d8 <RCCEx_PLL2_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073b4:	e00f      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	3328      	adds	r3, #40	@ 0x28
 80073bc:	2101      	movs	r1, #1
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 ff3c 	bl	800923c <RCCEx_PLL3_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ca:	e004      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80073d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073de:	4bbf      	ldr	r3, [pc, #764]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ec:	4abb      	ldr	r2, [pc, #748]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073ee:	430b      	orrs	r3, r1
 80073f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f002 0302 	and.w	r3, r2, #2
 8007408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800740c:	2300      	movs	r3, #0
 800740e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007412:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007416:	460b      	mov	r3, r1
 8007418:	4313      	orrs	r3, r2
 800741a:	d041      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007422:	2b05      	cmp	r3, #5
 8007424:	d824      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007479 	.word	0x08007479
 8007430:	08007445 	.word	0x08007445
 8007434:	0800745b 	.word	0x0800745b
 8007438:	08007479 	.word	0x08007479
 800743c:	08007479 	.word	0x08007479
 8007440:	08007479 	.word	0x08007479
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	3308      	adds	r3, #8
 800744a:	2101      	movs	r1, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fe43 	bl	80090d8 <RCCEx_PLL2_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007458:	e00f      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	3328      	adds	r3, #40	@ 0x28
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f001 feea 	bl	800923c <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800746e:	e004      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007482:	4b96      	ldr	r3, [pc, #600]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007486:	f023 0107 	bic.w	r1, r3, #7
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007490:	4a92      	ldr	r2, [pc, #584]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007492:	430b      	orrs	r3, r1
 8007494:	6553      	str	r3, [r2, #84]	@ 0x54
 8007496:	e003      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f002 0304 	and.w	r3, r2, #4
 80074ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4313      	orrs	r3, r2
 80074be:	d044      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d825      	bhi.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80074cc:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007521 	.word	0x08007521
 80074d8:	080074ed 	.word	0x080074ed
 80074dc:	08007503 	.word	0x08007503
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007521 	.word	0x08007521
 80074e8:	08007521 	.word	0x08007521
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	3308      	adds	r3, #8
 80074f2:	2101      	movs	r1, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fdef 	bl	80090d8 <RCCEx_PLL2_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007500:	e00f      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007506:	3328      	adds	r3, #40	@ 0x28
 8007508:	2101      	movs	r1, #1
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fe96 	bl	800923c <RCCEx_PLL3_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007516:	e004      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800752a:	4b6c      	ldr	r3, [pc, #432]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800752c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752e:	f023 0107 	bic.w	r1, r3, #7
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800753a:	4a68      	ldr	r2, [pc, #416]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800753c:	430b      	orrs	r3, r1
 800753e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f002 0320 	and.w	r3, r2, #32
 8007556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d055      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007576:	d033      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800757c:	d82c      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007582:	d02f      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007588:	d826      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800758a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800758e:	d02b      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007590:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007594:	d820      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800759a:	d012      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800759c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075a0:	d81a      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d022      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80075a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075aa:	d115      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b0:	3308      	adds	r3, #8
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 fd8f 	bl	80090d8 <RCCEx_PLL2_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075c0:	e015      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	3328      	adds	r3, #40	@ 0x28
 80075c8:	2102      	movs	r1, #2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fe36 	bl	800923c <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075d6:	e00a      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075de:	e006      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e0:	bf00      	nop
 80075e2:	e004      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e4:	bf00      	nop
 80075e6:	e002      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075f6:	4b39      	ldr	r3, [pc, #228]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007606:	4a35      	ldr	r2, [pc, #212]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007608:	430b      	orrs	r3, r1
 800760a:	6553      	str	r3, [r2, #84]	@ 0x54
 800760c:	e003      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800762c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007630:	460b      	mov	r3, r1
 8007632:	4313      	orrs	r3, r2
 8007634:	d058      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800763e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007642:	d033      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007644:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007648:	d82c      	bhi.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764e:	d02f      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007654:	d826      	bhi.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800765a:	d02b      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800765c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007660:	d820      	bhi.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007666:	d012      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766c:	d81a      	bhi.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007676:	d115      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	3308      	adds	r3, #8
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f001 fd29 	bl	80090d8 <RCCEx_PLL2_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800768c:	e015      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	3328      	adds	r3, #40	@ 0x28
 8007694:	2102      	movs	r1, #2
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fdd0 	bl	800923c <RCCEx_PLL3_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076a2:	e00a      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076aa:	e006      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076ac:	bf00      	nop
 80076ae:	e004      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076b0:	bf00      	nop
 80076b2:	e002      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076b4:	bf00      	nop
 80076b6:	e000      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10e      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076d2:	4a02      	ldr	r2, [pc, #8]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80076d8:	e006      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	d055      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007710:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007714:	d033      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007716:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800771a:	d82c      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800771c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007720:	d02f      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007726:	d826      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007728:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800772c:	d02b      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800772e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007732:	d820      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007738:	d012      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800773a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800773e:	d81a      	bhi.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d022      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007748:	d115      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	3308      	adds	r3, #8
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fcc0 	bl	80090d8 <RCCEx_PLL2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800775e:	e015      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007764:	3328      	adds	r3, #40	@ 0x28
 8007766:	2102      	movs	r1, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fd67 	bl	800923c <RCCEx_PLL3_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007774:	e00a      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777c:	e006      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800777e:	bf00      	nop
 8007780:	e004      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007782:	bf00      	nop
 8007784:	e002      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007786:	bf00      	nop
 8007788:	e000      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800778a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007794:	4ba1      	ldr	r3, [pc, #644]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007798:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077a4:	4a9d      	ldr	r2, [pc, #628]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 0308 	and.w	r3, r2, #8
 80077c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d01e      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	3328      	adds	r3, #40	@ 0x28
 80077e8:	2102      	movs	r1, #2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fd26 	bl	800923c <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077fc:	4b87      	ldr	r3, [pc, #540]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007800:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780c:	4a83      	ldr	r2, [pc, #524]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800780e:	430b      	orrs	r3, r1
 8007810:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f002 0310 	and.w	r3, r2, #16
 800781e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007828:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d01e      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800783a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800783e:	d10c      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	3328      	adds	r3, #40	@ 0x28
 8007846:	2102      	movs	r1, #2
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fcf7 	bl	800923c <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800785a:	4b70      	ldr	r3, [pc, #448]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800786a:	4a6c      	ldr	r2, [pc, #432]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800786c:	430b      	orrs	r3, r1
 800786e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800787c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007880:	2300      	movs	r3, #0
 8007882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007886:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800788a:	460b      	mov	r3, r1
 800788c:	4313      	orrs	r3, r2
 800788e:	d03e      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800789c:	d022      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800789e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a2:	d81b      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ac:	d00b      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80078ae:	e015      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	3308      	adds	r3, #8
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fc0d 	bl	80090d8 <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	3328      	adds	r3, #40	@ 0x28
 80078cc:	2102      	movs	r1, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 fcb4 	bl	800923c <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ee:	4b4b      	ldr	r3, [pc, #300]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078fe:	4a47      	ldr	r2, [pc, #284]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6593      	str	r3, [r2, #88]	@ 0x58
 8007904:	e003      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800791a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800791c:	2300      	movs	r3, #0
 800791e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007920:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007924:	460b      	mov	r3, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d03b      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007936:	d01f      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007938:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800793c:	d818      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800793e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007942:	d003      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007944:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007948:	d007      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800794a:	e011      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794c:	4b33      	ldr	r3, [pc, #204]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	4a32      	ldr	r2, [pc, #200]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007958:	e00f      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	3328      	adds	r3, #40	@ 0x28
 8007960:	2101      	movs	r1, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fc6a 	bl	800923c <RCCEx_PLL3_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800796e:	e004      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007976:	e000      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007982:	4b26      	ldr	r3, [pc, #152]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007986:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007992:	4a22      	ldr	r2, [pc, #136]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007994:	430b      	orrs	r3, r1
 8007996:	6553      	str	r3, [r2, #84]	@ 0x54
 8007998:	e003      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80079ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80079b0:	2300      	movs	r3, #0
 80079b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80079b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d034      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079cc:	d007      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80079ce:	e011      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b12      	ldr	r3, [pc, #72]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a11      	ldr	r2, [pc, #68]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079dc:	e00e      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e2:	3308      	adds	r3, #8
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 fb76 	bl	80090d8 <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079f2:	e003      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a12:	4a02      	ldr	r2, [pc, #8]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a18:	e006      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a36:	2300      	movs	r3, #0
 8007a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d00c      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	3328      	adds	r3, #40	@ 0x28
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fbf5 	bl	800923c <RCCEx_PLL3_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d038      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a86:	d018      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8c:	d811      	bhi.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a92:	d014      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a98:	d80b      	bhi.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aa2:	d106      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4bc3      	ldr	r3, [pc, #780]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4ac2      	ldr	r2, [pc, #776]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ab0:	e008      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007acc:	4bb9      	ldr	r3, [pc, #740]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007adc:	4ab5      	ldr	r2, [pc, #724]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ae2:	e003      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007af8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007afa:	2300      	movs	r3, #0
 8007afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007afe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b02:	460b      	mov	r3, r1
 8007b04:	4313      	orrs	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b08:	4baa      	ldr	r3, [pc, #680]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b16:	4aa7      	ldr	r2, [pc, #668]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d00a      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b38:	4b9e      	ldr	r3, [pc, #632]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b48:	4a9a      	ldr	r2, [pc, #616]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b64:	460b      	mov	r3, r1
 8007b66:	4313      	orrs	r3, r2
 8007b68:	d009      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b6a:	4b92      	ldr	r3, [pc, #584]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b78:	4a8e      	ldr	r2, [pc, #568]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d00e      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b9a:	4b86      	ldr	r3, [pc, #536]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	4a85      	ldr	r2, [pc, #532]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ba0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ba4:	6113      	str	r3, [r2, #16]
 8007ba6:	4b83      	ldr	r3, [pc, #524]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ba8:	6919      	ldr	r1, [r3, #16]
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007bb2:	4a80      	ldr	r2, [pc, #512]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d009      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bd4:	4b77      	ldr	r3, [pc, #476]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be2:	4a74      	ldr	r2, [pc, #464]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007be4:	430b      	orrs	r3, r1
 8007be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c04:	4b6b      	ldr	r3, [pc, #428]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c14:	4a67      	ldr	r2, [pc, #412]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	2100      	movs	r1, #0
 8007c24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c30:	460b      	mov	r3, r1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	d011      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 fa4a 	bl	80090d8 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	2100      	movs	r1, #0
 8007c64:	6239      	str	r1, [r7, #32]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d011      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 fa2a 	bl	80090d8 <RCCEx_PLL2_Config>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	61b9      	str	r1, [r7, #24]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	d011      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	3308      	adds	r3, #8
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 fa0a 	bl	80090d8 <RCCEx_PLL2_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6139      	str	r1, [r7, #16]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	d011      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	3328      	adds	r3, #40	@ 0x28
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fa9c 	bl	800923c <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	2100      	movs	r1, #0
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	f003 0310 	and.w	r3, r3, #16
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d30:	460b      	mov	r3, r1
 8007d32:	4313      	orrs	r3, r2
 8007d34:	d011      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3a:	3328      	adds	r3, #40	@ 0x28
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fa7c 	bl	800923c <RCCEx_PLL3_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	2100      	movs	r1, #0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d011      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7a:	3328      	adds	r3, #40	@ 0x28
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fa5c 	bl	800923c <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007d9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007dae:	46bd      	mov	sp, r7
 8007db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db4:	58024400 	.word	0x58024400

08007db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b090      	sub	sp, #64	@ 0x40
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	f040 8094 	bne.w	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dd0:	4b9e      	ldr	r3, [pc, #632]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	f200 8087 	bhi.w	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007dfd 	.word	0x08007dfd
 8007dec:	08007e25 	.word	0x08007e25
 8007df0:	08007e4d 	.word	0x08007e4d
 8007df4:	08007ee9 	.word	0x08007ee9
 8007df8:	08007e75 	.word	0x08007e75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dfc:	4b93      	ldr	r3, [pc, #588]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e08:	d108      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f810 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e18:	f000 bd45 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e20:	f000 bd41 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e24:	4b89      	ldr	r3, [pc, #548]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e30:	d108      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e32:	f107 0318 	add.w	r3, r7, #24
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fd54 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e40:	f000 bd31 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e48:	f000 bd2d 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e58:	d108      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fe94 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e68:	f000 bd1d 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e70:	f000 bd19 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e74:	4b75      	ldr	r3, [pc, #468]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e7e:	4b73      	ldr	r3, [pc, #460]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e90:	4b6e      	ldr	r3, [pc, #440]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	08db      	lsrs	r3, r3, #3
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	4a6d      	ldr	r2, [pc, #436]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ea2:	e01f      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ea4:	4b69      	ldr	r3, [pc, #420]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb0:	d106      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eb8:	d102      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eba:	4b66      	ldr	r3, [pc, #408]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ebe:	e011      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec0:	4b62      	ldr	r3, [pc, #392]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ecc:	d106      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed4:	d102      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ed6:	4b60      	ldr	r3, [pc, #384]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eda:	e003      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ee0:	f000 bce1 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ee4:	f000 bcdf 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eec:	f000 bcdb 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef4:	f000 bcd7 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f040 80ad 	bne.w	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f06:	4b51      	ldr	r3, [pc, #324]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f16:	d056      	beq.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f1e:	f200 8090 	bhi.w	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f26:	f000 8088 	beq.w	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f2e:	f200 8088 	bhi.w	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	2b80      	cmp	r3, #128	@ 0x80
 8007f36:	d032      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	2b80      	cmp	r3, #128	@ 0x80
 8007f3c:	f200 8081 	bhi.w	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	2b40      	cmp	r3, #64	@ 0x40
 8007f4a:	d014      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f4c:	e079      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f5a:	d108      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 ff67 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f6a:	f000 bc9c 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f72:	f000 bc98 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f76:	4b35      	ldr	r3, [pc, #212]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f82:	d108      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f84:	f107 0318 	add.w	r3, r7, #24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fcab 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f92:	f000 bc88 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9a:	f000 bc84 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007faa:	d108      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fdeb 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fba:	f000 bc74 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc2:	f000 bc70 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fc6:	4b21      	ldr	r3, [pc, #132]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	08db      	lsrs	r3, r3, #3
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	4a18      	ldr	r2, [pc, #96]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff4:	e01f      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ff6:	4b15      	ldr	r3, [pc, #84]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800800a:	d102      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800800c:	4b11      	ldr	r3, [pc, #68]	@ (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008010:	e011      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008012:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800801a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008026:	d102      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008028:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800802c:	e003      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008032:	f000 bc38 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008036:	f000 bc36 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800803a:	4b08      	ldr	r3, [pc, #32]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803e:	f000 bc32 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008046:	f000 bc2e 	b.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	03d09000 	.word	0x03d09000
 8008054:	003d0900 	.word	0x003d0900
 8008058:	00f42400 	.word	0x00f42400
 800805c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008064:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008068:	430b      	orrs	r3, r1
 800806a:	f040 809c 	bne.w	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800806e:	4b9e      	ldr	r3, [pc, #632]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008072:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800807e:	d054      	beq.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008086:	f200 808b 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008090:	f000 8083 	beq.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800809a:	f200 8081 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080a4:	d02f      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080ac:	d878      	bhi.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ba:	d012      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80080bc:	e070      	b.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080be:	4b8a      	ldr	r3, [pc, #552]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ca:	d107      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 feaf 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080da:	e3e4      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e0:	e3e1      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080e2:	4b81      	ldr	r3, [pc, #516]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f0:	f107 0318 	add.w	r3, r7, #24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fbf5 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	e3d2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e3cf      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008106:	4b78      	ldr	r3, [pc, #480]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800810e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008112:	d107      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fd37 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008122:	e3c0      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	e3bd      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800812a:	4b6f      	ldr	r3, [pc, #444]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800812c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008134:	4b6c      	ldr	r3, [pc, #432]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b04      	cmp	r3, #4
 800813e:	d10c      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008146:	4b68      	ldr	r3, [pc, #416]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	4a66      	ldr	r2, [pc, #408]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008158:	e01e      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800815a:	4b63      	ldr	r3, [pc, #396]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008166:	d106      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800816e:	d102      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008170:	4b5f      	ldr	r3, [pc, #380]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008174:	e010      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008176:	4b5c      	ldr	r3, [pc, #368]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008182:	d106      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818a:	d102      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800818c:	4b59      	ldr	r3, [pc, #356]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008190:	e002      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008196:	e386      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008198:	e385      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800819a:	4b57      	ldr	r3, [pc, #348]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819e:	e382      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e37f      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80081ae:	430b      	orrs	r3, r1
 80081b0:	f040 80a7 	bne.w	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80081b4:	4b4c      	ldr	r3, [pc, #304]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081c4:	d055      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081cc:	f200 8096 	bhi.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081d6:	f000 8084 	beq.w	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081e0:	f200 808c 	bhi.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ea:	d030      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081f2:	f200 8083 	bhi.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008202:	d012      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008204:	e07a      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008206:	4b38      	ldr	r3, [pc, #224]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800820e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008212:	d107      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fe0b 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008222:	e340      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008228:	e33d      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822a:	4b2f      	ldr	r3, [pc, #188]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008236:	d107      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008238:	f107 0318 	add.w	r3, r7, #24
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fb51 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008246:	e32e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824c:	e32b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800824e:	4b26      	ldr	r3, [pc, #152]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800825a:	d107      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800825c:	f107 030c 	add.w	r3, r7, #12
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fc93 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826a:	e31c      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008270:	e319      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008272:	4b1d      	ldr	r3, [pc, #116]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800827c:	4b1a      	ldr	r3, [pc, #104]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b04      	cmp	r3, #4
 8008286:	d10c      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800828e:	4b16      	ldr	r3, [pc, #88]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	4a14      	ldr	r2, [pc, #80]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800829a:	fa22 f303 	lsr.w	r3, r2, r3
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a0:	e01e      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082a2:	4b11      	ldr	r3, [pc, #68]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ae:	d106      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082b8:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082bc:	e010      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082be:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ca:	d106      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d2:	d102      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082d4:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d8:	e002      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082de:	e2e2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e0:	e2e1      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082e2:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e6:	e2de      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e8:	58024400 	.word	0x58024400
 80082ec:	03d09000 	.word	0x03d09000
 80082f0:	003d0900 	.word	0x003d0900
 80082f4:	00f42400 	.word	0x00f42400
 80082f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	e2d1      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008306:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800830a:	430b      	orrs	r3, r1
 800830c:	f040 809c 	bne.w	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008310:	4b93      	ldr	r3, [pc, #588]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008314:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008318:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008320:	d054      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008328:	f200 808b 	bhi.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008332:	f000 8083 	beq.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800833c:	f200 8081 	bhi.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008346:	d02f      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834e:	d878      	bhi.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835c:	d012      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800835e:	e070      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008360:	4b7f      	ldr	r3, [pc, #508]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800836c:	d107      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800836e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fd5e 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800837c:	e293      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008382:	e290      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008384:	4b76      	ldr	r3, [pc, #472]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800838c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008392:	f107 0318 	add.w	r3, r7, #24
 8008396:	4618      	mov	r0, r3
 8008398:	f000 faa4 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a0:	e281      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a6:	e27e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a8:	4b6d      	ldr	r3, [pc, #436]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d107      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fbe6 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c4:	e26f      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ca:	e26c      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083cc:	4b64      	ldr	r3, [pc, #400]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d6:	4b62      	ldr	r3, [pc, #392]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d10c      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80083e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e8:	4b5d      	ldr	r3, [pc, #372]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	4a5c      	ldr	r2, [pc, #368]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fa:	e01e      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083fc:	4b58      	ldr	r3, [pc, #352]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008408:	d106      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800840a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008410:	d102      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008412:	4b55      	ldr	r3, [pc, #340]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008416:	e010      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008418:	4b51      	ldr	r3, [pc, #324]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008424:	d106      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800842e:	4b4f      	ldr	r3, [pc, #316]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008432:	e002      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008438:	e235      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800843a:	e234      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800843c:	4b4c      	ldr	r3, [pc, #304]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008440:	e231      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008446:	e22e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008450:	430b      	orrs	r3, r1
 8008452:	f040 808f 	bne.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008456:	4b42      	ldr	r3, [pc, #264]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800845a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800845e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008466:	d06b      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800846e:	d874      	bhi.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008476:	d056      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800847e:	d86c      	bhi.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008486:	d03b      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800848e:	d864      	bhi.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008496:	d021      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800849e:	d85c      	bhi.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80084ae:	e054      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80084b0:	f7fe fa62 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 80084b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084b6:	e1f6      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b8:	4b29      	ldr	r3, [pc, #164]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c4:	d107      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c6:	f107 0318 	add.w	r3, r7, #24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fa0a 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d4:	e1e7      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084da:	e1e4      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084dc:	4b20      	ldr	r3, [pc, #128]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb4c 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e1d5      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fe:	e1d2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008500:	4b17      	ldr	r3, [pc, #92]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b04      	cmp	r3, #4
 800850a:	d109      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800850c:	4b14      	ldr	r3, [pc, #80]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	08db      	lsrs	r3, r3, #3
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	4a13      	ldr	r2, [pc, #76]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851e:	e1c2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e1bf      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008526:	4b0e      	ldr	r3, [pc, #56]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008532:	d102      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008534:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008538:	e1b5      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853e:	e1b2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008540:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800854c:	d102      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800854e:	4b07      	ldr	r3, [pc, #28]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008552:	e1a8      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008558:	e1a5      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855e:	e1a2      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008560:	58024400 	.word	0x58024400
 8008564:	03d09000 	.word	0x03d09000
 8008568:	003d0900 	.word	0x003d0900
 800856c:	00f42400 	.word	0x00f42400
 8008570:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008578:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800857c:	430b      	orrs	r3, r1
 800857e:	d173      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008580:	4b9c      	ldr	r3, [pc, #624]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008588:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800858a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008590:	d02f      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008598:	d863      	bhi.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800859a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80085a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a6:	d012      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80085a8:	e05b      	b.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085aa:	4b92      	ldr	r3, [pc, #584]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b6:	d107      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b8:	f107 0318 	add.w	r3, r7, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f991 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c6:	e16e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085cc:	e16b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ce:	4b89      	ldr	r3, [pc, #548]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d107      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085dc:	f107 030c 	add.w	r3, r7, #12
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fad3 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ea:	e15c      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e159      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085f2:	4b80      	ldr	r3, [pc, #512]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085fc:	4b7d      	ldr	r3, [pc, #500]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b04      	cmp	r3, #4
 8008606:	d10c      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800860e:	4b79      	ldr	r3, [pc, #484]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	08db      	lsrs	r3, r3, #3
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	4a77      	ldr	r2, [pc, #476]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800861a:	fa22 f303 	lsr.w	r3, r2, r3
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008620:	e01e      	b.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008622:	4b74      	ldr	r3, [pc, #464]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862e:	d106      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008636:	d102      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008638:	4b70      	ldr	r3, [pc, #448]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800863c:	e010      	b.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800863e:	4b6d      	ldr	r3, [pc, #436]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800864a:	d106      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800864c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008652:	d102      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008654:	4b6a      	ldr	r3, [pc, #424]	@ (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008658:	e002      	b.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800865e:	e122      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008660:	e121      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008666:	e11e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008670:	430b      	orrs	r3, r1
 8008672:	d133      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008674:	4b5f      	ldr	r3, [pc, #380]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800867c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800868a:	d012      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800868c:	e023      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868e:	4b59      	ldr	r3, [pc, #356]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800869a:	d107      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fbc7 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086aa:	e0fc      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b0:	e0f9      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b2:	4b50      	ldr	r3, [pc, #320]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086be:	d107      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c0:	f107 0318 	add.w	r3, r7, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f90d 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ce:	e0ea      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d4:	e0e7      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086da:	e0e4      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80086dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80086e4:	430b      	orrs	r3, r1
 80086e6:	f040 808d 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80086ea:	4b42      	ldr	r3, [pc, #264]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80086f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086fa:	d06b      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008702:	d874      	bhi.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d056      	beq.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800870c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008712:	d86c      	bhi.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800871a:	d03b      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800871c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008722:	d864      	bhi.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800872a:	d021      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008732:	d85c      	bhi.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008740:	d004      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008742:	e054      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008744:	f000 f8b8 	bl	80088b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008748:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800874a:	e0ac      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800874c:	4b29      	ldr	r3, [pc, #164]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008758:	d107      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800875a:	f107 0318 	add.w	r3, r7, #24
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f8c0 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008768:	e09d      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876e:	e09a      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008770:	4b20      	ldr	r3, [pc, #128]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800877c:	d107      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877e:	f107 030c 	add.w	r3, r7, #12
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fa02 	bl	8008b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878c:	e08b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008792:	e088      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008794:	4b17      	ldr	r3, [pc, #92]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b04      	cmp	r3, #4
 800879e:	d109      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a0:	4b14      	ldr	r3, [pc, #80]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	08db      	lsrs	r3, r3, #3
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	4a13      	ldr	r2, [pc, #76]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b2:	e078      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b8:	e075      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087ba:	4b0e      	ldr	r3, [pc, #56]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c6:	d102      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80087c8:	4b0c      	ldr	r3, [pc, #48]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087cc:	e06b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d2:	e068      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087d4:	4b07      	ldr	r3, [pc, #28]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087e0:	d102      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80087e2:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e6:	e05e      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	e05b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f2:	e058      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087f4:	58024400 	.word	0x58024400
 80087f8:	03d09000 	.word	0x03d09000
 80087fc:	003d0900 	.word	0x003d0900
 8008800:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008808:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800880c:	430b      	orrs	r3, r1
 800880e:	d148      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008810:	4b27      	ldr	r3, [pc, #156]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008814:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008818:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800881a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008820:	d02a      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008828:	d838      	bhi.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800882a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008836:	d00d      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008838:	e030      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800883a:	4b1d      	ldr	r3, [pc, #116]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008846:	d102      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008848:	4b1a      	ldr	r3, [pc, #104]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884c:	e02b      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008852:	e028      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008854:	4b16      	ldr	r3, [pc, #88]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800885c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008860:	d107      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fae4 	bl	8008e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008870:	e019      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008876:	e016      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008878:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008884:	d107      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008886:	f107 0318 	add.w	r3, r7, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f82a 	bl	80088e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008894:	e007      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889a:	e004      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a0:	e001      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80088a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3740      	adds	r7, #64	@ 0x40
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	58024400 	.word	0x58024400
 80088b4:	00f42400 	.word	0x00f42400

080088b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088bc:	f7fe f82c 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 80088c0:	4602      	mov	r2, r0
 80088c2:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	091b      	lsrs	r3, r3, #4
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	4904      	ldr	r1, [pc, #16]	@ (80088e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088ce:	5ccb      	ldrb	r3, [r1, r3]
 80088d0:	f003 031f 	and.w	r3, r3, #31
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088d8:	4618      	mov	r0, r3
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	58024400 	.word	0x58024400
 80088e0:	0800f094 	.word	0x0800f094

080088e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b089      	sub	sp, #36	@ 0x24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fa:	0b1b      	lsrs	r3, r3, #12
 80088fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008900:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008902:	4b9c      	ldr	r3, [pc, #624]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	091b      	lsrs	r3, r3, #4
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800890e:	4b99      	ldr	r3, [pc, #612]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008912:	08db      	lsrs	r3, r3, #3
 8008914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8111 	beq.w	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b02      	cmp	r3, #2
 8008936:	f000 8083 	beq.w	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f200 80a1 	bhi.w	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d056      	beq.n	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800894e:	e099      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008950:	4b88      	ldr	r3, [pc, #544]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02d      	beq.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895c:	4b85      	ldr	r3, [pc, #532]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	08db      	lsrs	r3, r3, #3
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	4a84      	ldr	r2, [pc, #528]	@ (8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b7b      	ldr	r3, [pc, #492]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089b6:	e087      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b6a      	ldr	r3, [pc, #424]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fa:	e065      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b59      	ldr	r3, [pc, #356]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	e043      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b48      	ldr	r3, [pc, #288]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a82:	e021      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008acc:	0a5b      	lsrs	r3, r3, #9
 8008ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aee:	ee17 2a90 	vmov	r2, s15
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008af6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b00:	ee07 3a90 	vmov	s15, r3
 8008b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1c:	ee17 2a90 	vmov	r2, s15
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b24:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	0e1b      	lsrs	r3, r3, #24
 8008b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4a:	ee17 2a90 	vmov	r2, s15
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b52:	e008      	b.n	8008b66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
}
 8008b66:	bf00      	nop
 8008b68:	3724      	adds	r7, #36	@ 0x24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	58024400 	.word	0x58024400
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	46000000 	.word	0x46000000
 8008b80:	4c742400 	.word	0x4c742400
 8008b84:	4a742400 	.word	0x4a742400
 8008b88:	4b742400 	.word	0x4b742400

08008b8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b089      	sub	sp, #36	@ 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b94:	4ba1      	ldr	r3, [pc, #644]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b9e:	4b9f      	ldr	r3, [pc, #636]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	0d1b      	lsrs	r3, r3, #20
 8008ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ba8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008baa:	4b9c      	ldr	r3, [pc, #624]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008bb6:	4b99      	ldr	r3, [pc, #612]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bba:	08db      	lsrs	r3, r3, #3
 8008bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	fb02 f303 	mul.w	r3, r2, r3
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8111 	beq.w	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	f000 8083 	beq.w	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	f200 80a1 	bhi.w	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d056      	beq.n	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bf6:	e099      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bf8:	4b88      	ldr	r3, [pc, #544]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d02d      	beq.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c04:	4b85      	ldr	r3, [pc, #532]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	08db      	lsrs	r3, r3, #3
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	4a84      	ldr	r2, [pc, #528]	@ (8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	ee07 3a90 	vmov	s15, r3
 8008c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c5e:	e087      	b.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b6a      	ldr	r3, [pc, #424]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ca2:	e065      	b.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b59      	ldr	r3, [pc, #356]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce6:	e043      	b.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b48      	ldr	r3, [pc, #288]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d2a:	e021      	b.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b37      	ldr	r3, [pc, #220]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d70:	4b2a      	ldr	r3, [pc, #168]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d74:	0a5b      	lsrs	r3, r3, #9
 8008d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d96:	ee17 2a90 	vmov	r2, s15
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da2:	0c1b      	lsrs	r3, r3, #16
 8008da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc4:	ee17 2a90 	vmov	r2, s15
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008dcc:	4b13      	ldr	r3, [pc, #76]	@ (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd0:	0e1b      	lsrs	r3, r3, #24
 8008dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df2:	ee17 2a90 	vmov	r2, s15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008dfa:	e008      	b.n	8008e0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
}
 8008e0e:	bf00      	nop
 8008e10:	3724      	adds	r7, #36	@ 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	03d09000 	.word	0x03d09000
 8008e24:	46000000 	.word	0x46000000
 8008e28:	4c742400 	.word	0x4c742400
 8008e2c:	4a742400 	.word	0x4a742400
 8008e30:	4b742400 	.word	0x4b742400

08008e34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b089      	sub	sp, #36	@ 0x24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e46:	4b9e      	ldr	r3, [pc, #632]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	091b      	lsrs	r3, r3, #4
 8008e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e52:	4b9b      	ldr	r3, [pc, #620]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e5c:	4b98      	ldr	r3, [pc, #608]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	fb02 f303 	mul.w	r3, r2, r3
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 8111 	beq.w	80090a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	f000 8083 	beq.w	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	f200 80a1 	bhi.w	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d056      	beq.n	8008f4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e9c:	e099      	b.n	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9e:	4b88      	ldr	r3, [pc, #544]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d02d      	beq.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eaa:	4b85      	ldr	r3, [pc, #532]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	08db      	lsrs	r3, r3, #3
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	4a83      	ldr	r2, [pc, #524]	@ (80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	ee07 3a90 	vmov	s15, r3
 8008ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f04:	e087      	b.n	8009016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f10:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f18:	4b69      	ldr	r3, [pc, #420]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f48:	e065      	b.n	8009016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80090d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5c:	4b58      	ldr	r3, [pc, #352]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f70:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8c:	e043      	b.n	8009016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f98:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa0:	4b47      	ldr	r3, [pc, #284]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa8:	ee07 3a90 	vmov	s15, r3
 8008fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd0:	e021      	b.n	8009016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	ee07 3a90 	vmov	s15, r3
 8008fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fdc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe4:	4b36      	ldr	r3, [pc, #216]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fec:	ee07 3a90 	vmov	s15, r3
 8008ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009014:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009016:	4b2a      	ldr	r3, [pc, #168]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901a:	0a5b      	lsrs	r3, r3, #9
 800901c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800902c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009030:	edd7 6a07 	vldr	s13, [r7, #28]
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800903c:	ee17 2a90 	vmov	r2, s15
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009044:	4b1e      	ldr	r3, [pc, #120]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800905a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906a:	ee17 2a90 	vmov	r2, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009072:	4b13      	ldr	r3, [pc, #76]	@ (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	0e1b      	lsrs	r3, r3, #24
 8009078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800907c:	ee07 3a90 	vmov	s15, r3
 8009080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800908c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009098:	ee17 2a90 	vmov	r2, s15
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80090a0:	e008      	b.n	80090b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	609a      	str	r2, [r3, #8]
}
 80090b4:	bf00      	nop
 80090b6:	3724      	adds	r7, #36	@ 0x24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	58024400 	.word	0x58024400
 80090c4:	03d09000 	.word	0x03d09000
 80090c8:	46000000 	.word	0x46000000
 80090cc:	4c742400 	.word	0x4c742400
 80090d0:	4a742400 	.word	0x4a742400
 80090d4:	4b742400 	.word	0x4b742400

080090d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090e6:	4b53      	ldr	r3, [pc, #332]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80090e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d101      	bne.n	80090f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e099      	b.n	800922a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80090fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009102:	f7f9 f9c5 	bl	8002490 <HAL_GetTick>
 8009106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009108:	e008      	b.n	800911c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800910a:	f7f9 f9c1 	bl	8002490 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e086      	b.n	800922a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800911c:	4b45      	ldr	r3, [pc, #276]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f0      	bne.n	800910a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009128:	4b42      	ldr	r3, [pc, #264]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 800912a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	031b      	lsls	r3, r3, #12
 8009136:	493f      	ldr	r1, [pc, #252]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009138:	4313      	orrs	r3, r2
 800913a:	628b      	str	r3, [r1, #40]	@ 0x28
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	3b01      	subs	r3, #1
 8009142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	3b01      	subs	r3, #1
 800914c:	025b      	lsls	r3, r3, #9
 800914e:	b29b      	uxth	r3, r3
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	3b01      	subs	r3, #1
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	3b01      	subs	r3, #1
 8009166:	061b      	lsls	r3, r3, #24
 8009168:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800916c:	4931      	ldr	r1, [pc, #196]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 800916e:	4313      	orrs	r3, r2
 8009170:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009172:	4b30      	ldr	r3, [pc, #192]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	492d      	ldr	r1, [pc, #180]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009180:	4313      	orrs	r3, r2
 8009182:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009184:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	f023 0220 	bic.w	r2, r3, #32
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	4928      	ldr	r1, [pc, #160]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009192:	4313      	orrs	r3, r2
 8009194:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009196:	4b27      	ldr	r3, [pc, #156]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	4a26      	ldr	r2, [pc, #152]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 800919c:	f023 0310 	bic.w	r3, r3, #16
 80091a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091a2:	4b24      	ldr	r3, [pc, #144]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091a6:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <RCCEx_PLL2_Config+0x160>)
 80091a8:	4013      	ands	r3, r2
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	69d2      	ldr	r2, [r2, #28]
 80091ae:	00d2      	lsls	r2, r2, #3
 80091b0:	4920      	ldr	r1, [pc, #128]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80091b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	f043 0310 	orr.w	r3, r3, #16
 80091c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	4a19      	ldr	r2, [pc, #100]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091d4:	e00f      	b.n	80091f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d106      	bne.n	80091ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091dc:	4b15      	ldr	r3, [pc, #84]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e0:	4a14      	ldr	r2, [pc, #80]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091e8:	e005      	b.n	80091f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	4a11      	ldr	r2, [pc, #68]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 80091fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009202:	f7f9 f945 	bl	8002490 <HAL_GetTick>
 8009206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009208:	e008      	b.n	800921c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800920a:	f7f9 f941 	bl	8002490 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e006      	b.n	800922a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800921c:	4b05      	ldr	r3, [pc, #20]	@ (8009234 <RCCEx_PLL2_Config+0x15c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f0      	beq.n	800920a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	58024400 	.word	0x58024400
 8009238:	ffff0007 	.word	0xffff0007

0800923c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800924a:	4b53      	ldr	r3, [pc, #332]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d101      	bne.n	800925a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e099      	b.n	800938e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800925a:	4b4f      	ldr	r3, [pc, #316]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a4e      	ldr	r2, [pc, #312]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009266:	f7f9 f913 	bl	8002490 <HAL_GetTick>
 800926a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800926c:	e008      	b.n	8009280 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800926e:	f7f9 f90f 	bl	8002490 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e086      	b.n	800938e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009280:	4b45      	ldr	r3, [pc, #276]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f0      	bne.n	800926e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800928c:	4b42      	ldr	r3, [pc, #264]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	051b      	lsls	r3, r3, #20
 800929a:	493f      	ldr	r1, [pc, #252]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800929c:	4313      	orrs	r3, r2
 800929e:	628b      	str	r3, [r1, #40]	@ 0x28
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	025b      	lsls	r3, r3, #9
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	061b      	lsls	r3, r3, #24
 80092cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092d0:	4931      	ldr	r1, [pc, #196]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092d6:	4b30      	ldr	r3, [pc, #192]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	492d      	ldr	r1, [pc, #180]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	4928      	ldr	r1, [pc, #160]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092fa:	4b27      	ldr	r3, [pc, #156]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	4a26      	ldr	r2, [pc, #152]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009306:	4b24      	ldr	r3, [pc, #144]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800930a:	4b24      	ldr	r3, [pc, #144]	@ (800939c <RCCEx_PLL3_Config+0x160>)
 800930c:	4013      	ands	r3, r2
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	69d2      	ldr	r2, [r2, #28]
 8009312:	00d2      	lsls	r2, r2, #3
 8009314:	4920      	ldr	r1, [pc, #128]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009316:	4313      	orrs	r3, r2
 8009318:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800931a:	4b1f      	ldr	r3, [pc, #124]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	4a1e      	ldr	r2, [pc, #120]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800932c:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009332:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009338:	e00f      	b.n	800935a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d106      	bne.n	800934e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009340:	4b15      	ldr	r3, [pc, #84]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009344:	4a14      	ldr	r2, [pc, #80]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800934a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800934c:	e005      	b.n	800935a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800934e:	4b12      	ldr	r3, [pc, #72]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4a11      	ldr	r2, [pc, #68]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009354:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800935a:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a0e      	ldr	r2, [pc, #56]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009366:	f7f9 f893 	bl	8002490 <HAL_GetTick>
 800936a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800936c:	e008      	b.n	8009380 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800936e:	f7f9 f88f 	bl	8002490 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e006      	b.n	800938e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009380:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <RCCEx_PLL3_Config+0x15c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0f0      	beq.n	800936e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	58024400 	.word	0x58024400
 800939c:	ffff0007 	.word	0xffff0007

080093a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e10f      	b.n	80095d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a87      	ldr	r2, [pc, #540]	@ (80095dc <HAL_SPI_Init+0x23c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00f      	beq.n	80093e2 <HAL_SPI_Init+0x42>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a86      	ldr	r2, [pc, #536]	@ (80095e0 <HAL_SPI_Init+0x240>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00a      	beq.n	80093e2 <HAL_SPI_Init+0x42>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a84      	ldr	r2, [pc, #528]	@ (80095e4 <HAL_SPI_Init+0x244>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d005      	beq.n	80093e2 <HAL_SPI_Init+0x42>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	2b0f      	cmp	r3, #15
 80093dc:	d901      	bls.n	80093e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e0f7      	b.n	80095d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fa4c 	bl	800a880 <SPI_GetPacketSize>
 80093e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a7b      	ldr	r2, [pc, #492]	@ (80095dc <HAL_SPI_Init+0x23c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00c      	beq.n	800940e <HAL_SPI_Init+0x6e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a79      	ldr	r2, [pc, #484]	@ (80095e0 <HAL_SPI_Init+0x240>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <HAL_SPI_Init+0x6e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a78      	ldr	r2, [pc, #480]	@ (80095e4 <HAL_SPI_Init+0x244>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d002      	beq.n	800940e <HAL_SPI_Init+0x6e>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b08      	cmp	r3, #8
 800940c:	d811      	bhi.n	8009432 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009412:	4a72      	ldr	r2, [pc, #456]	@ (80095dc <HAL_SPI_Init+0x23c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d009      	beq.n	800942c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a70      	ldr	r2, [pc, #448]	@ (80095e0 <HAL_SPI_Init+0x240>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d004      	beq.n	800942c <HAL_SPI_Init+0x8c>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a6f      	ldr	r2, [pc, #444]	@ (80095e4 <HAL_SPI_Init+0x244>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d104      	bne.n	8009436 <HAL_SPI_Init+0x96>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b10      	cmp	r3, #16
 8009430:	d901      	bls.n	8009436 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e0cd      	b.n	80095d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7f8 fc8e 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009472:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800947c:	d119      	bne.n	80094b2 <HAL_SPI_Init+0x112>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009486:	d103      	bne.n	8009490 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800948c:	2b00      	cmp	r3, #0
 800948e:	d008      	beq.n	80094a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10c      	bne.n	80094b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800949c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094a0:	d107      	bne.n	80094b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80094b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00f      	beq.n	80094de <HAL_SPI_Init+0x13e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	2b06      	cmp	r3, #6
 80094c4:	d90b      	bls.n	80094de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e007      	b.n	80094ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69da      	ldr	r2, [r3, #28]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009500:	ea42 0103 	orr.w	r1, r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800954e:	ea42 0103 	orr.w	r1, r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d113      	bne.n	800958e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009578:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800958c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40013000 	.word	0x40013000
 80095e0:	40003800 	.word	0x40003800
 80095e4:	40003c00 	.word	0x40003c00

080095e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3320      	adds	r3, #32
 80095fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009600:	f7f8 ff46 	bl	8002490 <HAL_GetTick>
 8009604:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b01      	cmp	r3, #1
 8009610:	d001      	beq.n	8009616 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009612:	2302      	movs	r3, #2
 8009614:	e1d1      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_SPI_Transmit+0x3a>
 800961c:	88fb      	ldrh	r3, [r7, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e1c9      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_SPI_Transmit+0x4c>
 8009630:	2302      	movs	r3, #2
 8009632:	e1c2      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2203      	movs	r2, #3
 8009640:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	88fa      	ldrh	r2, [r7, #6]
 8009656:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	88fa      	ldrh	r2, [r7, #6]
 800965e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800968c:	d108      	bne.n	80096a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	e009      	b.n	80096b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80096b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	4b96      	ldr	r3, [pc, #600]	@ (8009914 <HAL_SPI_Transmit+0x32c>)
 80096bc:	4013      	ands	r3, r2
 80096be:	88f9      	ldrh	r1, [r7, #6]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	6812      	ldr	r2, [r2, #0]
 80096c4:	430b      	orrs	r3, r1
 80096c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096e0:	d107      	bne.n	80096f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	2b0f      	cmp	r3, #15
 80096f8:	d947      	bls.n	800978a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80096fa:	e03f      	b.n	800977c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b02      	cmp	r3, #2
 8009708:	d114      	bne.n	8009734 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800971a:	1d1a      	adds	r2, r3, #4
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009732:	e023      	b.n	800977c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009734:	f7f8 feac 	bl	8002490 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d803      	bhi.n	800974c <HAL_SPI_Transmit+0x164>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d102      	bne.n	8009752 <HAL_SPI_Transmit+0x16a>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d114      	bne.n	800977c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 ffc6 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800975e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e11e      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1b9      	bne.n	80096fc <HAL_SPI_Transmit+0x114>
 8009788:	e0f1      	b.n	800996e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	2b07      	cmp	r3, #7
 8009790:	f240 80e6 	bls.w	8009960 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009794:	e05d      	b.n	8009852 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d132      	bne.n	800980a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d918      	bls.n	80097e2 <HAL_SPI_Transmit+0x1fa>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d014      	beq.n	80097e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b02      	subs	r3, #2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80097e0:	e037      	b.n	8009852 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097e6:	881a      	ldrh	r2, [r3, #0]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097f0:	1c9a      	adds	r2, r3, #2
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009808:	e023      	b.n	8009852 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800980a:	f7f8 fe41 	bl	8002490 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d803      	bhi.n	8009822 <HAL_SPI_Transmit+0x23a>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d102      	bne.n	8009828 <HAL_SPI_Transmit+0x240>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d114      	bne.n	8009852 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 ff5b 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009834:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e0b3      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d19b      	bne.n	8009796 <HAL_SPI_Transmit+0x1ae>
 800985e:	e086      	b.n	800996e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d154      	bne.n	8009918 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b03      	cmp	r3, #3
 8009878:	d918      	bls.n	80098ac <HAL_SPI_Transmit+0x2c4>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987e:	2b40      	cmp	r3, #64	@ 0x40
 8009880:	d914      	bls.n	80098ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009892:	1d1a      	adds	r2, r3, #4
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b04      	subs	r3, #4
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80098aa:	e059      	b.n	8009960 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d917      	bls.n	80098e8 <HAL_SPI_Transmit+0x300>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d013      	beq.n	80098e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ce:	1c9a      	adds	r2, r3, #2
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b02      	subs	r3, #2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80098e6:	e03b      	b.n	8009960 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3320      	adds	r3, #32
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009912:	e025      	b.n	8009960 <HAL_SPI_Transmit+0x378>
 8009914:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009918:	f7f8 fdba 	bl	8002490 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	429a      	cmp	r2, r3
 8009926:	d803      	bhi.n	8009930 <HAL_SPI_Transmit+0x348>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d102      	bne.n	8009936 <HAL_SPI_Transmit+0x34e>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d114      	bne.n	8009960 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fed4 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009942:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e02c      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	f47f af79 	bne.w	8009860 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2200      	movs	r2, #0
 8009976:	2108      	movs	r1, #8
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 ff53 	bl	800a824 <SPI_WaitOnFlagUntilTimeout>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800998a:	f043 0220 	orr.w	r2, r3, #32
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fea5 	bl	800a6e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80099b8:	2300      	movs	r3, #0
  }
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop

080099c4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	4613      	mov	r3, r2
 80099d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3301      	adds	r3, #1
 80099de:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3330      	adds	r3, #48	@ 0x30
 80099e6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099e8:	f7f8 fd52 	bl	8002490 <HAL_GetTick>
 80099ec:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d001      	beq.n	80099fe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80099fa:	2302      	movs	r3, #2
 80099fc:	e250      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <HAL_SPI_Receive+0x46>
 8009a04:	88fb      	ldrh	r3, [r7, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e248      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_SPI_Receive+0x58>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e241      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2204      	movs	r2, #4
 8009a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	88fa      	ldrh	r2, [r7, #6]
 8009a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009a74:	d108      	bne.n	8009a88 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	e009      	b.n	8009a9c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009a9a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	4b95      	ldr	r3, [pc, #596]	@ (8009cf8 <HAL_SPI_Receive+0x334>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	88f9      	ldrh	r1, [r7, #6]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ac8:	d107      	bne.n	8009ada <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b0f      	cmp	r3, #15
 8009ae0:	d96c      	bls.n	8009bbc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009ae2:	e064      	b.n	8009bae <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d114      	bne.n	8009b24 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009b22:	e044      	b.n	8009bae <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	8bfa      	ldrh	r2, [r7, #30]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d919      	bls.n	8009b66 <HAL_SPI_Receive+0x1a2>
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d014      	beq.n	8009b66 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b46:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b4c:	1d1a      	adds	r2, r3, #4
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009b64:	e023      	b.n	8009bae <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b66:	f7f8 fc93 	bl	8002490 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d803      	bhi.n	8009b7e <HAL_SPI_Receive+0x1ba>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d102      	bne.n	8009b84 <HAL_SPI_Receive+0x1c0>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d114      	bne.n	8009bae <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fdad 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e178      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d194      	bne.n	8009ae4 <HAL_SPI_Receive+0x120>
 8009bba:	e15e      	b.n	8009e7a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b07      	cmp	r3, #7
 8009bc2:	f240 8153 	bls.w	8009e6c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009bc6:	e08f      	b.n	8009ce8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d114      	bne.n	8009c08 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	8812      	ldrh	r2, [r2, #0]
 8009be6:	b292      	uxth	r2, r2
 8009be8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bee:	1c9a      	adds	r2, r3, #2
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c06:	e06f      	b.n	8009ce8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	8bfa      	ldrh	r2, [r7, #30]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d924      	bls.n	8009c60 <HAL_SPI_Receive+0x29c>
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01f      	beq.n	8009c60 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	b292      	uxth	r2, r2
 8009c2a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c30:	1c9a      	adds	r2, r3, #2
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	8812      	ldrh	r2, [r2, #0]
 8009c3e:	b292      	uxth	r2, r2
 8009c40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c46:	1c9a      	adds	r2, r3, #2
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3b02      	subs	r3, #2
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c5e:	e043      	b.n	8009ce8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d119      	bne.n	8009ca0 <HAL_SPI_Receive+0x2dc>
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d014      	beq.n	8009ca0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	8812      	ldrh	r2, [r2, #0]
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c86:	1c9a      	adds	r2, r3, #2
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c9e:	e023      	b.n	8009ce8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ca0:	f7f8 fbf6 	bl	8002490 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d803      	bhi.n	8009cb8 <HAL_SPI_Receive+0x2f4>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d102      	bne.n	8009cbe <HAL_SPI_Receive+0x2fa>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d114      	bne.n	8009ce8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fd10 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e0db      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f47f af69 	bne.w	8009bc8 <HAL_SPI_Receive+0x204>
 8009cf6:	e0c0      	b.n	8009e7a <HAL_SPI_Receive+0x4b6>
 8009cf8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d117      	bne.n	8009d42 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d40:	e094      	b.n	8009e6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	8bfa      	ldrh	r2, [r7, #30]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d946      	bls.n	8009dde <HAL_SPI_Receive+0x41a>
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d041      	beq.n	8009dde <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d66:	7812      	ldrb	r2, [r2, #0]
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dba:	7812      	ldrb	r2, [r2, #0]
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009ddc:	e046      	b.n	8009e6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d81c      	bhi.n	8009e24 <HAL_SPI_Receive+0x460>
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d017      	beq.n	8009e24 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009e22:	e023      	b.n	8009e6c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e24:	f7f8 fb34 	bl	8002490 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d803      	bhi.n	8009e3c <HAL_SPI_Receive+0x478>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3a:	d102      	bne.n	8009e42 <HAL_SPI_Receive+0x47e>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d114      	bne.n	8009e6c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 fc4e 	bl	800a6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e019      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f47f af41 	bne.w	8009cfc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 fc32 	bl	800a6e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
  }
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d001      	beq.n	8009ec6 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e18a      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <HAL_SPI_TransmitReceive_DMA+0x30>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <HAL_SPI_TransmitReceive_DMA+0x30>
 8009ed2:	887b      	ldrh	r3, [r7, #2]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e17f      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d101      	bne.n	8009eea <HAL_SPI_TransmitReceive_DMA+0x42>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e178      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2205      	movs	r2, #5
 8009ef6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	887a      	ldrh	r2, [r7, #2]
 8009f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	887a      	ldrh	r2, [r7, #2]
 8009f14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	887a      	ldrh	r2, [r7, #2]
 8009f22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009f48:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009f58:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b0f      	cmp	r3, #15
 8009f60:	d905      	bls.n	8009f6e <HAL_SPI_TransmitReceive_DMA+0xc6>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f6c:	d10f      	bne.n	8009f8e <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009f72:	2b07      	cmp	r3, #7
 8009f74:	d911      	bls.n	8009f9a <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f80:	d00b      	beq.n	8009f9a <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f86:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f8c:	d005      	beq.n	8009f9a <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e120      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	2b07      	cmp	r3, #7
 8009fa0:	d840      	bhi.n	800a024 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fac:	d109      	bne.n	8009fc2 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	105b      	asrs	r3, r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fcc:	d109      	bne.n	8009fe2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3303      	adds	r3, #3
 8009fd8:	109b      	asrs	r3, r3, #2
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fec:	d109      	bne.n	800a002 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	105b      	asrs	r3, r3, #1
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a00c:	d12e      	bne.n	800a06c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a014:	b29b      	uxth	r3, r3
 800a016:	3303      	adds	r3, #3
 800a018:	109b      	asrs	r3, r3, #2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a022:	e023      	b.n	800a06c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b0f      	cmp	r3, #15
 800a02a:	d81f      	bhi.n	800a06c <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a036:	d109      	bne.n	800a04c <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3301      	adds	r3, #1
 800a042:	105b      	asrs	r3, r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a056:	d109      	bne.n	800a06c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3301      	adds	r3, #1
 800a062:	105b      	asrs	r3, r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a070:	4a5c      	ldr	r2, [pc, #368]	@ (800a1e4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a072:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a078:	4a5b      	ldr	r2, [pc, #364]	@ (800a1e8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a07a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a080:	4a5a      	ldr	r2, [pc, #360]	@ (800a1ec <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a082:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a088:	2200      	movs	r2, #0
 800a08a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3330      	adds	r3, #48	@ 0x30
 800a096:	4619      	mov	r1, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a09c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a0a6:	f7f8 fe9b 	bl	8002de0 <HAL_DMA_Start_IT>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d011      	beq.n	800a0d4 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0b6:	f043 0210 	orr.w	r2, r3, #16
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e083      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0e2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a100:	4a3a      	ldr	r2, [pc, #232]	@ (800a1ec <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10c:	4619      	mov	r1, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3320      	adds	r3, #32
 800a114:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a11c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a11e:	f7f8 fe5f 	bl	8002de0 <HAL_DMA_Start_IT>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d016      	beq.n	800a156 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f9 f8c1 	bl	80032b4 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a138:	f043 0210 	orr.w	r2, r3, #16
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e042      	b.n	800a1dc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a160:	d108      	bne.n	800a174 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6859      	ldr	r1, [r3, #4]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	4b20      	ldr	r3, [pc, #128]	@ (800a1f0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a16e:	400b      	ands	r3, r1
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	e009      	b.n	800a188 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	8879      	ldrh	r1, [r7, #2]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	430b      	orrs	r3, r1
 800a186:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689a      	ldr	r2, [r3, #8]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a196:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	691a      	ldr	r2, [r3, #16]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a1a6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1c0:	d107      	bne.n	800a1d2 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	0800a64f 	.word	0x0800a64f
 800a1e8:	0800a609 	.word	0x0800a609
 800a1ec:	0800a66b 	.word	0x0800a66b
 800a1f0:	ffff0000 	.word	0xffff0000

0800a1f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	@ 0x28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4013      	ands	r3, r2
 800a212:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a226:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3330      	adds	r3, #48	@ 0x30
 800a22e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <HAL_SPI_IRQHandler+0x68>
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	f003 0308 	and.w	r3, r3, #8
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00b      	beq.n	800a25c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a252:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f9cd 	bl	800a5f4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a25a:	e192      	b.n	800a582 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	d113      	bne.n	800a28e <HAL_SPI_IRQHandler+0x9a>
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10e      	bne.n	800a28e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
    handled = 1UL;
 800a28a:	2301      	movs	r3, #1
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10f      	bne.n	800a2b8 <HAL_SPI_IRQHandler+0xc4>
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	4798      	blx	r3
    handled = 1UL;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10f      	bne.n	800a2e2 <HAL_SPI_IRQHandler+0xee>
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00a      	beq.n	800a2e2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d105      	bne.n	800a2e2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
    handled = 1UL;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f040 8147 	bne.w	800a578 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 808b 	beq.w	800a40c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0208 	orr.w	r2, r2, #8
 800a304:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699a      	ldr	r2, [r3, #24]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0210 	orr.w	r2, r2, #16
 800a314:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a324:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0208 	bic.w	r2, r2, #8
 800a334:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d13d      	bne.n	800a3c0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a344:	e036      	b.n	800a3b4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d90b      	bls.n	800a366 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a356:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a358:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	665a      	str	r2, [r3, #100]	@ 0x64
 800a364:	e01d      	b.n	800a3a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b07      	cmp	r3, #7
 800a36c:	d90b      	bls.n	800a386 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	8812      	ldrh	r2, [r2, #0]
 800a376:	b292      	uxth	r2, r2
 800a378:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a37e:	1c9a      	adds	r2, r3, #2
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	665a      	str	r2, [r3, #100]	@ 0x64
 800a384:	e00d      	b.n	800a3a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a392:	7812      	ldrb	r2, [r2, #0]
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1c2      	bne.n	800a346 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f98f 	bl	800a6e4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f901 	bl	800a5e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a3de:	e0d0      	b.n	800a582 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a3e0:	7cfb      	ldrb	r3, [r7, #19]
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d103      	bne.n	800a3ee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f8e6 	bl	800a5b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a3ec:	e0c6      	b.n	800a57c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a3ee:	7cfb      	ldrb	r3, [r7, #19]
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d103      	bne.n	800a3fc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8d5 	bl	800a5a4 <HAL_SPI_RxCpltCallback>
    return;
 800a3fa:	e0bf      	b.n	800a57c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a3fc:	7cfb      	ldrb	r3, [r7, #19]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	f040 80bc 	bne.w	800a57c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f8c3 	bl	800a590 <HAL_SPI_TxCpltCallback>
    return;
 800a40a:	e0b7      	b.n	800a57c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80b5 	beq.w	800a582 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00f      	beq.n	800a442 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a428:	f043 0204 	orr.w	r2, r3, #4
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a440:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00f      	beq.n	800a46c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a452:	f043 0201 	orr.w	r2, r3, #1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a46a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00f      	beq.n	800a496 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a47c:	f043 0208 	orr.w	r2, r3, #8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	699a      	ldr	r2, [r3, #24]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a494:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	f003 0320 	and.w	r3, r3, #32
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00f      	beq.n	800a4c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0220 	orr.w	r2, r2, #32
 800a4be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d05a      	beq.n	800a580 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0201 	bic.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6919      	ldr	r1, [r3, #16]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	4b28      	ldr	r3, [pc, #160]	@ (800a588 <HAL_SPI_IRQHandler+0x394>)
 800a4e6:	400b      	ands	r3, r1
 800a4e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a4f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a4f4:	d138      	bne.n	800a568 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a504:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a512:	4a1e      	ldr	r2, [pc, #120]	@ (800a58c <HAL_SPI_IRQHandler+0x398>)
 800a514:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f9 f9e8 	bl	80038f0 <HAL_DMA_Abort_IT>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a52c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a542:	4a12      	ldr	r2, [pc, #72]	@ (800a58c <HAL_SPI_IRQHandler+0x398>)
 800a544:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f9 f9d0 	bl	80038f0 <HAL_DMA_Abort_IT>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d014      	beq.n	800a580 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a55c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a566:	e00b      	b.n	800a580 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f835 	bl	800a5e0 <HAL_SPI_ErrorCallback>
    return;
 800a576:	e003      	b.n	800a580 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a578:	bf00      	nop
 800a57a:	e002      	b.n	800a582 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a57c:	bf00      	nop
 800a57e:	e000      	b.n	800a582 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a580:	bf00      	nop
  }
}
 800a582:	3728      	adds	r7, #40	@ 0x28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	fffffc94 	.word	0xfffffc94
 800a58c:	0800a6b1 	.word	0x0800a6b1

0800a590 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b07      	cmp	r3, #7
 800a620:	d011      	beq.n	800a646 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a62c:	d103      	bne.n	800a636 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff ffc2 	bl	800a5b8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a634:	e007      	b.n	800a646 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f042 0208 	orr.w	r2, r2, #8
 800a644:	611a      	str	r2, [r3, #16]
}
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f7ff ffb5 	bl	800a5cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a676:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7fa faa9 	bl	8004bd0 <HAL_DMA_GetError>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b02      	cmp	r3, #2
 800a682:	d011      	beq.n	800a6a8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 f82d 	bl	800a6e4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a690:	f043 0210 	orr.w	r2, r3, #16
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff ff9c 	bl	800a5e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff ff82 	bl	800a5e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0208 	orr.w	r2, r2, #8
 800a702:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	699a      	ldr	r2, [r3, #24]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f042 0210 	orr.w	r2, r2, #16
 800a712:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f022 0201 	bic.w	r2, r2, #1
 800a722:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6919      	ldr	r1, [r3, #16]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4b3c      	ldr	r3, [pc, #240]	@ (800a820 <SPI_CloseTransfer+0x13c>)
 800a730:	400b      	ands	r3, r1
 800a732:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a742:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d014      	beq.n	800a77a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00f      	beq.n	800a77a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a760:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	699a      	ldr	r2, [r3, #24]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0220 	orr.w	r2, r2, #32
 800a778:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d014      	beq.n	800a7b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a796:	f043 0204 	orr.w	r2, r3, #4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00f      	beq.n	800a7da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7c0:	f043 0201 	orr.w	r2, r3, #1
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00f      	beq.n	800a804 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ea:	f043 0208 	orr.w	r2, r3, #8
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a802:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	fffffc90 	.word	0xfffffc90

0800a824 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a834:	e010      	b.n	800a858 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a836:	f7f7 fe2b 	bl	8002490 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d803      	bhi.n	800a84e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d102      	bne.n	800a854 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e00f      	b.n	800a878 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	695a      	ldr	r2, [r3, #20]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	4013      	ands	r3, r2
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	429a      	cmp	r2, r3
 800a866:	bf0c      	ite	eq
 800a868:	2301      	moveq	r3, #1
 800a86a:	2300      	movne	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	461a      	mov	r2, r3
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	429a      	cmp	r2, r3
 800a874:	d0df      	beq.n	800a836 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88c:	095b      	lsrs	r3, r3, #5
 800a88e:	3301      	adds	r3, #1
 800a890:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	3301      	adds	r3, #1
 800a898:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	3307      	adds	r3, #7
 800a89e:	08db      	lsrs	r3, r3, #3
 800a8a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e049      	b.n	800a95c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d106      	bne.n	800a8e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7f7 fbb3 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f000 f99d 	bl	800ac34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68da      	ldr	r2, [r3, #12]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0201 	bic.w	r2, r2, #1
 800a97a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a1a      	ldr	r2, [r3, #32]
 800a982:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a986:	4013      	ands	r3, r2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10f      	bne.n	800a9ac <HAL_TIM_Base_Stop_IT+0x48>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a1a      	ldr	r2, [r3, #32]
 800a992:	f240 4344 	movw	r3, #1092	@ 0x444
 800a996:	4013      	ands	r3, r2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <HAL_TIM_Base_Stop_IT+0x48>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d020      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01b      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f06f 0202 	mvn.w	r2, #2
 800a9f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	f003 0303 	and.w	r3, r3, #3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f8f3 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800aa12:	e005      	b.n	800aa20 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f8e5 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f8f6 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d020      	beq.n	800aa72 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d01b      	beq.n	800aa72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f06f 0204 	mvn.w	r2, #4
 800aa42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f8cd 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800aa5e:	e005      	b.n	800aa6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f8bf 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f8d0 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d020      	beq.n	800aabe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f003 0308 	and.w	r3, r3, #8
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01b      	beq.n	800aabe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f06f 0208 	mvn.w	r2, #8
 800aa8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2204      	movs	r2, #4
 800aa94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f8a7 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800aaaa:	e005      	b.n	800aab8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f899 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f8aa 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d020      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f003 0310 	and.w	r3, r3, #16
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01b      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f06f 0210 	mvn.w	r2, #16
 800aada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2208      	movs	r2, #8
 800aae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f881 	bl	800abf8 <HAL_TIM_IC_CaptureCallback>
 800aaf6:	e005      	b.n	800ab04 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f873 	bl	800abe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f884 	bl	800ac0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d007      	beq.n	800ab2e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f06f 0201 	mvn.w	r2, #1
 800ab26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f851 	bl	800abd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00c      	beq.n	800ab5c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f9aa 	bl	800aeb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00c      	beq.n	800ab80 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ab78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9a2 	bl	800aec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d007      	beq.n	800aba4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f83e 	bl	800ac20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00c      	beq.n	800abc8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f06f 0220 	mvn.w	r2, #32
 800abc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f96a 	bl	800ae9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abc8:	bf00      	nop
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a46      	ldr	r2, [pc, #280]	@ (800ad60 <TIM_Base_SetConfig+0x12c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d013      	beq.n	800ac74 <TIM_Base_SetConfig+0x40>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac52:	d00f      	beq.n	800ac74 <TIM_Base_SetConfig+0x40>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a43      	ldr	r2, [pc, #268]	@ (800ad64 <TIM_Base_SetConfig+0x130>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00b      	beq.n	800ac74 <TIM_Base_SetConfig+0x40>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a42      	ldr	r2, [pc, #264]	@ (800ad68 <TIM_Base_SetConfig+0x134>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d007      	beq.n	800ac74 <TIM_Base_SetConfig+0x40>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a41      	ldr	r2, [pc, #260]	@ (800ad6c <TIM_Base_SetConfig+0x138>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d003      	beq.n	800ac74 <TIM_Base_SetConfig+0x40>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a40      	ldr	r2, [pc, #256]	@ (800ad70 <TIM_Base_SetConfig+0x13c>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d108      	bne.n	800ac86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a35      	ldr	r2, [pc, #212]	@ (800ad60 <TIM_Base_SetConfig+0x12c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d01f      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac94:	d01b      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a32      	ldr	r2, [pc, #200]	@ (800ad64 <TIM_Base_SetConfig+0x130>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d017      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a31      	ldr	r2, [pc, #196]	@ (800ad68 <TIM_Base_SetConfig+0x134>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d013      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a30      	ldr	r2, [pc, #192]	@ (800ad6c <TIM_Base_SetConfig+0x138>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d00f      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a2f      	ldr	r2, [pc, #188]	@ (800ad70 <TIM_Base_SetConfig+0x13c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00b      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a2e      	ldr	r2, [pc, #184]	@ (800ad74 <TIM_Base_SetConfig+0x140>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d007      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ad78 <TIM_Base_SetConfig+0x144>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d003      	beq.n	800acce <TIM_Base_SetConfig+0x9a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a2c      	ldr	r2, [pc, #176]	@ (800ad7c <TIM_Base_SetConfig+0x148>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d108      	bne.n	800ace0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a16      	ldr	r2, [pc, #88]	@ (800ad60 <TIM_Base_SetConfig+0x12c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00f      	beq.n	800ad2c <TIM_Base_SetConfig+0xf8>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a18      	ldr	r2, [pc, #96]	@ (800ad70 <TIM_Base_SetConfig+0x13c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d00b      	beq.n	800ad2c <TIM_Base_SetConfig+0xf8>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a17      	ldr	r2, [pc, #92]	@ (800ad74 <TIM_Base_SetConfig+0x140>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d007      	beq.n	800ad2c <TIM_Base_SetConfig+0xf8>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a16      	ldr	r2, [pc, #88]	@ (800ad78 <TIM_Base_SetConfig+0x144>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d003      	beq.n	800ad2c <TIM_Base_SetConfig+0xf8>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a15      	ldr	r2, [pc, #84]	@ (800ad7c <TIM_Base_SetConfig+0x148>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d103      	bne.n	800ad34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d105      	bne.n	800ad52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	611a      	str	r2, [r3, #16]
  }
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	40010000 	.word	0x40010000
 800ad64:	40000400 	.word	0x40000400
 800ad68:	40000800 	.word	0x40000800
 800ad6c:	40000c00 	.word	0x40000c00
 800ad70:	40010400 	.word	0x40010400
 800ad74:	40014000 	.word	0x40014000
 800ad78:	40014400 	.word	0x40014400
 800ad7c:	40014800 	.word	0x40014800

0800ad80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d101      	bne.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e06d      	b.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a30      	ldr	r2, [pc, #192]	@ (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d004      	beq.n	800adcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a2f      	ldr	r2, [pc, #188]	@ (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d108      	bne.n	800adde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800add2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	4313      	orrs	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a20      	ldr	r2, [pc, #128]	@ (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d022      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d01d      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a1d      	ldr	r2, [pc, #116]	@ (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d018      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1a      	ldr	r2, [pc, #104]	@ (800ae90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d00e      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a15      	ldr	r2, [pc, #84]	@ (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d009      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a16      	ldr	r2, [pc, #88]	@ (800ae94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a15      	ldr	r2, [pc, #84]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d10c      	bne.n	800ae62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	40010000 	.word	0x40010000
 800ae84:	40010400 	.word	0x40010400
 800ae88:	40000400 	.word	0x40000400
 800ae8c:	40000800 	.word	0x40000800
 800ae90:	40000c00 	.word	0x40000c00
 800ae94:	40001800 	.word	0x40001800
 800ae98:	40014000 	.word	0x40014000

0800ae9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aedc:	4904      	ldr	r1, [pc, #16]	@ (800aef0 <MX_FATFS_Init+0x18>)
 800aede:	4805      	ldr	r0, [pc, #20]	@ (800aef4 <MX_FATFS_Init+0x1c>)
 800aee0:	f003 fab2 	bl	800e448 <FATFS_LinkDriver>
 800aee4:	4603      	mov	r3, r0
 800aee6:	461a      	mov	r2, r3
 800aee8:	4b03      	ldr	r3, [pc, #12]	@ (800aef8 <MX_FATFS_Init+0x20>)
 800aeea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aeec:	bf00      	nop
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	24000520 	.word	0x24000520
 800aef4:	24000014 	.word	0x24000014
 800aef8:	2400051c 	.word	0x2400051c

0800aefc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f9fb 	bl	800b314 <USER_SPI_initialize>
 800af1e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 facd 	bl	800b4d4 <USER_SPI_status>
 800af3a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	607a      	str	r2, [r7, #4]
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800af54:	7bf8      	ldrb	r0, [r7, #15]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	f000 fad0 	bl	800b500 <USER_SPI_read>
 800af60:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800af7a:	7bf8      	ldrb	r0, [r7, #15]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	f000 fb23 	bl	800b5cc <USER_SPI_write>
 800af86:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	603a      	str	r2, [r7, #0]
 800af9a:	71fb      	strb	r3, [r7, #7]
 800af9c:	460b      	mov	r3, r1
 800af9e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800afa0:	79b9      	ldrb	r1, [r7, #6]
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fb8c 	bl	800b6c4 <USER_SPI_ioctl>
 800afac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0201 	bic.w	r2, r2, #1
 800afce:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	071a      	lsls	r2, r3, #28
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f042 0201 	orr.w	r2, r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
	...

0800b004 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b00c:	f7f7 fa40 	bl	8002490 <HAL_GetTick>
 800b010:	4603      	mov	r3, r0
 800b012:	4a04      	ldr	r2, [pc, #16]	@ (800b024 <SPI_Timer_On+0x20>)
 800b014:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b016:	4a04      	ldr	r2, [pc, #16]	@ (800b028 <SPI_Timer_On+0x24>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6013      	str	r3, [r2, #0]
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	24000528 	.word	0x24000528
 800b028:	2400052c 	.word	0x2400052c

0800b02c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b030:	f7f7 fa2e 	bl	8002490 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <SPI_Timer_Status+0x24>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	4b05      	ldr	r3, [pc, #20]	@ (800b054 <SPI_Timer_Status+0x28>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	bf34      	ite	cc
 800b044:	2301      	movcc	r3, #1
 800b046:	2300      	movcs	r3, #0
 800b048:	b2db      	uxtb	r3, r3
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	24000528 	.word	0x24000528
 800b054:	2400052c 	.word	0x2400052c

0800b058 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive_DMA(&SD_SPI_HANDLE, &dat, &rxDat, 1);
 800b062:	f107 020f 	add.w	r2, r7, #15
 800b066:	1df9      	adds	r1, r7, #7
 800b068:	2301      	movs	r3, #1
 800b06a:	4804      	ldr	r0, [pc, #16]	@ (800b07c <xchg_spi+0x24>)
 800b06c:	f7fe ff1c 	bl	8009ea8 <HAL_SPI_TransmitReceive_DMA>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	24000350 	.word	0x24000350

0800b080 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	e00a      	b.n	800b0a6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	18d4      	adds	r4, r2, r3
 800b096:	20ff      	movs	r0, #255	@ 0xff
 800b098:	f7ff ffde 	bl	800b058 <xchg_spi>
 800b09c:	4603      	mov	r3, r0
 800b09e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d3f0      	bcc.n	800b090 <rcvr_spi_multi+0x10>
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd90      	pop	{r4, r7, pc}

0800b0b8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	4803      	ldr	r0, [pc, #12]	@ (800b0dc <xmit_spi_multi+0x24>)
 800b0ce:	f7fe fa8b 	bl	80095e8 <HAL_SPI_Transmit>
//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	24000350 	.word	0x24000350

0800b0e0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b0e8:	f7f7 f9d2 	bl	8002490 <HAL_GetTick>
 800b0ec:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b0f2:	20ff      	movs	r0, #255	@ 0xff
 800b0f4:	f7ff ffb0 	bl	800b058 <xchg_spi>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2bff      	cmp	r3, #255	@ 0xff
 800b100:	d007      	beq.n	800b112 <wait_ready+0x32>
 800b102:	f7f7 f9c5 	bl	8002490 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d8ef      	bhi.n	800b0f2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	2bff      	cmp	r3, #255	@ 0xff
 800b116:	bf0c      	ite	eq
 800b118:	2301      	moveq	r3, #1
 800b11a:	2300      	movne	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
	...

0800b128 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b12c:	2201      	movs	r2, #1
 800b12e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b132:	4804      	ldr	r0, [pc, #16]	@ (800b144 <despiselect+0x1c>)
 800b134:	f7fa faf0 	bl	8005718 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b138:	20ff      	movs	r0, #255	@ 0xff
 800b13a:	f7ff ff8d 	bl	800b058 <xchg_spi>

}
 800b13e:	bf00      	nop
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	58020400 	.word	0x58020400

0800b148 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b14c:	2200      	movs	r2, #0
 800b14e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b152:	480a      	ldr	r0, [pc, #40]	@ (800b17c <spiselect+0x34>)
 800b154:	f7fa fae0 	bl	8005718 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b158:	20ff      	movs	r0, #255	@ 0xff
 800b15a:	f7ff ff7d 	bl	800b058 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b15e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b162:	f7ff ffbd 	bl	800b0e0 <wait_ready>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <spiselect+0x28>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e002      	b.n	800b176 <spiselect+0x2e>

	despiselect();
 800b170:	f7ff ffda 	bl	800b128 <despiselect>
	return 0;	/* Timeout */
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	58020400 	.word	0x58020400

0800b180 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b18a:	20c8      	movs	r0, #200	@ 0xc8
 800b18c:	f7ff ff3a 	bl	800b004 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b190:	20ff      	movs	r0, #255	@ 0xff
 800b192:	f7ff ff61 	bl	800b058 <xchg_spi>
 800b196:	4603      	mov	r3, r0
 800b198:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	2bff      	cmp	r3, #255	@ 0xff
 800b19e:	d104      	bne.n	800b1aa <rcvr_datablock+0x2a>
 800b1a0:	f7ff ff44 	bl	800b02c <SPI_Timer_Status>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1f2      	bne.n	800b190 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1ae:	d001      	beq.n	800b1b4 <rcvr_datablock+0x34>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e00a      	b.n	800b1ca <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff ff62 	bl	800b080 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b1bc:	20ff      	movs	r0, #255	@ 0xff
 800b1be:	f7ff ff4b 	bl	800b058 <xchg_spi>
 800b1c2:	20ff      	movs	r0, #255	@ 0xff
 800b1c4:	f7ff ff48 	bl	800b058 <xchg_spi>

	return 1;						/* Function succeeded */
 800b1c8:	2301      	movs	r3, #1
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b1de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b1e2:	f7ff ff7d 	bl	800b0e0 <wait_ready>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <xmit_datablock+0x1e>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e01e      	b.n	800b22e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff ff30 	bl	800b058 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	2bfd      	cmp	r3, #253	@ 0xfd
 800b1fc:	d016      	beq.n	800b22c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b1fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff ff58 	bl	800b0b8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b208:	20ff      	movs	r0, #255	@ 0xff
 800b20a:	f7ff ff25 	bl	800b058 <xchg_spi>
 800b20e:	20ff      	movs	r0, #255	@ 0xff
 800b210:	f7ff ff22 	bl	800b058 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b214:	20ff      	movs	r0, #255	@ 0xff
 800b216:	f7ff ff1f 	bl	800b058 <xchg_spi>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	f003 031f 	and.w	r3, r3, #31
 800b224:	2b05      	cmp	r3, #5
 800b226:	d001      	beq.n	800b22c <xmit_datablock+0x5a>
 800b228:	2300      	movs	r3, #0
 800b22a:	e000      	b.n	800b22e <xmit_datablock+0x5c>
	}
	return 1;
 800b22c:	2301      	movs	r3, #1
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b084      	sub	sp, #16
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	4603      	mov	r3, r0
 800b23e:	6039      	str	r1, [r7, #0]
 800b240:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b246:	2b00      	cmp	r3, #0
 800b248:	da0e      	bge.n	800b268 <send_cmd+0x32>
		cmd &= 0x7F;
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b250:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b252:	2100      	movs	r1, #0
 800b254:	2037      	movs	r0, #55	@ 0x37
 800b256:	f7ff ffee 	bl	800b236 <send_cmd>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d901      	bls.n	800b268 <send_cmd+0x32>
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	e051      	b.n	800b30c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	2b0c      	cmp	r3, #12
 800b26c:	d008      	beq.n	800b280 <send_cmd+0x4a>
		despiselect();
 800b26e:	f7ff ff5b 	bl	800b128 <despiselect>
		if (!spiselect()) return 0xFF;
 800b272:	f7ff ff69 	bl	800b148 <spiselect>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <send_cmd+0x4a>
 800b27c:	23ff      	movs	r3, #255	@ 0xff
 800b27e:	e045      	b.n	800b30c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b286:	b2db      	uxtb	r3, r3
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fee5 	bl	800b058 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	0e1b      	lsrs	r3, r3, #24
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fedf 	bl	800b058 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fed9 	bl	800b058 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	0a1b      	lsrs	r3, r3, #8
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fed3 	bl	800b058 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fece 	bl	800b058 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b2bc:	2301      	movs	r3, #1
 800b2be:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <send_cmd+0x94>
 800b2c6:	2395      	movs	r3, #149	@ 0x95
 800b2c8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d101      	bne.n	800b2d4 <send_cmd+0x9e>
 800b2d0:	2387      	movs	r3, #135	@ 0x87
 800b2d2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff febe 	bl	800b058 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2b0c      	cmp	r3, #12
 800b2e0:	d102      	bne.n	800b2e8 <send_cmd+0xb2>
 800b2e2:	20ff      	movs	r0, #255	@ 0xff
 800b2e4:	f7ff feb8 	bl	800b058 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b2e8:	230a      	movs	r3, #10
 800b2ea:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b2ec:	20ff      	movs	r0, #255	@ 0xff
 800b2ee:	f7ff feb3 	bl	800b058 <xchg_spi>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da05      	bge.n	800b30a <send_cmd+0xd4>
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	3b01      	subs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f0      	bne.n	800b2ec <send_cmd+0xb6>

	return res;							/* Return received response */
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <USER_SPI_initialize+0x14>
 800b324:	2301      	movs	r3, #1
 800b326:	e0cb      	b.n	800b4c0 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b328:	4b67      	ldr	r3, [pc, #412]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <USER_SPI_initialize+0x2a>
 800b336:	4b64      	ldr	r3, [pc, #400]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	e0c0      	b.n	800b4c0 <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800b33e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800b342:	4862      	ldr	r0, [pc, #392]	@ (800b4cc <USER_SPI_initialize+0x1b8>)
 800b344:	f7ff fe37 	bl	800afb6 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b348:	230a      	movs	r3, #10
 800b34a:	73fb      	strb	r3, [r7, #15]
 800b34c:	e005      	b.n	800b35a <USER_SPI_initialize+0x46>
 800b34e:	20ff      	movs	r0, #255	@ 0xff
 800b350:	f7ff fe82 	bl	800b058 <xchg_spi>
 800b354:	7bfb      	ldrb	r3, [r7, #15]
 800b356:	3b01      	subs	r3, #1
 800b358:	73fb      	strb	r3, [r7, #15]
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f6      	bne.n	800b34e <USER_SPI_initialize+0x3a>

	ty = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b364:	2100      	movs	r1, #0
 800b366:	2000      	movs	r0, #0
 800b368:	f7ff ff65 	bl	800b236 <send_cmd>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	f040 808b 	bne.w	800b48a <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b378:	f7ff fe44 	bl	800b004 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b37c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b380:	2008      	movs	r0, #8
 800b382:	f7ff ff58 	bl	800b236 <send_cmd>
 800b386:	4603      	mov	r3, r0
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d151      	bne.n	800b430 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
 800b390:	e00d      	b.n	800b3ae <USER_SPI_initialize+0x9a>
 800b392:	7bfc      	ldrb	r4, [r7, #15]
 800b394:	20ff      	movs	r0, #255	@ 0xff
 800b396:	f7ff fe5f 	bl	800b058 <xchg_spi>
 800b39a:	4603      	mov	r3, r0
 800b39c:	461a      	mov	r2, r3
 800b39e:	f104 0310 	add.w	r3, r4, #16
 800b3a2:	443b      	add	r3, r7
 800b3a4:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	73fb      	strb	r3, [r7, #15]
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d9ee      	bls.n	800b392 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b3b4:	7abb      	ldrb	r3, [r7, #10]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d167      	bne.n	800b48a <USER_SPI_initialize+0x176>
 800b3ba:	7afb      	ldrb	r3, [r7, #11]
 800b3bc:	2baa      	cmp	r3, #170	@ 0xaa
 800b3be:	d164      	bne.n	800b48a <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b3c0:	bf00      	nop
 800b3c2:	f7ff fe33 	bl	800b02c <SPI_Timer_Status>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d007      	beq.n	800b3dc <USER_SPI_initialize+0xc8>
 800b3cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b3d0:	20a9      	movs	r0, #169	@ 0xa9
 800b3d2:	f7ff ff30 	bl	800b236 <send_cmd>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f2      	bne.n	800b3c2 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b3dc:	f7ff fe26 	bl	800b02c <SPI_Timer_Status>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d051      	beq.n	800b48a <USER_SPI_initialize+0x176>
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	203a      	movs	r0, #58	@ 0x3a
 800b3ea:	f7ff ff24 	bl	800b236 <send_cmd>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d14a      	bne.n	800b48a <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
 800b3f8:	e00d      	b.n	800b416 <USER_SPI_initialize+0x102>
 800b3fa:	7bfc      	ldrb	r4, [r7, #15]
 800b3fc:	20ff      	movs	r0, #255	@ 0xff
 800b3fe:	f7ff fe2b 	bl	800b058 <xchg_spi>
 800b402:	4603      	mov	r3, r0
 800b404:	461a      	mov	r2, r3
 800b406:	f104 0310 	add.w	r3, r4, #16
 800b40a:	443b      	add	r3, r7
 800b40c:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	3301      	adds	r3, #1
 800b414:	73fb      	strb	r3, [r7, #15]
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d9ee      	bls.n	800b3fa <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b41c:	7a3b      	ldrb	r3, [r7, #8]
 800b41e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <USER_SPI_initialize+0x116>
 800b426:	230c      	movs	r3, #12
 800b428:	e000      	b.n	800b42c <USER_SPI_initialize+0x118>
 800b42a:	2304      	movs	r3, #4
 800b42c:	737b      	strb	r3, [r7, #13]
 800b42e:	e02c      	b.n	800b48a <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b430:	2100      	movs	r1, #0
 800b432:	20a9      	movs	r0, #169	@ 0xa9
 800b434:	f7ff feff 	bl	800b236 <send_cmd>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d804      	bhi.n	800b448 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b43e:	2302      	movs	r3, #2
 800b440:	737b      	strb	r3, [r7, #13]
 800b442:	23a9      	movs	r3, #169	@ 0xa9
 800b444:	73bb      	strb	r3, [r7, #14]
 800b446:	e003      	b.n	800b450 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b448:	2301      	movs	r3, #1
 800b44a:	737b      	strb	r3, [r7, #13]
 800b44c:	2301      	movs	r3, #1
 800b44e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b450:	bf00      	nop
 800b452:	f7ff fdeb 	bl	800b02c <SPI_Timer_Status>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <USER_SPI_initialize+0x158>
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2100      	movs	r1, #0
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fee8 	bl	800b236 <send_cmd>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f2      	bne.n	800b452 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b46c:	f7ff fdde 	bl	800b02c <SPI_Timer_Status>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <USER_SPI_initialize+0x172>
 800b476:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b47a:	2010      	movs	r0, #16
 800b47c:	f7ff fedb 	bl	800b236 <send_cmd>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <USER_SPI_initialize+0x176>
				ty = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b48a:	4a11      	ldr	r2, [pc, #68]	@ (800b4d0 <USER_SPI_initialize+0x1bc>)
 800b48c:	7b7b      	ldrb	r3, [r7, #13]
 800b48e:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b490:	f7ff fe4a 	bl	800b128 <despiselect>

	if (ty) {			/* OK */
 800b494:	7b7b      	ldrb	r3, [r7, #13]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00c      	beq.n	800b4b4 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800b49a:	2100      	movs	r1, #0
 800b49c:	480b      	ldr	r0, [pc, #44]	@ (800b4cc <USER_SPI_initialize+0x1b8>)
 800b49e:	f7ff fd8a 	bl	800afb6 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b4a2:	4b09      	ldr	r3, [pc, #36]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f023 0301 	bic.w	r3, r3, #1
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e002      	b.n	800b4ba <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b4ba:	4b03      	ldr	r3, [pc, #12]	@ (800b4c8 <USER_SPI_initialize+0x1b4>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd90      	pop	{r4, r7, pc}
 800b4c8:	24000028 	.word	0x24000028
 800b4cc:	24000350 	.word	0x24000350
 800b4d0:	24000524 	.word	0x24000524

0800b4d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <USER_SPI_status+0x14>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e002      	b.n	800b4ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b4e8:	4b04      	ldr	r3, [pc, #16]	@ (800b4fc <USER_SPI_status+0x28>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	24000028 	.word	0x24000028

0800b500 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <USER_SPI_read+0x1c>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <USER_SPI_read+0x20>
 800b51c:	2304      	movs	r3, #4
 800b51e:	e04d      	b.n	800b5bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b520:	4b28      	ldr	r3, [pc, #160]	@ (800b5c4 <USER_SPI_read+0xc4>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <USER_SPI_read+0x32>
 800b52e:	2303      	movs	r3, #3
 800b530:	e044      	b.n	800b5bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b532:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <USER_SPI_read+0xc8>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0308 	and.w	r3, r3, #8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <USER_SPI_read+0x44>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	025b      	lsls	r3, r3, #9
 800b542:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d111      	bne.n	800b56e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	2011      	movs	r0, #17
 800b54e:	f7ff fe72 	bl	800b236 <send_cmd>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d129      	bne.n	800b5ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b558:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f7ff fe0f 	bl	800b180 <rcvr_datablock>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d021      	beq.n	800b5ac <USER_SPI_read+0xac>
			count = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	e01e      	b.n	800b5ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	2012      	movs	r0, #18
 800b572:	f7ff fe60 	bl	800b236 <send_cmd>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d117      	bne.n	800b5ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b57c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b580:	68b8      	ldr	r0, [r7, #8]
 800b582:	f7ff fdfd 	bl	800b180 <rcvr_datablock>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00a      	beq.n	800b5a2 <USER_SPI_read+0xa2>
				buff += 512;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b592:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	3b01      	subs	r3, #1
 800b598:	603b      	str	r3, [r7, #0]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ed      	bne.n	800b57c <USER_SPI_read+0x7c>
 800b5a0:	e000      	b.n	800b5a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b5a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	200c      	movs	r0, #12
 800b5a8:	f7ff fe45 	bl	800b236 <send_cmd>
		}
	}
	despiselect();
 800b5ac:	f7ff fdbc 	bl	800b128 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	bf14      	ite	ne
 800b5b6:	2301      	movne	r3, #1
 800b5b8:	2300      	moveq	r3, #0
 800b5ba:	b2db      	uxtb	r3, r3
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	24000028 	.word	0x24000028
 800b5c8:	24000524 	.word	0x24000524

0800b5cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
 800b5d6:	603b      	str	r3, [r7, #0]
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <USER_SPI_write+0x1c>
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <USER_SPI_write+0x20>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	e063      	b.n	800b6b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b5ec:	4b33      	ldr	r3, [pc, #204]	@ (800b6bc <USER_SPI_write+0xf0>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <USER_SPI_write+0x32>
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e05a      	b.n	800b6b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b5fe:	4b2f      	ldr	r3, [pc, #188]	@ (800b6bc <USER_SPI_write+0xf0>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <USER_SPI_write+0x44>
 800b60c:	2302      	movs	r3, #2
 800b60e:	e051      	b.n	800b6b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b610:	4b2b      	ldr	r3, [pc, #172]	@ (800b6c0 <USER_SPI_write+0xf4>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	f003 0308 	and.w	r3, r3, #8
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <USER_SPI_write+0x56>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	025b      	lsls	r3, r3, #9
 800b620:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d110      	bne.n	800b64a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	2018      	movs	r0, #24
 800b62c:	f7ff fe03 	bl	800b236 <send_cmd>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d136      	bne.n	800b6a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b636:	21fe      	movs	r1, #254	@ 0xfe
 800b638:	68b8      	ldr	r0, [r7, #8]
 800b63a:	f7ff fdca 	bl	800b1d2 <xmit_datablock>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d02f      	beq.n	800b6a4 <USER_SPI_write+0xd8>
			count = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	e02c      	b.n	800b6a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b64a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6c0 <USER_SPI_write+0xf4>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 0306 	and.w	r3, r3, #6
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <USER_SPI_write+0x92>
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	2097      	movs	r0, #151	@ 0x97
 800b65a:	f7ff fdec 	bl	800b236 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	2019      	movs	r0, #25
 800b662:	f7ff fde8 	bl	800b236 <send_cmd>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11b      	bne.n	800b6a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b66c:	21fc      	movs	r1, #252	@ 0xfc
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff fdaf 	bl	800b1d2 <xmit_datablock>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <USER_SPI_write+0xc4>
				buff += 512;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b680:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	3b01      	subs	r3, #1
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1ee      	bne.n	800b66c <USER_SPI_write+0xa0>
 800b68e:	e000      	b.n	800b692 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b690:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b692:	21fd      	movs	r1, #253	@ 0xfd
 800b694:	2000      	movs	r0, #0
 800b696:	f7ff fd9c 	bl	800b1d2 <xmit_datablock>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <USER_SPI_write+0xd8>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b6a4:	f7ff fd40 	bl	800b128 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bf14      	ite	ne
 800b6ae:	2301      	movne	r3, #1
 800b6b0:	2300      	moveq	r3, #0
 800b6b2:	b2db      	uxtb	r3, r3
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	24000028 	.word	0x24000028
 800b6c0:	24000524 	.word	0x24000524

0800b6c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08c      	sub	sp, #48	@ 0x30
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	603a      	str	r2, [r7, #0]
 800b6ce:	71fb      	strb	r3, [r7, #7]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <USER_SPI_ioctl+0x1a>
 800b6da:	2304      	movs	r3, #4
 800b6dc:	e15a      	b.n	800b994 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b6de:	4baf      	ldr	r3, [pc, #700]	@ (800b99c <USER_SPI_ioctl+0x2d8>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <USER_SPI_ioctl+0x2c>
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e151      	b.n	800b994 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800b6f6:	79bb      	ldrb	r3, [r7, #6]
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	f200 8136 	bhi.w	800b96a <USER_SPI_ioctl+0x2a6>
 800b6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <USER_SPI_ioctl+0x40>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b719 	.word	0x0800b719
 800b708:	0800b72d 	.word	0x0800b72d
 800b70c:	0800b96b 	.word	0x0800b96b
 800b710:	0800b7d9 	.word	0x0800b7d9
 800b714:	0800b8cf 	.word	0x0800b8cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b718:	f7ff fd16 	bl	800b148 <spiselect>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8127 	beq.w	800b972 <USER_SPI_ioctl+0x2ae>
 800b724:	2300      	movs	r3, #0
 800b726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b72a:	e122      	b.n	800b972 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b72c:	2100      	movs	r1, #0
 800b72e:	2009      	movs	r0, #9
 800b730:	f7ff fd81 	bl	800b236 <send_cmd>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 811d 	bne.w	800b976 <USER_SPI_ioctl+0x2b2>
 800b73c:	f107 030c 	add.w	r3, r7, #12
 800b740:	2110      	movs	r1, #16
 800b742:	4618      	mov	r0, r3
 800b744:	f7ff fd1c 	bl	800b180 <rcvr_datablock>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 8113 	beq.w	800b976 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b750:	7b3b      	ldrb	r3, [r7, #12]
 800b752:	099b      	lsrs	r3, r3, #6
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b01      	cmp	r3, #1
 800b758:	d111      	bne.n	800b77e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b75a:	7d7b      	ldrb	r3, [r7, #21]
 800b75c:	461a      	mov	r2, r3
 800b75e:	7d3b      	ldrb	r3, [r7, #20]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	4413      	add	r3, r2
 800b764:	461a      	mov	r2, r3
 800b766:	7cfb      	ldrb	r3, [r7, #19]
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b76e:	4413      	add	r3, r2
 800b770:	3301      	adds	r3, #1
 800b772:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	029a      	lsls	r2, r3, #10
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e028      	b.n	800b7d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b77e:	7c7b      	ldrb	r3, [r7, #17]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7dbb      	ldrb	r3, [r7, #22]
 800b788:	09db      	lsrs	r3, r3, #7
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	4413      	add	r3, r2
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	7d7b      	ldrb	r3, [r7, #21]
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	b2db      	uxtb	r3, r3
 800b796:	f003 0306 	and.w	r3, r3, #6
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	4413      	add	r3, r2
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b7a6:	7d3b      	ldrb	r3, [r7, #20]
 800b7a8:	099b      	lsrs	r3, r3, #6
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	7cfb      	ldrb	r3, [r7, #19]
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	441a      	add	r2, r3
 800b7b4:	7cbb      	ldrb	r3, [r7, #18]
 800b7b6:	029b      	lsls	r3, r3, #10
 800b7b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b7bc:	4413      	add	r3, r2
 800b7be:	3301      	adds	r3, #1
 800b7c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b7c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b7c6:	3b09      	subs	r3, #9
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	409a      	lsls	r2, r3
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b7d6:	e0ce      	b.n	800b976 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b7d8:	4b71      	ldr	r3, [pc, #452]	@ (800b9a0 <USER_SPI_ioctl+0x2dc>)
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	f003 0304 	and.w	r3, r3, #4
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d031      	beq.n	800b848 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	208d      	movs	r0, #141	@ 0x8d
 800b7e8:	f7ff fd25 	bl	800b236 <send_cmd>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 80c3 	bne.w	800b97a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b7f4:	20ff      	movs	r0, #255	@ 0xff
 800b7f6:	f7ff fc2f 	bl	800b058 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b7fa:	f107 030c 	add.w	r3, r7, #12
 800b7fe:	2110      	movs	r1, #16
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff fcbd 	bl	800b180 <rcvr_datablock>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80b6 	beq.w	800b97a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b80e:	2330      	movs	r3, #48	@ 0x30
 800b810:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b814:	e007      	b.n	800b826 <USER_SPI_ioctl+0x162>
 800b816:	20ff      	movs	r0, #255	@ 0xff
 800b818:	f7ff fc1e 	bl	800b058 <xchg_spi>
 800b81c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b820:	3b01      	subs	r3, #1
 800b822:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b826:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1f3      	bne.n	800b816 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b82e:	7dbb      	ldrb	r3, [r7, #22]
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	b2db      	uxtb	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	2310      	movs	r3, #16
 800b838:	fa03 f202 	lsl.w	r2, r3, r2
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b846:	e098      	b.n	800b97a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b848:	2100      	movs	r1, #0
 800b84a:	2009      	movs	r0, #9
 800b84c:	f7ff fcf3 	bl	800b236 <send_cmd>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 8091 	bne.w	800b97a <USER_SPI_ioctl+0x2b6>
 800b858:	f107 030c 	add.w	r3, r7, #12
 800b85c:	2110      	movs	r1, #16
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff fc8e 	bl	800b180 <rcvr_datablock>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 8087 	beq.w	800b97a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b86c:	4b4c      	ldr	r3, [pc, #304]	@ (800b9a0 <USER_SPI_ioctl+0x2dc>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d012      	beq.n	800b89e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b878:	7dbb      	ldrb	r3, [r7, #22]
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b880:	7dfa      	ldrb	r2, [r7, #23]
 800b882:	09d2      	lsrs	r2, r2, #7
 800b884:	b2d2      	uxtb	r2, r2
 800b886:	4413      	add	r3, r2
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	7e7b      	ldrb	r3, [r7, #25]
 800b88c:	099b      	lsrs	r3, r3, #6
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	fa02 f303 	lsl.w	r3, r2, r3
 800b896:	461a      	mov	r2, r3
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e013      	b.n	800b8c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b89e:	7dbb      	ldrb	r3, [r7, #22]
 800b8a0:	109b      	asrs	r3, r3, #2
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	7dfa      	ldrb	r2, [r7, #23]
 800b8ac:	00d2      	lsls	r2, r2, #3
 800b8ae:	f002 0218 	and.w	r2, r2, #24
 800b8b2:	7df9      	ldrb	r1, [r7, #23]
 800b8b4:	0949      	lsrs	r1, r1, #5
 800b8b6:	b2c9      	uxtb	r1, r1
 800b8b8:	440a      	add	r2, r1
 800b8ba:	3201      	adds	r2, #1
 800b8bc:	fb02 f303 	mul.w	r3, r2, r3
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800b8cc:	e055      	b.n	800b97a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b8ce:	4b34      	ldr	r3, [pc, #208]	@ (800b9a0 <USER_SPI_ioctl+0x2dc>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 0306 	and.w	r3, r3, #6
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d051      	beq.n	800b97e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b8da:	f107 020c 	add.w	r2, r7, #12
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	210b      	movs	r1, #11
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff feee 	bl	800b6c4 <USER_SPI_ioctl>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d149      	bne.n	800b982 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b8ee:	7b3b      	ldrb	r3, [r7, #12]
 800b8f0:	099b      	lsrs	r3, r3, #6
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <USER_SPI_ioctl+0x23e>
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d041      	beq.n	800b986 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	623b      	str	r3, [r7, #32]
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800b912:	4b23      	ldr	r3, [pc, #140]	@ (800b9a0 <USER_SPI_ioctl+0x2dc>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 0308 	and.w	r3, r3, #8
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b920:	025b      	lsls	r3, r3, #9
 800b922:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	025b      	lsls	r3, r3, #9
 800b928:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b92a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b92c:	2020      	movs	r0, #32
 800b92e:	f7ff fc82 	bl	800b236 <send_cmd>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d128      	bne.n	800b98a <USER_SPI_ioctl+0x2c6>
 800b938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b93a:	2021      	movs	r0, #33	@ 0x21
 800b93c:	f7ff fc7b 	bl	800b236 <send_cmd>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d121      	bne.n	800b98a <USER_SPI_ioctl+0x2c6>
 800b946:	2100      	movs	r1, #0
 800b948:	2026      	movs	r0, #38	@ 0x26
 800b94a:	f7ff fc74 	bl	800b236 <send_cmd>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11a      	bne.n	800b98a <USER_SPI_ioctl+0x2c6>
 800b954:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b958:	f7ff fbc2 	bl	800b0e0 <wait_ready>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b962:	2300      	movs	r3, #0
 800b964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800b968:	e00f      	b.n	800b98a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b96a:	2304      	movs	r3, #4
 800b96c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b970:	e00c      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		break;
 800b972:	bf00      	nop
 800b974:	e00a      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		break;
 800b976:	bf00      	nop
 800b978:	e008      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		break;
 800b97a:	bf00      	nop
 800b97c:	e006      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b97e:	bf00      	nop
 800b980:	e004      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b982:	bf00      	nop
 800b984:	e002      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b986:	bf00      	nop
 800b988:	e000      	b.n	800b98c <USER_SPI_ioctl+0x2c8>
		break;
 800b98a:	bf00      	nop
	}

	despiselect();
 800b98c:	f7ff fbcc 	bl	800b128 <despiselect>

	return res;
 800b990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b994:	4618      	mov	r0, r3
 800b996:	3730      	adds	r7, #48	@ 0x30
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	24000028 	.word	0x24000028
 800b9a0:	24000524 	.word	0x24000524

0800b9a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b9ae:	79fb      	ldrb	r3, [r7, #7]
 800b9b0:	4a08      	ldr	r2, [pc, #32]	@ (800b9d4 <disk_status+0x30>)
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	79fa      	ldrb	r2, [r7, #7]
 800b9bc:	4905      	ldr	r1, [pc, #20]	@ (800b9d4 <disk_status+0x30>)
 800b9be:	440a      	add	r2, r1
 800b9c0:	7a12      	ldrb	r2, [r2, #8]
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4798      	blx	r3
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	24000758 	.word	0x24000758

0800b9d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b9e6:	79fb      	ldrb	r3, [r7, #7]
 800b9e8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba24 <disk_initialize+0x4c>)
 800b9ea:	5cd3      	ldrb	r3, [r2, r3]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d114      	bne.n	800ba1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800ba24 <disk_initialize+0x4c>)
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	79fa      	ldrb	r2, [r7, #7]
 800b9fe:	4909      	ldr	r1, [pc, #36]	@ (800ba24 <disk_initialize+0x4c>)
 800ba00:	440a      	add	r2, r1
 800ba02:	7a12      	ldrb	r2, [r2, #8]
 800ba04:	4610      	mov	r0, r2
 800ba06:	4798      	blx	r3
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d103      	bne.n	800ba1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	4a03      	ldr	r2, [pc, #12]	@ (800ba24 <disk_initialize+0x4c>)
 800ba16:	2101      	movs	r1, #1
 800ba18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	24000758 	.word	0x24000758

0800ba28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ba28:	b590      	push	{r4, r7, lr}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	4603      	mov	r3, r0
 800ba36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba64 <disk_read+0x3c>)
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	689c      	ldr	r4, [r3, #8]
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	4a07      	ldr	r2, [pc, #28]	@ (800ba64 <disk_read+0x3c>)
 800ba48:	4413      	add	r3, r2
 800ba4a:	7a18      	ldrb	r0, [r3, #8]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	47a0      	blx	r4
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]
  return res;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd90      	pop	{r4, r7, pc}
 800ba62:	bf00      	nop
 800ba64:	24000758 	.word	0x24000758

0800ba68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	4603      	mov	r3, r0
 800ba76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
 800ba7a:	4a0a      	ldr	r2, [pc, #40]	@ (800baa4 <disk_write+0x3c>)
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	68dc      	ldr	r4, [r3, #12]
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	4a07      	ldr	r2, [pc, #28]	@ (800baa4 <disk_write+0x3c>)
 800ba88:	4413      	add	r3, r2
 800ba8a:	7a18      	ldrb	r0, [r3, #8]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	68b9      	ldr	r1, [r7, #8]
 800ba92:	47a0      	blx	r4
 800ba94:	4603      	mov	r3, r0
 800ba96:	75fb      	strb	r3, [r7, #23]
  return res;
 800ba98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd90      	pop	{r4, r7, pc}
 800baa2:	bf00      	nop
 800baa4:	24000758 	.word	0x24000758

0800baa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	603a      	str	r2, [r7, #0]
 800bab2:	71fb      	strb	r3, [r7, #7]
 800bab4:	460b      	mov	r3, r1
 800bab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	4a09      	ldr	r2, [pc, #36]	@ (800bae0 <disk_ioctl+0x38>)
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	79fa      	ldrb	r2, [r7, #7]
 800bac6:	4906      	ldr	r1, [pc, #24]	@ (800bae0 <disk_ioctl+0x38>)
 800bac8:	440a      	add	r2, r1
 800baca:	7a10      	ldrb	r0, [r2, #8]
 800bacc:	79b9      	ldrb	r1, [r7, #6]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4798      	blx	r3
 800bad2:	4603      	mov	r3, r0
 800bad4:	73fb      	strb	r3, [r7, #15]
  return res;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	24000758 	.word	0x24000758

0800bae4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3301      	adds	r3, #1
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	b21a      	sxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b21b      	sxth	r3, r3
 800bb00:	4313      	orrs	r3, r2
 800bb02:	b21b      	sxth	r3, r3
 800bb04:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bb06:	89fb      	ldrh	r3, [r7, #14]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3303      	adds	r3, #3
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	021b      	lsls	r3, r3, #8
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	3202      	adds	r2, #2
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	021b      	lsls	r3, r3, #8
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	3201      	adds	r2, #1
 800bb3a:	7812      	ldrb	r2, [r2, #0]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	7812      	ldrb	r2, [r2, #0]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
	return rv;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	887a      	ldrh	r2, [r7, #2]
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	887b      	ldrh	r3, [r7, #2]
 800bb74:	0a1b      	lsrs	r3, r3, #8
 800bb76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	607a      	str	r2, [r7, #4]
 800bb7e:	887a      	ldrh	r2, [r7, #2]
 800bb80:	b2d2      	uxtb	r2, r2
 800bb82:	701a      	strb	r2, [r3, #0]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	0a1b      	lsrs	r3, r3, #8
 800bbaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	607a      	str	r2, [r7, #4]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	0a1b      	lsrs	r3, r3, #8
 800bbce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	701a      	strb	r2, [r3, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00d      	beq.n	800bc1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	1c53      	adds	r3, r2, #1
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	1c59      	adds	r1, r3, #1
 800bc0c:	6179      	str	r1, [r7, #20]
 800bc0e:	7812      	ldrb	r2, [r2, #0]
 800bc10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3b01      	subs	r3, #1
 800bc16:	607b      	str	r3, [r7, #4]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1f1      	bne.n	800bc02 <mem_cpy+0x1a>
	}
}
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bc2a:	b480      	push	{r7}
 800bc2c:	b087      	sub	sp, #28
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	617a      	str	r2, [r7, #20]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	b2d2      	uxtb	r2, r2
 800bc44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	607b      	str	r3, [r7, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1f3      	bne.n	800bc3a <mem_set+0x10>
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bc60:	b480      	push	{r7}
 800bc62:	b089      	sub	sp, #36	@ 0x24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	61fb      	str	r3, [r7, #28]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	61fa      	str	r2, [r7, #28]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	4619      	mov	r1, r3
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	61ba      	str	r2, [r7, #24]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	1acb      	subs	r3, r1, r3
 800bc8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	607b      	str	r3, [r7, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <mem_cmp+0x40>
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d0eb      	beq.n	800bc78 <mem_cmp+0x18>

	return r;
 800bca0:	697b      	ldr	r3, [r7, #20]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3724      	adds	r7, #36	@ 0x24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bcb8:	e002      	b.n	800bcc0 <chk_chr+0x12>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d005      	beq.n	800bcd4 <chk_chr+0x26>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d1f2      	bne.n	800bcba <chk_chr+0xc>
	return *str;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60bb      	str	r3, [r7, #8]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	e029      	b.n	800bd4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bcf8:	4a27      	ldr	r2, [pc, #156]	@ (800bd98 <chk_lock+0xb4>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	4413      	add	r3, r2
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d01d      	beq.n	800bd42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd06:	4a24      	ldr	r2, [pc, #144]	@ (800bd98 <chk_lock+0xb4>)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	4413      	add	r3, r2
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d116      	bne.n	800bd46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bd18:	4a1f      	ldr	r2, [pc, #124]	@ (800bd98 <chk_lock+0xb4>)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	011b      	lsls	r3, r3, #4
 800bd1e:	4413      	add	r3, r2
 800bd20:	3304      	adds	r3, #4
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d10c      	bne.n	800bd46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd2c:	4a1a      	ldr	r2, [pc, #104]	@ (800bd98 <chk_lock+0xb4>)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	4413      	add	r3, r2
 800bd34:	3308      	adds	r3, #8
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d102      	bne.n	800bd46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd40:	e007      	b.n	800bd52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d9d2      	bls.n	800bcf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d109      	bne.n	800bd6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <chk_lock+0x80>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d101      	bne.n	800bd68 <chk_lock+0x84>
 800bd64:	2300      	movs	r3, #0
 800bd66:	e010      	b.n	800bd8a <chk_lock+0xa6>
 800bd68:	2312      	movs	r3, #18
 800bd6a:	e00e      	b.n	800bd8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d108      	bne.n	800bd84 <chk_lock+0xa0>
 800bd72:	4a09      	ldr	r2, [pc, #36]	@ (800bd98 <chk_lock+0xb4>)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	011b      	lsls	r3, r3, #4
 800bd78:	4413      	add	r3, r2
 800bd7a:	330c      	adds	r3, #12
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd82:	d101      	bne.n	800bd88 <chk_lock+0xa4>
 800bd84:	2310      	movs	r3, #16
 800bd86:	e000      	b.n	800bd8a <chk_lock+0xa6>
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	24000538 	.word	0x24000538

0800bd9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	e002      	b.n	800bdae <enq_lock+0x12>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	607b      	str	r3, [r7, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d806      	bhi.n	800bdc2 <enq_lock+0x26>
 800bdb4:	4a09      	ldr	r2, [pc, #36]	@ (800bddc <enq_lock+0x40>)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	4413      	add	r3, r2
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f2      	bne.n	800bda8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	bf14      	ite	ne
 800bdc8:	2301      	movne	r3, #1
 800bdca:	2300      	moveq	r3, #0
 800bdcc:	b2db      	uxtb	r3, r3
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	24000538 	.word	0x24000538

0800bde0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	e01f      	b.n	800be30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bdf0:	4a41      	ldr	r2, [pc, #260]	@ (800bef8 <inc_lock+0x118>)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	011b      	lsls	r3, r3, #4
 800bdf6:	4413      	add	r3, r2
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d113      	bne.n	800be2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800be02:	4a3d      	ldr	r2, [pc, #244]	@ (800bef8 <inc_lock+0x118>)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	4413      	add	r3, r2
 800be0a:	3304      	adds	r3, #4
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800be12:	429a      	cmp	r2, r3
 800be14:	d109      	bne.n	800be2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800be16:	4a38      	ldr	r2, [pc, #224]	@ (800bef8 <inc_lock+0x118>)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	4413      	add	r3, r2
 800be1e:	3308      	adds	r3, #8
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800be26:	429a      	cmp	r2, r3
 800be28:	d006      	beq.n	800be38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3301      	adds	r3, #1
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d9dc      	bls.n	800bdf0 <inc_lock+0x10>
 800be36:	e000      	b.n	800be3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800be38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d132      	bne.n	800bea6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	e002      	b.n	800be4c <inc_lock+0x6c>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3301      	adds	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d806      	bhi.n	800be60 <inc_lock+0x80>
 800be52:	4a29      	ldr	r2, [pc, #164]	@ (800bef8 <inc_lock+0x118>)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	4413      	add	r3, r2
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1f2      	bne.n	800be46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d101      	bne.n	800be6a <inc_lock+0x8a>
 800be66:	2300      	movs	r3, #0
 800be68:	e040      	b.n	800beec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4922      	ldr	r1, [pc, #136]	@ (800bef8 <inc_lock+0x118>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	440b      	add	r3, r1
 800be76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	491e      	ldr	r1, [pc, #120]	@ (800bef8 <inc_lock+0x118>)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	011b      	lsls	r3, r3, #4
 800be82:	440b      	add	r3, r1
 800be84:	3304      	adds	r3, #4
 800be86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	695a      	ldr	r2, [r3, #20]
 800be8c:	491a      	ldr	r1, [pc, #104]	@ (800bef8 <inc_lock+0x118>)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	011b      	lsls	r3, r3, #4
 800be92:	440b      	add	r3, r1
 800be94:	3308      	adds	r3, #8
 800be96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800be98:	4a17      	ldr	r2, [pc, #92]	@ (800bef8 <inc_lock+0x118>)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	4413      	add	r3, r2
 800bea0:	330c      	adds	r3, #12
 800bea2:	2200      	movs	r2, #0
 800bea4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d009      	beq.n	800bec0 <inc_lock+0xe0>
 800beac:	4a12      	ldr	r2, [pc, #72]	@ (800bef8 <inc_lock+0x118>)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	011b      	lsls	r3, r3, #4
 800beb2:	4413      	add	r3, r2
 800beb4:	330c      	adds	r3, #12
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <inc_lock+0xe0>
 800bebc:	2300      	movs	r3, #0
 800bebe:	e015      	b.n	800beec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d108      	bne.n	800bed8 <inc_lock+0xf8>
 800bec6:	4a0c      	ldr	r2, [pc, #48]	@ (800bef8 <inc_lock+0x118>)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	4413      	add	r3, r2
 800bece:	330c      	adds	r3, #12
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	e001      	b.n	800bedc <inc_lock+0xfc>
 800bed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bedc:	4906      	ldr	r1, [pc, #24]	@ (800bef8 <inc_lock+0x118>)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	011b      	lsls	r3, r3, #4
 800bee2:	440b      	add	r3, r1
 800bee4:	330c      	adds	r3, #12
 800bee6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	24000538 	.word	0x24000538

0800befc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	607b      	str	r3, [r7, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d825      	bhi.n	800bf5c <dec_lock+0x60>
		n = Files[i].ctr;
 800bf10:	4a17      	ldr	r2, [pc, #92]	@ (800bf70 <dec_lock+0x74>)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	4413      	add	r3, r2
 800bf18:	330c      	adds	r3, #12
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf24:	d101      	bne.n	800bf2a <dec_lock+0x2e>
 800bf26:	2300      	movs	r3, #0
 800bf28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf2a:	89fb      	ldrh	r3, [r7, #14]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <dec_lock+0x3a>
 800bf30:	89fb      	ldrh	r3, [r7, #14]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf36:	4a0e      	ldr	r2, [pc, #56]	@ (800bf70 <dec_lock+0x74>)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	4413      	add	r3, r2
 800bf3e:	330c      	adds	r3, #12
 800bf40:	89fa      	ldrh	r2, [r7, #14]
 800bf42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf44:	89fb      	ldrh	r3, [r7, #14]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d105      	bne.n	800bf56 <dec_lock+0x5a>
 800bf4a:	4a09      	ldr	r2, [pc, #36]	@ (800bf70 <dec_lock+0x74>)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	4413      	add	r3, r2
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	737b      	strb	r3, [r7, #13]
 800bf5a:	e001      	b.n	800bf60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bf60:	7b7b      	ldrb	r3, [r7, #13]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	24000538 	.word	0x24000538

0800bf74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e010      	b.n	800bfa4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf82:	4a0d      	ldr	r2, [pc, #52]	@ (800bfb8 <clear_lock+0x44>)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	4413      	add	r3, r2
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d105      	bne.n	800bf9e <clear_lock+0x2a>
 800bf92:	4a09      	ldr	r2, [pc, #36]	@ (800bfb8 <clear_lock+0x44>)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	4413      	add	r3, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d9eb      	bls.n	800bf82 <clear_lock+0xe>
	}
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	24000538 	.word	0x24000538

0800bfbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	78db      	ldrb	r3, [r3, #3]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d034      	beq.n	800c03a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	7858      	ldrb	r0, [r3, #1]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	f7ff fd40 	bl	800ba68 <disk_write>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]
 800bff2:	e022      	b.n	800c03a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	1ad2      	subs	r2, r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	429a      	cmp	r2, r3
 800c008:	d217      	bcs.n	800c03a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	789b      	ldrb	r3, [r3, #2]
 800c00e:	613b      	str	r3, [r7, #16]
 800c010:	e010      	b.n	800c034 <sync_window+0x78>
					wsect += fs->fsize;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	69db      	ldr	r3, [r3, #28]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7858      	ldrb	r0, [r3, #1]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c026:	2301      	movs	r3, #1
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	f7ff fd1d 	bl	800ba68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	3b01      	subs	r3, #1
 800c032:	613b      	str	r3, [r7, #16]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d8eb      	bhi.n	800c012 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d01b      	beq.n	800c094 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ffad 	bl	800bfbc <sync_window>
 800c062:	4603      	mov	r3, r0
 800c064:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d113      	bne.n	800c094 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	7858      	ldrb	r0, [r3, #1]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c076:	2301      	movs	r3, #1
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	f7ff fcd5 	bl	800ba28 <disk_read>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c084:	f04f 33ff 	mov.w	r3, #4294967295
 800c088:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c094:	7bfb      	ldrb	r3, [r7, #15]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
	...

0800c0a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff ff87 	bl	800bfbc <sync_window>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d158      	bne.n	800c16a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d148      	bne.n	800c152 <sync_fs+0xb2>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d144      	bne.n	800c152 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3334      	adds	r3, #52	@ 0x34
 800c0cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fda9 	bl	800bc2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3334      	adds	r3, #52	@ 0x34
 800c0dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c0e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fd38 	bl	800bb5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3334      	adds	r3, #52	@ 0x34
 800c0ee:	4921      	ldr	r1, [pc, #132]	@ (800c174 <sync_fs+0xd4>)
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fd4d 	bl	800bb90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3334      	adds	r3, #52	@ 0x34
 800c0fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c0fe:	491e      	ldr	r1, [pc, #120]	@ (800c178 <sync_fs+0xd8>)
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fd45 	bl	800bb90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3334      	adds	r3, #52	@ 0x34
 800c10a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	4619      	mov	r1, r3
 800c114:	4610      	mov	r0, r2
 800c116:	f7ff fd3b 	bl	800bb90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	3334      	adds	r3, #52	@ 0x34
 800c11e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f7ff fd31 	bl	800bb90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	7858      	ldrb	r0, [r3, #1]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c146:	2301      	movs	r3, #1
 800c148:	f7ff fc8e 	bl	800ba68 <disk_write>
			fs->fsi_flag = 0;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	2200      	movs	r2, #0
 800c158:	2100      	movs	r1, #0
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff fca4 	bl	800baa8 <disk_ioctl>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <sync_fs+0xca>
 800c166:	2301      	movs	r3, #1
 800c168:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	41615252 	.word	0x41615252
 800c178:	61417272 	.word	0x61417272

0800c17c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	3b02      	subs	r3, #2
 800c18a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	3b02      	subs	r3, #2
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	429a      	cmp	r2, r3
 800c196:	d301      	bcc.n	800c19c <clust2sect+0x20>
 800c198:	2300      	movs	r3, #0
 800c19a:	e008      	b.n	800c1ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	895b      	ldrh	r3, [r3, #10]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	fb03 f202 	mul.w	r2, r3, r2
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ac:	4413      	add	r3, r2
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b086      	sub	sp, #24
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d904      	bls.n	800c1da <get_fat+0x20>
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d302      	bcc.n	800c1e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c1da:	2301      	movs	r3, #1
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	e08e      	b.n	800c2fe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d061      	beq.n	800c2b2 <get_fat+0xf8>
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	dc7b      	bgt.n	800c2ea <get_fat+0x130>
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d002      	beq.n	800c1fc <get_fat+0x42>
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d041      	beq.n	800c27e <get_fat+0xc4>
 800c1fa:	e076      	b.n	800c2ea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	0a5b      	lsrs	r3, r3, #9
 800c212:	4413      	add	r3, r2
 800c214:	4619      	mov	r1, r3
 800c216:	6938      	ldr	r0, [r7, #16]
 800c218:	f7ff ff14 	bl	800c044 <move_window>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d166      	bne.n	800c2f0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	60fa      	str	r2, [r7, #12]
 800c228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	4413      	add	r3, r2
 800c230:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c234:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	0a5b      	lsrs	r3, r3, #9
 800c23e:	4413      	add	r3, r2
 800c240:	4619      	mov	r1, r3
 800c242:	6938      	ldr	r0, [r7, #16]
 800c244:	f7ff fefe 	bl	800c044 <move_window>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d152      	bne.n	800c2f4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	4413      	add	r3, r2
 800c258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c25c:	021b      	lsls	r3, r3, #8
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	4313      	orrs	r3, r2
 800c262:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <get_fat+0xba>
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	091b      	lsrs	r3, r3, #4
 800c272:	e002      	b.n	800c27a <get_fat+0xc0>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c27a:	617b      	str	r3, [r7, #20]
			break;
 800c27c:	e03f      	b.n	800c2fe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	0a1b      	lsrs	r3, r3, #8
 800c286:	4413      	add	r3, r2
 800c288:	4619      	mov	r1, r3
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f7ff feda 	bl	800c044 <move_window>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d130      	bne.n	800c2f8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c2a4:	4413      	add	r3, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff fc1c 	bl	800bae4 <ld_word>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	617b      	str	r3, [r7, #20]
			break;
 800c2b0:	e025      	b.n	800c2fe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	09db      	lsrs	r3, r3, #7
 800c2ba:	4413      	add	r3, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6938      	ldr	r0, [r7, #16]
 800c2c0:	f7ff fec0 	bl	800c044 <move_window>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d118      	bne.n	800c2fc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c2d8:	4413      	add	r3, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fc1a 	bl	800bb14 <ld_dword>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c2e6:	617b      	str	r3, [r7, #20]
			break;
 800c2e8:	e009      	b.n	800c2fe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	e006      	b.n	800c2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2f0:	bf00      	nop
 800c2f2:	e004      	b.n	800c2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2f4:	bf00      	nop
 800c2f6:	e002      	b.n	800c2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2f8:	bf00      	nop
 800c2fa:	e000      	b.n	800c2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c2fc:	bf00      	nop
		}
	}

	return val;
 800c2fe:	697b      	ldr	r3, [r7, #20]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c308:	b590      	push	{r4, r7, lr}
 800c30a:	b089      	sub	sp, #36	@ 0x24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c314:	2302      	movs	r3, #2
 800c316:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	f240 80d9 	bls.w	800c4d2 <put_fat+0x1ca>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	429a      	cmp	r2, r3
 800c328:	f080 80d3 	bcs.w	800c4d2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b03      	cmp	r3, #3
 800c332:	f000 8096 	beq.w	800c462 <put_fat+0x15a>
 800c336:	2b03      	cmp	r3, #3
 800c338:	f300 80cb 	bgt.w	800c4d2 <put_fat+0x1ca>
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d002      	beq.n	800c346 <put_fat+0x3e>
 800c340:	2b02      	cmp	r3, #2
 800c342:	d06e      	beq.n	800c422 <put_fat+0x11a>
 800c344:	e0c5      	b.n	800c4d2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	61bb      	str	r3, [r7, #24]
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	4413      	add	r3, r2
 800c352:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	0a5b      	lsrs	r3, r3, #9
 800c35c:	4413      	add	r3, r2
 800c35e:	4619      	mov	r1, r3
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff fe6f 	bl	800c044 <move_window>
 800c366:	4603      	mov	r3, r0
 800c368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c36a:	7ffb      	ldrb	r3, [r7, #31]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f040 80a9 	bne.w	800c4c4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	1c59      	adds	r1, r3, #1
 800c37c:	61b9      	str	r1, [r7, #24]
 800c37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c382:	4413      	add	r3, r2
 800c384:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00d      	beq.n	800c3ac <put_fat+0xa4>
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	b25b      	sxtb	r3, r3
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	b25a      	sxtb	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	011b      	lsls	r3, r3, #4
 800c3a2:	b25b      	sxtb	r3, r3
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	e001      	b.n	800c3b0 <put_fat+0xa8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	0a5b      	lsrs	r3, r3, #9
 800c3c2:	4413      	add	r3, r2
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff fe3c 	bl	800c044 <move_window>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3d0:	7ffb      	ldrb	r3, [r7, #31]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d178      	bne.n	800c4c8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e2:	4413      	add	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <put_fat+0xf0>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	091b      	lsrs	r3, r3, #4
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	e00e      	b.n	800c416 <put_fat+0x10e>
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	f023 030f 	bic.w	r3, r3, #15
 800c402:	b25a      	sxtb	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	0a1b      	lsrs	r3, r3, #8
 800c408:	b25b      	sxtb	r3, r3
 800c40a:	f003 030f 	and.w	r3, r3, #15
 800c40e:	b25b      	sxtb	r3, r3
 800c410:	4313      	orrs	r3, r2
 800c412:	b25b      	sxtb	r3, r3
 800c414:	b2db      	uxtb	r3, r3
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2201      	movs	r2, #1
 800c41e:	70da      	strb	r2, [r3, #3]
			break;
 800c420:	e057      	b.n	800c4d2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	4413      	add	r3, r2
 800c42c:	4619      	mov	r1, r3
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fe08 	bl	800c044 <move_window>
 800c434:	4603      	mov	r3, r0
 800c436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c438:	7ffb      	ldrb	r3, [r7, #31]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d146      	bne.n	800c4cc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c44c:	4413      	add	r3, r2
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	b292      	uxth	r2, r2
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fb80 	bl	800bb5a <st_word>
			fs->wflag = 1;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2201      	movs	r2, #1
 800c45e:	70da      	strb	r2, [r3, #3]
			break;
 800c460:	e037      	b.n	800c4d2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	09db      	lsrs	r3, r3, #7
 800c46a:	4413      	add	r3, r2
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7ff fde8 	bl	800c044 <move_window>
 800c474:	4603      	mov	r3, r0
 800c476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c478:	7ffb      	ldrb	r3, [r7, #31]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d128      	bne.n	800c4d0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c492:	4413      	add	r3, r2
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fb3d 	bl	800bb14 <ld_dword>
 800c49a:	4603      	mov	r3, r0
 800c49c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c4a0:	4323      	orrs	r3, r4
 800c4a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c4b2:	4413      	add	r3, r2
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff fb6a 	bl	800bb90 <st_dword>
			fs->wflag = 1;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	70da      	strb	r2, [r3, #3]
			break;
 800c4c2:	e006      	b.n	800c4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4c4:	bf00      	nop
 800c4c6:	e004      	b.n	800c4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4c8:	bf00      	nop
 800c4ca:	e002      	b.n	800c4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4cc:	bf00      	nop
 800c4ce:	e000      	b.n	800c4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c4d0:	bf00      	nop
		}
	}
	return res;
 800c4d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3724      	adds	r7, #36	@ 0x24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd90      	pop	{r4, r7, pc}

0800c4dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d904      	bls.n	800c502 <remove_chain+0x26>
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d301      	bcc.n	800c506 <remove_chain+0x2a>
 800c502:	2302      	movs	r3, #2
 800c504:	e04b      	b.n	800c59e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00c      	beq.n	800c526 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c50c:	f04f 32ff 	mov.w	r2, #4294967295
 800c510:	6879      	ldr	r1, [r7, #4]
 800c512:	69b8      	ldr	r0, [r7, #24]
 800c514:	f7ff fef8 	bl	800c308 <put_fat>
 800c518:	4603      	mov	r3, r0
 800c51a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c51c:	7ffb      	ldrb	r3, [r7, #31]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <remove_chain+0x4a>
 800c522:	7ffb      	ldrb	r3, [r7, #31]
 800c524:	e03b      	b.n	800c59e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7ff fe46 	bl	800c1ba <get_fat>
 800c52e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d031      	beq.n	800c59a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d101      	bne.n	800c540 <remove_chain+0x64>
 800c53c:	2302      	movs	r3, #2
 800c53e:	e02e      	b.n	800c59e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c546:	d101      	bne.n	800c54c <remove_chain+0x70>
 800c548:	2301      	movs	r3, #1
 800c54a:	e028      	b.n	800c59e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c54c:	2200      	movs	r2, #0
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f7ff fed9 	bl	800c308 <put_fat>
 800c556:	4603      	mov	r3, r0
 800c558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c55a:	7ffb      	ldrb	r3, [r7, #31]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <remove_chain+0x88>
 800c560:	7ffb      	ldrb	r3, [r7, #31]
 800c562:	e01c      	b.n	800c59e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	695a      	ldr	r2, [r3, #20]
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	3b02      	subs	r3, #2
 800c56e:	429a      	cmp	r2, r3
 800c570:	d20b      	bcs.n	800c58a <remove_chain+0xae>
			fs->free_clst++;
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	791b      	ldrb	r3, [r3, #4]
 800c580:	f043 0301 	orr.w	r3, r3, #1
 800c584:	b2da      	uxtb	r2, r3
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	d3c6      	bcc.n	800c526 <remove_chain+0x4a>
 800c598:	e000      	b.n	800c59c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c59a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3720      	adds	r7, #32
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b088      	sub	sp, #32
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10d      	bne.n	800c5d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <create_chain+0x2c>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d31b      	bcc.n	800c60a <create_chain+0x64>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	61bb      	str	r3, [r7, #24]
 800c5d6:	e018      	b.n	800c60a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fded 	bl	800c1ba <get_fat>
 800c5e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d801      	bhi.n	800c5ec <create_chain+0x46>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e070      	b.n	800c6ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f2:	d101      	bne.n	800c5f8 <create_chain+0x52>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	e06a      	b.n	800c6ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d201      	bcs.n	800c606 <create_chain+0x60>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	e063      	b.n	800c6ce <create_chain+0x128>
		scl = clst;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	3301      	adds	r3, #1
 800c612:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	69fa      	ldr	r2, [r7, #28]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d307      	bcc.n	800c62e <create_chain+0x88>
				ncl = 2;
 800c61e:	2302      	movs	r3, #2
 800c620:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	429a      	cmp	r2, r3
 800c628:	d901      	bls.n	800c62e <create_chain+0x88>
 800c62a:	2300      	movs	r3, #0
 800c62c:	e04f      	b.n	800c6ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c62e:	69f9      	ldr	r1, [r7, #28]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff fdc2 	bl	800c1ba <get_fat>
 800c636:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00e      	beq.n	800c65c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d003      	beq.n	800c64c <create_chain+0xa6>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64a:	d101      	bne.n	800c650 <create_chain+0xaa>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	e03e      	b.n	800c6ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	429a      	cmp	r2, r3
 800c656:	d1da      	bne.n	800c60e <create_chain+0x68>
 800c658:	2300      	movs	r3, #0
 800c65a:	e038      	b.n	800c6ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c65c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295
 800c662:	69f9      	ldr	r1, [r7, #28]
 800c664:	6938      	ldr	r0, [r7, #16]
 800c666:	f7ff fe4f 	bl	800c308 <put_fat>
 800c66a:	4603      	mov	r3, r0
 800c66c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c66e:	7dfb      	ldrb	r3, [r7, #23]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <create_chain+0xe2>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d006      	beq.n	800c688 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c67a:	69fa      	ldr	r2, [r7, #28]
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f7ff fe42 	bl	800c308 <put_fat>
 800c684:	4603      	mov	r3, r0
 800c686:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d116      	bne.n	800c6bc <create_chain+0x116>
		fs->last_clst = ncl;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	69fa      	ldr	r2, [r7, #28]
 800c692:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	695a      	ldr	r2, [r3, #20]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	3b02      	subs	r3, #2
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d804      	bhi.n	800c6ac <create_chain+0x106>
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	1e5a      	subs	r2, r3, #1
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	791b      	ldrb	r3, [r3, #4]
 800c6b0:	f043 0301 	orr.w	r3, r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	711a      	strb	r2, [r3, #4]
 800c6ba:	e007      	b.n	800c6cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d102      	bne.n	800c6c8 <create_chain+0x122>
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c6:	e000      	b.n	800c6ca <create_chain+0x124>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c6cc:	69fb      	ldr	r3, [r7, #28]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b087      	sub	sp, #28
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	0a5b      	lsrs	r3, r3, #9
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	8952      	ldrh	r2, [r2, #10]
 800c6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	1d1a      	adds	r2, r3, #4
 800c700:	613a      	str	r2, [r7, #16]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <clmt_clust+0x3a>
 800c70c:	2300      	movs	r3, #0
 800c70e:	e010      	b.n	800c732 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	429a      	cmp	r2, r3
 800c716:	d307      	bcc.n	800c728 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	3304      	adds	r3, #4
 800c724:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c726:	e7e9      	b.n	800c6fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c728:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
}
 800c732:	4618      	mov	r0, r3
 800c734:	371c      	adds	r7, #28
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b086      	sub	sp, #24
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c754:	d204      	bcs.n	800c760 <dir_sdi+0x22>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f003 031f 	and.w	r3, r3, #31
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c760:	2302      	movs	r3, #2
 800c762:	e063      	b.n	800c82c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <dir_sdi+0x46>
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d902      	bls.n	800c784 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c782:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10c      	bne.n	800c7a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	095b      	lsrs	r3, r3, #5
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	8912      	ldrh	r2, [r2, #8]
 800c792:	4293      	cmp	r3, r2
 800c794:	d301      	bcc.n	800c79a <dir_sdi+0x5c>
 800c796:	2302      	movs	r3, #2
 800c798:	e048      	b.n	800c82c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	61da      	str	r2, [r3, #28]
 800c7a2:	e029      	b.n	800c7f8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	895b      	ldrh	r3, [r3, #10]
 800c7a8:	025b      	lsls	r3, r3, #9
 800c7aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7ac:	e019      	b.n	800c7e2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff fd01 	bl	800c1ba <get_fat>
 800c7b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c0:	d101      	bne.n	800c7c6 <dir_sdi+0x88>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e032      	b.n	800c82c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d904      	bls.n	800c7d6 <dir_sdi+0x98>
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d301      	bcc.n	800c7da <dir_sdi+0x9c>
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e028      	b.n	800c82c <dir_sdi+0xee>
			ofs -= csz;
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d2e1      	bcs.n	800c7ae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	6938      	ldr	r0, [r7, #16]
 800c7ee:	f7ff fcc5 	bl	800c17c <clust2sect>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <dir_sdi+0xcc>
 800c806:	2302      	movs	r3, #2
 800c808:	e010      	b.n	800c82c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	69da      	ldr	r2, [r3, #28]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	0a5b      	lsrs	r3, r3, #9
 800c812:	441a      	add	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c824:	441a      	add	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	3320      	adds	r3, #32
 800c84a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d003      	beq.n	800c85c <dir_next+0x28>
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c85a:	d301      	bcc.n	800c860 <dir_next+0x2c>
 800c85c:	2304      	movs	r3, #4
 800c85e:	e0aa      	b.n	800c9b6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c866:	2b00      	cmp	r3, #0
 800c868:	f040 8098 	bne.w	800c99c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10b      	bne.n	800c896 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	095b      	lsrs	r3, r3, #5
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	8912      	ldrh	r2, [r2, #8]
 800c886:	4293      	cmp	r3, r2
 800c888:	f0c0 8088 	bcc.w	800c99c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	61da      	str	r2, [r3, #28]
 800c892:	2304      	movs	r3, #4
 800c894:	e08f      	b.n	800c9b6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	0a5b      	lsrs	r3, r3, #9
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	8952      	ldrh	r2, [r2, #10]
 800c89e:	3a01      	subs	r2, #1
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d17a      	bne.n	800c99c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7ff fc83 	bl	800c1ba <get_fat>
 800c8b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d801      	bhi.n	800c8c0 <dir_next+0x8c>
 800c8bc:	2302      	movs	r3, #2
 800c8be:	e07a      	b.n	800c9b6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d101      	bne.n	800c8cc <dir_next+0x98>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e074      	b.n	800c9b6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d358      	bcc.n	800c988 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d104      	bne.n	800c8e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	61da      	str	r2, [r3, #28]
 800c8e2:	2304      	movs	r3, #4
 800c8e4:	e067      	b.n	800c9b6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7ff fe59 	bl	800c5a6 <create_chain>
 800c8f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <dir_next+0xcc>
 800c8fc:	2307      	movs	r3, #7
 800c8fe:	e05a      	b.n	800c9b6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d101      	bne.n	800c90a <dir_next+0xd6>
 800c906:	2302      	movs	r3, #2
 800c908:	e055      	b.n	800c9b6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d101      	bne.n	800c916 <dir_next+0xe2>
 800c912:	2301      	movs	r3, #1
 800c914:	e04f      	b.n	800c9b6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff fb50 	bl	800bfbc <sync_window>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <dir_next+0xf2>
 800c922:	2301      	movs	r3, #1
 800c924:	e047      	b.n	800c9b6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3334      	adds	r3, #52	@ 0x34
 800c92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c92e:	2100      	movs	r1, #0
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff f97a 	bl	800bc2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c936:	2300      	movs	r3, #0
 800c938:	613b      	str	r3, [r7, #16]
 800c93a:	6979      	ldr	r1, [r7, #20]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f7ff fc1d 	bl	800c17c <clust2sect>
 800c942:	4602      	mov	r2, r0
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	631a      	str	r2, [r3, #48]	@ 0x30
 800c948:	e012      	b.n	800c970 <dir_next+0x13c>
						fs->wflag = 1;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2201      	movs	r2, #1
 800c94e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fb33 	bl	800bfbc <sync_window>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <dir_next+0x12c>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e02a      	b.n	800c9b6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	3301      	adds	r3, #1
 800c964:	613b      	str	r3, [r7, #16]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	631a      	str	r2, [r3, #48]	@ 0x30
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	895b      	ldrh	r3, [r3, #10]
 800c974:	461a      	mov	r2, r3
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	4293      	cmp	r3, r2
 800c97a:	d3e6      	bcc.n	800c94a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	1ad2      	subs	r2, r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c98e:	6979      	ldr	r1, [r7, #20]
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fbf3 	bl	800c17c <clust2sect>
 800c996:	4602      	mov	r2, r0
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ae:	441a      	add	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b086      	sub	sp, #24
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff feb4 	bl	800c73e <dir_sdi>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d12b      	bne.n	800ca38 <dir_alloc+0x7a>
		n = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7ff fb2a 	bl	800c044 <move_window>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d11d      	bne.n	800ca36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2be5      	cmp	r3, #229	@ 0xe5
 800ca02:	d004      	beq.n	800ca0e <dir_alloc+0x50>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d107      	bne.n	800ca1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	3301      	adds	r3, #1
 800ca12:	613b      	str	r3, [r7, #16]
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d102      	bne.n	800ca22 <dir_alloc+0x64>
 800ca1c:	e00c      	b.n	800ca38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ca1e:	2300      	movs	r3, #0
 800ca20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ca22:	2101      	movs	r1, #1
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff ff05 	bl	800c834 <dir_next>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d0d7      	beq.n	800c9e4 <dir_alloc+0x26>
 800ca34:	e000      	b.n	800ca38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ca36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d101      	bne.n	800ca42 <dir_alloc+0x84>
 800ca3e:	2307      	movs	r3, #7
 800ca40:	75fb      	strb	r3, [r7, #23]
	return res;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	331a      	adds	r3, #26
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff f842 	bl	800bae4 <ld_word>
 800ca60:	4603      	mov	r3, r0
 800ca62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d109      	bne.n	800ca80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	3314      	adds	r3, #20
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7ff f837 	bl	800bae4 <ld_word>
 800ca76:	4603      	mov	r3, r0
 800ca78:	041b      	lsls	r3, r3, #16
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca80:	68fb      	ldr	r3, [r7, #12]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	331a      	adds	r3, #26
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	b292      	uxth	r2, r2
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff f85a 	bl	800bb5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d109      	bne.n	800cac2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	f103 0214 	add.w	r2, r3, #20
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	0c1b      	lsrs	r3, r3, #16
 800cab8:	b29b      	uxth	r3, r3
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7ff f84c 	bl	800bb5a <st_word>
	}
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cacc:	b590      	push	{r4, r7, lr}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	331a      	adds	r3, #26
 800cada:	4618      	mov	r0, r3
 800cadc:	f7ff f802 	bl	800bae4 <ld_word>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <cmp_lfn+0x1e>
 800cae6:	2300      	movs	r3, #0
 800cae8:	e059      	b.n	800cb9e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800caf2:	1e5a      	subs	r2, r3, #1
 800caf4:	4613      	mov	r3, r2
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb00:	2301      	movs	r3, #1
 800cb02:	81fb      	strh	r3, [r7, #14]
 800cb04:	2300      	movs	r3, #0
 800cb06:	613b      	str	r3, [r7, #16]
 800cb08:	e033      	b.n	800cb72 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cb0a:	4a27      	ldr	r2, [pc, #156]	@ (800cba8 <cmp_lfn+0xdc>)
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	4413      	add	r3, r2
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	461a      	mov	r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	4413      	add	r3, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe ffe3 	bl	800bae4 <ld_word>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cb22:	89fb      	ldrh	r3, [r7, #14]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01a      	beq.n	800cb5e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2bfe      	cmp	r3, #254	@ 0xfe
 800cb2c:	d812      	bhi.n	800cb54 <cmp_lfn+0x88>
 800cb2e:	89bb      	ldrh	r3, [r7, #12]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 fcd5 	bl	800e4e0 <ff_wtoupper>
 800cb36:	4603      	mov	r3, r0
 800cb38:	461c      	mov	r4, r3
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	617a      	str	r2, [r7, #20]
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	4413      	add	r3, r2
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f001 fcc9 	bl	800e4e0 <ff_wtoupper>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	429c      	cmp	r4, r3
 800cb52:	d001      	beq.n	800cb58 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cb54:	2300      	movs	r3, #0
 800cb56:	e022      	b.n	800cb9e <cmp_lfn+0xd2>
			}
			wc = uc;
 800cb58:	89bb      	ldrh	r3, [r7, #12]
 800cb5a:	81fb      	strh	r3, [r7, #14]
 800cb5c:	e006      	b.n	800cb6c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cb5e:	89bb      	ldrh	r3, [r7, #12]
 800cb60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d001      	beq.n	800cb6c <cmp_lfn+0xa0>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	e018      	b.n	800cb9e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	613b      	str	r3, [r7, #16]
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	2b0c      	cmp	r3, #12
 800cb76:	d9c8      	bls.n	800cb0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00b      	beq.n	800cb9c <cmp_lfn+0xd0>
 800cb84:	89fb      	ldrh	r3, [r7, #14]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d008      	beq.n	800cb9c <cmp_lfn+0xd0>
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	4413      	add	r3, r2
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <cmp_lfn+0xd0>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e000      	b.n	800cb9e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cb9c:	2301      	movs	r3, #1
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	371c      	adds	r7, #28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd90      	pop	{r4, r7, pc}
 800cba6:	bf00      	nop
 800cba8:	0800f12c 	.word	0x0800f12c

0800cbac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	461a      	mov	r2, r3
 800cbba:	460b      	mov	r3, r1
 800cbbc:	71fb      	strb	r3, [r7, #7]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	330d      	adds	r3, #13
 800cbc6:	79ba      	ldrb	r2, [r7, #6]
 800cbc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	330b      	adds	r3, #11
 800cbce:	220f      	movs	r2, #15
 800cbd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	330c      	adds	r3, #12
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	331a      	adds	r3, #26
 800cbde:	2100      	movs	r1, #0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe ffba 	bl	800bb5a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	1e5a      	subs	r2, r3, #1
 800cbea:	4613      	mov	r3, r2
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	82fb      	strh	r3, [r7, #22]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cbfe:	8afb      	ldrh	r3, [r7, #22]
 800cc00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d007      	beq.n	800cc18 <put_lfn+0x6c>
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	61fa      	str	r2, [r7, #28]
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cc18:	4a17      	ldr	r2, [pc, #92]	@ (800cc78 <put_lfn+0xcc>)
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	461a      	mov	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	4413      	add	r3, r2
 800cc26:	8afa      	ldrh	r2, [r7, #22]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe ff95 	bl	800bb5a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cc30:	8afb      	ldrh	r3, [r7, #22]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <put_lfn+0x90>
 800cc36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b0c      	cmp	r3, #12
 800cc46:	d9da      	bls.n	800cbfe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cc48:	8afb      	ldrh	r3, [r7, #22]
 800cc4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d006      	beq.n	800cc60 <put_lfn+0xb4>
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4413      	add	r3, r2
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d103      	bne.n	800cc68 <put_lfn+0xbc>
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	79fa      	ldrb	r2, [r7, #7]
 800cc6c:	701a      	strb	r2, [r3, #0]
}
 800cc6e:	bf00      	nop
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	0800f12c 	.word	0x0800f12c

0800cc7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08c      	sub	sp, #48	@ 0x30
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cc8a:	220b      	movs	r2, #11
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7fe ffaa 	bl	800bbe8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	d929      	bls.n	800ccee <gen_numname+0x72>
		sr = seq;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cc9e:	e020      	b.n	800cce2 <gen_numname+0x66>
			wc = *lfn++;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	1c9a      	adds	r2, r3, #2
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	881b      	ldrh	r3, [r3, #0]
 800cca8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ccaa:	2300      	movs	r3, #0
 800ccac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccae:	e015      	b.n	800ccdc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	005a      	lsls	r2, r3, #1
 800ccb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	4413      	add	r3, r2
 800ccbc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ccbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccc0:	085b      	lsrs	r3, r3, #1
 800ccc2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <gen_numname+0x5a>
 800ccce:	69fa      	ldr	r2, [r7, #28]
 800ccd0:	4b30      	ldr	r3, [pc, #192]	@ (800cd94 <gen_numname+0x118>)
 800ccd2:	4053      	eors	r3, r2
 800ccd4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ccd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd8:	3301      	adds	r3, #1
 800ccda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d9e6      	bls.n	800ccb0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1da      	bne.n	800cca0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ccee:	2307      	movs	r3, #7
 800ccf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	f003 030f 	and.w	r3, r3, #15
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	3330      	adds	r3, #48	@ 0x30
 800ccfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800cd02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd06:	2b39      	cmp	r3, #57	@ 0x39
 800cd08:	d904      	bls.n	800cd14 <gen_numname+0x98>
 800cd0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd0e:	3307      	adds	r3, #7
 800cd10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800cd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd16:	1e5a      	subs	r2, r3, #1
 800cd18:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cd1a:	3330      	adds	r3, #48	@ 0x30
 800cd1c:	443b      	add	r3, r7
 800cd1e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800cd22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	091b      	lsrs	r3, r3, #4
 800cd2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1df      	bne.n	800ccf2 <gen_numname+0x76>
	ns[i] = '~';
 800cd32:	f107 0214 	add.w	r2, r7, #20
 800cd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd38:	4413      	add	r3, r2
 800cd3a:	227e      	movs	r2, #126	@ 0x7e
 800cd3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cd3e:	2300      	movs	r3, #0
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd42:	e002      	b.n	800cd4a <gen_numname+0xce>
 800cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd46:	3301      	adds	r3, #1
 800cd48:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d205      	bcs.n	800cd5e <gen_numname+0xe2>
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd56:	4413      	add	r3, r2
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d1f2      	bne.n	800cd44 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd60:	2b07      	cmp	r3, #7
 800cd62:	d807      	bhi.n	800cd74 <gen_numname+0xf8>
 800cd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cd6a:	3330      	adds	r3, #48	@ 0x30
 800cd6c:	443b      	add	r3, r7
 800cd6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cd72:	e000      	b.n	800cd76 <gen_numname+0xfa>
 800cd74:	2120      	movs	r1, #32
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4413      	add	r3, r2
 800cd80:	460a      	mov	r2, r1
 800cd82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	2b07      	cmp	r3, #7
 800cd88:	d9e9      	bls.n	800cd5e <gen_numname+0xe2>
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	3730      	adds	r7, #48	@ 0x30
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	00011021 	.word	0x00011021

0800cd98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cda4:	230b      	movs	r3, #11
 800cda6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	0852      	lsrs	r2, r2, #1
 800cdae:	01db      	lsls	r3, r3, #7
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	1c59      	adds	r1, r3, #1
 800cdb8:	6079      	str	r1, [r7, #4]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	60bb      	str	r3, [r7, #8]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1ed      	bne.n	800cda8 <sum_sfn+0x10>
	return sum;
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b086      	sub	sp, #24
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cde8:	2100      	movs	r1, #0
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff fca7 	bl	800c73e <dir_sdi>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <dir_find+0x24>
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	e0a9      	b.n	800cf52 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cdfe:	23ff      	movs	r3, #255	@ 0xff
 800ce00:	753b      	strb	r3, [r7, #20]
 800ce02:	7d3b      	ldrb	r3, [r7, #20]
 800ce04:	757b      	strb	r3, [r7, #21]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	4619      	mov	r1, r3
 800ce14:	6938      	ldr	r0, [r7, #16]
 800ce16:	f7ff f915 	bl	800c044 <move_window>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 8090 	bne.w	800cf46 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce2e:	7dbb      	ldrb	r3, [r7, #22]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d102      	bne.n	800ce3a <dir_find+0x60>
 800ce34:	2304      	movs	r3, #4
 800ce36:	75fb      	strb	r3, [r7, #23]
 800ce38:	e08a      	b.n	800cf50 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	330b      	adds	r3, #11
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce46:	73fb      	strb	r3, [r7, #15]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7bfa      	ldrb	r2, [r7, #15]
 800ce4c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ce4e:	7dbb      	ldrb	r3, [r7, #22]
 800ce50:	2be5      	cmp	r3, #229	@ 0xe5
 800ce52:	d007      	beq.n	800ce64 <dir_find+0x8a>
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	f003 0308 	and.w	r3, r3, #8
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d009      	beq.n	800ce72 <dir_find+0x98>
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
 800ce60:	2b0f      	cmp	r3, #15
 800ce62:	d006      	beq.n	800ce72 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce64:	23ff      	movs	r3, #255	@ 0xff
 800ce66:	757b      	strb	r3, [r7, #21]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce70:	e05e      	b.n	800cf30 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	2b0f      	cmp	r3, #15
 800ce76:	d136      	bne.n	800cee6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ce7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d154      	bne.n	800cf30 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ce86:	7dbb      	ldrb	r3, [r7, #22]
 800ce88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00d      	beq.n	800ceac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a1b      	ldr	r3, [r3, #32]
 800ce94:	7b5b      	ldrb	r3, [r3, #13]
 800ce96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ce98:	7dbb      	ldrb	r3, [r7, #22]
 800ce9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce9e:	75bb      	strb	r3, [r7, #22]
 800cea0:	7dbb      	ldrb	r3, [r7, #22]
 800cea2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	695a      	ldr	r2, [r3, #20]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ceac:	7dba      	ldrb	r2, [r7, #22]
 800ceae:	7d7b      	ldrb	r3, [r7, #21]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d115      	bne.n	800cee0 <dir_find+0x106>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	330d      	adds	r3, #13
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	7d3a      	ldrb	r2, [r7, #20]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d10e      	bne.n	800cee0 <dir_find+0x106>
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7ff fdfd 	bl	800cacc <cmp_lfn>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d003      	beq.n	800cee0 <dir_find+0x106>
 800ced8:	7d7b      	ldrb	r3, [r7, #21]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	e000      	b.n	800cee2 <dir_find+0x108>
 800cee0:	23ff      	movs	r3, #255	@ 0xff
 800cee2:	757b      	strb	r3, [r7, #21]
 800cee4:	e024      	b.n	800cf30 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cee6:	7d7b      	ldrb	r3, [r7, #21]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d109      	bne.n	800cf00 <dir_find+0x126>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff ff51 	bl	800cd98 <sum_sfn>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	7d3b      	ldrb	r3, [r7, #20]
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d024      	beq.n	800cf4a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <dir_find+0x14a>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a18      	ldr	r0, [r3, #32]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3324      	adds	r3, #36	@ 0x24
 800cf16:	220b      	movs	r2, #11
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7fe fea1 	bl	800bc60 <mem_cmp>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d014      	beq.n	800cf4e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf24:	23ff      	movs	r3, #255	@ 0xff
 800cf26:	757b      	strb	r3, [r7, #21]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf30:	2100      	movs	r1, #0
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff fc7e 	bl	800c834 <dir_next>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f43f af65 	beq.w	800ce0e <dir_find+0x34>
 800cf44:	e004      	b.n	800cf50 <dir_find+0x176>
		if (res != FR_OK) break;
 800cf46:	bf00      	nop
 800cf48:	e002      	b.n	800cf50 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf4a:	bf00      	nop
 800cf4c:	e000      	b.n	800cf50 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf4e:	bf00      	nop

	return res;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
	...

0800cf5c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08c      	sub	sp, #48	@ 0x30
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cf70:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <dir_register+0x20>
 800cf78:	2306      	movs	r3, #6
 800cf7a:	e0e0      	b.n	800d13e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf80:	e002      	b.n	800cf88 <dir_register+0x2c>
 800cf82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf84:	3301      	adds	r3, #1
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1f4      	bne.n	800cf82 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800cf9e:	f107 030c 	add.w	r3, r7, #12
 800cfa2:	220c      	movs	r2, #12
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fe1f 	bl	800bbe8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	f003 0301 	and.w	r3, r3, #1
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d032      	beq.n	800d01a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2240      	movs	r2, #64	@ 0x40
 800cfb8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfc0:	e016      	b.n	800cff0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	68da      	ldr	r2, [r3, #12]
 800cfcc:	f107 010c 	add.w	r1, r7, #12
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	f7ff fe53 	bl	800cc7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7ff feff 	bl	800cdda <dir_find>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800cfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfec:	3301      	adds	r3, #1
 800cfee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff2:	2b63      	cmp	r3, #99	@ 0x63
 800cff4:	d9e5      	bls.n	800cfc2 <dir_register+0x66>
 800cff6:	e000      	b.n	800cffa <dir_register+0x9e>
			if (res != FR_OK) break;
 800cff8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffc:	2b64      	cmp	r3, #100	@ 0x64
 800cffe:	d101      	bne.n	800d004 <dir_register+0xa8>
 800d000:	2307      	movs	r3, #7
 800d002:	e09c      	b.n	800d13e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d004:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d002      	beq.n	800d012 <dir_register+0xb6>
 800d00c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d010:	e095      	b.n	800d13e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d012:	7dfa      	ldrb	r2, [r7, #23]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	f003 0302 	and.w	r3, r3, #2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d007      	beq.n	800d034 <dir_register+0xd8>
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	330c      	adds	r3, #12
 800d028:	4a47      	ldr	r2, [pc, #284]	@ (800d148 <dir_register+0x1ec>)
 800d02a:	fba2 2303 	umull	r2, r3, r2, r3
 800d02e:	089b      	lsrs	r3, r3, #2
 800d030:	3301      	adds	r3, #1
 800d032:	e000      	b.n	800d036 <dir_register+0xda>
 800d034:	2301      	movs	r3, #1
 800d036:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d038:	6a39      	ldr	r1, [r7, #32]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fcbf 	bl	800c9be <dir_alloc>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d148      	bne.n	800d0e0 <dir_register+0x184>
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	3b01      	subs	r3, #1
 800d052:	623b      	str	r3, [r7, #32]
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d042      	beq.n	800d0e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	695a      	ldr	r2, [r3, #20]
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	015b      	lsls	r3, r3, #5
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fb69 	bl	800c73e <dir_sdi>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d076:	2b00      	cmp	r3, #0
 800d078:	d132      	bne.n	800d0e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3324      	adds	r3, #36	@ 0x24
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fe8a 	bl	800cd98 <sum_sfn>
 800d084:	4603      	mov	r3, r0
 800d086:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	4619      	mov	r1, r3
 800d08e:	69f8      	ldr	r0, [r7, #28]
 800d090:	f7fe ffd8 	bl	800c044 <move_window>
 800d094:	4603      	mov	r3, r0
 800d096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d09a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d11d      	bne.n	800d0de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	68d8      	ldr	r0, [r3, #12]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a19      	ldr	r1, [r3, #32]
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	7efb      	ldrb	r3, [r7, #27]
 800d0b0:	f7ff fd7c 	bl	800cbac <put_lfn>
				fs->wflag = 1;
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff fbb9 	bl	800c834 <dir_next>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d107      	bne.n	800d0e0 <dir_register+0x184>
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	623b      	str	r3, [r7, #32]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1d5      	bne.n	800d088 <dir_register+0x12c>
 800d0dc:	e000      	b.n	800d0e0 <dir_register+0x184>
				if (res != FR_OK) break;
 800d0de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d0e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d128      	bne.n	800d13a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	69f8      	ldr	r0, [r7, #28]
 800d0f0:	f7fe ffa8 	bl	800c044 <move_window>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d11b      	bne.n	800d13a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	2220      	movs	r2, #32
 800d108:	2100      	movs	r1, #0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fd8d 	bl	800bc2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a18      	ldr	r0, [r3, #32]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3324      	adds	r3, #36	@ 0x24
 800d118:	220b      	movs	r2, #11
 800d11a:	4619      	mov	r1, r3
 800d11c:	f7fe fd64 	bl	800bbe8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	330c      	adds	r3, #12
 800d12c:	f002 0218 	and.w	r2, r2, #24
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	2201      	movs	r2, #1
 800d138:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d13a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3730      	adds	r7, #48	@ 0x30
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	4ec4ec4f 	.word	0x4ec4ec4f

0800d14c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08a      	sub	sp, #40	@ 0x28
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	2300      	movs	r3, #0
 800d166:	617b      	str	r3, [r7, #20]
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	61ba      	str	r2, [r7, #24]
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	4413      	add	r3, r2
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d17a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d17c:	2b1f      	cmp	r3, #31
 800d17e:	d940      	bls.n	800d202 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d180:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d182:	2b2f      	cmp	r3, #47	@ 0x2f
 800d184:	d006      	beq.n	800d194 <create_name+0x48>
 800d186:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d188:	2b5c      	cmp	r3, #92	@ 0x5c
 800d18a:	d110      	bne.n	800d1ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d18c:	e002      	b.n	800d194 <create_name+0x48>
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	3301      	adds	r3, #1
 800d192:	61bb      	str	r3, [r7, #24]
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	4413      	add	r3, r2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d19e:	d0f6      	beq.n	800d18e <create_name+0x42>
 800d1a0:	693a      	ldr	r2, [r7, #16]
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1aa:	d0f0      	beq.n	800d18e <create_name+0x42>
			break;
 800d1ac:	e02a      	b.n	800d204 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2bfe      	cmp	r3, #254	@ 0xfe
 800d1b2:	d901      	bls.n	800d1b8 <create_name+0x6c>
 800d1b4:	2306      	movs	r3, #6
 800d1b6:	e17d      	b.n	800d4b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d1b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d1be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f001 f950 	bl	800e468 <ff_convert>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <create_name+0x8a>
 800d1d2:	2306      	movs	r3, #6
 800d1d4:	e16e      	b.n	800d4b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d1d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1d8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1da:	d809      	bhi.n	800d1f0 <create_name+0xa4>
 800d1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1de:	4619      	mov	r1, r3
 800d1e0:	488d      	ldr	r0, [pc, #564]	@ (800d418 <create_name+0x2cc>)
 800d1e2:	f7fe fd64 	bl	800bcae <chk_chr>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <create_name+0xa4>
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	e161      	b.n	800d4b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	617a      	str	r2, [r7, #20]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d1fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d200:	e7b4      	b.n	800d16c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d202:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	441a      	add	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d210:	2b1f      	cmp	r3, #31
 800d212:	d801      	bhi.n	800d218 <create_name+0xcc>
 800d214:	2304      	movs	r3, #4
 800d216:	e000      	b.n	800d21a <create_name+0xce>
 800d218:	2300      	movs	r3, #0
 800d21a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d21e:	e011      	b.n	800d244 <create_name+0xf8>
		w = lfn[di - 1];
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d226:	4413      	add	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	4413      	add	r3, r2
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d234:	2b20      	cmp	r3, #32
 800d236:	d002      	beq.n	800d23e <create_name+0xf2>
 800d238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d23a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d23c:	d106      	bne.n	800d24c <create_name+0x100>
		di--;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	3b01      	subs	r3, #1
 800d242:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1ea      	bne.n	800d220 <create_name+0xd4>
 800d24a:	e000      	b.n	800d24e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d24c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	4413      	add	r3, r2
 800d256:	2200      	movs	r2, #0
 800d258:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <create_name+0x118>
 800d260:	2306      	movs	r3, #6
 800d262:	e127      	b.n	800d4b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3324      	adds	r3, #36	@ 0x24
 800d268:	220b      	movs	r2, #11
 800d26a:	2120      	movs	r1, #32
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe fcdc 	bl	800bc2a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d272:	2300      	movs	r3, #0
 800d274:	61bb      	str	r3, [r7, #24]
 800d276:	e002      	b.n	800d27e <create_name+0x132>
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	3301      	adds	r3, #1
 800d27c:	61bb      	str	r3, [r7, #24]
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	4413      	add	r3, r2
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	2b20      	cmp	r3, #32
 800d28a:	d0f5      	beq.n	800d278 <create_name+0x12c>
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	4413      	add	r3, r2
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	2b2e      	cmp	r3, #46	@ 0x2e
 800d298:	d0ee      	beq.n	800d278 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d009      	beq.n	800d2b4 <create_name+0x168>
 800d2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2a4:	f043 0303 	orr.w	r3, r3, #3
 800d2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d2ac:	e002      	b.n	800d2b4 <create_name+0x168>
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d009      	beq.n	800d2ce <create_name+0x182>
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d2c0:	4413      	add	r3, r2
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2cc:	d1ef      	bne.n	800d2ae <create_name+0x162>

	i = b = 0; ni = 8;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	623b      	str	r3, [r7, #32]
 800d2d8:	2308      	movs	r3, #8
 800d2da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	61ba      	str	r2, [r7, #24]
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d2ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 8090 	beq.w	800d414 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d2f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2f6:	2b20      	cmp	r3, #32
 800d2f8:	d006      	beq.n	800d308 <create_name+0x1bc>
 800d2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2fe:	d10a      	bne.n	800d316 <create_name+0x1ca>
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	429a      	cmp	r2, r3
 800d306:	d006      	beq.n	800d316 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d30c:	f043 0303 	orr.w	r3, r3, #3
 800d310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d314:	e07d      	b.n	800d412 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d316:	6a3a      	ldr	r2, [r7, #32]
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d203      	bcs.n	800d326 <create_name+0x1da>
 800d31e:	69ba      	ldr	r2, [r7, #24]
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	429a      	cmp	r2, r3
 800d324:	d123      	bne.n	800d36e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	2b0b      	cmp	r3, #11
 800d32a:	d106      	bne.n	800d33a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d330:	f043 0303 	orr.w	r3, r3, #3
 800d334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d338:	e075      	b.n	800d426 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d33a:	69ba      	ldr	r2, [r7, #24]
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d005      	beq.n	800d34e <create_name+0x202>
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d346:	f043 0303 	orr.w	r3, r3, #3
 800d34a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	429a      	cmp	r2, r3
 800d354:	d866      	bhi.n	800d424 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	61bb      	str	r3, [r7, #24]
 800d35a:	2308      	movs	r3, #8
 800d35c:	623b      	str	r3, [r7, #32]
 800d35e:	230b      	movs	r3, #11
 800d360:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d362:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d36c:	e051      	b.n	800d412 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d36e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d370:	2b7f      	cmp	r3, #127	@ 0x7f
 800d372:	d914      	bls.n	800d39e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d376:	2100      	movs	r1, #0
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 f875 	bl	800e468 <ff_convert>
 800d37e:	4603      	mov	r3, r0
 800d380:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d384:	2b00      	cmp	r3, #0
 800d386:	d004      	beq.n	800d392 <create_name+0x246>
 800d388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d38a:	3b80      	subs	r3, #128	@ 0x80
 800d38c:	4a23      	ldr	r2, [pc, #140]	@ (800d41c <create_name+0x2d0>)
 800d38e:	5cd3      	ldrb	r3, [r2, r3]
 800d390:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d396:	f043 0302 	orr.w	r3, r3, #2
 800d39a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <create_name+0x268>
 800d3a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	481d      	ldr	r0, [pc, #116]	@ (800d420 <create_name+0x2d4>)
 800d3aa:	f7fe fc80 	bl	800bcae <chk_chr>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d008      	beq.n	800d3c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d3b4:	235f      	movs	r3, #95	@ 0x5f
 800d3b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3bc:	f043 0303 	orr.w	r3, r3, #3
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3c4:	e01b      	b.n	800d3fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d3c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3c8:	2b40      	cmp	r3, #64	@ 0x40
 800d3ca:	d909      	bls.n	800d3e0 <create_name+0x294>
 800d3cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3ce:	2b5a      	cmp	r3, #90	@ 0x5a
 800d3d0:	d806      	bhi.n	800d3e0 <create_name+0x294>
					b |= 2;
 800d3d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3d6:	f043 0302 	orr.w	r3, r3, #2
 800d3da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d3de:	e00e      	b.n	800d3fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d3e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3e2:	2b60      	cmp	r3, #96	@ 0x60
 800d3e4:	d90b      	bls.n	800d3fe <create_name+0x2b2>
 800d3e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3e8:	2b7a      	cmp	r3, #122	@ 0x7a
 800d3ea:	d808      	bhi.n	800d3fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d3ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3f0:	f043 0301 	orr.w	r3, r3, #1
 800d3f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d3f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3fa:	3b20      	subs	r3, #32
 800d3fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	623a      	str	r2, [r7, #32]
 800d404:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d406:	b2d1      	uxtb	r1, r2
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4413      	add	r3, r2
 800d40c:	460a      	mov	r2, r1
 800d40e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d412:	e763      	b.n	800d2dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d414:	bf00      	nop
 800d416:	e006      	b.n	800d426 <create_name+0x2da>
 800d418:	0800f04c 	.word	0x0800f04c
 800d41c:	0800f0ac 	.word	0x0800f0ac
 800d420:	0800f058 	.word	0x0800f058
			if (si > di) break;			/* No extension */
 800d424:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d42c:	2be5      	cmp	r3, #229	@ 0xe5
 800d42e:	d103      	bne.n	800d438 <create_name+0x2ec>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2205      	movs	r2, #5
 800d434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2b08      	cmp	r3, #8
 800d43c:	d104      	bne.n	800d448 <create_name+0x2fc>
 800d43e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d44c:	f003 030c 	and.w	r3, r3, #12
 800d450:	2b0c      	cmp	r3, #12
 800d452:	d005      	beq.n	800d460 <create_name+0x314>
 800d454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d458:	f003 0303 	and.w	r3, r3, #3
 800d45c:	2b03      	cmp	r3, #3
 800d45e:	d105      	bne.n	800d46c <create_name+0x320>
 800d460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d464:	f043 0302 	orr.w	r3, r3, #2
 800d468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d117      	bne.n	800d4a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d47c:	f003 0303 	and.w	r3, r3, #3
 800d480:	2b01      	cmp	r3, #1
 800d482:	d105      	bne.n	800d490 <create_name+0x344>
 800d484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d488:	f043 0310 	orr.w	r3, r3, #16
 800d48c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d494:	f003 030c 	and.w	r3, r3, #12
 800d498:	2b04      	cmp	r3, #4
 800d49a:	d105      	bne.n	800d4a8 <create_name+0x35c>
 800d49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4a0:	f043 0308 	orr.w	r3, r3, #8
 800d4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d4ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d4b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3728      	adds	r7, #40	@ 0x28
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d4d0:	e002      	b.n	800d4d8 <follow_path+0x1c>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	603b      	str	r3, [r7, #0]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d4de:	d0f8      	beq.n	800d4d2 <follow_path+0x16>
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d4e6:	d0f4      	beq.n	800d4d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	2b1f      	cmp	r3, #31
 800d4f4:	d80a      	bhi.n	800d50c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2280      	movs	r2, #128	@ 0x80
 800d4fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d4fe:	2100      	movs	r1, #0
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff f91c 	bl	800c73e <dir_sdi>
 800d506:	4603      	mov	r3, r0
 800d508:	75fb      	strb	r3, [r7, #23]
 800d50a:	e043      	b.n	800d594 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d50c:	463b      	mov	r3, r7
 800d50e:	4619      	mov	r1, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fe1b 	bl	800d14c <create_name>
 800d516:	4603      	mov	r3, r0
 800d518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d51a:	7dfb      	ldrb	r3, [r7, #23]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d134      	bne.n	800d58a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fc5a 	bl	800cdda <dir_find>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d532:	7dfb      	ldrb	r3, [r7, #23]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00a      	beq.n	800d54e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d127      	bne.n	800d58e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d53e:	7afb      	ldrb	r3, [r7, #11]
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	2b00      	cmp	r3, #0
 800d546:	d122      	bne.n	800d58e <follow_path+0xd2>
 800d548:	2305      	movs	r3, #5
 800d54a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d54c:	e01f      	b.n	800d58e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d54e:	7afb      	ldrb	r3, [r7, #11]
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d11c      	bne.n	800d592 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	799b      	ldrb	r3, [r3, #6]
 800d55c:	f003 0310 	and.w	r3, r3, #16
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d564:	2305      	movs	r3, #5
 800d566:	75fb      	strb	r3, [r7, #23]
 800d568:	e014      	b.n	800d594 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d578:	4413      	add	r3, r2
 800d57a:	4619      	mov	r1, r3
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fa65 	bl	800ca4c <ld_clust>
 800d582:	4602      	mov	r2, r0
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d588:	e7c0      	b.n	800d50c <follow_path+0x50>
			if (res != FR_OK) break;
 800d58a:	bf00      	nop
 800d58c:	e002      	b.n	800d594 <follow_path+0xd8>
				break;
 800d58e:	bf00      	nop
 800d590:	e000      	b.n	800d594 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d592:	bf00      	nop
			}
		}
	}

	return res;
 800d594:	7dfb      	ldrb	r3, [r7, #23]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b087      	sub	sp, #28
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d031      	beq.n	800d618 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	e002      	b.n	800d5c2 <get_ldnumber+0x24>
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b1f      	cmp	r3, #31
 800d5c8:	d903      	bls.n	800d5d2 <get_ldnumber+0x34>
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	2b3a      	cmp	r3, #58	@ 0x3a
 800d5d0:	d1f4      	bne.n	800d5bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800d5d8:	d11c      	bne.n	800d614 <get_ldnumber+0x76>
			tp = *path;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	60fa      	str	r2, [r7, #12]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	3b30      	subs	r3, #48	@ 0x30
 800d5ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d80e      	bhi.n	800d610 <get_ldnumber+0x72>
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d10a      	bne.n	800d610 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d107      	bne.n	800d610 <get_ldnumber+0x72>
					vol = (int)i;
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	3301      	adds	r3, #1
 800d608:	617b      	str	r3, [r7, #20]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	e002      	b.n	800d61a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d614:	2300      	movs	r3, #0
 800d616:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d618:	693b      	ldr	r3, [r7, #16]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	371c      	adds	r7, #28
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
	...

0800d628 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	70da      	strb	r2, [r3, #3]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f04f 32ff 	mov.w	r2, #4294967295
 800d63e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7fe fcfe 	bl	800c044 <move_window>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <check_fs+0x2a>
 800d64e:	2304      	movs	r3, #4
 800d650:	e038      	b.n	800d6c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3334      	adds	r3, #52	@ 0x34
 800d656:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fa42 	bl	800bae4 <ld_word>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d668:	429a      	cmp	r2, r3
 800d66a:	d001      	beq.n	800d670 <check_fs+0x48>
 800d66c:	2303      	movs	r3, #3
 800d66e:	e029      	b.n	800d6c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d676:	2be9      	cmp	r3, #233	@ 0xe9
 800d678:	d009      	beq.n	800d68e <check_fs+0x66>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d680:	2beb      	cmp	r3, #235	@ 0xeb
 800d682:	d11e      	bne.n	800d6c2 <check_fs+0x9a>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d68a:	2b90      	cmp	r3, #144	@ 0x90
 800d68c:	d119      	bne.n	800d6c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3334      	adds	r3, #52	@ 0x34
 800d692:	3336      	adds	r3, #54	@ 0x36
 800d694:	4618      	mov	r0, r3
 800d696:	f7fe fa3d 	bl	800bb14 <ld_dword>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d6cc <check_fs+0xa4>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d101      	bne.n	800d6aa <check_fs+0x82>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e00c      	b.n	800d6c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	3334      	adds	r3, #52	@ 0x34
 800d6ae:	3352      	adds	r3, #82	@ 0x52
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fa2f 	bl	800bb14 <ld_dword>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	4a05      	ldr	r2, [pc, #20]	@ (800d6d0 <check_fs+0xa8>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d101      	bne.n	800d6c2 <check_fs+0x9a>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	e000      	b.n	800d6c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d6c2:	2302      	movs	r3, #2
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	00544146 	.word	0x00544146
 800d6d0:	33544146 	.word	0x33544146

0800d6d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b096      	sub	sp, #88	@ 0x58
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff ff58 	bl	800d59e <get_ldnumber>
 800d6ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	da01      	bge.n	800d6fa <find_volume+0x26>
 800d6f6:	230b      	movs	r3, #11
 800d6f8:	e230      	b.n	800db5c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d6fa:	4aa1      	ldr	r2, [pc, #644]	@ (800d980 <find_volume+0x2ac>)
 800d6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <find_volume+0x3a>
 800d70a:	230c      	movs	r3, #12
 800d70c:	e226      	b.n	800db5c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d712:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d714:	79fb      	ldrb	r3, [r7, #7]
 800d716:	f023 0301 	bic.w	r3, r3, #1
 800d71a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01a      	beq.n	800d75a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d726:	785b      	ldrb	r3, [r3, #1]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe f93b 	bl	800b9a4 <disk_status>
 800d72e:	4603      	mov	r3, r0
 800d730:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d734:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10c      	bne.n	800d75a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d740:	79fb      	ldrb	r3, [r7, #7]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d007      	beq.n	800d756 <find_volume+0x82>
 800d746:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d752:	230a      	movs	r3, #10
 800d754:	e202      	b.n	800db5c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800d756:	2300      	movs	r3, #0
 800d758:	e200      	b.n	800db5c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75c:	2200      	movs	r2, #0
 800d75e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d762:	b2da      	uxtb	r2, r3
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe f933 	bl	800b9d8 <disk_initialize>
 800d772:	4603      	mov	r3, r0
 800d774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d778:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d001      	beq.n	800d788 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d784:	2303      	movs	r3, #3
 800d786:	e1e9      	b.n	800db5c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <find_volume+0xca>
 800d78e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d792:	f003 0304 	and.w	r3, r3, #4
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d79a:	230a      	movs	r3, #10
 800d79c:	e1de      	b.n	800db5c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d7a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7a6:	f7ff ff3f 	bl	800d628 <check_fs>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d7b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d149      	bne.n	800d84c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7bc:	e01e      	b.n	800d7fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d7c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d7cc:	4413      	add	r3, r2
 800d7ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d006      	beq.n	800d7e8 <find_volume+0x114>
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	3308      	adds	r3, #8
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe f998 	bl	800bb14 <ld_dword>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	e000      	b.n	800d7ea <find_volume+0x116>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	3358      	adds	r3, #88	@ 0x58
 800d7f0:	443b      	add	r3, r7
 800d7f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d9dd      	bls.n	800d7be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d802:	2300      	movs	r3, #0
 800d804:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <find_volume+0x13e>
 800d80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d80e:	3b01      	subs	r3, #1
 800d810:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	3358      	adds	r3, #88	@ 0x58
 800d818:	443b      	add	r3, r7
 800d81a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d81e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d822:	2b00      	cmp	r3, #0
 800d824:	d005      	beq.n	800d832 <find_volume+0x15e>
 800d826:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d828:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d82a:	f7ff fefd 	bl	800d628 <check_fs>
 800d82e:	4603      	mov	r3, r0
 800d830:	e000      	b.n	800d834 <find_volume+0x160>
 800d832:	2303      	movs	r3, #3
 800d834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d905      	bls.n	800d84c <find_volume+0x178>
 800d840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d842:	3301      	adds	r3, #1
 800d844:	643b      	str	r3, [r7, #64]	@ 0x40
 800d846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d9e2      	bls.n	800d812 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d84c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d850:	2b04      	cmp	r3, #4
 800d852:	d101      	bne.n	800d858 <find_volume+0x184>
 800d854:	2301      	movs	r3, #1
 800d856:	e181      	b.n	800db5c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d858:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d901      	bls.n	800d864 <find_volume+0x190>
 800d860:	230d      	movs	r3, #13
 800d862:	e17b      	b.n	800db5c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d866:	3334      	adds	r3, #52	@ 0x34
 800d868:	330b      	adds	r3, #11
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe f93a 	bl	800bae4 <ld_word>
 800d870:	4603      	mov	r3, r0
 800d872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d876:	d001      	beq.n	800d87c <find_volume+0x1a8>
 800d878:	230d      	movs	r3, #13
 800d87a:	e16f      	b.n	800db5c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87e:	3334      	adds	r3, #52	@ 0x34
 800d880:	3316      	adds	r3, #22
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe f92e 	bl	800bae4 <ld_word>
 800d888:	4603      	mov	r3, r0
 800d88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d106      	bne.n	800d8a0 <find_volume+0x1cc>
 800d892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d894:	3334      	adds	r3, #52	@ 0x34
 800d896:	3324      	adds	r3, #36	@ 0x24
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe f93b 	bl	800bb14 <ld_dword>
 800d89e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	789b      	ldrb	r3, [r3, #2]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d005      	beq.n	800d8c4 <find_volume+0x1f0>
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	789b      	ldrb	r3, [r3, #2]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d001      	beq.n	800d8c4 <find_volume+0x1f0>
 800d8c0:	230d      	movs	r3, #13
 800d8c2:	e14b      	b.n	800db5c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c6:	789b      	ldrb	r3, [r3, #2]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8cc:	fb02 f303 	mul.w	r3, r2, r3
 800d8d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d8d8:	461a      	mov	r2, r3
 800d8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e0:	895b      	ldrh	r3, [r3, #10]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d008      	beq.n	800d8f8 <find_volume+0x224>
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e8:	895b      	ldrh	r3, [r3, #10]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ee:	895b      	ldrh	r3, [r3, #10]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <find_volume+0x228>
 800d8f8:	230d      	movs	r3, #13
 800d8fa:	e12f      	b.n	800db5c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fe:	3334      	adds	r3, #52	@ 0x34
 800d900:	3311      	adds	r3, #17
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe f8ee 	bl	800bae4 <ld_word>
 800d908:	4603      	mov	r3, r0
 800d90a:	461a      	mov	r2, r3
 800d90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d912:	891b      	ldrh	r3, [r3, #8]
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	b29b      	uxth	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <find_volume+0x24e>
 800d91e:	230d      	movs	r3, #13
 800d920:	e11c      	b.n	800db5c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d924:	3334      	adds	r3, #52	@ 0x34
 800d926:	3313      	adds	r3, #19
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fe f8db 	bl	800bae4 <ld_word>
 800d92e:	4603      	mov	r3, r0
 800d930:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <find_volume+0x272>
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	3334      	adds	r3, #52	@ 0x34
 800d93c:	3320      	adds	r3, #32
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe f8e8 	bl	800bb14 <ld_dword>
 800d944:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d948:	3334      	adds	r3, #52	@ 0x34
 800d94a:	330e      	adds	r3, #14
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe f8c9 	bl	800bae4 <ld_word>
 800d952:	4603      	mov	r3, r0
 800d954:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d956:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <find_volume+0x28c>
 800d95c:	230d      	movs	r3, #13
 800d95e:	e0fd      	b.n	800db5c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d960:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d964:	4413      	add	r3, r2
 800d966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d968:	8912      	ldrh	r2, [r2, #8]
 800d96a:	0912      	lsrs	r2, r2, #4
 800d96c:	b292      	uxth	r2, r2
 800d96e:	4413      	add	r3, r2
 800d970:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d976:	429a      	cmp	r2, r3
 800d978:	d204      	bcs.n	800d984 <find_volume+0x2b0>
 800d97a:	230d      	movs	r3, #13
 800d97c:	e0ee      	b.n	800db5c <find_volume+0x488>
 800d97e:	bf00      	nop
 800d980:	24000530 	.word	0x24000530
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d98c:	8952      	ldrh	r2, [r2, #10]
 800d98e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d992:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <find_volume+0x2ca>
 800d99a:	230d      	movs	r3, #13
 800d99c:	e0de      	b.n	800db5c <find_volume+0x488>
		fmt = FS_FAT32;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d802      	bhi.n	800d9b4 <find_volume+0x2e0>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d802      	bhi.n	800d9c4 <find_volume+0x2f0>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c6:	1c9a      	adds	r2, r3, #2
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9d0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d9d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d6:	441a      	add	r2, r3
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9da:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d9dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e0:	441a      	add	r2, r3
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d9e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d11e      	bne.n	800da2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f0:	3334      	adds	r3, #52	@ 0x34
 800d9f2:	332a      	adds	r3, #42	@ 0x2a
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe f875 	bl	800bae4 <ld_word>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <find_volume+0x330>
 800da00:	230d      	movs	r3, #13
 800da02:	e0ab      	b.n	800db5c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800da04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da06:	891b      	ldrh	r3, [r3, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <find_volume+0x33c>
 800da0c:	230d      	movs	r3, #13
 800da0e:	e0a5      	b.n	800db5c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800da10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da12:	3334      	adds	r3, #52	@ 0x34
 800da14:	332c      	adds	r3, #44	@ 0x2c
 800da16:	4618      	mov	r0, r3
 800da18:	f7fe f87c 	bl	800bb14 <ld_dword>
 800da1c:	4602      	mov	r2, r0
 800da1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da20:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	647b      	str	r3, [r7, #68]	@ 0x44
 800da2a:	e01f      	b.n	800da6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800da2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2e:	891b      	ldrh	r3, [r3, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <find_volume+0x364>
 800da34:	230d      	movs	r3, #13
 800da36:	e091      	b.n	800db5c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3e:	441a      	add	r2, r3
 800da40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da42:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d103      	bne.n	800da54 <find_volume+0x380>
 800da4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4e:	699b      	ldr	r3, [r3, #24]
 800da50:	005b      	lsls	r3, r3, #1
 800da52:	e00a      	b.n	800da6a <find_volume+0x396>
 800da54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da56:	699a      	ldr	r2, [r3, #24]
 800da58:	4613      	mov	r3, r2
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	4413      	add	r3, r2
 800da5e:	085a      	lsrs	r2, r3, #1
 800da60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800da6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800da6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da6e:	69da      	ldr	r2, [r3, #28]
 800da70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800da76:	0a5b      	lsrs	r3, r3, #9
 800da78:	429a      	cmp	r2, r3
 800da7a:	d201      	bcs.n	800da80 <find_volume+0x3ac>
 800da7c:	230d      	movs	r3, #13
 800da7e:	e06d      	b.n	800db5c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da82:	f04f 32ff 	mov.w	r2, #4294967295
 800da86:	615a      	str	r2, [r3, #20]
 800da88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8a:	695a      	ldr	r2, [r3, #20]
 800da8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800da90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da92:	2280      	movs	r2, #128	@ 0x80
 800da94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800da96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d149      	bne.n	800db32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800da9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa0:	3334      	adds	r3, #52	@ 0x34
 800daa2:	3330      	adds	r3, #48	@ 0x30
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe f81d 	bl	800bae4 <ld_word>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b01      	cmp	r3, #1
 800daae:	d140      	bne.n	800db32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dab2:	3301      	adds	r3, #1
 800dab4:	4619      	mov	r1, r3
 800dab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dab8:	f7fe fac4 	bl	800c044 <move_window>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d137      	bne.n	800db32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	2200      	movs	r2, #0
 800dac6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daca:	3334      	adds	r3, #52	@ 0x34
 800dacc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe f807 	bl	800bae4 <ld_word>
 800dad6:	4603      	mov	r3, r0
 800dad8:	461a      	mov	r2, r3
 800dada:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dade:	429a      	cmp	r2, r3
 800dae0:	d127      	bne.n	800db32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae4:	3334      	adds	r3, #52	@ 0x34
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f814 	bl	800bb14 <ld_dword>
 800daec:	4603      	mov	r3, r0
 800daee:	4a1d      	ldr	r2, [pc, #116]	@ (800db64 <find_volume+0x490>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d11e      	bne.n	800db32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800daf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf6:	3334      	adds	r3, #52	@ 0x34
 800daf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe f809 	bl	800bb14 <ld_dword>
 800db02:	4603      	mov	r3, r0
 800db04:	4a18      	ldr	r2, [pc, #96]	@ (800db68 <find_volume+0x494>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d113      	bne.n	800db32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800db0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0c:	3334      	adds	r3, #52	@ 0x34
 800db0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800db12:	4618      	mov	r0, r3
 800db14:	f7fd fffe 	bl	800bb14 <ld_dword>
 800db18:	4602      	mov	r2, r0
 800db1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	3334      	adds	r3, #52	@ 0x34
 800db22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd fff4 	bl	800bb14 <ld_dword>
 800db2c:	4602      	mov	r2, r0
 800db2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db30:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800db38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800db3a:	4b0c      	ldr	r3, [pc, #48]	@ (800db6c <find_volume+0x498>)
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	3301      	adds	r3, #1
 800db40:	b29a      	uxth	r2, r3
 800db42:	4b0a      	ldr	r3, [pc, #40]	@ (800db6c <find_volume+0x498>)
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	4b09      	ldr	r3, [pc, #36]	@ (800db6c <find_volume+0x498>)
 800db48:	881a      	ldrh	r2, [r3, #0]
 800db4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	4a07      	ldr	r2, [pc, #28]	@ (800db70 <find_volume+0x49c>)
 800db52:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800db54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db56:	f7fe fa0d 	bl	800bf74 <clear_lock>
#endif
	return FR_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3758      	adds	r7, #88	@ 0x58
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	41615252 	.word	0x41615252
 800db68:	61417272 	.word	0x61417272
 800db6c:	24000534 	.word	0x24000534
 800db70:	24000558 	.word	0x24000558

0800db74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800db7e:	2309      	movs	r3, #9
 800db80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01c      	beq.n	800dbc2 <validate+0x4e>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d018      	beq.n	800dbc2 <validate+0x4e>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d013      	beq.n	800dbc2 <validate+0x4e>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	889a      	ldrh	r2, [r3, #4]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	88db      	ldrh	r3, [r3, #6]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10c      	bne.n	800dbc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	785b      	ldrb	r3, [r3, #1]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fd fef8 	bl	800b9a4 <disk_status>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <validate+0x4e>
			res = FR_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <validate+0x5a>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	e000      	b.n	800dbd0 <validate+0x5c>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	6013      	str	r3, [r2, #0]
	return res;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	4613      	mov	r3, r2
 800dbec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dbf2:	f107 0310 	add.w	r3, r7, #16
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7ff fcd1 	bl	800d59e <get_ldnumber>
 800dbfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	da01      	bge.n	800dc08 <f_mount+0x28>
 800dc04:	230b      	movs	r3, #11
 800dc06:	e02b      	b.n	800dc60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dc08:	4a17      	ldr	r2, [pc, #92]	@ (800dc68 <f_mount+0x88>)
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dc18:	69b8      	ldr	r0, [r7, #24]
 800dc1a:	f7fe f9ab 	bl	800bf74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	2200      	movs	r2, #0
 800dc22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	490d      	ldr	r1, [pc, #52]	@ (800dc68 <f_mount+0x88>)
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <f_mount+0x66>
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d001      	beq.n	800dc4a <f_mount+0x6a>
 800dc46:	2300      	movs	r3, #0
 800dc48:	e00a      	b.n	800dc60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc4a:	f107 010c 	add.w	r1, r7, #12
 800dc4e:	f107 0308 	add.w	r3, r7, #8
 800dc52:	2200      	movs	r2, #0
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff fd3d 	bl	800d6d4 <find_volume>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3720      	adds	r7, #32
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	24000530 	.word	0x24000530

0800dc6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b09a      	sub	sp, #104	@ 0x68
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <f_open+0x18>
 800dc80:	2309      	movs	r3, #9
 800dc82:	e1a9      	b.n	800dfd8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc84:	79fb      	ldrb	r3, [r7, #7]
 800dc86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dc8c:	79fa      	ldrb	r2, [r7, #7]
 800dc8e:	f107 0114 	add.w	r1, r7, #20
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fd1c 	bl	800d6d4 <find_volume>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800dca2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f040 818d 	bne.w	800dfc6 <f_open+0x35a>
		dj.obj.fs = fs;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	f107 0318 	add.w	r3, r7, #24
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff fbff 	bl	800d4bc <follow_path>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dcc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d118      	bne.n	800dcfe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dcd0:	b25b      	sxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	da03      	bge.n	800dcde <f_open+0x72>
				res = FR_INVALID_NAME;
 800dcd6:	2306      	movs	r3, #6
 800dcd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dcdc:	e00f      	b.n	800dcfe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	bf8c      	ite	hi
 800dce4:	2301      	movhi	r3, #1
 800dce6:	2300      	movls	r3, #0
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	461a      	mov	r2, r3
 800dcec:	f107 0318 	add.w	r3, r7, #24
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fd fff6 	bl	800bce4 <chk_lock>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	f003 031c 	and.w	r3, r3, #28
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d07f      	beq.n	800de08 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dd08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d017      	beq.n	800dd40 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dd10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd14:	2b04      	cmp	r3, #4
 800dd16:	d10e      	bne.n	800dd36 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd18:	f7fe f840 	bl	800bd9c <enq_lock>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <f_open+0xc4>
 800dd22:	f107 0318 	add.w	r3, r7, #24
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7ff f918 	bl	800cf5c <dir_register>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	e000      	b.n	800dd32 <f_open+0xc6>
 800dd30:	2312      	movs	r3, #18
 800dd32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	f043 0308 	orr.w	r3, r3, #8
 800dd3c:	71fb      	strb	r3, [r7, #7]
 800dd3e:	e010      	b.n	800dd62 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dd40:	7fbb      	ldrb	r3, [r7, #30]
 800dd42:	f003 0311 	and.w	r3, r3, #17
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <f_open+0xe6>
					res = FR_DENIED;
 800dd4a:	2307      	movs	r3, #7
 800dd4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd50:	e007      	b.n	800dd62 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <f_open+0xf6>
 800dd5c:	2308      	movs	r3, #8
 800dd5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d168      	bne.n	800de3c <f_open+0x1d0>
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	f003 0308 	and.w	r3, r3, #8
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d063      	beq.n	800de3c <f_open+0x1d0>
				dw = GET_FATTIME();
 800dd74:	f7fd f8c2 	bl	800aefc <get_fattime>
 800dd78:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7c:	330e      	adds	r3, #14
 800dd7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fd ff05 	bl	800bb90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd88:	3316      	adds	r3, #22
 800dd8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd feff 	bl	800bb90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd94:	330b      	adds	r3, #11
 800dd96:	2220      	movs	r2, #32
 800dd98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe fe53 	bl	800ca4c <ld_clust>
 800dda6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ddac:	2200      	movs	r2, #0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fe6b 	bl	800ca8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb6:	331c      	adds	r3, #28
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd fee8 	bl	800bb90 <st_dword>
					fs->wflag = 1;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ddc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d037      	beq.n	800de3c <f_open+0x1d0>
						dw = fs->winsect;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddd0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ddd2:	f107 0318 	add.w	r3, r7, #24
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fb7e 	bl	800c4dc <remove_chain>
 800dde0:	4603      	mov	r3, r0
 800dde2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800dde6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d126      	bne.n	800de3c <f_open+0x1d0>
							res = move_window(fs, dw);
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe f926 	bl	800c044 <move_window>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de02:	3a01      	subs	r2, #1
 800de04:	611a      	str	r2, [r3, #16]
 800de06:	e019      	b.n	800de3c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d115      	bne.n	800de3c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de10:	7fbb      	ldrb	r3, [r7, #30]
 800de12:	f003 0310 	and.w	r3, r3, #16
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <f_open+0x1b6>
					res = FR_NO_FILE;
 800de1a:	2304      	movs	r3, #4
 800de1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800de20:	e00c      	b.n	800de3c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	f003 0302 	and.w	r3, r3, #2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d007      	beq.n	800de3c <f_open+0x1d0>
 800de2c:	7fbb      	ldrb	r3, [r7, #30]
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <f_open+0x1d0>
						res = FR_DENIED;
 800de36:	2307      	movs	r3, #7
 800de38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800de3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de40:	2b00      	cmp	r3, #0
 800de42:	d126      	bne.n	800de92 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de44:	79fb      	ldrb	r3, [r7, #7]
 800de46:	f003 0308 	and.w	r3, r3, #8
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800de5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	2b01      	cmp	r3, #1
 800de68:	bf8c      	ite	hi
 800de6a:	2301      	movhi	r3, #1
 800de6c:	2300      	movls	r3, #0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	461a      	mov	r2, r3
 800de72:	f107 0318 	add.w	r3, r7, #24
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd ffb1 	bl	800bde0 <inc_lock>
 800de7e:	4602      	mov	r2, r0
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d102      	bne.n	800de92 <f_open+0x226>
 800de8c:	2302      	movs	r3, #2
 800de8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de96:	2b00      	cmp	r3, #0
 800de98:	f040 8095 	bne.w	800dfc6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fe fdd2 	bl	800ca4c <ld_clust>
 800dea8:	4602      	mov	r2, r0
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800deae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb0:	331c      	adds	r3, #28
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fd fe2e 	bl	800bb14 <ld_dword>
 800deb8:	4602      	mov	r2, r0
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	88da      	ldrh	r2, [r3, #6]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	79fa      	ldrb	r2, [r7, #7]
 800ded6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3330      	adds	r3, #48	@ 0x30
 800deee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f7fd fe98 	bl	800bc2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800defa:	79fb      	ldrb	r3, [r7, #7]
 800defc:	f003 0320 	and.w	r3, r3, #32
 800df00:	2b00      	cmp	r3, #0
 800df02:	d060      	beq.n	800dfc6 <f_open+0x35a>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d05c      	beq.n	800dfc6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	895b      	ldrh	r3, [r3, #10]
 800df18:	025b      	lsls	r3, r3, #9
 800df1a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df28:	e016      	b.n	800df58 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe f943 	bl	800c1ba <get_fat>
 800df34:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800df36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d802      	bhi.n	800df42 <f_open+0x2d6>
 800df3c:	2302      	movs	r3, #2
 800df3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800df42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df48:	d102      	bne.n	800df50 <f_open+0x2e4>
 800df4a:	2301      	movs	r3, #1
 800df4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d103      	bne.n	800df68 <f_open+0x2fc>
 800df60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df64:	429a      	cmp	r2, r3
 800df66:	d8e0      	bhi.n	800df2a <f_open+0x2be>
				}
				fp->clust = clst;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800df6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df72:	2b00      	cmp	r3, #0
 800df74:	d127      	bne.n	800dfc6 <f_open+0x35a>
 800df76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d022      	beq.n	800dfc6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe f8f9 	bl	800c17c <clust2sect>
 800df8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800df8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d103      	bne.n	800df9a <f_open+0x32e>
						res = FR_INT_ERR;
 800df92:	2302      	movs	r3, #2
 800df94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800df98:	e015      	b.n	800dfc6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800df9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df9c:	0a5a      	lsrs	r2, r3, #9
 800df9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa0:	441a      	add	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	7858      	ldrb	r0, [r3, #1]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6a1a      	ldr	r2, [r3, #32]
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	f7fd fd37 	bl	800ba28 <disk_read>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <f_open+0x35a>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dfc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <f_open+0x368>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dfd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3768      	adds	r7, #104	@ 0x68
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08e      	sub	sp, #56	@ 0x38
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2200      	movs	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f107 0214 	add.w	r2, r7, #20
 800dffe:	4611      	mov	r1, r2
 800e000:	4618      	mov	r0, r3
 800e002:	f7ff fdb7 	bl	800db74 <validate>
 800e006:	4603      	mov	r3, r0
 800e008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e00c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e010:	2b00      	cmp	r3, #0
 800e012:	d107      	bne.n	800e024 <f_read+0x44>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	7d5b      	ldrb	r3, [r3, #21]
 800e018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e01c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <f_read+0x4a>
 800e024:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e028:	e115      	b.n	800e256 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	7d1b      	ldrb	r3, [r3, #20]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <f_read+0x5a>
 800e036:	2307      	movs	r3, #7
 800e038:	e10d      	b.n	800e256 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	68da      	ldr	r2, [r3, #12]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	f240 80fe 	bls.w	800e24c <f_read+0x26c>
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e054:	e0fa      	b.n	800e24c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 80c6 	bne.w	800e1f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	0a5b      	lsrs	r3, r3, #9
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	8952      	ldrh	r2, [r2, #10]
 800e06e:	3a01      	subs	r2, #1
 800e070:	4013      	ands	r3, r2
 800e072:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d12f      	bne.n	800e0da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d103      	bne.n	800e08a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	633b      	str	r3, [r7, #48]	@ 0x30
 800e088:	e013      	b.n	800e0b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d007      	beq.n	800e0a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	4619      	mov	r1, r3
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f7fe fb1c 	bl	800c6d6 <clmt_clust>
 800e09e:	6338      	str	r0, [r7, #48]	@ 0x30
 800e0a0:	e007      	b.n	800e0b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7fe f885 	bl	800c1ba <get_fat>
 800e0b0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d804      	bhi.n	800e0c2 <f_read+0xe2>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	755a      	strb	r2, [r3, #21]
 800e0be:	2302      	movs	r3, #2
 800e0c0:	e0c9      	b.n	800e256 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c8:	d104      	bne.n	800e0d4 <f_read+0xf4>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	755a      	strb	r2, [r3, #21]
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e0c0      	b.n	800e256 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	69db      	ldr	r3, [r3, #28]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe f84a 	bl	800c17c <clust2sect>
 800e0e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d104      	bne.n	800e0fa <f_read+0x11a>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	755a      	strb	r2, [r3, #21]
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e0ad      	b.n	800e256 <f_read+0x276>
			sect += csect;
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	4413      	add	r3, r2
 800e100:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	0a5b      	lsrs	r3, r3, #9
 800e106:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d039      	beq.n	800e182 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e10e:	69fa      	ldr	r2, [r7, #28]
 800e110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e112:	4413      	add	r3, r2
 800e114:	697a      	ldr	r2, [r7, #20]
 800e116:	8952      	ldrh	r2, [r2, #10]
 800e118:	4293      	cmp	r3, r2
 800e11a:	d905      	bls.n	800e128 <f_read+0x148>
					cc = fs->csize - csect;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	895b      	ldrh	r3, [r3, #10]
 800e120:	461a      	mov	r2, r3
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	7858      	ldrb	r0, [r3, #1]
 800e12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e132:	f7fd fc79 	bl	800ba28 <disk_read>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d004      	beq.n	800e146 <f_read+0x166>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2201      	movs	r2, #1
 800e140:	755a      	strb	r2, [r3, #21]
 800e142:	2301      	movs	r3, #1
 800e144:	e087      	b.n	800e256 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	7d1b      	ldrb	r3, [r3, #20]
 800e14a:	b25b      	sxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	da14      	bge.n	800e17a <f_read+0x19a>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6a1a      	ldr	r2, [r3, #32]
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d90d      	bls.n	800e17a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6a1a      	ldr	r2, [r3, #32]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	025b      	lsls	r3, r3, #9
 800e168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e16a:	18d0      	adds	r0, r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3330      	adds	r3, #48	@ 0x30
 800e170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e174:	4619      	mov	r1, r3
 800e176:	f7fd fd37 	bl	800bbe8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17c:	025b      	lsls	r3, r3, #9
 800e17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e180:	e050      	b.n	800e224 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d02e      	beq.n	800e1ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	7d1b      	ldrb	r3, [r3, #20]
 800e190:	b25b      	sxtb	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	da18      	bge.n	800e1c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	7858      	ldrb	r0, [r3, #1]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6a1a      	ldr	r2, [r3, #32]
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f7fd fc5f 	bl	800ba68 <disk_write>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <f_read+0x1da>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	755a      	strb	r2, [r3, #21]
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e04d      	b.n	800e256 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	7d1b      	ldrb	r3, [r3, #20]
 800e1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	7858      	ldrb	r0, [r3, #1]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	69ba      	ldr	r2, [r7, #24]
 800e1d6:	f7fd fc27 	bl	800ba28 <disk_read>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <f_read+0x20a>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	755a      	strb	r2, [r3, #21]
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e035      	b.n	800e256 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	69ba      	ldr	r2, [r7, #24]
 800e1ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e1fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	429a      	cmp	r2, r3
 800e204:	d901      	bls.n	800e20a <f_read+0x22a>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e218:	4413      	add	r3, r2
 800e21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e21c:	4619      	mov	r1, r3
 800e21e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e220:	f7fd fce2 	bl	800bbe8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	4413      	add	r3, r2
 800e22a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	699a      	ldr	r2, [r3, #24]
 800e230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e232:	441a      	add	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	619a      	str	r2, [r3, #24]
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23e:	441a      	add	r2, r3
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f47f af01 	bne.w	800e056 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3738      	adds	r7, #56	@ 0x38
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b086      	sub	sp, #24
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f107 0208 	add.w	r2, r7, #8
 800e26c:	4611      	mov	r1, r2
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fc80 	bl	800db74 <validate>
 800e274:	4603      	mov	r3, r0
 800e276:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e278:	7dfb      	ldrb	r3, [r7, #23]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d168      	bne.n	800e350 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	7d1b      	ldrb	r3, [r3, #20]
 800e282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e286:	2b00      	cmp	r3, #0
 800e288:	d062      	beq.n	800e350 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7d1b      	ldrb	r3, [r3, #20]
 800e28e:	b25b      	sxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	da15      	bge.n	800e2c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	7858      	ldrb	r0, [r3, #1]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a1a      	ldr	r2, [r3, #32]
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	f7fd fbe0 	bl	800ba68 <disk_write>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <f_sync+0x54>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e04f      	b.n	800e352 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7d1b      	ldrb	r3, [r3, #20]
 800e2b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e2c0:	f7fc fe1c 	bl	800aefc <get_fattime>
 800e2c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fd feb8 	bl	800c044 <move_window>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e2d8:	7dfb      	ldrb	r3, [r7, #23]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d138      	bne.n	800e350 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	330b      	adds	r3, #11
 800e2e8:	781a      	ldrb	r2, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	330b      	adds	r3, #11
 800e2ee:	f042 0220 	orr.w	r2, r2, #32
 800e2f2:	b2d2      	uxtb	r2, r2
 800e2f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	461a      	mov	r2, r3
 800e300:	68f9      	ldr	r1, [r7, #12]
 800e302:	f7fe fbc2 	bl	800ca8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f103 021c 	add.w	r2, r3, #28
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fd fc3c 	bl	800bb90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3316      	adds	r3, #22
 800e31c:	6939      	ldr	r1, [r7, #16]
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fd fc36 	bl	800bb90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3312      	adds	r3, #18
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fd fc15 	bl	800bb5a <st_word>
					fs->wflag = 1;
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2201      	movs	r2, #1
 800e334:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fd feb1 	bl	800c0a0 <sync_fs>
 800e33e:	4603      	mov	r3, r0
 800e340:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	7d1b      	ldrb	r3, [r3, #20]
 800e346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e350:	7dfb      	ldrb	r3, [r7, #23]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3718      	adds	r7, #24
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b084      	sub	sp, #16
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff ff7b 	bl	800e25e <f_sync>
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d118      	bne.n	800e3a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f107 0208 	add.w	r2, r7, #8
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fbfa 	bl	800db74 <validate>
 800e380:	4603      	mov	r3, r0
 800e382:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e384:	7bfb      	ldrb	r3, [r7, #15]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10c      	bne.n	800e3a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fd fdb4 	bl	800befc <dec_lock>
 800e394:	4603      	mov	r3, r0
 800e396:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
	...

0800e3b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e3c6:	4b1f      	ldr	r3, [pc, #124]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3c8:	7a5b      	ldrb	r3, [r3, #9]
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d131      	bne.n	800e434 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3d2:	7a5b      	ldrb	r3, [r3, #9]
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3da:	2100      	movs	r1, #0
 800e3dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e3de:	4b19      	ldr	r3, [pc, #100]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3e0:	7a5b      	ldrb	r3, [r3, #9]
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	4a17      	ldr	r2, [pc, #92]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e3ee:	4b15      	ldr	r3, [pc, #84]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3f0:	7a5b      	ldrb	r3, [r3, #9]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	4b13      	ldr	r3, [pc, #76]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e3f8:	4413      	add	r3, r2
 800e3fa:	79fa      	ldrb	r2, [r7, #7]
 800e3fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3fe:	4b11      	ldr	r3, [pc, #68]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e400:	7a5b      	ldrb	r3, [r3, #9]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	1c5a      	adds	r2, r3, #1
 800e406:	b2d1      	uxtb	r1, r2
 800e408:	4a0e      	ldr	r2, [pc, #56]	@ (800e444 <FATFS_LinkDriverEx+0x94>)
 800e40a:	7251      	strb	r1, [r2, #9]
 800e40c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e40e:	7dbb      	ldrb	r3, [r7, #22]
 800e410:	3330      	adds	r3, #48	@ 0x30
 800e412:	b2da      	uxtb	r2, r3
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	3301      	adds	r3, #1
 800e41c:	223a      	movs	r2, #58	@ 0x3a
 800e41e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	3302      	adds	r3, #2
 800e424:	222f      	movs	r2, #47	@ 0x2f
 800e426:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	3303      	adds	r3, #3
 800e42c:	2200      	movs	r2, #0
 800e42e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e434:	7dfb      	ldrb	r3, [r7, #23]
}
 800e436:	4618      	mov	r0, r3
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	24000758 	.word	0x24000758

0800e448 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e452:	2200      	movs	r2, #0
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff ffaa 	bl	800e3b0 <FATFS_LinkDriverEx>
 800e45c:	4603      	mov	r3, r0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	4603      	mov	r3, r0
 800e470:	6039      	str	r1, [r7, #0]
 800e472:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e474:	88fb      	ldrh	r3, [r7, #6]
 800e476:	2b7f      	cmp	r3, #127	@ 0x7f
 800e478:	d802      	bhi.n	800e480 <ff_convert+0x18>
		c = chr;
 800e47a:	88fb      	ldrh	r3, [r7, #6]
 800e47c:	81fb      	strh	r3, [r7, #14]
 800e47e:	e025      	b.n	800e4cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00b      	beq.n	800e49e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e486:	88fb      	ldrh	r3, [r7, #6]
 800e488:	2bff      	cmp	r3, #255	@ 0xff
 800e48a:	d805      	bhi.n	800e498 <ff_convert+0x30>
 800e48c:	88fb      	ldrh	r3, [r7, #6]
 800e48e:	3b80      	subs	r3, #128	@ 0x80
 800e490:	4a12      	ldr	r2, [pc, #72]	@ (800e4dc <ff_convert+0x74>)
 800e492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e496:	e000      	b.n	800e49a <ff_convert+0x32>
 800e498:	2300      	movs	r3, #0
 800e49a:	81fb      	strh	r3, [r7, #14]
 800e49c:	e016      	b.n	800e4cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e49e:	2300      	movs	r3, #0
 800e4a0:	81fb      	strh	r3, [r7, #14]
 800e4a2:	e009      	b.n	800e4b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e4a4:	89fb      	ldrh	r3, [r7, #14]
 800e4a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e4dc <ff_convert+0x74>)
 800e4a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4ac:	88fa      	ldrh	r2, [r7, #6]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d006      	beq.n	800e4c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e4b2:	89fb      	ldrh	r3, [r7, #14]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	81fb      	strh	r3, [r7, #14]
 800e4b8:	89fb      	ldrh	r3, [r7, #14]
 800e4ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4bc:	d9f2      	bls.n	800e4a4 <ff_convert+0x3c>
 800e4be:	e000      	b.n	800e4c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e4c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e4c2:	89fb      	ldrh	r3, [r7, #14]
 800e4c4:	3380      	adds	r3, #128	@ 0x80
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e4cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	0800f13c 	.word	0x0800f13c

0800e4e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e4ea:	88fb      	ldrh	r3, [r7, #6]
 800e4ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4f0:	d201      	bcs.n	800e4f6 <ff_wtoupper+0x16>
 800e4f2:	4b3e      	ldr	r3, [pc, #248]	@ (800e5ec <ff_wtoupper+0x10c>)
 800e4f4:	e000      	b.n	800e4f8 <ff_wtoupper+0x18>
 800e4f6:	4b3e      	ldr	r3, [pc, #248]	@ (800e5f0 <ff_wtoupper+0x110>)
 800e4f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	1c9a      	adds	r2, r3, #2
 800e4fe:	617a      	str	r2, [r7, #20]
 800e500:	881b      	ldrh	r3, [r3, #0]
 800e502:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e504:	8a7b      	ldrh	r3, [r7, #18]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d068      	beq.n	800e5dc <ff_wtoupper+0xfc>
 800e50a:	88fa      	ldrh	r2, [r7, #6]
 800e50c:	8a7b      	ldrh	r3, [r7, #18]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d364      	bcc.n	800e5dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	1c9a      	adds	r2, r3, #2
 800e516:	617a      	str	r2, [r7, #20]
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	823b      	strh	r3, [r7, #16]
 800e51c:	8a3b      	ldrh	r3, [r7, #16]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	81fb      	strh	r3, [r7, #14]
 800e522:	8a3b      	ldrh	r3, [r7, #16]
 800e524:	b2db      	uxtb	r3, r3
 800e526:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	8a79      	ldrh	r1, [r7, #18]
 800e52c:	8a3b      	ldrh	r3, [r7, #16]
 800e52e:	440b      	add	r3, r1
 800e530:	429a      	cmp	r2, r3
 800e532:	da49      	bge.n	800e5c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e534:	89fb      	ldrh	r3, [r7, #14]
 800e536:	2b08      	cmp	r3, #8
 800e538:	d84f      	bhi.n	800e5da <ff_wtoupper+0xfa>
 800e53a:	a201      	add	r2, pc, #4	@ (adr r2, 800e540 <ff_wtoupper+0x60>)
 800e53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e540:	0800e565 	.word	0x0800e565
 800e544:	0800e577 	.word	0x0800e577
 800e548:	0800e58d 	.word	0x0800e58d
 800e54c:	0800e595 	.word	0x0800e595
 800e550:	0800e59d 	.word	0x0800e59d
 800e554:	0800e5a5 	.word	0x0800e5a5
 800e558:	0800e5ad 	.word	0x0800e5ad
 800e55c:	0800e5b5 	.word	0x0800e5b5
 800e560:	0800e5bd 	.word	0x0800e5bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e564:	88fa      	ldrh	r2, [r7, #6]
 800e566:	8a7b      	ldrh	r3, [r7, #18]
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	697a      	ldr	r2, [r7, #20]
 800e56e:	4413      	add	r3, r2
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	80fb      	strh	r3, [r7, #6]
 800e574:	e027      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e576:	88fa      	ldrh	r2, [r7, #6]
 800e578:	8a7b      	ldrh	r3, [r7, #18]
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	b29b      	uxth	r3, r3
 800e584:	88fa      	ldrh	r2, [r7, #6]
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	80fb      	strh	r3, [r7, #6]
 800e58a:	e01c      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	3b10      	subs	r3, #16
 800e590:	80fb      	strh	r3, [r7, #6]
 800e592:	e018      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	3b20      	subs	r3, #32
 800e598:	80fb      	strh	r3, [r7, #6]
 800e59a:	e014      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e59c:	88fb      	ldrh	r3, [r7, #6]
 800e59e:	3b30      	subs	r3, #48	@ 0x30
 800e5a0:	80fb      	strh	r3, [r7, #6]
 800e5a2:	e010      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e5a4:	88fb      	ldrh	r3, [r7, #6]
 800e5a6:	3b1a      	subs	r3, #26
 800e5a8:	80fb      	strh	r3, [r7, #6]
 800e5aa:	e00c      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	80fb      	strh	r3, [r7, #6]
 800e5b2:	e008      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e5b4:	88fb      	ldrh	r3, [r7, #6]
 800e5b6:	3b50      	subs	r3, #80	@ 0x50
 800e5b8:	80fb      	strh	r3, [r7, #6]
 800e5ba:	e004      	b.n	800e5c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e5bc:	88fb      	ldrh	r3, [r7, #6]
 800e5be:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e5c2:	80fb      	strh	r3, [r7, #6]
 800e5c4:	bf00      	nop
			}
			break;
 800e5c6:	e008      	b.n	800e5da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d195      	bne.n	800e4fa <ff_wtoupper+0x1a>
 800e5ce:	8a3b      	ldrh	r3, [r7, #16]
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e5d8:	e78f      	b.n	800e4fa <ff_wtoupper+0x1a>
			break;
 800e5da:	bf00      	nop
	}

	return chr;
 800e5dc:	88fb      	ldrh	r3, [r7, #6]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	371c      	adds	r7, #28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	0800f23c 	.word	0x0800f23c
 800e5f0:	0800f430 	.word	0x0800f430

0800e5f4 <siprintf>:
 800e5f4:	b40e      	push	{r1, r2, r3}
 800e5f6:	b500      	push	{lr}
 800e5f8:	b09c      	sub	sp, #112	@ 0x70
 800e5fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800e5fc:	9002      	str	r0, [sp, #8]
 800e5fe:	9006      	str	r0, [sp, #24]
 800e600:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e604:	4809      	ldr	r0, [pc, #36]	@ (800e62c <siprintf+0x38>)
 800e606:	9107      	str	r1, [sp, #28]
 800e608:	9104      	str	r1, [sp, #16]
 800e60a:	4909      	ldr	r1, [pc, #36]	@ (800e630 <siprintf+0x3c>)
 800e60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e610:	9105      	str	r1, [sp, #20]
 800e612:	6800      	ldr	r0, [r0, #0]
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	a902      	add	r1, sp, #8
 800e618:	f000 f994 	bl	800e944 <_svfiprintf_r>
 800e61c:	9b02      	ldr	r3, [sp, #8]
 800e61e:	2200      	movs	r2, #0
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	b01c      	add	sp, #112	@ 0x70
 800e624:	f85d eb04 	ldr.w	lr, [sp], #4
 800e628:	b003      	add	sp, #12
 800e62a:	4770      	bx	lr
 800e62c:	2400002c 	.word	0x2400002c
 800e630:	ffff0208 	.word	0xffff0208

0800e634 <memset>:
 800e634:	4402      	add	r2, r0
 800e636:	4603      	mov	r3, r0
 800e638:	4293      	cmp	r3, r2
 800e63a:	d100      	bne.n	800e63e <memset+0xa>
 800e63c:	4770      	bx	lr
 800e63e:	f803 1b01 	strb.w	r1, [r3], #1
 800e642:	e7f9      	b.n	800e638 <memset+0x4>

0800e644 <__errno>:
 800e644:	4b01      	ldr	r3, [pc, #4]	@ (800e64c <__errno+0x8>)
 800e646:	6818      	ldr	r0, [r3, #0]
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	2400002c 	.word	0x2400002c

0800e650 <__libc_init_array>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	4d0d      	ldr	r5, [pc, #52]	@ (800e688 <__libc_init_array+0x38>)
 800e654:	4c0d      	ldr	r4, [pc, #52]	@ (800e68c <__libc_init_array+0x3c>)
 800e656:	1b64      	subs	r4, r4, r5
 800e658:	10a4      	asrs	r4, r4, #2
 800e65a:	2600      	movs	r6, #0
 800e65c:	42a6      	cmp	r6, r4
 800e65e:	d109      	bne.n	800e674 <__libc_init_array+0x24>
 800e660:	4d0b      	ldr	r5, [pc, #44]	@ (800e690 <__libc_init_array+0x40>)
 800e662:	4c0c      	ldr	r4, [pc, #48]	@ (800e694 <__libc_init_array+0x44>)
 800e664:	f000 fc66 	bl	800ef34 <_init>
 800e668:	1b64      	subs	r4, r4, r5
 800e66a:	10a4      	asrs	r4, r4, #2
 800e66c:	2600      	movs	r6, #0
 800e66e:	42a6      	cmp	r6, r4
 800e670:	d105      	bne.n	800e67e <__libc_init_array+0x2e>
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	f855 3b04 	ldr.w	r3, [r5], #4
 800e678:	4798      	blx	r3
 800e67a:	3601      	adds	r6, #1
 800e67c:	e7ee      	b.n	800e65c <__libc_init_array+0xc>
 800e67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e682:	4798      	blx	r3
 800e684:	3601      	adds	r6, #1
 800e686:	e7f2      	b.n	800e66e <__libc_init_array+0x1e>
 800e688:	0800f528 	.word	0x0800f528
 800e68c:	0800f528 	.word	0x0800f528
 800e690:	0800f528 	.word	0x0800f528
 800e694:	0800f52c 	.word	0x0800f52c

0800e698 <__retarget_lock_acquire_recursive>:
 800e698:	4770      	bx	lr

0800e69a <__retarget_lock_release_recursive>:
 800e69a:	4770      	bx	lr

0800e69c <_free_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4605      	mov	r5, r0
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	d041      	beq.n	800e728 <_free_r+0x8c>
 800e6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a8:	1f0c      	subs	r4, r1, #4
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bfb8      	it	lt
 800e6ae:	18e4      	addlt	r4, r4, r3
 800e6b0:	f000 f8e0 	bl	800e874 <__malloc_lock>
 800e6b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e72c <_free_r+0x90>)
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	b933      	cbnz	r3, 800e6c8 <_free_r+0x2c>
 800e6ba:	6063      	str	r3, [r4, #4]
 800e6bc:	6014      	str	r4, [r2, #0]
 800e6be:	4628      	mov	r0, r5
 800e6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c4:	f000 b8dc 	b.w	800e880 <__malloc_unlock>
 800e6c8:	42a3      	cmp	r3, r4
 800e6ca:	d908      	bls.n	800e6de <_free_r+0x42>
 800e6cc:	6820      	ldr	r0, [r4, #0]
 800e6ce:	1821      	adds	r1, r4, r0
 800e6d0:	428b      	cmp	r3, r1
 800e6d2:	bf01      	itttt	eq
 800e6d4:	6819      	ldreq	r1, [r3, #0]
 800e6d6:	685b      	ldreq	r3, [r3, #4]
 800e6d8:	1809      	addeq	r1, r1, r0
 800e6da:	6021      	streq	r1, [r4, #0]
 800e6dc:	e7ed      	b.n	800e6ba <_free_r+0x1e>
 800e6de:	461a      	mov	r2, r3
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	b10b      	cbz	r3, 800e6e8 <_free_r+0x4c>
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d9fa      	bls.n	800e6de <_free_r+0x42>
 800e6e8:	6811      	ldr	r1, [r2, #0]
 800e6ea:	1850      	adds	r0, r2, r1
 800e6ec:	42a0      	cmp	r0, r4
 800e6ee:	d10b      	bne.n	800e708 <_free_r+0x6c>
 800e6f0:	6820      	ldr	r0, [r4, #0]
 800e6f2:	4401      	add	r1, r0
 800e6f4:	1850      	adds	r0, r2, r1
 800e6f6:	4283      	cmp	r3, r0
 800e6f8:	6011      	str	r1, [r2, #0]
 800e6fa:	d1e0      	bne.n	800e6be <_free_r+0x22>
 800e6fc:	6818      	ldr	r0, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	6053      	str	r3, [r2, #4]
 800e702:	4408      	add	r0, r1
 800e704:	6010      	str	r0, [r2, #0]
 800e706:	e7da      	b.n	800e6be <_free_r+0x22>
 800e708:	d902      	bls.n	800e710 <_free_r+0x74>
 800e70a:	230c      	movs	r3, #12
 800e70c:	602b      	str	r3, [r5, #0]
 800e70e:	e7d6      	b.n	800e6be <_free_r+0x22>
 800e710:	6820      	ldr	r0, [r4, #0]
 800e712:	1821      	adds	r1, r4, r0
 800e714:	428b      	cmp	r3, r1
 800e716:	bf04      	itt	eq
 800e718:	6819      	ldreq	r1, [r3, #0]
 800e71a:	685b      	ldreq	r3, [r3, #4]
 800e71c:	6063      	str	r3, [r4, #4]
 800e71e:	bf04      	itt	eq
 800e720:	1809      	addeq	r1, r1, r0
 800e722:	6021      	streq	r1, [r4, #0]
 800e724:	6054      	str	r4, [r2, #4]
 800e726:	e7ca      	b.n	800e6be <_free_r+0x22>
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	bf00      	nop
 800e72c:	240008a8 	.word	0x240008a8

0800e730 <sbrk_aligned>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	4e0f      	ldr	r6, [pc, #60]	@ (800e770 <sbrk_aligned+0x40>)
 800e734:	460c      	mov	r4, r1
 800e736:	6831      	ldr	r1, [r6, #0]
 800e738:	4605      	mov	r5, r0
 800e73a:	b911      	cbnz	r1, 800e742 <sbrk_aligned+0x12>
 800e73c:	f000 fba6 	bl	800ee8c <_sbrk_r>
 800e740:	6030      	str	r0, [r6, #0]
 800e742:	4621      	mov	r1, r4
 800e744:	4628      	mov	r0, r5
 800e746:	f000 fba1 	bl	800ee8c <_sbrk_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	d103      	bne.n	800e756 <sbrk_aligned+0x26>
 800e74e:	f04f 34ff 	mov.w	r4, #4294967295
 800e752:	4620      	mov	r0, r4
 800e754:	bd70      	pop	{r4, r5, r6, pc}
 800e756:	1cc4      	adds	r4, r0, #3
 800e758:	f024 0403 	bic.w	r4, r4, #3
 800e75c:	42a0      	cmp	r0, r4
 800e75e:	d0f8      	beq.n	800e752 <sbrk_aligned+0x22>
 800e760:	1a21      	subs	r1, r4, r0
 800e762:	4628      	mov	r0, r5
 800e764:	f000 fb92 	bl	800ee8c <_sbrk_r>
 800e768:	3001      	adds	r0, #1
 800e76a:	d1f2      	bne.n	800e752 <sbrk_aligned+0x22>
 800e76c:	e7ef      	b.n	800e74e <sbrk_aligned+0x1e>
 800e76e:	bf00      	nop
 800e770:	240008a4 	.word	0x240008a4

0800e774 <_malloc_r>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	1ccd      	adds	r5, r1, #3
 800e77a:	f025 0503 	bic.w	r5, r5, #3
 800e77e:	3508      	adds	r5, #8
 800e780:	2d0c      	cmp	r5, #12
 800e782:	bf38      	it	cc
 800e784:	250c      	movcc	r5, #12
 800e786:	2d00      	cmp	r5, #0
 800e788:	4606      	mov	r6, r0
 800e78a:	db01      	blt.n	800e790 <_malloc_r+0x1c>
 800e78c:	42a9      	cmp	r1, r5
 800e78e:	d904      	bls.n	800e79a <_malloc_r+0x26>
 800e790:	230c      	movs	r3, #12
 800e792:	6033      	str	r3, [r6, #0]
 800e794:	2000      	movs	r0, #0
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e870 <_malloc_r+0xfc>
 800e79e:	f000 f869 	bl	800e874 <__malloc_lock>
 800e7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	bb44      	cbnz	r4, 800e7fc <_malloc_r+0x88>
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff ffbf 	bl	800e730 <sbrk_aligned>
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	d158      	bne.n	800e86a <_malloc_r+0xf6>
 800e7b8:	f8d8 4000 	ldr.w	r4, [r8]
 800e7bc:	4627      	mov	r7, r4
 800e7be:	2f00      	cmp	r7, #0
 800e7c0:	d143      	bne.n	800e84a <_malloc_r+0xd6>
 800e7c2:	2c00      	cmp	r4, #0
 800e7c4:	d04b      	beq.n	800e85e <_malloc_r+0xea>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	eb04 0903 	add.w	r9, r4, r3
 800e7d0:	f000 fb5c 	bl	800ee8c <_sbrk_r>
 800e7d4:	4581      	cmp	r9, r0
 800e7d6:	d142      	bne.n	800e85e <_malloc_r+0xea>
 800e7d8:	6821      	ldr	r1, [r4, #0]
 800e7da:	1a6d      	subs	r5, r5, r1
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7ff ffa6 	bl	800e730 <sbrk_aligned>
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d03a      	beq.n	800e85e <_malloc_r+0xea>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	442b      	add	r3, r5
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	bb62      	cbnz	r2, 800e850 <_malloc_r+0xdc>
 800e7f6:	f8c8 7000 	str.w	r7, [r8]
 800e7fa:	e00f      	b.n	800e81c <_malloc_r+0xa8>
 800e7fc:	6822      	ldr	r2, [r4, #0]
 800e7fe:	1b52      	subs	r2, r2, r5
 800e800:	d420      	bmi.n	800e844 <_malloc_r+0xd0>
 800e802:	2a0b      	cmp	r2, #11
 800e804:	d917      	bls.n	800e836 <_malloc_r+0xc2>
 800e806:	1961      	adds	r1, r4, r5
 800e808:	42a3      	cmp	r3, r4
 800e80a:	6025      	str	r5, [r4, #0]
 800e80c:	bf18      	it	ne
 800e80e:	6059      	strne	r1, [r3, #4]
 800e810:	6863      	ldr	r3, [r4, #4]
 800e812:	bf08      	it	eq
 800e814:	f8c8 1000 	streq.w	r1, [r8]
 800e818:	5162      	str	r2, [r4, r5]
 800e81a:	604b      	str	r3, [r1, #4]
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 f82f 	bl	800e880 <__malloc_unlock>
 800e822:	f104 000b 	add.w	r0, r4, #11
 800e826:	1d23      	adds	r3, r4, #4
 800e828:	f020 0007 	bic.w	r0, r0, #7
 800e82c:	1ac2      	subs	r2, r0, r3
 800e82e:	bf1c      	itt	ne
 800e830:	1a1b      	subne	r3, r3, r0
 800e832:	50a3      	strne	r3, [r4, r2]
 800e834:	e7af      	b.n	800e796 <_malloc_r+0x22>
 800e836:	6862      	ldr	r2, [r4, #4]
 800e838:	42a3      	cmp	r3, r4
 800e83a:	bf0c      	ite	eq
 800e83c:	f8c8 2000 	streq.w	r2, [r8]
 800e840:	605a      	strne	r2, [r3, #4]
 800e842:	e7eb      	b.n	800e81c <_malloc_r+0xa8>
 800e844:	4623      	mov	r3, r4
 800e846:	6864      	ldr	r4, [r4, #4]
 800e848:	e7ae      	b.n	800e7a8 <_malloc_r+0x34>
 800e84a:	463c      	mov	r4, r7
 800e84c:	687f      	ldr	r7, [r7, #4]
 800e84e:	e7b6      	b.n	800e7be <_malloc_r+0x4a>
 800e850:	461a      	mov	r2, r3
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	42a3      	cmp	r3, r4
 800e856:	d1fb      	bne.n	800e850 <_malloc_r+0xdc>
 800e858:	2300      	movs	r3, #0
 800e85a:	6053      	str	r3, [r2, #4]
 800e85c:	e7de      	b.n	800e81c <_malloc_r+0xa8>
 800e85e:	230c      	movs	r3, #12
 800e860:	6033      	str	r3, [r6, #0]
 800e862:	4630      	mov	r0, r6
 800e864:	f000 f80c 	bl	800e880 <__malloc_unlock>
 800e868:	e794      	b.n	800e794 <_malloc_r+0x20>
 800e86a:	6005      	str	r5, [r0, #0]
 800e86c:	e7d6      	b.n	800e81c <_malloc_r+0xa8>
 800e86e:	bf00      	nop
 800e870:	240008a8 	.word	0x240008a8

0800e874 <__malloc_lock>:
 800e874:	4801      	ldr	r0, [pc, #4]	@ (800e87c <__malloc_lock+0x8>)
 800e876:	f7ff bf0f 	b.w	800e698 <__retarget_lock_acquire_recursive>
 800e87a:	bf00      	nop
 800e87c:	240008a0 	.word	0x240008a0

0800e880 <__malloc_unlock>:
 800e880:	4801      	ldr	r0, [pc, #4]	@ (800e888 <__malloc_unlock+0x8>)
 800e882:	f7ff bf0a 	b.w	800e69a <__retarget_lock_release_recursive>
 800e886:	bf00      	nop
 800e888:	240008a0 	.word	0x240008a0

0800e88c <__ssputs_r>:
 800e88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e890:	688e      	ldr	r6, [r1, #8]
 800e892:	461f      	mov	r7, r3
 800e894:	42be      	cmp	r6, r7
 800e896:	680b      	ldr	r3, [r1, #0]
 800e898:	4682      	mov	sl, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	4690      	mov	r8, r2
 800e89e:	d82d      	bhi.n	800e8fc <__ssputs_r+0x70>
 800e8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8a8:	d026      	beq.n	800e8f8 <__ssputs_r+0x6c>
 800e8aa:	6965      	ldr	r5, [r4, #20]
 800e8ac:	6909      	ldr	r1, [r1, #16]
 800e8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8b2:	eba3 0901 	sub.w	r9, r3, r1
 800e8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8ba:	1c7b      	adds	r3, r7, #1
 800e8bc:	444b      	add	r3, r9
 800e8be:	106d      	asrs	r5, r5, #1
 800e8c0:	429d      	cmp	r5, r3
 800e8c2:	bf38      	it	cc
 800e8c4:	461d      	movcc	r5, r3
 800e8c6:	0553      	lsls	r3, r2, #21
 800e8c8:	d527      	bpl.n	800e91a <__ssputs_r+0x8e>
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	f7ff ff52 	bl	800e774 <_malloc_r>
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	b360      	cbz	r0, 800e92e <__ssputs_r+0xa2>
 800e8d4:	6921      	ldr	r1, [r4, #16]
 800e8d6:	464a      	mov	r2, r9
 800e8d8:	f000 fae8 	bl	800eeac <memcpy>
 800e8dc:	89a3      	ldrh	r3, [r4, #12]
 800e8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	6126      	str	r6, [r4, #16]
 800e8ea:	6165      	str	r5, [r4, #20]
 800e8ec:	444e      	add	r6, r9
 800e8ee:	eba5 0509 	sub.w	r5, r5, r9
 800e8f2:	6026      	str	r6, [r4, #0]
 800e8f4:	60a5      	str	r5, [r4, #8]
 800e8f6:	463e      	mov	r6, r7
 800e8f8:	42be      	cmp	r6, r7
 800e8fa:	d900      	bls.n	800e8fe <__ssputs_r+0x72>
 800e8fc:	463e      	mov	r6, r7
 800e8fe:	6820      	ldr	r0, [r4, #0]
 800e900:	4632      	mov	r2, r6
 800e902:	4641      	mov	r1, r8
 800e904:	f000 faa8 	bl	800ee58 <memmove>
 800e908:	68a3      	ldr	r3, [r4, #8]
 800e90a:	1b9b      	subs	r3, r3, r6
 800e90c:	60a3      	str	r3, [r4, #8]
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	4433      	add	r3, r6
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	2000      	movs	r0, #0
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91a:	462a      	mov	r2, r5
 800e91c:	f000 fad4 	bl	800eec8 <_realloc_r>
 800e920:	4606      	mov	r6, r0
 800e922:	2800      	cmp	r0, #0
 800e924:	d1e0      	bne.n	800e8e8 <__ssputs_r+0x5c>
 800e926:	6921      	ldr	r1, [r4, #16]
 800e928:	4650      	mov	r0, sl
 800e92a:	f7ff feb7 	bl	800e69c <_free_r>
 800e92e:	230c      	movs	r3, #12
 800e930:	f8ca 3000 	str.w	r3, [sl]
 800e934:	89a3      	ldrh	r3, [r4, #12]
 800e936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	f04f 30ff 	mov.w	r0, #4294967295
 800e940:	e7e9      	b.n	800e916 <__ssputs_r+0x8a>
	...

0800e944 <_svfiprintf_r>:
 800e944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e948:	4698      	mov	r8, r3
 800e94a:	898b      	ldrh	r3, [r1, #12]
 800e94c:	061b      	lsls	r3, r3, #24
 800e94e:	b09d      	sub	sp, #116	@ 0x74
 800e950:	4607      	mov	r7, r0
 800e952:	460d      	mov	r5, r1
 800e954:	4614      	mov	r4, r2
 800e956:	d510      	bpl.n	800e97a <_svfiprintf_r+0x36>
 800e958:	690b      	ldr	r3, [r1, #16]
 800e95a:	b973      	cbnz	r3, 800e97a <_svfiprintf_r+0x36>
 800e95c:	2140      	movs	r1, #64	@ 0x40
 800e95e:	f7ff ff09 	bl	800e774 <_malloc_r>
 800e962:	6028      	str	r0, [r5, #0]
 800e964:	6128      	str	r0, [r5, #16]
 800e966:	b930      	cbnz	r0, 800e976 <_svfiprintf_r+0x32>
 800e968:	230c      	movs	r3, #12
 800e96a:	603b      	str	r3, [r7, #0]
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	b01d      	add	sp, #116	@ 0x74
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	2340      	movs	r3, #64	@ 0x40
 800e978:	616b      	str	r3, [r5, #20]
 800e97a:	2300      	movs	r3, #0
 800e97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e97e:	2320      	movs	r3, #32
 800e980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e984:	f8cd 800c 	str.w	r8, [sp, #12]
 800e988:	2330      	movs	r3, #48	@ 0x30
 800e98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb28 <_svfiprintf_r+0x1e4>
 800e98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e992:	f04f 0901 	mov.w	r9, #1
 800e996:	4623      	mov	r3, r4
 800e998:	469a      	mov	sl, r3
 800e99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e99e:	b10a      	cbz	r2, 800e9a4 <_svfiprintf_r+0x60>
 800e9a0:	2a25      	cmp	r2, #37	@ 0x25
 800e9a2:	d1f9      	bne.n	800e998 <_svfiprintf_r+0x54>
 800e9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a8:	d00b      	beq.n	800e9c2 <_svfiprintf_r+0x7e>
 800e9aa:	465b      	mov	r3, fp
 800e9ac:	4622      	mov	r2, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7ff ff6b 	bl	800e88c <__ssputs_r>
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	f000 80a7 	beq.w	800eb0a <_svfiprintf_r+0x1c6>
 800e9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9be:	445a      	add	r2, fp
 800e9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f000 809f 	beq.w	800eb0a <_svfiprintf_r+0x1c6>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9d6:	f10a 0a01 	add.w	sl, sl, #1
 800e9da:	9304      	str	r3, [sp, #16]
 800e9dc:	9307      	str	r3, [sp, #28]
 800e9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9e4:	4654      	mov	r4, sl
 800e9e6:	2205      	movs	r2, #5
 800e9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ec:	484e      	ldr	r0, [pc, #312]	@ (800eb28 <_svfiprintf_r+0x1e4>)
 800e9ee:	f7f1 fc7f 	bl	80002f0 <memchr>
 800e9f2:	9a04      	ldr	r2, [sp, #16]
 800e9f4:	b9d8      	cbnz	r0, 800ea2e <_svfiprintf_r+0xea>
 800e9f6:	06d0      	lsls	r0, r2, #27
 800e9f8:	bf44      	itt	mi
 800e9fa:	2320      	movmi	r3, #32
 800e9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea00:	0711      	lsls	r1, r2, #28
 800ea02:	bf44      	itt	mi
 800ea04:	232b      	movmi	r3, #43	@ 0x2b
 800ea06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea10:	d015      	beq.n	800ea3e <_svfiprintf_r+0xfa>
 800ea12:	9a07      	ldr	r2, [sp, #28]
 800ea14:	4654      	mov	r4, sl
 800ea16:	2000      	movs	r0, #0
 800ea18:	f04f 0c0a 	mov.w	ip, #10
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea22:	3b30      	subs	r3, #48	@ 0x30
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	d94b      	bls.n	800eac0 <_svfiprintf_r+0x17c>
 800ea28:	b1b0      	cbz	r0, 800ea58 <_svfiprintf_r+0x114>
 800ea2a:	9207      	str	r2, [sp, #28]
 800ea2c:	e014      	b.n	800ea58 <_svfiprintf_r+0x114>
 800ea2e:	eba0 0308 	sub.w	r3, r0, r8
 800ea32:	fa09 f303 	lsl.w	r3, r9, r3
 800ea36:	4313      	orrs	r3, r2
 800ea38:	9304      	str	r3, [sp, #16]
 800ea3a:	46a2      	mov	sl, r4
 800ea3c:	e7d2      	b.n	800e9e4 <_svfiprintf_r+0xa0>
 800ea3e:	9b03      	ldr	r3, [sp, #12]
 800ea40:	1d19      	adds	r1, r3, #4
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	9103      	str	r1, [sp, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	bfbb      	ittet	lt
 800ea4a:	425b      	neglt	r3, r3
 800ea4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ea50:	9307      	strge	r3, [sp, #28]
 800ea52:	9307      	strlt	r3, [sp, #28]
 800ea54:	bfb8      	it	lt
 800ea56:	9204      	strlt	r2, [sp, #16]
 800ea58:	7823      	ldrb	r3, [r4, #0]
 800ea5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea5c:	d10a      	bne.n	800ea74 <_svfiprintf_r+0x130>
 800ea5e:	7863      	ldrb	r3, [r4, #1]
 800ea60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea62:	d132      	bne.n	800eaca <_svfiprintf_r+0x186>
 800ea64:	9b03      	ldr	r3, [sp, #12]
 800ea66:	1d1a      	adds	r2, r3, #4
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	9203      	str	r2, [sp, #12]
 800ea6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea70:	3402      	adds	r4, #2
 800ea72:	9305      	str	r3, [sp, #20]
 800ea74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb38 <_svfiprintf_r+0x1f4>
 800ea78:	7821      	ldrb	r1, [r4, #0]
 800ea7a:	2203      	movs	r2, #3
 800ea7c:	4650      	mov	r0, sl
 800ea7e:	f7f1 fc37 	bl	80002f0 <memchr>
 800ea82:	b138      	cbz	r0, 800ea94 <_svfiprintf_r+0x150>
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	eba0 000a 	sub.w	r0, r0, sl
 800ea8a:	2240      	movs	r2, #64	@ 0x40
 800ea8c:	4082      	lsls	r2, r0
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	3401      	adds	r4, #1
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea98:	4824      	ldr	r0, [pc, #144]	@ (800eb2c <_svfiprintf_r+0x1e8>)
 800ea9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea9e:	2206      	movs	r2, #6
 800eaa0:	f7f1 fc26 	bl	80002f0 <memchr>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d036      	beq.n	800eb16 <_svfiprintf_r+0x1d2>
 800eaa8:	4b21      	ldr	r3, [pc, #132]	@ (800eb30 <_svfiprintf_r+0x1ec>)
 800eaaa:	bb1b      	cbnz	r3, 800eaf4 <_svfiprintf_r+0x1b0>
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	3307      	adds	r3, #7
 800eab0:	f023 0307 	bic.w	r3, r3, #7
 800eab4:	3308      	adds	r3, #8
 800eab6:	9303      	str	r3, [sp, #12]
 800eab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaba:	4433      	add	r3, r6
 800eabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eabe:	e76a      	b.n	800e996 <_svfiprintf_r+0x52>
 800eac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac4:	460c      	mov	r4, r1
 800eac6:	2001      	movs	r0, #1
 800eac8:	e7a8      	b.n	800ea1c <_svfiprintf_r+0xd8>
 800eaca:	2300      	movs	r3, #0
 800eacc:	3401      	adds	r4, #1
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	4619      	mov	r1, r3
 800ead2:	f04f 0c0a 	mov.w	ip, #10
 800ead6:	4620      	mov	r0, r4
 800ead8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eadc:	3a30      	subs	r2, #48	@ 0x30
 800eade:	2a09      	cmp	r2, #9
 800eae0:	d903      	bls.n	800eaea <_svfiprintf_r+0x1a6>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d0c6      	beq.n	800ea74 <_svfiprintf_r+0x130>
 800eae6:	9105      	str	r1, [sp, #20]
 800eae8:	e7c4      	b.n	800ea74 <_svfiprintf_r+0x130>
 800eaea:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaee:	4604      	mov	r4, r0
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e7f0      	b.n	800ead6 <_svfiprintf_r+0x192>
 800eaf4:	ab03      	add	r3, sp, #12
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	462a      	mov	r2, r5
 800eafa:	4b0e      	ldr	r3, [pc, #56]	@ (800eb34 <_svfiprintf_r+0x1f0>)
 800eafc:	a904      	add	r1, sp, #16
 800eafe:	4638      	mov	r0, r7
 800eb00:	f3af 8000 	nop.w
 800eb04:	1c42      	adds	r2, r0, #1
 800eb06:	4606      	mov	r6, r0
 800eb08:	d1d6      	bne.n	800eab8 <_svfiprintf_r+0x174>
 800eb0a:	89ab      	ldrh	r3, [r5, #12]
 800eb0c:	065b      	lsls	r3, r3, #25
 800eb0e:	f53f af2d 	bmi.w	800e96c <_svfiprintf_r+0x28>
 800eb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb14:	e72c      	b.n	800e970 <_svfiprintf_r+0x2c>
 800eb16:	ab03      	add	r3, sp, #12
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4b05      	ldr	r3, [pc, #20]	@ (800eb34 <_svfiprintf_r+0x1f0>)
 800eb1e:	a904      	add	r1, sp, #16
 800eb20:	4638      	mov	r0, r7
 800eb22:	f000 f879 	bl	800ec18 <_printf_i>
 800eb26:	e7ed      	b.n	800eb04 <_svfiprintf_r+0x1c0>
 800eb28:	0800f4ec 	.word	0x0800f4ec
 800eb2c:	0800f4f6 	.word	0x0800f4f6
 800eb30:	00000000 	.word	0x00000000
 800eb34:	0800e88d 	.word	0x0800e88d
 800eb38:	0800f4f2 	.word	0x0800f4f2

0800eb3c <_printf_common>:
 800eb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb40:	4616      	mov	r6, r2
 800eb42:	4698      	mov	r8, r3
 800eb44:	688a      	ldr	r2, [r1, #8]
 800eb46:	690b      	ldr	r3, [r1, #16]
 800eb48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bfb8      	it	lt
 800eb50:	4613      	movlt	r3, r2
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb58:	4607      	mov	r7, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	b10a      	cbz	r2, 800eb62 <_printf_common+0x26>
 800eb5e:	3301      	adds	r3, #1
 800eb60:	6033      	str	r3, [r6, #0]
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	0699      	lsls	r1, r3, #26
 800eb66:	bf42      	ittt	mi
 800eb68:	6833      	ldrmi	r3, [r6, #0]
 800eb6a:	3302      	addmi	r3, #2
 800eb6c:	6033      	strmi	r3, [r6, #0]
 800eb6e:	6825      	ldr	r5, [r4, #0]
 800eb70:	f015 0506 	ands.w	r5, r5, #6
 800eb74:	d106      	bne.n	800eb84 <_printf_common+0x48>
 800eb76:	f104 0a19 	add.w	sl, r4, #25
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	6832      	ldr	r2, [r6, #0]
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dc26      	bgt.n	800ebd2 <_printf_common+0x96>
 800eb84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	3b00      	subs	r3, #0
 800eb8c:	bf18      	it	ne
 800eb8e:	2301      	movne	r3, #1
 800eb90:	0692      	lsls	r2, r2, #26
 800eb92:	d42b      	bmi.n	800ebec <_printf_common+0xb0>
 800eb94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb98:	4641      	mov	r1, r8
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	47c8      	blx	r9
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d01e      	beq.n	800ebe0 <_printf_common+0xa4>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	6922      	ldr	r2, [r4, #16]
 800eba6:	f003 0306 	and.w	r3, r3, #6
 800ebaa:	2b04      	cmp	r3, #4
 800ebac:	bf02      	ittt	eq
 800ebae:	68e5      	ldreq	r5, [r4, #12]
 800ebb0:	6833      	ldreq	r3, [r6, #0]
 800ebb2:	1aed      	subeq	r5, r5, r3
 800ebb4:	68a3      	ldr	r3, [r4, #8]
 800ebb6:	bf0c      	ite	eq
 800ebb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebbc:	2500      	movne	r5, #0
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	bfc4      	itt	gt
 800ebc2:	1a9b      	subgt	r3, r3, r2
 800ebc4:	18ed      	addgt	r5, r5, r3
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	341a      	adds	r4, #26
 800ebca:	42b5      	cmp	r5, r6
 800ebcc:	d11a      	bne.n	800ec04 <_printf_common+0xc8>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e008      	b.n	800ebe4 <_printf_common+0xa8>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	4638      	mov	r0, r7
 800ebda:	47c8      	blx	r9
 800ebdc:	3001      	adds	r0, #1
 800ebde:	d103      	bne.n	800ebe8 <_printf_common+0xac>
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe8:	3501      	adds	r5, #1
 800ebea:	e7c6      	b.n	800eb7a <_printf_common+0x3e>
 800ebec:	18e1      	adds	r1, r4, r3
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	2030      	movs	r0, #48	@ 0x30
 800ebf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebf6:	4422      	add	r2, r4
 800ebf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec00:	3302      	adds	r3, #2
 800ec02:	e7c7      	b.n	800eb94 <_printf_common+0x58>
 800ec04:	2301      	movs	r3, #1
 800ec06:	4622      	mov	r2, r4
 800ec08:	4641      	mov	r1, r8
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c8      	blx	r9
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d0e6      	beq.n	800ebe0 <_printf_common+0xa4>
 800ec12:	3601      	adds	r6, #1
 800ec14:	e7d9      	b.n	800ebca <_printf_common+0x8e>
	...

0800ec18 <_printf_i>:
 800ec18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	7e0f      	ldrb	r7, [r1, #24]
 800ec1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec20:	2f78      	cmp	r7, #120	@ 0x78
 800ec22:	4691      	mov	r9, r2
 800ec24:	4680      	mov	r8, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec2e:	d807      	bhi.n	800ec40 <_printf_i+0x28>
 800ec30:	2f62      	cmp	r7, #98	@ 0x62
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x32>
 800ec34:	2f00      	cmp	r7, #0
 800ec36:	f000 80d2 	beq.w	800edde <_printf_i+0x1c6>
 800ec3a:	2f58      	cmp	r7, #88	@ 0x58
 800ec3c:	f000 80b9 	beq.w	800edb2 <_printf_i+0x19a>
 800ec40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec48:	e03a      	b.n	800ecc0 <_printf_i+0xa8>
 800ec4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec4e:	2b15      	cmp	r3, #21
 800ec50:	d8f6      	bhi.n	800ec40 <_printf_i+0x28>
 800ec52:	a101      	add	r1, pc, #4	@ (adr r1, 800ec58 <_printf_i+0x40>)
 800ec54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec58:	0800ecb1 	.word	0x0800ecb1
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ec41 	.word	0x0800ec41
 800ec64:	0800ec41 	.word	0x0800ec41
 800ec68:	0800ec41 	.word	0x0800ec41
 800ec6c:	0800ec41 	.word	0x0800ec41
 800ec70:	0800ecc5 	.word	0x0800ecc5
 800ec74:	0800ec41 	.word	0x0800ec41
 800ec78:	0800ec41 	.word	0x0800ec41
 800ec7c:	0800ec41 	.word	0x0800ec41
 800ec80:	0800ec41 	.word	0x0800ec41
 800ec84:	0800edc5 	.word	0x0800edc5
 800ec88:	0800ecef 	.word	0x0800ecef
 800ec8c:	0800ed7f 	.word	0x0800ed7f
 800ec90:	0800ec41 	.word	0x0800ec41
 800ec94:	0800ec41 	.word	0x0800ec41
 800ec98:	0800ede7 	.word	0x0800ede7
 800ec9c:	0800ec41 	.word	0x0800ec41
 800eca0:	0800ecef 	.word	0x0800ecef
 800eca4:	0800ec41 	.word	0x0800ec41
 800eca8:	0800ec41 	.word	0x0800ec41
 800ecac:	0800ed87 	.word	0x0800ed87
 800ecb0:	6833      	ldr	r3, [r6, #0]
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6032      	str	r2, [r6, #0]
 800ecb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e09d      	b.n	800ee00 <_printf_i+0x1e8>
 800ecc4:	6833      	ldr	r3, [r6, #0]
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	1d19      	adds	r1, r3, #4
 800ecca:	6031      	str	r1, [r6, #0]
 800eccc:	0606      	lsls	r6, r0, #24
 800ecce:	d501      	bpl.n	800ecd4 <_printf_i+0xbc>
 800ecd0:	681d      	ldr	r5, [r3, #0]
 800ecd2:	e003      	b.n	800ecdc <_printf_i+0xc4>
 800ecd4:	0645      	lsls	r5, r0, #25
 800ecd6:	d5fb      	bpl.n	800ecd0 <_printf_i+0xb8>
 800ecd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	da03      	bge.n	800ece8 <_printf_i+0xd0>
 800ece0:	232d      	movs	r3, #45	@ 0x2d
 800ece2:	426d      	negs	r5, r5
 800ece4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece8:	4859      	ldr	r0, [pc, #356]	@ (800ee50 <_printf_i+0x238>)
 800ecea:	230a      	movs	r3, #10
 800ecec:	e011      	b.n	800ed12 <_printf_i+0xfa>
 800ecee:	6821      	ldr	r1, [r4, #0]
 800ecf0:	6833      	ldr	r3, [r6, #0]
 800ecf2:	0608      	lsls	r0, r1, #24
 800ecf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecf8:	d402      	bmi.n	800ed00 <_printf_i+0xe8>
 800ecfa:	0649      	lsls	r1, r1, #25
 800ecfc:	bf48      	it	mi
 800ecfe:	b2ad      	uxthmi	r5, r5
 800ed00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed02:	4853      	ldr	r0, [pc, #332]	@ (800ee50 <_printf_i+0x238>)
 800ed04:	6033      	str	r3, [r6, #0]
 800ed06:	bf14      	ite	ne
 800ed08:	230a      	movne	r3, #10
 800ed0a:	2308      	moveq	r3, #8
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed12:	6866      	ldr	r6, [r4, #4]
 800ed14:	60a6      	str	r6, [r4, #8]
 800ed16:	2e00      	cmp	r6, #0
 800ed18:	bfa2      	ittt	ge
 800ed1a:	6821      	ldrge	r1, [r4, #0]
 800ed1c:	f021 0104 	bicge.w	r1, r1, #4
 800ed20:	6021      	strge	r1, [r4, #0]
 800ed22:	b90d      	cbnz	r5, 800ed28 <_printf_i+0x110>
 800ed24:	2e00      	cmp	r6, #0
 800ed26:	d04b      	beq.n	800edc0 <_printf_i+0x1a8>
 800ed28:	4616      	mov	r6, r2
 800ed2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ed32:	5dc7      	ldrb	r7, [r0, r7]
 800ed34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed38:	462f      	mov	r7, r5
 800ed3a:	42bb      	cmp	r3, r7
 800ed3c:	460d      	mov	r5, r1
 800ed3e:	d9f4      	bls.n	800ed2a <_printf_i+0x112>
 800ed40:	2b08      	cmp	r3, #8
 800ed42:	d10b      	bne.n	800ed5c <_printf_i+0x144>
 800ed44:	6823      	ldr	r3, [r4, #0]
 800ed46:	07df      	lsls	r7, r3, #31
 800ed48:	d508      	bpl.n	800ed5c <_printf_i+0x144>
 800ed4a:	6923      	ldr	r3, [r4, #16]
 800ed4c:	6861      	ldr	r1, [r4, #4]
 800ed4e:	4299      	cmp	r1, r3
 800ed50:	bfde      	ittt	le
 800ed52:	2330      	movle	r3, #48	@ 0x30
 800ed54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed5c:	1b92      	subs	r2, r2, r6
 800ed5e:	6122      	str	r2, [r4, #16]
 800ed60:	f8cd a000 	str.w	sl, [sp]
 800ed64:	464b      	mov	r3, r9
 800ed66:	aa03      	add	r2, sp, #12
 800ed68:	4621      	mov	r1, r4
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	f7ff fee6 	bl	800eb3c <_printf_common>
 800ed70:	3001      	adds	r0, #1
 800ed72:	d14a      	bne.n	800ee0a <_printf_i+0x1f2>
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	b004      	add	sp, #16
 800ed7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	f043 0320 	orr.w	r3, r3, #32
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	4833      	ldr	r0, [pc, #204]	@ (800ee54 <_printf_i+0x23c>)
 800ed88:	2778      	movs	r7, #120	@ 0x78
 800ed8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	6831      	ldr	r1, [r6, #0]
 800ed92:	061f      	lsls	r7, r3, #24
 800ed94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed98:	d402      	bmi.n	800eda0 <_printf_i+0x188>
 800ed9a:	065f      	lsls	r7, r3, #25
 800ed9c:	bf48      	it	mi
 800ed9e:	b2ad      	uxthmi	r5, r5
 800eda0:	6031      	str	r1, [r6, #0]
 800eda2:	07d9      	lsls	r1, r3, #31
 800eda4:	bf44      	itt	mi
 800eda6:	f043 0320 	orrmi.w	r3, r3, #32
 800edaa:	6023      	strmi	r3, [r4, #0]
 800edac:	b11d      	cbz	r5, 800edb6 <_printf_i+0x19e>
 800edae:	2310      	movs	r3, #16
 800edb0:	e7ac      	b.n	800ed0c <_printf_i+0xf4>
 800edb2:	4827      	ldr	r0, [pc, #156]	@ (800ee50 <_printf_i+0x238>)
 800edb4:	e7e9      	b.n	800ed8a <_printf_i+0x172>
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	f023 0320 	bic.w	r3, r3, #32
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	e7f6      	b.n	800edae <_printf_i+0x196>
 800edc0:	4616      	mov	r6, r2
 800edc2:	e7bd      	b.n	800ed40 <_printf_i+0x128>
 800edc4:	6833      	ldr	r3, [r6, #0]
 800edc6:	6825      	ldr	r5, [r4, #0]
 800edc8:	6961      	ldr	r1, [r4, #20]
 800edca:	1d18      	adds	r0, r3, #4
 800edcc:	6030      	str	r0, [r6, #0]
 800edce:	062e      	lsls	r6, r5, #24
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	d501      	bpl.n	800edd8 <_printf_i+0x1c0>
 800edd4:	6019      	str	r1, [r3, #0]
 800edd6:	e002      	b.n	800edde <_printf_i+0x1c6>
 800edd8:	0668      	lsls	r0, r5, #25
 800edda:	d5fb      	bpl.n	800edd4 <_printf_i+0x1bc>
 800eddc:	8019      	strh	r1, [r3, #0]
 800edde:	2300      	movs	r3, #0
 800ede0:	6123      	str	r3, [r4, #16]
 800ede2:	4616      	mov	r6, r2
 800ede4:	e7bc      	b.n	800ed60 <_printf_i+0x148>
 800ede6:	6833      	ldr	r3, [r6, #0]
 800ede8:	1d1a      	adds	r2, r3, #4
 800edea:	6032      	str	r2, [r6, #0]
 800edec:	681e      	ldr	r6, [r3, #0]
 800edee:	6862      	ldr	r2, [r4, #4]
 800edf0:	2100      	movs	r1, #0
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 fa7c 	bl	80002f0 <memchr>
 800edf8:	b108      	cbz	r0, 800edfe <_printf_i+0x1e6>
 800edfa:	1b80      	subs	r0, r0, r6
 800edfc:	6060      	str	r0, [r4, #4]
 800edfe:	6863      	ldr	r3, [r4, #4]
 800ee00:	6123      	str	r3, [r4, #16]
 800ee02:	2300      	movs	r3, #0
 800ee04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee08:	e7aa      	b.n	800ed60 <_printf_i+0x148>
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	4649      	mov	r1, r9
 800ee10:	4640      	mov	r0, r8
 800ee12:	47d0      	blx	sl
 800ee14:	3001      	adds	r0, #1
 800ee16:	d0ad      	beq.n	800ed74 <_printf_i+0x15c>
 800ee18:	6823      	ldr	r3, [r4, #0]
 800ee1a:	079b      	lsls	r3, r3, #30
 800ee1c:	d413      	bmi.n	800ee46 <_printf_i+0x22e>
 800ee1e:	68e0      	ldr	r0, [r4, #12]
 800ee20:	9b03      	ldr	r3, [sp, #12]
 800ee22:	4298      	cmp	r0, r3
 800ee24:	bfb8      	it	lt
 800ee26:	4618      	movlt	r0, r3
 800ee28:	e7a6      	b.n	800ed78 <_printf_i+0x160>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	4649      	mov	r1, r9
 800ee30:	4640      	mov	r0, r8
 800ee32:	47d0      	blx	sl
 800ee34:	3001      	adds	r0, #1
 800ee36:	d09d      	beq.n	800ed74 <_printf_i+0x15c>
 800ee38:	3501      	adds	r5, #1
 800ee3a:	68e3      	ldr	r3, [r4, #12]
 800ee3c:	9903      	ldr	r1, [sp, #12]
 800ee3e:	1a5b      	subs	r3, r3, r1
 800ee40:	42ab      	cmp	r3, r5
 800ee42:	dcf2      	bgt.n	800ee2a <_printf_i+0x212>
 800ee44:	e7eb      	b.n	800ee1e <_printf_i+0x206>
 800ee46:	2500      	movs	r5, #0
 800ee48:	f104 0619 	add.w	r6, r4, #25
 800ee4c:	e7f5      	b.n	800ee3a <_printf_i+0x222>
 800ee4e:	bf00      	nop
 800ee50:	0800f4fd 	.word	0x0800f4fd
 800ee54:	0800f50e 	.word	0x0800f50e

0800ee58 <memmove>:
 800ee58:	4288      	cmp	r0, r1
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	eb01 0402 	add.w	r4, r1, r2
 800ee60:	d902      	bls.n	800ee68 <memmove+0x10>
 800ee62:	4284      	cmp	r4, r0
 800ee64:	4623      	mov	r3, r4
 800ee66:	d807      	bhi.n	800ee78 <memmove+0x20>
 800ee68:	1e43      	subs	r3, r0, #1
 800ee6a:	42a1      	cmp	r1, r4
 800ee6c:	d008      	beq.n	800ee80 <memmove+0x28>
 800ee6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee76:	e7f8      	b.n	800ee6a <memmove+0x12>
 800ee78:	4402      	add	r2, r0
 800ee7a:	4601      	mov	r1, r0
 800ee7c:	428a      	cmp	r2, r1
 800ee7e:	d100      	bne.n	800ee82 <memmove+0x2a>
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee8a:	e7f7      	b.n	800ee7c <memmove+0x24>

0800ee8c <_sbrk_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d06      	ldr	r5, [pc, #24]	@ (800eea8 <_sbrk_r+0x1c>)
 800ee90:	2300      	movs	r3, #0
 800ee92:	4604      	mov	r4, r0
 800ee94:	4608      	mov	r0, r1
 800ee96:	602b      	str	r3, [r5, #0]
 800ee98:	f7f3 f98c 	bl	80021b4 <_sbrk>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d102      	bne.n	800eea6 <_sbrk_r+0x1a>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	b103      	cbz	r3, 800eea6 <_sbrk_r+0x1a>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	2400089c 	.word	0x2400089c

0800eeac <memcpy>:
 800eeac:	440a      	add	r2, r1
 800eeae:	4291      	cmp	r1, r2
 800eeb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeb4:	d100      	bne.n	800eeb8 <memcpy+0xc>
 800eeb6:	4770      	bx	lr
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec2:	4291      	cmp	r1, r2
 800eec4:	d1f9      	bne.n	800eeba <memcpy+0xe>
 800eec6:	bd10      	pop	{r4, pc}

0800eec8 <_realloc_r>:
 800eec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eecc:	4680      	mov	r8, r0
 800eece:	4615      	mov	r5, r2
 800eed0:	460c      	mov	r4, r1
 800eed2:	b921      	cbnz	r1, 800eede <_realloc_r+0x16>
 800eed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eed8:	4611      	mov	r1, r2
 800eeda:	f7ff bc4b 	b.w	800e774 <_malloc_r>
 800eede:	b92a      	cbnz	r2, 800eeec <_realloc_r+0x24>
 800eee0:	f7ff fbdc 	bl	800e69c <_free_r>
 800eee4:	2400      	movs	r4, #0
 800eee6:	4620      	mov	r0, r4
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	f000 f81a 	bl	800ef24 <_malloc_usable_size_r>
 800eef0:	4285      	cmp	r5, r0
 800eef2:	4606      	mov	r6, r0
 800eef4:	d802      	bhi.n	800eefc <_realloc_r+0x34>
 800eef6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eefa:	d8f4      	bhi.n	800eee6 <_realloc_r+0x1e>
 800eefc:	4629      	mov	r1, r5
 800eefe:	4640      	mov	r0, r8
 800ef00:	f7ff fc38 	bl	800e774 <_malloc_r>
 800ef04:	4607      	mov	r7, r0
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d0ec      	beq.n	800eee4 <_realloc_r+0x1c>
 800ef0a:	42b5      	cmp	r5, r6
 800ef0c:	462a      	mov	r2, r5
 800ef0e:	4621      	mov	r1, r4
 800ef10:	bf28      	it	cs
 800ef12:	4632      	movcs	r2, r6
 800ef14:	f7ff ffca 	bl	800eeac <memcpy>
 800ef18:	4621      	mov	r1, r4
 800ef1a:	4640      	mov	r0, r8
 800ef1c:	f7ff fbbe 	bl	800e69c <_free_r>
 800ef20:	463c      	mov	r4, r7
 800ef22:	e7e0      	b.n	800eee6 <_realloc_r+0x1e>

0800ef24 <_malloc_usable_size_r>:
 800ef24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef28:	1f18      	subs	r0, r3, #4
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	bfbc      	itt	lt
 800ef2e:	580b      	ldrlt	r3, [r1, r0]
 800ef30:	18c0      	addlt	r0, r0, r3
 800ef32:	4770      	bx	lr

0800ef34 <_init>:
 800ef34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef36:	bf00      	nop
 800ef38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3a:	bc08      	pop	{r3}
 800ef3c:	469e      	mov	lr, r3
 800ef3e:	4770      	bx	lr

0800ef40 <_fini>:
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	bf00      	nop
 800ef44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef46:	bc08      	pop	{r3}
 800ef48:	469e      	mov	lr, r3
 800ef4a:	4770      	bx	lr
