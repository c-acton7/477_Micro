
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e370  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec04  0800ec04  0000fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ec0c  0800ec0c  0000fc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ec10  0800ec10  0000fc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800ec14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  2400007c  0800ec90  0001007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006fc  0800ec90  000106fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a669  00000000  00000000  000100aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003afe  00000000  00000000  0002a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d8  00000000  00000000  0002e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000126b  00000000  00000000  0002f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a88d  00000000  00000000  00030c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021751  00000000  00000000  0006b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001664b5  00000000  00000000  0008cc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f30ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a08  00000000  00000000  001f3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001f9b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e5f8 	.word	0x0800e5f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800e5f8 	.word	0x0800e5f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f87f 	bl	80004f8 <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f004 fa12 	bl	8004860 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f008 f9d4 	bl	80087f4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f008 f9cd 	bl	80087f4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f004 f9fe 	bl	8004860 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	24000118 	.word	0x24000118

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <RA8875_read_data+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <RA8875_read_data+0x6c>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01a      	b.n	80004e0 <RA8875_read_data+0x60>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2110      	movs	r1, #16
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <RA8875_read_data+0x70>)
 80004b4:	f004 f9d4 	bl	8004860 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80004b8:	1db9      	adds	r1, r7, #6
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RA8875_read_data+0x74>)
 80004c2:	f008 f997 	bl	80087f4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <RA8875_read_data+0x74>)
 80004d0:	f008 fb7e 	bl	8008bd0 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <RA8875_read_data+0x70>)
 80004da:	f004 f9c1 	bl	8004860 <HAL_GPIO_WritePin>
  return data;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240000a0 	.word	0x240000a0
 80004ec:	240000a4 	.word	0x240000a4
 80004f0:	58020000 	.word	0x58020000
 80004f4:	24000118 	.word	0x24000118

080004f8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <RA8875_write_command+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <RA8875_write_command+0x6c>)
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4013      	ands	r3, r2
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff52 	bl	80003bc <RA8875_BUS_FREE>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <RA8875_write_command+0x70>)
 8000528:	f004 f99a 	bl	8004860 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800052c:	f107 010f 	add.w	r1, r7, #15
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <RA8875_write_command+0x74>)
 8000538:	f008 f95c 	bl	80087f4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <RA8875_write_command+0x74>)
 8000546:	f008 f955 	bl	80087f4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <RA8875_write_command+0x70>)
 8000550:	f004 f986 	bl	8004860 <HAL_GPIO_WritePin>
 8000554:	e000      	b.n	8000558 <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000556:	bf00      	nop
}
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	240000a0 	.word	0x240000a0
 8000564:	240000a4 	.word	0x240000a4
 8000568:	58020000 	.word	0x58020000
 800056c:	24000118 	.word	0x24000118

08000570 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	f7ff ffbe 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800057c:	f7ff ff80 	bl	8000480 <RA8875_read_data>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff3a 	bl	8000408 <RA8875_write_data>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff1a 	bl	80003e8 <RA8875_read_reg>
 80005b4:	4603      	mov	r3, r0
 80005b6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f3      	bne.n	80005ac <RA8875_wait_poll+0x10>
 80005c4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RA8875_apply_rotation_x+0x34>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <RA8875_apply_rotation_x+0x38>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	80fb      	strh	r3, [r7, #6]
      break;
 80005f2:	bf00      	nop
  }

  return x;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2400009d 	.word	0x2400009d
 8000608:	24000098 	.word	0x24000098

0800060c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <RA8875_apply_rotation_y+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d108      	bne.n	8000630 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <RA8875_apply_rotation_y+0x44>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	80fb      	strh	r3, [r7, #6]
      break;
 800062e:	bf00      	nop
  }

  return y + _voffset;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <RA8875_apply_rotation_y+0x48>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4413      	add	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	b21b      	sxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2400009d 	.word	0x2400009d
 8000650:	2400009a 	.word	0x2400009a
 8000654:	2400009e 	.word	0x2400009e

08000658 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffa8 	bl	80005d0 <RA8875_apply_rotation_x>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffbf 	bl	800060c <RA8875_apply_rotation_y>
 800068e:	4603      	mov	r3, r0
 8000690:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9a 	bl	80005d0 <RA8875_apply_rotation_x>
 800069c:	4603      	mov	r3, r0
 800069e:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb1 	bl	800060c <RA8875_apply_rotation_y>
 80006aa:	4603      	mov	r3, r0
 80006ac:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006ae:	2091      	movs	r0, #145	@ 0x91
 80006b0:	f7ff ff22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006be:	2092      	movs	r0, #146	@ 0x92
 80006c0:	f7ff ff1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe9a 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d4:	2093      	movs	r0, #147	@ 0x93
 80006d6:	f7ff ff0f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe92 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e4:	2094      	movs	r0, #148	@ 0x94
 80006e6:	f7ff ff07 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe87 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fa:	2095      	movs	r0, #149	@ 0x95
 80006fc:	f7ff fefc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe7f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	f7ff fef4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b21b      	sxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe74 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000720:	2097      	movs	r0, #151	@ 0x97
 8000722:	f7ff fee9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000730:	2098      	movs	r0, #152	@ 0x98
 8000732:	f7ff fee1 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe61 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000746:	2063      	movs	r0, #99	@ 0x63
 8000748:	f7ff fed6 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800074c:	8b3b      	ldrh	r3, [r7, #24]
 800074e:	0adb      	lsrs	r3, r3, #11
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe57 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f7ff fecc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000760:	8b3b      	ldrh	r3, [r7, #24]
 8000762:	115b      	asrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000772:	2065      	movs	r0, #101	@ 0x65
 8000774:	f7ff fec0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000778:	8b3b      	ldrh	r3, [r7, #24]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe40 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000788:	2090      	movs	r0, #144	@ 0x90
 800078a:	f7ff feb5 	bl	80004f8 <RA8875_write_command>
  if (filled)
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000794:	20b0      	movs	r0, #176	@ 0xb0
 8000796:	f7ff fe37 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079a:	e002      	b.n	80007a2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 800079c:	2090      	movs	r0, #144	@ 0x90
 800079e:	f7ff fe33 	bl	8000408 <RA8875_write_data>
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	4608      	mov	r0, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	461a      	mov	r2, r3
 80007b8:	4623      	mov	r3, r4
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4603      	mov	r3, r0
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feff 	bl	80005d0 <RA8875_apply_rotation_x>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff16 	bl	800060c <RA8875_apply_rotation_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef1 	bl	80005d0 <RA8875_apply_rotation_x>
 80007ee:	4603      	mov	r3, r0
 80007f0:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff08 	bl	800060c <RA8875_apply_rotation_y>
 80007fc:	4603      	mov	r3, r0
 80007fe:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee3 	bl	80005d0 <RA8875_apply_rotation_x>
 800080a:	4603      	mov	r3, r0
 800080c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800080e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fefa 	bl	800060c <RA8875_apply_rotation_y>
 8000818:	4603      	mov	r3, r0
 800081a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800081c:	2091      	movs	r0, #145	@ 0x91
 800081e:	f7ff fe6b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fdee 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 800082c:	2092      	movs	r0, #146	@ 0x92
 800082e:	f7ff fe63 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b21b      	sxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fde3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000842:	2093      	movs	r0, #147	@ 0x93
 8000844:	f7ff fe58 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fddb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000852:	2094      	movs	r0, #148	@ 0x94
 8000854:	f7ff fe50 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fdd0 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000868:	2095      	movs	r0, #149	@ 0x95
 800086a:	f7ff fe45 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1);
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdc8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000878:	2096      	movs	r0, #150	@ 0x96
 800087a:	f7ff fe3d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdbd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 800088e:	2097      	movs	r0, #151	@ 0x97
 8000890:	f7ff fe32 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000894:	883b      	ldrh	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdb5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 800089e:	2098      	movs	r0, #152	@ 0x98
 80008a0:	f7ff fe2a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdaa 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b4:	20a9      	movs	r0, #169	@ 0xa9
 80008b6:	f7ff fe1f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2);
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fda2 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c4:	20aa      	movs	r0, #170	@ 0xaa
 80008c6:	f7ff fe17 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008ce:	121b      	asrs	r3, r3, #8
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd97 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008da:	20ab      	movs	r0, #171	@ 0xab
 80008dc:	f7ff fe0c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2);
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd8f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ea:	20ac      	movs	r0, #172	@ 0xac
 80008ec:	f7ff fe04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fd84 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000900:	2063      	movs	r0, #99	@ 0x63
 8000902:	f7ff fdf9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0adb      	lsrs	r3, r3, #11
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd7a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f7ff fdef 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091a:	8c3b      	ldrh	r3, [r7, #32]
 800091c:	115b      	asrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 800092c:	2065      	movs	r0, #101	@ 0x65
 800092e:	f7ff fde3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000932:	8c3b      	ldrh	r3, [r7, #32]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd63 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000942:	2090      	movs	r0, #144	@ 0x90
 8000944:	f7ff fdd8 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000950:	20a1      	movs	r0, #161	@ 0xa1
 8000952:	f7ff fd59 	bl	8000408 <RA8875_write_data>
 8000956:	e002      	b.n	800095e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000958:	2081      	movs	r0, #129	@ 0x81
 800095a:	f7ff fd55 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	2090      	movs	r0, #144	@ 0x90
 8000962:	f7ff fe1b 	bl	800059c <RA8875_wait_poll>
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1d 	bl	80005d0 <RA8875_apply_rotation_x>
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe34 	bl	800060c <RA8875_apply_rotation_y>
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009a8:	20a5      	movs	r0, #165	@ 0xa5
 80009aa:	f7ff fda5 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd28 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009b8:	20a6      	movs	r0, #166	@ 0xa6
 80009ba:	f7ff fd9d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd1d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009ce:	20a7      	movs	r0, #167	@ 0xa7
 80009d0:	f7ff fd92 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd15 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009de:	20a8      	movs	r0, #168	@ 0xa8
 80009e0:	f7ff fd8a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd0a 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f4:	20a1      	movs	r0, #161	@ 0xa1
 80009f6:	f7ff fd7f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd02 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a04:	20a2      	movs	r0, #162	@ 0xa2
 8000a06:	f7ff fd77 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcf7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1a:	20a3      	movs	r0, #163	@ 0xa3
 8000a1c:	f7ff fd6c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fcef 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2a:	20a4      	movs	r0, #164	@ 0xa4
 8000a2c:	f7ff fd64 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce4 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a40:	2063      	movs	r0, #99	@ 0x63
 8000a42:	f7ff fd59 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcda 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a54:	2064      	movs	r0, #100	@ 0x64
 8000a56:	f7ff fd4f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	115b      	asrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcce 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a6c:	2065      	movs	r0, #101	@ 0x65
 8000a6e:	f7ff fd43 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcc3 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a82:	20a0      	movs	r0, #160	@ 0xa0
 8000a84:	f7ff fd38 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000a88:	7f3b      	ldrb	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a8e:	20c0      	movs	r0, #192	@ 0xc0
 8000a90:	f7ff fcba 	bl	8000408 <RA8875_write_data>
 8000a94:	e002      	b.n	8000a9c <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a96:	2080      	movs	r0, #128	@ 0x80
 8000a98:	f7ff fcb6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
 8000aa0:	f7ff fd7c 	bl	800059c <RA8875_wait_poll>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7e 	bl	80005d0 <RA8875_apply_rotation_x>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd95 	bl	800060c <RA8875_apply_rotation_y>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd70 	bl	80005d0 <RA8875_apply_rotation_x>
 8000af0:	4603      	mov	r3, r0
 8000af2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd87 	bl	800060c <RA8875_apply_rotation_y>
 8000afe:	4603      	mov	r3, r0
 8000b00:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dd05      	ble.n	8000b1a <roundRectHelper+0x6e>
 8000b0e:	1cba      	adds	r2, r7, #2
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc3b 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd05      	ble.n	8000b32 <roundRectHelper+0x86>
 8000b26:	463a      	mov	r2, r7
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc2f 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b32:	2091      	movs	r0, #145	@ 0x91
 8000b34:	f7ff fce0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b44:	2092      	movs	r0, #146	@ 0x92
 8000b46:	f7ff fcd7 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	121b      	asrs	r3, r3, #8
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc57 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5a:	2093      	movs	r0, #147	@ 0x93
 8000b5c:	f7ff fccc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 8000b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc4e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b6c:	2094      	movs	r0, #148	@ 0x94
 8000b6e:	f7ff fcc3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc43 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b82:	2095      	movs	r0, #149	@ 0x95
 8000b84:	f7ff fcb8 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc3a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b94:	2096      	movs	r0, #150	@ 0x96
 8000b96:	f7ff fcaf 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc2f 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000baa:	2097      	movs	r0, #151	@ 0x97
 8000bac:	f7ff fca4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bbc:	2098      	movs	r0, #152	@ 0x98
 8000bbe:	f7ff fc9b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc1b 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd2:	20a1      	movs	r0, #161	@ 0xa1
 8000bd4:	f7ff fc90 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bd8:	8b3b      	ldrh	r3, [r7, #24]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be2:	20a2      	movs	r0, #162	@ 0xa2
 8000be4:	f7ff fc88 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bec:	121b      	asrs	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc08 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bf8:	20a3      	movs	r0, #163	@ 0xa3
 8000bfa:	f7ff fc7d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c08:	20a4      	movs	r0, #164	@ 0xa4
 8000c0a:	f7ff fc75 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c12:	121b      	asrs	r3, r3, #8
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf5 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1e:	2063      	movs	r0, #99	@ 0x63
 8000c20:	f7ff fc6a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	0adb      	lsrs	r3, r3, #11
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbeb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff fc60 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c38:	8bbb      	ldrh	r3, [r7, #28]
 8000c3a:	115b      	asrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbdf 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4a:	2065      	movs	r0, #101	@ 0x65
 8000c4c:	f7ff fc54 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd4 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c60:	20a0      	movs	r0, #160	@ 0xa0
 8000c62:	f7ff fc49 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c6e:	20e0      	movs	r0, #224	@ 0xe0
 8000c70:	f7ff fbca 	bl	8000408 <RA8875_write_data>
 8000c74:	e002      	b.n	8000c7c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c76:	20a0      	movs	r0, #160	@ 0xa0
 8000c78:	f7ff fbc6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff fc8c 	bl	800059c <RA8875_wait_poll>
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21c      	sxth	r4, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f7ff fcbd 	bl	8000658 <rectHelper>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <RA8875_fill_screen+0x38>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <RA8875_fill_screen+0x3c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fca0 	bl	8000658 <rectHelper>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000098 	.word	0x24000098
 8000d24:	2400009a 	.word	0x2400009a

08000d28 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fd1d 	bl	80007aa <triangleHelper>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fddd 	bl	800096e <ellipseHelper>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fe50 	bl	8000aac <roundRectHelper>
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1a:	2040      	movs	r0, #64	@ 0x40
 8000e1c:	f7ff fb6c 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e20:	f7ff fb2e 	bl	8000480 <RA8875_read_data>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fae8 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f7ff fb5d 	bl	80004f8 <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e3e:	f7ff fb1f 	bl	8000480 <RA8875_read_data>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e4c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad9 	bl	8000408 <RA8875_write_data>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbac 	bl	80005d0 <RA8875_apply_rotation_x>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbc3 	bl	800060c <RA8875_apply_rotation_y>
 8000e86:	4603      	mov	r3, r0
 8000e88:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8a:	202a      	movs	r0, #42	@ 0x2a
 8000e8c:	f7ff fb34 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fab7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fb2c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faad 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eae:	202c      	movs	r0, #44	@ 0x2c
 8000eb0:	f7ff fb22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ebe:	202d      	movs	r0, #45	@ 0x2d
 8000ec0:	f7ff fb1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa9b 	bl	8000408 <RA8875_write_data>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eea:	2063      	movs	r0, #99	@ 0x63
 8000eec:	f7ff fb04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0adb      	lsrs	r3, r3, #11
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa85 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f7ff fafa 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	115b      	asrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa79 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f16:	2065      	movs	r0, #101	@ 0x65
 8000f18:	f7ff faee 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6e 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f2c:	2060      	movs	r0, #96	@ 0x60
 8000f2e:	f7ff fae3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0adb      	lsrs	r3, r3, #11
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa64 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f40:	2061      	movs	r0, #97	@ 0x61
 8000f42:	f7ff fad9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	115b      	asrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa58 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f58:	2062      	movs	r0, #98	@ 0x62
 8000f5a:	f7ff facd 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa4d 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f6e:	2022      	movs	r0, #34	@ 0x22
 8000f70:	f7ff fac2 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f74:	f7ff fa84 	bl	8000480 <RA8875_read_data>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f82:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa3e 	bl	8000408 <RA8875_write_data>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d901      	bls.n	8000fa8 <RA8875_text_scale+0x14>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff faa5 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fae:	f7ff fa67 	bl	8000480 <RA8875_read_data>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 030f 	bic.w	r3, r3, #15
 8000fbc:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa1a 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <RA8875_text_scale+0x50>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7013      	strb	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400009c 	.word	0x2400009c

08000fe8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <RA8875_text_write+0x1c>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f970 	bl	80002e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa77 	bl	80004f8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e010      	b.n	8001032 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9f5 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <RA8875_text_write+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <RA8875_text_write+0x44>
 8001026:	2001      	movs	r0, #1
 8001028:	f001 fa22 	bl	8002470 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	3301      	adds	r3, #1
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ea      	bcc.n	8001010 <RA8875_text_write+0x28>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400009c 	.word	0x2400009c

08001048 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 800104e:	4bdb      	ldr	r3, [pc, #876]	@ (80013bc <end_game+0x374>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001058:	f001 fa0a 	bl	8002470 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 800105c:	201f      	movs	r0, #31
 800105e:	f7ff fe43 	bl	8000ce8 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001062:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	230a      	movs	r3, #10
 800106a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800106e:	215a      	movs	r1, #90	@ 0x5a
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe0b 	bl	8000c8c <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	230a      	movs	r3, #10
 800107c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001080:	2164      	movs	r1, #100	@ 0x64
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fe02 	bl	8000c8c <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8001088:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800109e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80010a2:	21b4      	movs	r1, #180	@ 0xb4
 80010a4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80010a8:	f7ff fe3e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 80010ac:	231f      	movs	r3, #31
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80010c0:	f240 22da 	movw	r2, #730	@ 0x2da
 80010c4:	21b4      	movs	r1, #180	@ 0xb4
 80010c6:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80010ca:	f7ff fe2d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80010ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	f240 238a 	movw	r3, #650	@ 0x28a
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80010e4:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80010e8:	21b4      	movs	r1, #180	@ 0xb4
 80010ea:	f240 208a 	movw	r0, #650	@ 0x28a
 80010ee:	f7ff fe1b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 80010f2:	231f      	movs	r3, #31
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f240 2376 	movw	r3, #630	@ 0x276
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001106:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800110a:	21b4      	movs	r1, #180	@ 0xb4
 800110c:	f240 2076 	movw	r0, #630	@ 0x276
 8001110:	f7ff fe0a 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8001114:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2346      	movs	r3, #70	@ 0x46
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001128:	2214      	movs	r2, #20
 800112a:	21b4      	movs	r1, #180	@ 0xb4
 800112c:	2046      	movs	r0, #70	@ 0x46
 800112e:	f7ff fdfb 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8001132:	231f      	movs	r3, #31
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	235a      	movs	r3, #90	@ 0x5a
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001144:	2228      	movs	r2, #40	@ 0x28
 8001146:	21b4      	movs	r1, #180	@ 0xb4
 8001148:	205a      	movs	r0, #90	@ 0x5a
 800114a:	f7ff fded 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 800114e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	2378      	movs	r3, #120	@ 0x78
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001162:	2246      	movs	r2, #70	@ 0x46
 8001164:	21b4      	movs	r1, #180	@ 0xb4
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f7ff fdde 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 800116c:	231f      	movs	r3, #31
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	238c      	movs	r3, #140	@ 0x8c
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800117e:	225a      	movs	r2, #90	@ 0x5a
 8001180:	21b4      	movs	r1, #180	@ 0xb4
 8001182:	208c      	movs	r0, #140	@ 0x8c
 8001184:	f7ff fdd0 	bl	8000d28 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8001188:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2378      	movs	r3, #120	@ 0x78
 8001190:	22c8      	movs	r2, #200	@ 0xc8
 8001192:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001196:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800119a:	f7ff fded 	bl	8000d78 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 800119e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f240 237e 	movw	r3, #638	@ 0x27e
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80011b4:	f240 224e 	movw	r2, #590	@ 0x24e
 80011b8:	21fa      	movs	r1, #250	@ 0xfa
 80011ba:	f240 204e 	movw	r0, #590	@ 0x24e
 80011be:	f7ff fdb3 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 80011c2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	23ae      	movs	r3, #174	@ 0xae
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80011d6:	22d4      	movs	r2, #212	@ 0xd4
 80011d8:	21fa      	movs	r1, #250	@ 0xfa
 80011da:	20d4      	movs	r0, #212	@ 0xd4
 80011dc:	f7ff fda4 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 80011e0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2382      	movs	r3, #130	@ 0x82
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f240 13db 	movw	r3, #475	@ 0x1db
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	23c0      	movs	r3, #192	@ 0xc0
 80011f2:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80011f6:	21af      	movs	r1, #175	@ 0xaf
 80011f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80011fc:	f7ff fd94 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001200:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2382      	movs	r3, #130	@ 0x82
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f240 1345 	movw	r3, #325	@ 0x145
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001216:	21af      	movs	r1, #175	@ 0xaf
 8001218:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800121c:	f7ff fd84 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001220:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001236:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800123a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800123e:	f240 200a 	movw	r0, #522	@ 0x20a
 8001242:	f7ff fd71 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8001246:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800125c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001260:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001264:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001268:	f7ff fd5e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 800126c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	23be      	movs	r3, #190	@ 0xbe
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	23c0      	movs	r3, #192	@ 0xc0
 800127e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001282:	21fa      	movs	r1, #250	@ 0xfa
 8001284:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001288:	f7ff fd4e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 800128c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	23be      	movs	r3, #190	@ 0xbe
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	23dc      	movs	r3, #220	@ 0xdc
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	23c0      	movs	r3, #192	@ 0xc0
 800129c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80012a0:	21fa      	movs	r1, #250	@ 0xfa
 80012a2:	20d4      	movs	r0, #212	@ 0xd4
 80012a4:	f7ff fd40 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 80012a8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80012be:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80012c2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012c6:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80012ca:	f7ff fd2d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 80012ce:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80012e4:	22d4      	movs	r2, #212	@ 0xd4
 80012e6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80012ea:	20dc      	movs	r0, #220	@ 0xdc
 80012ec:	f7ff fd1c 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 80012f0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	237c      	movs	r3, #124	@ 0x7c
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001304:	22e8      	movs	r2, #232	@ 0xe8
 8001306:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800130a:	20ca      	movs	r0, #202	@ 0xca
 800130c:	f7ff fd0c 	bl	8000d28 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	230a      	movs	r3, #10
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2346      	movs	r3, #70	@ 0x46
 800131c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001320:	21cd      	movs	r1, #205	@ 0xcd
 8001322:	20fa      	movs	r0, #250	@ 0xfa
 8001324:	f7ff fd4a 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	230a      	movs	r3, #10
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2346      	movs	r3, #70	@ 0x46
 8001334:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001338:	f240 1127 	movw	r1, #295	@ 0x127
 800133c:	20fa      	movs	r0, #250	@ 0xfa
 800133e:	f7ff fd3d 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8001342:	2300      	movs	r3, #0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2307      	movs	r3, #7
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2332      	movs	r3, #50	@ 0x32
 800134c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001350:	21d7      	movs	r1, #215	@ 0xd7
 8001352:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001356:	f7ff fd31 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 800135a:	2300      	movs	r3, #0
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2307      	movs	r3, #7
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2332      	movs	r3, #50	@ 0x32
 8001364:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001368:	f240 1131 	movw	r1, #305	@ 0x131
 800136c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001370:	f7ff fd24 	bl	8000dbc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8001374:	f7ff fd4e 	bl	8000e14 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001378:	2100      	movs	r1, #0
 800137a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800137e:	f7ff fdac 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8001382:	21d7      	movs	r1, #215	@ 0xd7
 8001384:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001388:	f7ff fd69 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fe01 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8001392:	210a      	movs	r1, #10
 8001394:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <end_game+0x378>)
 8001396:	f7ff fe27 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 800139a:	f240 1131 	movw	r1, #305	@ 0x131
 800139e:	f240 1063 	movw	r0, #355	@ 0x163
 80013a2:	f7ff fd5c 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 80013a6:	2104      	movs	r1, #4
 80013a8:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <end_game+0x37c>)
 80013aa:	f7ff fe1d 	bl	8000fe8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80013ae:	211f      	movs	r1, #31
 80013b0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80013b4:	f7ff fd91 	bl	8000eda <RA8875_text_color>
 80013b8:	e006      	b.n	80013c8 <end_game+0x380>
 80013ba:	bf00      	nop
 80013bc:	240000a6 	.word	0x240000a6
 80013c0:	0800e670 	.word	0x0800e670
 80013c4:	0800e67c 	.word	0x0800e67c
	RA8875_text_cursor_position(CENTER_X-143, 20);
 80013c8:	2114      	movs	r1, #20
 80013ca:	f240 1001 	movw	r0, #257	@ 0x101
 80013ce:	f7ff fd46 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f7ff fdde 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 80013d8:	2104      	movs	r1, #4
 80013da:	4849      	ldr	r0, [pc, #292]	@ (8001500 <end_game+0x4b8>)
 80013dc:	f7ff fe04 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 80013e0:	2114      	movs	r1, #20
 80013e2:	f240 1095 	movw	r0, #405	@ 0x195
 80013e6:	f7ff fd3a 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4845      	ldr	r0, [pc, #276]	@ (8001504 <end_game+0x4bc>)
 80013ee:	f7ff fdfb 	bl	8000fe8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80013f2:	211f      	movs	r1, #31
 80013f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013f8:	f7ff fd6f 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff fd2d 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fdc5 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 800140a:	2106      	movs	r1, #6
 800140c:	483e      	ldr	r0, [pc, #248]	@ (8001508 <end_game+0x4c0>)
 800140e:	f7ff fdeb 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 8001412:	2100      	movs	r1, #0
 8001414:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001418:	f7ff fd21 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 800141c:	210b      	movs	r1, #11
 800141e:	483b      	ldr	r0, [pc, #236]	@ (800150c <end_game+0x4c4>)
 8001420:	f7ff fde2 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8001424:	2137      	movs	r1, #55	@ 0x37
 8001426:	200a      	movs	r0, #10
 8001428:	f7ff fd19 	bl	8000e5e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 800142c:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <end_game+0x4c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4938      	ldr	r1, [pc, #224]	@ (8001514 <end_game+0x4cc>)
 8001434:	4618      	mov	r0, r3
 8001436:	f00c fced 	bl	800de14 <siprintf>
	RA8875_text_write(buffer, 3);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2103      	movs	r1, #3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdd2 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8001444:	2137      	movs	r1, #55	@ 0x37
 8001446:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 800144a:	f7ff fd08 	bl	8000e5e <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 800144e:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <end_game+0x4c8>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <end_game+0x4d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd03      	ble.n	8001462 <end_game+0x41a>
 800145a:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <end_game+0x4c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2e      	ldr	r2, [pc, #184]	@ (8001518 <end_game+0x4d0>)
 8001460:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <end_game+0x4d0>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	492a      	ldr	r1, [pc, #168]	@ (8001514 <end_game+0x4cc>)
 800146a:	4618      	mov	r0, r3
 800146c:	f00c fcd2 	bl	800de14 <siprintf>
	RA8875_text_write(buffer, 3);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2103      	movs	r1, #3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fdb7 	bl	8000fe8 <RA8875_text_write>
	RA8875_graphic_mode();
 800147a:	f7ff f879 	bl	8000570 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 800147e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2332      	movs	r3, #50	@ 0x32
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	23df      	movs	r3, #223	@ 0xdf
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2332      	movs	r3, #50	@ 0x32
 800148e:	22ee      	movs	r2, #238	@ 0xee
 8001490:	210a      	movs	r1, #10
 8001492:	20e7      	movs	r0, #231	@ 0xe7
 8001494:	f7ff fc48 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8001498:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2332      	movs	r3, #50	@ 0x32
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	23e6      	movs	r3, #230	@ 0xe6
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2332      	movs	r3, #50	@ 0x32
 80014a8:	22f5      	movs	r2, #245	@ 0xf5
 80014aa:	2155      	movs	r1, #85	@ 0x55
 80014ac:	20ee      	movs	r0, #238	@ 0xee
 80014ae:	f7ff fc3b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 80014b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2332      	movs	r3, #50	@ 0x32
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f240 2337 	movw	r3, #567	@ 0x237
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2332      	movs	r3, #50	@ 0x32
 80014c4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80014c8:	210a      	movs	r1, #10
 80014ca:	f240 202f 	movw	r0, #559	@ 0x22f
 80014ce:	f7ff fc2b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80014d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2332      	movs	r3, #50	@ 0x32
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2332      	movs	r3, #50	@ 0x32
 80014e4:	f240 2221 	movw	r2, #545	@ 0x221
 80014e8:	2155      	movs	r1, #85	@ 0x55
 80014ea:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80014ee:	f7ff fc1b 	bl	8000d28 <RA8875_draw_fill_triangle>

	score = 0;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <end_game+0x4c8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

	return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800e6c0 	.word	0x0800e6c0
 8001504:	0800e6c8 	.word	0x0800e6c8
 8001508:	0800e6d0 	.word	0x0800e6d0
 800150c:	0800e6d8 	.word	0x0800e6d8
 8001510:	240000a8 	.word	0x240000a8
 8001514:	0800e6e4 	.word	0x0800e6e4
 8001518:	240000ac 	.word	0x240000ac

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 ff12 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 f82c 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f000 f9fe 	bl	800192c <MX_GPIO_Init>
  MX_DMA_Init();
 8001530:	f000 f9d4 	bl	80018dc <MX_DMA_Init>
  MX_SPI1_Init();
 8001534:	f000 f8ec 	bl	8001710 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001538:	f000 f940 	bl	80017bc <MX_SPI2_Init>
  MX_FATFS_Init();
 800153c:	f008 ff08 	bl	800a350 <MX_FATFS_Init>
  MX_TIM6_Init();
 8001540:	f000 f994 	bl	800186c <MX_TIM6_Init>
  MX_I2S3_Init();
 8001544:	f000 f89c 	bl	8001680 <MX_I2S3_Init>
  MX_RNG_Init();
 8001548:	f000 f8cc 	bl	80016e4 <MX_RNG_Init>
//  game_matrix();
  	  FATFS fs;
  	  FRESULT fr;


  	  fr = f_mount(&fs, "", 1);
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	2201      	movs	r2, #1
 8001552:	490b      	ldr	r1, [pc, #44]	@ (8001580 <main+0x64>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00b fe71 	bl	800d23c <f_mount>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
//  	  clues();
//  	  char word[25] = {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
  	  char word[25];
  	  read_vec(1, word);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	2001      	movs	r0, #1
 8001566:	f009 fc5b 	bl	800ae20 <read_vec>
  	  fr = f_mount(NULL, "", 0);
 800156a:	2200      	movs	r2, #0
 800156c:	4904      	ldr	r1, [pc, #16]	@ (8001580 <main+0x64>)
 800156e:	2000      	movs	r0, #0
 8001570:	f00b fe64 	bl	800d23c <f_mount>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

//  HAL_Delay(10000);
  while (1)
 800157a:	bf00      	nop
 800157c:	e7fd      	b.n	800157a <main+0x5e>
 800157e:	bf00      	nop
 8001580:	0800e710 	.word	0x0800e710

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	@ 0x70
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	224c      	movs	r2, #76	@ 0x4c
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f00c fc5e 	bl	800de54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2220      	movs	r2, #32
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00c fc58 	bl	800de54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f003 fa97 	bl	8004ad8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <SystemClock_Config+0xf4>)
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <SystemClock_Config+0xf4>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <SystemClock_Config+0xf4>)
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <SystemClock_Config+0xf8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015cc:	4a2b      	ldr	r2, [pc, #172]	@ (800167c <SystemClock_Config+0xf8>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b29      	ldr	r3, [pc, #164]	@ (800167c <SystemClock_Config+0xf8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015e0:	bf00      	nop
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <SystemClock_Config+0xf8>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ee:	d1f8      	bne.n	80015e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80015f0:	2322      	movs	r3, #34	@ 0x22
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f8:	2340      	movs	r3, #64	@ 0x40
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001608:	2304      	movs	r3, #4
 800160a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800160c:	230c      	movs	r3, #12
 800160e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001614:	2302      	movs	r3, #2
 8001616:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 8001618:	2303      	movs	r3, #3
 800161a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800161c:	230c      	movs	r3, #12
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001620:	2300      	movs	r3, #0
 8001622:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fa8d 	bl	8004b4c <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001638:	f000 fa6c 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	233f      	movs	r3, #63	@ 0x3f
 800163e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2303      	movs	r3, #3
 8001642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2102      	movs	r1, #2
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fecd 	bl	8005400 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800166c:	f000 fa52 	bl	8001b14 <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3770      	adds	r7, #112	@ 0x70
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58000400 	.word	0x58000400
 800167c:	58024800 	.word	0x58024800

08001680 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <MX_I2S3_Init+0x5c>)
 8001686:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <MX_I2S3_Init+0x60>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_I2S3_Init+0x5c>)
 800168c:	220a      	movs	r2, #10
 800168e:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_I2S3_Init+0x5c>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_I2S3_Init+0x5c>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_I2S3_Init+0x5c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80016a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_I2S3_Init+0x5c>)
 80016ca:	f003 f8e3 	bl	8004894 <HAL_I2S_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 fa1e 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	240000b0 	.word	0x240000b0
 80016e0:	40003c00 	.word	0x40003c00

080016e4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <MX_RNG_Init+0x24>)
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <MX_RNG_Init+0x28>)
 80016ec:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_RNG_Init+0x24>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_RNG_Init+0x24>)
 80016f6:	f006 fef7 	bl	80084e8 <HAL_RNG_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001700:	f000 fa08 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	24000104 	.word	0x24000104
 800170c:	48021800 	.word	0x48021800

08001710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001716:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <MX_SPI1_Init+0xa8>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800171c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800172a:	2207      	movs	r2, #7
 800172c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800173c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_SPI1_Init+0xa4>)
 80017a0:	f006 ff04 	bl	80085ac <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80017aa:	f000 f9b3 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000118 	.word	0x24000118
 80017b8:	40013000 	.word	0x40013000

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c2:	4a29      	ldr	r2, [pc, #164]	@ (8001868 <MX_SPI2_Init+0xac>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_SPI2_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_SPI2_Init+0xa8>)
 800183e:	2200      	movs	r2, #0
 8001840:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_SPI2_Init+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_SPI2_Init+0xa8>)
 8001850:	f006 feac 	bl	80085ac <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800185a:	f000 f95b 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	240001a0 	.word	0x240001a0
 8001868:	40003800 	.word	0x40003800

0800186c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_TIM6_Init+0x68>)
 800187e:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <MX_TIM6_Init+0x6c>)
 8001880:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <MX_TIM6_Init+0x68>)
 8001884:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001888:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_TIM6_Init+0x68>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <MX_TIM6_Init+0x68>)
 8001892:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001896:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MX_TIM6_Init+0x68>)
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800189e:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_TIM6_Init+0x68>)
 80018a0:	f008 fa45 	bl	8009d2e <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018aa:	f000 f933 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ae:	2320      	movs	r3, #32
 80018b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_TIM6_Init+0x68>)
 80018bc:	f008 fc9c 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80018c6:	f000 f925 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	24000318 	.word	0x24000318
 80018d8:	40001000 	.word	0x40001000

080018dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_DMA_Init+0x4c>)
 80018e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <MX_DMA_Init+0x4c>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <MX_DMA_Init+0x4c>)
 80018f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	200b      	movs	r0, #11
 8001906:	f000 febe 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800190a:	200b      	movs	r0, #11
 800190c:	f000 fed5 	bl	80026ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	200c      	movs	r0, #12
 8001916:	f000 feb6 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800191a:	200c      	movs	r0, #12
 800191c:	f000 fecd 	bl	80026ba <HAL_NVIC_EnableIRQ>

}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58024400 	.word	0x58024400

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	4a6c      	ldr	r2, [pc, #432]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001952:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	4a65      	ldr	r2, [pc, #404]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001970:	4b62      	ldr	r3, [pc, #392]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a5d      	ldr	r2, [pc, #372]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199c:	4b57      	ldr	r3, [pc, #348]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	4a56      	ldr	r2, [pc, #344]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	4b50      	ldr	r3, [pc, #320]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ca:	4b4c      	ldr	r3, [pc, #304]	@ (8001afc <MX_GPIO_Init+0x1d0>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2110      	movs	r1, #16
 80019dc:	4848      	ldr	r0, [pc, #288]	@ (8001b00 <MX_GPIO_Init+0x1d4>)
 80019de:	f002 ff3f 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2120      	movs	r1, #32
 80019e6:	4847      	ldr	r0, [pc, #284]	@ (8001b04 <MX_GPIO_Init+0x1d8>)
 80019e8:	f002 ff3a 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019f2:	4845      	ldr	r0, [pc, #276]	@ (8001b08 <MX_GPIO_Init+0x1dc>)
 80019f4:	f002 ff34 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	21e0      	movs	r1, #224	@ 0xe0
 80019fc:	4843      	ldr	r0, [pc, #268]	@ (8001b0c <MX_GPIO_Init+0x1e0>)
 80019fe:	f002 ff2f 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a08:	483f      	ldr	r0, [pc, #252]	@ (8001b08 <MX_GPIO_Init+0x1dc>)
 8001a0a:	f002 ff29 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2103      	movs	r1, #3
 8001a12:	483f      	ldr	r0, [pc, #252]	@ (8001b10 <MX_GPIO_Init+0x1e4>)
 8001a14:	f002 ff24 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4834      	ldr	r0, [pc, #208]	@ (8001b00 <MX_GPIO_Init+0x1d4>)
 8001a30:	f002 fd66 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8001a34:	2310      	movs	r3, #16
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	482f      	ldr	r0, [pc, #188]	@ (8001b04 <MX_GPIO_Init+0x1d8>)
 8001a48:	f002 fd5a 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4828      	ldr	r0, [pc, #160]	@ (8001b04 <MX_GPIO_Init+0x1d8>)
 8001a64:	f002 fd4c 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <MX_GPIO_Init+0x1dc>)
 8001a82:	f002 fd3d 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001a86:	231f      	movs	r3, #31
 8001a88:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	481c      	ldr	r0, [pc, #112]	@ (8001b0c <MX_GPIO_Init+0x1e0>)
 8001a9a:	f002 fd31 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8001a9e:	23e0      	movs	r3, #224	@ 0xe0
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4815      	ldr	r0, [pc, #84]	@ (8001b0c <MX_GPIO_Init+0x1e0>)
 8001ab6:	f002 fd23 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8001aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <MX_GPIO_Init+0x1dc>)
 8001ad4:	f002 fd14 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4808      	ldr	r0, [pc, #32]	@ (8001b10 <MX_GPIO_Init+0x1e4>)
 8001af0:	f002 fd06 	bl	8004500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	@ 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58020000 	.word	0x58020000
 8001b04:	58020800 	.word	0x58020800
 8001b08:	58020400 	.word	0x58020400
 8001b0c:	58020c00 	.word	0x58020c00
 8001b10:	58021000 	.word	0x58021000

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <Error_Handler+0x8>

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_MspInit+0x30>)
 8001b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x30>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x30>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58024400 	.word	0x58024400

08001b54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0bc      	sub	sp, #240	@ 0xf0
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	22c0      	movs	r2, #192	@ 0xc0
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00c f96d 	bl	800de54 <memset>
  if(hi2s->Instance==SPI3)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8001cac <HAL_I2S_MspInit+0x158>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	f040 808f 	bne.w	8001ca4 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 ffa6 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001ba6:	f7ff ffb5 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001baa:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bce:	4a38      	ldr	r2, [pc, #224]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd8:	4b35      	ldr	r3, [pc, #212]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bec:	4a30      	ldr	r2, [pc, #192]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0a:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_I2S_MspInit+0x15c>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c22:	2304      	movs	r3, #4
 8001c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c44:	4619      	mov	r1, r3
 8001c46:	481b      	ldr	r0, [pc, #108]	@ (8001cb4 <HAL_I2S_MspInit+0x160>)
 8001c48:	f002 fc5a 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c66:	2306      	movs	r3, #6
 8001c68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	@ (8001cb8 <HAL_I2S_MspInit+0x164>)
 8001c74:	f002 fc44 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c92:	2306      	movs	r3, #6
 8001c94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <HAL_I2S_MspInit+0x168>)
 8001ca0:	f002 fc2e 	bl	8004500 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ca4:	bf00      	nop
 8001ca6:	37f0      	adds	r7, #240	@ 0xf0
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40003c00 	.word	0x40003c00
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	58020400 	.word	0x58020400
 8001cb8:	58020000 	.word	0x58020000
 8001cbc:	58020800 	.word	0x58020800

08001cc0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0b4      	sub	sp, #208	@ 0xd0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	22c0      	movs	r2, #192	@ 0xc0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00c f8bf 	bl	800de54 <memset>
  if(hrng->Instance==RNG)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <HAL_RNG_MspInit+0x6c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d121      	bne.n	8001d24 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001ce0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fef8 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001d02:	f7ff ff07 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RNG_MspInit+0x70>)
 8001d08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001d0c:	4a08      	ldr	r2, [pc, #32]	@ (8001d30 <HAL_RNG_MspInit+0x70>)
 8001d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d12:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RNG_MspInit+0x70>)
 8001d18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001d24:	bf00      	nop
 8001d26:	37d0      	adds	r7, #208	@ 0xd0
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	48021800 	.word	0x48021800
 8001d30:	58024400 	.word	0x58024400

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0be      	sub	sp, #248	@ 0xf8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	22c0      	movs	r2, #192	@ 0xc0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00c f87d 	bl	800de54 <memset>
  if(hspi->Instance==SPI1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4aa2      	ldr	r2, [pc, #648]	@ (8001fe8 <HAL_SPI_MspInit+0x2b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d16a      	bne.n	8001e3a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 feb6 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001d86:	f7ff fec5 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8a:	4b98      	ldr	r3, [pc, #608]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d90:	4a96      	ldr	r2, [pc, #600]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001d92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d9a:	4b94      	ldr	r3, [pc, #592]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b90      	ldr	r3, [pc, #576]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a8f      	ldr	r2, [pc, #572]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b8c      	ldr	r3, [pc, #560]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	4b89      	ldr	r3, [pc, #548]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a87      	ldr	r2, [pc, #540]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b85      	ldr	r3, [pc, #532]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de4:	23c0      	movs	r3, #192	@ 0xc0
 8001de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4879      	ldr	r0, [pc, #484]	@ (8001ff0 <HAL_SPI_MspInit+0x2bc>)
 8001e0a:	f002 fb79 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e26:	2305      	movs	r3, #5
 8001e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4870      	ldr	r0, [pc, #448]	@ (8001ff4 <HAL_SPI_MspInit+0x2c0>)
 8001e34:	f002 fb64 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e38:	e0d2      	b.n	8001fe0 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff8 <HAL_SPI_MspInit+0x2c4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	f040 80cd 	bne.w	8001fe0 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fe45 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001e68:	f7ff fe54 	bl	8001b14 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e72:	4a5e      	ldr	r2, [pc, #376]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b58      	ldr	r3, [pc, #352]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e90:	4a56      	ldr	r2, [pc, #344]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e9a:	4b54      	ldr	r3, [pc, #336]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b50      	ldr	r3, [pc, #320]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	4a4f      	ldr	r2, [pc, #316]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <HAL_SPI_MspInit+0x2b8>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4844      	ldr	r0, [pc, #272]	@ (8001ffc <HAL_SPI_MspInit+0x2c8>)
 8001eec:	f002 fb08 	bl	8004500 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4837      	ldr	r0, [pc, #220]	@ (8001ff4 <HAL_SPI_MspInit+0x2c0>)
 8001f18:	f002 faf2 	bl	8004500 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001f1c:	4b38      	ldr	r3, [pc, #224]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f1e:	4a39      	ldr	r2, [pc, #228]	@ (8002004 <HAL_SPI_MspInit+0x2d0>)
 8001f20:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f24:	2227      	movs	r2, #39	@ 0x27
 8001f26:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f28:	4b35      	ldr	r3, [pc, #212]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2e:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f34:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f54:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f5a:	4829      	ldr	r0, [pc, #164]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f5c:	f000 fbc8 	bl	80026f0 <HAL_DMA_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_SPI_MspInit+0x236>
      Error_Handler();
 8001f66:	f7ff fdd5 	bl	8001b14 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f6e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f70:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <HAL_SPI_MspInit+0x2cc>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f78:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_SPI_MspInit+0x2d8>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f7e:	2228      	movs	r2, #40	@ 0x28
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f82:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f84:	2240      	movs	r2, #64	@ 0x40
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f94:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001fb4:	4814      	ldr	r0, [pc, #80]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001fb6:	f000 fb9b 	bl	80026f0 <HAL_DMA_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8001fc0:	f7ff fda8 	bl	8001b14 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001fc8:	679a      	str	r2, [r3, #120]	@ 0x78
 8001fca:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_SPI_MspInit+0x2d4>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2024      	movs	r0, #36	@ 0x24
 8001fd6:	f000 fb56 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fda:	2024      	movs	r0, #36	@ 0x24
 8001fdc:	f000 fb6d 	bl	80026ba <HAL_NVIC_EnableIRQ>
}
 8001fe0:	bf00      	nop
 8001fe2:	37f8      	adds	r7, #248	@ 0xf8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40013000 	.word	0x40013000
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020000 	.word	0x58020000
 8001ff4:	58020400 	.word	0x58020400
 8001ff8:	40003800 	.word	0x40003800
 8001ffc:	58020800 	.word	0x58020800
 8002000:	24000228 	.word	0x24000228
 8002004:	40020010 	.word	0x40020010
 8002008:	240002a0 	.word	0x240002a0
 800200c:	40020028 	.word	0x40020028

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <HAL_TIM_Base_MspInit+0x48>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d116      	bne.n	8002050 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002028:	4a0c      	ldr	r2, [pc, #48]	@ (800205c <HAL_TIM_Base_MspInit+0x4c>)
 800202a:	f043 0310 	orr.w	r3, r3, #16
 800202e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	2036      	movs	r0, #54	@ 0x36
 8002046:	f000 fb1e 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800204a:	2036      	movs	r0, #54	@ 0x36
 800204c:	f000 fb35 	bl	80026ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40001000 	.word	0x40001000
 800205c:	58024400 	.word	0x58024400

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <MemManage_Handler+0x4>

08002078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <UsageFault_Handler+0x4>

08002088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b6:	f000 f9bb 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <DMA1_Stream0_IRQHandler+0x10>)
 80020c6:	f001 f8b5 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24000228 	.word	0x24000228

080020d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA1_Stream1_IRQHandler+0x10>)
 80020da:	f001 f8ab 	bl	8003234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	240002a0 	.word	0x240002a0

080020e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <SPI2_IRQHandler+0x10>)
 80020ee:	f007 fb1b 	bl	8009728 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	240001a0 	.word	0x240001a0

080020fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002102:	481b      	ldr	r0, [pc, #108]	@ (8002170 <TIM6_DAC_IRQHandler+0x74>)
 8002104:	f007 fe99 	bl	8009e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <TIM6_DAC_IRQHandler+0x78>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <TIM6_DAC_IRQHandler+0x78>)
 8002112:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <TIM6_DAC_IRQHandler+0x78>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4916      	ldr	r1, [pc, #88]	@ (8002178 <TIM6_DAC_IRQHandler+0x7c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f00b fe78 	bl	800de14 <siprintf>
  RA8875_text_mode();
 8002124:	f7fe fe76 	bl	8000e14 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8002128:	2132      	movs	r1, #50	@ 0x32
 800212a:	20c8      	movs	r0, #200	@ 0xc8
 800212c:	f7fe fe97 	bl	8000e5e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002130:	211f      	movs	r1, #31
 8002132:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002136:	f7fe fed0 	bl	8000eda <RA8875_text_color>
  RA8875_text_scale(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe ff2a 	bl	8000f94 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ff4f 	bl	8000fe8 <RA8875_text_write>
  RA8875_graphic_mode();
 800214a:	f7fe fa11 	bl	8000570 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <TIM6_DAC_IRQHandler+0x78>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <TIM6_DAC_IRQHandler+0x78>)
 8002158:	220a      	movs	r2, #10
 800215a:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 800215c:	4804      	ldr	r0, [pc, #16]	@ (8002170 <TIM6_DAC_IRQHandler+0x74>)
 800215e:	f007 fe3d 	bl	8009ddc <HAL_TIM_Base_Stop_IT>
	  end_game();
 8002162:	f7fe ff71 	bl	8001048 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24000318 	.word	0x24000318
 8002174:	24000000 	.word	0x24000000
 8002178:	0800e714 	.word	0x0800e714

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f00b fe6a 	bl	800de84 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	24080000 	.word	0x24080000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	24000364 	.word	0x24000364
 80021e4:	24000700 	.word	0x24000700

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021ec:	4b37      	ldr	r3, [pc, #220]	@ (80022cc <SystemInit+0xe4>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	4a36      	ldr	r2, [pc, #216]	@ (80022cc <SystemInit+0xe4>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <SystemInit+0xe8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	2b06      	cmp	r3, #6
 8002206:	d807      	bhi.n	8002218 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002208:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <SystemInit+0xe8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 030f 	bic.w	r3, r3, #15
 8002210:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <SystemInit+0xe8>)
 8002212:	f043 0307 	orr.w	r3, r3, #7
 8002216:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002218:	4b2e      	ldr	r3, [pc, #184]	@ (80022d4 <SystemInit+0xec>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2d      	ldr	r2, [pc, #180]	@ (80022d4 <SystemInit+0xec>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002224:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <SystemInit+0xec>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <SystemInit+0xec>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4929      	ldr	r1, [pc, #164]	@ (80022d4 <SystemInit+0xec>)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <SystemInit+0xf0>)
 8002232:	4013      	ands	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002236:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <SystemInit+0xe8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002242:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <SystemInit+0xe8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 030f 	bic.w	r3, r3, #15
 800224a:	4a21      	ldr	r2, [pc, #132]	@ (80022d0 <SystemInit+0xe8>)
 800224c:	f043 0307 	orr.w	r3, r3, #7
 8002250:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <SystemInit+0xec>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <SystemInit+0xec>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <SystemInit+0xec>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <SystemInit+0xec>)
 8002266:	4a1d      	ldr	r2, [pc, #116]	@ (80022dc <SystemInit+0xf4>)
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <SystemInit+0xec>)
 800226c:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <SystemInit+0xf8>)
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <SystemInit+0xec>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <SystemInit+0xfc>)
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <SystemInit+0xec>)
 8002278:	2200      	movs	r2, #0
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800227c:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <SystemInit+0xec>)
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <SystemInit+0xfc>)
 8002280:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <SystemInit+0xec>)
 8002284:	2200      	movs	r2, #0
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <SystemInit+0xec>)
 800228a:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <SystemInit+0xfc>)
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <SystemInit+0xec>)
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <SystemInit+0xec>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <SystemInit+0xec>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <SystemInit+0xec>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <SystemInit+0x100>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <SystemInit+0x104>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b2:	d202      	bcs.n	80022ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <SystemInit+0x108>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <SystemInit+0x10c>)
 80022bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00
 80022d0:	52002000 	.word	0x52002000
 80022d4:	58024400 	.word	0x58024400
 80022d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80022dc:	02020200 	.word	0x02020200
 80022e0:	01ff0000 	.word	0x01ff0000
 80022e4:	01010280 	.word	0x01010280
 80022e8:	5c001000 	.word	0x5c001000
 80022ec:	ffff0000 	.word	0xffff0000
 80022f0:	51008108 	.word	0x51008108
 80022f4:	52004000 	.word	0x52004000

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022fc:	f7ff ff74 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	@ (8002338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	@ (8002344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002326:	f00b fdb3 	bl	800de90 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 800232a:	f7ff f8f7 	bl	800151c <main>
  bx  lr
 800232e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002338:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800233c:	0800ec14 	.word	0x0800ec14
  ldr r2, =_sbss
 8002340:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002344:	240006fc 	.word	0x240006fc

08002348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC3_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002352:	2003      	movs	r0, #3
 8002354:	f000 f98c 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002358:	f003 fa08 	bl	800576c <HAL_RCC_GetSysClockFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_Init+0x68>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	4913      	ldr	r1, [pc, #76]	@ (80023b8 <HAL_Init+0x6c>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_Init+0x68>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HAL_Init+0x6c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a0b      	ldr	r2, [pc, #44]	@ (80023bc <HAL_Init+0x70>)
 800238e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002390:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_Init+0x74>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002396:	200f      	movs	r0, #15
 8002398:	f000 f814 	bl	80023c4 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e002      	b.n	80023ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023a6:	f7ff fbbb 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	58024400 	.word	0x58024400
 80023b8:	0800e778 	.word	0x0800e778
 80023bc:	24000008 	.word	0x24000008
 80023c0:	24000004 	.word	0x24000004

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_InitTick+0x60>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <HAL_InitTick+0x64>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_InitTick+0x60>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f971 	bl	80026d6 <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f000 f93b 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	@ (800242c <HAL_InitTick+0x68>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	24000010 	.word	0x24000010
 8002428:	24000004 	.word	0x24000004
 800242c:	2400000c 	.word	0x2400000c

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	24000010 	.word	0x24000010
 8002454:	24000368 	.word	0x24000368

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	24000368 	.word	0x24000368

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	24000010 	.word	0x24000010

080024b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_GetREVID+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0c1b      	lsrs	r3, r3, #16
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	5c001000 	.word	0x5c001000

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <__NVIC_SetPriorityGrouping+0x40>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <__NVIC_SetPriorityGrouping+0x40>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00
 8002514:	05fa0000 	.word	0x05fa0000

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	@ (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	@ (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	@ (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff29 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002694:	f7ff ff40 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f7ff ff90 	bl	80025c4 <NVIC_EncodePriority>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff5f 	bl	8002570 <__NVIC_SetPriority>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff33 	bl	8002534 <__NVIC_EnableIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffa4 	bl	800262c <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff feae 	bl	8002458 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e316      	b.n	8002d36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a66      	ldr	r2, [pc, #408]	@ (80028a8 <HAL_DMA_Init+0x1b8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d04a      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a65      	ldr	r2, [pc, #404]	@ (80028ac <HAL_DMA_Init+0x1bc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d045      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <HAL_DMA_Init+0x1c0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d040      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a62      	ldr	r2, [pc, #392]	@ (80028b4 <HAL_DMA_Init+0x1c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d03b      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a60      	ldr	r2, [pc, #384]	@ (80028b8 <HAL_DMA_Init+0x1c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d036      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5f      	ldr	r2, [pc, #380]	@ (80028bc <HAL_DMA_Init+0x1cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d031      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5d      	ldr	r2, [pc, #372]	@ (80028c0 <HAL_DMA_Init+0x1d0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02c      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5c      	ldr	r2, [pc, #368]	@ (80028c4 <HAL_DMA_Init+0x1d4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d027      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <HAL_DMA_Init+0x1d8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d022      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a59      	ldr	r2, [pc, #356]	@ (80028cc <HAL_DMA_Init+0x1dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01d      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a57      	ldr	r2, [pc, #348]	@ (80028d0 <HAL_DMA_Init+0x1e0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d018      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_DMA_Init+0x1e4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_DMA_Init+0x1e8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a53      	ldr	r2, [pc, #332]	@ (80028dc <HAL_DMA_Init+0x1ec>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a51      	ldr	r2, [pc, #324]	@ (80028e0 <HAL_DMA_Init+0x1f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Init+0xb8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a50      	ldr	r2, [pc, #320]	@ (80028e4 <HAL_DMA_Init+0x1f4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_DMA_Init+0xbc>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_DMA_Init+0xbe>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 813b 	beq.w	8002a2a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a37      	ldr	r2, [pc, #220]	@ (80028a8 <HAL_DMA_Init+0x1b8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d04a      	beq.n	8002864 <HAL_DMA_Init+0x174>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a36      	ldr	r2, [pc, #216]	@ (80028ac <HAL_DMA_Init+0x1bc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d045      	beq.n	8002864 <HAL_DMA_Init+0x174>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a34      	ldr	r2, [pc, #208]	@ (80028b0 <HAL_DMA_Init+0x1c0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d040      	beq.n	8002864 <HAL_DMA_Init+0x174>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a33      	ldr	r2, [pc, #204]	@ (80028b4 <HAL_DMA_Init+0x1c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d03b      	beq.n	8002864 <HAL_DMA_Init+0x174>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a31      	ldr	r2, [pc, #196]	@ (80028b8 <HAL_DMA_Init+0x1c8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d036      	beq.n	8002864 <HAL_DMA_Init+0x174>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a30      	ldr	r2, [pc, #192]	@ (80028bc <HAL_DMA_Init+0x1cc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d031      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <HAL_DMA_Init+0x1d0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02c      	beq.n	8002864 <HAL_DMA_Init+0x174>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2d      	ldr	r2, [pc, #180]	@ (80028c4 <HAL_DMA_Init+0x1d4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d027      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2b      	ldr	r2, [pc, #172]	@ (80028c8 <HAL_DMA_Init+0x1d8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d022      	beq.n	8002864 <HAL_DMA_Init+0x174>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <HAL_DMA_Init+0x1dc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01d      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <HAL_DMA_Init+0x1e0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d018      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <HAL_DMA_Init+0x1e4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_DMA_Init+0x174>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <HAL_DMA_Init+0x1e8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00e      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a24      	ldr	r2, [pc, #144]	@ (80028dc <HAL_DMA_Init+0x1ec>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_DMA_Init+0x174>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <HAL_DMA_Init+0x1f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_DMA_Init+0x174>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_DMA_Init+0x1f4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d108      	bne.n	8002876 <HAL_DMA_Init+0x186>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e007      	b.n	8002886 <HAL_DMA_Init+0x196>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002886:	e02f      	b.n	80028e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002888:	f7ff fde6 	bl	8002458 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d928      	bls.n	80028e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e246      	b.n	8002d36 <HAL_DMA_Init+0x646>
 80028a8:	40020010 	.word	0x40020010
 80028ac:	40020028 	.word	0x40020028
 80028b0:	40020040 	.word	0x40020040
 80028b4:	40020058 	.word	0x40020058
 80028b8:	40020070 	.word	0x40020070
 80028bc:	40020088 	.word	0x40020088
 80028c0:	400200a0 	.word	0x400200a0
 80028c4:	400200b8 	.word	0x400200b8
 80028c8:	40020410 	.word	0x40020410
 80028cc:	40020428 	.word	0x40020428
 80028d0:	40020440 	.word	0x40020440
 80028d4:	40020458 	.word	0x40020458
 80028d8:	40020470 	.word	0x40020470
 80028dc:	40020488 	.word	0x40020488
 80028e0:	400204a0 	.word	0x400204a0
 80028e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1c8      	bne.n	8002888 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4b83      	ldr	r3, [pc, #524]	@ (8002b10 <HAL_DMA_Init+0x420>)
 8002902:	4013      	ands	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800290e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2b04      	cmp	r3, #4
 800293a:	d107      	bne.n	800294c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	4313      	orrs	r3, r2
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800294c:	4b71      	ldr	r3, [pc, #452]	@ (8002b14 <HAL_DMA_Init+0x424>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b71      	ldr	r3, [pc, #452]	@ (8002b18 <HAL_DMA_Init+0x428>)
 8002952:	4013      	ands	r3, r2
 8002954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002958:	d328      	bcc.n	80029ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b28      	cmp	r3, #40	@ 0x28
 8002960:	d903      	bls.n	800296a <HAL_DMA_Init+0x27a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b2e      	cmp	r3, #46	@ 0x2e
 8002968:	d917      	bls.n	800299a <HAL_DMA_Init+0x2aa>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002970:	d903      	bls.n	800297a <HAL_DMA_Init+0x28a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b42      	cmp	r3, #66	@ 0x42
 8002978:	d90f      	bls.n	800299a <HAL_DMA_Init+0x2aa>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b46      	cmp	r3, #70	@ 0x46
 8002980:	d903      	bls.n	800298a <HAL_DMA_Init+0x29a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b48      	cmp	r3, #72	@ 0x48
 8002988:	d907      	bls.n	800299a <HAL_DMA_Init+0x2aa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002990:	d905      	bls.n	800299e <HAL_DMA_Init+0x2ae>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b52      	cmp	r3, #82	@ 0x52
 8002998:	d801      	bhi.n	800299e <HAL_DMA_Init+0x2ae>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_DMA_Init+0x2b0>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d117      	bne.n	8002a06 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f001 fbff 	bl	80041ec <DMA_CheckFifoParam>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e197      	b.n	8002d36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 fb3a 	bl	8004088 <DMA_CalcBaseAndBitshift>
 8002a14:	4603      	mov	r3, r0
 8002a16:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	223f      	movs	r2, #63	@ 0x3f
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e0cd      	b.n	8002bc6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b1c <HAL_DMA_Init+0x42c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a39      	ldr	r2, [pc, #228]	@ (8002b20 <HAL_DMA_Init+0x430>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a38      	ldr	r2, [pc, #224]	@ (8002b24 <HAL_DMA_Init+0x434>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a36      	ldr	r2, [pc, #216]	@ (8002b28 <HAL_DMA_Init+0x438>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a35      	ldr	r2, [pc, #212]	@ (8002b2c <HAL_DMA_Init+0x43c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <HAL_DMA_Init+0x440>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_DMA_Init+0x444>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_Init+0x38a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <HAL_DMA_Init+0x448>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_DMA_Init+0x38e>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_Init+0x390>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8097 	beq.w	8002bb4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <HAL_DMA_Init+0x42c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d021      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <HAL_DMA_Init+0x430>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01c      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	@ (8002b24 <HAL_DMA_Init+0x434>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d017      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <HAL_DMA_Init+0x438>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d012      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <HAL_DMA_Init+0x43c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <HAL_DMA_Init+0x440>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d008      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b34 <HAL_DMA_Init+0x444>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_Init+0x3e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <HAL_DMA_Init+0x448>)
 8002ad2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_DMA_Init+0x44c>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d021      	beq.n	8002b40 <HAL_DMA_Init+0x450>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b80      	cmp	r3, #128	@ 0x80
 8002b02:	d102      	bne.n	8002b0a <HAL_DMA_Init+0x41a>
 8002b04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b08:	e01b      	b.n	8002b42 <HAL_DMA_Init+0x452>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e019      	b.n	8002b42 <HAL_DMA_Init+0x452>
 8002b0e:	bf00      	nop
 8002b10:	fe10803f 	.word	0xfe10803f
 8002b14:	5c001000 	.word	0x5c001000
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	58025408 	.word	0x58025408
 8002b20:	5802541c 	.word	0x5802541c
 8002b24:	58025430 	.word	0x58025430
 8002b28:	58025444 	.word	0x58025444
 8002b2c:	58025458 	.word	0x58025458
 8002b30:	5802546c 	.word	0x5802546c
 8002b34:	58025480 	.word	0x58025480
 8002b38:	58025494 	.word	0x58025494
 8002b3c:	fffe000f 	.word	0xfffe000f
 8002b40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b6e      	ldr	r3, [pc, #440]	@ (8002d40 <HAL_DMA_Init+0x650>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_DMA_Init+0x654>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f001 fa75 	bl	8004088 <DMA_CalcBaseAndBitshift>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e008      	b.n	8002bc6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2240      	movs	r2, #64	@ 0x40
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0b7      	b.n	8002d36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5f      	ldr	r2, [pc, #380]	@ (8002d48 <HAL_DMA_Init+0x658>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d072      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d4c <HAL_DMA_Init+0x65c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d06d      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	@ (8002d50 <HAL_DMA_Init+0x660>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d068      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d54 <HAL_DMA_Init+0x664>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d063      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a59      	ldr	r2, [pc, #356]	@ (8002d58 <HAL_DMA_Init+0x668>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	@ (8002d5c <HAL_DMA_Init+0x66c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d059      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a56      	ldr	r2, [pc, #344]	@ (8002d60 <HAL_DMA_Init+0x670>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d054      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a54      	ldr	r2, [pc, #336]	@ (8002d64 <HAL_DMA_Init+0x674>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a53      	ldr	r2, [pc, #332]	@ (8002d68 <HAL_DMA_Init+0x678>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a51      	ldr	r2, [pc, #324]	@ (8002d6c <HAL_DMA_Init+0x67c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a50      	ldr	r2, [pc, #320]	@ (8002d70 <HAL_DMA_Init+0x680>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4e      	ldr	r2, [pc, #312]	@ (8002d74 <HAL_DMA_Init+0x684>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a4d      	ldr	r2, [pc, #308]	@ (8002d78 <HAL_DMA_Init+0x688>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_DMA_Init+0x68c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4a      	ldr	r2, [pc, #296]	@ (8002d80 <HAL_DMA_Init+0x690>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a48      	ldr	r2, [pc, #288]	@ (8002d84 <HAL_DMA_Init+0x694>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a47      	ldr	r2, [pc, #284]	@ (8002d88 <HAL_DMA_Init+0x698>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a45      	ldr	r2, [pc, #276]	@ (8002d8c <HAL_DMA_Init+0x69c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a44      	ldr	r2, [pc, #272]	@ (8002d90 <HAL_DMA_Init+0x6a0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a42      	ldr	r2, [pc, #264]	@ (8002d94 <HAL_DMA_Init+0x6a4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a41      	ldr	r2, [pc, #260]	@ (8002d98 <HAL_DMA_Init+0x6a8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d9c <HAL_DMA_Init+0x6ac>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8002da0 <HAL_DMA_Init+0x6b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Init+0x5c6>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8002da4 <HAL_DMA_Init+0x6b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Init+0x5ca>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Init+0x5cc>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d032      	beq.n	8002d26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 fb0f 	bl	80042e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b80      	cmp	r3, #128	@ 0x80
 8002ccc:	d102      	bne.n	8002cd4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_DMA_Init+0x624>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d80c      	bhi.n	8002d14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f001 fb8c 	bl	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e008      	b.n	8002d26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	a7fdabf8 	.word	0xa7fdabf8
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	40020010 	.word	0x40020010
 8002d4c:	40020028 	.word	0x40020028
 8002d50:	40020040 	.word	0x40020040
 8002d54:	40020058 	.word	0x40020058
 8002d58:	40020070 	.word	0x40020070
 8002d5c:	40020088 	.word	0x40020088
 8002d60:	400200a0 	.word	0x400200a0
 8002d64:	400200b8 	.word	0x400200b8
 8002d68:	40020410 	.word	0x40020410
 8002d6c:	40020428 	.word	0x40020428
 8002d70:	40020440 	.word	0x40020440
 8002d74:	40020458 	.word	0x40020458
 8002d78:	40020470 	.word	0x40020470
 8002d7c:	40020488 	.word	0x40020488
 8002d80:	400204a0 	.word	0x400204a0
 8002d84:	400204b8 	.word	0x400204b8
 8002d88:	58025408 	.word	0x58025408
 8002d8c:	5802541c 	.word	0x5802541c
 8002d90:	58025430 	.word	0x58025430
 8002d94:	58025444 	.word	0x58025444
 8002d98:	58025458 	.word	0x58025458
 8002d9c:	5802546c 	.word	0x5802546c
 8002da0:	58025480 	.word	0x58025480
 8002da4:	58025494 	.word	0x58025494

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e237      	b.n	800322a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2280      	movs	r2, #128	@ 0x80
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e22c      	b.n	800322a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f48 <HAL_DMA_Abort_IT+0x1a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d04a      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5b      	ldr	r2, [pc, #364]	@ (8002f4c <HAL_DMA_Abort_IT+0x1a4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d045      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a59      	ldr	r2, [pc, #356]	@ (8002f50 <HAL_DMA_Abort_IT+0x1a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d040      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a58      	ldr	r2, [pc, #352]	@ (8002f54 <HAL_DMA_Abort_IT+0x1ac>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d03b      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <HAL_DMA_Abort_IT+0x1b0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d036      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a55      	ldr	r2, [pc, #340]	@ (8002f5c <HAL_DMA_Abort_IT+0x1b4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d031      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a53      	ldr	r2, [pc, #332]	@ (8002f60 <HAL_DMA_Abort_IT+0x1b8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02c      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_DMA_Abort_IT+0x1bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d027      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a50      	ldr	r2, [pc, #320]	@ (8002f68 <HAL_DMA_Abort_IT+0x1c0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d022      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f6c <HAL_DMA_Abort_IT+0x1c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d01d      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4d      	ldr	r2, [pc, #308]	@ (8002f70 <HAL_DMA_Abort_IT+0x1c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d018      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a4c      	ldr	r2, [pc, #304]	@ (8002f74 <HAL_DMA_Abort_IT+0x1cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f78 <HAL_DMA_Abort_IT+0x1d0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a49      	ldr	r2, [pc, #292]	@ (8002f7c <HAL_DMA_Abort_IT+0x1d4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a47      	ldr	r2, [pc, #284]	@ (8002f80 <HAL_DMA_Abort_IT+0x1d8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xc8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a46      	ldr	r2, [pc, #280]	@ (8002f84 <HAL_DMA_Abort_IT+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_DMA_Abort_IT+0xcc>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_DMA_Abort_IT+0xce>
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8086 	beq.w	8002f88 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	@ (8002f48 <HAL_DMA_Abort_IT+0x1a0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d04a      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2e      	ldr	r2, [pc, #184]	@ (8002f4c <HAL_DMA_Abort_IT+0x1a4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d045      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f50 <HAL_DMA_Abort_IT+0x1a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d040      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f54 <HAL_DMA_Abort_IT+0x1ac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d03b      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	@ (8002f58 <HAL_DMA_Abort_IT+0x1b0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d036      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a28      	ldr	r2, [pc, #160]	@ (8002f5c <HAL_DMA_Abort_IT+0x1b4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d031      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_DMA_Abort_IT+0x1b8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d02c      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a25      	ldr	r2, [pc, #148]	@ (8002f64 <HAL_DMA_Abort_IT+0x1bc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d027      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_DMA_Abort_IT+0x1c0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a22      	ldr	r2, [pc, #136]	@ (8002f6c <HAL_DMA_Abort_IT+0x1c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01d      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a20      	ldr	r2, [pc, #128]	@ (8002f70 <HAL_DMA_Abort_IT+0x1c8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d018      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <HAL_DMA_Abort_IT+0x1cc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <HAL_DMA_Abort_IT+0x1d0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <HAL_DMA_Abort_IT+0x1d4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	@ (8002f80 <HAL_DMA_Abort_IT+0x1d8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d004      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x17c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <HAL_DMA_Abort_IT+0x1dc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d108      	bne.n	8002f36 <HAL_DMA_Abort_IT+0x18e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e178      	b.n	8003228 <HAL_DMA_Abort_IT+0x480>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e16f      	b.n	8003228 <HAL_DMA_Abort_IT+0x480>
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	40020040 	.word	0x40020040
 8002f54:	40020058 	.word	0x40020058
 8002f58:	40020070 	.word	0x40020070
 8002f5c:	40020088 	.word	0x40020088
 8002f60:	400200a0 	.word	0x400200a0
 8002f64:	400200b8 	.word	0x400200b8
 8002f68:	40020410 	.word	0x40020410
 8002f6c:	40020428 	.word	0x40020428
 8002f70:	40020440 	.word	0x40020440
 8002f74:	40020458 	.word	0x40020458
 8002f78:	40020470 	.word	0x40020470
 8002f7c:	40020488 	.word	0x40020488
 8002f80:	400204a0 	.word	0x400204a0
 8002f84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020e 	bic.w	r2, r2, #14
 8002f96:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6c      	ldr	r2, [pc, #432]	@ (8003150 <HAL_DMA_Abort_IT+0x3a8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6b      	ldr	r2, [pc, #428]	@ (8003154 <HAL_DMA_Abort_IT+0x3ac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d045      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a69      	ldr	r2, [pc, #420]	@ (8003158 <HAL_DMA_Abort_IT+0x3b0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d040      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a68      	ldr	r2, [pc, #416]	@ (800315c <HAL_DMA_Abort_IT+0x3b4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d03b      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a66      	ldr	r2, [pc, #408]	@ (8003160 <HAL_DMA_Abort_IT+0x3b8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d036      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a65      	ldr	r2, [pc, #404]	@ (8003164 <HAL_DMA_Abort_IT+0x3bc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a63      	ldr	r2, [pc, #396]	@ (8003168 <HAL_DMA_Abort_IT+0x3c0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a62      	ldr	r2, [pc, #392]	@ (800316c <HAL_DMA_Abort_IT+0x3c4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d027      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a60      	ldr	r2, [pc, #384]	@ (8003170 <HAL_DMA_Abort_IT+0x3c8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d022      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8003174 <HAL_DMA_Abort_IT+0x3cc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01d      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5d      	ldr	r2, [pc, #372]	@ (8003178 <HAL_DMA_Abort_IT+0x3d0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a5c      	ldr	r2, [pc, #368]	@ (800317c <HAL_DMA_Abort_IT+0x3d4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_DMA_Abort_IT+0x3d8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a59      	ldr	r2, [pc, #356]	@ (8003184 <HAL_DMA_Abort_IT+0x3dc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a57      	ldr	r2, [pc, #348]	@ (8003188 <HAL_DMA_Abort_IT+0x3e0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_DMA_Abort_IT+0x290>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a56      	ldr	r2, [pc, #344]	@ (800318c <HAL_DMA_Abort_IT+0x3e4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <HAL_DMA_Abort_IT+0x2a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e007      	b.n	800305a <HAL_DMA_Abort_IT+0x2b2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3c      	ldr	r2, [pc, #240]	@ (8003150 <HAL_DMA_Abort_IT+0x3a8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d072      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3a      	ldr	r2, [pc, #232]	@ (8003154 <HAL_DMA_Abort_IT+0x3ac>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d06d      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a39      	ldr	r2, [pc, #228]	@ (8003158 <HAL_DMA_Abort_IT+0x3b0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d068      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a37      	ldr	r2, [pc, #220]	@ (800315c <HAL_DMA_Abort_IT+0x3b4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d063      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a36      	ldr	r2, [pc, #216]	@ (8003160 <HAL_DMA_Abort_IT+0x3b8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d05e      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a34      	ldr	r2, [pc, #208]	@ (8003164 <HAL_DMA_Abort_IT+0x3bc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d059      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a33      	ldr	r2, [pc, #204]	@ (8003168 <HAL_DMA_Abort_IT+0x3c0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d054      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a31      	ldr	r2, [pc, #196]	@ (800316c <HAL_DMA_Abort_IT+0x3c4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04f      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a30      	ldr	r2, [pc, #192]	@ (8003170 <HAL_DMA_Abort_IT+0x3c8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003174 <HAL_DMA_Abort_IT+0x3cc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <HAL_DMA_Abort_IT+0x3d0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2b      	ldr	r2, [pc, #172]	@ (800317c <HAL_DMA_Abort_IT+0x3d4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003180 <HAL_DMA_Abort_IT+0x3d8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <HAL_DMA_Abort_IT+0x3dc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <HAL_DMA_Abort_IT+0x3e0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	@ (800318c <HAL_DMA_Abort_IT+0x3e4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <HAL_DMA_Abort_IT+0x3e8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_DMA_Abort_IT+0x3ec>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <HAL_DMA_Abort_IT+0x3f0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_DMA_Abort_IT+0x3f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_DMA_Abort_IT+0x3f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_DMA_Abort_IT+0x3fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_DMA_Abort_IT+0x400>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort_IT+0x3a2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_DMA_Abort_IT+0x404>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d132      	bne.n	80031b0 <HAL_DMA_Abort_IT+0x408>
 800314a:	2301      	movs	r3, #1
 800314c:	e031      	b.n	80031b2 <HAL_DMA_Abort_IT+0x40a>
 800314e:	bf00      	nop
 8003150:	40020010 	.word	0x40020010
 8003154:	40020028 	.word	0x40020028
 8003158:	40020040 	.word	0x40020040
 800315c:	40020058 	.word	0x40020058
 8003160:	40020070 	.word	0x40020070
 8003164:	40020088 	.word	0x40020088
 8003168:	400200a0 	.word	0x400200a0
 800316c:	400200b8 	.word	0x400200b8
 8003170:	40020410 	.word	0x40020410
 8003174:	40020428 	.word	0x40020428
 8003178:	40020440 	.word	0x40020440
 800317c:	40020458 	.word	0x40020458
 8003180:	40020470 	.word	0x40020470
 8003184:	40020488 	.word	0x40020488
 8003188:	400204a0 	.word	0x400204a0
 800318c:	400204b8 	.word	0x400204b8
 8003190:	58025408 	.word	0x58025408
 8003194:	5802541c 	.word	0x5802541c
 8003198:	58025430 	.word	0x58025430
 800319c:	58025444 	.word	0x58025444
 80031a0:	58025458 	.word	0x58025458
 80031a4:	5802546c 	.word	0x5802546c
 80031a8:	58025480 	.word	0x58025480
 80031ac:	58025494 	.word	0x58025494
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d028      	beq.n	8003208 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003206:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop

08003234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003240:	4b67      	ldr	r3, [pc, #412]	@ (80033e0 <HAL_DMA_IRQHandler+0x1ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a67      	ldr	r2, [pc, #412]	@ (80033e4 <HAL_DMA_IRQHandler+0x1b0>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5f      	ldr	r2, [pc, #380]	@ (80033e8 <HAL_DMA_IRQHandler+0x1b4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d04a      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5d      	ldr	r2, [pc, #372]	@ (80033ec <HAL_DMA_IRQHandler+0x1b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d045      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_DMA_IRQHandler+0x1bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d040      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5a      	ldr	r2, [pc, #360]	@ (80033f4 <HAL_DMA_IRQHandler+0x1c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d03b      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a59      	ldr	r2, [pc, #356]	@ (80033f8 <HAL_DMA_IRQHandler+0x1c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d036      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a57      	ldr	r2, [pc, #348]	@ (80033fc <HAL_DMA_IRQHandler+0x1c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d031      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a56      	ldr	r2, [pc, #344]	@ (8003400 <HAL_DMA_IRQHandler+0x1cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d02c      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a54      	ldr	r2, [pc, #336]	@ (8003404 <HAL_DMA_IRQHandler+0x1d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d027      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a53      	ldr	r2, [pc, #332]	@ (8003408 <HAL_DMA_IRQHandler+0x1d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a51      	ldr	r2, [pc, #324]	@ (800340c <HAL_DMA_IRQHandler+0x1d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01d      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a50      	ldr	r2, [pc, #320]	@ (8003410 <HAL_DMA_IRQHandler+0x1dc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d018      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003414 <HAL_DMA_IRQHandler+0x1e0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003418 <HAL_DMA_IRQHandler+0x1e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	@ (800341c <HAL_DMA_IRQHandler+0x1e8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003420 <HAL_DMA_IRQHandler+0x1ec>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a48      	ldr	r2, [pc, #288]	@ (8003424 <HAL_DMA_IRQHandler+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_DMA_IRQHandler+0xd6>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_DMA_IRQHandler+0xd8>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 842b 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2208      	movs	r2, #8
 800331c:	409a      	lsls	r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a2 	beq.w	800346c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2e      	ldr	r2, [pc, #184]	@ (80033e8 <HAL_DMA_IRQHandler+0x1b4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <HAL_DMA_IRQHandler+0x1b8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_DMA_IRQHandler+0x1bc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_DMA_IRQHandler+0x1c0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a28      	ldr	r2, [pc, #160]	@ (80033f8 <HAL_DMA_IRQHandler+0x1c4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <HAL_DMA_IRQHandler+0x1c8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a25      	ldr	r2, [pc, #148]	@ (8003400 <HAL_DMA_IRQHandler+0x1cc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a24      	ldr	r2, [pc, #144]	@ (8003404 <HAL_DMA_IRQHandler+0x1d0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <HAL_DMA_IRQHandler+0x1d4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	@ (800340c <HAL_DMA_IRQHandler+0x1d8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <HAL_DMA_IRQHandler+0x1dc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <HAL_DMA_IRQHandler+0x1e0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <HAL_DMA_IRQHandler+0x1e4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	@ (800341c <HAL_DMA_IRQHandler+0x1e8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <HAL_DMA_IRQHandler+0x1ec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x194>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <HAL_DMA_IRQHandler+0x1f0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d12f      	bne.n	8003428 <HAL_DMA_IRQHandler+0x1f4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e02e      	b.n	800343c <HAL_DMA_IRQHandler+0x208>
 80033de:	bf00      	nop
 80033e0:	24000004 	.word	0x24000004
 80033e4:	1b4e81b5 	.word	0x1b4e81b5
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	40020058 	.word	0x40020058
 80033f8:	40020070 	.word	0x40020070
 80033fc:	40020088 	.word	0x40020088
 8003400:	400200a0 	.word	0x400200a0
 8003404:	400200b8 	.word	0x400200b8
 8003408:	40020410 	.word	0x40020410
 800340c:	40020428 	.word	0x40020428
 8003410:	40020440 	.word	0x40020440
 8003414:	40020458 	.word	0x40020458
 8003418:	40020470 	.word	0x40020470
 800341c:	40020488 	.word	0x40020488
 8003420:	400204a0 	.word	0x400204a0
 8003424:	400204b8 	.word	0x400204b8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2208      	movs	r2, #8
 800345a:	409a      	lsls	r2, r3
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d06e      	beq.n	8003560 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a69      	ldr	r2, [pc, #420]	@ (800362c <HAL_DMA_IRQHandler+0x3f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a67      	ldr	r2, [pc, #412]	@ (8003630 <HAL_DMA_IRQHandler+0x3fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a66      	ldr	r2, [pc, #408]	@ (8003634 <HAL_DMA_IRQHandler+0x400>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a64      	ldr	r2, [pc, #400]	@ (8003638 <HAL_DMA_IRQHandler+0x404>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a63      	ldr	r2, [pc, #396]	@ (800363c <HAL_DMA_IRQHandler+0x408>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a61      	ldr	r2, [pc, #388]	@ (8003640 <HAL_DMA_IRQHandler+0x40c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a60      	ldr	r2, [pc, #384]	@ (8003644 <HAL_DMA_IRQHandler+0x410>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003648 <HAL_DMA_IRQHandler+0x414>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5d      	ldr	r2, [pc, #372]	@ (800364c <HAL_DMA_IRQHandler+0x418>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_DMA_IRQHandler+0x41c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003654 <HAL_DMA_IRQHandler+0x420>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a58      	ldr	r2, [pc, #352]	@ (8003658 <HAL_DMA_IRQHandler+0x424>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_DMA_IRQHandler+0x428>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a55      	ldr	r2, [pc, #340]	@ (8003660 <HAL_DMA_IRQHandler+0x42c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a54      	ldr	r2, [pc, #336]	@ (8003664 <HAL_DMA_IRQHandler+0x430>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_IRQHandler+0x2ee>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a52      	ldr	r2, [pc, #328]	@ (8003668 <HAL_DMA_IRQHandler+0x434>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10a      	bne.n	8003538 <HAL_DMA_IRQHandler+0x304>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e003      	b.n	8003540 <HAL_DMA_IRQHandler+0x30c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2201      	movs	r2, #1
 800354e:	409a      	lsls	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	f043 0202 	orr.w	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2204      	movs	r2, #4
 800356a:	409a      	lsls	r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 808f 	beq.w	8003694 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <HAL_DMA_IRQHandler+0x3f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d04a      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2a      	ldr	r2, [pc, #168]	@ (8003630 <HAL_DMA_IRQHandler+0x3fc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d045      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <HAL_DMA_IRQHandler+0x400>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d040      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a27      	ldr	r2, [pc, #156]	@ (8003638 <HAL_DMA_IRQHandler+0x404>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d03b      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a26      	ldr	r2, [pc, #152]	@ (800363c <HAL_DMA_IRQHandler+0x408>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d036      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <HAL_DMA_IRQHandler+0x40c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d031      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a23      	ldr	r2, [pc, #140]	@ (8003644 <HAL_DMA_IRQHandler+0x410>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d02c      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a21      	ldr	r2, [pc, #132]	@ (8003648 <HAL_DMA_IRQHandler+0x414>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a20      	ldr	r2, [pc, #128]	@ (800364c <HAL_DMA_IRQHandler+0x418>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <HAL_DMA_IRQHandler+0x41c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1d      	ldr	r2, [pc, #116]	@ (8003654 <HAL_DMA_IRQHandler+0x420>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <HAL_DMA_IRQHandler+0x424>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	@ (800365c <HAL_DMA_IRQHandler+0x428>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <HAL_DMA_IRQHandler+0x42c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_DMA_IRQHandler+0x430>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_DMA_IRQHandler+0x3e2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_DMA_IRQHandler+0x434>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d12a      	bne.n	800366c <HAL_DMA_IRQHandler+0x438>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e023      	b.n	8003674 <HAL_DMA_IRQHandler+0x440>
 800362c:	40020010 	.word	0x40020010
 8003630:	40020028 	.word	0x40020028
 8003634:	40020040 	.word	0x40020040
 8003638:	40020058 	.word	0x40020058
 800363c:	40020070 	.word	0x40020070
 8003640:	40020088 	.word	0x40020088
 8003644:	400200a0 	.word	0x400200a0
 8003648:	400200b8 	.word	0x400200b8
 800364c:	40020410 	.word	0x40020410
 8003650:	40020428 	.word	0x40020428
 8003654:	40020440 	.word	0x40020440
 8003658:	40020458 	.word	0x40020458
 800365c:	40020470 	.word	0x40020470
 8003660:	40020488 	.word	0x40020488
 8003664:	400204a0 	.word	0x400204a0
 8003668:	400204b8 	.word	0x400204b8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2204      	movs	r2, #4
 8003682:	409a      	lsls	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2210      	movs	r2, #16
 800369e:	409a      	lsls	r2, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a6 	beq.w	80037f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a85      	ldr	r2, [pc, #532]	@ (80038c4 <HAL_DMA_IRQHandler+0x690>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a83      	ldr	r2, [pc, #524]	@ (80038c8 <HAL_DMA_IRQHandler+0x694>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a82      	ldr	r2, [pc, #520]	@ (80038cc <HAL_DMA_IRQHandler+0x698>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a80      	ldr	r2, [pc, #512]	@ (80038d0 <HAL_DMA_IRQHandler+0x69c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7f      	ldr	r2, [pc, #508]	@ (80038d4 <HAL_DMA_IRQHandler+0x6a0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7d      	ldr	r2, [pc, #500]	@ (80038d8 <HAL_DMA_IRQHandler+0x6a4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7c      	ldr	r2, [pc, #496]	@ (80038dc <HAL_DMA_IRQHandler+0x6a8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7a      	ldr	r2, [pc, #488]	@ (80038e0 <HAL_DMA_IRQHandler+0x6ac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a79      	ldr	r2, [pc, #484]	@ (80038e4 <HAL_DMA_IRQHandler+0x6b0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a77      	ldr	r2, [pc, #476]	@ (80038e8 <HAL_DMA_IRQHandler+0x6b4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a76      	ldr	r2, [pc, #472]	@ (80038ec <HAL_DMA_IRQHandler+0x6b8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a74      	ldr	r2, [pc, #464]	@ (80038f0 <HAL_DMA_IRQHandler+0x6bc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a73      	ldr	r2, [pc, #460]	@ (80038f4 <HAL_DMA_IRQHandler+0x6c0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a71      	ldr	r2, [pc, #452]	@ (80038f8 <HAL_DMA_IRQHandler+0x6c4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a70      	ldr	r2, [pc, #448]	@ (80038fc <HAL_DMA_IRQHandler+0x6c8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_IRQHandler+0x516>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6e      	ldr	r2, [pc, #440]	@ (8003900 <HAL_DMA_IRQHandler+0x6cc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10a      	bne.n	8003760 <HAL_DMA_IRQHandler+0x52c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e009      	b.n	8003774 <HAL_DMA_IRQHandler+0x540>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03e      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2210      	movs	r2, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d108      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d024      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
 80037b4:	e01f      	b.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01b      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e016      	b.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d107      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2220      	movs	r2, #32
 8003800:	409a      	lsls	r2, r3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8110 	beq.w	8003a2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <HAL_DMA_IRQHandler+0x690>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2b      	ldr	r2, [pc, #172]	@ (80038c8 <HAL_DMA_IRQHandler+0x694>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_DMA_IRQHandler+0x698>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <HAL_DMA_IRQHandler+0x69c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a26      	ldr	r2, [pc, #152]	@ (80038d4 <HAL_DMA_IRQHandler+0x6a0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a25      	ldr	r2, [pc, #148]	@ (80038d8 <HAL_DMA_IRQHandler+0x6a4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a23      	ldr	r2, [pc, #140]	@ (80038dc <HAL_DMA_IRQHandler+0x6a8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a22      	ldr	r2, [pc, #136]	@ (80038e0 <HAL_DMA_IRQHandler+0x6ac>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a20      	ldr	r2, [pc, #128]	@ (80038e4 <HAL_DMA_IRQHandler+0x6b0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <HAL_DMA_IRQHandler+0x6b4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <HAL_DMA_IRQHandler+0x6b8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <HAL_DMA_IRQHandler+0x6bc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <HAL_DMA_IRQHandler+0x6c0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <HAL_DMA_IRQHandler+0x6c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <HAL_DMA_IRQHandler+0x6c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_IRQHandler+0x678>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <HAL_DMA_IRQHandler+0x6cc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d12b      	bne.n	8003904 <HAL_DMA_IRQHandler+0x6d0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e02a      	b.n	8003918 <HAL_DMA_IRQHandler+0x6e4>
 80038c2:	bf00      	nop
 80038c4:	40020010 	.word	0x40020010
 80038c8:	40020028 	.word	0x40020028
 80038cc:	40020040 	.word	0x40020040
 80038d0:	40020058 	.word	0x40020058
 80038d4:	40020070 	.word	0x40020070
 80038d8:	40020088 	.word	0x40020088
 80038dc:	400200a0 	.word	0x400200a0
 80038e0:	400200b8 	.word	0x400200b8
 80038e4:	40020410 	.word	0x40020410
 80038e8:	40020428 	.word	0x40020428
 80038ec:	40020440 	.word	0x40020440
 80038f0:	40020458 	.word	0x40020458
 80038f4:	40020470 	.word	0x40020470
 80038f8:	40020488 	.word	0x40020488
 80038fc:	400204a0 	.word	0x400204a0
 8003900:	400204b8 	.word	0x400204b8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8087 	beq.w	8003a2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2220      	movs	r2, #32
 8003928:	409a      	lsls	r2, r3
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b04      	cmp	r3, #4
 8003938:	d139      	bne.n	80039ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0216 	bic.w	r2, r2, #22
 8003948:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003958:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_DMA_IRQHandler+0x736>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0208 	bic.w	r2, r2, #8
 8003978:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	223f      	movs	r2, #63	@ 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 834a 	beq.w	8004038 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
          }
          return;
 80039ac:	e344      	b.n	8004038 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
 80039da:	e027      	b.n	8003a2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e01e      	b.n	8003a2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0210 	bic.w	r2, r2, #16
 8003a0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8306 	beq.w	8004042 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8088 	beq.w	8003b54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2204      	movs	r2, #4
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7a      	ldr	r2, [pc, #488]	@ (8003c3c <HAL_DMA_IRQHandler+0xa08>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04a      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a79      	ldr	r2, [pc, #484]	@ (8003c40 <HAL_DMA_IRQHandler+0xa0c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d045      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a77      	ldr	r2, [pc, #476]	@ (8003c44 <HAL_DMA_IRQHandler+0xa10>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a76      	ldr	r2, [pc, #472]	@ (8003c48 <HAL_DMA_IRQHandler+0xa14>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03b      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a74      	ldr	r2, [pc, #464]	@ (8003c4c <HAL_DMA_IRQHandler+0xa18>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a73      	ldr	r2, [pc, #460]	@ (8003c50 <HAL_DMA_IRQHandler+0xa1c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d031      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a71      	ldr	r2, [pc, #452]	@ (8003c54 <HAL_DMA_IRQHandler+0xa20>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02c      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a70      	ldr	r2, [pc, #448]	@ (8003c58 <HAL_DMA_IRQHandler+0xa24>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c5c <HAL_DMA_IRQHandler+0xa28>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8003c60 <HAL_DMA_IRQHandler+0xa2c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d01d      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c64 <HAL_DMA_IRQHandler+0xa30>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6a      	ldr	r2, [pc, #424]	@ (8003c68 <HAL_DMA_IRQHandler+0xa34>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	@ (8003c6c <HAL_DMA_IRQHandler+0xa38>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <HAL_DMA_IRQHandler+0xa3c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	@ (8003c74 <HAL_DMA_IRQHandler+0xa40>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_IRQHandler+0x8b8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a64      	ldr	r2, [pc, #400]	@ (8003c78 <HAL_DMA_IRQHandler+0xa44>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <HAL_DMA_IRQHandler+0x8ca>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e007      	b.n	8003b0e <HAL_DMA_IRQHandler+0x8da>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3301      	adds	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d307      	bcc.n	8003b2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f2      	bne.n	8003b0e <HAL_DMA_IRQHandler+0x8da>
 8003b28:	e000      	b.n	8003b2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b42:	e003      	b.n	8003b4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8272 	beq.w	8004042 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
 8003b66:	e26c      	b.n	8004042 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a43      	ldr	r2, [pc, #268]	@ (8003c7c <HAL_DMA_IRQHandler+0xa48>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a42      	ldr	r2, [pc, #264]	@ (8003c80 <HAL_DMA_IRQHandler+0xa4c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a40      	ldr	r2, [pc, #256]	@ (8003c84 <HAL_DMA_IRQHandler+0xa50>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c88 <HAL_DMA_IRQHandler+0xa54>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3d      	ldr	r2, [pc, #244]	@ (8003c8c <HAL_DMA_IRQHandler+0xa58>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c90 <HAL_DMA_IRQHandler+0xa5c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8003c94 <HAL_DMA_IRQHandler+0xa60>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x984>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <HAL_DMA_IRQHandler+0xa64>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x988>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_IRQHandler+0x98a>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 823f 	beq.w	8004042 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80cd 	beq.w	8003d7c <HAL_DMA_IRQHandler+0xb48>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80c7 	beq.w	8003d7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d049      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8210 	beq.w	800403c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c24:	e20a      	b.n	800403c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8206 	beq.w	800403c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c38:	e200      	b.n	800403c <HAL_DMA_IRQHandler+0xe08>
 8003c3a:	bf00      	nop
 8003c3c:	40020010 	.word	0x40020010
 8003c40:	40020028 	.word	0x40020028
 8003c44:	40020040 	.word	0x40020040
 8003c48:	40020058 	.word	0x40020058
 8003c4c:	40020070 	.word	0x40020070
 8003c50:	40020088 	.word	0x40020088
 8003c54:	400200a0 	.word	0x400200a0
 8003c58:	400200b8 	.word	0x400200b8
 8003c5c:	40020410 	.word	0x40020410
 8003c60:	40020428 	.word	0x40020428
 8003c64:	40020440 	.word	0x40020440
 8003c68:	40020458 	.word	0x40020458
 8003c6c:	40020470 	.word	0x40020470
 8003c70:	40020488 	.word	0x40020488
 8003c74:	400204a0 	.word	0x400204a0
 8003c78:	400204b8 	.word	0x400204b8
 8003c7c:	58025408 	.word	0x58025408
 8003c80:	5802541c 	.word	0x5802541c
 8003c84:	58025430 	.word	0x58025430
 8003c88:	58025444 	.word	0x58025444
 8003c8c:	58025458 	.word	0x58025458
 8003c90:	5802546c 	.word	0x5802546c
 8003c94:	58025480 	.word	0x58025480
 8003c98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d160      	bne.n	8003d68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc74>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8003eac <HAL_DMA_IRQHandler+0xc78>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb0 <HAL_DMA_IRQHandler+0xc7c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8003eb4 <HAL_DMA_IRQHandler+0xc80>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a79      	ldr	r2, [pc, #484]	@ (8003eb8 <HAL_DMA_IRQHandler+0xc84>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a77      	ldr	r2, [pc, #476]	@ (8003ebc <HAL_DMA_IRQHandler+0xc88>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a76      	ldr	r2, [pc, #472]	@ (8003ec0 <HAL_DMA_IRQHandler+0xc8c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a74      	ldr	r2, [pc, #464]	@ (8003ec4 <HAL_DMA_IRQHandler+0xc90>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a73      	ldr	r2, [pc, #460]	@ (8003ec8 <HAL_DMA_IRQHandler+0xc94>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a71      	ldr	r2, [pc, #452]	@ (8003ecc <HAL_DMA_IRQHandler+0xc98>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a70      	ldr	r2, [pc, #448]	@ (8003ed0 <HAL_DMA_IRQHandler+0xc9c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed4 <HAL_DMA_IRQHandler+0xca0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6d      	ldr	r2, [pc, #436]	@ (8003ed8 <HAL_DMA_IRQHandler+0xca4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003edc <HAL_DMA_IRQHandler+0xca8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6a      	ldr	r2, [pc, #424]	@ (8003ee0 <HAL_DMA_IRQHandler+0xcac>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xb12>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a68      	ldr	r2, [pc, #416]	@ (8003ee4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <HAL_DMA_IRQHandler+0xb24>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0208 	bic.w	r2, r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e007      	b.n	8003d68 <HAL_DMA_IRQHandler+0xb34>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8165 	beq.w	800403c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d7a:	e15f      	b.n	800403c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2202      	movs	r2, #2
 8003d86:	409a      	lsls	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80c5 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xce8>
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80bf 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2202      	movs	r2, #2
 8003da8:	409a      	lsls	r2, r3
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d018      	beq.n	8003dea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 813a 	beq.w	8004040 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd4:	e134      	b.n	8004040 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8130 	beq.w	8004040 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de8:	e12a      	b.n	8004040 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f040 8089 	bne.w	8003f08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc74>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d04a      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <HAL_DMA_IRQHandler+0xc78>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d045      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <HAL_DMA_IRQHandler+0xc7c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d040      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_DMA_IRQHandler+0xc80>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d03b      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <HAL_DMA_IRQHandler+0xc84>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d036      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a23      	ldr	r2, [pc, #140]	@ (8003ebc <HAL_DMA_IRQHandler+0xc88>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <HAL_DMA_IRQHandler+0xc8c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d02c      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_DMA_IRQHandler+0xc90>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d027      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <HAL_DMA_IRQHandler+0xc94>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_DMA_IRQHandler+0xc98>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_DMA_IRQHandler+0xc9c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_DMA_IRQHandler+0xca0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a19      	ldr	r2, [pc, #100]	@ (8003ed8 <HAL_DMA_IRQHandler+0xca4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <HAL_DMA_IRQHandler+0xca8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_DMA_IRQHandler+0xcac>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xc62>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_DMA_IRQHandler+0xcb0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d128      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0xcb4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0214 	bic.w	r2, r2, #20
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e027      	b.n	8003ef8 <HAL_DMA_IRQHandler+0xcc4>
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 020a 	bic.w	r2, r2, #10
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8097 	beq.w	8004040 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f1a:	e091      	b.n	8004040 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2208      	movs	r2, #8
 8003f26:	409a      	lsls	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8088 	beq.w	8004042 <HAL_DMA_IRQHandler+0xe0e>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8082 	beq.w	8004042 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a41      	ldr	r2, [pc, #260]	@ (8004048 <HAL_DMA_IRQHandler+0xe14>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d04a      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800404c <HAL_DMA_IRQHandler+0xe18>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d045      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3e      	ldr	r2, [pc, #248]	@ (8004050 <HAL_DMA_IRQHandler+0xe1c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d040      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3c      	ldr	r2, [pc, #240]	@ (8004054 <HAL_DMA_IRQHandler+0xe20>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d03b      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004058 <HAL_DMA_IRQHandler+0xe24>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d036      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a39      	ldr	r2, [pc, #228]	@ (800405c <HAL_DMA_IRQHandler+0xe28>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	@ (8004060 <HAL_DMA_IRQHandler+0xe2c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02c      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a36      	ldr	r2, [pc, #216]	@ (8004064 <HAL_DMA_IRQHandler+0xe30>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a35      	ldr	r2, [pc, #212]	@ (8004068 <HAL_DMA_IRQHandler+0xe34>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d022      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a33      	ldr	r2, [pc, #204]	@ (800406c <HAL_DMA_IRQHandler+0xe38>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a32      	ldr	r2, [pc, #200]	@ (8004070 <HAL_DMA_IRQHandler+0xe3c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a30      	ldr	r2, [pc, #192]	@ (8004074 <HAL_DMA_IRQHandler+0xe40>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2f      	ldr	r2, [pc, #188]	@ (8004078 <HAL_DMA_IRQHandler+0xe44>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_DMA_IRQHandler+0xe48>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2c      	ldr	r2, [pc, #176]	@ (8004080 <HAL_DMA_IRQHandler+0xe4c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_DMA_IRQHandler+0xdaa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8004084 <HAL_DMA_IRQHandler+0xe50>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0xdbc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 021c 	bic.w	r2, r2, #28
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e007      	b.n	8004000 <HAL_DMA_IRQHandler+0xdcc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 020e 	bic.w	r2, r2, #14
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
 8004036:	e004      	b.n	8004042 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004040:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004042:	3728      	adds	r7, #40	@ 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8

08004088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a42      	ldr	r2, [pc, #264]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x118>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d04a      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a41      	ldr	r2, [pc, #260]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d045      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3f      	ldr	r2, [pc, #252]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x120>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d040      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <DMA_CalcBaseAndBitshift+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d03b      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a3c      	ldr	r2, [pc, #240]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d036      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3b      	ldr	r2, [pc, #236]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d031      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a39      	ldr	r2, [pc, #228]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x130>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02c      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a38      	ldr	r2, [pc, #224]	@ (80041bc <DMA_CalcBaseAndBitshift+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d027      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a36      	ldr	r2, [pc, #216]	@ (80041c0 <DMA_CalcBaseAndBitshift+0x138>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d022      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a35      	ldr	r2, [pc, #212]	@ (80041c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d01d      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a33      	ldr	r2, [pc, #204]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x140>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d018      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a32      	ldr	r2, [pc, #200]	@ (80041cc <DMA_CalcBaseAndBitshift+0x144>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a30      	ldr	r2, [pc, #192]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x148>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2f      	ldr	r2, [pc, #188]	@ (80041d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <DMA_CalcBaseAndBitshift+0x150>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <DMA_CalcBaseAndBitshift+0xa8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	@ (80041dc <DMA_CalcBaseAndBitshift+0x154>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <DMA_CalcBaseAndBitshift+0xac>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <DMA_CalcBaseAndBitshift+0xae>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d024      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3b10      	subs	r3, #16
 8004142:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x158>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	4a24      	ldr	r2, [pc, #144]	@ (80041e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004154:	5cd3      	ldrb	r3, [r2, r3]
 8004156:	461a      	mov	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d908      	bls.n	8004174 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <DMA_CalcBaseAndBitshift+0x160>)
 800416a:	4013      	ands	r3, r2
 800416c:	1d1a      	adds	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	659a      	str	r2, [r3, #88]	@ 0x58
 8004172:	e00d      	b.n	8004190 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <DMA_CalcBaseAndBitshift+0x160>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6593      	str	r3, [r2, #88]	@ 0x58
 8004182:	e005      	b.n	8004190 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
 80041e0:	aaaaaaab 	.word	0xaaaaaaab
 80041e4:	0800e788 	.word	0x0800e788
 80041e8:	fffffc00 	.word	0xfffffc00

080041ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d120      	bne.n	8004242 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	2b03      	cmp	r3, #3
 8004206:	d858      	bhi.n	80042ba <DMA_CheckFifoParam+0xce>
 8004208:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <DMA_CheckFifoParam+0x24>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004221 	.word	0x08004221
 8004214:	08004233 	.word	0x08004233
 8004218:	08004221 	.word	0x08004221
 800421c:	080042bb 	.word	0x080042bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d048      	beq.n	80042be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004230:	e045      	b.n	80042be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800423a:	d142      	bne.n	80042c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004240:	e03f      	b.n	80042c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424a:	d123      	bne.n	8004294 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	2b03      	cmp	r3, #3
 8004252:	d838      	bhi.n	80042c6 <DMA_CheckFifoParam+0xda>
 8004254:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <DMA_CheckFifoParam+0x70>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004273 	.word	0x08004273
 8004264:	0800426d 	.word	0x0800426d
 8004268:	08004285 	.word	0x08004285
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
        break;
 8004270:	e030      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d025      	beq.n	80042ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004282:	e022      	b.n	80042ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800428c:	d11f      	bne.n	80042ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004292:	e01c      	b.n	80042ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <DMA_CheckFifoParam+0xb6>
 800429c:	2b03      	cmp	r3, #3
 800429e:	d003      	beq.n	80042a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042a0:	e018      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
        break;
 80042a6:	e015      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
    break;
 80042b8:	e00b      	b.n	80042d2 <DMA_CheckFifoParam+0xe6>
        break;
 80042ba:	bf00      	nop
 80042bc:	e00a      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e008      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e006      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        break;
 80042c6:	bf00      	nop
 80042c8:	e004      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        break;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
        break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <DMA_CheckFifoParam+0xe8>
    break;
 80042d2:	bf00      	nop
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a38      	ldr	r2, [pc, #224]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a36      	ldr	r2, [pc, #216]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a33      	ldr	r2, [pc, #204]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2f      	ldr	r2, [pc, #188]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3b08      	subs	r3, #8
 8004354:	4a28      	ldr	r2, [pc, #160]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a24      	ldr	r2, [pc, #144]	@ (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004370:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004380:	e024      	b.n	80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3b10      	subs	r3, #16
 800438a:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d806      	bhi.n	80043aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d902      	bls.n	80043aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3308      	adds	r3, #8
 80043a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4b18      	ldr	r3, [pc, #96]	@ (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	461a      	mov	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2201      	movs	r2, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	58025408 	.word	0x58025408
 80043dc:	5802541c 	.word	0x5802541c
 80043e0:	58025430 	.word	0x58025430
 80043e4:	58025444 	.word	0x58025444
 80043e8:	58025458 	.word	0x58025458
 80043ec:	5802546c 	.word	0x5802546c
 80043f0:	58025480 	.word	0x58025480
 80043f4:	58025494 	.word	0x58025494
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	16009600 	.word	0x16009600
 8004400:	58025880 	.word	0x58025880
 8004404:	aaaaaaab 	.word	0xaaaaaaab
 8004408:	400204b8 	.word	0x400204b8
 800440c:	4002040f 	.word	0x4002040f
 8004410:	10008200 	.word	0x10008200
 8004414:	40020880 	.word	0x40020880

08004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04a      	beq.n	80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d847      	bhi.n	80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	@ (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1e      	ldr	r2, [pc, #120]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1c      	ldr	r2, [pc, #112]	@ (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	@ (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80044a2:	e009      	b.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a11      	ldr	r2, [pc, #68]	@ (80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58025408 	.word	0x58025408
 80044d4:	5802541c 	.word	0x5802541c
 80044d8:	58025430 	.word	0x58025430
 80044dc:	58025444 	.word	0x58025444
 80044e0:	58025458 	.word	0x58025458
 80044e4:	5802546c 	.word	0x5802546c
 80044e8:	58025480 	.word	0x58025480
 80044ec:	58025494 	.word	0x58025494
 80044f0:	1600963f 	.word	0x1600963f
 80044f4:	58025940 	.word	0x58025940
 80044f8:	1000823f 	.word	0x1000823f
 80044fc:	40020940 	.word	0x40020940

08004500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800450e:	4b89      	ldr	r3, [pc, #548]	@ (8004734 <HAL_GPIO_Init+0x234>)
 8004510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004512:	e194      	b.n	800483e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	2101      	movs	r1, #1
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa01 f303 	lsl.w	r3, r1, r3
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8186 	beq.w	8004838 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d005      	beq.n	8004544 <HAL_GPIO_Init+0x44>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d130      	bne.n	80045a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2203      	movs	r2, #3
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800457a:	2201      	movs	r2, #1
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 0201 	and.w	r2, r3, #1
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d017      	beq.n	80045e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	2203      	movs	r2, #3
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d123      	bne.n	8004636 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	08da      	lsrs	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3208      	adds	r2, #8
 80045f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	220f      	movs	r2, #15
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	08da      	lsrs	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3208      	adds	r2, #8
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0203 	and.w	r2, r3, #3
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80e0 	beq.w	8004838 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004678:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <HAL_GPIO_Init+0x238>)
 800467a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800467e:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <HAL_GPIO_Init+0x238>)
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_GPIO_Init+0x238>)
 800468a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004696:	4a29      	ldr	r2, [pc, #164]	@ (800473c <HAL_GPIO_Init+0x23c>)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	3302      	adds	r3, #2
 800469e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a20      	ldr	r2, [pc, #128]	@ (8004740 <HAL_GPIO_Init+0x240>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d052      	beq.n	8004768 <HAL_GPIO_Init+0x268>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <HAL_GPIO_Init+0x244>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d031      	beq.n	800472e <HAL_GPIO_Init+0x22e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <HAL_GPIO_Init+0x248>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02b      	beq.n	800472a <HAL_GPIO_Init+0x22a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <HAL_GPIO_Init+0x24c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d025      	beq.n	8004726 <HAL_GPIO_Init+0x226>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_GPIO_Init+0x250>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01f      	beq.n	8004722 <HAL_GPIO_Init+0x222>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_GPIO_Init+0x254>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d019      	beq.n	800471e <HAL_GPIO_Init+0x21e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_GPIO_Init+0x258>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <HAL_GPIO_Init+0x21a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_GPIO_Init+0x25c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00d      	beq.n	8004716 <HAL_GPIO_Init+0x216>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_GPIO_Init+0x260>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <HAL_GPIO_Init+0x212>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <HAL_GPIO_Init+0x264>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d101      	bne.n	800470e <HAL_GPIO_Init+0x20e>
 800470a:	2309      	movs	r3, #9
 800470c:	e02d      	b.n	800476a <HAL_GPIO_Init+0x26a>
 800470e:	230a      	movs	r3, #10
 8004710:	e02b      	b.n	800476a <HAL_GPIO_Init+0x26a>
 8004712:	2308      	movs	r3, #8
 8004714:	e029      	b.n	800476a <HAL_GPIO_Init+0x26a>
 8004716:	2307      	movs	r3, #7
 8004718:	e027      	b.n	800476a <HAL_GPIO_Init+0x26a>
 800471a:	2306      	movs	r3, #6
 800471c:	e025      	b.n	800476a <HAL_GPIO_Init+0x26a>
 800471e:	2305      	movs	r3, #5
 8004720:	e023      	b.n	800476a <HAL_GPIO_Init+0x26a>
 8004722:	2304      	movs	r3, #4
 8004724:	e021      	b.n	800476a <HAL_GPIO_Init+0x26a>
 8004726:	2303      	movs	r3, #3
 8004728:	e01f      	b.n	800476a <HAL_GPIO_Init+0x26a>
 800472a:	2302      	movs	r3, #2
 800472c:	e01d      	b.n	800476a <HAL_GPIO_Init+0x26a>
 800472e:	2301      	movs	r3, #1
 8004730:	e01b      	b.n	800476a <HAL_GPIO_Init+0x26a>
 8004732:	bf00      	nop
 8004734:	58000080 	.word	0x58000080
 8004738:	58024400 	.word	0x58024400
 800473c:	58000400 	.word	0x58000400
 8004740:	58020000 	.word	0x58020000
 8004744:	58020400 	.word	0x58020400
 8004748:	58020800 	.word	0x58020800
 800474c:	58020c00 	.word	0x58020c00
 8004750:	58021000 	.word	0x58021000
 8004754:	58021400 	.word	0x58021400
 8004758:	58021800 	.word	0x58021800
 800475c:	58021c00 	.word	0x58021c00
 8004760:	58022000 	.word	0x58022000
 8004764:	58022400 	.word	0x58022400
 8004768:	2300      	movs	r3, #0
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	f002 0203 	and.w	r2, r2, #3
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	4093      	lsls	r3, r2
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800477a:	4938      	ldr	r1, [pc, #224]	@ (800485c <HAL_GPIO_Init+0x35c>)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	3302      	adds	r3, #2
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3301      	adds	r3, #1
 800483c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f ae63 	bne.w	8004514 <HAL_GPIO_Init+0x14>
  }
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	3724      	adds	r7, #36	@ 0x24
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	58000400 	.word	0x58000400

08004860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800487c:	e003      	b.n	8004886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	041a      	lsls	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e10d      	b.n	8004ac2 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd f94a 	bl	8001b54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d008      	beq.n	8004908 <HAL_I2S_Init+0x74>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d004      	beq.n	8004908 <HAL_I2S_Init+0x74>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b0a      	cmp	r3, #10
 8004904:	f040 8087 	bne.w	8004a16 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d05a      	beq.n	80049c6 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004918:	2302      	movs	r3, #2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e001      	b.n	8004922 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b30      	cmp	r3, #48	@ 0x30
 8004928:	d003      	beq.n	8004932 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800492e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004930:	d102      	bne.n	8004938 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004932:	2301      	movs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e001      	b.n	800493c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800493c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	f002 fadc 	bl	8006f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004948:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004952:	d113      	bne.n	800497c <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	fbb2 f2f3 	udiv	r2, r2, r3
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	3305      	adds	r3, #5
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e014      	b.n	80049a6 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800497c:	2220      	movs	r2, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	3305      	adds	r3, #5
 80049a4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4a48      	ldr	r2, [pc, #288]	@ (8004acc <HAL_I2S_Init+0x238>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	08db      	lsrs	r3, r3, #3
 80049b0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e003      	b.n	80049ce <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80049c6:	2302      	movs	r3, #2
 80049c8:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_I2S_Init+0x146>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d002      	beq.n	80049e0 <HAL_I2S_Init+0x14c>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2bff      	cmp	r3, #255	@ 0xff
 80049de:	d907      	bls.n	80049f0 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e4:	f043 0210 	orr.w	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e068      	b.n	8004ac2 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a00:	4b33      	ldr	r3, [pc, #204]	@ (8004ad0 <HAL_I2S_Init+0x23c>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	0411      	lsls	r1, r2, #16
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0612      	lsls	r2, r2, #24
 8004a0c:	4311      	orrs	r1, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_I2S_Init+0x240>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6851      	ldr	r1, [r2, #4]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6892      	ldr	r2, [r2, #8]
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68d2      	ldr	r2, [r2, #12]
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6992      	ldr	r2, [r2, #24]
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a12      	ldr	r2, [r2, #32]
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6912      	ldr	r2, [r2, #16]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8004a5c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a6c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d007      	beq.n	8004a9c <HAL_I2S_Init+0x208>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d003      	beq.n	8004a9c <HAL_I2S_Init+0x208>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b0a      	cmp	r3, #10
 8004a9a:	d10a      	bne.n	8004ab2 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	cccccccd 	.word	0xcccccccd
 8004ad0:	fe00ffff 	.word	0xfe00ffff
 8004ad4:	fdff9040 	.word	0xfdff9040

08004ad8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ae0:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <HAL_PWREx_ConfigSupply+0x70>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d00a      	beq.n	8004b02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004aec:	4b16      	ldr	r3, [pc, #88]	@ (8004b48 <HAL_PWREx_ConfigSupply+0x70>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d001      	beq.n	8004afe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e01f      	b.n	8004b3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e01d      	b.n	8004b3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_PWREx_ConfigSupply+0x70>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f023 0207 	bic.w	r2, r3, #7
 8004b0a:	490f      	ldr	r1, [pc, #60]	@ (8004b48 <HAL_PWREx_ConfigSupply+0x70>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b12:	f7fd fca1 	bl	8002458 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b18:	e009      	b.n	8004b2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b1a:	f7fd fc9d 	bl	8002458 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b28:	d901      	bls.n	8004b2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_PWREx_ConfigSupply+0x70>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3a:	d1ee      	bne.n	8004b1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	58024800 	.word	0x58024800

08004b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	@ 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f000 bc48 	b.w	80053f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8088 	beq.w	8004c7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b6e:	4b99      	ldr	r3, [pc, #612]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b78:	4b96      	ldr	r3, [pc, #600]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d007      	beq.n	8004b94 <HAL_RCC_OscConfig+0x48>
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	2b18      	cmp	r3, #24
 8004b88:	d111      	bne.n	8004bae <HAL_RCC_OscConfig+0x62>
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d06d      	beq.n	8004c7c <HAL_RCC_OscConfig+0x130>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d169      	bne.n	8004c7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f000 bc21 	b.w	80053f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x7a>
 8004bb8:	4b86      	ldr	r3, [pc, #536]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a85      	ldr	r2, [pc, #532]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e02e      	b.n	8004c24 <HAL_RCC_OscConfig+0xd8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x9c>
 8004bce:	4b81      	ldr	r3, [pc, #516]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a80      	ldr	r2, [pc, #512]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a7d      	ldr	r2, [pc, #500]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e01d      	b.n	8004c24 <HAL_RCC_OscConfig+0xd8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0xc0>
 8004bf2:	4b78      	ldr	r3, [pc, #480]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a77      	ldr	r2, [pc, #476]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b75      	ldr	r3, [pc, #468]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a74      	ldr	r2, [pc, #464]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0xd8>
 8004c0c:	4b71      	ldr	r3, [pc, #452]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a70      	ldr	r2, [pc, #448]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b6e      	ldr	r3, [pc, #440]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fc14 	bl	8002458 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c34:	f7fd fc10 	bl	8002458 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	@ 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e3d4      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c46:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0xe8>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fc00 	bl	8002458 <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7fd fbfc 	bl	8002458 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e3c0      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c6e:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x110>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80ca 	beq.w	8004e20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8c:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c96:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x166>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	2b18      	cmp	r3, #24
 8004ca6:	d156      	bne.n	8004d56 <HAL_RCC_OscConfig+0x20a>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d151      	bne.n	8004d56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb2:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_RCC_OscConfig+0x17e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e392      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cca:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 0219 	bic.w	r2, r3, #25
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	493f      	ldr	r1, [pc, #252]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd fbbc 	bl	8002458 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fd fbb8 	bl	8002458 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e37c      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf6:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	f7fd fbd9 	bl	80024b8 <HAL_GetREVID>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d817      	bhi.n	8004d40 <HAL_RCC_OscConfig+0x1f4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d108      	bne.n	8004d2a <HAL_RCC_OscConfig+0x1de>
 8004d18:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d20:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	e07a      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	031b      	lsls	r3, r3, #12
 8004d38:	4926      	ldr	r1, [pc, #152]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d3e:	e06f      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	4921      	ldr	r1, [pc, #132]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d54:	e064      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d047      	beq.n	8004dee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0219 	bic.w	r2, r3, #25
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	491a      	ldr	r1, [pc, #104]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd fb72 	bl	8002458 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d78:	f7fd fb6e 	bl	8002458 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e332      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d96:	f7fd fb8f 	bl	80024b8 <HAL_GetREVID>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d819      	bhi.n	8004dd8 <HAL_RCC_OscConfig+0x28c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	d108      	bne.n	8004dbe <HAL_RCC_OscConfig+0x272>
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004db4:	4a07      	ldr	r2, [pc, #28]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dba:	6053      	str	r3, [r2, #4]
 8004dbc:	e030      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	031b      	lsls	r3, r3, #12
 8004dcc:	4901      	ldr	r1, [pc, #4]	@ (8004dd4 <HAL_RCC_OscConfig+0x288>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
 8004dd2:	e025      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	4b9a      	ldr	r3, [pc, #616]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	4997      	ldr	r1, [pc, #604]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
 8004dec:	e018      	b.n	8004e20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	4b95      	ldr	r3, [pc, #596]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a94      	ldr	r2, [pc, #592]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7fd fb2d 	bl	8002458 <HAL_GetTick>
 8004dfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e02:	f7fd fb29 	bl	8002458 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e2ed      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e14:	4b8b      	ldr	r3, [pc, #556]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a9 	beq.w	8004f80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	4b85      	ldr	r3, [pc, #532]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e38:	4b82      	ldr	r3, [pc, #520]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d007      	beq.n	8004e54 <HAL_RCC_OscConfig+0x308>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b18      	cmp	r3, #24
 8004e48:	d13a      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x374>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d135      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e54:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_OscConfig+0x320>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b80      	cmp	r3, #128	@ 0x80
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e2c1      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e6c:	f7fd fb24 	bl	80024b8 <HAL_GetREVID>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d817      	bhi.n	8004eaa <HAL_RCC_OscConfig+0x35e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d108      	bne.n	8004e94 <HAL_RCC_OscConfig+0x348>
 8004e82:	4b70      	ldr	r3, [pc, #448]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e92:	e075      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e94:	4b6b      	ldr	r3, [pc, #428]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	069b      	lsls	r3, r3, #26
 8004ea2:	4968      	ldr	r1, [pc, #416]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ea8:	e06a      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eaa:	4b66      	ldr	r3, [pc, #408]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	4962      	ldr	r1, [pc, #392]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ebe:	e05f      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d042      	beq.n	8004f4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fac0 	bl	8002458 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004edc:	f7fd fabc 	bl	8002458 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e280      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eee:	4b55      	ldr	r3, [pc, #340]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004efa:	f7fd fadd 	bl	80024b8 <HAL_GetREVID>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d817      	bhi.n	8004f38 <HAL_RCC_OscConfig+0x3ec>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d108      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3d6>
 8004f10:	4b4c      	ldr	r3, [pc, #304]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f18:	4a4a      	ldr	r2, [pc, #296]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f1e:	6053      	str	r3, [r2, #4]
 8004f20:	e02e      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
 8004f22:	4b48      	ldr	r3, [pc, #288]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	069b      	lsls	r3, r3, #26
 8004f30:	4944      	ldr	r1, [pc, #272]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	604b      	str	r3, [r1, #4]
 8004f36:	e023      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	493f      	ldr	r1, [pc, #252]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e018      	b.n	8004f80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3c      	ldr	r2, [pc, #240]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fa7d 	bl	8002458 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f62:	f7fd fa79 	bl	8002458 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e23d      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f74:	4b33      	ldr	r3, [pc, #204]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d036      	beq.n	8004ffa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d019      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f94:	4b2b      	ldr	r3, [pc, #172]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fd fa5a 	bl	8002458 <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fa56 	bl	8002458 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e21a      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fba:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x45c>
 8004fc6:	e018      	b.n	8004ffa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fd fa40 	bl	8002458 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fd fa3c 	bl	8002458 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e200      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fee:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d039      	beq.n	800507a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01c      	beq.n	8005048 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8005014:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005018:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800501a:	f7fd fa1d 	bl	8002458 <HAL_GetTick>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005022:	f7fd fa19 	bl	8002458 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e1dd      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_RCC_OscConfig+0x4f8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x4d6>
 8005040:	e01b      	b.n	800507a <HAL_RCC_OscConfig+0x52e>
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005048:	4b9b      	ldr	r3, [pc, #620]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a9a      	ldr	r2, [pc, #616]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800504e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005052:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005054:	f7fd fa00 	bl	8002458 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505c:	f7fd f9fc 	bl	8002458 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e1c0      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800506e:	4b92      	ldr	r3, [pc, #584]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8081 	beq.w	800518a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005088:	4b8c      	ldr	r3, [pc, #560]	@ (80052bc <HAL_RCC_OscConfig+0x770>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a8b      	ldr	r2, [pc, #556]	@ (80052bc <HAL_RCC_OscConfig+0x770>)
 800508e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005094:	f7fd f9e0 	bl	8002458 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fd f9dc 	bl	8002458 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1a0      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ae:	4b83      	ldr	r3, [pc, #524]	@ (80052bc <HAL_RCC_OscConfig+0x770>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x584>
 80050c2:	4b7d      	ldr	r3, [pc, #500]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a7c      	ldr	r2, [pc, #496]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ce:	e02d      	b.n	800512c <HAL_RCC_OscConfig+0x5e0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x5a6>
 80050d8:	4b77      	ldr	r3, [pc, #476]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	4a76      	ldr	r2, [pc, #472]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e4:	4b74      	ldr	r3, [pc, #464]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a73      	ldr	r2, [pc, #460]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	e01c      	b.n	800512c <HAL_RCC_OscConfig+0x5e0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x5c8>
 80050fa:	4b6f      	ldr	r3, [pc, #444]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	4a6e      	ldr	r2, [pc, #440]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005100:	f043 0304 	orr.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	@ 0x70
 8005106:	4b6c      	ldr	r3, [pc, #432]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	4a6b      	ldr	r2, [pc, #428]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0x5e0>
 8005114:	4b68      	ldr	r3, [pc, #416]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	4a67      	ldr	r2, [pc, #412]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005120:	4b65      	ldr	r3, [pc, #404]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a64      	ldr	r2, [pc, #400]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d015      	beq.n	8005160 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fd f990 	bl	8002458 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513a:	e00a      	b.n	8005152 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fd f98c 	bl	8002458 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e14e      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005152:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ee      	beq.n	800513c <HAL_RCC_OscConfig+0x5f0>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd f97a 	bl	8002458 <HAL_GetTick>
 8005164:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fd f976 	bl	8002458 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e138      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800517e:	4b4e      	ldr	r3, [pc, #312]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ee      	bne.n	8005168 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 812d 	beq.w	80053ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005194:	4b48      	ldr	r3, [pc, #288]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519c:	2b18      	cmp	r3, #24
 800519e:	f000 80bd 	beq.w	800531c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	f040 809e 	bne.w	80052e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ac:	4b42      	ldr	r3, [pc, #264]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a41      	ldr	r2, [pc, #260]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80051b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd f94e 	bl	8002458 <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fd f94a 	bl	8002458 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e10e      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d2:	4b39      	ldr	r3, [pc, #228]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051de:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e2:	4b37      	ldr	r3, [pc, #220]	@ (80052c0 <HAL_RCC_OscConfig+0x774>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	430a      	orrs	r2, r1
 80051f2:	4931      	ldr	r1, [pc, #196]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	3b01      	subs	r3, #1
 80051fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005206:	3b01      	subs	r3, #1
 8005208:	025b      	lsls	r3, r3, #9
 800520a:	b29b      	uxth	r3, r3
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	3b01      	subs	r3, #1
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	3b01      	subs	r3, #1
 8005222:	061b      	lsls	r3, r3, #24
 8005224:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005228:	4923      	ldr	r1, [pc, #140]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800522e:	4b22      	ldr	r3, [pc, #136]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800523a:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800523c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523e:	4b21      	ldr	r3, [pc, #132]	@ (80052c4 <HAL_RCC_OscConfig+0x778>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005246:	00d2      	lsls	r2, r2, #3
 8005248:	491b      	ldr	r1, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	f023 020c 	bic.w	r2, r3, #12
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	4917      	ldr	r1, [pc, #92]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005260:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	f023 0202 	bic.w	r2, r3, #2
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	4912      	ldr	r1, [pc, #72]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005272:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	4a10      	ldr	r2, [pc, #64]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	4a0d      	ldr	r2, [pc, #52]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005296:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a07      	ldr	r2, [pc, #28]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_RCC_OscConfig+0x76c>)
 80052a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fd f8d3 	bl	8002458 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b4:	e011      	b.n	80052da <HAL_RCC_OscConfig+0x78e>
 80052b6:	bf00      	nop
 80052b8:	58024400 	.word	0x58024400
 80052bc:	58024800 	.word	0x58024800
 80052c0:	fffffc0c 	.word	0xfffffc0c
 80052c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd f8c6 	bl	8002458 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e08a      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052da:	4b47      	ldr	r3, [pc, #284]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x77c>
 80052e6:	e082      	b.n	80053ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e8:	4b43      	ldr	r3, [pc, #268]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a42      	ldr	r2, [pc, #264]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80052ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fd f8b0 	bl	8002458 <HAL_GetTick>
 80052f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fd f8ac 	bl	8002458 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e070      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800530e:	4b3a      	ldr	r3, [pc, #232]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x7b0>
 800531a:	e068      	b.n	80053ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005322:	4b35      	ldr	r3, [pc, #212]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	2b01      	cmp	r3, #1
 800532e:	d031      	beq.n	8005394 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f003 0203 	and.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d12a      	bne.n	8005394 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d122      	bne.n	8005394 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d11a      	bne.n	8005394 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0a5b      	lsrs	r3, r3, #9
 8005362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d111      	bne.n	8005394 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d108      	bne.n	8005394 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0e1b      	lsrs	r3, r3, #24
 8005386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e02b      	b.n	80053f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005398:	4b17      	ldr	r3, [pc, #92]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 800539a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d01f      	beq.n	80053ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053ae:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053ba:	f7fd f84d 	bl	8002458 <HAL_GetTick>
 80053be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053c0:	bf00      	nop
 80053c2:	f7fd f849 	bl	8002458 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d0f9      	beq.n	80053c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053ce:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_OscConfig+0x8b0>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053da:	00d2      	lsls	r2, r2, #3
 80053dc:	4906      	ldr	r1, [pc, #24]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	4a04      	ldr	r2, [pc, #16]	@ (80053f8 <HAL_RCC_OscConfig+0x8ac>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	@ 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	58024400 	.word	0x58024400
 80053fc:	ffff0007 	.word	0xffff0007

08005400 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e19c      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b8a      	ldr	r3, [pc, #552]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d910      	bls.n	8005444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b87      	ldr	r3, [pc, #540]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 020f 	bic.w	r2, r3, #15
 800542a:	4985      	ldr	r1, [pc, #532]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b83      	ldr	r3, [pc, #524]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e184      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800545c:	429a      	cmp	r2, r3
 800545e:	d908      	bls.n	8005472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005460:	4b78      	ldr	r3, [pc, #480]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	4975      	ldr	r1, [pc, #468]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	4b70      	ldr	r3, [pc, #448]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548a:	429a      	cmp	r2, r3
 800548c:	d908      	bls.n	80054a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548e:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	496a      	ldr	r1, [pc, #424]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	4b64      	ldr	r3, [pc, #400]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d908      	bls.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054bc:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	495e      	ldr	r1, [pc, #376]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d908      	bls.n	80054fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ea:	4b56      	ldr	r3, [pc, #344]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4953      	ldr	r1, [pc, #332]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	429a      	cmp	r2, r3
 8005516:	d908      	bls.n	800552a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b4a      	ldr	r3, [pc, #296]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f023 020f 	bic.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4947      	ldr	r1, [pc, #284]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005526:	4313      	orrs	r3, r2
 8005528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d055      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005536:	4b43      	ldr	r3, [pc, #268]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4940      	ldr	r1, [pc, #256]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005544:	4313      	orrs	r3, r2
 8005546:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d107      	bne.n	8005560 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005550:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d121      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0f6      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d107      	bne.n	8005578 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d115      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0ea      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005580:	4b30      	ldr	r3, [pc, #192]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0de      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005590:	4b2c      	ldr	r3, [pc, #176]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0d6      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a0:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f023 0207 	bic.w	r2, r3, #7
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4925      	ldr	r1, [pc, #148]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc ff51 	bl	8002458 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ba:	f7fc ff4d 	bl	8002458 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0be      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	429a      	cmp	r2, r3
 80055e0:	d1eb      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d208      	bcs.n	8005610 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fe:	4b11      	ldr	r3, [pc, #68]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f023 020f 	bic.w	r2, r3, #15
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	490e      	ldr	r1, [pc, #56]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800560c:	4313      	orrs	r3, r2
 800560e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d214      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 020f 	bic.w	r2, r3, #15
 8005626:	4906      	ldr	r1, [pc, #24]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e086      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
 8005640:	52002000 	.word	0x52002000
 8005644:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	4b3f      	ldr	r3, [pc, #252]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005660:	429a      	cmp	r2, r3
 8005662:	d208      	bcs.n	8005676 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005664:	4b3c      	ldr	r3, [pc, #240]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4939      	ldr	r1, [pc, #228]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	4b34      	ldr	r3, [pc, #208]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800568e:	429a      	cmp	r2, r3
 8005690:	d208      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	492e      	ldr	r1, [pc, #184]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	4b28      	ldr	r3, [pc, #160]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056bc:	429a      	cmp	r2, r3
 80056be:	d208      	bcs.n	80056d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	4922      	ldr	r1, [pc, #136]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d208      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4917      	ldr	r1, [pc, #92]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005700:	f000 f834 	bl	800576c <HAL_RCC_GetSysClockFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	4912      	ldr	r1, [pc, #72]	@ (800575c <HAL_RCC_ClockConfig+0x35c>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800571e:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	4a0d      	ldr	r2, [pc, #52]	@ (800575c <HAL_RCC_ClockConfig+0x35c>)
 8005728:	5cd3      	ldrb	r3, [r2, r3]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_RCC_ClockConfig+0x360>)
 8005736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005738:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <HAL_RCC_ClockConfig+0x364>)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <HAL_RCC_ClockConfig+0x368>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fc fe3e 	bl	80023c4 <HAL_InitTick>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	0800e778 	.word	0x0800e778
 8005760:	24000008 	.word	0x24000008
 8005764:	24000004 	.word	0x24000004
 8005768:	2400000c 	.word	0x2400000c

0800576c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	@ 0x24
 8005770:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005772:	4bb3      	ldr	r3, [pc, #716]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800577a:	2b18      	cmp	r3, #24
 800577c:	f200 8155 	bhi.w	8005a2a <HAL_RCC_GetSysClockFreq+0x2be>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057ed 	.word	0x080057ed
 800578c:	08005a2b 	.word	0x08005a2b
 8005790:	08005a2b 	.word	0x08005a2b
 8005794:	08005a2b 	.word	0x08005a2b
 8005798:	08005a2b 	.word	0x08005a2b
 800579c:	08005a2b 	.word	0x08005a2b
 80057a0:	08005a2b 	.word	0x08005a2b
 80057a4:	08005a2b 	.word	0x08005a2b
 80057a8:	08005813 	.word	0x08005813
 80057ac:	08005a2b 	.word	0x08005a2b
 80057b0:	08005a2b 	.word	0x08005a2b
 80057b4:	08005a2b 	.word	0x08005a2b
 80057b8:	08005a2b 	.word	0x08005a2b
 80057bc:	08005a2b 	.word	0x08005a2b
 80057c0:	08005a2b 	.word	0x08005a2b
 80057c4:	08005a2b 	.word	0x08005a2b
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005a2b 	.word	0x08005a2b
 80057d0:	08005a2b 	.word	0x08005a2b
 80057d4:	08005a2b 	.word	0x08005a2b
 80057d8:	08005a2b 	.word	0x08005a2b
 80057dc:	08005a2b 	.word	0x08005a2b
 80057e0:	08005a2b 	.word	0x08005a2b
 80057e4:	08005a2b 	.word	0x08005a2b
 80057e8:	0800581f 	.word	0x0800581f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ec:	4b94      	ldr	r3, [pc, #592]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f8:	4b91      	ldr	r3, [pc, #580]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	4a90      	ldr	r2, [pc, #576]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800580a:	e111      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800580c:	4b8d      	ldr	r3, [pc, #564]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800580e:	61bb      	str	r3, [r7, #24]
      break;
 8005810:	e10e      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005812:	4b8d      	ldr	r3, [pc, #564]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005814:	61bb      	str	r3, [r7, #24]
      break;
 8005816:	e10b      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005818:	4b8c      	ldr	r3, [pc, #560]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800581a:	61bb      	str	r3, [r7, #24]
      break;
 800581c:	e108      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800581e:	4b88      	ldr	r3, [pc, #544]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005828:	4b85      	ldr	r3, [pc, #532]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005832:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005834:	4b82      	ldr	r3, [pc, #520]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800583e:	4b80      	ldr	r3, [pc, #512]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80e1 	beq.w	8005a24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b02      	cmp	r3, #2
 8005866:	f000 8083 	beq.w	8005970 <HAL_RCC_GetSysClockFreq+0x204>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b02      	cmp	r3, #2
 800586e:	f200 80a1 	bhi.w	80059b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x114>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d056      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0x1c0>
 800587e:	e099      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005880:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02d      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800588c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	4a6b      	ldr	r2, [pc, #428]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b62      	ldr	r3, [pc, #392]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058e6:	e087      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b51      	ldr	r3, [pc, #324]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a02 	vldr	s12, [r7, #8]
 800590e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592a:	e065      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005952:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800596e:	e043      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059b2:	e021      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	0a5b      	lsrs	r3, r3, #9
 80059fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a02:	3301      	adds	r3, #1
 8005a04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1c:	ee17 3a90 	vmov	r3, s15
 8005a20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a22:	e005      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
      break;
 8005a28:	e002      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a2c:	61bb      	str	r3, [r7, #24]
      break;
 8005a2e:	bf00      	nop
  }

  return sysclockfreq;
 8005a30:	69bb      	ldr	r3, [r7, #24]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3724      	adds	r7, #36	@ 0x24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	58024400 	.word	0x58024400
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	46000000 	.word	0x46000000
 8005a54:	4c742400 	.word	0x4c742400
 8005a58:	4a742400 	.word	0x4a742400
 8005a5c:	4b742400 	.word	0x4b742400

08005a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a66:	f7ff fe81 	bl	800576c <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	490f      	ldr	r1, [pc, #60]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a8e:	5cd3      	ldrb	r3, [r2, r3]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9a:	4a07      	ldr	r2, [pc, #28]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a9e:	4a07      	ldr	r2, [pc, #28]	@ (8005abc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	0800e778 	.word	0x0800e778
 8005ab8:	24000008 	.word	0x24000008
 8005abc:	24000004 	.word	0x24000004

08005ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ac4:	f7ff ffcc 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4904      	ldr	r1, [pc, #16]	@ (8005ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	0800e778 	.word	0x0800e778

08005aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0ca      	sub	sp, #296	@ 0x128
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b10:	2500      	movs	r5, #0
 8005b12:	ea54 0305 	orrs.w	r3, r4, r5
 8005b16:	d049      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b22:	d02f      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b28:	d828      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b2e:	d01a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b34:	d822      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b40:	e01c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b42:	4bb8      	ldr	r3, [pc, #736]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	4ab7      	ldr	r2, [pc, #732]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b4e:	e01a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b54:	3308      	adds	r3, #8
 8005b56:	2102      	movs	r1, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 fb61 	bl	8008220 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b64:	e00f      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	3328      	adds	r3, #40	@ 0x28
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 fc08 	bl	8008384 <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b8e:	4ba5      	ldr	r3, [pc, #660]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9c:	4aa1      	ldr	r2, [pc, #644]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8005bc0:	d047      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d82a      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be9 	.word	0x08005be9
 8005bd8:	08005bf7 	.word	0x08005bf7
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c2b 	.word	0x08005c2b
 8005be4:	08005c2b 	.word	0x08005c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4b8e      	ldr	r3, [pc, #568]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	4a8d      	ldr	r2, [pc, #564]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e01a      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fb0e 	bl	8008220 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e00f      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	3328      	adds	r3, #40	@ 0x28
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 fbb5 	bl	8008384 <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c34:	4b7b      	ldr	r3, [pc, #492]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c38:	f023 0107 	bic.w	r1, r3, #7
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a78      	ldr	r2, [pc, #480]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c66:	d04c      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c72:	d030      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c78:	d829      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c7c:	d02d      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c80:	d825      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c82:	2b80      	cmp	r3, #128	@ 0x80
 8005c84:	d018      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c86:	2b80      	cmp	r3, #128	@ 0x80
 8005c88:	d821      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005c8e:	2b40      	cmp	r3, #64	@ 0x40
 8005c90:	d007      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005c92:	e01c      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b63      	ldr	r3, [pc, #396]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a62      	ldr	r2, [pc, #392]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e01c      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f002 fab8 	bl	8008220 <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005cb6:	e011      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbc:	3328      	adds	r3, #40	@ 0x28
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f002 fb5f 	bl	8008384 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cd4:	e002      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d0e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d053      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d2e:	d035      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005d30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d34:	d82e      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d3a:	d031      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d40:	d828      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d46:	d01a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4c:	d822      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005d52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d56:	d007      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005d58:	e01c      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4b32      	ldr	r3, [pc, #200]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a31      	ldr	r2, [pc, #196]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d66:	e01c      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 fa55 	bl	8008220 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e011      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	3328      	adds	r3, #40	@ 0x28
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f002 fafc 	bl	8008384 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005daa:	4b1e      	ldr	r3, [pc, #120]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dba:	4a1a      	ldr	r2, [pc, #104]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005dd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005de0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005de4:	460b      	mov	r3, r1
 8005de6:	4313      	orrs	r3, r2
 8005de8:	d056      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005df2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005df6:	d038      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005df8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dfc:	d831      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e02:	d034      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005e04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e08:	d82b      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e0e:	d01d      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e14:	d825      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e20:	e01f      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e28:	4ba2      	ldr	r3, [pc, #648]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	4aa1      	ldr	r2, [pc, #644]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e34:	e01c      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f002 f9ee 	bl	8008220 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e4a:	e011      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	3328      	adds	r3, #40	@ 0x28
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f002 fa95 	bl	8008384 <RCCEx_PLL3_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e78:	4b8e      	ldr	r3, [pc, #568]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e88:	4a8a      	ldr	r2, [pc, #552]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005eae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d03a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	2b30      	cmp	r3, #48	@ 0x30
 8005ec0:	d01f      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ec2:	2b30      	cmp	r3, #48	@ 0x30
 8005ec4:	d819      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d815      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d019      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d111      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed6:	4b77      	ldr	r3, [pc, #476]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	4a76      	ldr	r2, [pc, #472]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ee2:	e011      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	3308      	adds	r3, #8
 8005eea:	2102      	movs	r1, #2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f002 f997 	bl	8008220 <RCCEx_PLL2_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ef8:	e006      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f00:	e002      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f02:	bf00      	nop
 8005f04:	e000      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f10:	4b68      	ldr	r3, [pc, #416]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	4a65      	ldr	r2, [pc, #404]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f24:	e003      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	d051      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f58:	d035      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f5e:	d82e      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f64:	d031      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f6a:	d828      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f70:	d01a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f76:	d822      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f80:	d007      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005f82:	e01c      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f84:	4b4b      	ldr	r3, [pc, #300]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	4a4a      	ldr	r2, [pc, #296]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f90:	e01c      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	3308      	adds	r3, #8
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f940 	bl	8008220 <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fa6:	e011      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	3328      	adds	r3, #40	@ 0x28
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 f9e7 	bl	8008384 <RCCEx_PLL3_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e006      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e000      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fd4:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	4a34      	ldr	r2, [pc, #208]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fe8:	e003      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006002:	2300      	movs	r3, #0
 8006004:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006008:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800600c:	460b      	mov	r3, r1
 800600e:	4313      	orrs	r3, r2
 8006010:	d056      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800601c:	d033      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800601e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006022:	d82c      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006028:	d02f      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800602a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800602e:	d826      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006030:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006034:	d02b      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006036:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800603a:	d820      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800603c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006040:	d012      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006046:	d81a      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d022      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006050:	d115      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006056:	3308      	adds	r3, #8
 8006058:	2101      	movs	r1, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f002 f8e0 	bl	8008220 <RCCEx_PLL2_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006066:	e015      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	3328      	adds	r3, #40	@ 0x28
 800606e:	2101      	movs	r1, #1
 8006070:	4618      	mov	r0, r3
 8006072:	f002 f987 	bl	8008384 <RCCEx_PLL3_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800607c:	e00a      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006084:	e006      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006086:	bf00      	nop
 8006088:	e004      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800608a:	bf00      	nop
 800608c:	e002      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800608e:	bf00      	nop
 8006090:	e000      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10d      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800609e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060aa:	4a02      	ldr	r2, [pc, #8]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80060b0:	e006      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80060cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d055      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ec:	d033      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80060ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f2:	d82c      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f8:	d02f      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fe:	d826      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006104:	d02b      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800610a:	d820      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800610c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006110:	d012      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006116:	d81a      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d022      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800611c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006120:	d115      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	3308      	adds	r3, #8
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f002 f878 	bl	8008220 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006136:	e015      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	3328      	adds	r3, #40	@ 0x28
 800613e:	2101      	movs	r1, #1
 8006140:	4618      	mov	r0, r3
 8006142:	f002 f91f 	bl	8008384 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800614c:	e00a      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006156:	bf00      	nop
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800616c:	4ba3      	ldr	r3, [pc, #652]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006170:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800617c:	4a9f      	ldr	r2, [pc, #636]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617e:	430b      	orrs	r3, r1
 8006180:	6593      	str	r3, [r2, #88]	@ 0x58
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061a6:	460b      	mov	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d037      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b6:	d00e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80061b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061bc:	d816      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80061c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c6:	d111      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c8:	4b8c      	ldr	r3, [pc, #560]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	4a8b      	ldr	r2, [pc, #556]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061d4:	e00f      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061da:	3308      	adds	r3, #8
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f002 f81e 	bl	8008220 <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f2:	e000      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80061f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061fe:	4b7f      	ldr	r3, [pc, #508]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006202:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620c:	4a7b      	ldr	r2, [pc, #492]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620e:	430b      	orrs	r3, r1
 8006210:	6513      	str	r3, [r2, #80]	@ 0x50
 8006212:	e003      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006232:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006236:	460b      	mov	r3, r1
 8006238:	4313      	orrs	r3, r2
 800623a:	d039      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006242:	2b03      	cmp	r3, #3
 8006244:	d81c      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006246:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006289 	.word	0x08006289
 8006250:	0800625d 	.word	0x0800625d
 8006254:	0800626b 	.word	0x0800626b
 8006258:	08006289 	.word	0x08006289
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4b67      	ldr	r3, [pc, #412]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	4a66      	ldr	r2, [pc, #408]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006268:	e00f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	3308      	adds	r3, #8
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f001 ffd4 	bl	8008220 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800627e:	e004      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006292:	4b5a      	ldr	r3, [pc, #360]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006296:	f023 0103 	bic.w	r1, r3, #3
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a0:	4a56      	ldr	r2, [pc, #344]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80062bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f000 809f 	beq.w	8006410 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062de:	f7fc f8bb 	bl	8002458 <HAL_GetTick>
 80062e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062e6:	e00b      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e8:	f7fc f8b6 	bl	8002458 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b64      	cmp	r3, #100	@ 0x64
 80062f6:	d903      	bls.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fe:	e005      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006300:	4b3f      	ldr	r3, [pc, #252]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ed      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800630c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006310:	2b00      	cmp	r3, #0
 8006312:	d179      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006314:	4b39      	ldr	r3, [pc, #228]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006316:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006320:	4053      	eors	r3, r2
 8006322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d015      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800632a:	4b34      	ldr	r3, [pc, #208]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006332:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006336:	4b31      	ldr	r3, [pc, #196]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633a:	4a30      	ldr	r2, [pc, #192]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006340:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006342:	4b2e      	ldr	r3, [pc, #184]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	4a2d      	ldr	r2, [pc, #180]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800634e:	4a2b      	ldr	r2, [pc, #172]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006362:	d118      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc f878 	bl	8002458 <HAL_GetTick>
 8006368:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800636c:	e00d      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fc f873 	bl	8002458 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006378:	1ad2      	subs	r2, r2, r3
 800637a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800637e:	429a      	cmp	r2, r3
 8006380:	d903      	bls.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006388:	e005      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800638a:	4b1c      	ldr	r3, [pc, #112]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0eb      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639a:	2b00      	cmp	r3, #0
 800639c:	d129      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ae:	d10e      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80063b0:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063c0:	091a      	lsrs	r2, r3, #4
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	4a0d      	ldr	r2, [pc, #52]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6113      	str	r3, [r2, #16]
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063d8:	6113      	str	r3, [r2, #16]
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ea:	4a04      	ldr	r2, [pc, #16]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f0:	e00e      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80063fa:	e009      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80063fc:	58024400 	.word	0x58024400
 8006400:	58024800 	.word	0x58024800
 8006404:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f002 0301 	and.w	r3, r2, #1
 800641c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006426:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	f000 8089 	beq.w	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006438:	2b28      	cmp	r3, #40	@ 0x28
 800643a:	d86b      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800643c:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	0800651d 	.word	0x0800651d
 8006448:	08006515 	.word	0x08006515
 800644c:	08006515 	.word	0x08006515
 8006450:	08006515 	.word	0x08006515
 8006454:	08006515 	.word	0x08006515
 8006458:	08006515 	.word	0x08006515
 800645c:	08006515 	.word	0x08006515
 8006460:	08006515 	.word	0x08006515
 8006464:	080064e9 	.word	0x080064e9
 8006468:	08006515 	.word	0x08006515
 800646c:	08006515 	.word	0x08006515
 8006470:	08006515 	.word	0x08006515
 8006474:	08006515 	.word	0x08006515
 8006478:	08006515 	.word	0x08006515
 800647c:	08006515 	.word	0x08006515
 8006480:	08006515 	.word	0x08006515
 8006484:	080064ff 	.word	0x080064ff
 8006488:	08006515 	.word	0x08006515
 800648c:	08006515 	.word	0x08006515
 8006490:	08006515 	.word	0x08006515
 8006494:	08006515 	.word	0x08006515
 8006498:	08006515 	.word	0x08006515
 800649c:	08006515 	.word	0x08006515
 80064a0:	08006515 	.word	0x08006515
 80064a4:	0800651d 	.word	0x0800651d
 80064a8:	08006515 	.word	0x08006515
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006515 	.word	0x08006515
 80064b4:	08006515 	.word	0x08006515
 80064b8:	08006515 	.word	0x08006515
 80064bc:	08006515 	.word	0x08006515
 80064c0:	08006515 	.word	0x08006515
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006515 	.word	0x08006515
 80064dc:	08006515 	.word	0x08006515
 80064e0:	08006515 	.word	0x08006515
 80064e4:	0800651d 	.word	0x0800651d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	3308      	adds	r3, #8
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fe95 	bl	8008220 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064fc:	e00f      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	3328      	adds	r3, #40	@ 0x28
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f001 ff3c 	bl	8008384 <RCCEx_PLL3_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800651c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006526:	4bbf      	ldr	r3, [pc, #764]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006534:	4abb      	ldr	r2, [pc, #748]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006536:	430b      	orrs	r3, r1
 8006538:	6553      	str	r3, [r2, #84]	@ 0x54
 800653a:	e003      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f002 0302 	and.w	r3, r2, #2
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800655a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800655e:	460b      	mov	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	d041      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800656a:	2b05      	cmp	r3, #5
 800656c:	d824      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800656e:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065c1 	.word	0x080065c1
 8006578:	0800658d 	.word	0x0800658d
 800657c:	080065a3 	.word	0x080065a3
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	3308      	adds	r3, #8
 8006592:	2101      	movs	r1, #1
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fe43 	bl	8008220 <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	3328      	adds	r3, #40	@ 0x28
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 feea 	bl	8008384 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065ca:	4b96      	ldr	r3, [pc, #600]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ce:	f023 0107 	bic.w	r1, r3, #7
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065d8:	4a92      	ldr	r2, [pc, #584]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 0304 	and.w	r3, r2, #4
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d044      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006610:	2b05      	cmp	r3, #5
 8006612:	d825      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006614:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006669 	.word	0x08006669
 8006620:	08006635 	.word	0x08006635
 8006624:	0800664b 	.word	0x0800664b
 8006628:	08006669 	.word	0x08006669
 800662c:	08006669 	.word	0x08006669
 8006630:	08006669 	.word	0x08006669
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	3308      	adds	r3, #8
 800663a:	2101      	movs	r1, #1
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fdef 	bl	8008220 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006648:	e00f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	3328      	adds	r3, #40	@ 0x28
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fe96 	bl	8008384 <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800665e:	e004      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006672:	4b6c      	ldr	r3, [pc, #432]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006676:	f023 0107 	bic.w	r1, r3, #7
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006682:	4a68      	ldr	r2, [pc, #416]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006684:	430b      	orrs	r3, r1
 8006686:	6593      	str	r3, [r2, #88]	@ 0x58
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f002 0320 	and.w	r3, r2, #32
 800669e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066a2:	2300      	movs	r3, #0
 80066a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066ac:	460b      	mov	r3, r1
 80066ae:	4313      	orrs	r3, r2
 80066b0:	d055      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066be:	d033      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80066c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066c4:	d82c      	bhi.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ca:	d02f      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d0:	d826      	bhi.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066d6:	d02b      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80066d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066dc:	d820      	bhi.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e2:	d012      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80066e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e8:	d81a      	bhi.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80066ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f2:	d115      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f8:	3308      	adds	r3, #8
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fd8f 	bl	8008220 <RCCEx_PLL2_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006708:	e015      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	3328      	adds	r3, #40	@ 0x28
 8006710:	2102      	movs	r1, #2
 8006712:	4618      	mov	r0, r3
 8006714:	f001 fe36 	bl	8008384 <RCCEx_PLL3_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800671e:	e00a      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006726:	e006      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006728:	bf00      	nop
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800673e:	4b39      	ldr	r3, [pc, #228]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674e:	4a35      	ldr	r2, [pc, #212]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006750:	430b      	orrs	r3, r1
 8006752:	6553      	str	r3, [r2, #84]	@ 0x54
 8006754:	e003      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800676e:	2300      	movs	r3, #0
 8006770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006774:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006778:	460b      	mov	r3, r1
 800677a:	4313      	orrs	r3, r2
 800677c:	d058      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006786:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800678a:	d033      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800678c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006790:	d82c      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006796:	d02f      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679c:	d826      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800679e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a2:	d02b      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80067a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a8:	d820      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ae:	d012      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b4:	d81a      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d022      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067be:	d115      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c4:	3308      	adds	r3, #8
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fd29 	bl	8008220 <RCCEx_PLL2_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067d4:	e015      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	3328      	adds	r3, #40	@ 0x28
 80067dc:	2102      	movs	r1, #2
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fdd0 	bl	8008384 <RCCEx_PLL3_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067ea:	e00a      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067f2:	e006      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067f4:	bf00      	nop
 80067f6:	e004      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067f8:	bf00      	nop
 80067fa:	e002      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10e      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800680a:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006816:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800681a:	4a02      	ldr	r2, [pc, #8]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006820:	e006      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800683c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006846:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	d055      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006858:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800685c:	d033      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800685e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006862:	d82c      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006868:	d02f      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800686e:	d826      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006870:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006874:	d02b      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006876:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800687a:	d820      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800687c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006880:	d012      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006886:	d81a      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d022      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006890:	d115      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3308      	adds	r3, #8
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fcc0 	bl	8008220 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068a6:	e015      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ac:	3328      	adds	r3, #40	@ 0x28
 80068ae:	2102      	movs	r1, #2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fd67 	bl	8008384 <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068bc:	e00a      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c4:	e006      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068c6:	bf00      	nop
 80068c8:	e004      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068dc:	4ba1      	ldr	r3, [pc, #644]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068ec:	4a9d      	ldr	r2, [pc, #628]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 0308 	and.w	r3, r2, #8
 8006908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006912:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d01e      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006928:	d10c      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	3328      	adds	r3, #40	@ 0x28
 8006930:	2102      	movs	r1, #2
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fd26 	bl	8008384 <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006944:	4b87      	ldr	r3, [pc, #540]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006948:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006954:	4a83      	ldr	r2, [pc, #524]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006956:	430b      	orrs	r3, r1
 8006958:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f002 0310 	and.w	r3, r2, #16
 8006966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800696a:	2300      	movs	r3, #0
 800696c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006970:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d01e      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006986:	d10c      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	3328      	adds	r3, #40	@ 0x28
 800698e:	2102      	movs	r1, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fcf7 	bl	8008384 <RCCEx_PLL3_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069a2:	4b70      	ldr	r3, [pc, #448]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80069c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069d2:	460b      	mov	r3, r1
 80069d4:	4313      	orrs	r3, r2
 80069d6:	d03e      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069e4:	d022      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80069e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ea:	d81b      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f4:	d00b      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80069f6:	e015      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	3308      	adds	r3, #8
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 fc0d 	bl	8008220 <RCCEx_PLL2_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a0c:	e00f      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	3328      	adds	r3, #40	@ 0x28
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fcb4 	bl	8008384 <RCCEx_PLL3_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a36:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a46:	4a47      	ldr	r2, [pc, #284]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a4c:	e003      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a64:	2300      	movs	r3, #0
 8006a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d03b      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a7e:	d01f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006a80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a84:	d818      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006a8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a90:	d007      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006a92:	e011      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	4a32      	ldr	r2, [pc, #200]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00f      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fc6a 	bl	8008384 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aca:	4b26      	ldr	r3, [pc, #152]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ada:	4a22      	ldr	r2, [pc, #136]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006af6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006af8:	2300      	movs	r3, #0
 8006afa:	677b      	str	r3, [r7, #116]	@ 0x74
 8006afc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b00:	460b      	mov	r3, r1
 8006b02:	4313      	orrs	r3, r2
 8006b04:	d034      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b14:	d007      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006b16:	e011      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b18:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b24:	e00e      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 fb76 	bl	8008220 <RCCEx_PLL2_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b3a:	e003      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5a:	4a02      	ldr	r2, [pc, #8]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b60:	e006      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006b62:	bf00      	nop
 8006b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b7e:	2300      	movs	r3, #0
 8006b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d00c      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	3328      	adds	r3, #40	@ 0x28
 8006b92:	2102      	movs	r1, #2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fbf5 	bl	8008384 <RCCEx_PLL3_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	d038      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bce:	d018      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd4:	d811      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bda:	d014      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be0:	d80b      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d011      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bea:	d106      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bec:	4bc3      	ldr	r3, [pc, #780]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	4ac2      	ldr	r2, [pc, #776]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bf8:	e008      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c00:	e004      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c02:	bf00      	nop
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c14:	4bb9      	ldr	r3, [pc, #740]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4ab5      	ldr	r2, [pc, #724]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c2a:	e003      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c42:	2300      	movs	r3, #0
 8006c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c50:	4baa      	ldr	r3, [pc, #680]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c5e:	4aa7      	ldr	r2, [pc, #668]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006c70:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c72:	2300      	movs	r3, #0
 8006c74:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d00a      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c80:	4b9e      	ldr	r3, [pc, #632]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c90:	4a9a      	ldr	r2, [pc, #616]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c92:	430b      	orrs	r3, r1
 8006c94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cac:	460b      	mov	r3, r1
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cb2:	4b92      	ldr	r3, [pc, #584]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc0:	4a8e      	ldr	r2, [pc, #568]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ce2:	4b86      	ldr	r3, [pc, #536]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	4a85      	ldr	r2, [pc, #532]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ce8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cec:	6113      	str	r3, [r2, #16]
 8006cee:	4b83      	ldr	r3, [pc, #524]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cf0:	6919      	ldr	r1, [r3, #16]
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006cfa:	4a80      	ldr	r2, [pc, #512]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d0e:	2300      	movs	r3, #0
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d1c:	4b77      	ldr	r3, [pc, #476]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d20:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2a:	4a74      	ldr	r2, [pc, #464]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d3e:	2300      	movs	r3, #0
 8006d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d00a      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d50:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d5c:	4a67      	ldr	r2, [pc, #412]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d011      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3308      	adds	r3, #8
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fa4a 	bl	8008220 <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	2100      	movs	r1, #0
 8006dac:	6239      	str	r1, [r7, #32]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d011      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa2a 	bl	8008220 <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	2100      	movs	r1, #0
 8006dec:	61b9      	str	r1, [r7, #24]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3308      	adds	r3, #8
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fa0a 	bl	8008220 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6139      	str	r1, [r7, #16]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	d011      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e42:	3328      	adds	r3, #40	@ 0x28
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fa9c 	bl	8008384 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	d011      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	3328      	adds	r3, #40	@ 0x28
 8006e84:	2101      	movs	r1, #1
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fa7c 	bl	8008384 <RCCEx_PLL3_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	607b      	str	r3, [r7, #4]
 8006eb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d011      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	3328      	adds	r3, #40	@ 0x28
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fa5c 	bl	8008384 <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006ee2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e000      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006efc:	58024400 	.word	0x58024400

08006f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	@ 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006f12:	430b      	orrs	r3, r1
 8006f14:	f040 8094 	bne.w	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006f18:	4b9e      	ldr	r3, [pc, #632]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	f200 8087 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f95 	.word	0x08006f95
 8006f3c:	08007031 	.word	0x08007031
 8006f40:	08006fbd 	.word	0x08006fbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f44:	4b93      	ldr	r3, [pc, #588]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f50:	d108      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f810 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	f000 bd45 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f68:	f000 bd41 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f6c:	4b89      	ldr	r3, [pc, #548]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f78:	d108      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7a:	f107 0318 	add.w	r3, r7, #24
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fd54 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f88:	f000 bd31 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f90:	f000 bd2d 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f94:	4b7f      	ldr	r3, [pc, #508]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fa0:	d108      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fe94 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb0:	f000 bd1d 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb8:	f000 bd19 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fbc:	4b75      	ldr	r3, [pc, #468]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc6:	4b73      	ldr	r3, [pc, #460]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd8:	4b6e      	ldr	r3, [pc, #440]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	08db      	lsrs	r3, r3, #3
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fea:	e01f      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fec:	4b69      	ldr	r3, [pc, #420]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff8:	d106      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007000:	d102      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007002:	4b66      	ldr	r3, [pc, #408]	@ (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007006:	e011      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007008:	4b62      	ldr	r3, [pc, #392]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007014:	d106      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800701e:	4b60      	ldr	r3, [pc, #384]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007022:	e003      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007028:	f000 bce1 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800702c:	f000 bcdf 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007030:	4b5c      	ldr	r3, [pc, #368]	@ (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007034:	f000 bcdb 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	f000 bcd7 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007044:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007048:	430b      	orrs	r3, r1
 800704a:	f040 80ad 	bne.w	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800704e:	4b51      	ldr	r3, [pc, #324]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007052:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007056:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	d056      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007066:	f200 8090 	bhi.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	2bc0      	cmp	r3, #192	@ 0xc0
 800706e:	f000 8088 	beq.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	2bc0      	cmp	r3, #192	@ 0xc0
 8007076:	f200 8088 	bhi.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	2b80      	cmp	r3, #128	@ 0x80
 800707e:	d032      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	2b80      	cmp	r3, #128	@ 0x80
 8007084:	f200 8081 	bhi.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2b40      	cmp	r3, #64	@ 0x40
 8007092:	d014      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007094:	e079      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007096:	4b3f      	ldr	r3, [pc, #252]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070a2:	d108      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 ff67 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070b2:	f000 bc9c 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ba:	f000 bc98 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070be:	4b35      	ldr	r3, [pc, #212]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ca:	d108      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070cc:	f107 0318 	add.w	r3, r7, #24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fcab 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070da:	f000 bc88 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e2:	f000 bc84 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070f2:	d108      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fdeb 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007102:	f000 bc74 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710a:	f000 bc70 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800710e:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007112:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007118:	4b1e      	ldr	r3, [pc, #120]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d10c      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800712a:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	4a18      	ldr	r2, [pc, #96]	@ (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007136:	fa22 f303 	lsr.w	r3, r2, r3
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800713c:	e01f      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800713e:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800714a:	d106      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800714c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007154:	4b11      	ldr	r3, [pc, #68]	@ (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007158:	e011      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800715a:	4b0e      	ldr	r3, [pc, #56]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007166:	d106      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716e:	d102      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007174:	e003      	b.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800717a:	f000 bc38 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800717e:	f000 bc36 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007182:	4b08      	ldr	r3, [pc, #32]	@ (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007186:	f000 bc32 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718e:	f000 bc2e 	b.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
 8007198:	03d09000 	.word	0x03d09000
 800719c:	003d0900 	.word	0x003d0900
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80071a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80071b0:	430b      	orrs	r3, r1
 80071b2:	f040 809c 	bne.w	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80071b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80071be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071c6:	d054      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071ce:	f200 808b 	bhi.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071d8:	f000 8083 	beq.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071e2:	f200 8081 	bhi.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ec:	d02f      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071f4:	d878      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007202:	d012      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007204:	e070      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007206:	4b8a      	ldr	r3, [pc, #552]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800720e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007212:	d107      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007218:	4618      	mov	r0, r3
 800721a:	f000 feaf 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007222:	e3e4      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007228:	e3e1      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800722a:	4b81      	ldr	r3, [pc, #516]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007236:	d107      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007238:	f107 0318 	add.w	r3, r7, #24
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fbf5 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007246:	e3d2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e3cf      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800724e:	4b78      	ldr	r3, [pc, #480]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725a:	d107      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800725c:	f107 030c 	add.w	r3, r7, #12
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fd37 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726a:	e3c0      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007270:	e3bd      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007272:	4b6f      	ldr	r3, [pc, #444]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800727c:	4b6c      	ldr	r3, [pc, #432]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b04      	cmp	r3, #4
 8007286:	d10c      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728e:	4b68      	ldr	r3, [pc, #416]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	08db      	lsrs	r3, r3, #3
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	4a66      	ldr	r2, [pc, #408]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a0:	e01e      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a2:	4b63      	ldr	r3, [pc, #396]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ae:	d106      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80072b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072b6:	d102      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072bc:	e010      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072be:	4b5c      	ldr	r3, [pc, #368]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ca:	d106      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d2:	d102      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d4:	4b59      	ldr	r3, [pc, #356]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072de:	e386      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072e0:	e385      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072e2:	4b57      	ldr	r3, [pc, #348]	@ (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e6:	e382      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ec:	e37f      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80072f6:	430b      	orrs	r3, r1
 80072f8:	f040 80a7 	bne.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80072fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007300:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007304:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800730c:	d055      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007314:	f200 8096 	bhi.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800731e:	f000 8084 	beq.w	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007328:	f200 808c 	bhi.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007332:	d030      	beq.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800733a:	f200 8083 	bhi.w	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800734a:	d012      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800734c:	e07a      	b.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800734e:	4b38      	ldr	r3, [pc, #224]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800735a:	d107      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fe0b 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736a:	e340      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007370:	e33d      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007372:	4b2f      	ldr	r3, [pc, #188]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800737a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800737e:	d107      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007380:	f107 0318 	add.w	r3, r7, #24
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fb51 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800738e:	e32e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007394:	e32b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007396:	4b26      	ldr	r3, [pc, #152]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800739e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a2:	d107      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a4:	f107 030c 	add.w	r3, r7, #12
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fc93 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b2:	e31c      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b8:	e319      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d6:	4b16      	ldr	r3, [pc, #88]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	08db      	lsrs	r3, r3, #3
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	4a14      	ldr	r2, [pc, #80]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e8:	e01e      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ea:	4b11      	ldr	r3, [pc, #68]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f6:	d106      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073fe:	d102      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007400:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007404:	e010      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007412:	d106      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800741a:	d102      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800741c:	4b07      	ldr	r3, [pc, #28]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007420:	e002      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007426:	e2e2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007428:	e2e1      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800742a:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742e:	e2de      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007430:	58024400 	.word	0x58024400
 8007434:	03d09000 	.word	0x03d09000
 8007438:	003d0900 	.word	0x003d0900
 800743c:	00f42400 	.word	0x00f42400
 8007440:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007448:	e2d1      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800744a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007452:	430b      	orrs	r3, r1
 8007454:	f040 809c 	bne.w	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007458:	4b93      	ldr	r3, [pc, #588]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800745a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007460:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007468:	d054      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007470:	f200 808b 	bhi.w	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800747a:	f000 8083 	beq.w	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007484:	f200 8081 	bhi.w	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800748e:	d02f      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007496:	d878      	bhi.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a4:	d012      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80074a6:	e070      	b.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074a8:	4b7f      	ldr	r3, [pc, #508]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b4:	d107      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fd5e 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c4:	e293      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ca:	e290      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074cc:	4b76      	ldr	r3, [pc, #472]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d8:	d107      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 faa4 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e8:	e281      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ee:	e27e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074f0:	4b6d      	ldr	r3, [pc, #436]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fc:	d107      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fbe6 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750c:	e26f      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007512:	e26c      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007514:	4b64      	ldr	r3, [pc, #400]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800751e:	4b62      	ldr	r3, [pc, #392]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d10c      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800752a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007530:	4b5d      	ldr	r3, [pc, #372]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	4a5c      	ldr	r2, [pc, #368]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007542:	e01e      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007544:	4b58      	ldr	r3, [pc, #352]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007550:	d106      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007558:	d102      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800755a:	4b55      	ldr	r3, [pc, #340]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800755e:	e010      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007560:	4b51      	ldr	r3, [pc, #324]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800756c:	d106      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800756e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007574:	d102      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007576:	4b4f      	ldr	r3, [pc, #316]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800757a:	e002      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007580:	e235      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007582:	e234      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007584:	4b4c      	ldr	r3, [pc, #304]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007588:	e231      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800758e:	e22e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007594:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007598:	430b      	orrs	r3, r1
 800759a:	f040 808f 	bne.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800759e:	4b42      	ldr	r3, [pc, #264]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075ae:	d06b      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80075b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075b6:	d874      	bhi.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075be:	d056      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c6:	d86c      	bhi.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075ce:	d03b      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075d6:	d864      	bhi.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075de:	d021      	beq.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e6:	d85c      	bhi.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f4:	d004      	beq.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80075f6:	e054      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7fe fa62 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 80075fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075fe:	e1f6      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007600:	4b29      	ldr	r3, [pc, #164]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760c:	d107      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760e:	f107 0318 	add.w	r3, r7, #24
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fa0a 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800761c:	e1e7      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007622:	e1e4      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007624:	4b20      	ldr	r3, [pc, #128]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007630:	d107      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007632:	f107 030c 	add.w	r3, r7, #12
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fb4c 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007640:	e1d5      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007646:	e1d2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007648:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d109      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007654:	4b14      	ldr	r3, [pc, #80]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	08db      	lsrs	r3, r3, #3
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	4a13      	ldr	r2, [pc, #76]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007666:	e1c2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766c:	e1bf      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767a:	d102      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800767c:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007680:	e1b5      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007686:	e1b2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007688:	4b07      	ldr	r3, [pc, #28]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007694:	d102      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800769a:	e1a8      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e1a5      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a6:	e1a2      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076a8:	58024400 	.word	0x58024400
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	003d0900 	.word	0x003d0900
 80076b4:	00f42400 	.word	0x00f42400
 80076b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80076bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80076c4:	430b      	orrs	r3, r1
 80076c6:	d173      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80076c8:	4b9c      	ldr	r3, [pc, #624]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80076d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d8:	d02f      	beq.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076e0:	d863      	bhi.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ee:	d012      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80076f0:	e05b      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076f2:	4b92      	ldr	r3, [pc, #584]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076fe:	d107      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007700:	f107 0318 	add.w	r3, r7, #24
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f991 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800770e:	e16e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	e16b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007716:	4b89      	ldr	r3, [pc, #548]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800771e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007722:	d107      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fad3 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007732:	e15c      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	e159      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800773a:	4b80      	ldr	r3, [pc, #512]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007744:	4b7d      	ldr	r3, [pc, #500]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d10c      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007756:	4b79      	ldr	r3, [pc, #484]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	08db      	lsrs	r3, r3, #3
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	4a77      	ldr	r2, [pc, #476]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007762:	fa22 f303 	lsr.w	r3, r2, r3
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007768:	e01e      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800776a:	4b74      	ldr	r3, [pc, #464]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007776:	d106      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800777e:	d102      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007780:	4b70      	ldr	r3, [pc, #448]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007784:	e010      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007786:	4b6d      	ldr	r3, [pc, #436]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007792:	d106      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779a:	d102      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800779c:	4b6a      	ldr	r3, [pc, #424]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a0:	e002      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077a6:	e122      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077a8:	e121      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ae:	e11e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80077b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80077b8:	430b      	orrs	r3, r1
 80077ba:	d133      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80077bc:	4b5f      	ldr	r3, [pc, #380]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d2:	d012      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80077d4:	e023      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077d6:	4b59      	ldr	r3, [pc, #356]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077e2:	d107      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fbc7 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f2:	e0fc      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f8:	e0f9      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077fa:	4b50      	ldr	r3, [pc, #320]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007806:	d107      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007808:	f107 0318 	add.w	r3, r7, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f90d 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007816:	e0ea      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781c:	e0e7      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007822:	e0e4      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800782c:	430b      	orrs	r3, r1
 800782e:	f040 808d 	bne.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007832:	4b42      	ldr	r3, [pc, #264]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007836:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800783a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007842:	d06b      	beq.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800784a:	d874      	bhi.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	d056      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785a:	d86c      	bhi.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007862:	d03b      	beq.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800786a:	d864      	bhi.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007872:	d021      	beq.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800787a:	d85c      	bhi.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	2b00      	cmp	r3, #0
 8007880:	d004      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007888:	d004      	beq.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800788a:	e054      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800788c:	f000 f8b8 	bl	8007a00 <HAL_RCCEx_GetD3PCLK1Freq>
 8007890:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007892:	e0ac      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007894:	4b29      	ldr	r3, [pc, #164]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800789c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078a0:	d107      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a2:	f107 0318 	add.w	r3, r7, #24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f8c0 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b0:	e09d      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b6:	e09a      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078b8:	4b20      	ldr	r3, [pc, #128]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fa02 	bl	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d4:	e08b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078da:	e088      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078dc:	4b17      	ldr	r3, [pc, #92]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d109      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e8:	4b14      	ldr	r3, [pc, #80]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	08db      	lsrs	r3, r3, #3
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	4a13      	ldr	r2, [pc, #76]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078f4:	fa22 f303 	lsr.w	r3, r2, r3
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078fa:	e078      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007900:	e075      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007902:	4b0e      	ldr	r3, [pc, #56]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007910:	4b0c      	ldr	r3, [pc, #48]	@ (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007914:	e06b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791a:	e068      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800791c:	4b07      	ldr	r3, [pc, #28]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007928:	d102      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800792a:	4b07      	ldr	r3, [pc, #28]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800792e:	e05e      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007934:	e05b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800793a:	e058      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800793c:	58024400 	.word	0x58024400
 8007940:	03d09000 	.word	0x03d09000
 8007944:	003d0900 	.word	0x003d0900
 8007948:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800794c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007950:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007954:	430b      	orrs	r3, r1
 8007956:	d148      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007958:	4b27      	ldr	r3, [pc, #156]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007960:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007968:	d02a      	beq.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800796a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007970:	d838      	bhi.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800797e:	d00d      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007980:	e030      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007982:	4b1d      	ldr	r3, [pc, #116]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007990:	4b1a      	ldr	r3, [pc, #104]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007994:	e02b      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799a:	e028      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800799c:	4b16      	ldr	r3, [pc, #88]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079a8:	d107      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fae4 	bl	8007f7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b8:	e019      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079be:	e016      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079c0:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079cc:	d107      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ce:	f107 0318 	add.w	r3, r7, #24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f82a 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079dc:	e007      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e2:	e004      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e8:	e001      	b.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80079ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3740      	adds	r7, #64	@ 0x40
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	58024400 	.word	0x58024400
 80079fc:	00f42400 	.word	0x00f42400

08007a00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a04:	f7fe f82c 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	091b      	lsrs	r3, r3, #4
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	4904      	ldr	r1, [pc, #16]	@ (8007a28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a16:	5ccb      	ldrb	r3, [r1, r3]
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	58024400 	.word	0x58024400
 8007a28:	0800e778 	.word	0x0800e778

08007a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b089      	sub	sp, #36	@ 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a34:	4ba1      	ldr	r3, [pc, #644]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007a3e:	4b9f      	ldr	r3, [pc, #636]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	0b1b      	lsrs	r3, r3, #12
 8007a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	091b      	lsrs	r3, r3, #4
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a56:	4b99      	ldr	r3, [pc, #612]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8111 	beq.w	8007c9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f000 8083 	beq.w	8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	f200 80a1 	bhi.w	8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d056      	beq.n	8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a96:	e099      	b.n	8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a98:	4b88      	ldr	r3, [pc, #544]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02d      	beq.n	8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa4:	4b85      	ldr	r3, [pc, #532]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	08db      	lsrs	r3, r3, #3
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	4a84      	ldr	r2, [pc, #528]	@ (8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ace:	4b7b      	ldr	r3, [pc, #492]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007afe:	e087      	b.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b12:	4b6a      	ldr	r3, [pc, #424]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b42:	e065      	b.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b56:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b86:	e043      	b.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9a:	4b48      	ldr	r3, [pc, #288]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bca:	e021      	b.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bde:	4b37      	ldr	r3, [pc, #220]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c10:	4b2a      	ldr	r3, [pc, #168]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c14:	0a5b      	lsrs	r3, r3, #9
 8007c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c36:	ee17 2a90 	vmov	r2, s15
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	0c1b      	lsrs	r3, r3, #16
 8007c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c64:	ee17 2a90 	vmov	r2, s15
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007c6c:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	0e1b      	lsrs	r3, r3, #24
 8007c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c92:	ee17 2a90 	vmov	r2, s15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c9a:	e008      	b.n	8007cae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	609a      	str	r2, [r3, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	3724      	adds	r7, #36	@ 0x24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	03d09000 	.word	0x03d09000
 8007cc4:	46000000 	.word	0x46000000
 8007cc8:	4c742400 	.word	0x4c742400
 8007ccc:	4a742400 	.word	0x4a742400
 8007cd0:	4b742400 	.word	0x4b742400

08007cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b089      	sub	sp, #36	@ 0x24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cdc:	4ba1      	ldr	r3, [pc, #644]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ce6:	4b9f      	ldr	r3, [pc, #636]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	0d1b      	lsrs	r3, r3, #20
 8007cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007cfe:	4b99      	ldr	r3, [pc, #612]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	08db      	lsrs	r3, r3, #3
 8007d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	fb02 f303 	mul.w	r3, r2, r3
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8111 	beq.w	8007f44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	f000 8083 	beq.w	8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	f200 80a1 	bhi.w	8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d056      	beq.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d3e:	e099      	b.n	8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d40:	4b88      	ldr	r3, [pc, #544]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02d      	beq.n	8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d4c:	4b85      	ldr	r3, [pc, #532]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	08db      	lsrs	r3, r3, #3
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	4a84      	ldr	r2, [pc, #528]	@ (8007f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b7b      	ldr	r3, [pc, #492]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007da6:	e087      	b.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b6a      	ldr	r3, [pc, #424]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dea:	e065      	b.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	4b59      	ldr	r3, [pc, #356]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e2e:	e043      	b.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e42:	4b48      	ldr	r3, [pc, #288]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e72:	e021      	b.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e86:	4b37      	ldr	r3, [pc, #220]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	0a5b      	lsrs	r3, r3, #9
 8007ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ede:	ee17 2a90 	vmov	r2, s15
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef0:	ee07 3a90 	vmov	s15, r3
 8007ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f0c:	ee17 2a90 	vmov	r2, s15
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f14:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	0e1b      	lsrs	r3, r3, #24
 8007f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3a:	ee17 2a90 	vmov	r2, s15
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f42:	e008      	b.n	8007f56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
}
 8007f56:	bf00      	nop
 8007f58:	3724      	adds	r7, #36	@ 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	03d09000 	.word	0x03d09000
 8007f6c:	46000000 	.word	0x46000000
 8007f70:	4c742400 	.word	0x4c742400
 8007f74:	4a742400 	.word	0x4a742400
 8007f78:	4b742400 	.word	0x4b742400

08007f7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b089      	sub	sp, #36	@ 0x24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f84:	4ba0      	ldr	r3, [pc, #640]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	091b      	lsrs	r3, r3, #4
 8007f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f9a:	4b9b      	ldr	r3, [pc, #620]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007fa4:	4b98      	ldr	r3, [pc, #608]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa8:	08db      	lsrs	r3, r3, #3
 8007faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8111 	beq.w	80081ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	f000 8083 	beq.w	80080d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	f200 80a1 	bhi.w	800811a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d056      	beq.n	8008092 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007fe4:	e099      	b.n	800811a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fe6:	4b88      	ldr	r3, [pc, #544]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02d      	beq.n	800804e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ff2:	4b85      	ldr	r3, [pc, #532]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	08db      	lsrs	r3, r3, #3
 8007ff8:	f003 0303 	and.w	r3, r3, #3
 8007ffc:	4a83      	ldr	r2, [pc, #524]	@ (800820c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8008002:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801c:	4b7a      	ldr	r3, [pc, #488]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008030:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008048:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800804c:	e087      	b.n	800815e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008058:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800805c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008060:	4b69      	ldr	r3, [pc, #420]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008070:	ed97 6a03 	vldr	s12, [r7, #12]
 8008074:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008090:	e065      	b.n	800815e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008218 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80080a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a4:	4b58      	ldr	r3, [pc, #352]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080d4:	e043      	b.n	800815e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800821c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80080e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e8:	4b47      	ldr	r3, [pc, #284]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008108:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800810c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008118:	e021      	b.n	800815e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008124:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008214 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812c:	4b36      	ldr	r3, [pc, #216]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800812e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008140:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008210 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800815c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800815e:	4b2a      	ldr	r3, [pc, #168]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008162:	0a5b      	lsrs	r3, r3, #9
 8008164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008178:	edd7 6a07 	vldr	s13, [r7, #28]
 800817c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008184:	ee17 2a90 	vmov	r2, s15
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800818c:	4b1e      	ldr	r3, [pc, #120]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800818e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b2:	ee17 2a90 	vmov	r2, s15
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081be:	0e1b      	lsrs	r3, r3, #24
 80081c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80081d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081e0:	ee17 2a90 	vmov	r2, s15
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80081e8:	e008      	b.n	80081fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	bf00      	nop
 80081fe:	3724      	adds	r7, #36	@ 0x24
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	58024400 	.word	0x58024400
 800820c:	03d09000 	.word	0x03d09000
 8008210:	46000000 	.word	0x46000000
 8008214:	4c742400 	.word	0x4c742400
 8008218:	4a742400 	.word	0x4a742400
 800821c:	4b742400 	.word	0x4b742400

08008220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800822e:	4b53      	ldr	r3, [pc, #332]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	2b03      	cmp	r3, #3
 8008238:	d101      	bne.n	800823e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e099      	b.n	8008372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800823e:	4b4f      	ldr	r3, [pc, #316]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a4e      	ldr	r2, [pc, #312]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008244:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800824a:	f7fa f905 	bl	8002458 <HAL_GetTick>
 800824e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008250:	e008      	b.n	8008264 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008252:	f7fa f901 	bl	8002458 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e086      	b.n	8008372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008264:	4b45      	ldr	r3, [pc, #276]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008270:	4b42      	ldr	r3, [pc, #264]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008274:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	031b      	lsls	r3, r3, #12
 800827e:	493f      	ldr	r1, [pc, #252]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	628b      	str	r3, [r1, #40]	@ 0x28
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	3b01      	subs	r3, #1
 8008294:	025b      	lsls	r3, r3, #9
 8008296:	b29b      	uxth	r3, r3
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	3b01      	subs	r3, #1
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	061b      	lsls	r3, r3, #24
 80082b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082b4:	4931      	ldr	r1, [pc, #196]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082ba:	4b30      	ldr	r3, [pc, #192]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	492d      	ldr	r1, [pc, #180]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80082cc:	4b2b      	ldr	r3, [pc, #172]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d0:	f023 0220 	bic.w	r2, r3, #32
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	4928      	ldr	r1, [pc, #160]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80082de:	4b27      	ldr	r3, [pc, #156]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	4a26      	ldr	r2, [pc, #152]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082e4:	f023 0310 	bic.w	r3, r3, #16
 80082e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082ea:	4b24      	ldr	r3, [pc, #144]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082ee:	4b24      	ldr	r3, [pc, #144]	@ (8008380 <RCCEx_PLL2_Config+0x160>)
 80082f0:	4013      	ands	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	69d2      	ldr	r2, [r2, #28]
 80082f6:	00d2      	lsls	r2, r2, #3
 80082f8:	4920      	ldr	r1, [pc, #128]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082fe:	4b1f      	ldr	r3, [pc, #124]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a1e      	ldr	r2, [pc, #120]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008304:	f043 0310 	orr.w	r3, r3, #16
 8008308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008310:	4b1a      	ldr	r3, [pc, #104]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	4a19      	ldr	r2, [pc, #100]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008316:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800831a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800831c:	e00f      	b.n	800833e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d106      	bne.n	8008332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008324:	4b15      	ldr	r3, [pc, #84]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	4a14      	ldr	r2, [pc, #80]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 800832a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800832e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008330:	e005      	b.n	800833e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008332:	4b12      	ldr	r3, [pc, #72]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	4a11      	ldr	r2, [pc, #68]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800833c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800833e:	4b0f      	ldr	r3, [pc, #60]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a0e      	ldr	r2, [pc, #56]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008344:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834a:	f7fa f885 	bl	8002458 <HAL_GetTick>
 800834e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008350:	e008      	b.n	8008364 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008352:	f7fa f881 	bl	8002458 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e006      	b.n	8008372 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <RCCEx_PLL2_Config+0x15c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f0      	beq.n	8008352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	58024400 	.word	0x58024400
 8008380:	ffff0007 	.word	0xffff0007

08008384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008392:	4b53      	ldr	r3, [pc, #332]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d101      	bne.n	80083a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e099      	b.n	80084d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083a2:	4b4f      	ldr	r3, [pc, #316]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a4e      	ldr	r2, [pc, #312]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ae:	f7fa f853 	bl	8002458 <HAL_GetTick>
 80083b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083b4:	e008      	b.n	80083c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083b6:	f7fa f84f 	bl	8002458 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d901      	bls.n	80083c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e086      	b.n	80084d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083c8:	4b45      	ldr	r3, [pc, #276]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1f0      	bne.n	80083b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80083d4:	4b42      	ldr	r3, [pc, #264]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	051b      	lsls	r3, r3, #20
 80083e2:	493f      	ldr	r1, [pc, #252]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	025b      	lsls	r3, r3, #9
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	3b01      	subs	r3, #1
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	3b01      	subs	r3, #1
 8008412:	061b      	lsls	r3, r3, #24
 8008414:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008418:	4931      	ldr	r1, [pc, #196]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800841a:	4313      	orrs	r3, r2
 800841c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800841e:	4b30      	ldr	r3, [pc, #192]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	492d      	ldr	r1, [pc, #180]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800842c:	4313      	orrs	r3, r2
 800842e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008430:	4b2b      	ldr	r3, [pc, #172]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	4928      	ldr	r1, [pc, #160]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008442:	4b27      	ldr	r3, [pc, #156]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4a26      	ldr	r2, [pc, #152]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800844c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800844e:	4b24      	ldr	r3, [pc, #144]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008452:	4b24      	ldr	r3, [pc, #144]	@ (80084e4 <RCCEx_PLL3_Config+0x160>)
 8008454:	4013      	ands	r3, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	69d2      	ldr	r2, [r2, #28]
 800845a:	00d2      	lsls	r2, r2, #3
 800845c:	4920      	ldr	r1, [pc, #128]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800845e:	4313      	orrs	r3, r2
 8008460:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008462:	4b1f      	ldr	r3, [pc, #124]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	4a1e      	ldr	r2, [pc, #120]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800846c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008474:	4b1a      	ldr	r3, [pc, #104]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	4a19      	ldr	r2, [pc, #100]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800847a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800847e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008480:	e00f      	b.n	80084a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d106      	bne.n	8008496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008488:	4b15      	ldr	r3, [pc, #84]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a14      	ldr	r2, [pc, #80]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800848e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008494:	e005      	b.n	80084a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008496:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	4a11      	ldr	r2, [pc, #68]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 800849c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084a2:	4b0f      	ldr	r3, [pc, #60]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a0e      	ldr	r2, [pc, #56]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ae:	f7f9 ffd3 	bl	8002458 <HAL_GetTick>
 80084b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084b4:	e008      	b.n	80084c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084b6:	f7f9 ffcf 	bl	8002458 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e006      	b.n	80084d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <RCCEx_PLL3_Config+0x15c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0f0      	beq.n	80084b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	58024400 	.word	0x58024400
 80084e4:	ffff0007 	.word	0xffff0007

080084e8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e054      	b.n	80085a4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7a5b      	ldrb	r3, [r3, #9]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d105      	bne.n	8008510 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7f9 fbd8 	bl	8001cc0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f023 0120 	bic.w	r1, r3, #32
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0204 	orr.w	r2, r2, #4
 800853a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	d104      	bne.n	8008554 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2204      	movs	r2, #4
 800854e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e027      	b.n	80085a4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008554:	f7f9 ff80 	bl	8002458 <HAL_GetTick>
 8008558:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800855a:	e015      	b.n	8008588 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800855c:	f7f9 ff7c 	bl	8002458 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d90e      	bls.n	8008588 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d107      	bne.n	8008588 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2202      	movs	r2, #2
 8008582:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e00d      	b.n	80085a4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b04      	cmp	r3, #4
 8008594:	d0e2      	beq.n	800855c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e10f      	b.n	80087de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a87      	ldr	r2, [pc, #540]	@ (80087e8 <HAL_SPI_Init+0x23c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00f      	beq.n	80085ee <HAL_SPI_Init+0x42>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a86      	ldr	r2, [pc, #536]	@ (80087ec <HAL_SPI_Init+0x240>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00a      	beq.n	80085ee <HAL_SPI_Init+0x42>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a84      	ldr	r2, [pc, #528]	@ (80087f0 <HAL_SPI_Init+0x244>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d005      	beq.n	80085ee <HAL_SPI_Init+0x42>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d901      	bls.n	80085ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e0f7      	b.n	80087de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 fb82 	bl	8009cf8 <SPI_GetPacketSize>
 80085f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a7b      	ldr	r2, [pc, #492]	@ (80087e8 <HAL_SPI_Init+0x23c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00c      	beq.n	800861a <HAL_SPI_Init+0x6e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a79      	ldr	r2, [pc, #484]	@ (80087ec <HAL_SPI_Init+0x240>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <HAL_SPI_Init+0x6e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a78      	ldr	r2, [pc, #480]	@ (80087f0 <HAL_SPI_Init+0x244>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d002      	beq.n	800861a <HAL_SPI_Init+0x6e>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b08      	cmp	r3, #8
 8008618:	d811      	bhi.n	800863e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800861e:	4a72      	ldr	r2, [pc, #456]	@ (80087e8 <HAL_SPI_Init+0x23c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d009      	beq.n	8008638 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a70      	ldr	r2, [pc, #448]	@ (80087ec <HAL_SPI_Init+0x240>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d004      	beq.n	8008638 <HAL_SPI_Init+0x8c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a6f      	ldr	r2, [pc, #444]	@ (80087f0 <HAL_SPI_Init+0x244>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d104      	bne.n	8008642 <HAL_SPI_Init+0x96>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b10      	cmp	r3, #16
 800863c:	d901      	bls.n	8008642 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e0cd      	b.n	80087de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7f9 fb6c 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800867e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008688:	d119      	bne.n	80086be <HAL_SPI_Init+0x112>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008692:	d103      	bne.n	800869c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10c      	bne.n	80086be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80086a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ac:	d107      	bne.n	80086be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00f      	beq.n	80086ea <HAL_SPI_Init+0x13e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2b06      	cmp	r3, #6
 80086d0:	d90b      	bls.n	80086ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e007      	b.n	80086fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69da      	ldr	r2, [r3, #28]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008702:	431a      	orrs	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870c:	ea42 0103 	orr.w	r1, r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	ea42 0103 	orr.w	r1, r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d113      	bne.n	800879a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008784:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008798:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40013000 	.word	0x40013000
 80087ec:	40003800 	.word	0x40003800
 80087f0:	40003c00 	.word	0x40003c00

080087f4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	4613      	mov	r3, r2
 8008802:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3320      	adds	r3, #32
 800880a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800880c:	f7f9 fe24 	bl	8002458 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b01      	cmp	r3, #1
 800881c:	d001      	beq.n	8008822 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800881e:	2302      	movs	r3, #2
 8008820:	e1d1      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_SPI_Transmit+0x3a>
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e1c9      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_SPI_Transmit+0x4c>
 800883c:	2302      	movs	r3, #2
 800883e:	e1c2      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2203      	movs	r2, #3
 800884c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	88fa      	ldrh	r2, [r7, #6]
 8008862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	88fa      	ldrh	r2, [r7, #6]
 800886a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008898:	d108      	bne.n	80088ac <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	e009      	b.n	80088c0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80088be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4b96      	ldr	r3, [pc, #600]	@ (8008b20 <HAL_SPI_Transmit+0x32c>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	88f9      	ldrh	r1, [r7, #6]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	430b      	orrs	r3, r1
 80088d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0201 	orr.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ec:	d107      	bne.n	80088fe <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b0f      	cmp	r3, #15
 8008904:	d947      	bls.n	8008996 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008906:	e03f      	b.n	8008988 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b02      	cmp	r3, #2
 8008914:	d114      	bne.n	8008940 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800893e:	e023      	b.n	8008988 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008940:	f7f9 fd8a 	bl	8002458 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d803      	bhi.n	8008958 <HAL_SPI_Transmit+0x164>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008956:	d102      	bne.n	800895e <HAL_SPI_Transmit+0x16a>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d114      	bne.n	8008988 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f001 f8fc 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800896a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e11e      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1b9      	bne.n	8008908 <HAL_SPI_Transmit+0x114>
 8008994:	e0f1      	b.n	8008b7a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	2b07      	cmp	r3, #7
 800899c:	f240 80e6 	bls.w	8008b6c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80089a0:	e05d      	b.n	8008a5e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d132      	bne.n	8008a16 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d918      	bls.n	80089ee <HAL_SPI_Transmit+0x1fa>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d014      	beq.n	80089ee <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d4:	1d1a      	adds	r2, r3, #4
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b02      	subs	r3, #2
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089ec:	e037      	b.n	8008a5e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089f2:	881a      	ldrh	r2, [r3, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089fc:	1c9a      	adds	r2, r3, #2
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a14:	e023      	b.n	8008a5e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a16:	f7f9 fd1f 	bl	8002458 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d803      	bhi.n	8008a2e <HAL_SPI_Transmit+0x23a>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d102      	bne.n	8008a34 <HAL_SPI_Transmit+0x240>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d114      	bne.n	8008a5e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f001 f891 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e0b3      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d19b      	bne.n	80089a2 <HAL_SPI_Transmit+0x1ae>
 8008a6a:	e086      	b.n	8008b7a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d154      	bne.n	8008b24 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d918      	bls.n	8008ab8 <HAL_SPI_Transmit+0x2c4>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d914      	bls.n	8008ab8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	3b04      	subs	r3, #4
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ab6:	e059      	b.n	8008b6c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d917      	bls.n	8008af4 <HAL_SPI_Transmit+0x300>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d013      	beq.n	8008af4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad0:	881a      	ldrh	r2, [r3, #0]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b02      	subs	r3, #2
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008af2:	e03b      	b.n	8008b6c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3320      	adds	r3, #32
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b1e:	e025      	b.n	8008b6c <HAL_SPI_Transmit+0x378>
 8008b20:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b24:	f7f9 fc98 	bl	8002458 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d803      	bhi.n	8008b3c <HAL_SPI_Transmit+0x348>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	d102      	bne.n	8008b42 <HAL_SPI_Transmit+0x34e>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d114      	bne.n	8008b6c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f001 f80a 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e02c      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f47f af79 	bne.w	8008a6c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2200      	movs	r2, #0
 8008b82:	2108      	movs	r1, #8
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f001 f889 	bl	8009c9c <SPI_WaitOnFlagUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 ffdb 	bl	8009b5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be4:	095b      	lsrs	r3, r3, #5
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3301      	adds	r3, #1
 8008bea:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3330      	adds	r3, #48	@ 0x30
 8008bf2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bf4:	f7f9 fc30 	bl	8002458 <HAL_GetTick>
 8008bf8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d001      	beq.n	8008c0a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008c06:	2302      	movs	r3, #2
 8008c08:	e250      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_SPI_Receive+0x46>
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e248      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_SPI_Receive+0x58>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e241      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2204      	movs	r2, #4
 8008c34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008c80:	d108      	bne.n	8008c94 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e009      	b.n	8008ca8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008ca6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4b95      	ldr	r3, [pc, #596]	@ (8008f04 <HAL_SPI_Receive+0x334>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	88f9      	ldrh	r1, [r7, #6]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cd4:	d107      	bne.n	8008ce6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d96c      	bls.n	8008dc8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008cee:	e064      	b.n	8008dba <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d114      	bne.n	8008d30 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d2e:	e044      	b.n	8008dba <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	8bfa      	ldrh	r2, [r7, #30]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d919      	bls.n	8008d72 <HAL_SPI_Receive+0x1a2>
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d014      	beq.n	8008d72 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d52:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d70:	e023      	b.n	8008dba <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d72:	f7f9 fb71 	bl	8002458 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d803      	bhi.n	8008d8a <HAL_SPI_Receive+0x1ba>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d88:	d102      	bne.n	8008d90 <HAL_SPI_Receive+0x1c0>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d114      	bne.n	8008dba <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fee3 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e178      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d194      	bne.n	8008cf0 <HAL_SPI_Receive+0x120>
 8008dc6:	e15e      	b.n	8009086 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	2b07      	cmp	r3, #7
 8008dce:	f240 8153 	bls.w	8009078 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008dd2:	e08f      	b.n	8008ef4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d114      	bne.n	8008e14 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	8812      	ldrh	r2, [r2, #0]
 8008df2:	b292      	uxth	r2, r2
 8008df4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfa:	1c9a      	adds	r2, r3, #2
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e12:	e06f      	b.n	8008ef4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	8bfa      	ldrh	r2, [r7, #30]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d924      	bls.n	8008e6c <HAL_SPI_Receive+0x29c>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01f      	beq.n	8008e6c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	8812      	ldrh	r2, [r2, #0]
 8008e34:	b292      	uxth	r2, r2
 8008e36:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e3c:	1c9a      	adds	r2, r3, #2
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	8812      	ldrh	r2, [r2, #0]
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e52:	1c9a      	adds	r2, r3, #2
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b02      	subs	r3, #2
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e6a:	e043      	b.n	8008ef4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d119      	bne.n	8008eac <HAL_SPI_Receive+0x2dc>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d014      	beq.n	8008eac <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	8812      	ldrh	r2, [r2, #0]
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e92:	1c9a      	adds	r2, r3, #2
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eaa:	e023      	b.n	8008ef4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eac:	f7f9 fad4 	bl	8002458 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d803      	bhi.n	8008ec4 <HAL_SPI_Receive+0x2f4>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d102      	bne.n	8008eca <HAL_SPI_Receive+0x2fa>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d114      	bne.n	8008ef4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fe46 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e0db      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f af69 	bne.w	8008dd4 <HAL_SPI_Receive+0x204>
 8008f02:	e0c0      	b.n	8009086 <HAL_SPI_Receive+0x4b6>
 8008f04:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d117      	bne.n	8008f4e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	b2d2      	uxtb	r2, r2
 8008f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008f4c:	e094      	b.n	8009078 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	8bfa      	ldrh	r2, [r7, #30]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d946      	bls.n	8008fea <HAL_SPI_Receive+0x41a>
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d041      	beq.n	8008fea <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	3b04      	subs	r3, #4
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008fe8:	e046      	b.n	8009078 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d81c      	bhi.n	8009030 <HAL_SPI_Receive+0x460>
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d017      	beq.n	8009030 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800902e:	e023      	b.n	8009078 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009030:	f7f9 fa12 	bl	8002458 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d803      	bhi.n	8009048 <HAL_SPI_Receive+0x478>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009046:	d102      	bne.n	800904e <HAL_SPI_Receive+0x47e>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d114      	bne.n	8009078 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fd84 	bl	8009b5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800905a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e019      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	f47f af41 	bne.w	8008f08 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fd68 	bl	8009b5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80090aa:	2300      	movs	r3, #0
  }
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	@ 0x38
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3320      	adds	r3, #32
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3330      	adds	r3, #48	@ 0x30
 80090d0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3301      	adds	r3, #1
 80090dc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090de:	f7f9 f9bb 	bl	8002458 <HAL_GetTick>
 80090e2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80090e8:	887b      	ldrh	r3, [r7, #2]
 80090ea:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d001      	beq.n	80090fc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80090f8:	2302      	movs	r3, #2
 80090fa:	e310      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <HAL_SPI_TransmitReceive+0x5a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_SPI_TransmitReceive+0x5a>
 8009108:	887b      	ldrh	r3, [r7, #2]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e305      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009118:	2b01      	cmp	r3, #1
 800911a:	d101      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x6c>
 800911c:	2302      	movs	r3, #2
 800911e:	e2fe      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2205      	movs	r2, #5
 800912c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	887a      	ldrh	r2, [r7, #2]
 8009142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	887a      	ldrh	r2, [r7, #2]
 800914a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	887a      	ldrh	r2, [r7, #2]
 8009158:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	887a      	ldrh	r2, [r7, #2]
 8009160:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800917e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a70      	ldr	r2, [pc, #448]	@ (8009348 <HAL_SPI_TransmitReceive+0x294>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_SPI_TransmitReceive+0xea>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a6f      	ldr	r2, [pc, #444]	@ (800934c <HAL_SPI_TransmitReceive+0x298>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_SPI_TransmitReceive+0xea>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a6d      	ldr	r2, [pc, #436]	@ (8009350 <HAL_SPI_TransmitReceive+0x29c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d102      	bne.n	80091a4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800919e:	2310      	movs	r3, #16
 80091a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a2:	e001      	b.n	80091a8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80091a4:	2308      	movs	r3, #8
 80091a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	4b69      	ldr	r3, [pc, #420]	@ (8009354 <HAL_SPI_TransmitReceive+0x2a0>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	8879      	ldrh	r1, [r7, #2]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091d4:	d107      	bne.n	80091e6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	f240 80a2 	bls.w	8009334 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	089b      	lsrs	r3, r3, #2
 80091f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091f6:	e094      	b.n	8009322 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b02      	cmp	r3, #2
 8009204:	d120      	bne.n	8009248 <HAL_SPI_TransmitReceive+0x194>
 8009206:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01d      	beq.n	8009248 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800920c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800920e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009214:	429a      	cmp	r2, r3
 8009216:	d217      	bcs.n	8009248 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6812      	ldr	r2, [r2, #0]
 8009222:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009228:	1d1a      	adds	r2, r3, #4
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009246:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009250:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d065      	beq.n	8009322 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d118      	bne.n	8009296 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800926c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800926e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009292:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009294:	e045      	b.n	8009322 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009296:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009298:	8bfb      	ldrh	r3, [r7, #30]
 800929a:	429a      	cmp	r2, r3
 800929c:	d21d      	bcs.n	80092da <HAL_SPI_TransmitReceive+0x226>
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d018      	beq.n	80092da <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092b2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b8:	1d1a      	adds	r2, r3, #4
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092d8:	e023      	b.n	8009322 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092da:	f7f9 f8bd 	bl	8002458 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d803      	bhi.n	80092f2 <HAL_SPI_TransmitReceive+0x23e>
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d102      	bne.n	80092f8 <HAL_SPI_TransmitReceive+0x244>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d114      	bne.n	8009322 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fc2f 	bl	8009b5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009304:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e1fd      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009322:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009324:	2b00      	cmp	r3, #0
 8009326:	f47f af67 	bne.w	80091f8 <HAL_SPI_TransmitReceive+0x144>
 800932a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800932c:	2b00      	cmp	r3, #0
 800932e:	f47f af63 	bne.w	80091f8 <HAL_SPI_TransmitReceive+0x144>
 8009332:	e1ce      	b.n	80096d2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	2b07      	cmp	r3, #7
 800933a:	f240 81c2 	bls.w	80096c2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	085b      	lsrs	r3, r3, #1
 8009342:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009344:	e0c9      	b.n	80094da <HAL_SPI_TransmitReceive+0x426>
 8009346:	bf00      	nop
 8009348:	40013000 	.word	0x40013000
 800934c:	40003800 	.word	0x40003800
 8009350:	40003c00 	.word	0x40003c00
 8009354:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b02      	cmp	r3, #2
 8009364:	d11f      	bne.n	80093a6 <HAL_SPI_TransmitReceive+0x2f2>
 8009366:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01c      	beq.n	80093a6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800936c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800936e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009374:	429a      	cmp	r2, r3
 8009376:	d216      	bcs.n	80093a6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800937c:	881a      	ldrh	r2, [r3, #0]
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009386:	1c9a      	adds	r2, r3, #2
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80093ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 8092 	beq.w	80094da <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d118      	bne.n	80093f6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c8:	6a3a      	ldr	r2, [r7, #32]
 80093ca:	8812      	ldrh	r2, [r2, #0]
 80093cc:	b292      	uxth	r2, r2
 80093ce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d4:	1c9a      	adds	r2, r3, #2
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80093f4:	e071      	b.n	80094da <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80093f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093f8:	8bfb      	ldrh	r3, [r7, #30]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d228      	bcs.n	8009450 <HAL_SPI_TransmitReceive+0x39c>
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d023      	beq.n	8009450 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800940c:	6a3a      	ldr	r2, [r7, #32]
 800940e:	8812      	ldrh	r2, [r2, #0]
 8009410:	b292      	uxth	r2, r2
 8009412:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009418:	1c9a      	adds	r2, r3, #2
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009422:	6a3a      	ldr	r2, [r7, #32]
 8009424:	8812      	ldrh	r2, [r2, #0]
 8009426:	b292      	uxth	r2, r2
 8009428:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b02      	subs	r3, #2
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800944c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800944e:	e044      	b.n	80094da <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009450:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009452:	2b01      	cmp	r3, #1
 8009454:	d11d      	bne.n	8009492 <HAL_SPI_TransmitReceive+0x3de>
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d018      	beq.n	8009492 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009464:	6a3a      	ldr	r2, [r7, #32]
 8009466:	8812      	ldrh	r2, [r2, #0]
 8009468:	b292      	uxth	r2, r2
 800946a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009470:	1c9a      	adds	r2, r3, #2
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800948e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009490:	e023      	b.n	80094da <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009492:	f7f8 ffe1 	bl	8002458 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800949e:	429a      	cmp	r2, r3
 80094a0:	d803      	bhi.n	80094aa <HAL_SPI_TransmitReceive+0x3f6>
 80094a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d102      	bne.n	80094b0 <HAL_SPI_TransmitReceive+0x3fc>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d114      	bne.n	80094da <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fb53 	bl	8009b5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e121      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80094da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f47f af3b 	bne.w	8009358 <HAL_SPI_TransmitReceive+0x2a4>
 80094e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f47f af37 	bne.w	8009358 <HAL_SPI_TransmitReceive+0x2a4>
 80094ea:	e0f2      	b.n	80096d2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d121      	bne.n	800953e <HAL_SPI_TransmitReceive+0x48a>
 80094fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01e      	beq.n	800953e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009500:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009502:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009506:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009508:	429a      	cmp	r2, r3
 800950a:	d218      	bcs.n	800953e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3320      	adds	r3, #32
 8009516:	7812      	ldrb	r2, [r2, #0]
 8009518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800953c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009546:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80ba 	beq.w	80096c2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b01      	cmp	r3, #1
 800955a:	d11b      	bne.n	8009594 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009590:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009592:	e096      	b.n	80096c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009594:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009596:	8bfb      	ldrh	r3, [r7, #30]
 8009598:	429a      	cmp	r2, r3
 800959a:	d24a      	bcs.n	8009632 <HAL_SPI_TransmitReceive+0x57e>
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d045      	beq.n	8009632 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	b2d2      	uxtb	r2, r2
 80095b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800961c:	b29b      	uxth	r3, r3
 800961e:	3b04      	subs	r3, #4
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800962e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009630:	e047      	b.n	80096c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009632:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009634:	2b03      	cmp	r3, #3
 8009636:	d820      	bhi.n	800967a <HAL_SPI_TransmitReceive+0x5c6>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01b      	beq.n	800967a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009676:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009678:	e023      	b.n	80096c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800967a:	f7f8 feed 	bl	8002458 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009686:	429a      	cmp	r2, r3
 8009688:	d803      	bhi.n	8009692 <HAL_SPI_TransmitReceive+0x5de>
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009690:	d102      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x5e4>
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d114      	bne.n	80096c2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fa5f 	bl	8009b5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e02d      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80096c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f47f af11 	bne.w	80094ec <HAL_SPI_TransmitReceive+0x438>
 80096ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f47f af0d 	bne.w	80094ec <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2200      	movs	r2, #0
 80096da:	2108      	movs	r1, #8
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fadd 	bl	8009c9c <SPI_WaitOnFlagUntilTimeout>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ee:	f043 0220 	orr.w	r2, r3, #32
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fa2f 	bl	8009b5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800971c:	2300      	movs	r3, #0
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3730      	adds	r7, #48	@ 0x30
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop

08009728 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	@ 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009740:	6a3a      	ldr	r2, [r7, #32]
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4013      	ands	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009750:	2300      	movs	r3, #0
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800975a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3330      	adds	r3, #48	@ 0x30
 8009762:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800976a:	2b00      	cmp	r3, #0
 800976c:	d010      	beq.n	8009790 <HAL_SPI_IRQHandler+0x68>
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009786:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f9c3 	bl	8009b14 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800978e:	e192      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d113      	bne.n	80097c2 <HAL_SPI_IRQHandler+0x9a>
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10e      	bne.n	80097c2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
    handled = 1UL;
 80097be:	2301      	movs	r3, #1
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10f      	bne.n	80097ec <HAL_SPI_IRQHandler+0xc4>
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d105      	bne.n	80097ec <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	4798      	blx	r3
    handled = 1UL;
 80097e8:	2301      	movs	r3, #1
 80097ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10f      	bne.n	8009816 <HAL_SPI_IRQHandler+0xee>
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
    handled = 1UL;
 8009812:	2301      	movs	r3, #1
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 8147 	bne.w	8009aac <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 808b 	beq.w	8009940 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0208 	orr.w	r2, r2, #8
 8009838:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f042 0210 	orr.w	r2, r2, #16
 8009848:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699a      	ldr	r2, [r3, #24]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009858:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691a      	ldr	r2, [r3, #16]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0208 	bic.w	r2, r2, #8
 8009868:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d13d      	bne.n	80098f4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009878:	e036      	b.n	80098e8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	2b0f      	cmp	r3, #15
 8009880:	d90b      	bls.n	800989a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800988a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800988c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009892:	1d1a      	adds	r2, r3, #4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	665a      	str	r2, [r3, #100]	@ 0x64
 8009898:	e01d      	b.n	80098d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	2b07      	cmp	r3, #7
 80098a0:	d90b      	bls.n	80098ba <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	8812      	ldrh	r2, [r2, #0]
 80098aa:	b292      	uxth	r2, r2
 80098ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b2:	1c9a      	adds	r2, r3, #2
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	665a      	str	r2, [r3, #100]	@ 0x64
 80098b8:	e00d      	b.n	80098d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c6:	7812      	ldrb	r2, [r2, #0]
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098dc:	b29b      	uxth	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1c2      	bne.n	800987a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f931 	bl	8009b5c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8f7 	bl	8009b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009912:	e0d0      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009914:	7cfb      	ldrb	r3, [r7, #19]
 8009916:	2b05      	cmp	r3, #5
 8009918:	d103      	bne.n	8009922 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8e6 	bl	8009aec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009920:	e0c6      	b.n	8009ab0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009922:	7cfb      	ldrb	r3, [r7, #19]
 8009924:	2b04      	cmp	r3, #4
 8009926:	d103      	bne.n	8009930 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f8d5 	bl	8009ad8 <HAL_SPI_RxCpltCallback>
    return;
 800992e:	e0bf      	b.n	8009ab0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009930:	7cfb      	ldrb	r3, [r7, #19]
 8009932:	2b03      	cmp	r3, #3
 8009934:	f040 80bc 	bne.w	8009ab0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f8c3 	bl	8009ac4 <HAL_SPI_TxCpltCallback>
    return;
 800993e:	e0b7      	b.n	8009ab0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80b5 	beq.w	8009ab6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00f      	beq.n	8009976 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800995c:	f043 0204 	orr.w	r2, r3, #4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009974:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00f      	beq.n	80099a0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009986:	f043 0201 	orr.w	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800999e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00f      	beq.n	80099ca <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b0:	f043 0208 	orr.w	r2, r3, #8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00f      	beq.n	80099f4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0220 	orr.w	r2, r2, #32
 80099f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d05a      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0201 	bic.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6919      	ldr	r1, [r3, #16]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4b28      	ldr	r3, [pc, #160]	@ (8009abc <HAL_SPI_IRQHandler+0x394>)
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a28:	d138      	bne.n	8009a9c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a38:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d013      	beq.n	8009a6a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a46:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <HAL_SPI_IRQHandler+0x398>)
 8009a48:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f9 f9aa 	bl	8002da8 <HAL_DMA_Abort_IT>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d020      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a76:	4a12      	ldr	r2, [pc, #72]	@ (8009ac0 <HAL_SPI_IRQHandler+0x398>)
 8009a78:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f9 f992 	bl	8002da8 <HAL_DMA_Abort_IT>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d014      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a9a:	e00b      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f82b 	bl	8009b00 <HAL_SPI_ErrorCallback>
    return;
 8009aaa:	e003      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009aac:	bf00      	nop
 8009aae:	e002      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ab0:	bf00      	nop
 8009ab2:	e000      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009ab4:	bf00      	nop
  }
}
 8009ab6:	3728      	adds	r7, #40	@ 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	fffffc94 	.word	0xfffffc94
 8009ac0:	08009b29 	.word	0x08009b29

08009ac4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff ffd6 	bl	8009b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0208 	orr.w	r2, r2, #8
 8009b7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0210 	orr.w	r2, r2, #16
 8009b8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0201 	bic.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6919      	ldr	r1, [r3, #16]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8009c98 <SPI_CloseTransfer+0x13c>)
 8009ba8:	400b      	ands	r3, r1
 8009baa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009bba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d014      	beq.n	8009bf2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00f      	beq.n	8009bf2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0220 	orr.w	r2, r2, #32
 8009bf0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d014      	beq.n	8009c28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00f      	beq.n	8009c28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c0e:	f043 0204 	orr.w	r2, r3, #4
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00f      	beq.n	8009c52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c38:	f043 0201 	orr.w	r2, r3, #1
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00f      	beq.n	8009c7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c62:	f043 0208 	orr.w	r2, r3, #8
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	fffffc90 	.word	0xfffffc90

08009c9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cac:	e010      	b.n	8009cd0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cae:	f7f8 fbd3 	bl	8002458 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d803      	bhi.n	8009cc6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d102      	bne.n	8009ccc <SPI_WaitOnFlagUntilTimeout+0x30>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e00f      	b.n	8009cf0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	695a      	ldr	r2, [r3, #20]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d0df      	beq.n	8009cae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	3301      	adds	r3, #1
 8009d08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3307      	adds	r3, #7
 8009d16:	08db      	lsrs	r3, r3, #3
 8009d18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e049      	b.n	8009dd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7f8 f95b 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f000 f99d 	bl	800a0ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68da      	ldr	r2, [r3, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a1a      	ldr	r2, [r3, #32]
 8009dfa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10f      	bne.n	8009e24 <HAL_TIM_Base_Stop_IT+0x48>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6a1a      	ldr	r2, [r3, #32]
 8009e0a:	f240 4344 	movw	r3, #1092	@ 0x444
 8009e0e:	4013      	ands	r3, r2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d107      	bne.n	8009e24 <HAL_TIM_Base_Stop_IT+0x48>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0201 	bic.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d020      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01b      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f06f 0202 	mvn.w	r2, #2
 8009e6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	f003 0303 	and.w	r3, r3, #3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f8f3 	bl	800a070 <HAL_TIM_IC_CaptureCallback>
 8009e8a:	e005      	b.n	8009e98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f8e5 	bl	800a05c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f8f6 	bl	800a084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d020      	beq.n	8009eea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01b      	beq.n	8009eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f06f 0204 	mvn.w	r2, #4
 8009eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f8cd 	bl	800a070 <HAL_TIM_IC_CaptureCallback>
 8009ed6:	e005      	b.n	8009ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f8bf 	bl	800a05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8d0 	bl	800a084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d020      	beq.n	8009f36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f003 0308 	and.w	r3, r3, #8
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01b      	beq.n	8009f36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f06f 0208 	mvn.w	r2, #8
 8009f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f8a7 	bl	800a070 <HAL_TIM_IC_CaptureCallback>
 8009f22:	e005      	b.n	8009f30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f899 	bl	800a05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f8aa 	bl	800a084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f003 0310 	and.w	r3, r3, #16
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d020      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f003 0310 	and.w	r3, r3, #16
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01b      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f06f 0210 	mvn.w	r2, #16
 8009f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2208      	movs	r2, #8
 8009f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f881 	bl	800a070 <HAL_TIM_IC_CaptureCallback>
 8009f6e:	e005      	b.n	8009f7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f873 	bl	800a05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f884 	bl	800a084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00c      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f06f 0201 	mvn.w	r2, #1
 8009f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f851 	bl	800a048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00c      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d007      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9aa 	bl	800a328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00c      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d007      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9a2 	bl	800a33c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00c      	beq.n	800a01c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f83e 	bl	800a098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d007      	beq.n	800a040 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f06f 0220 	mvn.w	r2, #32
 800a038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f96a 	bl	800a314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a46      	ldr	r2, [pc, #280]	@ (800a1d8 <TIM_Base_SetConfig+0x12c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d013      	beq.n	800a0ec <TIM_Base_SetConfig+0x40>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ca:	d00f      	beq.n	800a0ec <TIM_Base_SetConfig+0x40>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a43      	ldr	r2, [pc, #268]	@ (800a1dc <TIM_Base_SetConfig+0x130>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00b      	beq.n	800a0ec <TIM_Base_SetConfig+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a42      	ldr	r2, [pc, #264]	@ (800a1e0 <TIM_Base_SetConfig+0x134>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d007      	beq.n	800a0ec <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a41      	ldr	r2, [pc, #260]	@ (800a1e4 <TIM_Base_SetConfig+0x138>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d003      	beq.n	800a0ec <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a40      	ldr	r2, [pc, #256]	@ (800a1e8 <TIM_Base_SetConfig+0x13c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d108      	bne.n	800a0fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a35      	ldr	r2, [pc, #212]	@ (800a1d8 <TIM_Base_SetConfig+0x12c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d01f      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10c:	d01b      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a32      	ldr	r2, [pc, #200]	@ (800a1dc <TIM_Base_SetConfig+0x130>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d017      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a31      	ldr	r2, [pc, #196]	@ (800a1e0 <TIM_Base_SetConfig+0x134>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d013      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a30      	ldr	r2, [pc, #192]	@ (800a1e4 <TIM_Base_SetConfig+0x138>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00f      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e8 <TIM_Base_SetConfig+0x13c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00b      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2e      	ldr	r2, [pc, #184]	@ (800a1ec <TIM_Base_SetConfig+0x140>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d007      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f0 <TIM_Base_SetConfig+0x144>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_Base_SetConfig+0x9a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a2c      	ldr	r2, [pc, #176]	@ (800a1f4 <TIM_Base_SetConfig+0x148>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d108      	bne.n	800a158 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a14c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a16      	ldr	r2, [pc, #88]	@ (800a1d8 <TIM_Base_SetConfig+0x12c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d00f      	beq.n	800a1a4 <TIM_Base_SetConfig+0xf8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a18      	ldr	r2, [pc, #96]	@ (800a1e8 <TIM_Base_SetConfig+0x13c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d00b      	beq.n	800a1a4 <TIM_Base_SetConfig+0xf8>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a17      	ldr	r2, [pc, #92]	@ (800a1ec <TIM_Base_SetConfig+0x140>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d007      	beq.n	800a1a4 <TIM_Base_SetConfig+0xf8>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a16      	ldr	r2, [pc, #88]	@ (800a1f0 <TIM_Base_SetConfig+0x144>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_Base_SetConfig+0xf8>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a15      	ldr	r2, [pc, #84]	@ (800a1f4 <TIM_Base_SetConfig+0x148>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d103      	bne.n	800a1ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d105      	bne.n	800a1ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	f023 0201 	bic.w	r2, r3, #1
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	611a      	str	r2, [r3, #16]
  }
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40010000 	.word	0x40010000
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40010400 	.word	0x40010400
 800a1ec:	40014000 	.word	0x40014000
 800a1f0:	40014400 	.word	0x40014400
 800a1f4:	40014800 	.word	0x40014800

0800a1f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e06d      	b.n	800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a30      	ldr	r2, [pc, #192]	@ (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d004      	beq.n	800a244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a2f      	ldr	r2, [pc, #188]	@ (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d108      	bne.n	800a256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a24a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a25c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a20      	ldr	r2, [pc, #128]	@ (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d022      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a282:	d01d      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1d      	ldr	r2, [pc, #116]	@ (800a300 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d018      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1c      	ldr	r2, [pc, #112]	@ (800a304 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d013      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1a      	ldr	r2, [pc, #104]	@ (800a308 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00e      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a15      	ldr	r2, [pc, #84]	@ (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d009      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a16      	ldr	r2, [pc, #88]	@ (800a30c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d004      	beq.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10c      	bne.n	800a2da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40010400 	.word	0x40010400
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40001800 	.word	0x40001800
 800a310:	40014000 	.word	0x40014000

0800a314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a354:	4904      	ldr	r1, [pc, #16]	@ (800a368 <MX_FATFS_Init+0x18>)
 800a356:	4805      	ldr	r0, [pc, #20]	@ (800a36c <MX_FATFS_Init+0x1c>)
 800a358:	f003 fba4 	bl	800daa4 <FATFS_LinkDriver>
 800a35c:	4603      	mov	r3, r0
 800a35e:	461a      	mov	r2, r3
 800a360:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <MX_FATFS_Init+0x20>)
 800a362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a364:	bf00      	nop
 800a366:	bd80      	pop	{r7, pc}
 800a368:	24000370 	.word	0x24000370
 800a36c:	24000014 	.word	0x24000014
 800a370:	2400036c 	.word	0x2400036c

0800a374 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a378:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f9fd 	bl	800a790 <USER_SPI_initialize>
 800a396:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 facf 	bl	800a950 <USER_SPI_status>
 800a3b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	607a      	str	r2, [r7, #4]
 800a3c6:	603b      	str	r3, [r7, #0]
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a3cc:	7bf8      	ldrb	r0, [r7, #15]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	f000 fad2 	bl	800a97c <USER_SPI_read>
 800a3d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a3f2:	7bf8      	ldrb	r0, [r7, #15]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	68b9      	ldr	r1, [r7, #8]
 800a3fa:	f000 fb25 	bl	800aa48 <USER_SPI_write>
 800a3fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	603a      	str	r2, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
 800a414:	460b      	mov	r3, r1
 800a416:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a418:	79b9      	ldrb	r1, [r7, #6]
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fb8e 	bl	800ab40 <USER_SPI_ioctl>
 800a424:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0201 	bic.w	r2, r2, #1
 800a446:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	071a      	lsls	r2, r3, #28
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f042 0201 	orr.w	r2, r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a484:	f7f7 ffe8 	bl	8002458 <HAL_GetTick>
 800a488:	4603      	mov	r3, r0
 800a48a:	4a04      	ldr	r2, [pc, #16]	@ (800a49c <SPI_Timer_On+0x20>)
 800a48c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a48e:	4a04      	ldr	r2, [pc, #16]	@ (800a4a0 <SPI_Timer_On+0x24>)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6013      	str	r3, [r2, #0]
}
 800a494:	bf00      	nop
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	24000378 	.word	0x24000378
 800a4a0:	2400037c 	.word	0x2400037c

0800a4a4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a4a8:	f7f7 ffd6 	bl	8002458 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	4b06      	ldr	r3, [pc, #24]	@ (800a4c8 <SPI_Timer_Status+0x24>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <SPI_Timer_Status+0x28>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	bf34      	ite	cc
 800a4bc:	2301      	movcc	r3, #1
 800a4be:	2300      	movcs	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	24000378 	.word	0x24000378
 800a4cc:	2400037c 	.word	0x2400037c

0800a4d0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, HAL_MAX_DELAY);
 800a4da:	f107 020f 	add.w	r2, r7, #15
 800a4de:	1df9      	adds	r1, r7, #7
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4803      	ldr	r0, [pc, #12]	@ (800a4f8 <xchg_spi+0x28>)
 800a4ea:	f7fe fde3 	bl	80090b4 <HAL_SPI_TransmitReceive>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	240001a0 	.word	0x240001a0

0800a4fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a4fc:	b590      	push	{r4, r7, lr}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a506:	2300      	movs	r3, #0
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e00a      	b.n	800a522 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	18d4      	adds	r4, r2, r3
 800a512:	20ff      	movs	r0, #255	@ 0xff
 800a514:	f7ff ffdc 	bl	800a4d0 <xchg_spi>
 800a518:	4603      	mov	r3, r0
 800a51a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	3301      	adds	r3, #1
 800a520:	60fb      	str	r3, [r7, #12]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d3f0      	bcc.n	800a50c <rcvr_spi_multi+0x10>
	}
}
 800a52a:	bf00      	nop
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}

0800a534 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	b29a      	uxth	r2, r3
 800a542:	f04f 33ff 	mov.w	r3, #4294967295
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	4803      	ldr	r0, [pc, #12]	@ (800a558 <xmit_spi_multi+0x24>)
 800a54a:	f7fe f953 	bl	80087f4 <HAL_SPI_Transmit>

//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}

}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	240001a0 	.word	0x240001a0

0800a55c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a564:	f7f7 ff78 	bl	8002458 <HAL_GetTick>
 800a568:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a56e:	20ff      	movs	r0, #255	@ 0xff
 800a570:	f7ff ffae 	bl	800a4d0 <xchg_spi>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	2bff      	cmp	r3, #255	@ 0xff
 800a57c:	d007      	beq.n	800a58e <wait_ready+0x32>
 800a57e:	f7f7 ff6b 	bl	8002458 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d8ef      	bhi.n	800a56e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	2bff      	cmp	r3, #255	@ 0xff
 800a592:	bf0c      	ite	eq
 800a594:	2301      	moveq	r3, #1
 800a596:	2300      	movne	r3, #0
 800a598:	b2db      	uxtb	r3, r3
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a5ae:	4804      	ldr	r0, [pc, #16]	@ (800a5c0 <despiselect+0x1c>)
 800a5b0:	f7fa f956 	bl	8004860 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a5b4:	20ff      	movs	r0, #255	@ 0xff
 800a5b6:	f7ff ff8b 	bl	800a4d0 <xchg_spi>

}
 800a5ba:	bf00      	nop
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	58020400 	.word	0x58020400

0800a5c4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a5ce:	480a      	ldr	r0, [pc, #40]	@ (800a5f8 <spiselect+0x34>)
 800a5d0:	f7fa f946 	bl	8004860 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a5d4:	20ff      	movs	r0, #255	@ 0xff
 800a5d6:	f7ff ff7b 	bl	800a4d0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a5da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a5de:	f7ff ffbd 	bl	800a55c <wait_ready>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <spiselect+0x28>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e002      	b.n	800a5f2 <spiselect+0x2e>

	despiselect();
 800a5ec:	f7ff ffda 	bl	800a5a4 <despiselect>
	return 0;	/* Timeout */
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	58020400 	.word	0x58020400

0800a5fc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a606:	20c8      	movs	r0, #200	@ 0xc8
 800a608:	f7ff ff38 	bl	800a47c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a60c:	20ff      	movs	r0, #255	@ 0xff
 800a60e:	f7ff ff5f 	bl	800a4d0 <xchg_spi>
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	2bff      	cmp	r3, #255	@ 0xff
 800a61a:	d104      	bne.n	800a626 <rcvr_datablock+0x2a>
 800a61c:	f7ff ff42 	bl	800a4a4 <SPI_Timer_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f2      	bne.n	800a60c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	2bfe      	cmp	r3, #254	@ 0xfe
 800a62a:	d001      	beq.n	800a630 <rcvr_datablock+0x34>
 800a62c:	2300      	movs	r3, #0
 800a62e:	e00a      	b.n	800a646 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff ff62 	bl	800a4fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a638:	20ff      	movs	r0, #255	@ 0xff
 800a63a:	f7ff ff49 	bl	800a4d0 <xchg_spi>
 800a63e:	20ff      	movs	r0, #255	@ 0xff
 800a640:	f7ff ff46 	bl	800a4d0 <xchg_spi>

	return 1;						/* Function succeeded */
 800a644:	2301      	movs	r3, #1
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a65a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a65e:	f7ff ff7d 	bl	800a55c <wait_ready>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <xmit_datablock+0x1e>
 800a668:	2300      	movs	r3, #0
 800a66a:	e01e      	b.n	800a6aa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a66c:	78fb      	ldrb	r3, [r7, #3]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff ff2e 	bl	800a4d0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	2bfd      	cmp	r3, #253	@ 0xfd
 800a678:	d016      	beq.n	800a6a8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a67a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff ff58 	bl	800a534 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a684:	20ff      	movs	r0, #255	@ 0xff
 800a686:	f7ff ff23 	bl	800a4d0 <xchg_spi>
 800a68a:	20ff      	movs	r0, #255	@ 0xff
 800a68c:	f7ff ff20 	bl	800a4d0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a690:	20ff      	movs	r0, #255	@ 0xff
 800a692:	f7ff ff1d 	bl	800a4d0 <xchg_spi>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	d001      	beq.n	800a6a8 <xmit_datablock+0x5a>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e000      	b.n	800a6aa <xmit_datablock+0x5c>
	}
	return 1;
 800a6a8:	2301      	movs	r3, #1
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	6039      	str	r1, [r7, #0]
 800a6bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da0e      	bge.n	800a6e4 <send_cmd+0x32>
		cmd &= 0x7F;
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6cc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	2037      	movs	r0, #55	@ 0x37
 800a6d2:	f7ff ffee 	bl	800a6b2 <send_cmd>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d901      	bls.n	800a6e4 <send_cmd+0x32>
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	e051      	b.n	800a788 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	2b0c      	cmp	r3, #12
 800a6e8:	d008      	beq.n	800a6fc <send_cmd+0x4a>
		despiselect();
 800a6ea:	f7ff ff5b 	bl	800a5a4 <despiselect>
		if (!spiselect()) return 0xFF;
 800a6ee:	f7ff ff69 	bl	800a5c4 <spiselect>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <send_cmd+0x4a>
 800a6f8:	23ff      	movs	r3, #255	@ 0xff
 800a6fa:	e045      	b.n	800a788 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fee3 	bl	800a4d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff fedd 	bl	800a4d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	0c1b      	lsrs	r3, r3, #16
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fed7 	bl	800a4d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	0a1b      	lsrs	r3, r3, #8
 800a726:	b2db      	uxtb	r3, r3
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fed1 	bl	800a4d0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff fecc 	bl	800a4d0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a738:	2301      	movs	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <send_cmd+0x94>
 800a742:	2395      	movs	r3, #149	@ 0x95
 800a744:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b08      	cmp	r3, #8
 800a74a:	d101      	bne.n	800a750 <send_cmd+0x9e>
 800a74c:	2387      	movs	r3, #135	@ 0x87
 800a74e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff febc 	bl	800a4d0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	2b0c      	cmp	r3, #12
 800a75c:	d102      	bne.n	800a764 <send_cmd+0xb2>
 800a75e:	20ff      	movs	r0, #255	@ 0xff
 800a760:	f7ff feb6 	bl	800a4d0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a764:	230a      	movs	r3, #10
 800a766:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a768:	20ff      	movs	r0, #255	@ 0xff
 800a76a:	f7ff feb1 	bl	800a4d0 <xchg_spi>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a776:	2b00      	cmp	r3, #0
 800a778:	da05      	bge.n	800a786 <send_cmd+0xd4>
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	73fb      	strb	r3, [r7, #15]
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f0      	bne.n	800a768 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a786:	7bbb      	ldrb	r3, [r7, #14]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a790:	b590      	push	{r4, r7, lr}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <USER_SPI_initialize+0x14>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e0cb      	b.n	800a93c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a7a4:	4b67      	ldr	r3, [pc, #412]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <USER_SPI_initialize+0x2a>
 800a7b2:	4b64      	ldr	r3, [pc, #400]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	e0c0      	b.n	800a93c <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800a7ba:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a7be:	4862      	ldr	r0, [pc, #392]	@ (800a948 <USER_SPI_initialize+0x1b8>)
 800a7c0:	f7ff fe35 	bl	800a42e <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a7c4:	230a      	movs	r3, #10
 800a7c6:	73fb      	strb	r3, [r7, #15]
 800a7c8:	e005      	b.n	800a7d6 <USER_SPI_initialize+0x46>
 800a7ca:	20ff      	movs	r0, #255	@ 0xff
 800a7cc:	f7ff fe80 	bl	800a4d0 <xchg_spi>
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1f6      	bne.n	800a7ca <USER_SPI_initialize+0x3a>

	ty = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f7ff ff65 	bl	800a6b2 <send_cmd>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	f040 808b 	bne.w	800a906 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a7f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a7f4:	f7ff fe42 	bl	800a47c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a7f8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a7fc:	2008      	movs	r0, #8
 800a7fe:	f7ff ff58 	bl	800a6b2 <send_cmd>
 800a802:	4603      	mov	r3, r0
 800a804:	2b01      	cmp	r3, #1
 800a806:	d151      	bne.n	800a8ac <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
 800a80c:	e00d      	b.n	800a82a <USER_SPI_initialize+0x9a>
 800a80e:	7bfc      	ldrb	r4, [r7, #15]
 800a810:	20ff      	movs	r0, #255	@ 0xff
 800a812:	f7ff fe5d 	bl	800a4d0 <xchg_spi>
 800a816:	4603      	mov	r3, r0
 800a818:	461a      	mov	r2, r3
 800a81a:	f104 0310 	add.w	r3, r4, #16
 800a81e:	443b      	add	r3, r7
 800a820:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	3301      	adds	r3, #1
 800a828:	73fb      	strb	r3, [r7, #15]
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d9ee      	bls.n	800a80e <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a830:	7abb      	ldrb	r3, [r7, #10]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d167      	bne.n	800a906 <USER_SPI_initialize+0x176>
 800a836:	7afb      	ldrb	r3, [r7, #11]
 800a838:	2baa      	cmp	r3, #170	@ 0xaa
 800a83a:	d164      	bne.n	800a906 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a83c:	bf00      	nop
 800a83e:	f7ff fe31 	bl	800a4a4 <SPI_Timer_Status>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <USER_SPI_initialize+0xc8>
 800a848:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a84c:	20a9      	movs	r0, #169	@ 0xa9
 800a84e:	f7ff ff30 	bl	800a6b2 <send_cmd>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f2      	bne.n	800a83e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a858:	f7ff fe24 	bl	800a4a4 <SPI_Timer_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d051      	beq.n	800a906 <USER_SPI_initialize+0x176>
 800a862:	2100      	movs	r1, #0
 800a864:	203a      	movs	r0, #58	@ 0x3a
 800a866:	f7ff ff24 	bl	800a6b2 <send_cmd>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d14a      	bne.n	800a906 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]
 800a874:	e00d      	b.n	800a892 <USER_SPI_initialize+0x102>
 800a876:	7bfc      	ldrb	r4, [r7, #15]
 800a878:	20ff      	movs	r0, #255	@ 0xff
 800a87a:	f7ff fe29 	bl	800a4d0 <xchg_spi>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	f104 0310 	add.w	r3, r4, #16
 800a886:	443b      	add	r3, r7
 800a888:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	3301      	adds	r3, #1
 800a890:	73fb      	strb	r3, [r7, #15]
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	2b03      	cmp	r3, #3
 800a896:	d9ee      	bls.n	800a876 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a898:	7a3b      	ldrb	r3, [r7, #8]
 800a89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <USER_SPI_initialize+0x116>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	e000      	b.n	800a8a8 <USER_SPI_initialize+0x118>
 800a8a6:	2304      	movs	r3, #4
 800a8a8:	737b      	strb	r3, [r7, #13]
 800a8aa:	e02c      	b.n	800a906 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	20a9      	movs	r0, #169	@ 0xa9
 800a8b0:	f7ff feff 	bl	800a6b2 <send_cmd>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d804      	bhi.n	800a8c4 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	737b      	strb	r3, [r7, #13]
 800a8be:	23a9      	movs	r3, #169	@ 0xa9
 800a8c0:	73bb      	strb	r3, [r7, #14]
 800a8c2:	e003      	b.n	800a8cc <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	737b      	strb	r3, [r7, #13]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a8cc:	bf00      	nop
 800a8ce:	f7ff fde9 	bl	800a4a4 <SPI_Timer_Status>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <USER_SPI_initialize+0x158>
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fee8 	bl	800a6b2 <send_cmd>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1f2      	bne.n	800a8ce <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a8e8:	f7ff fddc 	bl	800a4a4 <SPI_Timer_Status>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d007      	beq.n	800a902 <USER_SPI_initialize+0x172>
 800a8f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8f6:	2010      	movs	r0, #16
 800a8f8:	f7ff fedb 	bl	800a6b2 <send_cmd>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <USER_SPI_initialize+0x176>
				ty = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a906:	4a11      	ldr	r2, [pc, #68]	@ (800a94c <USER_SPI_initialize+0x1bc>)
 800a908:	7b7b      	ldrb	r3, [r7, #13]
 800a90a:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a90c:	f7ff fe4a 	bl	800a5a4 <despiselect>

	if (ty) {			/* OK */
 800a910:	7b7b      	ldrb	r3, [r7, #13]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00c      	beq.n	800a930 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800a916:	2100      	movs	r1, #0
 800a918:	480b      	ldr	r0, [pc, #44]	@ (800a948 <USER_SPI_initialize+0x1b8>)
 800a91a:	f7ff fd88 	bl	800a42e <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a91e:	4b09      	ldr	r3, [pc, #36]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f023 0301 	bic.w	r3, r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e002      	b.n	800a936 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a930:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a932:	2201      	movs	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a936:	4b03      	ldr	r3, [pc, #12]	@ (800a944 <USER_SPI_initialize+0x1b4>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b2db      	uxtb	r3, r3
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	bd90      	pop	{r4, r7, pc}
 800a944:	24000028 	.word	0x24000028
 800a948:	240001a0 	.word	0x240001a0
 800a94c:	24000374 	.word	0x24000374

0800a950 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <USER_SPI_status+0x14>
 800a960:	2301      	movs	r3, #1
 800a962:	e002      	b.n	800a96a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a964:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <USER_SPI_status+0x28>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	b2db      	uxtb	r3, r3
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	24000028 	.word	0x24000028

0800a97c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d102      	bne.n	800a998 <USER_SPI_read+0x1c>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <USER_SPI_read+0x20>
 800a998:	2304      	movs	r3, #4
 800a99a:	e04d      	b.n	800aa38 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a99c:	4b28      	ldr	r3, [pc, #160]	@ (800aa40 <USER_SPI_read+0xc4>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <USER_SPI_read+0x32>
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e044      	b.n	800aa38 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a9ae:	4b25      	ldr	r3, [pc, #148]	@ (800aa44 <USER_SPI_read+0xc8>)
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d102      	bne.n	800a9c0 <USER_SPI_read+0x44>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	025b      	lsls	r3, r3, #9
 800a9be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d111      	bne.n	800a9ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	2011      	movs	r0, #17
 800a9ca:	f7ff fe72 	bl	800a6b2 <send_cmd>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d129      	bne.n	800aa28 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a9d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a9d8:	68b8      	ldr	r0, [r7, #8]
 800a9da:	f7ff fe0f 	bl	800a5fc <rcvr_datablock>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d021      	beq.n	800aa28 <USER_SPI_read+0xac>
			count = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	e01e      	b.n	800aa28 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	2012      	movs	r0, #18
 800a9ee:	f7ff fe60 	bl	800a6b2 <send_cmd>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d117      	bne.n	800aa28 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a9f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a9fc:	68b8      	ldr	r0, [r7, #8]
 800a9fe:	f7ff fdfd 	bl	800a5fc <rcvr_datablock>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <USER_SPI_read+0xa2>
				buff += 512;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800aa0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1ed      	bne.n	800a9f8 <USER_SPI_read+0x7c>
 800aa1c:	e000      	b.n	800aa20 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800aa1e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800aa20:	2100      	movs	r1, #0
 800aa22:	200c      	movs	r0, #12
 800aa24:	f7ff fe45 	bl	800a6b2 <send_cmd>
		}
	}
	despiselect();
 800aa28:	f7ff fdbc 	bl	800a5a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bf14      	ite	ne
 800aa32:	2301      	movne	r3, #1
 800aa34:	2300      	moveq	r3, #0
 800aa36:	b2db      	uxtb	r3, r3
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	24000028 	.word	0x24000028
 800aa44:	24000374 	.word	0x24000374

0800aa48 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <USER_SPI_write+0x1c>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <USER_SPI_write+0x20>
 800aa64:	2304      	movs	r3, #4
 800aa66:	e063      	b.n	800ab30 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800aa68:	4b33      	ldr	r3, [pc, #204]	@ (800ab38 <USER_SPI_write+0xf0>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <USER_SPI_write+0x32>
 800aa76:	2303      	movs	r3, #3
 800aa78:	e05a      	b.n	800ab30 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800aa7a:	4b2f      	ldr	r3, [pc, #188]	@ (800ab38 <USER_SPI_write+0xf0>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <USER_SPI_write+0x44>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e051      	b.n	800ab30 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800aa8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab3c <USER_SPI_write+0xf4>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f003 0308 	and.w	r3, r3, #8
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <USER_SPI_write+0x56>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	025b      	lsls	r3, r3, #9
 800aa9c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d110      	bne.n	800aac6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	2018      	movs	r0, #24
 800aaa8:	f7ff fe03 	bl	800a6b2 <send_cmd>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d136      	bne.n	800ab20 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800aab2:	21fe      	movs	r1, #254	@ 0xfe
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f7ff fdca 	bl	800a64e <xmit_datablock>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d02f      	beq.n	800ab20 <USER_SPI_write+0xd8>
			count = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	e02c      	b.n	800ab20 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800aac6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab3c <USER_SPI_write+0xf4>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 0306 	and.w	r3, r3, #6
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <USER_SPI_write+0x92>
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	2097      	movs	r0, #151	@ 0x97
 800aad6:	f7ff fdec 	bl	800a6b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	2019      	movs	r0, #25
 800aade:	f7ff fde8 	bl	800a6b2 <send_cmd>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d11b      	bne.n	800ab20 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800aae8:	21fc      	movs	r1, #252	@ 0xfc
 800aaea:	68b8      	ldr	r0, [r7, #8]
 800aaec:	f7ff fdaf 	bl	800a64e <xmit_datablock>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <USER_SPI_write+0xc4>
				buff += 512;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800aafc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1ee      	bne.n	800aae8 <USER_SPI_write+0xa0>
 800ab0a:	e000      	b.n	800ab0e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800ab0c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800ab0e:	21fd      	movs	r1, #253	@ 0xfd
 800ab10:	2000      	movs	r0, #0
 800ab12:	f7ff fd9c 	bl	800a64e <xmit_datablock>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <USER_SPI_write+0xd8>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800ab20:	f7ff fd40 	bl	800a5a4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bf14      	ite	ne
 800ab2a:	2301      	movne	r3, #1
 800ab2c:	2300      	moveq	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	24000028 	.word	0x24000028
 800ab3c:	24000374 	.word	0x24000374

0800ab40 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	@ 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	603a      	str	r2, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <USER_SPI_ioctl+0x1a>
 800ab56:	2304      	movs	r3, #4
 800ab58:	e15a      	b.n	800ae10 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ab5a:	4baf      	ldr	r3, [pc, #700]	@ (800ae18 <USER_SPI_ioctl+0x2d8>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <USER_SPI_ioctl+0x2c>
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e151      	b.n	800ae10 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800ab72:	79bb      	ldrb	r3, [r7, #6]
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	f200 8136 	bhi.w	800ade6 <USER_SPI_ioctl+0x2a6>
 800ab7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab80 <USER_SPI_ioctl+0x40>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ab95 	.word	0x0800ab95
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800ade7 	.word	0x0800ade7
 800ab8c:	0800ac55 	.word	0x0800ac55
 800ab90:	0800ad4b 	.word	0x0800ad4b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ab94:	f7ff fd16 	bl	800a5c4 <spiselect>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8127 	beq.w	800adee <USER_SPI_ioctl+0x2ae>
 800aba0:	2300      	movs	r3, #0
 800aba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800aba6:	e122      	b.n	800adee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800aba8:	2100      	movs	r1, #0
 800abaa:	2009      	movs	r0, #9
 800abac:	f7ff fd81 	bl	800a6b2 <send_cmd>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f040 811d 	bne.w	800adf2 <USER_SPI_ioctl+0x2b2>
 800abb8:	f107 030c 	add.w	r3, r7, #12
 800abbc:	2110      	movs	r1, #16
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff fd1c 	bl	800a5fc <rcvr_datablock>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 8113 	beq.w	800adf2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800abcc:	7b3b      	ldrb	r3, [r7, #12]
 800abce:	099b      	lsrs	r3, r3, #6
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d111      	bne.n	800abfa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800abd6:	7d7b      	ldrb	r3, [r7, #21]
 800abd8:	461a      	mov	r2, r3
 800abda:	7d3b      	ldrb	r3, [r7, #20]
 800abdc:	021b      	lsls	r3, r3, #8
 800abde:	4413      	add	r3, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	7cfb      	ldrb	r3, [r7, #19]
 800abe4:	041b      	lsls	r3, r3, #16
 800abe6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800abea:	4413      	add	r3, r2
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	029a      	lsls	r2, r3, #10
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e028      	b.n	800ac4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800abfa:	7c7b      	ldrb	r3, [r7, #17]
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	7dbb      	ldrb	r3, [r7, #22]
 800ac04:	09db      	lsrs	r3, r3, #7
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4413      	add	r3, r2
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	7d7b      	ldrb	r3, [r7, #21]
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f003 0306 	and.w	r3, r3, #6
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ac22:	7d3b      	ldrb	r3, [r7, #20]
 800ac24:	099b      	lsrs	r3, r3, #6
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	7cfb      	ldrb	r3, [r7, #19]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	441a      	add	r2, r3
 800ac30:	7cbb      	ldrb	r3, [r7, #18]
 800ac32:	029b      	lsls	r3, r3, #10
 800ac34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac38:	4413      	add	r3, r2
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ac3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac42:	3b09      	subs	r3, #9
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	409a      	lsls	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ac52:	e0ce      	b.n	800adf2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ac54:	4b71      	ldr	r3, [pc, #452]	@ (800ae1c <USER_SPI_ioctl+0x2dc>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d031      	beq.n	800acc4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ac60:	2100      	movs	r1, #0
 800ac62:	208d      	movs	r0, #141	@ 0x8d
 800ac64:	f7ff fd25 	bl	800a6b2 <send_cmd>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 80c3 	bne.w	800adf6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ac70:	20ff      	movs	r0, #255	@ 0xff
 800ac72:	f7ff fc2d 	bl	800a4d0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	2110      	movs	r1, #16
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff fcbd 	bl	800a5fc <rcvr_datablock>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 80b6 	beq.w	800adf6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ac8a:	2330      	movs	r3, #48	@ 0x30
 800ac8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800ac90:	e007      	b.n	800aca2 <USER_SPI_ioctl+0x162>
 800ac92:	20ff      	movs	r0, #255	@ 0xff
 800ac94:	f7ff fc1c 	bl	800a4d0 <xchg_spi>
 800ac98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800aca2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f3      	bne.n	800ac92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800acaa:	7dbb      	ldrb	r3, [r7, #22]
 800acac:	091b      	lsrs	r3, r3, #4
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	2310      	movs	r3, #16
 800acb4:	fa03 f202 	lsl.w	r2, r3, r2
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800acc2:	e098      	b.n	800adf6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800acc4:	2100      	movs	r1, #0
 800acc6:	2009      	movs	r0, #9
 800acc8:	f7ff fcf3 	bl	800a6b2 <send_cmd>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f040 8091 	bne.w	800adf6 <USER_SPI_ioctl+0x2b6>
 800acd4:	f107 030c 	add.w	r3, r7, #12
 800acd8:	2110      	movs	r1, #16
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fc8e 	bl	800a5fc <rcvr_datablock>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 8087 	beq.w	800adf6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ace8:	4b4c      	ldr	r3, [pc, #304]	@ (800ae1c <USER_SPI_ioctl+0x2dc>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 0302 	and.w	r3, r3, #2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d012      	beq.n	800ad1a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800acf4:	7dbb      	ldrb	r3, [r7, #22]
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800acfc:	7dfa      	ldrb	r2, [r7, #23]
 800acfe:	09d2      	lsrs	r2, r2, #7
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	4413      	add	r3, r2
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	7e7b      	ldrb	r3, [r7, #25]
 800ad08:	099b      	lsrs	r3, r3, #6
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad12:	461a      	mov	r2, r3
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e013      	b.n	800ad42 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ad1a:	7dbb      	ldrb	r3, [r7, #22]
 800ad1c:	109b      	asrs	r3, r3, #2
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f003 031f 	and.w	r3, r3, #31
 800ad24:	3301      	adds	r3, #1
 800ad26:	7dfa      	ldrb	r2, [r7, #23]
 800ad28:	00d2      	lsls	r2, r2, #3
 800ad2a:	f002 0218 	and.w	r2, r2, #24
 800ad2e:	7df9      	ldrb	r1, [r7, #23]
 800ad30:	0949      	lsrs	r1, r1, #5
 800ad32:	b2c9      	uxtb	r1, r1
 800ad34:	440a      	add	r2, r1
 800ad36:	3201      	adds	r2, #1
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800ad48:	e055      	b.n	800adf6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ad4a:	4b34      	ldr	r3, [pc, #208]	@ (800ae1c <USER_SPI_ioctl+0x2dc>)
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d051      	beq.n	800adfa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ad56:	f107 020c 	add.w	r2, r7, #12
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	210b      	movs	r1, #11
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff feee 	bl	800ab40 <USER_SPI_ioctl>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d149      	bne.n	800adfe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ad6a:	7b3b      	ldrb	r3, [r7, #12]
 800ad6c:	099b      	lsrs	r3, r3, #6
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d104      	bne.n	800ad7e <USER_SPI_ioctl+0x23e>
 800ad74:	7dbb      	ldrb	r3, [r7, #22]
 800ad76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d041      	beq.n	800ae02 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	623b      	str	r3, [r7, #32]
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad88:	6a3b      	ldr	r3, [r7, #32]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800ad8e:	4b23      	ldr	r3, [pc, #140]	@ (800ae1c <USER_SPI_ioctl+0x2dc>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d105      	bne.n	800ada6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	025b      	lsls	r3, r3, #9
 800ad9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	025b      	lsls	r3, r3, #9
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ada6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ada8:	2020      	movs	r0, #32
 800adaa:	f7ff fc82 	bl	800a6b2 <send_cmd>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d128      	bne.n	800ae06 <USER_SPI_ioctl+0x2c6>
 800adb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adb6:	2021      	movs	r0, #33	@ 0x21
 800adb8:	f7ff fc7b 	bl	800a6b2 <send_cmd>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d121      	bne.n	800ae06 <USER_SPI_ioctl+0x2c6>
 800adc2:	2100      	movs	r1, #0
 800adc4:	2026      	movs	r0, #38	@ 0x26
 800adc6:	f7ff fc74 	bl	800a6b2 <send_cmd>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d11a      	bne.n	800ae06 <USER_SPI_ioctl+0x2c6>
 800add0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800add4:	f7ff fbc2 	bl	800a55c <wait_ready>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d013      	beq.n	800ae06 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800adde:	2300      	movs	r3, #0
 800ade0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ade4:	e00f      	b.n	800ae06 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ade6:	2304      	movs	r3, #4
 800ade8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800adec:	e00c      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		break;
 800adee:	bf00      	nop
 800adf0:	e00a      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		break;
 800adf2:	bf00      	nop
 800adf4:	e008      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		break;
 800adf6:	bf00      	nop
 800adf8:	e006      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800adfa:	bf00      	nop
 800adfc:	e004      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800adfe:	bf00      	nop
 800ae00:	e002      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ae02:	bf00      	nop
 800ae04:	e000      	b.n	800ae08 <USER_SPI_ioctl+0x2c8>
		break;
 800ae06:	bf00      	nop
	}

	despiselect();
 800ae08:	f7ff fbcc 	bl	800a5a4 <despiselect>

	return res;
 800ae0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3730      	adds	r7, #48	@ 0x30
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	24000028 	.word	0x24000028
 800ae1c:	24000374 	.word	0x24000374

0800ae20 <read_vec>:
#endif



float * read_vec(unsigned short index, char * word){
 800ae20:	b580      	push	{r7, lr}
 800ae22:	f5ad 5d91 	sub.w	sp, sp, #4640	@ 0x1220
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ae30:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ae34:	6019      	str	r1, [r3, #0]
 800ae36:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ae3a:	f2a3 2332 	subw	r3, r3, #562	@ 0x232
 800ae3e:	801a      	strh	r2, [r3, #0]
	FIL file;
	UINT bytes;

	uint8_t buffer[2048];

	uint32_t floatsRead = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	f241 2234 	movw	r2, #4660	@ 0x1234
 800ae46:	443a      	add	r2, r7
 800ae48:	6013      	str	r3, [r2, #0]
	uint32_t charsRead = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f241 2230 	movw	r2, #4656	@ 0x1230
 800ae50:	443a      	add	r2, r7
 800ae52:	6013      	str	r3, [r2, #0]


	float arr_floats[501];
//	malloc(sizeof(*arr_float) * 508);

	spiselect();
 800ae54:	f7ff fbb6 	bl	800a5c4 <spiselect>
	snprintf(name, 22,  "Win/v/vector%05d.bin", index);
 800ae58:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ae5c:	f2a3 2332 	subw	r3, r3, #562	@ 0x232
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	f241 2014 	movw	r0, #4628	@ 0x1214
 800ae66:	4438      	add	r0, r7
 800ae68:	4a63      	ldr	r2, [pc, #396]	@ (800aff8 <read_vec+0x1d8>)
 800ae6a:	2116      	movs	r1, #22
 800ae6c:	f002 ff9e 	bl	800ddac <sniprintf>

	fr =  f_open(&file, name, FA_READ);
 800ae70:	f241 2114 	movw	r1, #4628	@ 0x1214
 800ae74:	4439      	add	r1, r7
 800ae76:	f607 73e4 	addw	r3, r7, #4068	@ 0xfe4
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f002 fa23 	bl	800d2c8 <f_open>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f241 222b 	movw	r2, #4651	@ 0x122b
 800ae88:	443a      	add	r2, r7
 800ae8a:	7013      	strb	r3, [r2, #0]
	bytes = 0;
 800ae8c:	f241 2338 	movw	r3, #4664	@ 0x1238
 800ae90:	443b      	add	r3, r7
 800ae92:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]
	fr = f_read(&file, buffer, 2048, &bytes);
 800ae9a:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800ae9e:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 800aea2:	f607 70e4 	addw	r0, r7, #4068	@ 0xfe4
 800aea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeaa:	f002 fbc7 	bl	800d63c <f_read>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f241 222b 	movw	r2, #4651	@ 0x122b
 800aeb4:	443a      	add	r2, r7
 800aeb6:	7013      	strb	r3, [r2, #0]


	// Process the buffer
	uint8_t *ptr = buffer;
 800aeb8:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 800aebc:	f241 222c 	movw	r2, #4652	@ 0x122c
 800aec0:	443a      	add	r2, r7
 800aec2:	6013      	str	r3, [r2, #0]
	if (bytes > 0) {
 800aec4:	f241 2338 	movw	r3, #4664	@ 0x1238
 800aec8:	443b      	add	r3, r7
 800aeca:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d07e      	beq.n	800afd2 <read_vec+0x1b2>
		// Process floats first
		while (floatsRead < 501 && bytes >= sizeof(float)) {
 800aed4:	e030      	b.n	800af38 <read_vec+0x118>
			memcpy(&arr_floats[floatsRead], ptr, sizeof(float));
 800aed6:	4b49      	ldr	r3, [pc, #292]	@ (800affc <read_vec+0x1dc>)
 800aed8:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800aedc:	f103 0318 	add.w	r3, r3, #24
 800aee0:	443b      	add	r3, r7
 800aee2:	f241 2234 	movw	r2, #4660	@ 0x1234
 800aee6:	443a      	add	r2, r7
 800aee8:	6812      	ldr	r2, [r2, #0]
 800aeea:	0092      	lsls	r2, r2, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	f241 222c 	movw	r2, #4652	@ 0x122c
 800aef2:	443a      	add	r2, r7
 800aef4:	6812      	ldr	r2, [r2, #0]
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	601a      	str	r2, [r3, #0]
			ptr += sizeof(float);
 800aefa:	f241 232c 	movw	r3, #4652	@ 0x122c
 800aefe:	443b      	add	r3, r7
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3304      	adds	r3, #4
 800af04:	f241 222c 	movw	r2, #4652	@ 0x122c
 800af08:	443a      	add	r2, r7
 800af0a:	6013      	str	r3, [r2, #0]
			bytes -= sizeof(float);
 800af0c:	f241 2338 	movw	r3, #4664	@ 0x1238
 800af10:	443b      	add	r3, r7
 800af12:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	1f1a      	subs	r2, r3, #4
 800af1a:	f241 2338 	movw	r3, #4664	@ 0x1238
 800af1e:	443b      	add	r3, r7
 800af20:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800af24:	601a      	str	r2, [r3, #0]
			floatsRead++;
 800af26:	f241 2334 	movw	r3, #4660	@ 0x1234
 800af2a:	443b      	add	r3, r7
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	f241 2234 	movw	r2, #4660	@ 0x1234
 800af34:	443a      	add	r2, r7
 800af36:	6013      	str	r3, [r2, #0]
		while (floatsRead < 501 && bytes >= sizeof(float)) {
 800af38:	f241 2334 	movw	r3, #4660	@ 0x1234
 800af3c:	443b      	add	r3, r7
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800af44:	d837      	bhi.n	800afb6 <read_vec+0x196>
 800af46:	f241 2338 	movw	r3, #4664	@ 0x1238
 800af4a:	443b      	add	r3, r7
 800af4c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b03      	cmp	r3, #3
 800af54:	d8bf      	bhi.n	800aed6 <read_vec+0xb6>
		}

		// Process characters
		while (charsRead < 25 && bytes > 0) {
 800af56:	e02e      	b.n	800afb6 <read_vec+0x196>
			word[charsRead] = *ptr;
 800af58:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800af5c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	f241 2330 	movw	r3, #4656	@ 0x1230
 800af66:	443b      	add	r3, r7
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4413      	add	r3, r2
 800af6c:	f241 222c 	movw	r2, #4652	@ 0x122c
 800af70:	443a      	add	r2, r7
 800af72:	6812      	ldr	r2, [r2, #0]
 800af74:	7812      	ldrb	r2, [r2, #0]
 800af76:	701a      	strb	r2, [r3, #0]
			ptr++;
 800af78:	f241 232c 	movw	r3, #4652	@ 0x122c
 800af7c:	443b      	add	r3, r7
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3301      	adds	r3, #1
 800af82:	f241 222c 	movw	r2, #4652	@ 0x122c
 800af86:	443a      	add	r2, r7
 800af88:	6013      	str	r3, [r2, #0]
			bytes--;
 800af8a:	f241 2338 	movw	r3, #4664	@ 0x1238
 800af8e:	443b      	add	r3, r7
 800af90:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	1e5a      	subs	r2, r3, #1
 800af98:	f241 2338 	movw	r3, #4664	@ 0x1238
 800af9c:	443b      	add	r3, r7
 800af9e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800afa2:	601a      	str	r2, [r3, #0]
			charsRead++;
 800afa4:	f241 2330 	movw	r3, #4656	@ 0x1230
 800afa8:	443b      	add	r3, r7
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	f241 2230 	movw	r2, #4656	@ 0x1230
 800afb2:	443a      	add	r2, r7
 800afb4:	6013      	str	r3, [r2, #0]
		while (charsRead < 25 && bytes > 0) {
 800afb6:	f241 2330 	movw	r3, #4656	@ 0x1230
 800afba:	443b      	add	r3, r7
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b18      	cmp	r3, #24
 800afc0:	d807      	bhi.n	800afd2 <read_vec+0x1b2>
 800afc2:	f241 2338 	movw	r3, #4664	@ 0x1238
 800afc6:	443b      	add	r3, r7
 800afc8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1c2      	bne.n	800af58 <read_vec+0x138>
		}
	}


	fr = f_close(&file);
 800afd2:	f607 73e4 	addw	r3, r7, #4068	@ 0xfe4
 800afd6:	4618      	mov	r0, r3
 800afd8:	f002 fced 	bl	800d9b6 <f_close>
 800afdc:	4603      	mov	r3, r0
 800afde:	f241 222b 	movw	r2, #4651	@ 0x122b
 800afe2:	443a      	add	r2, r7
 800afe4:	7013      	strb	r3, [r2, #0]

	despiselect();
 800afe6:	f7ff fadd 	bl	800a5a4 <despiselect>

	return arr_floats;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	f507 5791 	add.w	r7, r7, #4640	@ 0x1220
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0800e718 	.word	0x0800e718
 800affc:	ffffedd4 	.word	0xffffedd4

0800b000 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	4a08      	ldr	r2, [pc, #32]	@ (800b030 <disk_status+0x30>)
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	79fa      	ldrb	r2, [r7, #7]
 800b018:	4905      	ldr	r1, [pc, #20]	@ (800b030 <disk_status+0x30>)
 800b01a:	440a      	add	r2, r1
 800b01c:	7a12      	ldrb	r2, [r2, #8]
 800b01e:	4610      	mov	r0, r2
 800b020:	4798      	blx	r3
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b026:	7bfb      	ldrb	r3, [r7, #15]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	240005a8 	.word	0x240005a8

0800b034 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	4a0e      	ldr	r2, [pc, #56]	@ (800b080 <disk_initialize+0x4c>)
 800b046:	5cd3      	ldrb	r3, [r2, r3]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d114      	bne.n	800b076 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	4a0c      	ldr	r2, [pc, #48]	@ (800b080 <disk_initialize+0x4c>)
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	79fa      	ldrb	r2, [r7, #7]
 800b05a:	4909      	ldr	r1, [pc, #36]	@ (800b080 <disk_initialize+0x4c>)
 800b05c:	440a      	add	r2, r1
 800b05e:	7a12      	ldrb	r2, [r2, #8]
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b06e:	79fb      	ldrb	r3, [r7, #7]
 800b070:	4a03      	ldr	r2, [pc, #12]	@ (800b080 <disk_initialize+0x4c>)
 800b072:	2101      	movs	r1, #1
 800b074:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	240005a8 	.word	0x240005a8

0800b084 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4a0a      	ldr	r2, [pc, #40]	@ (800b0c0 <disk_read+0x3c>)
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	689c      	ldr	r4, [r3, #8]
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4a07      	ldr	r2, [pc, #28]	@ (800b0c0 <disk_read+0x3c>)
 800b0a4:	4413      	add	r3, r2
 800b0a6:	7a18      	ldrb	r0, [r3, #8]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	47a0      	blx	r4
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	240005a8 	.word	0x240005a8

0800b0c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b0c4:	b590      	push	{r4, r7, lr}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
 800b0ce:	603b      	str	r3, [r7, #0]
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	4a0a      	ldr	r2, [pc, #40]	@ (800b100 <disk_write+0x3c>)
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	68dc      	ldr	r4, [r3, #12]
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	4a07      	ldr	r2, [pc, #28]	@ (800b100 <disk_write+0x3c>)
 800b0e4:	4413      	add	r3, r2
 800b0e6:	7a18      	ldrb	r0, [r3, #8]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	47a0      	blx	r4
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	371c      	adds	r7, #28
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd90      	pop	{r4, r7, pc}
 800b0fe:	bf00      	nop
 800b100:	240005a8 	.word	0x240005a8

0800b104 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	603a      	str	r2, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
 800b110:	460b      	mov	r3, r1
 800b112:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	4a09      	ldr	r2, [pc, #36]	@ (800b13c <disk_ioctl+0x38>)
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	79fa      	ldrb	r2, [r7, #7]
 800b122:	4906      	ldr	r1, [pc, #24]	@ (800b13c <disk_ioctl+0x38>)
 800b124:	440a      	add	r2, r1
 800b126:	7a10      	ldrb	r0, [r2, #8]
 800b128:	79b9      	ldrb	r1, [r7, #6]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]
  return res;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	240005a8 	.word	0x240005a8

0800b140 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3301      	adds	r3, #1
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b150:	89fb      	ldrh	r3, [r7, #14]
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	b21a      	sxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	b21b      	sxth	r3, r3
 800b15c:	4313      	orrs	r3, r2
 800b15e:	b21b      	sxth	r3, r3
 800b160:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b162:	89fb      	ldrh	r3, [r7, #14]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3303      	adds	r3, #3
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	021b      	lsls	r3, r3, #8
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	3202      	adds	r2, #2
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	3201      	adds	r2, #1
 800b196:	7812      	ldrb	r2, [r2, #0]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	7812      	ldrb	r2, [r2, #0]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	887a      	ldrh	r2, [r7, #2]
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	0a1b      	lsrs	r3, r3, #8
 800b1d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	607a      	str	r2, [r7, #4]
 800b1da:	887a      	ldrh	r2, [r7, #2]
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	b2d2      	uxtb	r2, r2
 800b200:	701a      	strb	r2, [r3, #0]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	0a1b      	lsrs	r3, r3, #8
 800b206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	b2d2      	uxtb	r2, r2
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	b2d2      	uxtb	r2, r2
 800b236:	701a      	strb	r2, [r3, #0]
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00d      	beq.n	800b27a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	1c53      	adds	r3, r2, #1
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	1c59      	adds	r1, r3, #1
 800b268:	6179      	str	r1, [r7, #20]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	3b01      	subs	r3, #1
 800b272:	607b      	str	r3, [r7, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f1      	bne.n	800b25e <mem_cpy+0x1a>
	}
}
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b286:	b480      	push	{r7}
 800b288:	b087      	sub	sp, #28
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	617a      	str	r2, [r7, #20]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	b2d2      	uxtb	r2, r2
 800b2a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	607b      	str	r3, [r7, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1f3      	bne.n	800b296 <mem_set+0x10>
}
 800b2ae:	bf00      	nop
 800b2b0:	bf00      	nop
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b2bc:	b480      	push	{r7}
 800b2be:	b089      	sub	sp, #36	@ 0x24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	61fa      	str	r2, [r7, #28]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	61ba      	str	r2, [r7, #24]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	1acb      	subs	r3, r1, r3
 800b2e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	607b      	str	r3, [r7, #4]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d002      	beq.n	800b2fc <mem_cmp+0x40>
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0eb      	beq.n	800b2d4 <mem_cmp+0x18>

	return r;
 800b2fc:	697b      	ldr	r3, [r7, #20]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3724      	adds	r7, #36	@ 0x24
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b314:	e002      	b.n	800b31c <chk_chr+0x12>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3301      	adds	r3, #1
 800b31a:	607b      	str	r3, [r7, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d005      	beq.n	800b330 <chk_chr+0x26>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d1f2      	bne.n	800b316 <chk_chr+0xc>
	return *str;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	781b      	ldrb	r3, [r3, #0]
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e029      	b.n	800b3a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b354:	4a27      	ldr	r2, [pc, #156]	@ (800b3f4 <chk_lock+0xb4>)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	011b      	lsls	r3, r3, #4
 800b35a:	4413      	add	r3, r2
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d01d      	beq.n	800b39e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b362:	4a24      	ldr	r2, [pc, #144]	@ (800b3f4 <chk_lock+0xb4>)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	4413      	add	r3, r2
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	429a      	cmp	r2, r3
 800b372:	d116      	bne.n	800b3a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b374:	4a1f      	ldr	r2, [pc, #124]	@ (800b3f4 <chk_lock+0xb4>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	011b      	lsls	r3, r3, #4
 800b37a:	4413      	add	r3, r2
 800b37c:	3304      	adds	r3, #4
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b384:	429a      	cmp	r2, r3
 800b386:	d10c      	bne.n	800b3a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b388:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f4 <chk_lock+0xb4>)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	4413      	add	r3, r2
 800b390:	3308      	adds	r3, #8
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b398:	429a      	cmp	r2, r3
 800b39a:	d102      	bne.n	800b3a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b39c:	e007      	b.n	800b3ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d9d2      	bls.n	800b354 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d109      	bne.n	800b3c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <chk_lock+0x80>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d101      	bne.n	800b3c4 <chk_lock+0x84>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	e010      	b.n	800b3e6 <chk_lock+0xa6>
 800b3c4:	2312      	movs	r3, #18
 800b3c6:	e00e      	b.n	800b3e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d108      	bne.n	800b3e0 <chk_lock+0xa0>
 800b3ce:	4a09      	ldr	r2, [pc, #36]	@ (800b3f4 <chk_lock+0xb4>)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	011b      	lsls	r3, r3, #4
 800b3d4:	4413      	add	r3, r2
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3de:	d101      	bne.n	800b3e4 <chk_lock+0xa4>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	e000      	b.n	800b3e6 <chk_lock+0xa6>
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	24000388 	.word	0x24000388

0800b3f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3fe:	2300      	movs	r3, #0
 800b400:	607b      	str	r3, [r7, #4]
 800b402:	e002      	b.n	800b40a <enq_lock+0x12>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3301      	adds	r3, #1
 800b408:	607b      	str	r3, [r7, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d806      	bhi.n	800b41e <enq_lock+0x26>
 800b410:	4a09      	ldr	r2, [pc, #36]	@ (800b438 <enq_lock+0x40>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	011b      	lsls	r3, r3, #4
 800b416:	4413      	add	r3, r2
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f2      	bne.n	800b404 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b02      	cmp	r3, #2
 800b422:	bf14      	ite	ne
 800b424:	2301      	movne	r3, #1
 800b426:	2300      	moveq	r3, #0
 800b428:	b2db      	uxtb	r3, r3
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	24000388 	.word	0x24000388

0800b43c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	e01f      	b.n	800b48c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b44c:	4a41      	ldr	r2, [pc, #260]	@ (800b554 <inc_lock+0x118>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	4413      	add	r3, r2
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d113      	bne.n	800b486 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b45e:	4a3d      	ldr	r2, [pc, #244]	@ (800b554 <inc_lock+0x118>)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	4413      	add	r3, r2
 800b466:	3304      	adds	r3, #4
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b46e:	429a      	cmp	r2, r3
 800b470:	d109      	bne.n	800b486 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b472:	4a38      	ldr	r2, [pc, #224]	@ (800b554 <inc_lock+0x118>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	4413      	add	r3, r2
 800b47a:	3308      	adds	r3, #8
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b482:	429a      	cmp	r2, r3
 800b484:	d006      	beq.n	800b494 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d9dc      	bls.n	800b44c <inc_lock+0x10>
 800b492:	e000      	b.n	800b496 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b494:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d132      	bne.n	800b502 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e002      	b.n	800b4a8 <inc_lock+0x6c>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d806      	bhi.n	800b4bc <inc_lock+0x80>
 800b4ae:	4a29      	ldr	r2, [pc, #164]	@ (800b554 <inc_lock+0x118>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	4413      	add	r3, r2
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f2      	bne.n	800b4a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d101      	bne.n	800b4c6 <inc_lock+0x8a>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e040      	b.n	800b548 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	4922      	ldr	r1, [pc, #136]	@ (800b554 <inc_lock+0x118>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	011b      	lsls	r3, r3, #4
 800b4d0:	440b      	add	r3, r1
 800b4d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	491e      	ldr	r1, [pc, #120]	@ (800b554 <inc_lock+0x118>)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	011b      	lsls	r3, r3, #4
 800b4de:	440b      	add	r3, r1
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	695a      	ldr	r2, [r3, #20]
 800b4e8:	491a      	ldr	r1, [pc, #104]	@ (800b554 <inc_lock+0x118>)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	011b      	lsls	r3, r3, #4
 800b4ee:	440b      	add	r3, r1
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b4f4:	4a17      	ldr	r2, [pc, #92]	@ (800b554 <inc_lock+0x118>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	4413      	add	r3, r2
 800b4fc:	330c      	adds	r3, #12
 800b4fe:	2200      	movs	r2, #0
 800b500:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d009      	beq.n	800b51c <inc_lock+0xe0>
 800b508:	4a12      	ldr	r2, [pc, #72]	@ (800b554 <inc_lock+0x118>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	4413      	add	r3, r2
 800b510:	330c      	adds	r3, #12
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <inc_lock+0xe0>
 800b518:	2300      	movs	r3, #0
 800b51a:	e015      	b.n	800b548 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d108      	bne.n	800b534 <inc_lock+0xf8>
 800b522:	4a0c      	ldr	r2, [pc, #48]	@ (800b554 <inc_lock+0x118>)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	4413      	add	r3, r2
 800b52a:	330c      	adds	r3, #12
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	e001      	b.n	800b538 <inc_lock+0xfc>
 800b534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b538:	4906      	ldr	r1, [pc, #24]	@ (800b554 <inc_lock+0x118>)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	440b      	add	r3, r1
 800b540:	330c      	adds	r3, #12
 800b542:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3301      	adds	r3, #1
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	24000388 	.word	0x24000388

0800b558 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3b01      	subs	r3, #1
 800b564:	607b      	str	r3, [r7, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d825      	bhi.n	800b5b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b56c:	4a17      	ldr	r2, [pc, #92]	@ (800b5cc <dec_lock+0x74>)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	4413      	add	r3, r2
 800b574:	330c      	adds	r3, #12
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b57a:	89fb      	ldrh	r3, [r7, #14]
 800b57c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b580:	d101      	bne.n	800b586 <dec_lock+0x2e>
 800b582:	2300      	movs	r3, #0
 800b584:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b586:	89fb      	ldrh	r3, [r7, #14]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <dec_lock+0x3a>
 800b58c:	89fb      	ldrh	r3, [r7, #14]
 800b58e:	3b01      	subs	r3, #1
 800b590:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b592:	4a0e      	ldr	r2, [pc, #56]	@ (800b5cc <dec_lock+0x74>)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	4413      	add	r3, r2
 800b59a:	330c      	adds	r3, #12
 800b59c:	89fa      	ldrh	r2, [r7, #14]
 800b59e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5a0:	89fb      	ldrh	r3, [r7, #14]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d105      	bne.n	800b5b2 <dec_lock+0x5a>
 800b5a6:	4a09      	ldr	r2, [pc, #36]	@ (800b5cc <dec_lock+0x74>)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	011b      	lsls	r3, r3, #4
 800b5ac:	4413      	add	r3, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	737b      	strb	r3, [r7, #13]
 800b5b6:	e001      	b.n	800b5bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b5bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	24000388 	.word	0x24000388

0800b5d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	e010      	b.n	800b600 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5de:	4a0d      	ldr	r2, [pc, #52]	@ (800b614 <clear_lock+0x44>)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	4413      	add	r3, r2
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d105      	bne.n	800b5fa <clear_lock+0x2a>
 800b5ee:	4a09      	ldr	r2, [pc, #36]	@ (800b614 <clear_lock+0x44>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	4413      	add	r3, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d9eb      	bls.n	800b5de <clear_lock+0xe>
	}
}
 800b606:	bf00      	nop
 800b608:	bf00      	nop
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	24000388 	.word	0x24000388

0800b618 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	78db      	ldrb	r3, [r3, #3]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d034      	beq.n	800b696 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	7858      	ldrb	r0, [r3, #1]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b63c:	2301      	movs	r3, #1
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	f7ff fd40 	bl	800b0c4 <disk_write>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	73fb      	strb	r3, [r7, #15]
 800b64e:	e022      	b.n	800b696 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	1ad2      	subs	r2, r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	429a      	cmp	r2, r3
 800b664:	d217      	bcs.n	800b696 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	789b      	ldrb	r3, [r3, #2]
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	e010      	b.n	800b690 <sync_window+0x78>
					wsect += fs->fsize;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	4413      	add	r3, r2
 800b676:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7858      	ldrb	r0, [r3, #1]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b682:	2301      	movs	r3, #1
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	f7ff fd1d 	bl	800b0c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d8eb      	bhi.n	800b66e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b696:	7bfb      	ldrb	r3, [r7, #15]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d01b      	beq.n	800b6f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff ffad 	bl	800b618 <sync_window>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d113      	bne.n	800b6f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7858      	ldrb	r0, [r3, #1]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	f7ff fcd5 	bl	800b084 <disk_read>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff ff87 	bl	800b618 <sync_window>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d158      	bne.n	800b7c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d148      	bne.n	800b7ae <sync_fs+0xb2>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	791b      	ldrb	r3, [r3, #4]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d144      	bne.n	800b7ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3334      	adds	r3, #52	@ 0x34
 800b728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b72c:	2100      	movs	r1, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff fda9 	bl	800b286 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3334      	adds	r3, #52	@ 0x34
 800b738:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b73c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fd38 	bl	800b1b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3334      	adds	r3, #52	@ 0x34
 800b74a:	4921      	ldr	r1, [pc, #132]	@ (800b7d0 <sync_fs+0xd4>)
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fd4d 	bl	800b1ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3334      	adds	r3, #52	@ 0x34
 800b756:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b75a:	491e      	ldr	r1, [pc, #120]	@ (800b7d4 <sync_fs+0xd8>)
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fd45 	bl	800b1ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3334      	adds	r3, #52	@ 0x34
 800b766:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7ff fd3b 	bl	800b1ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3334      	adds	r3, #52	@ 0x34
 800b77a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7ff fd31 	bl	800b1ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	7858      	ldrb	r0, [r3, #1]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	f7ff fc8e 	bl	800b0c4 <disk_write>
			fs->fsi_flag = 0;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fca4 	bl	800b104 <disk_ioctl>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <sync_fs+0xca>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	41615252 	.word	0x41615252
 800b7d4:	61417272 	.word	0x61417272

0800b7d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	3b02      	subs	r3, #2
 800b7e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	3b02      	subs	r3, #2
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d301      	bcc.n	800b7f8 <clust2sect+0x20>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	e008      	b.n	800b80a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	895b      	ldrh	r3, [r3, #10]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	fb03 f202 	mul.w	r2, r3, r2
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b808:	4413      	add	r3, r2
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d904      	bls.n	800b836 <get_fat+0x20>
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b836:	2301      	movs	r3, #1
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	e08e      	b.n	800b95a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b83c:	f04f 33ff 	mov.w	r3, #4294967295
 800b840:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b03      	cmp	r3, #3
 800b848:	d061      	beq.n	800b90e <get_fat+0xf8>
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	dc7b      	bgt.n	800b946 <get_fat+0x130>
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d002      	beq.n	800b858 <get_fat+0x42>
 800b852:	2b02      	cmp	r3, #2
 800b854:	d041      	beq.n	800b8da <get_fat+0xc4>
 800b856:	e076      	b.n	800b946 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	085b      	lsrs	r3, r3, #1
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	4413      	add	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	0a5b      	lsrs	r3, r3, #9
 800b86e:	4413      	add	r3, r2
 800b870:	4619      	mov	r1, r3
 800b872:	6938      	ldr	r0, [r7, #16]
 800b874:	f7ff ff14 	bl	800b6a0 <move_window>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d166      	bne.n	800b94c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	60fa      	str	r2, [r7, #12]
 800b884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	4413      	add	r3, r2
 800b88c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b890:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	0a5b      	lsrs	r3, r3, #9
 800b89a:	4413      	add	r3, r2
 800b89c:	4619      	mov	r1, r3
 800b89e:	6938      	ldr	r0, [r7, #16]
 800b8a0:	f7ff fefe 	bl	800b6a0 <move_window>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d152      	bne.n	800b950 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b8b8:	021b      	lsls	r3, r3, #8
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <get_fat+0xba>
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	091b      	lsrs	r3, r3, #4
 800b8ce:	e002      	b.n	800b8d6 <get_fat+0xc0>
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d6:	617b      	str	r3, [r7, #20]
			break;
 800b8d8:	e03f      	b.n	800b95a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	4413      	add	r3, r2
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6938      	ldr	r0, [r7, #16]
 800b8e8:	f7ff feda 	bl	800b6a0 <move_window>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d130      	bne.n	800b954 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b900:	4413      	add	r3, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff fc1c 	bl	800b140 <ld_word>
 800b908:	4603      	mov	r3, r0
 800b90a:	617b      	str	r3, [r7, #20]
			break;
 800b90c:	e025      	b.n	800b95a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	09db      	lsrs	r3, r3, #7
 800b916:	4413      	add	r3, r2
 800b918:	4619      	mov	r1, r3
 800b91a:	6938      	ldr	r0, [r7, #16]
 800b91c:	f7ff fec0 	bl	800b6a0 <move_window>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d118      	bne.n	800b958 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b934:	4413      	add	r3, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fc1a 	bl	800b170 <ld_dword>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b942:	617b      	str	r3, [r7, #20]
			break;
 800b944:	e009      	b.n	800b95a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b946:	2301      	movs	r3, #1
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	e006      	b.n	800b95a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b94c:	bf00      	nop
 800b94e:	e004      	b.n	800b95a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b950:	bf00      	nop
 800b952:	e002      	b.n	800b95a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b954:	bf00      	nop
 800b956:	e000      	b.n	800b95a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b958:	bf00      	nop
		}
	}

	return val;
 800b95a:	697b      	ldr	r3, [r7, #20]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b089      	sub	sp, #36	@ 0x24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b970:	2302      	movs	r3, #2
 800b972:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b01      	cmp	r3, #1
 800b978:	f240 80d9 	bls.w	800bb2e <put_fat+0x1ca>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	429a      	cmp	r2, r3
 800b984:	f080 80d3 	bcs.w	800bb2e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	f000 8096 	beq.w	800babe <put_fat+0x15a>
 800b992:	2b03      	cmp	r3, #3
 800b994:	f300 80cb 	bgt.w	800bb2e <put_fat+0x1ca>
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d002      	beq.n	800b9a2 <put_fat+0x3e>
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d06e      	beq.n	800ba7e <put_fat+0x11a>
 800b9a0:	e0c5      	b.n	800bb2e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	61bb      	str	r3, [r7, #24]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	085b      	lsrs	r3, r3, #1
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	0a5b      	lsrs	r3, r3, #9
 800b9b8:	4413      	add	r3, r2
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f7ff fe6f 	bl	800b6a0 <move_window>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9c6:	7ffb      	ldrb	r3, [r7, #31]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f040 80a9 	bne.w	800bb20 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	1c59      	adds	r1, r3, #1
 800b9d8:	61b9      	str	r1, [r7, #24]
 800b9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9de:	4413      	add	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00d      	beq.n	800ba08 <put_fat+0xa4>
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	b25b      	sxtb	r3, r3
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	b25a      	sxtb	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	4313      	orrs	r3, r2
 800ba02:	b25b      	sxtb	r3, r3
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	e001      	b.n	800ba0c <put_fat+0xa8>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2201      	movs	r2, #1
 800ba14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	0a5b      	lsrs	r3, r3, #9
 800ba1e:	4413      	add	r3, r2
 800ba20:	4619      	mov	r1, r3
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fe3c 	bl	800b6a0 <move_window>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba2c:	7ffb      	ldrb	r3, [r7, #31]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d178      	bne.n	800bb24 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3e:	4413      	add	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <put_fat+0xf0>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	091b      	lsrs	r3, r3, #4
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	e00e      	b.n	800ba72 <put_fat+0x10e>
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	f023 030f 	bic.w	r3, r3, #15
 800ba5e:	b25a      	sxtb	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	0a1b      	lsrs	r3, r3, #8
 800ba64:	b25b      	sxtb	r3, r3
 800ba66:	f003 030f 	and.w	r3, r3, #15
 800ba6a:	b25b      	sxtb	r3, r3
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b25b      	sxtb	r3, r3
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	70da      	strb	r2, [r3, #3]
			break;
 800ba7c:	e057      	b.n	800bb2e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	0a1b      	lsrs	r3, r3, #8
 800ba86:	4413      	add	r3, r2
 800ba88:	4619      	mov	r1, r3
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f7ff fe08 	bl	800b6a0 <move_window>
 800ba90:	4603      	mov	r3, r0
 800ba92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba94:	7ffb      	ldrb	r3, [r7, #31]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d146      	bne.n	800bb28 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800baa8:	4413      	add	r3, r2
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	b292      	uxth	r2, r2
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff fb80 	bl	800b1b6 <st_word>
			fs->wflag = 1;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2201      	movs	r2, #1
 800baba:	70da      	strb	r2, [r3, #3]
			break;
 800babc:	e037      	b.n	800bb2e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	09db      	lsrs	r3, r3, #7
 800bac6:	4413      	add	r3, r2
 800bac8:	4619      	mov	r1, r3
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fde8 	bl	800b6a0 <move_window>
 800bad0:	4603      	mov	r3, r0
 800bad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bad4:	7ffb      	ldrb	r3, [r7, #31]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d128      	bne.n	800bb2c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800baee:	4413      	add	r3, r2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fb3d 	bl	800b170 <ld_dword>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bafc:	4323      	orrs	r3, r4
 800bafe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb0e:	4413      	add	r3, r2
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fb6a 	bl	800b1ec <st_dword>
			fs->wflag = 1;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	70da      	strb	r2, [r3, #3]
			break;
 800bb1e:	e006      	b.n	800bb2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb20:	bf00      	nop
 800bb22:	e004      	b.n	800bb2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb24:	bf00      	nop
 800bb26:	e002      	b.n	800bb2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb28:	bf00      	nop
 800bb2a:	e000      	b.n	800bb2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb2c:	bf00      	nop
		}
	}
	return res;
 800bb2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3724      	adds	r7, #36	@ 0x24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd90      	pop	{r4, r7, pc}

0800bb38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d904      	bls.n	800bb5e <remove_chain+0x26>
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d301      	bcc.n	800bb62 <remove_chain+0x2a>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e04b      	b.n	800bbfa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00c      	beq.n	800bb82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb68:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6c:	6879      	ldr	r1, [r7, #4]
 800bb6e:	69b8      	ldr	r0, [r7, #24]
 800bb70:	f7ff fef8 	bl	800b964 <put_fat>
 800bb74:	4603      	mov	r3, r0
 800bb76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb78:	7ffb      	ldrb	r3, [r7, #31]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <remove_chain+0x4a>
 800bb7e:	7ffb      	ldrb	r3, [r7, #31]
 800bb80:	e03b      	b.n	800bbfa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f7ff fe46 	bl	800b816 <get_fat>
 800bb8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d031      	beq.n	800bbf6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <remove_chain+0x64>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e02e      	b.n	800bbfa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	d101      	bne.n	800bba8 <remove_chain+0x70>
 800bba4:	2301      	movs	r3, #1
 800bba6:	e028      	b.n	800bbfa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bba8:	2200      	movs	r2, #0
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	69b8      	ldr	r0, [r7, #24]
 800bbae:	f7ff fed9 	bl	800b964 <put_fat>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbb6:	7ffb      	ldrb	r3, [r7, #31]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <remove_chain+0x88>
 800bbbc:	7ffb      	ldrb	r3, [r7, #31]
 800bbbe:	e01c      	b.n	800bbfa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	695a      	ldr	r2, [r3, #20]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	3b02      	subs	r3, #2
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d20b      	bcs.n	800bbe6 <remove_chain+0xae>
			fs->free_clst++;
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	791b      	ldrb	r3, [r3, #4]
 800bbdc:	f043 0301 	orr.w	r3, r3, #1
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d3c6      	bcc.n	800bb82 <remove_chain+0x4a>
 800bbf4:	e000      	b.n	800bbf8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bbf6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b088      	sub	sp, #32
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10d      	bne.n	800bc34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d004      	beq.n	800bc2e <create_chain+0x2c>
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d31b      	bcc.n	800bc66 <create_chain+0x64>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	e018      	b.n	800bc66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff fded 	bl	800b816 <get_fat>
 800bc3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d801      	bhi.n	800bc48 <create_chain+0x46>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e070      	b.n	800bd2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4e:	d101      	bne.n	800bc54 <create_chain+0x52>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	e06a      	b.n	800bd2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d201      	bcs.n	800bc62 <create_chain+0x60>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	e063      	b.n	800bd2a <create_chain+0x128>
		scl = clst;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	69fa      	ldr	r2, [r7, #28]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d307      	bcc.n	800bc8a <create_chain+0x88>
				ncl = 2;
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc7e:	69fa      	ldr	r2, [r7, #28]
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d901      	bls.n	800bc8a <create_chain+0x88>
 800bc86:	2300      	movs	r3, #0
 800bc88:	e04f      	b.n	800bd2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc8a:	69f9      	ldr	r1, [r7, #28]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff fdc2 	bl	800b816 <get_fat>
 800bc92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00e      	beq.n	800bcb8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d003      	beq.n	800bca8 <create_chain+0xa6>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca6:	d101      	bne.n	800bcac <create_chain+0xaa>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	e03e      	b.n	800bd2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d1da      	bne.n	800bc6a <create_chain+0x68>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e038      	b.n	800bd2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bcb8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	69f9      	ldr	r1, [r7, #28]
 800bcc0:	6938      	ldr	r0, [r7, #16]
 800bcc2:	f7ff fe4f 	bl	800b964 <put_fat>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d109      	bne.n	800bce4 <create_chain+0xe2>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d006      	beq.n	800bce4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcd6:	69fa      	ldr	r2, [r7, #28]
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6938      	ldr	r0, [r7, #16]
 800bcdc:	f7ff fe42 	bl	800b964 <put_fat>
 800bce0:	4603      	mov	r3, r0
 800bce2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d116      	bne.n	800bd18 <create_chain+0x116>
		fs->last_clst = ncl;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	69fa      	ldr	r2, [r7, #28]
 800bcee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	3b02      	subs	r3, #2
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d804      	bhi.n	800bd08 <create_chain+0x106>
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	1e5a      	subs	r2, r3, #1
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	791b      	ldrb	r3, [r3, #4]
 800bd0c:	f043 0301 	orr.w	r3, r3, #1
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	711a      	strb	r2, [r3, #4]
 800bd16:	e007      	b.n	800bd28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d102      	bne.n	800bd24 <create_chain+0x122>
 800bd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd22:	e000      	b.n	800bd26 <create_chain+0x124>
 800bd24:	2301      	movs	r3, #1
 800bd26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd28:	69fb      	ldr	r3, [r7, #28]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b087      	sub	sp, #28
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd46:	3304      	adds	r3, #4
 800bd48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	0a5b      	lsrs	r3, r3, #9
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	8952      	ldrh	r2, [r2, #10]
 800bd52:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd56:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	1d1a      	adds	r2, r3, #4
 800bd5c:	613a      	str	r2, [r7, #16]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <clmt_clust+0x3a>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e010      	b.n	800bd8e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bd6c:	697a      	ldr	r2, [r7, #20]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d307      	bcc.n	800bd84 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	617b      	str	r3, [r7, #20]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd82:	e7e9      	b.n	800bd58 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bd84:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	4413      	add	r3, r2
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b086      	sub	sp, #24
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdb0:	d204      	bcs.n	800bdbc <dir_sdi+0x22>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	f003 031f 	and.w	r3, r3, #31
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e063      	b.n	800be88 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <dir_sdi+0x46>
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d902      	bls.n	800bde0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdde:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10c      	bne.n	800be00 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	095b      	lsrs	r3, r3, #5
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	8912      	ldrh	r2, [r2, #8]
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d301      	bcc.n	800bdf6 <dir_sdi+0x5c>
 800bdf2:	2302      	movs	r3, #2
 800bdf4:	e048      	b.n	800be88 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	61da      	str	r2, [r3, #28]
 800bdfe:	e029      	b.n	800be54 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	895b      	ldrh	r3, [r3, #10]
 800be04:	025b      	lsls	r3, r3, #9
 800be06:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be08:	e019      	b.n	800be3e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff fd01 	bl	800b816 <get_fat>
 800be14:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d101      	bne.n	800be22 <dir_sdi+0x88>
 800be1e:	2301      	movs	r3, #1
 800be20:	e032      	b.n	800be88 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d904      	bls.n	800be32 <dir_sdi+0x98>
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d301      	bcc.n	800be36 <dir_sdi+0x9c>
 800be32:	2302      	movs	r3, #2
 800be34:	e028      	b.n	800be88 <dir_sdi+0xee>
			ofs -= csz;
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	429a      	cmp	r2, r3
 800be44:	d2e1      	bcs.n	800be0a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be46:	6979      	ldr	r1, [r7, #20]
 800be48:	6938      	ldr	r0, [r7, #16]
 800be4a:	f7ff fcc5 	bl	800b7d8 <clust2sect>
 800be4e:	4602      	mov	r2, r0
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <dir_sdi+0xcc>
 800be62:	2302      	movs	r3, #2
 800be64:	e010      	b.n	800be88 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	69da      	ldr	r2, [r3, #28]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	0a5b      	lsrs	r3, r3, #9
 800be6e:	441a      	add	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be80:	441a      	add	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3718      	adds	r7, #24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	3320      	adds	r3, #32
 800bea6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <dir_next+0x28>
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800beb6:	d301      	bcc.n	800bebc <dir_next+0x2c>
 800beb8:	2304      	movs	r3, #4
 800beba:	e0aa      	b.n	800c012 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f040 8098 	bne.w	800bff8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	095b      	lsrs	r3, r3, #5
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	8912      	ldrh	r2, [r2, #8]
 800bee2:	4293      	cmp	r3, r2
 800bee4:	f0c0 8088 	bcc.w	800bff8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	61da      	str	r2, [r3, #28]
 800beee:	2304      	movs	r3, #4
 800bef0:	e08f      	b.n	800c012 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	0a5b      	lsrs	r3, r3, #9
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	8952      	ldrh	r2, [r2, #10]
 800befa:	3a01      	subs	r2, #1
 800befc:	4013      	ands	r3, r2
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d17a      	bne.n	800bff8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	699b      	ldr	r3, [r3, #24]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7ff fc83 	bl	800b816 <get_fat>
 800bf10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d801      	bhi.n	800bf1c <dir_next+0x8c>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e07a      	b.n	800c012 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d101      	bne.n	800bf28 <dir_next+0x98>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e074      	b.n	800c012 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d358      	bcc.n	800bfe4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d104      	bne.n	800bf42 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	61da      	str	r2, [r3, #28]
 800bf3e:	2304      	movs	r3, #4
 800bf40:	e067      	b.n	800c012 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7ff fe59 	bl	800bc02 <create_chain>
 800bf50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <dir_next+0xcc>
 800bf58:	2307      	movs	r3, #7
 800bf5a:	e05a      	b.n	800c012 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d101      	bne.n	800bf66 <dir_next+0xd6>
 800bf62:	2302      	movs	r3, #2
 800bf64:	e055      	b.n	800c012 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6c:	d101      	bne.n	800bf72 <dir_next+0xe2>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e04f      	b.n	800c012 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f7ff fb50 	bl	800b618 <sync_window>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <dir_next+0xf2>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e047      	b.n	800c012 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3334      	adds	r3, #52	@ 0x34
 800bf86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff f97a 	bl	800b286 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf92:	2300      	movs	r3, #0
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	6979      	ldr	r1, [r7, #20]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff fc1d 	bl	800b7d8 <clust2sect>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	631a      	str	r2, [r3, #48]	@ 0x30
 800bfa4:	e012      	b.n	800bfcc <dir_next+0x13c>
						fs->wflag = 1;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fb33 	bl	800b618 <sync_window>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <dir_next+0x12c>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e02a      	b.n	800c012 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	613b      	str	r3, [r7, #16]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	631a      	str	r2, [r3, #48]	@ 0x30
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	895b      	ldrh	r3, [r3, #10]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d3e6      	bcc.n	800bfa6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	1ad2      	subs	r2, r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bfea:	6979      	ldr	r1, [r7, #20]
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f7ff fbf3 	bl	800b7d8 <clust2sect>
 800bff2:	4602      	mov	r2, r0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00a:	441a      	add	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b086      	sub	sp, #24
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c02a:	2100      	movs	r1, #0
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff feb4 	bl	800bd9a <dir_sdi>
 800c032:	4603      	mov	r3, r0
 800c034:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d12b      	bne.n	800c094 <dir_alloc+0x7a>
		n = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	4619      	mov	r1, r3
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f7ff fb2a 	bl	800b6a0 <move_window>
 800c04c:	4603      	mov	r3, r0
 800c04e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d11d      	bne.n	800c092 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2be5      	cmp	r3, #229	@ 0xe5
 800c05e:	d004      	beq.n	800c06a <dir_alloc+0x50>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a1b      	ldr	r3, [r3, #32]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d107      	bne.n	800c07a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	3301      	adds	r3, #1
 800c06e:	613b      	str	r3, [r7, #16]
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	429a      	cmp	r2, r3
 800c076:	d102      	bne.n	800c07e <dir_alloc+0x64>
 800c078:	e00c      	b.n	800c094 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c07a:	2300      	movs	r3, #0
 800c07c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c07e:	2101      	movs	r1, #1
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7ff ff05 	bl	800be90 <dir_next>
 800c086:	4603      	mov	r3, r0
 800c088:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c08a:	7dfb      	ldrb	r3, [r7, #23]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0d7      	beq.n	800c040 <dir_alloc+0x26>
 800c090:	e000      	b.n	800c094 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c092:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b04      	cmp	r3, #4
 800c098:	d101      	bne.n	800c09e <dir_alloc+0x84>
 800c09a:	2307      	movs	r3, #7
 800c09c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	331a      	adds	r3, #26
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7ff f842 	bl	800b140 <ld_word>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d109      	bne.n	800c0dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	3314      	adds	r3, #20
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff f837 	bl	800b140 <ld_word>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	60f8      	str	r0, [r7, #12]
 800c0ee:	60b9      	str	r1, [r7, #8]
 800c0f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	331a      	adds	r3, #26
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff f85a 	bl	800b1b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b03      	cmp	r3, #3
 800c108:	d109      	bne.n	800c11e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	f103 0214 	add.w	r2, r3, #20
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	0c1b      	lsrs	r3, r3, #16
 800c114:	b29b      	uxth	r3, r3
 800c116:	4619      	mov	r1, r3
 800c118:	4610      	mov	r0, r2
 800c11a:	f7ff f84c 	bl	800b1b6 <st_word>
	}
}
 800c11e:	bf00      	nop
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c128:	b590      	push	{r4, r7, lr}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	331a      	adds	r3, #26
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff f802 	bl	800b140 <ld_word>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <cmp_lfn+0x1e>
 800c142:	2300      	movs	r3, #0
 800c144:	e059      	b.n	800c1fa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c14e:	1e5a      	subs	r2, r3, #1
 800c150:	4613      	mov	r3, r2
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c15c:	2301      	movs	r3, #1
 800c15e:	81fb      	strh	r3, [r7, #14]
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	e033      	b.n	800c1ce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c166:	4a27      	ldr	r2, [pc, #156]	@ (800c204 <cmp_lfn+0xdc>)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	4413      	add	r3, r2
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	4413      	add	r3, r2
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe ffe3 	bl	800b140 <ld_word>
 800c17a:	4603      	mov	r3, r0
 800c17c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c17e:	89fb      	ldrh	r3, [r7, #14]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01a      	beq.n	800c1ba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2bfe      	cmp	r3, #254	@ 0xfe
 800c188:	d812      	bhi.n	800c1b0 <cmp_lfn+0x88>
 800c18a:	89bb      	ldrh	r3, [r7, #12]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f001 fcd5 	bl	800db3c <ff_wtoupper>
 800c192:	4603      	mov	r3, r0
 800c194:	461c      	mov	r4, r3
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	617a      	str	r2, [r7, #20]
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f001 fcc9 	bl	800db3c <ff_wtoupper>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	d001      	beq.n	800c1b4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e022      	b.n	800c1fa <cmp_lfn+0xd2>
			}
			wc = uc;
 800c1b4:	89bb      	ldrh	r3, [r7, #12]
 800c1b6:	81fb      	strh	r3, [r7, #14]
 800c1b8:	e006      	b.n	800c1c8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c1ba:	89bb      	ldrh	r3, [r7, #12]
 800c1bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d001      	beq.n	800c1c8 <cmp_lfn+0xa0>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e018      	b.n	800c1fa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b0c      	cmp	r3, #12
 800c1d2:	d9c8      	bls.n	800c166 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00b      	beq.n	800c1f8 <cmp_lfn+0xd0>
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d008      	beq.n	800c1f8 <cmp_lfn+0xd0>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <cmp_lfn+0xd0>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	e000      	b.n	800c1fa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c1f8:	2301      	movs	r3, #1
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	371c      	adds	r7, #28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd90      	pop	{r4, r7, pc}
 800c202:	bf00      	nop
 800c204:	0800e810 	.word	0x0800e810

0800c208 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4611      	mov	r1, r2
 800c214:	461a      	mov	r2, r3
 800c216:	460b      	mov	r3, r1
 800c218:	71fb      	strb	r3, [r7, #7]
 800c21a:	4613      	mov	r3, r2
 800c21c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	330d      	adds	r3, #13
 800c222:	79ba      	ldrb	r2, [r7, #6]
 800c224:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	330b      	adds	r3, #11
 800c22a:	220f      	movs	r2, #15
 800c22c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	330c      	adds	r3, #12
 800c232:	2200      	movs	r2, #0
 800c234:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	331a      	adds	r3, #26
 800c23a:	2100      	movs	r1, #0
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe ffba 	bl	800b1b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c242:	79fb      	ldrb	r3, [r7, #7]
 800c244:	1e5a      	subs	r2, r3, #1
 800c246:	4613      	mov	r3, r2
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	82fb      	strh	r3, [r7, #22]
 800c256:	2300      	movs	r3, #0
 800c258:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c25a:	8afb      	ldrh	r3, [r7, #22]
 800c25c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c260:	4293      	cmp	r3, r2
 800c262:	d007      	beq.n	800c274 <put_lfn+0x6c>
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	61fa      	str	r2, [r7, #28]
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4413      	add	r3, r2
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c274:	4a17      	ldr	r2, [pc, #92]	@ (800c2d4 <put_lfn+0xcc>)
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	4413      	add	r3, r2
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4413      	add	r3, r2
 800c282:	8afa      	ldrh	r2, [r7, #22]
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe ff95 	bl	800b1b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c28c:	8afb      	ldrh	r3, [r7, #22]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <put_lfn+0x90>
 800c292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c296:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	3301      	adds	r3, #1
 800c29c:	61bb      	str	r3, [r7, #24]
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b0c      	cmp	r3, #12
 800c2a2:	d9da      	bls.n	800c25a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c2a4:	8afb      	ldrh	r3, [r7, #22]
 800c2a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d006      	beq.n	800c2bc <put_lfn+0xb4>
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d103      	bne.n	800c2c4 <put_lfn+0xbc>
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	79fa      	ldrb	r2, [r7, #7]
 800c2c8:	701a      	strb	r2, [r3, #0]
}
 800c2ca:	bf00      	nop
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800e810 	.word	0x0800e810

0800c2d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08c      	sub	sp, #48	@ 0x30
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c2e6:	220b      	movs	r2, #11
 800c2e8:	68b9      	ldr	r1, [r7, #8]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7fe ffaa 	bl	800b244 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b05      	cmp	r3, #5
 800c2f4:	d929      	bls.n	800c34a <gen_numname+0x72>
		sr = seq;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c2fa:	e020      	b.n	800c33e <gen_numname+0x66>
			wc = *lfn++;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	1c9a      	adds	r2, r3, #2
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c306:	2300      	movs	r3, #0
 800c308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c30a:	e015      	b.n	800c338 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	005a      	lsls	r2, r3, #1
 800c310:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c312:	f003 0301 	and.w	r3, r3, #1
 800c316:	4413      	add	r3, r2
 800c318:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c31a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c31c:	085b      	lsrs	r3, r3, #1
 800c31e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <gen_numname+0x5a>
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	4b30      	ldr	r3, [pc, #192]	@ (800c3f0 <gen_numname+0x118>)
 800c32e:	4053      	eors	r3, r2
 800c330:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c334:	3301      	adds	r3, #1
 800c336:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33a:	2b0f      	cmp	r3, #15
 800c33c:	d9e6      	bls.n	800c30c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1da      	bne.n	800c2fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c34a:	2307      	movs	r3, #7
 800c34c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	b2db      	uxtb	r3, r3
 800c358:	3330      	adds	r3, #48	@ 0x30
 800c35a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c35e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c362:	2b39      	cmp	r3, #57	@ 0x39
 800c364:	d904      	bls.n	800c370 <gen_numname+0x98>
 800c366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c36a:	3307      	adds	r3, #7
 800c36c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c376:	3330      	adds	r3, #48	@ 0x30
 800c378:	443b      	add	r3, r7
 800c37a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c37e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	091b      	lsrs	r3, r3, #4
 800c386:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1df      	bne.n	800c34e <gen_numname+0x76>
	ns[i] = '~';
 800c38e:	f107 0214 	add.w	r2, r7, #20
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	4413      	add	r3, r2
 800c396:	227e      	movs	r2, #126	@ 0x7e
 800c398:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c39a:	2300      	movs	r3, #0
 800c39c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c39e:	e002      	b.n	800c3a6 <gen_numname+0xce>
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d205      	bcs.n	800c3ba <gen_numname+0xe2>
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	4413      	add	r3, r2
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d1f2      	bne.n	800c3a0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d807      	bhi.n	800c3d0 <gen_numname+0xf8>
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c3c6:	3330      	adds	r3, #48	@ 0x30
 800c3c8:	443b      	add	r3, r7
 800c3ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c3ce:	e000      	b.n	800c3d2 <gen_numname+0xfa>
 800c3d0:	2120      	movs	r1, #32
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	460a      	mov	r2, r1
 800c3de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	2b07      	cmp	r3, #7
 800c3e4:	d9e9      	bls.n	800c3ba <gen_numname+0xe2>
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	3730      	adds	r7, #48	@ 0x30
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	00011021 	.word	0x00011021

0800c3f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c400:	230b      	movs	r3, #11
 800c402:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	b2da      	uxtb	r2, r3
 800c408:	0852      	lsrs	r2, r2, #1
 800c40a:	01db      	lsls	r3, r3, #7
 800c40c:	4313      	orrs	r3, r2
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	1c59      	adds	r1, r3, #1
 800c414:	6079      	str	r1, [r7, #4]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	4413      	add	r3, r2
 800c41a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	3b01      	subs	r3, #1
 800c420:	60bb      	str	r3, [r7, #8]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1ed      	bne.n	800c404 <sum_sfn+0x10>
	return sum;
 800c428:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b086      	sub	sp, #24
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c444:	2100      	movs	r1, #0
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff fca7 	bl	800bd9a <dir_sdi>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <dir_find+0x24>
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	e0a9      	b.n	800c5ae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c45a:	23ff      	movs	r3, #255	@ 0xff
 800c45c:	753b      	strb	r3, [r7, #20]
 800c45e:	7d3b      	ldrb	r3, [r7, #20]
 800c460:	757b      	strb	r3, [r7, #21]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f04f 32ff 	mov.w	r2, #4294967295
 800c468:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	4619      	mov	r1, r3
 800c470:	6938      	ldr	r0, [r7, #16]
 800c472:	f7ff f915 	bl	800b6a0 <move_window>
 800c476:	4603      	mov	r3, r0
 800c478:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 8090 	bne.w	800c5a2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c48a:	7dbb      	ldrb	r3, [r7, #22]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <dir_find+0x60>
 800c490:	2304      	movs	r3, #4
 800c492:	75fb      	strb	r3, [r7, #23]
 800c494:	e08a      	b.n	800c5ac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	330b      	adds	r3, #11
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	7bfa      	ldrb	r2, [r7, #15]
 800c4a8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c4aa:	7dbb      	ldrb	r3, [r7, #22]
 800c4ac:	2be5      	cmp	r3, #229	@ 0xe5
 800c4ae:	d007      	beq.n	800c4c0 <dir_find+0x8a>
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	f003 0308 	and.w	r3, r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d009      	beq.n	800c4ce <dir_find+0x98>
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
 800c4bc:	2b0f      	cmp	r3, #15
 800c4be:	d006      	beq.n	800c4ce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c4c0:	23ff      	movs	r3, #255	@ 0xff
 800c4c2:	757b      	strb	r3, [r7, #21]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ca:	631a      	str	r2, [r3, #48]	@ 0x30
 800c4cc:	e05e      	b.n	800c58c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b0f      	cmp	r3, #15
 800c4d2:	d136      	bne.n	800c542 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c4da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d154      	bne.n	800c58c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c4e2:	7dbb      	ldrb	r3, [r7, #22]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00d      	beq.n	800c508 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	7b5b      	ldrb	r3, [r3, #13]
 800c4f2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c4f4:	7dbb      	ldrb	r3, [r7, #22]
 800c4f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4fa:	75bb      	strb	r3, [r7, #22]
 800c4fc:	7dbb      	ldrb	r3, [r7, #22]
 800c4fe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	695a      	ldr	r2, [r3, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c508:	7dba      	ldrb	r2, [r7, #22]
 800c50a:	7d7b      	ldrb	r3, [r7, #21]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d115      	bne.n	800c53c <dir_find+0x106>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	330d      	adds	r3, #13
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	7d3a      	ldrb	r2, [r7, #20]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d10e      	bne.n	800c53c <dir_find+0x106>
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	68da      	ldr	r2, [r3, #12]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	4619      	mov	r1, r3
 800c528:	4610      	mov	r0, r2
 800c52a:	f7ff fdfd 	bl	800c128 <cmp_lfn>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <dir_find+0x106>
 800c534:	7d7b      	ldrb	r3, [r7, #21]
 800c536:	3b01      	subs	r3, #1
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	e000      	b.n	800c53e <dir_find+0x108>
 800c53c:	23ff      	movs	r3, #255	@ 0xff
 800c53e:	757b      	strb	r3, [r7, #21]
 800c540:	e024      	b.n	800c58c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c542:	7d7b      	ldrb	r3, [r7, #21]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d109      	bne.n	800c55c <dir_find+0x126>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff ff51 	bl	800c3f4 <sum_sfn>
 800c552:	4603      	mov	r3, r0
 800c554:	461a      	mov	r2, r3
 800c556:	7d3b      	ldrb	r3, [r7, #20]
 800c558:	4293      	cmp	r3, r2
 800c55a:	d024      	beq.n	800c5a6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <dir_find+0x14a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a18      	ldr	r0, [r3, #32]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3324      	adds	r3, #36	@ 0x24
 800c572:	220b      	movs	r2, #11
 800c574:	4619      	mov	r1, r3
 800c576:	f7fe fea1 	bl	800b2bc <mem_cmp>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d014      	beq.n	800c5aa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c580:	23ff      	movs	r3, #255	@ 0xff
 800c582:	757b      	strb	r3, [r7, #21]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f04f 32ff 	mov.w	r2, #4294967295
 800c58a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fc7e 	bl	800be90 <dir_next>
 800c594:	4603      	mov	r3, r0
 800c596:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f43f af65 	beq.w	800c46a <dir_find+0x34>
 800c5a0:	e004      	b.n	800c5ac <dir_find+0x176>
		if (res != FR_OK) break;
 800c5a2:	bf00      	nop
 800c5a4:	e002      	b.n	800c5ac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c5a6:	bf00      	nop
 800c5a8:	e000      	b.n	800c5ac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c5aa:	bf00      	nop

	return res;
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
	...

0800c5b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08c      	sub	sp, #48	@ 0x30
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c5cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <dir_register+0x20>
 800c5d4:	2306      	movs	r3, #6
 800c5d6:	e0e0      	b.n	800c79a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c5d8:	2300      	movs	r3, #0
 800c5da:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5dc:	e002      	b.n	800c5e4 <dir_register+0x2c>
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	68da      	ldr	r2, [r3, #12]
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	4413      	add	r3, r2
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f4      	bne.n	800c5de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c5fa:	f107 030c 	add.w	r3, r7, #12
 800c5fe:	220c      	movs	r2, #12
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe fe1f 	bl	800b244 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d032      	beq.n	800c676 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2240      	movs	r2, #64	@ 0x40
 800c614:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800c618:	2301      	movs	r3, #1
 800c61a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c61c:	e016      	b.n	800c64c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	68da      	ldr	r2, [r3, #12]
 800c628:	f107 010c 	add.w	r1, r7, #12
 800c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62e:	f7ff fe53 	bl	800c2d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff feff 	bl	800c436 <dir_find>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800c63e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	3301      	adds	r3, #1
 800c64a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64e:	2b63      	cmp	r3, #99	@ 0x63
 800c650:	d9e5      	bls.n	800c61e <dir_register+0x66>
 800c652:	e000      	b.n	800c656 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c654:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c658:	2b64      	cmp	r3, #100	@ 0x64
 800c65a:	d101      	bne.n	800c660 <dir_register+0xa8>
 800c65c:	2307      	movs	r3, #7
 800c65e:	e09c      	b.n	800c79a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c664:	2b04      	cmp	r3, #4
 800c666:	d002      	beq.n	800c66e <dir_register+0xb6>
 800c668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c66c:	e095      	b.n	800c79a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c66e:	7dfa      	ldrb	r2, [r7, #23]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	f003 0302 	and.w	r3, r3, #2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d007      	beq.n	800c690 <dir_register+0xd8>
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	330c      	adds	r3, #12
 800c684:	4a47      	ldr	r2, [pc, #284]	@ (800c7a4 <dir_register+0x1ec>)
 800c686:	fba2 2303 	umull	r2, r3, r2, r3
 800c68a:	089b      	lsrs	r3, r3, #2
 800c68c:	3301      	adds	r3, #1
 800c68e:	e000      	b.n	800c692 <dir_register+0xda>
 800c690:	2301      	movs	r3, #1
 800c692:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c694:	6a39      	ldr	r1, [r7, #32]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff fcbf 	bl	800c01a <dir_alloc>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d148      	bne.n	800c73c <dir_register+0x184>
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	623b      	str	r3, [r7, #32]
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d042      	beq.n	800c73c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	695a      	ldr	r2, [r3, #20]
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	015b      	lsls	r3, r3, #5
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fb69 	bl	800bd9a <dir_sdi>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c6ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d132      	bne.n	800c73c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3324      	adds	r3, #36	@ 0x24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fe8a 	bl	800c3f4 <sum_sfn>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	69f8      	ldr	r0, [r7, #28]
 800c6ec:	f7fe ffd8 	bl	800b6a0 <move_window>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800c6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d11d      	bne.n	800c73a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	68d8      	ldr	r0, [r3, #12]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a19      	ldr	r1, [r3, #32]
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	7efb      	ldrb	r3, [r7, #27]
 800c70c:	f7ff fd7c 	bl	800c208 <put_lfn>
				fs->wflag = 1;
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	2201      	movs	r2, #1
 800c714:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c716:	2100      	movs	r1, #0
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fbb9 	bl	800be90 <dir_next>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800c724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d107      	bne.n	800c73c <dir_register+0x184>
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	3b01      	subs	r3, #1
 800c730:	623b      	str	r3, [r7, #32]
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1d5      	bne.n	800c6e4 <dir_register+0x12c>
 800c738:	e000      	b.n	800c73c <dir_register+0x184>
				if (res != FR_OK) break;
 800c73a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c73c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c740:	2b00      	cmp	r3, #0
 800c742:	d128      	bne.n	800c796 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	4619      	mov	r1, r3
 800c74a:	69f8      	ldr	r0, [r7, #28]
 800c74c:	f7fe ffa8 	bl	800b6a0 <move_window>
 800c750:	4603      	mov	r3, r0
 800c752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d11b      	bne.n	800c796 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	2220      	movs	r2, #32
 800c764:	2100      	movs	r1, #0
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fd8d 	bl	800b286 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a18      	ldr	r0, [r3, #32]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3324      	adds	r3, #36	@ 0x24
 800c774:	220b      	movs	r2, #11
 800c776:	4619      	mov	r1, r3
 800c778:	f7fe fd64 	bl	800b244 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	330c      	adds	r3, #12
 800c788:	f002 0218 	and.w	r2, r2, #24
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	2201      	movs	r2, #1
 800c794:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3730      	adds	r7, #48	@ 0x30
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	4ec4ec4f 	.word	0x4ec4ec4f

0800c7a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08a      	sub	sp, #40	@ 0x28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	613b      	str	r3, [r7, #16]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	617b      	str	r3, [r7, #20]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	61ba      	str	r2, [r7, #24]
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7d8:	2b1f      	cmp	r3, #31
 800c7da:	d940      	bls.n	800c85e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7de:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7e0:	d006      	beq.n	800c7f0 <create_name+0x48>
 800c7e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c7e6:	d110      	bne.n	800c80a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7e8:	e002      	b.n	800c7f0 <create_name+0x48>
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	61bb      	str	r3, [r7, #24]
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7fa:	d0f6      	beq.n	800c7ea <create_name+0x42>
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	4413      	add	r3, r2
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b5c      	cmp	r3, #92	@ 0x5c
 800c806:	d0f0      	beq.n	800c7ea <create_name+0x42>
			break;
 800c808:	e02a      	b.n	800c860 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2bfe      	cmp	r3, #254	@ 0xfe
 800c80e:	d901      	bls.n	800c814 <create_name+0x6c>
 800c810:	2306      	movs	r3, #6
 800c812:	e17d      	b.n	800cb10 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c816:	b2db      	uxtb	r3, r3
 800c818:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c81a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c81c:	2101      	movs	r1, #1
 800c81e:	4618      	mov	r0, r3
 800c820:	f001 f950 	bl	800dac4 <ff_convert>
 800c824:	4603      	mov	r3, r0
 800c826:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <create_name+0x8a>
 800c82e:	2306      	movs	r3, #6
 800c830:	e16e      	b.n	800cb10 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c834:	2b7f      	cmp	r3, #127	@ 0x7f
 800c836:	d809      	bhi.n	800c84c <create_name+0xa4>
 800c838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c83a:	4619      	mov	r1, r3
 800c83c:	488d      	ldr	r0, [pc, #564]	@ (800ca74 <create_name+0x2cc>)
 800c83e:	f7fe fd64 	bl	800b30a <chk_chr>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <create_name+0xa4>
 800c848:	2306      	movs	r3, #6
 800c84a:	e161      	b.n	800cb10 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	617a      	str	r2, [r7, #20]
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4413      	add	r3, r2
 800c858:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c85a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c85c:	e7b4      	b.n	800c7c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c85e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	441a      	add	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c86a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c86c:	2b1f      	cmp	r3, #31
 800c86e:	d801      	bhi.n	800c874 <create_name+0xcc>
 800c870:	2304      	movs	r3, #4
 800c872:	e000      	b.n	800c876 <create_name+0xce>
 800c874:	2300      	movs	r3, #0
 800c876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c87a:	e011      	b.n	800c8a0 <create_name+0xf8>
		w = lfn[di - 1];
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c882:	4413      	add	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	4413      	add	r3, r2
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c88e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c890:	2b20      	cmp	r3, #32
 800c892:	d002      	beq.n	800c89a <create_name+0xf2>
 800c894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c896:	2b2e      	cmp	r3, #46	@ 0x2e
 800c898:	d106      	bne.n	800c8a8 <create_name+0x100>
		di--;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1ea      	bne.n	800c87c <create_name+0xd4>
 800c8a6:	e000      	b.n	800c8aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c8a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <create_name+0x118>
 800c8bc:	2306      	movs	r3, #6
 800c8be:	e127      	b.n	800cb10 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3324      	adds	r3, #36	@ 0x24
 800c8c4:	220b      	movs	r2, #11
 800c8c6:	2120      	movs	r1, #32
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe fcdc 	bl	800b286 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61bb      	str	r3, [r7, #24]
 800c8d2:	e002      	b.n	800c8da <create_name+0x132>
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	61bb      	str	r3, [r7, #24]
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	2b20      	cmp	r3, #32
 800c8e6:	d0f5      	beq.n	800c8d4 <create_name+0x12c>
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8f4:	d0ee      	beq.n	800c8d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <create_name+0x168>
 800c8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c900:	f043 0303 	orr.w	r3, r3, #3
 800c904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c908:	e002      	b.n	800c910 <create_name+0x168>
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d009      	beq.n	800c92a <create_name+0x182>
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c91c:	4413      	add	r3, r2
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4413      	add	r3, r2
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	2b2e      	cmp	r3, #46	@ 0x2e
 800c928:	d1ef      	bne.n	800c90a <create_name+0x162>

	i = b = 0; ni = 8;
 800c92a:	2300      	movs	r3, #0
 800c92c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c930:	2300      	movs	r3, #0
 800c932:	623b      	str	r3, [r7, #32]
 800c934:	2308      	movs	r3, #8
 800c936:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	61ba      	str	r2, [r7, #24]
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	4413      	add	r3, r2
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 8090 	beq.w	800ca70 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c952:	2b20      	cmp	r3, #32
 800c954:	d006      	beq.n	800c964 <create_name+0x1bc>
 800c956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c958:	2b2e      	cmp	r3, #46	@ 0x2e
 800c95a:	d10a      	bne.n	800c972 <create_name+0x1ca>
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	429a      	cmp	r2, r3
 800c962:	d006      	beq.n	800c972 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c968:	f043 0303 	orr.w	r3, r3, #3
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c970:	e07d      	b.n	800ca6e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c972:	6a3a      	ldr	r2, [r7, #32]
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	429a      	cmp	r2, r3
 800c978:	d203      	bcs.n	800c982 <create_name+0x1da>
 800c97a:	69ba      	ldr	r2, [r7, #24]
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d123      	bne.n	800c9ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	2b0b      	cmp	r3, #11
 800c986:	d106      	bne.n	800c996 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c98c:	f043 0303 	orr.w	r3, r3, #3
 800c990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c994:	e075      	b.n	800ca82 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d005      	beq.n	800c9aa <create_name+0x202>
 800c99e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9a2:	f043 0303 	orr.w	r3, r3, #3
 800c9a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d866      	bhi.n	800ca80 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	61bb      	str	r3, [r7, #24]
 800c9b6:	2308      	movs	r3, #8
 800c9b8:	623b      	str	r3, [r7, #32]
 800c9ba:	230b      	movs	r3, #11
 800c9bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c9be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c9c8:	e051      	b.n	800ca6e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c9ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9ce:	d914      	bls.n	800c9fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c9d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 f875 	bl	800dac4 <ff_convert>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c9de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d004      	beq.n	800c9ee <create_name+0x246>
 800c9e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9e6:	3b80      	subs	r3, #128	@ 0x80
 800c9e8:	4a23      	ldr	r2, [pc, #140]	@ (800ca78 <create_name+0x2d0>)
 800c9ea:	5cd3      	ldrb	r3, [r2, r3]
 800c9ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9f2:	f043 0302 	orr.w	r3, r3, #2
 800c9f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d007      	beq.n	800ca10 <create_name+0x268>
 800ca00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca02:	4619      	mov	r1, r3
 800ca04:	481d      	ldr	r0, [pc, #116]	@ (800ca7c <create_name+0x2d4>)
 800ca06:	f7fe fc80 	bl	800b30a <chk_chr>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ca10:	235f      	movs	r3, #95	@ 0x5f
 800ca12:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca18:	f043 0303 	orr.w	r3, r3, #3
 800ca1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca20:	e01b      	b.n	800ca5a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ca22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca24:	2b40      	cmp	r3, #64	@ 0x40
 800ca26:	d909      	bls.n	800ca3c <create_name+0x294>
 800ca28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca2a:	2b5a      	cmp	r3, #90	@ 0x5a
 800ca2c:	d806      	bhi.n	800ca3c <create_name+0x294>
					b |= 2;
 800ca2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca32:	f043 0302 	orr.w	r3, r3, #2
 800ca36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca3a:	e00e      	b.n	800ca5a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ca3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca3e:	2b60      	cmp	r3, #96	@ 0x60
 800ca40:	d90b      	bls.n	800ca5a <create_name+0x2b2>
 800ca42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca44:	2b7a      	cmp	r3, #122	@ 0x7a
 800ca46:	d808      	bhi.n	800ca5a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ca48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca56:	3b20      	subs	r3, #32
 800ca58:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	623a      	str	r2, [r7, #32]
 800ca60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ca62:	b2d1      	uxtb	r1, r2
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	4413      	add	r3, r2
 800ca68:	460a      	mov	r2, r1
 800ca6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ca6e:	e763      	b.n	800c938 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ca70:	bf00      	nop
 800ca72:	e006      	b.n	800ca82 <create_name+0x2da>
 800ca74:	0800e730 	.word	0x0800e730
 800ca78:	0800e790 	.word	0x0800e790
 800ca7c:	0800e73c 	.word	0x0800e73c
			if (si > di) break;			/* No extension */
 800ca80:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca88:	2be5      	cmp	r3, #229	@ 0xe5
 800ca8a:	d103      	bne.n	800ca94 <create_name+0x2ec>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2205      	movs	r2, #5
 800ca90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d104      	bne.n	800caa4 <create_name+0x2fc>
 800ca9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800caa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caa8:	f003 030c 	and.w	r3, r3, #12
 800caac:	2b0c      	cmp	r3, #12
 800caae:	d005      	beq.n	800cabc <create_name+0x314>
 800cab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cab4:	f003 0303 	and.w	r3, r3, #3
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d105      	bne.n	800cac8 <create_name+0x320>
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac0:	f043 0302 	orr.w	r3, r3, #2
 800cac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cacc:	f003 0302 	and.w	r3, r3, #2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d117      	bne.n	800cb04 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cad8:	f003 0303 	and.w	r3, r3, #3
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d105      	bne.n	800caec <create_name+0x344>
 800cae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cae4:	f043 0310 	orr.w	r3, r3, #16
 800cae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800caec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caf0:	f003 030c 	and.w	r3, r3, #12
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d105      	bne.n	800cb04 <create_name+0x35c>
 800caf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cafc:	f043 0308 	orr.w	r3, r3, #8
 800cb00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cb0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800cb0e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3728      	adds	r7, #40	@ 0x28
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb2c:	e002      	b.n	800cb34 <follow_path+0x1c>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	3301      	adds	r3, #1
 800cb32:	603b      	str	r3, [r7, #0]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb3a:	d0f8      	beq.n	800cb2e <follow_path+0x16>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb42:	d0f4      	beq.n	800cb2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2200      	movs	r2, #0
 800cb48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b1f      	cmp	r3, #31
 800cb50:	d80a      	bhi.n	800cb68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2280      	movs	r2, #128	@ 0x80
 800cb56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff f91c 	bl	800bd9a <dir_sdi>
 800cb62:	4603      	mov	r3, r0
 800cb64:	75fb      	strb	r3, [r7, #23]
 800cb66:	e043      	b.n	800cbf0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb68:	463b      	mov	r3, r7
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff fe1b 	bl	800c7a8 <create_name>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d134      	bne.n	800cbe6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff fc5a 	bl	800c436 <dir_find>
 800cb82:	4603      	mov	r3, r0
 800cb84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00a      	beq.n	800cbaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	d127      	bne.n	800cbea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cb9a:	7afb      	ldrb	r3, [r7, #11]
 800cb9c:	f003 0304 	and.w	r3, r3, #4
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d122      	bne.n	800cbea <follow_path+0xd2>
 800cba4:	2305      	movs	r3, #5
 800cba6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cba8:	e01f      	b.n	800cbea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d11c      	bne.n	800cbee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	799b      	ldrb	r3, [r3, #6]
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d102      	bne.n	800cbc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cbc0:	2305      	movs	r3, #5
 800cbc2:	75fb      	strb	r3, [r7, #23]
 800cbc4:	e014      	b.n	800cbf0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd4:	4413      	add	r3, r2
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f7ff fa65 	bl	800c0a8 <ld_clust>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbe4:	e7c0      	b.n	800cb68 <follow_path+0x50>
			if (res != FR_OK) break;
 800cbe6:	bf00      	nop
 800cbe8:	e002      	b.n	800cbf0 <follow_path+0xd8>
				break;
 800cbea:	bf00      	nop
 800cbec:	e000      	b.n	800cbf0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbee:	bf00      	nop
			}
		}
	}

	return res;
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3718      	adds	r7, #24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b087      	sub	sp, #28
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295
 800cc06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d031      	beq.n	800cc74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	617b      	str	r3, [r7, #20]
 800cc16:	e002      	b.n	800cc1e <get_ldnumber+0x24>
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	617b      	str	r3, [r7, #20]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b1f      	cmp	r3, #31
 800cc24:	d903      	bls.n	800cc2e <get_ldnumber+0x34>
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc2c:	d1f4      	bne.n	800cc18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc34:	d11c      	bne.n	800cc70 <get_ldnumber+0x76>
			tp = *path;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	1c5a      	adds	r2, r3, #1
 800cc40:	60fa      	str	r2, [r7, #12]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	3b30      	subs	r3, #48	@ 0x30
 800cc46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	d80e      	bhi.n	800cc6c <get_ldnumber+0x72>
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d10a      	bne.n	800cc6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d107      	bne.n	800cc6c <get_ldnumber+0x72>
					vol = (int)i;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	3301      	adds	r3, #1
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	e002      	b.n	800cc76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cc70:	2300      	movs	r3, #0
 800cc72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cc74:	693b      	ldr	r3, [r7, #16]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
	...

0800cc84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	70da      	strb	r2, [r3, #3]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7fe fcfe 	bl	800b6a0 <move_window>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <check_fs+0x2a>
 800ccaa:	2304      	movs	r3, #4
 800ccac:	e038      	b.n	800cd20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	3334      	adds	r3, #52	@ 0x34
 800ccb2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fa42 	bl	800b140 <ld_word>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d001      	beq.n	800cccc <check_fs+0x48>
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e029      	b.n	800cd20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ccd2:	2be9      	cmp	r3, #233	@ 0xe9
 800ccd4:	d009      	beq.n	800ccea <check_fs+0x66>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ccdc:	2beb      	cmp	r3, #235	@ 0xeb
 800ccde:	d11e      	bne.n	800cd1e <check_fs+0x9a>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cce6:	2b90      	cmp	r3, #144	@ 0x90
 800cce8:	d119      	bne.n	800cd1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3334      	adds	r3, #52	@ 0x34
 800ccee:	3336      	adds	r3, #54	@ 0x36
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe fa3d 	bl	800b170 <ld_dword>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ccfc:	4a0a      	ldr	r2, [pc, #40]	@ (800cd28 <check_fs+0xa4>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d101      	bne.n	800cd06 <check_fs+0x82>
 800cd02:	2300      	movs	r3, #0
 800cd04:	e00c      	b.n	800cd20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3334      	adds	r3, #52	@ 0x34
 800cd0a:	3352      	adds	r3, #82	@ 0x52
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fa2f 	bl	800b170 <ld_dword>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4a05      	ldr	r2, [pc, #20]	@ (800cd2c <check_fs+0xa8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d101      	bne.n	800cd1e <check_fs+0x9a>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e000      	b.n	800cd20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd1e:	2302      	movs	r3, #2
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	00544146 	.word	0x00544146
 800cd2c:	33544146 	.word	0x33544146

0800cd30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b096      	sub	sp, #88	@ 0x58
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f7ff ff58 	bl	800cbfa <get_ldnumber>
 800cd4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	da01      	bge.n	800cd56 <find_volume+0x26>
 800cd52:	230b      	movs	r3, #11
 800cd54:	e230      	b.n	800d1b8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd56:	4aa1      	ldr	r2, [pc, #644]	@ (800cfdc <find_volume+0x2ac>)
 800cd58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <find_volume+0x3a>
 800cd66:	230c      	movs	r3, #12
 800cd68:	e226      	b.n	800d1b8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	f023 0301 	bic.w	r3, r3, #1
 800cd76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d01a      	beq.n	800cdb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd82:	785b      	ldrb	r3, [r3, #1]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe f93b 	bl	800b000 <disk_status>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10c      	bne.n	800cdb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d007      	beq.n	800cdb2 <find_volume+0x82>
 800cda2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cda6:	f003 0304 	and.w	r3, r3, #4
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdae:	230a      	movs	r3, #10
 800cdb0:	e202      	b.n	800d1b8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e200      	b.n	800d1b8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	785b      	ldrb	r3, [r3, #1]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fe f933 	bl	800b034 <disk_initialize>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cdd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cde0:	2303      	movs	r3, #3
 800cde2:	e1e9      	b.n	800d1b8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d007      	beq.n	800cdfa <find_volume+0xca>
 800cdea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cdf6:	230a      	movs	r3, #10
 800cdf8:	e1de      	b.n	800d1b8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cdfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce00:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce02:	f7ff ff3f 	bl	800cc84 <check_fs>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d149      	bne.n	800cea8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce14:	2300      	movs	r3, #0
 800ce16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce18:	e01e      	b.n	800ce58 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ce20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ce28:	4413      	add	r3, r2
 800ce2a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	3304      	adds	r3, #4
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <find_volume+0x114>
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	3308      	adds	r3, #8
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe f998 	bl	800b170 <ld_dword>
 800ce40:	4602      	mov	r2, r0
 800ce42:	e000      	b.n	800ce46 <find_volume+0x116>
 800ce44:	2200      	movs	r2, #0
 800ce46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	3358      	adds	r3, #88	@ 0x58
 800ce4c:	443b      	add	r3, r7
 800ce4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce54:	3301      	adds	r3, #1
 800ce56:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d9dd      	bls.n	800ce1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ce5e:	2300      	movs	r3, #0
 800ce60:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ce62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <find_volume+0x13e>
 800ce68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ce6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	3358      	adds	r3, #88	@ 0x58
 800ce74:	443b      	add	r3, r7
 800ce76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ce7a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d005      	beq.n	800ce8e <find_volume+0x15e>
 800ce82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce86:	f7ff fefd 	bl	800cc84 <check_fs>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e000      	b.n	800ce90 <find_volume+0x160>
 800ce8e:	2303      	movs	r3, #3
 800ce90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ce94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d905      	bls.n	800cea8 <find_volume+0x178>
 800ce9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce9e:	3301      	adds	r3, #1
 800cea0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d9e2      	bls.n	800ce6e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cea8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d101      	bne.n	800ceb4 <find_volume+0x184>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e181      	b.n	800d1b8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ceb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d901      	bls.n	800cec0 <find_volume+0x190>
 800cebc:	230d      	movs	r3, #13
 800cebe:	e17b      	b.n	800d1b8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec2:	3334      	adds	r3, #52	@ 0x34
 800cec4:	330b      	adds	r3, #11
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe f93a 	bl	800b140 <ld_word>
 800cecc:	4603      	mov	r3, r0
 800cece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ced2:	d001      	beq.n	800ced8 <find_volume+0x1a8>
 800ced4:	230d      	movs	r3, #13
 800ced6:	e16f      	b.n	800d1b8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ced8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceda:	3334      	adds	r3, #52	@ 0x34
 800cedc:	3316      	adds	r3, #22
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe f92e 	bl	800b140 <ld_word>
 800cee4:	4603      	mov	r3, r0
 800cee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <find_volume+0x1cc>
 800ceee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef0:	3334      	adds	r3, #52	@ 0x34
 800cef2:	3324      	adds	r3, #36	@ 0x24
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fe f93b 	bl	800b170 <ld_dword>
 800cefa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf00:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0e:	789b      	ldrb	r3, [r3, #2]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d005      	beq.n	800cf20 <find_volume+0x1f0>
 800cf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf16:	789b      	ldrb	r3, [r3, #2]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d001      	beq.n	800cf20 <find_volume+0x1f0>
 800cf1c:	230d      	movs	r3, #13
 800cf1e:	e14b      	b.n	800d1b8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	789b      	ldrb	r3, [r3, #2]
 800cf24:	461a      	mov	r2, r3
 800cf26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf28:	fb02 f303 	mul.w	r3, r2, r3
 800cf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf34:	461a      	mov	r2, r3
 800cf36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	895b      	ldrh	r3, [r3, #10]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d008      	beq.n	800cf54 <find_volume+0x224>
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	895b      	ldrh	r3, [r3, #10]
 800cf46:	461a      	mov	r2, r3
 800cf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4a:	895b      	ldrh	r3, [r3, #10]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	4013      	ands	r3, r2
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <find_volume+0x228>
 800cf54:	230d      	movs	r3, #13
 800cf56:	e12f      	b.n	800d1b8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5a:	3334      	adds	r3, #52	@ 0x34
 800cf5c:	3311      	adds	r3, #17
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe f8ee 	bl	800b140 <ld_word>
 800cf64:	4603      	mov	r3, r0
 800cf66:	461a      	mov	r2, r3
 800cf68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6e:	891b      	ldrh	r3, [r3, #8]
 800cf70:	f003 030f 	and.w	r3, r3, #15
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <find_volume+0x24e>
 800cf7a:	230d      	movs	r3, #13
 800cf7c:	e11c      	b.n	800d1b8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf80:	3334      	adds	r3, #52	@ 0x34
 800cf82:	3313      	adds	r3, #19
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe f8db 	bl	800b140 <ld_word>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <find_volume+0x272>
 800cf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf96:	3334      	adds	r3, #52	@ 0x34
 800cf98:	3320      	adds	r3, #32
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe f8e8 	bl	800b170 <ld_dword>
 800cfa0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa4:	3334      	adds	r3, #52	@ 0x34
 800cfa6:	330e      	adds	r3, #14
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe f8c9 	bl	800b140 <ld_word>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cfb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <find_volume+0x28c>
 800cfb8:	230d      	movs	r3, #13
 800cfba:	e0fd      	b.n	800d1b8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cfbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cfbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfc0:	4413      	add	r3, r2
 800cfc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfc4:	8912      	ldrh	r2, [r2, #8]
 800cfc6:	0912      	lsrs	r2, r2, #4
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	4413      	add	r3, r2
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cfce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d204      	bcs.n	800cfe0 <find_volume+0x2b0>
 800cfd6:	230d      	movs	r3, #13
 800cfd8:	e0ee      	b.n	800d1b8 <find_volume+0x488>
 800cfda:	bf00      	nop
 800cfdc:	24000380 	.word	0x24000380
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cfe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfe8:	8952      	ldrh	r2, [r2, #10]
 800cfea:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <find_volume+0x2ca>
 800cff6:	230d      	movs	r3, #13
 800cff8:	e0de      	b.n	800d1b8 <find_volume+0x488>
		fmt = FS_FAT32;
 800cffa:	2303      	movs	r3, #3
 800cffc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d002:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d006:	4293      	cmp	r3, r2
 800d008:	d802      	bhi.n	800d010 <find_volume+0x2e0>
 800d00a:	2302      	movs	r3, #2
 800d00c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d012:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d016:	4293      	cmp	r3, r2
 800d018:	d802      	bhi.n	800d020 <find_volume+0x2f0>
 800d01a:	2301      	movs	r3, #1
 800d01c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	1c9a      	adds	r2, r3, #2
 800d024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d026:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d02c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d02e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d032:	441a      	add	r2, r3
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d038:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	441a      	add	r2, r3
 800d03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d040:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d042:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d046:	2b03      	cmp	r3, #3
 800d048:	d11e      	bne.n	800d088 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	3334      	adds	r3, #52	@ 0x34
 800d04e:	332a      	adds	r3, #42	@ 0x2a
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe f875 	bl	800b140 <ld_word>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <find_volume+0x330>
 800d05c:	230d      	movs	r3, #13
 800d05e:	e0ab      	b.n	800d1b8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	891b      	ldrh	r3, [r3, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <find_volume+0x33c>
 800d068:	230d      	movs	r3, #13
 800d06a:	e0a5      	b.n	800d1b8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06e:	3334      	adds	r3, #52	@ 0x34
 800d070:	332c      	adds	r3, #44	@ 0x2c
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe f87c 	bl	800b170 <ld_dword>
 800d078:	4602      	mov	r2, r0
 800d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	647b      	str	r3, [r7, #68]	@ 0x44
 800d086:	e01f      	b.n	800d0c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08a:	891b      	ldrh	r3, [r3, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <find_volume+0x364>
 800d090:	230d      	movs	r3, #13
 800d092:	e091      	b.n	800d1b8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d09a:	441a      	add	r2, r3
 800d09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d0a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d103      	bne.n	800d0b0 <find_volume+0x380>
 800d0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	e00a      	b.n	800d0c6 <find_volume+0x396>
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	699a      	ldr	r2, [r3, #24]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	005b      	lsls	r3, r3, #1
 800d0b8:	4413      	add	r3, r2
 800d0ba:	085a      	lsrs	r2, r3, #1
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d0c6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	69da      	ldr	r2, [r3, #28]
 800d0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ce:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d0d2:	0a5b      	lsrs	r3, r3, #9
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d201      	bcs.n	800d0dc <find_volume+0x3ac>
 800d0d8:	230d      	movs	r3, #13
 800d0da:	e06d      	b.n	800d1b8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0de:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e2:	615a      	str	r2, [r3, #20]
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	695a      	ldr	r2, [r3, #20]
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ee:	2280      	movs	r2, #128	@ 0x80
 800d0f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d0f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	d149      	bne.n	800d18e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fc:	3334      	adds	r3, #52	@ 0x34
 800d0fe:	3330      	adds	r3, #48	@ 0x30
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe f81d 	bl	800b140 <ld_word>
 800d106:	4603      	mov	r3, r0
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d140      	bne.n	800d18e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d10e:	3301      	adds	r3, #1
 800d110:	4619      	mov	r1, r3
 800d112:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d114:	f7fe fac4 	bl	800b6a0 <move_window>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d137      	bne.n	800d18e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d120:	2200      	movs	r2, #0
 800d122:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d126:	3334      	adds	r3, #52	@ 0x34
 800d128:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe f807 	bl	800b140 <ld_word>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d127      	bne.n	800d18e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d140:	3334      	adds	r3, #52	@ 0x34
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe f814 	bl	800b170 <ld_dword>
 800d148:	4603      	mov	r3, r0
 800d14a:	4a1d      	ldr	r2, [pc, #116]	@ (800d1c0 <find_volume+0x490>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d11e      	bne.n	800d18e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d152:	3334      	adds	r3, #52	@ 0x34
 800d154:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe f809 	bl	800b170 <ld_dword>
 800d15e:	4603      	mov	r3, r0
 800d160:	4a18      	ldr	r2, [pc, #96]	@ (800d1c4 <find_volume+0x494>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d113      	bne.n	800d18e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d168:	3334      	adds	r3, #52	@ 0x34
 800d16a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fd fffe 	bl	800b170 <ld_dword>
 800d174:	4602      	mov	r2, r0
 800d176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d178:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17c:	3334      	adds	r3, #52	@ 0x34
 800d17e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd fff4 	bl	800b170 <ld_dword>
 800d188:	4602      	mov	r2, r0
 800d18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d194:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d196:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c8 <find_volume+0x498>)
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c8 <find_volume+0x498>)
 800d1a0:	801a      	strh	r2, [r3, #0]
 800d1a2:	4b09      	ldr	r3, [pc, #36]	@ (800d1c8 <find_volume+0x498>)
 800d1a4:	881a      	ldrh	r2, [r3, #0]
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ac:	4a07      	ldr	r2, [pc, #28]	@ (800d1cc <find_volume+0x49c>)
 800d1ae:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d1b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1b2:	f7fe fa0d 	bl	800b5d0 <clear_lock>
#endif
	return FR_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3758      	adds	r7, #88	@ 0x58
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	41615252 	.word	0x41615252
 800d1c4:	61417272 	.word	0x61417272
 800d1c8:	24000384 	.word	0x24000384
 800d1cc:	240003a8 	.word	0x240003a8

0800d1d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d1da:	2309      	movs	r3, #9
 800d1dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01c      	beq.n	800d21e <validate+0x4e>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d018      	beq.n	800d21e <validate+0x4e>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d013      	beq.n	800d21e <validate+0x4e>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	889a      	ldrh	r2, [r3, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	88db      	ldrh	r3, [r3, #6]
 800d200:	429a      	cmp	r2, r3
 800d202:	d10c      	bne.n	800d21e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	785b      	ldrb	r3, [r3, #1]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fef8 	bl	800b000 <disk_status>
 800d210:	4603      	mov	r3, r0
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <validate+0x4e>
			res = FR_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <validate+0x5a>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	e000      	b.n	800d22c <validate+0x5c>
 800d22a:	2300      	movs	r3, #0
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	6013      	str	r3, [r2, #0]
	return res;
 800d230:	7bfb      	ldrb	r3, [r7, #15]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	4613      	mov	r3, r2
 800d248:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d24e:	f107 0310 	add.w	r3, r7, #16
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff fcd1 	bl	800cbfa <get_ldnumber>
 800d258:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	da01      	bge.n	800d264 <f_mount+0x28>
 800d260:	230b      	movs	r3, #11
 800d262:	e02b      	b.n	800d2bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d264:	4a17      	ldr	r2, [pc, #92]	@ (800d2c4 <f_mount+0x88>)
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d26c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d005      	beq.n	800d280 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d274:	69b8      	ldr	r0, [r7, #24]
 800d276:	f7fe f9ab 	bl	800b5d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2200      	movs	r2, #0
 800d27e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	490d      	ldr	r1, [pc, #52]	@ (800d2c4 <f_mount+0x88>)
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <f_mount+0x66>
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d001      	beq.n	800d2a6 <f_mount+0x6a>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e00a      	b.n	800d2bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d2a6:	f107 010c 	add.w	r1, r7, #12
 800d2aa:	f107 0308 	add.w	r3, r7, #8
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff fd3d 	bl	800cd30 <find_volume>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3720      	adds	r7, #32
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	24000380 	.word	0x24000380

0800d2c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b09a      	sub	sp, #104	@ 0x68
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <f_open+0x18>
 800d2dc:	2309      	movs	r3, #9
 800d2de:	e1a9      	b.n	800d634 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d2e8:	79fa      	ldrb	r2, [r7, #7]
 800d2ea:	f107 0114 	add.w	r1, r7, #20
 800d2ee:	f107 0308 	add.w	r3, r7, #8
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff fd1c 	bl	800cd30 <find_volume>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800d2fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d302:	2b00      	cmp	r3, #0
 800d304:	f040 818d 	bne.w	800d622 <f_open+0x35a>
		dj.obj.fs = fs;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	f107 0318 	add.w	r3, r7, #24
 800d312:	4611      	mov	r1, r2
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff fbff 	bl	800cb18 <follow_path>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d320:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d324:	2b00      	cmp	r3, #0
 800d326:	d118      	bne.n	800d35a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d328:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d32c:	b25b      	sxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da03      	bge.n	800d33a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d332:	2306      	movs	r3, #6
 800d334:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d338:	e00f      	b.n	800d35a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	bf8c      	ite	hi
 800d340:	2301      	movhi	r3, #1
 800d342:	2300      	movls	r3, #0
 800d344:	b2db      	uxtb	r3, r3
 800d346:	461a      	mov	r2, r3
 800d348:	f107 0318 	add.w	r3, r7, #24
 800d34c:	4611      	mov	r1, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fd fff6 	bl	800b340 <chk_lock>
 800d354:	4603      	mov	r3, r0
 800d356:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	f003 031c 	and.w	r3, r3, #28
 800d360:	2b00      	cmp	r3, #0
 800d362:	d07f      	beq.n	800d464 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d364:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d017      	beq.n	800d39c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d36c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d370:	2b04      	cmp	r3, #4
 800d372:	d10e      	bne.n	800d392 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d374:	f7fe f840 	bl	800b3f8 <enq_lock>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d006      	beq.n	800d38c <f_open+0xc4>
 800d37e:	f107 0318 	add.w	r3, r7, #24
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff f918 	bl	800c5b8 <dir_register>
 800d388:	4603      	mov	r3, r0
 800d38a:	e000      	b.n	800d38e <f_open+0xc6>
 800d38c:	2312      	movs	r3, #18
 800d38e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	f043 0308 	orr.w	r3, r3, #8
 800d398:	71fb      	strb	r3, [r7, #7]
 800d39a:	e010      	b.n	800d3be <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d39c:	7fbb      	ldrb	r3, [r7, #30]
 800d39e:	f003 0311 	and.w	r3, r3, #17
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <f_open+0xe6>
					res = FR_DENIED;
 800d3a6:	2307      	movs	r3, #7
 800d3a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d3ac:	e007      	b.n	800d3be <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <f_open+0xf6>
 800d3b8:	2308      	movs	r3, #8
 800d3ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d3be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d168      	bne.n	800d498 <f_open+0x1d0>
 800d3c6:	79fb      	ldrb	r3, [r7, #7]
 800d3c8:	f003 0308 	and.w	r3, r3, #8
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d063      	beq.n	800d498 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d3d0:	f7fc ffd0 	bl	800a374 <get_fattime>
 800d3d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d8:	330e      	adds	r3, #14
 800d3da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fd ff05 	bl	800b1ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e4:	3316      	adds	r3, #22
 800d3e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fd feff 	bl	800b1ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f0:	330b      	adds	r3, #11
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fe53 	bl	800c0a8 <ld_clust>
 800d402:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d408:	2200      	movs	r2, #0
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fe fe6b 	bl	800c0e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d412:	331c      	adds	r3, #28
 800d414:	2100      	movs	r1, #0
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd fee8 	bl	800b1ec <st_dword>
					fs->wflag = 1;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2201      	movs	r2, #1
 800d420:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d424:	2b00      	cmp	r3, #0
 800d426:	d037      	beq.n	800d498 <f_open+0x1d0>
						dw = fs->winsect;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d42c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d42e:	f107 0318 	add.w	r3, r7, #24
 800d432:	2200      	movs	r2, #0
 800d434:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fb7e 	bl	800bb38 <remove_chain>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800d442:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d446:	2b00      	cmp	r3, #0
 800d448:	d126      	bne.n	800d498 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe f926 	bl	800b6a0 <move_window>
 800d454:	4603      	mov	r3, r0
 800d456:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d45e:	3a01      	subs	r2, #1
 800d460:	611a      	str	r2, [r3, #16]
 800d462:	e019      	b.n	800d498 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d464:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d115      	bne.n	800d498 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d46c:	7fbb      	ldrb	r3, [r7, #30]
 800d46e:	f003 0310 	and.w	r3, r3, #16
 800d472:	2b00      	cmp	r3, #0
 800d474:	d003      	beq.n	800d47e <f_open+0x1b6>
					res = FR_NO_FILE;
 800d476:	2304      	movs	r3, #4
 800d478:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d47c:	e00c      	b.n	800d498 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	f003 0302 	and.w	r3, r3, #2
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <f_open+0x1d0>
 800d488:	7fbb      	ldrb	r3, [r7, #30]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <f_open+0x1d0>
						res = FR_DENIED;
 800d492:	2307      	movs	r3, #7
 800d494:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d498:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d126      	bne.n	800d4ee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	f003 0308 	and.w	r3, r3, #8
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d4ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	bf8c      	ite	hi
 800d4c6:	2301      	movhi	r3, #1
 800d4c8:	2300      	movls	r3, #0
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	f107 0318 	add.w	r3, r7, #24
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fd ffb1 	bl	800b43c <inc_lock>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d102      	bne.n	800d4ee <f_open+0x226>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d4ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f040 8095 	bne.w	800d622 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fdd2 	bl	800c0a8 <ld_clust>
 800d504:	4602      	mov	r2, r0
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	331c      	adds	r3, #28
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fd fe2e 	bl	800b170 <ld_dword>
 800d514:	4602      	mov	r2, r0
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	88da      	ldrh	r2, [r3, #6]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	79fa      	ldrb	r2, [r7, #7]
 800d532:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3330      	adds	r3, #48	@ 0x30
 800d54a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d54e:	2100      	movs	r1, #0
 800d550:	4618      	mov	r0, r3
 800d552:	f7fd fe98 	bl	800b286 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	f003 0320 	and.w	r3, r3, #32
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d060      	beq.n	800d622 <f_open+0x35a>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d05c      	beq.n	800d622 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	68da      	ldr	r2, [r3, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	895b      	ldrh	r3, [r3, #10]
 800d574:	025b      	lsls	r3, r3, #9
 800d576:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d584:	e016      	b.n	800d5b4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe f943 	bl	800b816 <get_fat>
 800d590:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d594:	2b01      	cmp	r3, #1
 800d596:	d802      	bhi.n	800d59e <f_open+0x2d6>
 800d598:	2302      	movs	r3, #2
 800d59a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d59e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a4:	d102      	bne.n	800d5ac <f_open+0x2e4>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d5ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d103      	bne.n	800d5c4 <f_open+0x2fc>
 800d5bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d8e0      	bhi.n	800d586 <f_open+0x2be>
				}
				fp->clust = clst;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d5ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d127      	bne.n	800d622 <f_open+0x35a>
 800d5d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d022      	beq.n	800d622 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe f8f9 	bl	800b7d8 <clust2sect>
 800d5e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d103      	bne.n	800d5f6 <f_open+0x32e>
						res = FR_INT_ERR;
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d5f4:	e015      	b.n	800d622 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d5f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5f8:	0a5a      	lsrs	r2, r3, #9
 800d5fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5fc:	441a      	add	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	7858      	ldrb	r0, [r3, #1]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6a1a      	ldr	r2, [r3, #32]
 800d610:	2301      	movs	r3, #1
 800d612:	f7fd fd37 	bl	800b084 <disk_read>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <f_open+0x35a>
 800d61c:	2301      	movs	r3, #1
 800d61e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d622:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <f_open+0x368>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d630:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d634:	4618      	mov	r0, r3
 800d636:	3768      	adds	r7, #104	@ 0x68
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08e      	sub	sp, #56	@ 0x38
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f107 0214 	add.w	r2, r7, #20
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff fdb7 	bl	800d1d0 <validate>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d107      	bne.n	800d680 <f_read+0x44>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	7d5b      	ldrb	r3, [r3, #21]
 800d674:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <f_read+0x4a>
 800d680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d684:	e115      	b.n	800d8b2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	7d1b      	ldrb	r3, [r3, #20]
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <f_read+0x5a>
 800d692:	2307      	movs	r3, #7
 800d694:	e10d      	b.n	800d8b2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	f240 80fe 	bls.w	800d8a8 <f_read+0x26c>
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d6b0:	e0fa      	b.n	800d8a8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f040 80c6 	bne.w	800d84c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	0a5b      	lsrs	r3, r3, #9
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	8952      	ldrh	r2, [r2, #10]
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d12f      	bne.n	800d736 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6e4:	e013      	b.n	800d70e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d007      	beq.n	800d6fe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7fe fb1c 	bl	800bd32 <clmt_clust>
 800d6fa:	6338      	str	r0, [r7, #48]	@ 0x30
 800d6fc:	e007      	b.n	800d70e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	69db      	ldr	r3, [r3, #28]
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7fe f885 	bl	800b816 <get_fat>
 800d70c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d710:	2b01      	cmp	r3, #1
 800d712:	d804      	bhi.n	800d71e <f_read+0xe2>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2202      	movs	r2, #2
 800d718:	755a      	strb	r2, [r3, #21]
 800d71a:	2302      	movs	r3, #2
 800d71c:	e0c9      	b.n	800d8b2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d104      	bne.n	800d730 <f_read+0xf4>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	755a      	strb	r2, [r3, #21]
 800d72c:	2301      	movs	r3, #1
 800d72e:	e0c0      	b.n	800d8b2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d734:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	4619      	mov	r1, r3
 800d73e:	4610      	mov	r0, r2
 800d740:	f7fe f84a 	bl	800b7d8 <clust2sect>
 800d744:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d104      	bne.n	800d756 <f_read+0x11a>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2202      	movs	r2, #2
 800d750:	755a      	strb	r2, [r3, #21]
 800d752:	2302      	movs	r3, #2
 800d754:	e0ad      	b.n	800d8b2 <f_read+0x276>
			sect += csect;
 800d756:	69ba      	ldr	r2, [r7, #24]
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	4413      	add	r3, r2
 800d75c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	0a5b      	lsrs	r3, r3, #9
 800d762:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	2b00      	cmp	r3, #0
 800d768:	d039      	beq.n	800d7de <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d76a:	69fa      	ldr	r2, [r7, #28]
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	4413      	add	r3, r2
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	8952      	ldrh	r2, [r2, #10]
 800d774:	4293      	cmp	r3, r2
 800d776:	d905      	bls.n	800d784 <f_read+0x148>
					cc = fs->csize - csect;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	895b      	ldrh	r3, [r3, #10]
 800d77c:	461a      	mov	r2, r3
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	7858      	ldrb	r0, [r3, #1]
 800d788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d78e:	f7fd fc79 	bl	800b084 <disk_read>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <f_read+0x166>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	755a      	strb	r2, [r3, #21]
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e087      	b.n	800d8b2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	7d1b      	ldrb	r3, [r3, #20]
 800d7a6:	b25b      	sxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	da14      	bge.n	800d7d6 <f_read+0x19a>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6a1a      	ldr	r2, [r3, #32]
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d90d      	bls.n	800d7d6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6a1a      	ldr	r2, [r3, #32]
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	025b      	lsls	r3, r3, #9
 800d7c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7c6:	18d0      	adds	r0, r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3330      	adds	r3, #48	@ 0x30
 800d7cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	f7fd fd37 	bl	800b244 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	025b      	lsls	r3, r3, #9
 800d7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d7dc:	e050      	b.n	800d880 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	69ba      	ldr	r2, [r7, #24]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d02e      	beq.n	800d846 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	7d1b      	ldrb	r3, [r3, #20]
 800d7ec:	b25b      	sxtb	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da18      	bge.n	800d824 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	7858      	ldrb	r0, [r3, #1]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a1a      	ldr	r2, [r3, #32]
 800d800:	2301      	movs	r3, #1
 800d802:	f7fd fc5f 	bl	800b0c4 <disk_write>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <f_read+0x1da>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2201      	movs	r2, #1
 800d810:	755a      	strb	r2, [r3, #21]
 800d812:	2301      	movs	r3, #1
 800d814:	e04d      	b.n	800d8b2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	7d1b      	ldrb	r3, [r3, #20]
 800d81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	7858      	ldrb	r0, [r3, #1]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d82e:	2301      	movs	r3, #1
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	f7fd fc27 	bl	800b084 <disk_read>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d004      	beq.n	800d846 <f_read+0x20a>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2201      	movs	r2, #1
 800d840:	755a      	strb	r2, [r3, #21]
 800d842:	2301      	movs	r3, #1
 800d844:	e035      	b.n	800d8b2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d854:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d858:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d901      	bls.n	800d866 <f_read+0x22a>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d874:	4413      	add	r3, r2
 800d876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d878:	4619      	mov	r1, r3
 800d87a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d87c:	f7fd fce2 	bl	800b244 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d884:	4413      	add	r3, r2
 800d886:	627b      	str	r3, [r7, #36]	@ 0x24
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	699a      	ldr	r2, [r3, #24]
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	441a      	add	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	619a      	str	r2, [r3, #24]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	441a      	add	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f47f af01 	bne.w	800d6b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3738      	adds	r7, #56	@ 0x38
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b086      	sub	sp, #24
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f107 0208 	add.w	r2, r7, #8
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fc80 	bl	800d1d0 <validate>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d168      	bne.n	800d9ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	7d1b      	ldrb	r3, [r3, #20]
 800d8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d062      	beq.n	800d9ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ea:	b25b      	sxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	da15      	bge.n	800d91c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	7858      	ldrb	r0, [r3, #1]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	2301      	movs	r3, #1
 800d900:	f7fd fbe0 	bl	800b0c4 <disk_write>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <f_sync+0x54>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e04f      	b.n	800d9ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7d1b      	ldrb	r3, [r3, #20]
 800d912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d91c:	f7fc fd2a 	bl	800a374 <get_fattime>
 800d920:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d928:	4619      	mov	r1, r3
 800d92a:	4610      	mov	r0, r2
 800d92c:	f7fd feb8 	bl	800b6a0 <move_window>
 800d930:	4603      	mov	r3, r0
 800d932:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d138      	bne.n	800d9ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d93e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	330b      	adds	r3, #11
 800d944:	781a      	ldrb	r2, [r3, #0]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	330b      	adds	r3, #11
 800d94a:	f042 0220 	orr.w	r2, r2, #32
 800d94e:	b2d2      	uxtb	r2, r2
 800d950:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6818      	ldr	r0, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	461a      	mov	r2, r3
 800d95c:	68f9      	ldr	r1, [r7, #12]
 800d95e:	f7fe fbc2 	bl	800c0e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f103 021c 	add.w	r2, r3, #28
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7fd fc3c 	bl	800b1ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3316      	adds	r3, #22
 800d978:	6939      	ldr	r1, [r7, #16]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fd fc36 	bl	800b1ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3312      	adds	r3, #18
 800d984:	2100      	movs	r1, #0
 800d986:	4618      	mov	r0, r3
 800d988:	f7fd fc15 	bl	800b1b6 <st_word>
					fs->wflag = 1;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2201      	movs	r2, #1
 800d990:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	4618      	mov	r0, r3
 800d996:	f7fd feb1 	bl	800b6fc <sync_fs>
 800d99a:	4603      	mov	r3, r0
 800d99c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7ff ff7b 	bl	800d8ba <f_sync>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d118      	bne.n	800da00 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f107 0208 	add.w	r2, r7, #8
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff fbfa 	bl	800d1d0 <validate>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10c      	bne.n	800da00 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fd fdb4 	bl	800b558 <dec_lock>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da00:	7bfb      	ldrb	r3, [r7, #15]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
	...

0800da0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	4613      	mov	r3, r2
 800da18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da1a:	2301      	movs	r3, #1
 800da1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da22:	4b1f      	ldr	r3, [pc, #124]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da24:	7a5b      	ldrb	r3, [r3, #9]
 800da26:	b2db      	uxtb	r3, r3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d131      	bne.n	800da90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da2c:	4b1c      	ldr	r3, [pc, #112]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da2e:	7a5b      	ldrb	r3, [r3, #9]
 800da30:	b2db      	uxtb	r3, r3
 800da32:	461a      	mov	r2, r3
 800da34:	4b1a      	ldr	r3, [pc, #104]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da36:	2100      	movs	r1, #0
 800da38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da3a:	4b19      	ldr	r3, [pc, #100]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da3c:	7a5b      	ldrb	r3, [r3, #9]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	4a17      	ldr	r2, [pc, #92]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da4a:	4b15      	ldr	r3, [pc, #84]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da4c:	7a5b      	ldrb	r3, [r3, #9]
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	461a      	mov	r2, r3
 800da52:	4b13      	ldr	r3, [pc, #76]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da54:	4413      	add	r3, r2
 800da56:	79fa      	ldrb	r2, [r7, #7]
 800da58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da5a:	4b11      	ldr	r3, [pc, #68]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da5c:	7a5b      	ldrb	r3, [r3, #9]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	b2d1      	uxtb	r1, r2
 800da64:	4a0e      	ldr	r2, [pc, #56]	@ (800daa0 <FATFS_LinkDriverEx+0x94>)
 800da66:	7251      	strb	r1, [r2, #9]
 800da68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da6a:	7dbb      	ldrb	r3, [r7, #22]
 800da6c:	3330      	adds	r3, #48	@ 0x30
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	3301      	adds	r3, #1
 800da78:	223a      	movs	r2, #58	@ 0x3a
 800da7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	3302      	adds	r3, #2
 800da80:	222f      	movs	r2, #47	@ 0x2f
 800da82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	3303      	adds	r3, #3
 800da88:	2200      	movs	r2, #0
 800da8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da90:	7dfb      	ldrb	r3, [r7, #23]
}
 800da92:	4618      	mov	r0, r3
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	240005a8 	.word	0x240005a8

0800daa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800daae:	2200      	movs	r2, #0
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff ffaa 	bl	800da0c <FATFS_LinkDriverEx>
 800dab8:	4603      	mov	r3, r0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	6039      	str	r1, [r7, #0]
 800dace:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dad0:	88fb      	ldrh	r3, [r7, #6]
 800dad2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dad4:	d802      	bhi.n	800dadc <ff_convert+0x18>
		c = chr;
 800dad6:	88fb      	ldrh	r3, [r7, #6]
 800dad8:	81fb      	strh	r3, [r7, #14]
 800dada:	e025      	b.n	800db28 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00b      	beq.n	800dafa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dae2:	88fb      	ldrh	r3, [r7, #6]
 800dae4:	2bff      	cmp	r3, #255	@ 0xff
 800dae6:	d805      	bhi.n	800daf4 <ff_convert+0x30>
 800dae8:	88fb      	ldrh	r3, [r7, #6]
 800daea:	3b80      	subs	r3, #128	@ 0x80
 800daec:	4a12      	ldr	r2, [pc, #72]	@ (800db38 <ff_convert+0x74>)
 800daee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf2:	e000      	b.n	800daf6 <ff_convert+0x32>
 800daf4:	2300      	movs	r3, #0
 800daf6:	81fb      	strh	r3, [r7, #14]
 800daf8:	e016      	b.n	800db28 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dafa:	2300      	movs	r3, #0
 800dafc:	81fb      	strh	r3, [r7, #14]
 800dafe:	e009      	b.n	800db14 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800db00:	89fb      	ldrh	r3, [r7, #14]
 800db02:	4a0d      	ldr	r2, [pc, #52]	@ (800db38 <ff_convert+0x74>)
 800db04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db08:	88fa      	ldrh	r2, [r7, #6]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d006      	beq.n	800db1c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800db0e:	89fb      	ldrh	r3, [r7, #14]
 800db10:	3301      	adds	r3, #1
 800db12:	81fb      	strh	r3, [r7, #14]
 800db14:	89fb      	ldrh	r3, [r7, #14]
 800db16:	2b7f      	cmp	r3, #127	@ 0x7f
 800db18:	d9f2      	bls.n	800db00 <ff_convert+0x3c>
 800db1a:	e000      	b.n	800db1e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800db1c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800db1e:	89fb      	ldrh	r3, [r7, #14]
 800db20:	3380      	adds	r3, #128	@ 0x80
 800db22:	b29b      	uxth	r3, r3
 800db24:	b2db      	uxtb	r3, r3
 800db26:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800db28:	89fb      	ldrh	r3, [r7, #14]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	0800e820 	.word	0x0800e820

0800db3c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b087      	sub	sp, #28
 800db40:	af00      	add	r7, sp, #0
 800db42:	4603      	mov	r3, r0
 800db44:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800db46:	88fb      	ldrh	r3, [r7, #6]
 800db48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db4c:	d201      	bcs.n	800db52 <ff_wtoupper+0x16>
 800db4e:	4b3e      	ldr	r3, [pc, #248]	@ (800dc48 <ff_wtoupper+0x10c>)
 800db50:	e000      	b.n	800db54 <ff_wtoupper+0x18>
 800db52:	4b3e      	ldr	r3, [pc, #248]	@ (800dc4c <ff_wtoupper+0x110>)
 800db54:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1c9a      	adds	r2, r3, #2
 800db5a:	617a      	str	r2, [r7, #20]
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800db60:	8a7b      	ldrh	r3, [r7, #18]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d068      	beq.n	800dc38 <ff_wtoupper+0xfc>
 800db66:	88fa      	ldrh	r2, [r7, #6]
 800db68:	8a7b      	ldrh	r3, [r7, #18]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d364      	bcc.n	800dc38 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	1c9a      	adds	r2, r3, #2
 800db72:	617a      	str	r2, [r7, #20]
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	823b      	strh	r3, [r7, #16]
 800db78:	8a3b      	ldrh	r3, [r7, #16]
 800db7a:	0a1b      	lsrs	r3, r3, #8
 800db7c:	81fb      	strh	r3, [r7, #14]
 800db7e:	8a3b      	ldrh	r3, [r7, #16]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800db84:	88fa      	ldrh	r2, [r7, #6]
 800db86:	8a79      	ldrh	r1, [r7, #18]
 800db88:	8a3b      	ldrh	r3, [r7, #16]
 800db8a:	440b      	add	r3, r1
 800db8c:	429a      	cmp	r2, r3
 800db8e:	da49      	bge.n	800dc24 <ff_wtoupper+0xe8>
			switch (cmd) {
 800db90:	89fb      	ldrh	r3, [r7, #14]
 800db92:	2b08      	cmp	r3, #8
 800db94:	d84f      	bhi.n	800dc36 <ff_wtoupper+0xfa>
 800db96:	a201      	add	r2, pc, #4	@ (adr r2, 800db9c <ff_wtoupper+0x60>)
 800db98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9c:	0800dbc1 	.word	0x0800dbc1
 800dba0:	0800dbd3 	.word	0x0800dbd3
 800dba4:	0800dbe9 	.word	0x0800dbe9
 800dba8:	0800dbf1 	.word	0x0800dbf1
 800dbac:	0800dbf9 	.word	0x0800dbf9
 800dbb0:	0800dc01 	.word	0x0800dc01
 800dbb4:	0800dc09 	.word	0x0800dc09
 800dbb8:	0800dc11 	.word	0x0800dc11
 800dbbc:	0800dc19 	.word	0x0800dc19
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dbc0:	88fa      	ldrh	r2, [r7, #6]
 800dbc2:	8a7b      	ldrh	r3, [r7, #18]
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	005b      	lsls	r3, r3, #1
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	4413      	add	r3, r2
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	80fb      	strh	r3, [r7, #6]
 800dbd0:	e027      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dbd2:	88fa      	ldrh	r2, [r7, #6]
 800dbd4:	8a7b      	ldrh	r3, [r7, #18]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	88fa      	ldrh	r2, [r7, #6]
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	80fb      	strh	r3, [r7, #6]
 800dbe6:	e01c      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dbe8:	88fb      	ldrh	r3, [r7, #6]
 800dbea:	3b10      	subs	r3, #16
 800dbec:	80fb      	strh	r3, [r7, #6]
 800dbee:	e018      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dbf0:	88fb      	ldrh	r3, [r7, #6]
 800dbf2:	3b20      	subs	r3, #32
 800dbf4:	80fb      	strh	r3, [r7, #6]
 800dbf6:	e014      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dbf8:	88fb      	ldrh	r3, [r7, #6]
 800dbfa:	3b30      	subs	r3, #48	@ 0x30
 800dbfc:	80fb      	strh	r3, [r7, #6]
 800dbfe:	e010      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dc00:	88fb      	ldrh	r3, [r7, #6]
 800dc02:	3b1a      	subs	r3, #26
 800dc04:	80fb      	strh	r3, [r7, #6]
 800dc06:	e00c      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dc08:	88fb      	ldrh	r3, [r7, #6]
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	80fb      	strh	r3, [r7, #6]
 800dc0e:	e008      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dc10:	88fb      	ldrh	r3, [r7, #6]
 800dc12:	3b50      	subs	r3, #80	@ 0x50
 800dc14:	80fb      	strh	r3, [r7, #6]
 800dc16:	e004      	b.n	800dc22 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dc18:	88fb      	ldrh	r3, [r7, #6]
 800dc1a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800dc1e:	80fb      	strh	r3, [r7, #6]
 800dc20:	bf00      	nop
			}
			break;
 800dc22:	e008      	b.n	800dc36 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dc24:	89fb      	ldrh	r3, [r7, #14]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d195      	bne.n	800db56 <ff_wtoupper+0x1a>
 800dc2a:	8a3b      	ldrh	r3, [r7, #16]
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	4413      	add	r3, r2
 800dc32:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dc34:	e78f      	b.n	800db56 <ff_wtoupper+0x1a>
			break;
 800dc36:	bf00      	nop
	}

	return chr;
 800dc38:	88fb      	ldrh	r3, [r7, #6]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	371c      	adds	r7, #28
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	0800e920 	.word	0x0800e920
 800dc4c:	0800eb14 	.word	0x0800eb14

0800dc50 <sbrk_aligned>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	4e0f      	ldr	r6, [pc, #60]	@ (800dc90 <sbrk_aligned+0x40>)
 800dc54:	460c      	mov	r4, r1
 800dc56:	6831      	ldr	r1, [r6, #0]
 800dc58:	4605      	mov	r5, r0
 800dc5a:	b911      	cbnz	r1, 800dc62 <sbrk_aligned+0x12>
 800dc5c:	f000 f902 	bl	800de64 <_sbrk_r>
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f8fd 	bl	800de64 <_sbrk_r>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d103      	bne.n	800dc76 <sbrk_aligned+0x26>
 800dc6e:	f04f 34ff 	mov.w	r4, #4294967295
 800dc72:	4620      	mov	r0, r4
 800dc74:	bd70      	pop	{r4, r5, r6, pc}
 800dc76:	1cc4      	adds	r4, r0, #3
 800dc78:	f024 0403 	bic.w	r4, r4, #3
 800dc7c:	42a0      	cmp	r0, r4
 800dc7e:	d0f8      	beq.n	800dc72 <sbrk_aligned+0x22>
 800dc80:	1a21      	subs	r1, r4, r0
 800dc82:	4628      	mov	r0, r5
 800dc84:	f000 f8ee 	bl	800de64 <_sbrk_r>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d1f2      	bne.n	800dc72 <sbrk_aligned+0x22>
 800dc8c:	e7ef      	b.n	800dc6e <sbrk_aligned+0x1e>
 800dc8e:	bf00      	nop
 800dc90:	240005b4 	.word	0x240005b4

0800dc94 <_malloc_r>:
 800dc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc98:	1ccd      	adds	r5, r1, #3
 800dc9a:	f025 0503 	bic.w	r5, r5, #3
 800dc9e:	3508      	adds	r5, #8
 800dca0:	2d0c      	cmp	r5, #12
 800dca2:	bf38      	it	cc
 800dca4:	250c      	movcc	r5, #12
 800dca6:	2d00      	cmp	r5, #0
 800dca8:	4606      	mov	r6, r0
 800dcaa:	db01      	blt.n	800dcb0 <_malloc_r+0x1c>
 800dcac:	42a9      	cmp	r1, r5
 800dcae:	d904      	bls.n	800dcba <_malloc_r+0x26>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	6033      	str	r3, [r6, #0]
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd90 <_malloc_r+0xfc>
 800dcbe:	f000 f869 	bl	800dd94 <__malloc_lock>
 800dcc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	bb44      	cbnz	r4, 800dd1c <_malloc_r+0x88>
 800dcca:	4629      	mov	r1, r5
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff ffbf 	bl	800dc50 <sbrk_aligned>
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	d158      	bne.n	800dd8a <_malloc_r+0xf6>
 800dcd8:	f8d8 4000 	ldr.w	r4, [r8]
 800dcdc:	4627      	mov	r7, r4
 800dcde:	2f00      	cmp	r7, #0
 800dce0:	d143      	bne.n	800dd6a <_malloc_r+0xd6>
 800dce2:	2c00      	cmp	r4, #0
 800dce4:	d04b      	beq.n	800dd7e <_malloc_r+0xea>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4639      	mov	r1, r7
 800dcea:	4630      	mov	r0, r6
 800dcec:	eb04 0903 	add.w	r9, r4, r3
 800dcf0:	f000 f8b8 	bl	800de64 <_sbrk_r>
 800dcf4:	4581      	cmp	r9, r0
 800dcf6:	d142      	bne.n	800dd7e <_malloc_r+0xea>
 800dcf8:	6821      	ldr	r1, [r4, #0]
 800dcfa:	1a6d      	subs	r5, r5, r1
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ffa6 	bl	800dc50 <sbrk_aligned>
 800dd04:	3001      	adds	r0, #1
 800dd06:	d03a      	beq.n	800dd7e <_malloc_r+0xea>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	442b      	add	r3, r5
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	bb62      	cbnz	r2, 800dd70 <_malloc_r+0xdc>
 800dd16:	f8c8 7000 	str.w	r7, [r8]
 800dd1a:	e00f      	b.n	800dd3c <_malloc_r+0xa8>
 800dd1c:	6822      	ldr	r2, [r4, #0]
 800dd1e:	1b52      	subs	r2, r2, r5
 800dd20:	d420      	bmi.n	800dd64 <_malloc_r+0xd0>
 800dd22:	2a0b      	cmp	r2, #11
 800dd24:	d917      	bls.n	800dd56 <_malloc_r+0xc2>
 800dd26:	1961      	adds	r1, r4, r5
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	6025      	str	r5, [r4, #0]
 800dd2c:	bf18      	it	ne
 800dd2e:	6059      	strne	r1, [r3, #4]
 800dd30:	6863      	ldr	r3, [r4, #4]
 800dd32:	bf08      	it	eq
 800dd34:	f8c8 1000 	streq.w	r1, [r8]
 800dd38:	5162      	str	r2, [r4, r5]
 800dd3a:	604b      	str	r3, [r1, #4]
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f000 f82f 	bl	800dda0 <__malloc_unlock>
 800dd42:	f104 000b 	add.w	r0, r4, #11
 800dd46:	1d23      	adds	r3, r4, #4
 800dd48:	f020 0007 	bic.w	r0, r0, #7
 800dd4c:	1ac2      	subs	r2, r0, r3
 800dd4e:	bf1c      	itt	ne
 800dd50:	1a1b      	subne	r3, r3, r0
 800dd52:	50a3      	strne	r3, [r4, r2]
 800dd54:	e7af      	b.n	800dcb6 <_malloc_r+0x22>
 800dd56:	6862      	ldr	r2, [r4, #4]
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	bf0c      	ite	eq
 800dd5c:	f8c8 2000 	streq.w	r2, [r8]
 800dd60:	605a      	strne	r2, [r3, #4]
 800dd62:	e7eb      	b.n	800dd3c <_malloc_r+0xa8>
 800dd64:	4623      	mov	r3, r4
 800dd66:	6864      	ldr	r4, [r4, #4]
 800dd68:	e7ae      	b.n	800dcc8 <_malloc_r+0x34>
 800dd6a:	463c      	mov	r4, r7
 800dd6c:	687f      	ldr	r7, [r7, #4]
 800dd6e:	e7b6      	b.n	800dcde <_malloc_r+0x4a>
 800dd70:	461a      	mov	r2, r3
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	42a3      	cmp	r3, r4
 800dd76:	d1fb      	bne.n	800dd70 <_malloc_r+0xdc>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6053      	str	r3, [r2, #4]
 800dd7c:	e7de      	b.n	800dd3c <_malloc_r+0xa8>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	6033      	str	r3, [r6, #0]
 800dd82:	4630      	mov	r0, r6
 800dd84:	f000 f80c 	bl	800dda0 <__malloc_unlock>
 800dd88:	e794      	b.n	800dcb4 <_malloc_r+0x20>
 800dd8a:	6005      	str	r5, [r0, #0]
 800dd8c:	e7d6      	b.n	800dd3c <_malloc_r+0xa8>
 800dd8e:	bf00      	nop
 800dd90:	240005b8 	.word	0x240005b8

0800dd94 <__malloc_lock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	@ (800dd9c <__malloc_lock+0x8>)
 800dd96:	f000 b89f 	b.w	800ded8 <__retarget_lock_acquire_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	240006f8 	.word	0x240006f8

0800dda0 <__malloc_unlock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__malloc_unlock+0x8>)
 800dda2:	f000 b89a 	b.w	800deda <__retarget_lock_release_recursive>
 800dda6:	bf00      	nop
 800dda8:	240006f8 	.word	0x240006f8

0800ddac <sniprintf>:
 800ddac:	b40c      	push	{r2, r3}
 800ddae:	b530      	push	{r4, r5, lr}
 800ddb0:	4b17      	ldr	r3, [pc, #92]	@ (800de10 <sniprintf+0x64>)
 800ddb2:	1e0c      	subs	r4, r1, #0
 800ddb4:	681d      	ldr	r5, [r3, #0]
 800ddb6:	b09d      	sub	sp, #116	@ 0x74
 800ddb8:	da08      	bge.n	800ddcc <sniprintf+0x20>
 800ddba:	238b      	movs	r3, #139	@ 0x8b
 800ddbc:	602b      	str	r3, [r5, #0]
 800ddbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc2:	b01d      	add	sp, #116	@ 0x74
 800ddc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddc8:	b002      	add	sp, #8
 800ddca:	4770      	bx	lr
 800ddcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ddd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ddd4:	bf14      	ite	ne
 800ddd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ddda:	4623      	moveq	r3, r4
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dde4:	9002      	str	r0, [sp, #8]
 800dde6:	9006      	str	r0, [sp, #24]
 800dde8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ddec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ddee:	ab21      	add	r3, sp, #132	@ 0x84
 800ddf0:	a902      	add	r1, sp, #8
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	9301      	str	r3, [sp, #4]
 800ddf6:	f000 f925 	bl	800e044 <_svfiprintf_r>
 800ddfa:	1c43      	adds	r3, r0, #1
 800ddfc:	bfbc      	itt	lt
 800ddfe:	238b      	movlt	r3, #139	@ 0x8b
 800de00:	602b      	strlt	r3, [r5, #0]
 800de02:	2c00      	cmp	r4, #0
 800de04:	d0dd      	beq.n	800ddc2 <sniprintf+0x16>
 800de06:	9b02      	ldr	r3, [sp, #8]
 800de08:	2200      	movs	r2, #0
 800de0a:	701a      	strb	r2, [r3, #0]
 800de0c:	e7d9      	b.n	800ddc2 <sniprintf+0x16>
 800de0e:	bf00      	nop
 800de10:	2400002c 	.word	0x2400002c

0800de14 <siprintf>:
 800de14:	b40e      	push	{r1, r2, r3}
 800de16:	b500      	push	{lr}
 800de18:	b09c      	sub	sp, #112	@ 0x70
 800de1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800de1c:	9002      	str	r0, [sp, #8]
 800de1e:	9006      	str	r0, [sp, #24]
 800de20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de24:	4809      	ldr	r0, [pc, #36]	@ (800de4c <siprintf+0x38>)
 800de26:	9107      	str	r1, [sp, #28]
 800de28:	9104      	str	r1, [sp, #16]
 800de2a:	4909      	ldr	r1, [pc, #36]	@ (800de50 <siprintf+0x3c>)
 800de2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de30:	9105      	str	r1, [sp, #20]
 800de32:	6800      	ldr	r0, [r0, #0]
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	a902      	add	r1, sp, #8
 800de38:	f000 f904 	bl	800e044 <_svfiprintf_r>
 800de3c:	9b02      	ldr	r3, [sp, #8]
 800de3e:	2200      	movs	r2, #0
 800de40:	701a      	strb	r2, [r3, #0]
 800de42:	b01c      	add	sp, #112	@ 0x70
 800de44:	f85d eb04 	ldr.w	lr, [sp], #4
 800de48:	b003      	add	sp, #12
 800de4a:	4770      	bx	lr
 800de4c:	2400002c 	.word	0x2400002c
 800de50:	ffff0208 	.word	0xffff0208

0800de54 <memset>:
 800de54:	4402      	add	r2, r0
 800de56:	4603      	mov	r3, r0
 800de58:	4293      	cmp	r3, r2
 800de5a:	d100      	bne.n	800de5e <memset+0xa>
 800de5c:	4770      	bx	lr
 800de5e:	f803 1b01 	strb.w	r1, [r3], #1
 800de62:	e7f9      	b.n	800de58 <memset+0x4>

0800de64 <_sbrk_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d06      	ldr	r5, [pc, #24]	@ (800de80 <_sbrk_r+0x1c>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	602b      	str	r3, [r5, #0]
 800de70:	f7f4 f984 	bl	800217c <_sbrk>
 800de74:	1c43      	adds	r3, r0, #1
 800de76:	d102      	bne.n	800de7e <_sbrk_r+0x1a>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	b103      	cbz	r3, 800de7e <_sbrk_r+0x1a>
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	240006f4 	.word	0x240006f4

0800de84 <__errno>:
 800de84:	4b01      	ldr	r3, [pc, #4]	@ (800de8c <__errno+0x8>)
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	2400002c 	.word	0x2400002c

0800de90 <__libc_init_array>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	4d0d      	ldr	r5, [pc, #52]	@ (800dec8 <__libc_init_array+0x38>)
 800de94:	4c0d      	ldr	r4, [pc, #52]	@ (800decc <__libc_init_array+0x3c>)
 800de96:	1b64      	subs	r4, r4, r5
 800de98:	10a4      	asrs	r4, r4, #2
 800de9a:	2600      	movs	r6, #0
 800de9c:	42a6      	cmp	r6, r4
 800de9e:	d109      	bne.n	800deb4 <__libc_init_array+0x24>
 800dea0:	4d0b      	ldr	r5, [pc, #44]	@ (800ded0 <__libc_init_array+0x40>)
 800dea2:	4c0c      	ldr	r4, [pc, #48]	@ (800ded4 <__libc_init_array+0x44>)
 800dea4:	f000 fba8 	bl	800e5f8 <_init>
 800dea8:	1b64      	subs	r4, r4, r5
 800deaa:	10a4      	asrs	r4, r4, #2
 800deac:	2600      	movs	r6, #0
 800deae:	42a6      	cmp	r6, r4
 800deb0:	d105      	bne.n	800debe <__libc_init_array+0x2e>
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb8:	4798      	blx	r3
 800deba:	3601      	adds	r6, #1
 800debc:	e7ee      	b.n	800de9c <__libc_init_array+0xc>
 800debe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dec2:	4798      	blx	r3
 800dec4:	3601      	adds	r6, #1
 800dec6:	e7f2      	b.n	800deae <__libc_init_array+0x1e>
 800dec8:	0800ec0c 	.word	0x0800ec0c
 800decc:	0800ec0c 	.word	0x0800ec0c
 800ded0:	0800ec0c 	.word	0x0800ec0c
 800ded4:	0800ec10 	.word	0x0800ec10

0800ded8 <__retarget_lock_acquire_recursive>:
 800ded8:	4770      	bx	lr

0800deda <__retarget_lock_release_recursive>:
 800deda:	4770      	bx	lr

0800dedc <memcpy>:
 800dedc:	440a      	add	r2, r1
 800dede:	4291      	cmp	r1, r2
 800dee0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee4:	d100      	bne.n	800dee8 <memcpy+0xc>
 800dee6:	4770      	bx	lr
 800dee8:	b510      	push	{r4, lr}
 800deea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def2:	4291      	cmp	r1, r2
 800def4:	d1f9      	bne.n	800deea <memcpy+0xe>
 800def6:	bd10      	pop	{r4, pc}

0800def8 <_free_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4605      	mov	r5, r0
 800defc:	2900      	cmp	r1, #0
 800defe:	d041      	beq.n	800df84 <_free_r+0x8c>
 800df00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df04:	1f0c      	subs	r4, r1, #4
 800df06:	2b00      	cmp	r3, #0
 800df08:	bfb8      	it	lt
 800df0a:	18e4      	addlt	r4, r4, r3
 800df0c:	f7ff ff42 	bl	800dd94 <__malloc_lock>
 800df10:	4a1d      	ldr	r2, [pc, #116]	@ (800df88 <_free_r+0x90>)
 800df12:	6813      	ldr	r3, [r2, #0]
 800df14:	b933      	cbnz	r3, 800df24 <_free_r+0x2c>
 800df16:	6063      	str	r3, [r4, #4]
 800df18:	6014      	str	r4, [r2, #0]
 800df1a:	4628      	mov	r0, r5
 800df1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df20:	f7ff bf3e 	b.w	800dda0 <__malloc_unlock>
 800df24:	42a3      	cmp	r3, r4
 800df26:	d908      	bls.n	800df3a <_free_r+0x42>
 800df28:	6820      	ldr	r0, [r4, #0]
 800df2a:	1821      	adds	r1, r4, r0
 800df2c:	428b      	cmp	r3, r1
 800df2e:	bf01      	itttt	eq
 800df30:	6819      	ldreq	r1, [r3, #0]
 800df32:	685b      	ldreq	r3, [r3, #4]
 800df34:	1809      	addeq	r1, r1, r0
 800df36:	6021      	streq	r1, [r4, #0]
 800df38:	e7ed      	b.n	800df16 <_free_r+0x1e>
 800df3a:	461a      	mov	r2, r3
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	b10b      	cbz	r3, 800df44 <_free_r+0x4c>
 800df40:	42a3      	cmp	r3, r4
 800df42:	d9fa      	bls.n	800df3a <_free_r+0x42>
 800df44:	6811      	ldr	r1, [r2, #0]
 800df46:	1850      	adds	r0, r2, r1
 800df48:	42a0      	cmp	r0, r4
 800df4a:	d10b      	bne.n	800df64 <_free_r+0x6c>
 800df4c:	6820      	ldr	r0, [r4, #0]
 800df4e:	4401      	add	r1, r0
 800df50:	1850      	adds	r0, r2, r1
 800df52:	4283      	cmp	r3, r0
 800df54:	6011      	str	r1, [r2, #0]
 800df56:	d1e0      	bne.n	800df1a <_free_r+0x22>
 800df58:	6818      	ldr	r0, [r3, #0]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	6053      	str	r3, [r2, #4]
 800df5e:	4408      	add	r0, r1
 800df60:	6010      	str	r0, [r2, #0]
 800df62:	e7da      	b.n	800df1a <_free_r+0x22>
 800df64:	d902      	bls.n	800df6c <_free_r+0x74>
 800df66:	230c      	movs	r3, #12
 800df68:	602b      	str	r3, [r5, #0]
 800df6a:	e7d6      	b.n	800df1a <_free_r+0x22>
 800df6c:	6820      	ldr	r0, [r4, #0]
 800df6e:	1821      	adds	r1, r4, r0
 800df70:	428b      	cmp	r3, r1
 800df72:	bf04      	itt	eq
 800df74:	6819      	ldreq	r1, [r3, #0]
 800df76:	685b      	ldreq	r3, [r3, #4]
 800df78:	6063      	str	r3, [r4, #4]
 800df7a:	bf04      	itt	eq
 800df7c:	1809      	addeq	r1, r1, r0
 800df7e:	6021      	streq	r1, [r4, #0]
 800df80:	6054      	str	r4, [r2, #4]
 800df82:	e7ca      	b.n	800df1a <_free_r+0x22>
 800df84:	bd38      	pop	{r3, r4, r5, pc}
 800df86:	bf00      	nop
 800df88:	240005b8 	.word	0x240005b8

0800df8c <__ssputs_r>:
 800df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df90:	688e      	ldr	r6, [r1, #8]
 800df92:	461f      	mov	r7, r3
 800df94:	42be      	cmp	r6, r7
 800df96:	680b      	ldr	r3, [r1, #0]
 800df98:	4682      	mov	sl, r0
 800df9a:	460c      	mov	r4, r1
 800df9c:	4690      	mov	r8, r2
 800df9e:	d82d      	bhi.n	800dffc <__ssputs_r+0x70>
 800dfa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dfa8:	d026      	beq.n	800dff8 <__ssputs_r+0x6c>
 800dfaa:	6965      	ldr	r5, [r4, #20]
 800dfac:	6909      	ldr	r1, [r1, #16]
 800dfae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfb2:	eba3 0901 	sub.w	r9, r3, r1
 800dfb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfba:	1c7b      	adds	r3, r7, #1
 800dfbc:	444b      	add	r3, r9
 800dfbe:	106d      	asrs	r5, r5, #1
 800dfc0:	429d      	cmp	r5, r3
 800dfc2:	bf38      	it	cc
 800dfc4:	461d      	movcc	r5, r3
 800dfc6:	0553      	lsls	r3, r2, #21
 800dfc8:	d527      	bpl.n	800e01a <__ssputs_r+0x8e>
 800dfca:	4629      	mov	r1, r5
 800dfcc:	f7ff fe62 	bl	800dc94 <_malloc_r>
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	b360      	cbz	r0, 800e02e <__ssputs_r+0xa2>
 800dfd4:	6921      	ldr	r1, [r4, #16]
 800dfd6:	464a      	mov	r2, r9
 800dfd8:	f7ff ff80 	bl	800dedc <memcpy>
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfe6:	81a3      	strh	r3, [r4, #12]
 800dfe8:	6126      	str	r6, [r4, #16]
 800dfea:	6165      	str	r5, [r4, #20]
 800dfec:	444e      	add	r6, r9
 800dfee:	eba5 0509 	sub.w	r5, r5, r9
 800dff2:	6026      	str	r6, [r4, #0]
 800dff4:	60a5      	str	r5, [r4, #8]
 800dff6:	463e      	mov	r6, r7
 800dff8:	42be      	cmp	r6, r7
 800dffa:	d900      	bls.n	800dffe <__ssputs_r+0x72>
 800dffc:	463e      	mov	r6, r7
 800dffe:	6820      	ldr	r0, [r4, #0]
 800e000:	4632      	mov	r2, r6
 800e002:	4641      	mov	r1, r8
 800e004:	f000 faa8 	bl	800e558 <memmove>
 800e008:	68a3      	ldr	r3, [r4, #8]
 800e00a:	1b9b      	subs	r3, r3, r6
 800e00c:	60a3      	str	r3, [r4, #8]
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	4433      	add	r3, r6
 800e012:	6023      	str	r3, [r4, #0]
 800e014:	2000      	movs	r0, #0
 800e016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01a:	462a      	mov	r2, r5
 800e01c:	f000 fab6 	bl	800e58c <_realloc_r>
 800e020:	4606      	mov	r6, r0
 800e022:	2800      	cmp	r0, #0
 800e024:	d1e0      	bne.n	800dfe8 <__ssputs_r+0x5c>
 800e026:	6921      	ldr	r1, [r4, #16]
 800e028:	4650      	mov	r0, sl
 800e02a:	f7ff ff65 	bl	800def8 <_free_r>
 800e02e:	230c      	movs	r3, #12
 800e030:	f8ca 3000 	str.w	r3, [sl]
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	e7e9      	b.n	800e016 <__ssputs_r+0x8a>
	...

0800e044 <_svfiprintf_r>:
 800e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	4698      	mov	r8, r3
 800e04a:	898b      	ldrh	r3, [r1, #12]
 800e04c:	061b      	lsls	r3, r3, #24
 800e04e:	b09d      	sub	sp, #116	@ 0x74
 800e050:	4607      	mov	r7, r0
 800e052:	460d      	mov	r5, r1
 800e054:	4614      	mov	r4, r2
 800e056:	d510      	bpl.n	800e07a <_svfiprintf_r+0x36>
 800e058:	690b      	ldr	r3, [r1, #16]
 800e05a:	b973      	cbnz	r3, 800e07a <_svfiprintf_r+0x36>
 800e05c:	2140      	movs	r1, #64	@ 0x40
 800e05e:	f7ff fe19 	bl	800dc94 <_malloc_r>
 800e062:	6028      	str	r0, [r5, #0]
 800e064:	6128      	str	r0, [r5, #16]
 800e066:	b930      	cbnz	r0, 800e076 <_svfiprintf_r+0x32>
 800e068:	230c      	movs	r3, #12
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295
 800e070:	b01d      	add	sp, #116	@ 0x74
 800e072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e076:	2340      	movs	r3, #64	@ 0x40
 800e078:	616b      	str	r3, [r5, #20]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e07e:	2320      	movs	r3, #32
 800e080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e084:	f8cd 800c 	str.w	r8, [sp, #12]
 800e088:	2330      	movs	r3, #48	@ 0x30
 800e08a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e228 <_svfiprintf_r+0x1e4>
 800e08e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e092:	f04f 0901 	mov.w	r9, #1
 800e096:	4623      	mov	r3, r4
 800e098:	469a      	mov	sl, r3
 800e09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e09e:	b10a      	cbz	r2, 800e0a4 <_svfiprintf_r+0x60>
 800e0a0:	2a25      	cmp	r2, #37	@ 0x25
 800e0a2:	d1f9      	bne.n	800e098 <_svfiprintf_r+0x54>
 800e0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e0a8:	d00b      	beq.n	800e0c2 <_svfiprintf_r+0x7e>
 800e0aa:	465b      	mov	r3, fp
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ff6b 	bl	800df8c <__ssputs_r>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	f000 80a7 	beq.w	800e20a <_svfiprintf_r+0x1c6>
 800e0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0be:	445a      	add	r2, fp
 800e0c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f000 809f 	beq.w	800e20a <_svfiprintf_r+0x1c6>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0d6:	f10a 0a01 	add.w	sl, sl, #1
 800e0da:	9304      	str	r3, [sp, #16]
 800e0dc:	9307      	str	r3, [sp, #28]
 800e0de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0e4:	4654      	mov	r4, sl
 800e0e6:	2205      	movs	r2, #5
 800e0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ec:	484e      	ldr	r0, [pc, #312]	@ (800e228 <_svfiprintf_r+0x1e4>)
 800e0ee:	f7f2 f8ff 	bl	80002f0 <memchr>
 800e0f2:	9a04      	ldr	r2, [sp, #16]
 800e0f4:	b9d8      	cbnz	r0, 800e12e <_svfiprintf_r+0xea>
 800e0f6:	06d0      	lsls	r0, r2, #27
 800e0f8:	bf44      	itt	mi
 800e0fa:	2320      	movmi	r3, #32
 800e0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e100:	0711      	lsls	r1, r2, #28
 800e102:	bf44      	itt	mi
 800e104:	232b      	movmi	r3, #43	@ 0x2b
 800e106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e10a:	f89a 3000 	ldrb.w	r3, [sl]
 800e10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e110:	d015      	beq.n	800e13e <_svfiprintf_r+0xfa>
 800e112:	9a07      	ldr	r2, [sp, #28]
 800e114:	4654      	mov	r4, sl
 800e116:	2000      	movs	r0, #0
 800e118:	f04f 0c0a 	mov.w	ip, #10
 800e11c:	4621      	mov	r1, r4
 800e11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e122:	3b30      	subs	r3, #48	@ 0x30
 800e124:	2b09      	cmp	r3, #9
 800e126:	d94b      	bls.n	800e1c0 <_svfiprintf_r+0x17c>
 800e128:	b1b0      	cbz	r0, 800e158 <_svfiprintf_r+0x114>
 800e12a:	9207      	str	r2, [sp, #28]
 800e12c:	e014      	b.n	800e158 <_svfiprintf_r+0x114>
 800e12e:	eba0 0308 	sub.w	r3, r0, r8
 800e132:	fa09 f303 	lsl.w	r3, r9, r3
 800e136:	4313      	orrs	r3, r2
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	46a2      	mov	sl, r4
 800e13c:	e7d2      	b.n	800e0e4 <_svfiprintf_r+0xa0>
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	1d19      	adds	r1, r3, #4
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	9103      	str	r1, [sp, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	bfbb      	ittet	lt
 800e14a:	425b      	neglt	r3, r3
 800e14c:	f042 0202 	orrlt.w	r2, r2, #2
 800e150:	9307      	strge	r3, [sp, #28]
 800e152:	9307      	strlt	r3, [sp, #28]
 800e154:	bfb8      	it	lt
 800e156:	9204      	strlt	r2, [sp, #16]
 800e158:	7823      	ldrb	r3, [r4, #0]
 800e15a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e15c:	d10a      	bne.n	800e174 <_svfiprintf_r+0x130>
 800e15e:	7863      	ldrb	r3, [r4, #1]
 800e160:	2b2a      	cmp	r3, #42	@ 0x2a
 800e162:	d132      	bne.n	800e1ca <_svfiprintf_r+0x186>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	1d1a      	adds	r2, r3, #4
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	9203      	str	r2, [sp, #12]
 800e16c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e170:	3402      	adds	r4, #2
 800e172:	9305      	str	r3, [sp, #20]
 800e174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e238 <_svfiprintf_r+0x1f4>
 800e178:	7821      	ldrb	r1, [r4, #0]
 800e17a:	2203      	movs	r2, #3
 800e17c:	4650      	mov	r0, sl
 800e17e:	f7f2 f8b7 	bl	80002f0 <memchr>
 800e182:	b138      	cbz	r0, 800e194 <_svfiprintf_r+0x150>
 800e184:	9b04      	ldr	r3, [sp, #16]
 800e186:	eba0 000a 	sub.w	r0, r0, sl
 800e18a:	2240      	movs	r2, #64	@ 0x40
 800e18c:	4082      	lsls	r2, r0
 800e18e:	4313      	orrs	r3, r2
 800e190:	3401      	adds	r4, #1
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e198:	4824      	ldr	r0, [pc, #144]	@ (800e22c <_svfiprintf_r+0x1e8>)
 800e19a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e19e:	2206      	movs	r2, #6
 800e1a0:	f7f2 f8a6 	bl	80002f0 <memchr>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d036      	beq.n	800e216 <_svfiprintf_r+0x1d2>
 800e1a8:	4b21      	ldr	r3, [pc, #132]	@ (800e230 <_svfiprintf_r+0x1ec>)
 800e1aa:	bb1b      	cbnz	r3, 800e1f4 <_svfiprintf_r+0x1b0>
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	3307      	adds	r3, #7
 800e1b0:	f023 0307 	bic.w	r3, r3, #7
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	9303      	str	r3, [sp, #12]
 800e1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ba:	4433      	add	r3, r6
 800e1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1be:	e76a      	b.n	800e096 <_svfiprintf_r+0x52>
 800e1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	e7a8      	b.n	800e11c <_svfiprintf_r+0xd8>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	3401      	adds	r4, #1
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	f04f 0c0a 	mov.w	ip, #10
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1dc:	3a30      	subs	r2, #48	@ 0x30
 800e1de:	2a09      	cmp	r2, #9
 800e1e0:	d903      	bls.n	800e1ea <_svfiprintf_r+0x1a6>
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0c6      	beq.n	800e174 <_svfiprintf_r+0x130>
 800e1e6:	9105      	str	r1, [sp, #20]
 800e1e8:	e7c4      	b.n	800e174 <_svfiprintf_r+0x130>
 800e1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e7f0      	b.n	800e1d6 <_svfiprintf_r+0x192>
 800e1f4:	ab03      	add	r3, sp, #12
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	462a      	mov	r2, r5
 800e1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e234 <_svfiprintf_r+0x1f0>)
 800e1fc:	a904      	add	r1, sp, #16
 800e1fe:	4638      	mov	r0, r7
 800e200:	f3af 8000 	nop.w
 800e204:	1c42      	adds	r2, r0, #1
 800e206:	4606      	mov	r6, r0
 800e208:	d1d6      	bne.n	800e1b8 <_svfiprintf_r+0x174>
 800e20a:	89ab      	ldrh	r3, [r5, #12]
 800e20c:	065b      	lsls	r3, r3, #25
 800e20e:	f53f af2d 	bmi.w	800e06c <_svfiprintf_r+0x28>
 800e212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e214:	e72c      	b.n	800e070 <_svfiprintf_r+0x2c>
 800e216:	ab03      	add	r3, sp, #12
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	462a      	mov	r2, r5
 800e21c:	4b05      	ldr	r3, [pc, #20]	@ (800e234 <_svfiprintf_r+0x1f0>)
 800e21e:	a904      	add	r1, sp, #16
 800e220:	4638      	mov	r0, r7
 800e222:	f000 f879 	bl	800e318 <_printf_i>
 800e226:	e7ed      	b.n	800e204 <_svfiprintf_r+0x1c0>
 800e228:	0800ebd0 	.word	0x0800ebd0
 800e22c:	0800ebda 	.word	0x0800ebda
 800e230:	00000000 	.word	0x00000000
 800e234:	0800df8d 	.word	0x0800df8d
 800e238:	0800ebd6 	.word	0x0800ebd6

0800e23c <_printf_common>:
 800e23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e240:	4616      	mov	r6, r2
 800e242:	4698      	mov	r8, r3
 800e244:	688a      	ldr	r2, [r1, #8]
 800e246:	690b      	ldr	r3, [r1, #16]
 800e248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	bfb8      	it	lt
 800e250:	4613      	movlt	r3, r2
 800e252:	6033      	str	r3, [r6, #0]
 800e254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e258:	4607      	mov	r7, r0
 800e25a:	460c      	mov	r4, r1
 800e25c:	b10a      	cbz	r2, 800e262 <_printf_common+0x26>
 800e25e:	3301      	adds	r3, #1
 800e260:	6033      	str	r3, [r6, #0]
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	0699      	lsls	r1, r3, #26
 800e266:	bf42      	ittt	mi
 800e268:	6833      	ldrmi	r3, [r6, #0]
 800e26a:	3302      	addmi	r3, #2
 800e26c:	6033      	strmi	r3, [r6, #0]
 800e26e:	6825      	ldr	r5, [r4, #0]
 800e270:	f015 0506 	ands.w	r5, r5, #6
 800e274:	d106      	bne.n	800e284 <_printf_common+0x48>
 800e276:	f104 0a19 	add.w	sl, r4, #25
 800e27a:	68e3      	ldr	r3, [r4, #12]
 800e27c:	6832      	ldr	r2, [r6, #0]
 800e27e:	1a9b      	subs	r3, r3, r2
 800e280:	42ab      	cmp	r3, r5
 800e282:	dc26      	bgt.n	800e2d2 <_printf_common+0x96>
 800e284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e288:	6822      	ldr	r2, [r4, #0]
 800e28a:	3b00      	subs	r3, #0
 800e28c:	bf18      	it	ne
 800e28e:	2301      	movne	r3, #1
 800e290:	0692      	lsls	r2, r2, #26
 800e292:	d42b      	bmi.n	800e2ec <_printf_common+0xb0>
 800e294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e298:	4641      	mov	r1, r8
 800e29a:	4638      	mov	r0, r7
 800e29c:	47c8      	blx	r9
 800e29e:	3001      	adds	r0, #1
 800e2a0:	d01e      	beq.n	800e2e0 <_printf_common+0xa4>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	6922      	ldr	r2, [r4, #16]
 800e2a6:	f003 0306 	and.w	r3, r3, #6
 800e2aa:	2b04      	cmp	r3, #4
 800e2ac:	bf02      	ittt	eq
 800e2ae:	68e5      	ldreq	r5, [r4, #12]
 800e2b0:	6833      	ldreq	r3, [r6, #0]
 800e2b2:	1aed      	subeq	r5, r5, r3
 800e2b4:	68a3      	ldr	r3, [r4, #8]
 800e2b6:	bf0c      	ite	eq
 800e2b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2bc:	2500      	movne	r5, #0
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	bfc4      	itt	gt
 800e2c2:	1a9b      	subgt	r3, r3, r2
 800e2c4:	18ed      	addgt	r5, r5, r3
 800e2c6:	2600      	movs	r6, #0
 800e2c8:	341a      	adds	r4, #26
 800e2ca:	42b5      	cmp	r5, r6
 800e2cc:	d11a      	bne.n	800e304 <_printf_common+0xc8>
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	e008      	b.n	800e2e4 <_printf_common+0xa8>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	4652      	mov	r2, sl
 800e2d6:	4641      	mov	r1, r8
 800e2d8:	4638      	mov	r0, r7
 800e2da:	47c8      	blx	r9
 800e2dc:	3001      	adds	r0, #1
 800e2de:	d103      	bne.n	800e2e8 <_printf_common+0xac>
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e8:	3501      	adds	r5, #1
 800e2ea:	e7c6      	b.n	800e27a <_printf_common+0x3e>
 800e2ec:	18e1      	adds	r1, r4, r3
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	2030      	movs	r0, #48	@ 0x30
 800e2f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2f6:	4422      	add	r2, r4
 800e2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e300:	3302      	adds	r3, #2
 800e302:	e7c7      	b.n	800e294 <_printf_common+0x58>
 800e304:	2301      	movs	r3, #1
 800e306:	4622      	mov	r2, r4
 800e308:	4641      	mov	r1, r8
 800e30a:	4638      	mov	r0, r7
 800e30c:	47c8      	blx	r9
 800e30e:	3001      	adds	r0, #1
 800e310:	d0e6      	beq.n	800e2e0 <_printf_common+0xa4>
 800e312:	3601      	adds	r6, #1
 800e314:	e7d9      	b.n	800e2ca <_printf_common+0x8e>
	...

0800e318 <_printf_i>:
 800e318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e31c:	7e0f      	ldrb	r7, [r1, #24]
 800e31e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e320:	2f78      	cmp	r7, #120	@ 0x78
 800e322:	4691      	mov	r9, r2
 800e324:	4680      	mov	r8, r0
 800e326:	460c      	mov	r4, r1
 800e328:	469a      	mov	sl, r3
 800e32a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e32e:	d807      	bhi.n	800e340 <_printf_i+0x28>
 800e330:	2f62      	cmp	r7, #98	@ 0x62
 800e332:	d80a      	bhi.n	800e34a <_printf_i+0x32>
 800e334:	2f00      	cmp	r7, #0
 800e336:	f000 80d2 	beq.w	800e4de <_printf_i+0x1c6>
 800e33a:	2f58      	cmp	r7, #88	@ 0x58
 800e33c:	f000 80b9 	beq.w	800e4b2 <_printf_i+0x19a>
 800e340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e348:	e03a      	b.n	800e3c0 <_printf_i+0xa8>
 800e34a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e34e:	2b15      	cmp	r3, #21
 800e350:	d8f6      	bhi.n	800e340 <_printf_i+0x28>
 800e352:	a101      	add	r1, pc, #4	@ (adr r1, 800e358 <_printf_i+0x40>)
 800e354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e358:	0800e3b1 	.word	0x0800e3b1
 800e35c:	0800e3c5 	.word	0x0800e3c5
 800e360:	0800e341 	.word	0x0800e341
 800e364:	0800e341 	.word	0x0800e341
 800e368:	0800e341 	.word	0x0800e341
 800e36c:	0800e341 	.word	0x0800e341
 800e370:	0800e3c5 	.word	0x0800e3c5
 800e374:	0800e341 	.word	0x0800e341
 800e378:	0800e341 	.word	0x0800e341
 800e37c:	0800e341 	.word	0x0800e341
 800e380:	0800e341 	.word	0x0800e341
 800e384:	0800e4c5 	.word	0x0800e4c5
 800e388:	0800e3ef 	.word	0x0800e3ef
 800e38c:	0800e47f 	.word	0x0800e47f
 800e390:	0800e341 	.word	0x0800e341
 800e394:	0800e341 	.word	0x0800e341
 800e398:	0800e4e7 	.word	0x0800e4e7
 800e39c:	0800e341 	.word	0x0800e341
 800e3a0:	0800e3ef 	.word	0x0800e3ef
 800e3a4:	0800e341 	.word	0x0800e341
 800e3a8:	0800e341 	.word	0x0800e341
 800e3ac:	0800e487 	.word	0x0800e487
 800e3b0:	6833      	ldr	r3, [r6, #0]
 800e3b2:	1d1a      	adds	r2, r3, #4
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6032      	str	r2, [r6, #0]
 800e3b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e09d      	b.n	800e500 <_printf_i+0x1e8>
 800e3c4:	6833      	ldr	r3, [r6, #0]
 800e3c6:	6820      	ldr	r0, [r4, #0]
 800e3c8:	1d19      	adds	r1, r3, #4
 800e3ca:	6031      	str	r1, [r6, #0]
 800e3cc:	0606      	lsls	r6, r0, #24
 800e3ce:	d501      	bpl.n	800e3d4 <_printf_i+0xbc>
 800e3d0:	681d      	ldr	r5, [r3, #0]
 800e3d2:	e003      	b.n	800e3dc <_printf_i+0xc4>
 800e3d4:	0645      	lsls	r5, r0, #25
 800e3d6:	d5fb      	bpl.n	800e3d0 <_printf_i+0xb8>
 800e3d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3dc:	2d00      	cmp	r5, #0
 800e3de:	da03      	bge.n	800e3e8 <_printf_i+0xd0>
 800e3e0:	232d      	movs	r3, #45	@ 0x2d
 800e3e2:	426d      	negs	r5, r5
 800e3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3e8:	4859      	ldr	r0, [pc, #356]	@ (800e550 <_printf_i+0x238>)
 800e3ea:	230a      	movs	r3, #10
 800e3ec:	e011      	b.n	800e412 <_printf_i+0xfa>
 800e3ee:	6821      	ldr	r1, [r4, #0]
 800e3f0:	6833      	ldr	r3, [r6, #0]
 800e3f2:	0608      	lsls	r0, r1, #24
 800e3f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3f8:	d402      	bmi.n	800e400 <_printf_i+0xe8>
 800e3fa:	0649      	lsls	r1, r1, #25
 800e3fc:	bf48      	it	mi
 800e3fe:	b2ad      	uxthmi	r5, r5
 800e400:	2f6f      	cmp	r7, #111	@ 0x6f
 800e402:	4853      	ldr	r0, [pc, #332]	@ (800e550 <_printf_i+0x238>)
 800e404:	6033      	str	r3, [r6, #0]
 800e406:	bf14      	ite	ne
 800e408:	230a      	movne	r3, #10
 800e40a:	2308      	moveq	r3, #8
 800e40c:	2100      	movs	r1, #0
 800e40e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e412:	6866      	ldr	r6, [r4, #4]
 800e414:	60a6      	str	r6, [r4, #8]
 800e416:	2e00      	cmp	r6, #0
 800e418:	bfa2      	ittt	ge
 800e41a:	6821      	ldrge	r1, [r4, #0]
 800e41c:	f021 0104 	bicge.w	r1, r1, #4
 800e420:	6021      	strge	r1, [r4, #0]
 800e422:	b90d      	cbnz	r5, 800e428 <_printf_i+0x110>
 800e424:	2e00      	cmp	r6, #0
 800e426:	d04b      	beq.n	800e4c0 <_printf_i+0x1a8>
 800e428:	4616      	mov	r6, r2
 800e42a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e42e:	fb03 5711 	mls	r7, r3, r1, r5
 800e432:	5dc7      	ldrb	r7, [r0, r7]
 800e434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e438:	462f      	mov	r7, r5
 800e43a:	42bb      	cmp	r3, r7
 800e43c:	460d      	mov	r5, r1
 800e43e:	d9f4      	bls.n	800e42a <_printf_i+0x112>
 800e440:	2b08      	cmp	r3, #8
 800e442:	d10b      	bne.n	800e45c <_printf_i+0x144>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	07df      	lsls	r7, r3, #31
 800e448:	d508      	bpl.n	800e45c <_printf_i+0x144>
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	6861      	ldr	r1, [r4, #4]
 800e44e:	4299      	cmp	r1, r3
 800e450:	bfde      	ittt	le
 800e452:	2330      	movle	r3, #48	@ 0x30
 800e454:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e458:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e45c:	1b92      	subs	r2, r2, r6
 800e45e:	6122      	str	r2, [r4, #16]
 800e460:	f8cd a000 	str.w	sl, [sp]
 800e464:	464b      	mov	r3, r9
 800e466:	aa03      	add	r2, sp, #12
 800e468:	4621      	mov	r1, r4
 800e46a:	4640      	mov	r0, r8
 800e46c:	f7ff fee6 	bl	800e23c <_printf_common>
 800e470:	3001      	adds	r0, #1
 800e472:	d14a      	bne.n	800e50a <_printf_i+0x1f2>
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	b004      	add	sp, #16
 800e47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	f043 0320 	orr.w	r3, r3, #32
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	4833      	ldr	r0, [pc, #204]	@ (800e554 <_printf_i+0x23c>)
 800e488:	2778      	movs	r7, #120	@ 0x78
 800e48a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	6831      	ldr	r1, [r6, #0]
 800e492:	061f      	lsls	r7, r3, #24
 800e494:	f851 5b04 	ldr.w	r5, [r1], #4
 800e498:	d402      	bmi.n	800e4a0 <_printf_i+0x188>
 800e49a:	065f      	lsls	r7, r3, #25
 800e49c:	bf48      	it	mi
 800e49e:	b2ad      	uxthmi	r5, r5
 800e4a0:	6031      	str	r1, [r6, #0]
 800e4a2:	07d9      	lsls	r1, r3, #31
 800e4a4:	bf44      	itt	mi
 800e4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e4aa:	6023      	strmi	r3, [r4, #0]
 800e4ac:	b11d      	cbz	r5, 800e4b6 <_printf_i+0x19e>
 800e4ae:	2310      	movs	r3, #16
 800e4b0:	e7ac      	b.n	800e40c <_printf_i+0xf4>
 800e4b2:	4827      	ldr	r0, [pc, #156]	@ (800e550 <_printf_i+0x238>)
 800e4b4:	e7e9      	b.n	800e48a <_printf_i+0x172>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	f023 0320 	bic.w	r3, r3, #32
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	e7f6      	b.n	800e4ae <_printf_i+0x196>
 800e4c0:	4616      	mov	r6, r2
 800e4c2:	e7bd      	b.n	800e440 <_printf_i+0x128>
 800e4c4:	6833      	ldr	r3, [r6, #0]
 800e4c6:	6825      	ldr	r5, [r4, #0]
 800e4c8:	6961      	ldr	r1, [r4, #20]
 800e4ca:	1d18      	adds	r0, r3, #4
 800e4cc:	6030      	str	r0, [r6, #0]
 800e4ce:	062e      	lsls	r6, r5, #24
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	d501      	bpl.n	800e4d8 <_printf_i+0x1c0>
 800e4d4:	6019      	str	r1, [r3, #0]
 800e4d6:	e002      	b.n	800e4de <_printf_i+0x1c6>
 800e4d8:	0668      	lsls	r0, r5, #25
 800e4da:	d5fb      	bpl.n	800e4d4 <_printf_i+0x1bc>
 800e4dc:	8019      	strh	r1, [r3, #0]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	6123      	str	r3, [r4, #16]
 800e4e2:	4616      	mov	r6, r2
 800e4e4:	e7bc      	b.n	800e460 <_printf_i+0x148>
 800e4e6:	6833      	ldr	r3, [r6, #0]
 800e4e8:	1d1a      	adds	r2, r3, #4
 800e4ea:	6032      	str	r2, [r6, #0]
 800e4ec:	681e      	ldr	r6, [r3, #0]
 800e4ee:	6862      	ldr	r2, [r4, #4]
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7f1 fefc 	bl	80002f0 <memchr>
 800e4f8:	b108      	cbz	r0, 800e4fe <_printf_i+0x1e6>
 800e4fa:	1b80      	subs	r0, r0, r6
 800e4fc:	6060      	str	r0, [r4, #4]
 800e4fe:	6863      	ldr	r3, [r4, #4]
 800e500:	6123      	str	r3, [r4, #16]
 800e502:	2300      	movs	r3, #0
 800e504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e508:	e7aa      	b.n	800e460 <_printf_i+0x148>
 800e50a:	6923      	ldr	r3, [r4, #16]
 800e50c:	4632      	mov	r2, r6
 800e50e:	4649      	mov	r1, r9
 800e510:	4640      	mov	r0, r8
 800e512:	47d0      	blx	sl
 800e514:	3001      	adds	r0, #1
 800e516:	d0ad      	beq.n	800e474 <_printf_i+0x15c>
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	079b      	lsls	r3, r3, #30
 800e51c:	d413      	bmi.n	800e546 <_printf_i+0x22e>
 800e51e:	68e0      	ldr	r0, [r4, #12]
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	4298      	cmp	r0, r3
 800e524:	bfb8      	it	lt
 800e526:	4618      	movlt	r0, r3
 800e528:	e7a6      	b.n	800e478 <_printf_i+0x160>
 800e52a:	2301      	movs	r3, #1
 800e52c:	4632      	mov	r2, r6
 800e52e:	4649      	mov	r1, r9
 800e530:	4640      	mov	r0, r8
 800e532:	47d0      	blx	sl
 800e534:	3001      	adds	r0, #1
 800e536:	d09d      	beq.n	800e474 <_printf_i+0x15c>
 800e538:	3501      	adds	r5, #1
 800e53a:	68e3      	ldr	r3, [r4, #12]
 800e53c:	9903      	ldr	r1, [sp, #12]
 800e53e:	1a5b      	subs	r3, r3, r1
 800e540:	42ab      	cmp	r3, r5
 800e542:	dcf2      	bgt.n	800e52a <_printf_i+0x212>
 800e544:	e7eb      	b.n	800e51e <_printf_i+0x206>
 800e546:	2500      	movs	r5, #0
 800e548:	f104 0619 	add.w	r6, r4, #25
 800e54c:	e7f5      	b.n	800e53a <_printf_i+0x222>
 800e54e:	bf00      	nop
 800e550:	0800ebe1 	.word	0x0800ebe1
 800e554:	0800ebf2 	.word	0x0800ebf2

0800e558 <memmove>:
 800e558:	4288      	cmp	r0, r1
 800e55a:	b510      	push	{r4, lr}
 800e55c:	eb01 0402 	add.w	r4, r1, r2
 800e560:	d902      	bls.n	800e568 <memmove+0x10>
 800e562:	4284      	cmp	r4, r0
 800e564:	4623      	mov	r3, r4
 800e566:	d807      	bhi.n	800e578 <memmove+0x20>
 800e568:	1e43      	subs	r3, r0, #1
 800e56a:	42a1      	cmp	r1, r4
 800e56c:	d008      	beq.n	800e580 <memmove+0x28>
 800e56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e572:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e576:	e7f8      	b.n	800e56a <memmove+0x12>
 800e578:	4402      	add	r2, r0
 800e57a:	4601      	mov	r1, r0
 800e57c:	428a      	cmp	r2, r1
 800e57e:	d100      	bne.n	800e582 <memmove+0x2a>
 800e580:	bd10      	pop	{r4, pc}
 800e582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e58a:	e7f7      	b.n	800e57c <memmove+0x24>

0800e58c <_realloc_r>:
 800e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e590:	4680      	mov	r8, r0
 800e592:	4615      	mov	r5, r2
 800e594:	460c      	mov	r4, r1
 800e596:	b921      	cbnz	r1, 800e5a2 <_realloc_r+0x16>
 800e598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e59c:	4611      	mov	r1, r2
 800e59e:	f7ff bb79 	b.w	800dc94 <_malloc_r>
 800e5a2:	b92a      	cbnz	r2, 800e5b0 <_realloc_r+0x24>
 800e5a4:	f7ff fca8 	bl	800def8 <_free_r>
 800e5a8:	2400      	movs	r4, #0
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b0:	f000 f81a 	bl	800e5e8 <_malloc_usable_size_r>
 800e5b4:	4285      	cmp	r5, r0
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	d802      	bhi.n	800e5c0 <_realloc_r+0x34>
 800e5ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e5be:	d8f4      	bhi.n	800e5aa <_realloc_r+0x1e>
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	4640      	mov	r0, r8
 800e5c4:	f7ff fb66 	bl	800dc94 <_malloc_r>
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d0ec      	beq.n	800e5a8 <_realloc_r+0x1c>
 800e5ce:	42b5      	cmp	r5, r6
 800e5d0:	462a      	mov	r2, r5
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	bf28      	it	cs
 800e5d6:	4632      	movcs	r2, r6
 800e5d8:	f7ff fc80 	bl	800dedc <memcpy>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4640      	mov	r0, r8
 800e5e0:	f7ff fc8a 	bl	800def8 <_free_r>
 800e5e4:	463c      	mov	r4, r7
 800e5e6:	e7e0      	b.n	800e5aa <_realloc_r+0x1e>

0800e5e8 <_malloc_usable_size_r>:
 800e5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ec:	1f18      	subs	r0, r3, #4
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	bfbc      	itt	lt
 800e5f2:	580b      	ldrlt	r3, [r1, r0]
 800e5f4:	18c0      	addlt	r0, r0, r3
 800e5f6:	4770      	bx	lr

0800e5f8 <_init>:
 800e5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fa:	bf00      	nop
 800e5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fe:	bc08      	pop	{r3}
 800e600:	469e      	mov	lr, r3
 800e602:	4770      	bx	lr

0800e604 <_fini>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	bf00      	nop
 800e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60a:	bc08      	pop	{r3}
 800e60c:	469e      	mov	lr, r3
 800e60e:	4770      	bx	lr
