
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5b0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800f850  0800f850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe44  0800fe44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe4c  0800fe4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fe50  0800fe50  00010e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800fe54  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  2400007c  0800fed0  0001107c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006fc  0800fed0  000116fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b201  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d3d  00000000  00000000  0002c2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  0002ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ef  00000000  00000000  00031858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b72a  00000000  00000000  00032b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022b33  00000000  00000000  0006e271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167127  00000000  00000000  00090da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f7ecb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d7c  00000000  00000000  001f7f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001fec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f838 	.word	0x0800f838

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800f838 	.word	0x0800f838

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f87f 	bl	80004f8 <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f005 fb7e 	bl	8005b38 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f009 fb40 	bl	8009acc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f009 fb39 	bl	8009acc <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f005 fb6a 	bl	8005b38 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	24000118 	.word	0x24000118

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <RA8875_read_data+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <RA8875_read_data+0x6c>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01a      	b.n	80004e0 <RA8875_read_data+0x60>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2110      	movs	r1, #16
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <RA8875_read_data+0x70>)
 80004b4:	f005 fb40 	bl	8005b38 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80004b8:	1db9      	adds	r1, r7, #6
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RA8875_read_data+0x74>)
 80004c2:	f009 fb03 	bl	8009acc <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <RA8875_read_data+0x74>)
 80004d0:	f009 fcea 	bl	8009ea8 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <RA8875_read_data+0x70>)
 80004da:	f005 fb2d 	bl	8005b38 <HAL_GPIO_WritePin>
  return data;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240000a0 	.word	0x240000a0
 80004ec:	240000a4 	.word	0x240000a4
 80004f0:	58020000 	.word	0x58020000
 80004f4:	24000118 	.word	0x24000118

080004f8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <RA8875_write_command+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <RA8875_write_command+0x6c>)
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4013      	ands	r3, r2
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff52 	bl	80003bc <RA8875_BUS_FREE>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <RA8875_write_command+0x70>)
 8000528:	f005 fb06 	bl	8005b38 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800052c:	f107 010f 	add.w	r1, r7, #15
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <RA8875_write_command+0x74>)
 8000538:	f009 fac8 	bl	8009acc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <RA8875_write_command+0x74>)
 8000546:	f009 fac1 	bl	8009acc <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <RA8875_write_command+0x70>)
 8000550:	f005 faf2 	bl	8005b38 <HAL_GPIO_WritePin>
 8000554:	e000      	b.n	8000558 <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000556:	bf00      	nop
}
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	240000a0 	.word	0x240000a0
 8000564:	240000a4 	.word	0x240000a4
 8000568:	58020000 	.word	0x58020000
 800056c:	24000118 	.word	0x24000118

08000570 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	f7ff ffbe 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800057c:	f7ff ff80 	bl	8000480 <RA8875_read_data>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff3a 	bl	8000408 <RA8875_write_data>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff1a 	bl	80003e8 <RA8875_read_reg>
 80005b4:	4603      	mov	r3, r0
 80005b6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f3      	bne.n	80005ac <RA8875_wait_poll+0x10>
 80005c4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RA8875_apply_rotation_x+0x34>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <RA8875_apply_rotation_x+0x38>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	80fb      	strh	r3, [r7, #6]
      break;
 80005f2:	bf00      	nop
  }

  return x;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2400009d 	.word	0x2400009d
 8000608:	24000098 	.word	0x24000098

0800060c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <RA8875_apply_rotation_y+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d108      	bne.n	8000630 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <RA8875_apply_rotation_y+0x44>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	80fb      	strh	r3, [r7, #6]
      break;
 800062e:	bf00      	nop
  }

  return y + _voffset;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <RA8875_apply_rotation_y+0x48>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4413      	add	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	b21b      	sxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2400009d 	.word	0x2400009d
 8000650:	2400009a 	.word	0x2400009a
 8000654:	2400009e 	.word	0x2400009e

08000658 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffa8 	bl	80005d0 <RA8875_apply_rotation_x>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffbf 	bl	800060c <RA8875_apply_rotation_y>
 800068e:	4603      	mov	r3, r0
 8000690:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9a 	bl	80005d0 <RA8875_apply_rotation_x>
 800069c:	4603      	mov	r3, r0
 800069e:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb1 	bl	800060c <RA8875_apply_rotation_y>
 80006aa:	4603      	mov	r3, r0
 80006ac:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006ae:	2091      	movs	r0, #145	@ 0x91
 80006b0:	f7ff ff22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006be:	2092      	movs	r0, #146	@ 0x92
 80006c0:	f7ff ff1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe9a 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d4:	2093      	movs	r0, #147	@ 0x93
 80006d6:	f7ff ff0f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe92 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e4:	2094      	movs	r0, #148	@ 0x94
 80006e6:	f7ff ff07 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe87 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fa:	2095      	movs	r0, #149	@ 0x95
 80006fc:	f7ff fefc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe7f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	f7ff fef4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b21b      	sxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe74 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000720:	2097      	movs	r0, #151	@ 0x97
 8000722:	f7ff fee9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000730:	2098      	movs	r0, #152	@ 0x98
 8000732:	f7ff fee1 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe61 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000746:	2063      	movs	r0, #99	@ 0x63
 8000748:	f7ff fed6 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800074c:	8b3b      	ldrh	r3, [r7, #24]
 800074e:	0adb      	lsrs	r3, r3, #11
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe57 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f7ff fecc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000760:	8b3b      	ldrh	r3, [r7, #24]
 8000762:	115b      	asrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000772:	2065      	movs	r0, #101	@ 0x65
 8000774:	f7ff fec0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000778:	8b3b      	ldrh	r3, [r7, #24]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe40 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000788:	2090      	movs	r0, #144	@ 0x90
 800078a:	f7ff feb5 	bl	80004f8 <RA8875_write_command>
  if (filled)
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000794:	20b0      	movs	r0, #176	@ 0xb0
 8000796:	f7ff fe37 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079a:	e002      	b.n	80007a2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 800079c:	2090      	movs	r0, #144	@ 0x90
 800079e:	f7ff fe33 	bl	8000408 <RA8875_write_data>
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	4608      	mov	r0, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	461a      	mov	r2, r3
 80007b8:	4623      	mov	r3, r4
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4603      	mov	r3, r0
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feff 	bl	80005d0 <RA8875_apply_rotation_x>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff16 	bl	800060c <RA8875_apply_rotation_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef1 	bl	80005d0 <RA8875_apply_rotation_x>
 80007ee:	4603      	mov	r3, r0
 80007f0:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff08 	bl	800060c <RA8875_apply_rotation_y>
 80007fc:	4603      	mov	r3, r0
 80007fe:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee3 	bl	80005d0 <RA8875_apply_rotation_x>
 800080a:	4603      	mov	r3, r0
 800080c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800080e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fefa 	bl	800060c <RA8875_apply_rotation_y>
 8000818:	4603      	mov	r3, r0
 800081a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800081c:	2091      	movs	r0, #145	@ 0x91
 800081e:	f7ff fe6b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fdee 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 800082c:	2092      	movs	r0, #146	@ 0x92
 800082e:	f7ff fe63 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b21b      	sxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fde3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000842:	2093      	movs	r0, #147	@ 0x93
 8000844:	f7ff fe58 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fddb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000852:	2094      	movs	r0, #148	@ 0x94
 8000854:	f7ff fe50 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fdd0 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000868:	2095      	movs	r0, #149	@ 0x95
 800086a:	f7ff fe45 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1);
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdc8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000878:	2096      	movs	r0, #150	@ 0x96
 800087a:	f7ff fe3d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdbd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 800088e:	2097      	movs	r0, #151	@ 0x97
 8000890:	f7ff fe32 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000894:	883b      	ldrh	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdb5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 800089e:	2098      	movs	r0, #152	@ 0x98
 80008a0:	f7ff fe2a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdaa 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b4:	20a9      	movs	r0, #169	@ 0xa9
 80008b6:	f7ff fe1f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2);
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fda2 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c4:	20aa      	movs	r0, #170	@ 0xaa
 80008c6:	f7ff fe17 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008ce:	121b      	asrs	r3, r3, #8
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd97 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008da:	20ab      	movs	r0, #171	@ 0xab
 80008dc:	f7ff fe0c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2);
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd8f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ea:	20ac      	movs	r0, #172	@ 0xac
 80008ec:	f7ff fe04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fd84 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000900:	2063      	movs	r0, #99	@ 0x63
 8000902:	f7ff fdf9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0adb      	lsrs	r3, r3, #11
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd7a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f7ff fdef 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091a:	8c3b      	ldrh	r3, [r7, #32]
 800091c:	115b      	asrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 800092c:	2065      	movs	r0, #101	@ 0x65
 800092e:	f7ff fde3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000932:	8c3b      	ldrh	r3, [r7, #32]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd63 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000942:	2090      	movs	r0, #144	@ 0x90
 8000944:	f7ff fdd8 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000950:	20a1      	movs	r0, #161	@ 0xa1
 8000952:	f7ff fd59 	bl	8000408 <RA8875_write_data>
 8000956:	e002      	b.n	800095e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000958:	2081      	movs	r0, #129	@ 0x81
 800095a:	f7ff fd55 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	2090      	movs	r0, #144	@ 0x90
 8000962:	f7ff fe1b 	bl	800059c <RA8875_wait_poll>
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1d 	bl	80005d0 <RA8875_apply_rotation_x>
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe34 	bl	800060c <RA8875_apply_rotation_y>
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009a8:	20a5      	movs	r0, #165	@ 0xa5
 80009aa:	f7ff fda5 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd28 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009b8:	20a6      	movs	r0, #166	@ 0xa6
 80009ba:	f7ff fd9d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd1d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009ce:	20a7      	movs	r0, #167	@ 0xa7
 80009d0:	f7ff fd92 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd15 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009de:	20a8      	movs	r0, #168	@ 0xa8
 80009e0:	f7ff fd8a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd0a 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f4:	20a1      	movs	r0, #161	@ 0xa1
 80009f6:	f7ff fd7f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd02 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a04:	20a2      	movs	r0, #162	@ 0xa2
 8000a06:	f7ff fd77 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcf7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1a:	20a3      	movs	r0, #163	@ 0xa3
 8000a1c:	f7ff fd6c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fcef 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2a:	20a4      	movs	r0, #164	@ 0xa4
 8000a2c:	f7ff fd64 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce4 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a40:	2063      	movs	r0, #99	@ 0x63
 8000a42:	f7ff fd59 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcda 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a54:	2064      	movs	r0, #100	@ 0x64
 8000a56:	f7ff fd4f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	115b      	asrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcce 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a6c:	2065      	movs	r0, #101	@ 0x65
 8000a6e:	f7ff fd43 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcc3 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a82:	20a0      	movs	r0, #160	@ 0xa0
 8000a84:	f7ff fd38 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000a88:	7f3b      	ldrb	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a8e:	20c0      	movs	r0, #192	@ 0xc0
 8000a90:	f7ff fcba 	bl	8000408 <RA8875_write_data>
 8000a94:	e002      	b.n	8000a9c <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a96:	2080      	movs	r0, #128	@ 0x80
 8000a98:	f7ff fcb6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
 8000aa0:	f7ff fd7c 	bl	800059c <RA8875_wait_poll>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7e 	bl	80005d0 <RA8875_apply_rotation_x>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd95 	bl	800060c <RA8875_apply_rotation_y>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd70 	bl	80005d0 <RA8875_apply_rotation_x>
 8000af0:	4603      	mov	r3, r0
 8000af2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd87 	bl	800060c <RA8875_apply_rotation_y>
 8000afe:	4603      	mov	r3, r0
 8000b00:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dd05      	ble.n	8000b1a <roundRectHelper+0x6e>
 8000b0e:	1cba      	adds	r2, r7, #2
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc3b 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd05      	ble.n	8000b32 <roundRectHelper+0x86>
 8000b26:	463a      	mov	r2, r7
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc2f 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b32:	2091      	movs	r0, #145	@ 0x91
 8000b34:	f7ff fce0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b44:	2092      	movs	r0, #146	@ 0x92
 8000b46:	f7ff fcd7 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	121b      	asrs	r3, r3, #8
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc57 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5a:	2093      	movs	r0, #147	@ 0x93
 8000b5c:	f7ff fccc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 8000b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc4e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b6c:	2094      	movs	r0, #148	@ 0x94
 8000b6e:	f7ff fcc3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc43 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b82:	2095      	movs	r0, #149	@ 0x95
 8000b84:	f7ff fcb8 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc3a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b94:	2096      	movs	r0, #150	@ 0x96
 8000b96:	f7ff fcaf 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc2f 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000baa:	2097      	movs	r0, #151	@ 0x97
 8000bac:	f7ff fca4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bbc:	2098      	movs	r0, #152	@ 0x98
 8000bbe:	f7ff fc9b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc1b 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd2:	20a1      	movs	r0, #161	@ 0xa1
 8000bd4:	f7ff fc90 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bd8:	8b3b      	ldrh	r3, [r7, #24]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be2:	20a2      	movs	r0, #162	@ 0xa2
 8000be4:	f7ff fc88 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bec:	121b      	asrs	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc08 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bf8:	20a3      	movs	r0, #163	@ 0xa3
 8000bfa:	f7ff fc7d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c08:	20a4      	movs	r0, #164	@ 0xa4
 8000c0a:	f7ff fc75 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c12:	121b      	asrs	r3, r3, #8
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf5 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1e:	2063      	movs	r0, #99	@ 0x63
 8000c20:	f7ff fc6a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	0adb      	lsrs	r3, r3, #11
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbeb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff fc60 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c38:	8bbb      	ldrh	r3, [r7, #28]
 8000c3a:	115b      	asrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbdf 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4a:	2065      	movs	r0, #101	@ 0x65
 8000c4c:	f7ff fc54 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd4 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c60:	20a0      	movs	r0, #160	@ 0xa0
 8000c62:	f7ff fc49 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c6e:	20e0      	movs	r0, #224	@ 0xe0
 8000c70:	f7ff fbca 	bl	8000408 <RA8875_write_data>
 8000c74:	e002      	b.n	8000c7c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c76:	20a0      	movs	r0, #160	@ 0xa0
 8000c78:	f7ff fbc6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff fc8c 	bl	800059c <RA8875_wait_poll>
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21c      	sxth	r4, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f7ff fcbd 	bl	8000658 <rectHelper>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <RA8875_fill_screen+0x38>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <RA8875_fill_screen+0x3c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fca0 	bl	8000658 <rectHelper>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000098 	.word	0x24000098
 8000d24:	2400009a 	.word	0x2400009a

08000d28 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fd1d 	bl	80007aa <triangleHelper>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fddd 	bl	800096e <ellipseHelper>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fe50 	bl	8000aac <roundRectHelper>
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1a:	2040      	movs	r0, #64	@ 0x40
 8000e1c:	f7ff fb6c 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e20:	f7ff fb2e 	bl	8000480 <RA8875_read_data>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fae8 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f7ff fb5d 	bl	80004f8 <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e3e:	f7ff fb1f 	bl	8000480 <RA8875_read_data>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e4c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad9 	bl	8000408 <RA8875_write_data>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbac 	bl	80005d0 <RA8875_apply_rotation_x>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbc3 	bl	800060c <RA8875_apply_rotation_y>
 8000e86:	4603      	mov	r3, r0
 8000e88:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8a:	202a      	movs	r0, #42	@ 0x2a
 8000e8c:	f7ff fb34 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fab7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fb2c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faad 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eae:	202c      	movs	r0, #44	@ 0x2c
 8000eb0:	f7ff fb22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ebe:	202d      	movs	r0, #45	@ 0x2d
 8000ec0:	f7ff fb1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa9b 	bl	8000408 <RA8875_write_data>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eea:	2063      	movs	r0, #99	@ 0x63
 8000eec:	f7ff fb04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0adb      	lsrs	r3, r3, #11
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa85 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f7ff fafa 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	115b      	asrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa79 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f16:	2065      	movs	r0, #101	@ 0x65
 8000f18:	f7ff faee 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6e 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f2c:	2060      	movs	r0, #96	@ 0x60
 8000f2e:	f7ff fae3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0adb      	lsrs	r3, r3, #11
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa64 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f40:	2061      	movs	r0, #97	@ 0x61
 8000f42:	f7ff fad9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	115b      	asrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa58 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f58:	2062      	movs	r0, #98	@ 0x62
 8000f5a:	f7ff facd 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa4d 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f6e:	2022      	movs	r0, #34	@ 0x22
 8000f70:	f7ff fac2 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f74:	f7ff fa84 	bl	8000480 <RA8875_read_data>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f82:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa3e 	bl	8000408 <RA8875_write_data>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d901      	bls.n	8000fa8 <RA8875_text_scale+0x14>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff faa5 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fae:	f7ff fa67 	bl	8000480 <RA8875_read_data>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 030f 	bic.w	r3, r3, #15
 8000fbc:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa1a 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <RA8875_text_scale+0x50>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7013      	strb	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400009c 	.word	0x2400009c

08000fe8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <RA8875_text_write+0x1c>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f970 	bl	80002e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa77 	bl	80004f8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e010      	b.n	8001032 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9f5 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <RA8875_text_write+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <RA8875_text_write+0x44>
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fb8e 	bl	8003748 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	3301      	adds	r3, #1
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ea      	bcc.n	8001010 <RA8875_text_write+0x28>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400009c 	.word	0x2400009c

08001048 <get_rand_num>:

typedef struct{
    float dims[200];
} Dict_Vector;

int get_rand_num(void){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	while(1){
		if(RNG->SR & RNG_SR_DRDY ){
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <get_rand_num+0x20>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f9      	beq.n	800104c <get_rand_num+0x4>
			return RNG->DR;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <get_rand_num+0x20>)
 800105a:	689b      	ldr	r3, [r3, #8]
		}
	}
	return 0;

}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	48021800 	.word	0x48021800

0800106c <pick_index>:

unsigned short pick_index(float * arr, unsigned short len, unsigned short highest){
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	803b      	strh	r3, [r7, #0]
    //Find the index of the highest/lowest float in an array
    float val = arr[0];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
    unsigned short ret_idx = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 8001086:	2301      	movs	r3, #1
 8001088:	813b      	strh	r3, [r7, #8]
 800108a:	e030      	b.n	80010ee <pick_index+0x82>
        if(highest){
 800108c:	883b      	ldrh	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <pick_index+0x52>
            if(arr[idx] > val){
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d51d      	bpl.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	817b      	strh	r3, [r7, #10]
 80010bc:	e014      	b.n	80010e8 <pick_index+0x7c>
            }
        }
        else{
            if(arr[idx] < val){
 80010be:	893b      	ldrh	r3, [r7, #8]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd07      	ble.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010e4:	893b      	ldrh	r3, [r7, #8]
 80010e6:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	813b      	strh	r3, [r7, #8]
 80010ee:	893a      	ldrh	r2, [r7, #8]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ca      	bcc.n	800108c <pick_index+0x20>
            }
        }
        //printf("Idx: %d Score: %f, Highest:%f\n", idx, arr[idx], val);
    }
    return ret_idx;
 80010f6:	897b      	ldrh	r3, [r7, #10]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <is_subset>:

unsigned short is_subset(char * w1, char * w2){
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	//LUXURY MODIFICATION: MAKE SURE 5 OF SAME LETTER IN A ROW -> INVALID CLUE
    //Compute if W1 is a subset of W2 
    //Or the reverse is true
    unsigned short l1 = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	82fb      	strh	r3, [r7, #22]
    unsigned short l2 = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	82bb      	strh	r3, [r7, #20]
    while(w1[l1++] != '\0');
 8001116:	bf00      	nop
 8001118:	8afb      	ldrh	r3, [r7, #22]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	82fa      	strh	r2, [r7, #22]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f6      	bne.n	8001118 <is_subset+0x14>
    while(w2[l2++] != '\0');
 800112a:	bf00      	nop
 800112c:	8abb      	ldrh	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	82ba      	strh	r2, [r7, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f6      	bne.n	800112c <is_subset+0x28>
    l1 -= 1;
 800113e:	8afb      	ldrh	r3, [r7, #22]
 8001140:	3b01      	subs	r3, #1
 8001142:	82fb      	strh	r3, [r7, #22]
    l2 -= 1;
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	3b01      	subs	r3, #1
 8001148:	82bb      	strh	r3, [r7, #20]
    unsigned short dist = (l1 > l2)?l1-l2:l2-l1;
 800114a:	8afa      	ldrh	r2, [r7, #22]
 800114c:	8abb      	ldrh	r3, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d904      	bls.n	800115c <is_subset+0x58>
 8001152:	8afa      	ldrh	r2, [r7, #22]
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	e003      	b.n	8001164 <is_subset+0x60>
 800115c:	8aba      	ldrh	r2, [r7, #20]
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 8001166:	2300      	movs	r3, #0
 8001168:	827b      	strh	r3, [r7, #18]
 800116a:	e042      	b.n	80011f2 <is_subset+0xee>
        unsigned short same = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	823b      	strh	r3, [r7, #16]
        if(l1>l2){
 8001170:	8afa      	ldrh	r2, [r7, #22]
 8001172:	8abb      	ldrh	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	d91a      	bls.n	80011ae <is_subset+0xaa>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 8001178:	2300      	movs	r3, #0
 800117a:	81fb      	strh	r3, [r7, #14]
 800117c:	e012      	b.n	80011a4 <is_subset+0xa0>
                if(w2[jdx] != w1[jdx + idx]){
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	89f9      	ldrh	r1, [r7, #14]
 8001188:	8a7b      	ldrh	r3, [r7, #18]
 800118a:	440b      	add	r3, r1
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d002      	beq.n	800119e <is_subset+0x9a>
                    same = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	823b      	strh	r3, [r7, #16]
                    break;
 800119c:	e021      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	3301      	adds	r3, #1
 80011a2:	81fb      	strh	r3, [r7, #14]
 80011a4:	89fa      	ldrh	r2, [r7, #14]
 80011a6:	8abb      	ldrh	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3e8      	bcc.n	800117e <is_subset+0x7a>
 80011ac:	e019      	b.n	80011e2 <is_subset+0xde>
                }
            }
        }
        else{
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011ae:	2300      	movs	r3, #0
 80011b0:	81bb      	strh	r3, [r7, #12]
 80011b2:	e012      	b.n	80011da <is_subset+0xd6>
                //printf("%c%c ", w1[jdx], w2[jdx]);
                if(w1[jdx] != w2[jdx + idx]){
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	89b9      	ldrh	r1, [r7, #12]
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	440b      	add	r3, r1
 80011c2:	4619      	mov	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d002      	beq.n	80011d4 <is_subset+0xd0>
                    same = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	823b      	strh	r3, [r7, #16]
                    break;
 80011d2:	e006      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011d4:	89bb      	ldrh	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	81bb      	strh	r3, [r7, #12]
 80011da:	89ba      	ldrh	r2, [r7, #12]
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3e8      	bcc.n	80011b4 <is_subset+0xb0>
                }
            }
        }
        if(same){
 80011e2:	8a3b      	ldrh	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <is_subset+0xe8>
            return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e007      	b.n	80011fc <is_subset+0xf8>
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 80011ec:	8a7b      	ldrh	r3, [r7, #18]
 80011ee:	3301      	adds	r3, #1
 80011f0:	827b      	strh	r3, [r7, #18]
 80011f2:	8a7a      	ldrh	r2, [r7, #18]
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d9b8      	bls.n	800116c <is_subset+0x68>
        }
    }
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <shuffle>:

void shuffle(unsigned short * board_idx){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
 8001214:	e030      	b.n	8001278 <shuffle+0x70>
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
 800121a:	e027      	b.n	800126c <shuffle+0x64>
        	//USE TRUE_RNG HERE
            unsigned short rnd = (unsigned short)(get_rand_num() % 250);
 800121c:	f7ff ff14 	bl	8001048 <get_rand_num>
 8001220:	4603      	mov	r3, r0
 8001222:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <shuffle+0x80>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1111      	asrs	r1, r2, #4
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	21fa      	movs	r1, #250	@ 0xfa
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	1a9a      	subs	r2, r3, r2
 8001236:	4613      	mov	r3, r2
 8001238:	817b      	strh	r3, [r7, #10]
            unsigned short tmp = board_idx[rnd];
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	813b      	strh	r3, [r7, #8]
            board_idx[rnd] = board_idx[jdx];
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	441a      	add	r2, r3
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	440b      	add	r3, r1
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	801a      	strh	r2, [r3, #0]
            board_idx[jdx] = tmp;
 800125a:	89bb      	ldrh	r3, [r7, #12]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	801a      	strh	r2, [r3, #0]
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	81bb      	strh	r3, [r7, #12]
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001270:	d9d4      	bls.n	800121c <shuffle+0x14>
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d9cb      	bls.n	8001216 <shuffle+0xe>
        }
    }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	10624dd3 	.word	0x10624dd3

0800128c <cosine_similarity>:

float cosine_similarity(float * v1 , float *v2 , unsigned short len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	ed2d 8b04 	vpush	{d8-d9}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	4613      	mov	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
    float dot = 0.0, denom_a = 0.0, denom_b = 0.0 ;
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	827b      	strh	r3, [r7, #18]
 80012b4:	e03e      	b.n	8001334 <cosine_similarity+0xa8>
        dot += v1[idx] * v2[idx] ;
 80012b6:	8a7b      	ldrh	r3, [r7, #18]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	edc7 7a07 	vstr	s15, [r7, #28]
        denom_a += v1[idx] * v1[idx] ;
 80012de:	8a7b      	ldrh	r3, [r7, #18]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	edc7 7a06 	vstr	s15, [r7, #24]
        denom_b += v2[idx] * v2[idx] ;
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	8a7b      	ldrh	r3, [r7, #18]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4413      	add	r3, r2
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ed97 7a05 	vldr	s14, [r7, #20]
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a05 	vstr	s15, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 800132e:	8a7b      	ldrh	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	827b      	strh	r3, [r7, #18]
 8001334:	8a7a      	ldrh	r2, [r7, #18]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3bc      	bcc.n	80012b6 <cosine_similarity+0x2a>
    }
    return dot / (sqrt(denom_a) * sqrt(denom_b)) ;
 800133c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001340:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134c:	eeb0 0b47 	vmov.f64	d0, d7
 8001350:	f00e fa4e 	bl	800f7f0 <sqrt>
 8001354:	eeb0 9b40 	vmov.f64	d9, d0
 8001358:	edd7 7a05 	vldr	s15, [r7, #20]
 800135c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001360:	eeb0 0b47 	vmov.f64	d0, d7
 8001364:	f00e fa44 	bl	800f7f0 <sqrt>
 8001368:	eeb0 7b40 	vmov.f64	d7, d0
 800136c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001370:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001374:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	ecbd 8b04 	vpop	{d8-d9}
 8001384:	bd80      	pop	{r7, pc}

08001386 <glove_similarity>:
        return 0;
    }
    return (is_subset(w1, w2) == 1);
}

float glove_similarity(Glove_Vector glove1, Glove_Vector glove2){
 8001386:	b084      	sub	sp, #16
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
 800138c:	f107 0c08 	add.w	ip, r7, #8
 8001390:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(glove1.dims, glove2.dims, 300);
 8001394:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001398:	f103 011c 	add.w	r1, r3, #28
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff71 	bl	800128c <cosine_similarity>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	46bd      	mov	sp, r7
 80013b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b8:	b004      	add	sp, #16
 80013ba:	4770      	bx	lr

080013bc <dict_similarity>:

float dict_similarity(Dict_Vector dict1, Dict_Vector dict2){  
 80013bc:	b084      	sub	sp, #16
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	f107 0c08 	add.w	ip, r7, #8
 80013c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(dict1.dims, dict2.dims, 200);
 80013ca:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80013ce:	22c8      	movs	r2, #200	@ 0xc8
 80013d0:	4619      	mov	r1, r3
 80013d2:	f107 0008 	add.w	r0, r7, #8
 80013d6:	f7ff ff59 	bl	800128c <cosine_similarity>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr

080013ec <vector_score>:

float vector_score(Glove_Vector glove1, Dict_Vector dict1, Glove_Vector glove2, Dict_Vector dict2){
 80013ec:	b084      	sub	sp, #16
 80013ee:	b580      	push	{r7, lr}
 80013f0:	ed2d 8b02 	vpush	{d8}
 80013f4:	f6ad 1d88 	subw	sp, sp, #2440	@ 0x988
 80013f8:	f640 1788 	movw	r7, #2440	@ 0x988
 80013fc:	446f      	add	r7, sp
 80013fe:	f107 0c10 	add.w	ip, r7, #16
 8001402:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return glove_similarity(glove1, glove2) + dict_similarity(dict1, dict2);
 8001406:	f20d 40bc 	addw	r0, sp, #1212	@ 0x4bc
 800140a:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 800140e:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001412:	4619      	mov	r1, r3
 8001414:	f00d fe5c 	bl	800f0d0 <memcpy>
 8001418:	4668      	mov	r0, sp
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001422:	4619      	mov	r1, r3
 8001424:	f00d fe54 	bl	800f0d0 <memcpy>
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	f7ff ffaa 	bl	8001386 <glove_similarity>
 8001432:	eeb0 8a40 	vmov.f32	s16, s0
 8001436:	a8c4      	add	r0, sp, #784	@ 0x310
 8001438:	f607 43c8 	addw	r3, r7, #3272	@ 0xcc8
 800143c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001440:	4619      	mov	r1, r3
 8001442:	f00d fe45 	bl	800f0d0 <memcpy>
 8001446:	4668      	mov	r0, sp
 8001448:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800144c:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001450:	4619      	mov	r1, r3
 8001452:	f00d fe3d 	bl	800f0d0 <memcpy>
 8001456:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 800145a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145c:	f7ff ffae 	bl	80013bc <dict_similarity>
 8001460:	eef0 7a40 	vmov.f32	s15, s0
 8001464:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	ecbd 8b02 	vpop	{d8}
 8001472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001476:	b004      	add	sp, #16
 8001478:	4770      	bx	lr

0800147a <gen_board>:

void gen_board(unsigned short * board_idx, Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 800147a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8001482:	b082      	sub	sp, #8
 8001484:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 8001488:	446f      	add	r7, sp
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
    //Take all possible board words, randomly select 16 to be board words
    //The first two are the targets
    shuffle(board_idx);
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff feb8 	bl	8001208 <shuffle>
//    printf("C1\n");

	//GATHER ALL BOARD VECTOR MATERIALS
    for(unsigned short gather_idx = 0; gather_idx < 160; gather_idx += 1){
 8001498:	2300      	movs	r3, #0
 800149a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800149c:	e077      	b.n	800158e <gen_board+0x114>
    	char * word = malloc(sizeof(*word) * 25);
 800149e:	2019      	movs	r0, #25
 80014a0:	f00d fcc0 	bl	800ee24 <malloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	617b      	str	r3, [r7, #20]
    	float * vec_floats = read_vec(board_idx[gather_idx], word);
 80014a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f00a fe1f 	bl	800c0f8 <read_vec>
 80014ba:	6138      	str	r0, [r7, #16]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80014bc:	2300      	movs	r3, #0
 80014be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80014c0:	e017      	b.n	80014f2 <gen_board+0x78>
        	board_glove[gather_idx / 16][gather_idx % 16].word[wi] = word[wi];
 80014c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	18d1      	adds	r1, r2, r3
 80014c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 80014e0:	fb00 f303 	mul.w	r3, r0, r3
 80014e4:	441a      	add	r2, r3
 80014e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80014e8:	7809      	ldrb	r1, [r1, #0]
 80014ea:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80014ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80014ee:	3301      	adds	r3, #1
 80014f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80014f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80014f4:	2b18      	cmp	r3, #24
 80014f6:	d9e4      	bls.n	80014c2 <gen_board+0x48>
    	}
    	free(word);
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f00d fc9b 	bl	800ee34 <free>
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 80014fe:	2300      	movs	r3, #0
 8001500:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001502:	e03a      	b.n	800157a <gen_board+0x100>
    		//SAVE WORD TO GLOVE VEC TOO
    		board_glove[gather_idx / 16][gather_idx % 16].dims[move_idx] = vec_floats[1 + move_idx];
 8001504:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001506:	3301      	adds	r3, #1
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	441a      	add	r2, r3
 800150e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	b29b      	uxth	r3, r3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	440b      	add	r3, r1
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 8001526:	fb00 f303 	mul.w	r3, r0, r3
 800152a:	4419      	add	r1, r3
 800152c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	3306      	adds	r3, #6
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3304      	adds	r3, #4
 8001538:	601a      	str	r2, [r3, #0]
    		if(move_idx < 200){
 800153a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800153c:	2bc7      	cmp	r3, #199	@ 0xc7
 800153e:	d819      	bhi.n	8001574 <gen_board+0xfa>
    			board_dict[gather_idx/16][gather_idx%16].dims[move_idx] = vec_floats[301 + move_idx];
 8001540:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001542:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	441a      	add	r2, r3
 800154c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	b29b      	uxth	r3, r3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	440b      	add	r3, r1
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001564:	fb00 f303 	mul.w	r3, r0, r3
 8001568:	4419      	add	r1, r3
 800156a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001574:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001576:	3301      	adds	r3, #1
 8001578:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800157a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800157c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001580:	d3c0      	bcc.n	8001504 <gen_board+0x8a>
    		}
    	}
    	free(vec_floats);
 8001582:	6938      	ldr	r0, [r7, #16]
 8001584:	f00d fc56 	bl	800ee34 <free>
    for(unsigned short gather_idx = 0; gather_idx < 160; gather_idx += 1){
 8001588:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800158a:	3301      	adds	r3, #1
 800158c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800158e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001590:	2b9f      	cmp	r3, #159	@ 0x9f
 8001592:	d984      	bls.n	800149e <gen_board+0x24>
    }

    //Vector Scores for each board comparing to first target
    float ** scores = malloc(sizeof(*scores) * num_rounds);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f00d fc43 	bl	800ee24 <malloc>
 800159e:	4603      	mov	r3, r0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 80015a2:	2300      	movs	r3, #0
 80015a4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80015a6:	e068      	b.n	800167a <gen_board+0x200>
        scores[brd] = malloc(sizeof(**scores) * 15);
 80015a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ae:	18d4      	adds	r4, r2, r3
 80015b0:	203c      	movs	r0, #60	@ 0x3c
 80015b2:	f00d fc37 	bl	800ee24 <malloc>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6023      	str	r3, [r4, #0]
        for(unsigned short idx = 1; idx < 16; idx += 1){
 80015ba:	2301      	movs	r3, #1
 80015bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80015be:	e056      	b.n	800166e <gen_board+0x1f4>
            scores[brd][idx - 1] = vector_score(board_glove[brd][0], board_dict[brd][0], board_glove[brd][idx], board_dict[brd][idx]);
 80015c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	681c      	ldr	r4, [r3, #0]
 80015ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	681e      	ldr	r6, [r3, #0]
 80015d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	4413      	add	r3, r2
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80015e0:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	eb02 0803 	add.w	r8, r2, r3
 80015ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80015f8:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	18d0      	adds	r0, r2, r3
 8001602:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001608:	4413      	add	r3, r2
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800160e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001612:	440b      	add	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18d5      	adds	r5, r2, r3
 8001618:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 800161c:	4601      	mov	r1, r0
 800161e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001622:	4618      	mov	r0, r3
 8001624:	f00d fd54 	bl	800f0d0 <memcpy>
 8001628:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 800162c:	4641      	mov	r1, r8
 800162e:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001632:	4618      	mov	r0, r3
 8001634:	f00d fd4c 	bl	800f0d0 <memcpy>
 8001638:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 800163c:	4631      	mov	r1, r6
 800163e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001642:	4618      	mov	r0, r3
 8001644:	f00d fd44 	bl	800f0d0 <memcpy>
 8001648:	4668      	mov	r0, sp
 800164a:	f104 0310 	add.w	r3, r4, #16
 800164e:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001652:	4619      	mov	r1, r3
 8001654:	f00d fd3c 	bl	800f0d0 <memcpy>
 8001658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800165c:	f7ff fec6 	bl	80013ec <vector_score>
 8001660:	eef0 7a40 	vmov.f32	s15, s0
 8001664:	edc5 7a00 	vstr	s15, [r5]
        for(unsigned short idx = 1; idx < 16; idx += 1){
 8001668:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800166a:	3301      	adds	r3, #1
 800166c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800166e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d9a5      	bls.n	80015c0 <gen_board+0x146>
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 8001674:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001676:	3301      	adds	r3, #1
 8001678:	873b      	strh	r3, [r7, #56]	@ 0x38
 800167a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	dc92      	bgt.n	80015a8 <gen_board+0x12e>
        }
    }
//    printf("C2\n");

    //PICK SECOND TARGET INDEXES
    unsigned short * stargets = malloc(sizeof(*stargets) * num_rounds);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f00d fbcc 	bl	800ee24 <malloc>
 800168c:	4603      	mov	r3, r0
 800168e:	623b      	str	r3, [r7, #32]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001690:	2300      	movs	r3, #0
 8001692:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001694:	e011      	b.n	80016ba <gen_board+0x240>
        stargets[b] = pick_index(scores[b], 15, 1);
 8001696:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	4413      	add	r3, r2
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	18d4      	adds	r4, r2, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	210f      	movs	r1, #15
 80016ac:	f7ff fcde 	bl	800106c <pick_index>
 80016b0:	4603      	mov	r3, r0
 80016b2:	8023      	strh	r3, [r4, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80016b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80016b6:	3301      	adds	r3, #1
 80016b8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80016ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dce9      	bgt.n	8001696 <gen_board+0x21c>
    }

    //COMPILE BOARDS
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80016c2:	2300      	movs	r3, #0
 80016c4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80016c6:	e0c5      	b.n	8001854 <gen_board+0x3da>
        Glove_Vector * board_glove2 = malloc(sizeof(*board_glove) * 16);
 80016c8:	2040      	movs	r0, #64	@ 0x40
 80016ca:	f00d fbab 	bl	800ee24 <malloc>
 80016ce:	4603      	mov	r3, r0
 80016d0:	61fb      	str	r3, [r7, #28]
        Dict_Vector * board_dict2 = malloc(sizeof(*board_dict) * 16);
 80016d2:	2040      	movs	r0, #64	@ 0x40
 80016d4:	f00d fba6 	bl	800ee24 <malloc>
 80016d8:	4603      	mov	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
        board_glove2[0] = board_glove[b][0];
 80016dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 80016f0:	461a      	mov	r2, r3
 80016f2:	f00d fced 	bl	800f0d0 <memcpy>
        board_glove2[1] = board_glove[b][stargets[b] + 1];
 80016f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	6a39      	ldr	r1, [r7, #32]
 8001706:	440b      	add	r3, r1
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	441a      	add	r2, r3
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 800171c:	4618      	mov	r0, r3
 800171e:	4611      	mov	r1, r2
 8001720:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8001724:	461a      	mov	r2, r3
 8001726:	f00d fcd3 	bl	800f0d0 <memcpy>
        board_dict2[0] = board_dict[b][0];
 800172a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800173e:	461a      	mov	r2, r3
 8001740:	f00d fcc6 	bl	800f0d0 <memcpy>
        board_dict2[1] = board_dict[b][stargets[b] + 1];
 8001744:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	6a39      	ldr	r1, [r7, #32]
 8001754:	440b      	add	r3, r1
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	441a      	add	r2, r3
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800176a:	4618      	mov	r0, r3
 800176c:	4611      	mov	r1, r2
 800176e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001772:	461a      	mov	r2, r3
 8001774:	f00d fcac 	bl	800f0d0 <memcpy>
        int append = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for(int idx = 1; idx < 16; idx += 1){
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001780:	e03e      	b.n	8001800 <gen_board+0x386>
            if(stargets[b] + 1 != idx){
 8001782:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	6a3a      	ldr	r2, [r7, #32]
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001790:	429a      	cmp	r2, r3
 8001792:	d032      	beq.n	80017fa <gen_board+0x380>
            	board_glove2[append] = board_glove[b][idx];
 8001794:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	4413      	add	r3, r2
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a0:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	18d1      	adds	r1, r2, r3
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 80017be:	461a      	mov	r2, r3
 80017c0:	f00d fc86 	bl	800f0d0 <memcpy>
            	board_dict2[append++] = board_dict[b][idx];
 80017c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	18d1      	adds	r1, r2, r3
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017e0:	461a      	mov	r2, r3
 80017e2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4413      	add	r3, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80017f4:	461a      	mov	r2, r3
 80017f6:	f00d fc6b 	bl	800f0d0 <memcpy>
        for(int idx = 1; idx < 16; idx += 1){
 80017fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fc:	3301      	adds	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001802:	2b0f      	cmp	r3, #15
 8001804:	ddbd      	ble.n	8001782 <gen_board+0x308>
            }
        }
        free(board_glove[b]);
 8001806:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f00d fb0f 	bl	800ee34 <free>
        free(board_dict[b]);
 8001816:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f00d fb07 	bl	800ee34 <free>
        free(scores[b]);
 8001826:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182c:	4413      	add	r3, r2
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f00d faff 	bl	800ee34 <free>
        board_glove[b] = board_glove2;
 8001836:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	601a      	str	r2, [r3, #0]
        board_dict[b] = board_dict2;
 8001842:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	601a      	str	r2, [r3, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 800184e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001850:	3301      	adds	r3, #1
 8001852:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001854:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	f73f af35 	bgt.w	80016c8 <gen_board+0x24e>
    //     if(same(all_glove[brd_idx[i]].word, board[i]) == 0){
    //         printf("ALARM: %s, %s, brd_idx[i] %d, i %d\n", all_glove[brd_idx[i]].word, board[i], brd_idx[i], i);
    //     }
    //     board_idx[i] = brd_idx[i];
    // }
    free(stargets);
 800185e:	6a38      	ldr	r0, [r7, #32]
 8001860:	f00d fae8 	bl	800ee34 <free>
    free(scores);
 8001864:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001866:	f00d fae5 	bl	800ee34 <free>
    free(board_idx);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f00d fae2 	bl	800ee34 <free>
}
 8001870:	bf00      	nop
 8001872:	3740      	adds	r7, #64	@ 0x40
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800187a <is_valid_clue>:

int is_valid_clue(Glove_Vector clue, Glove_Vector * board){
 800187a:	b084      	sub	sp, #16
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	f107 0c10 	add.w	ip, r7, #16
 8001886:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    //IN FUTURE: CONSIDER ADDING STEMMER
    for(int idx = 0; idx < 16; idx += 1){
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	e014      	b.n	80018ba <is_valid_clue+0x40>
        if(is_subset(board[idx].word, clue.word)){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 800189e:	4413      	add	r3, r2
 80018a0:	f107 0110 	add.w	r1, r7, #16
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc2d 	bl	8001104 <is_subset>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <is_valid_clue+0x3a>
            return 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e006      	b.n	80018c2 <is_valid_clue+0x48>
    for(int idx = 0; idx < 16; idx += 1){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3301      	adds	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	dde7      	ble.n	8001890 <is_valid_clue+0x16>
        }
    }
    return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018cc:	b004      	add	sp, #16
 80018ce:	4770      	bx	lr

080018d0 <get_possibles>:

void get_possibles(Glove_Vector ** board_glove, Dict_Vector ** board_dict, float ** possible_scores, unsigned short ** possible_idx, int num_rounds){
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	f5ad 5dbf 	sub.w	sp, sp, #6112	@ 0x17e0
 80018d6:	b086      	sub	sp, #24
 80018d8:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 80018dc:	446f      	add	r7, sp
 80018de:	f507 6403 	add.w	r4, r7, #2096	@ 0x830
 80018e2:	f6a4 0424 	subw	r4, r4, #2084	@ 0x824
 80018e6:	6020      	str	r0, [r4, #0]
 80018e8:	f507 6003 	add.w	r0, r7, #2096	@ 0x830
 80018ec:	f6a0 0028 	subw	r0, r0, #2088	@ 0x828
 80018f0:	6001      	str	r1, [r0, #0]
 80018f2:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 80018f6:	f6a1 012c 	subw	r1, r1, #2092	@ 0x82c
 80018fa:	600a      	str	r2, [r1, #0]
 80018fc:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001900:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001904:	6013      	str	r3, [r2, #0]
    //In the future, make this a HEAP or something faster
    //Consider shift to ALT
    for(unsigned short idx = 0; idx < 5000; idx += 1){
 8001906:	2300      	movs	r3, #0
 8001908:	f8a7 382e 	strh.w	r3, [r7, #2094]	@ 0x82e
 800190c:	e22e      	b.n	8001d6c <get_possibles+0x49c>
        //IMPORTANT: IN THE FUTURE, this will need to be read directly from SD, and FAST
    	Glove_Vector clue_glove;
        Dict_Vector clue_dict;
    	char * word = malloc(sizeof(*word) * 25);
 800190e:	2019      	movs	r0, #25
 8001910:	f00d fa88 	bl	800ee24 <malloc>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
    	float * vec_floats = read_vec(idx, word);
 800191a:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 800191e:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 8001922:	4618      	mov	r0, r3
 8001924:	f00a fbe8 	bl	800c0f8 <read_vec>
 8001928:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
    	float clue_doc_freq = vec_floats[0];
 800192c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 8001936:	6013      	str	r3, [r2, #0]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 8001938:	2300      	movs	r3, #0
 800193a:	f8a7 382c 	strh.w	r3, [r7, #2092]	@ 0x82c
 800193e:	e011      	b.n	8001964 <get_possibles+0x94>
        	clue_glove.word[wi] = word[wi];
 8001940:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 8001944:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8001948:	441a      	add	r2, r3
 800194a:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 800194e:	7811      	ldrb	r1, [r2, #0]
 8001950:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001954:	f5a2 62a0 	sub.w	r2, r2, #1280	@ 0x500
 8001958:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 800195a:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 800195e:	3301      	adds	r3, #1
 8001960:	f8a7 382c 	strh.w	r3, [r7, #2092]	@ 0x82c
 8001964:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 8001968:	2b18      	cmp	r3, #24
 800196a:	d9e9      	bls.n	8001940 <get_possibles+0x70>
    	}
    	free(word);
 800196c:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 8001970:	f00d fa60 	bl	800ee34 <free>
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001974:	2300      	movs	r3, #0
 8001976:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
 800197a:	e02d      	b.n	80019d8 <get_possibles+0x108>
			//SAVE WORD TO GLOVE VEC TOO
			clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 800197c:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001980:	3301      	adds	r3, #1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8001988:	441a      	add	r2, r3
 800198a:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 8001994:	f5a1 61a0 	sub.w	r1, r1, #1280	@ 0x500
 8001998:	3306      	adds	r3, #6
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3304      	adds	r3, #4
 80019a0:	601a      	str	r2, [r3, #0]
			if(move_idx < 200){
 80019a2:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80019a8:	d811      	bhi.n	80019ce <get_possibles+0xfe>
				clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 80019aa:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019ae:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80019b8:	441a      	add	r2, r3
 80019ba:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 80019c4:	f5a1 6102 	sub.w	r1, r1, #2080	@ 0x820
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 80019ce:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
 80019d8:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80019e0:	d3cc      	bcc.n	800197c <get_possibles+0xac>
			}
		}
		free(vec_floats);
 80019e2:	f8d7 0810 	ldr.w	r0, [r7, #2064]	@ 0x810
 80019e6:	f00d fa25 	bl	800ee34 <free>


        for(int b = 0; b < num_rounds; b += 1){
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 80019f0:	e1b0      	b.n	8001d54 <get_possibles+0x484>
            if(is_valid_clue(clue_glove, board_glove[b]) == 0){
 80019f2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80019fc:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001a0a:	f5a2 64a0 	sub.w	r4, r2, #1280	@ 0x500
 8001a0e:	f8cd 34bc 	str.w	r3, [sp, #1212]	@ 0x4bc
 8001a12:	4668      	mov	r0, sp
 8001a14:	f104 0310 	add.w	r3, r4, #16
 8001a18:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f00d fb57 	bl	800f0d0 <memcpy>
 8001a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a26:	f7ff ff28 	bl	800187a <is_valid_clue>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 818b 	beq.w	8001d48 <get_possibles+0x478>
                continue;
            }
            float score = vector_score(clue_glove, clue_dict, board_glove[b][0], board_dict[b][0]);
 8001a32:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001a3c:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	681d      	ldr	r5, [r3, #0]
 8001a46:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001a50:	f6a2 0228 	subw	r2, r2, #2088	@ 0x828
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001a5e:	f5a3 64a0 	sub.w	r4, r3, #1280	@ 0x500
 8001a62:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001a66:	4611      	mov	r1, r2
 8001a68:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00d fb2f 	bl	800f0d0 <memcpy>
 8001a72:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001a76:	4629      	mov	r1, r5
 8001a78:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00d fb27 	bl	800f0d0 <memcpy>
 8001a82:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001a86:	f5a3 6202 	sub.w	r2, r3, #2080	@ 0x820
 8001a8a:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001a8e:	4611      	mov	r1, r2
 8001a90:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00d fb1b 	bl	800f0d0 <memcpy>
 8001a9a:	4668      	mov	r0, sp
 8001a9c:	f104 0310 	add.w	r3, r4, #16
 8001aa0:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f00d fb13 	bl	800f0d0 <memcpy>
 8001aaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aae:	f7ff fc9d 	bl	80013ec <vector_score>
 8001ab2:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001ab6:	ed83 0a00 	vstr	s0, [r3]
            score += vector_score(clue_glove, clue_dict, board_glove[b][1], board_dict[b][1]);
 8001aba:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001ac4:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f203 45cc 	addw	r5, r3, #1228	@ 0x4cc
 8001ad2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001adc:	f6a2 0228 	subw	r2, r2, #2088	@ 0x828
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 8001aea:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001aee:	f5a3 64a0 	sub.w	r4, r3, #1280	@ 0x500
 8001af2:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001af6:	4611      	mov	r1, r2
 8001af8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00d fae7 	bl	800f0d0 <memcpy>
 8001b02:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001b06:	4629      	mov	r1, r5
 8001b08:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00d fadf 	bl	800f0d0 <memcpy>
 8001b12:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001b16:	f5a3 6202 	sub.w	r2, r3, #2080	@ 0x820
 8001b1a:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001b1e:	4611      	mov	r1, r2
 8001b20:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00d fad3 	bl	800f0d0 <memcpy>
 8001b2a:	4668      	mov	r0, sp
 8001b2c:	f104 0310 	add.w	r3, r4, #16
 8001b30:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001b34:	4619      	mov	r1, r3
 8001b36:	f00d facb 	bl	800f0d0 <memcpy>
 8001b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b3e:	f7ff fc55 	bl	80013ec <vector_score>
 8001b42:	eeb0 7a40 	vmov.f32	s14, s0
 8001b46:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b52:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001b56:	edc3 7a00 	vstr	s15, [r3]
            score -= clue_doc_freq;
 8001b5a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001b72:	edc3 7a00 	vstr	s15, [r3]
            unsigned short insert_idx = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
            for(unsigned short back = (idx<200)?idx-1:199; back >= 0; back -= 1){
 8001b7c:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001b80:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b82:	bf28      	it	cs
 8001b84:	23c8      	movcs	r3, #200	@ 0xc8
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	f8a7 3822 	strh.w	r3, [r7, #2082]	@ 0x822
                //Figure out where to insert based on score
                if(possible_scores[b][back] > score){
 8001b8e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001b98:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d517      	bpl.n	8001bf0 <get_possibles+0x320>
                    insert_idx = back + 1;
 8001bc0:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
//                    if(insert_idx < 200){
//                        //printf("Possible IDX: %d, Insert IDX: %d \n", idx, insert_idx);
//                    }
                    break;
 8001bca:	bf00      	nop
                }
            }
            float score_pass = -9999;
 8001bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <get_possibles+0x4b8>)
 8001bce:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001bd2:	6013      	str	r3, [r2, #0]
            unsigned short idx_pass = 60000;
 8001bd4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001bd8:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
            unsigned short save_idx = 60000;
 8001bdc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001be0:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
            if(insert_idx < 200){
 8001be4:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001be8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bea:	f200 80a8 	bhi.w	8001d3e <get_possibles+0x46e>
 8001bee:	e005      	b.n	8001bfc <get_possibles+0x32c>
            for(unsigned short back = (idx<200)?idx-1:199; back >= 0; back -= 1){
 8001bf0:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	f8a7 3822 	strh.w	r3, [r7, #2082]	@ 0x822
                if(possible_scores[b][back] > score){
 8001bfa:	e7c8      	b.n	8001b8e <get_possibles+0x2be>
                if(possible_idx[b][insert_idx] != -1){
                    score_pass = possible_scores[b][insert_idx];
 8001bfc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c06:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001c1e:	6013      	str	r3, [r2, #0]
                    save_idx = possible_idx[b][insert_idx];
 8001c20:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c2a:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
                    idx_pass = insert_idx + 1;
 8001c42:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c46:	3301      	adds	r3, #1
 8001c48:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
                }
                possible_scores[b][insert_idx] = score;
 8001c4c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c56:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	f607 0208 	addw	r2, r7, #2056	@ 0x808
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	601a      	str	r2, [r3, #0]
                possible_idx[b][insert_idx] = idx;
 8001c70:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c7a:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	@ 0x82e
 8001c90:	801a      	strh	r2, [r3, #0]
            }
            //Pass Everything along
            while(idx_pass < 200){
 8001c92:	e054      	b.n	8001d3e <get_possibles+0x46e>
                float ftemp = possible_scores[b][idx_pass];
 8001c94:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c9e:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8001cb6:	6013      	str	r3, [r2, #0]
                unsigned short itemp = possible_idx[b][idx_pass];
 8001cb8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001cc2:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	f8a7 37fe 	strh.w	r3, [r7, #2046]	@ 0x7fe
                possible_scores[b][idx_pass] = score_pass;
 8001cda:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001ce4:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
                possible_idx[b][idx_pass] = save_idx;
 8001cfe:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001d08:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	f8b7 2818 	ldrh.w	r2, [r7, #2072]	@ 0x818
 8001d1e:	801a      	strh	r2, [r3, #0]
                score_pass = ftemp;
 8001d20:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001d2a:	6013      	str	r3, [r2, #0]
                save_idx = itemp;
 8001d2c:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	@ 0x7fe
 8001d30:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
                idx_pass += 1;
 8001d34:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
            while(idx_pass < 200){
 8001d3e:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d42:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d44:	d9a6      	bls.n	8001c94 <get_possibles+0x3c4>
 8001d46:	e000      	b.n	8001d4a <get_possibles+0x47a>
                continue;
 8001d48:	bf00      	nop
        for(int b = 0; b < num_rounds; b += 1){
 8001d4a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001d54:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8001d58:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f6ff ae48 	blt.w	80019f2 <get_possibles+0x122>
    for(unsigned short idx = 0; idx < 5000; idx += 1){
 8001d62:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001d66:	3301      	adds	r3, #1
 8001d68:	f8a7 382e 	strh.w	r3, [r7, #2094]	@ 0x82e
 8001d6c:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001d70:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f67f adca 	bls.w	800190e <get_possibles+0x3e>
            }


        }
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	c61c3c00 	.word	0xc61c3c00

08001d8c <overlap_score>:

float overlap_score(Glove_Vector * board_gloves, Dict_Vector * board_dicts, unsigned short clue_idx){
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	f5ad 5d8d 	sub.w	sp, sp, #4512	@ 0x11a0
 8001d92:	b083      	sub	sp, #12
 8001d94:	f640 1788 	movw	r7, #2440	@ 0x988
 8001d98:	446f      	add	r7, sp
 8001d9a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001d9e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8001da2:	6018      	str	r0, [r3, #0]
 8001da4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001da8:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8001dac:	6019      	str	r1, [r3, #0]
 8001dae:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001db2:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8001db6:	801a      	strh	r2, [r3, #0]
    //WILL BE DONE BY A READ ON THE FLY
    Glove_Vector clue_glove;
    Dict_Vector clue_dict;
    char * word = malloc(sizeof(*word) * 25);
 8001db8:	2019      	movs	r0, #25
 8001dba:	f00d f833 	bl	800ee24 <malloc>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
    float * vec_floats = read_vec(clue_idx, word);
 8001dc4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001dc8:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00a f990 	bl	800c0f8 <read_vec>
 8001dd8:	f8c7 0808 	str.w	r0, [r7, #2056]	@ 0x808
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 8001de2:	e03e      	b.n	8001e62 <overlap_score+0xd6>
		//SAVE WORD TO GLOVE VEC TOO
		clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 8001de4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001de8:	3301      	adds	r3, #1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001df0:	441a      	add	r2, r3
 8001df2:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8001dfc:	f2a1 41ec 	subw	r1, r1, #1260	@ 0x4ec
 8001e00:	3306      	adds	r3, #6
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3304      	adds	r3, #4
 8001e08:	601a      	str	r2, [r3, #0]
		if(move_idx < 200){
 8001e0a:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e10:	d811      	bhi.n	8001e36 <overlap_score+0xaa>
			clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 8001e12:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e16:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001e20:	441a      	add	r2, r3
 8001e22:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8001e2c:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	601a      	str	r2, [r3, #0]
		}
		if(move_idx < 25){
 8001e36:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e3a:	2b18      	cmp	r3, #24
 8001e3c:	d80c      	bhi.n	8001e58 <overlap_score+0xcc>
			clue_glove.word[move_idx] = word[move_idx];
 8001e3e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e42:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001e46:	441a      	add	r2, r3
 8001e48:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e4c:	7811      	ldrb	r1, [r2, #0]
 8001e4e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001e52:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001e56:	54d1      	strb	r1, [r2, r3]
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001e58:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 8001e62:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e66:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e6a:	d3bb      	bcc.n	8001de4 <overlap_score+0x58>
		}
	}
	free(word);
 8001e6c:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 8001e70:	f00c ffe0 	bl	800ee34 <free>
	free(vec_floats);
 8001e74:	f8d7 0808 	ldr.w	r0, [r7, #2056]	@ 0x808
 8001e78:	f00c ffdc 	bl	800ee34 <free>

    //Calculate An Overlap Score
    float max_glove = glove_similarity(clue_glove, board_gloves[2]);
 8001e7c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e80:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 8001e8a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e8e:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 8001e92:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001e96:	4611      	mov	r1, r2
 8001e98:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f00d f917 	bl	800f0d0 <memcpy>
 8001ea2:	4668      	mov	r0, sp
 8001ea4:	f104 0310 	add.w	r3, r4, #16
 8001ea8:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001eac:	4619      	mov	r1, r3
 8001eae:	f00d f90f 	bl	800f0d0 <memcpy>
 8001eb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001eb6:	f7ff fa66 	bl	8001386 <glove_similarity>
 8001eba:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8001ebe:	ed83 0a00 	vstr	s0, [r3]
    float max_dict = dict_similarity(clue_dict, board_dicts[2]);
 8001ec2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001ec6:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f503 62c8 	add.w	r2, r3, #1600	@ 0x640
 8001ed0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001ed4:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 8001ed8:	abc4      	add	r3, sp, #784	@ 0x310
 8001eda:	4611      	mov	r1, r2
 8001edc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00d f8f5 	bl	800f0d0 <memcpy>
 8001ee6:	4668      	mov	r0, sp
 8001ee8:	f104 0310 	add.w	r3, r4, #16
 8001eec:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f00d f8ed 	bl	800f0d0 <memcpy>
 8001ef6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001efa:	f7ff fa5f 	bl	80013bc <dict_similarity>
 8001efe:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001f02:	ed83 0a00 	vstr	s0, [r3]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 8001f0c:	e079      	b.n	8002002 <overlap_score+0x276>
        float glove = glove_similarity(clue_glove, board_gloves[idx]);
 8001f0e:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8001f12:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001f1e:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	441a      	add	r2, r3
 8001f26:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001f2a:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 8001f2e:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001f32:	4611      	mov	r1, r2
 8001f34:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00d f8c9 	bl	800f0d0 <memcpy>
 8001f3e:	4668      	mov	r0, sp
 8001f40:	f104 0310 	add.w	r3, r4, #16
 8001f44:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f00d f8c1 	bl	800f0d0 <memcpy>
 8001f4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f52:	f7ff fa18 	bl	8001386 <glove_similarity>
 8001f56:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8001f5a:	ed83 0a00 	vstr	s0, [r3]
        float dict = dict_similarity(clue_dict, board_dicts[idx]);
 8001f5e:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8001f62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001f6e:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	441a      	add	r2, r3
 8001f76:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001f7a:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 8001f7e:	abc4      	add	r3, sp, #784	@ 0x310
 8001f80:	4611      	mov	r1, r2
 8001f82:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00d f8a2 	bl	800f0d0 <memcpy>
 8001f8c:	4668      	mov	r0, sp
 8001f8e:	f104 0310 	add.w	r3, r4, #16
 8001f92:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001f96:	4619      	mov	r1, r3
 8001f98:	f00d f89a 	bl	800f0d0 <memcpy>
 8001f9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fa0:	f7ff fa0c 	bl	80013bc <dict_similarity>
 8001fa4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001fa8:	ed83 0a00 	vstr	s0, [r3]
        if(dict > max_dict){
 8001fac:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001fb0:	ed93 7a00 	vldr	s14, [r3]
 8001fb4:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	dd05      	ble.n	8001fd2 <overlap_score+0x246>
            max_dict = dict;
 8001fc6:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8001fd0:	6013      	str	r3, [r2, #0]
        }
        if(glove > max_glove){
 8001fd2:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	dd05      	ble.n	8001ff8 <overlap_score+0x26c>
            max_glove = glove;
 8001fec:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 8001ff6:	6013      	str	r3, [r2, #0]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 8001ff8:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 8002002:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d981      	bls.n	8001f0e <overlap_score+0x182>
        }
    }
    return 0.5 * (max_glove + max_dict);
 800200a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
	...

08002034 <get_clues>:

unsigned short * get_clues(Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	ed2d 8b02 	vpush	{d8}
 800203a:	b091      	sub	sp, #68	@ 0x44
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
    //consider shift to ALT
    //SETUP POSSIBLE CLUE TRACKING INFOR
    unsigned short ** possible_idx = malloc(sizeof(*possible_idx) * num_rounds);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4618      	mov	r0, r3
 800204a:	f00c feeb 	bl	800ee24 <malloc>
 800204e:	4603      	mov	r3, r0
 8002050:	61fb      	str	r3, [r7, #28]
    float ** possible_scores = malloc(sizeof(*possible_scores) * num_rounds);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f00c fee4 	bl	800ee24 <malloc>
 800205c:	4603      	mov	r3, r0
 800205e:	61bb      	str	r3, [r7, #24]
    for(int b = 0; b < num_rounds; b += 1){
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
 8002064:	e034      	b.n	80020d0 <get_clues+0x9c>
        possible_idx[b] = malloc(sizeof(**possible_idx) * 200);
 8002066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	18d4      	adds	r4, r2, r3
 800206e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002072:	f00c fed7 	bl	800ee24 <malloc>
 8002076:	4603      	mov	r3, r0
 8002078:	6023      	str	r3, [r4, #0]
        possible_scores[b] = malloc(sizeof(**possible_scores) * 200);
 800207a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	18d4      	adds	r4, r2, r3
 8002082:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002086:	f00c fecd 	bl	800ee24 <malloc>
 800208a:	4603      	mov	r3, r0
 800208c:	6023      	str	r3, [r4, #0]
        for(int fill = 0; fill < 200; fill += 1){
 800208e:	2300      	movs	r3, #0
 8002090:	633b      	str	r3, [r7, #48]	@ 0x30
 8002092:	e017      	b.n	80020c4 <get_clues+0x90>
            possible_idx[b][fill] = -1;
 8002094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a8:	801a      	strh	r2, [r3, #0]
            possible_scores[b][fill] = -9999;
 80020aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	4a65      	ldr	r2, [pc, #404]	@ (8002250 <get_clues+0x21c>)
 80020bc:	601a      	str	r2, [r3, #0]
        for(int fill = 0; fill < 200; fill += 1){
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	3301      	adds	r3, #1
 80020c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80020c8:	dde4      	ble.n	8002094 <get_clues+0x60>
    for(int b = 0; b < num_rounds; b += 1){
 80020ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020cc:	3301      	adds	r3, #1
 80020ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbc6      	blt.n	8002066 <get_clues+0x32>
        }
    }
//    printf("Checkpoint #5\n");

    //GET POSSIBLE CLUES AND THEIR SCORES
    get_possibles(board_glove, board_dict, possible_scores, possible_idx, num_rounds);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff fbf4 	bl	80018d0 <get_possibles>
//    printf("Checkpoint #6\n");

    //FIND THE BEST CLUE FOR EACH BOARD
    unsigned short * ret_idx = malloc(sizeof(*ret_idx) * num_rounds);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00c fe99 	bl	800ee24 <malloc>
 80020f2:	4603      	mov	r3, r0
 80020f4:	617b      	str	r3, [r7, #20]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80020f6:	2300      	movs	r3, #0
 80020f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80020fa:	e073      	b.n	80021e4 <get_clues+0x1b0>
        unsigned short best_idx = possible_idx[b][0];
 80020fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        float best_score = possible_scores[b][0] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][0]);
 800210a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	ed93 8a00 	vldr	s16, [r3]
 8002118:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	f7ff fe27 	bl	8001d8c <overlap_score>
 800213e:	eef0 7a40 	vmov.f32	s15, s0
 8002142:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002146:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for(int idx = 1; idx < 200; idx += 1){
 800214a:	2301      	movs	r3, #1
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
 800214e:	e03d      	b.n	80021cc <get_clues+0x198>
            float score = possible_scores[b][idx] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][idx]);
 8002150:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	ed93 8a00 	vldr	s16, [r3]
 8002164:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fdfe 	bl	8001d8c <overlap_score>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002198:	edc7 7a04 	vstr	s15, [r7, #16]
            if(score > best_score){
 800219c:	ed97 7a04 	vldr	s14, [r7, #16]
 80021a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd0b      	ble.n	80021c6 <get_clues+0x192>
                best_score = score;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_idx = possible_idx[b][idx];
 80021b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        for(int idx = 1; idx < 200; idx += 1){
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80021d0:	ddbe      	ble.n	8002150 <get_clues+0x11c>
            }
        }
        ret_idx[b] = best_idx;
 80021d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4413      	add	r3, r2
 80021da:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80021dc:	801a      	strh	r2, [r3, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80021de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021e0:	3301      	adds	r3, #1
 80021e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80021e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dc87      	bgt.n	80020fc <get_clues+0xc8>
//            save_scores[b][idx] = vector_score(board_glove[b][idx], board_dicts[b][idx], all_glove[ret_idx[b]], all_dict[ret_idx[b]]);
//        }
//    }

    //FREES
    for(int b = 0; b < num_rounds; b += 1){
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	e01a      	b.n	8002228 <get_clues+0x1f4>
        free(board_dict[b]);
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f00c fe19 	bl	800ee34 <free>
        free(possible_scores[b]);
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f00c fe11 	bl	800ee34 <free>
        free(possible_idx[b]);
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f00c fe09 	bl	800ee34 <free>
    for(int b = 0; b < num_rounds; b += 1){
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	3301      	adds	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbe0      	blt.n	80021f2 <get_clues+0x1be>
    }
    free(board_dict);
 8002230:	68b8      	ldr	r0, [r7, #8]
 8002232:	f00c fdff 	bl	800ee34 <free>
    free(possible_scores);
 8002236:	69b8      	ldr	r0, [r7, #24]
 8002238:	f00c fdfc 	bl	800ee34 <free>
    free(possible_idx);
 800223c:	69f8      	ldr	r0, [r7, #28]
 800223e:	f00c fdf9 	bl	800ee34 <free>

    return ret_idx;
 8002242:	697b      	ldr	r3, [r7, #20]
}
 8002244:	4618      	mov	r0, r3
 8002246:	373c      	adds	r7, #60	@ 0x3c
 8002248:	46bd      	mov	sp, r7
 800224a:	ecbd 8b02 	vpop	{d8}
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	c61c3c00 	.word	0xc61c3c00

08002254 <play_round>:
//        // }
//    }
//    fclose(file);
//}

void play_round(unsigned short * clues, Glove_Vector ** board_glove, int num_rounds){
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
//            }
//            printf("\n");
//        }
//        printf("\n\n\n\n\n");
//    }
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <clues>:
//        c = arg[rds_idx++];
//    }
//    return ret;
//}

void clues(){
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
//    int num_rounds = read_rounds(argv[1]);
     int num_rounds = 10;
 8002272:	230a      	movs	r3, #10
 8002274:	617b      	str	r3, [r7, #20]
//    free(full_board);

     // char ** all_board = read_board("codewords.txt");
     // write_idxs("allboard", all_board, all_glove, 100);

     unsigned short * board_idx = malloc(sizeof(*board_idx) * 250);
 8002276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800227a:	f00c fdd3 	bl	800ee24 <malloc>
 800227e:	4603      	mov	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
     for(int i = 0; i < 250; i += 1){
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e009      	b.n	800229c <clues+0x30>
    	 board_idx[i] = i;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
     for(int i = 0; i < 250; i += 1){
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2bf9      	cmp	r3, #249	@ 0xf9
 80022a0:	ddf2      	ble.n	8002288 <clues+0x1c>
     }
//     read_board_2("allboard", all_board, board_idx, 100);
    
     Glove_Vector ** board_glove = malloc(sizeof(*board_glove) * num_rounds);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00c fdbc 	bl	800ee24 <malloc>
 80022ac:	4603      	mov	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]
     Dict_Vector ** board_dict = malloc(sizeof(*board_dict) * num_rounds);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00c fdb5 	bl	800ee24 <malloc>
 80022ba:	4603      	mov	r3, r0
 80022bc:	60bb      	str	r3, [r7, #8]
     for(unsigned short i = 0; i < 16; i += 1){
 80022be:	2300      	movs	r3, #0
 80022c0:	837b      	strh	r3, [r7, #26]
 80022c2:	e016      	b.n	80022f2 <clues+0x86>
    	 board_glove[i] = malloc(sizeof(**board_glove) * 16);
 80022c4:	8b7b      	ldrh	r3, [r7, #26]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	18d4      	adds	r4, r2, r3
 80022cc:	f644 40c0 	movw	r0, #19648	@ 0x4cc0
 80022d0:	f00c fda8 	bl	800ee24 <malloc>
 80022d4:	4603      	mov	r3, r0
 80022d6:	6023      	str	r3, [r4, #0]
    	 board_dict[i] = malloc(sizeof(**board_dict) * 16);
 80022d8:	8b7b      	ldrh	r3, [r7, #26]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	18d4      	adds	r4, r2, r3
 80022e0:	f44f 5048 	mov.w	r0, #12800	@ 0x3200
 80022e4:	f00c fd9e 	bl	800ee24 <malloc>
 80022e8:	4603      	mov	r3, r0
 80022ea:	6023      	str	r3, [r4, #0]
     for(unsigned short i = 0; i < 16; i += 1){
 80022ec:	8b7b      	ldrh	r3, [r7, #26]
 80022ee:	3301      	adds	r3, #1
 80022f0:	837b      	strh	r3, [r7, #26]
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d9e5      	bls.n	80022c4 <clues+0x58>
     }
     // EMPTY TO SAVE GLOVE AND DICT VECTORS IN

     gen_board(board_idx, board_glove, board_dict, num_rounds);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	6938      	ldr	r0, [r7, #16]
 8002300:	f7ff f8bb 	bl	800147a <gen_board>
//         for(int idx = 0; idx < 16; idx+= 1){
//             save_scores[b][idx] = 0;
//         }
//     }

     unsigned short * clues = get_clues(board_glove, board_dict, num_rounds);
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff fe93 	bl	8002034 <get_clues>
 800230e:	6078      	str	r0, [r7, #4]

//     printf("Checkpoint #7\n");
     play_round(clues, board_glove, num_rounds);
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff9d 	bl	8002254 <play_round>

//     for(int b = 0; b < num_rounds; b += 1){
//         //free(boards_idx[b]);
//         //free(save_scores[b]);
//     }
     free(clues);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f00c fd8a 	bl	800ee34 <free>
//     free(save_scores);
//     free(boards_idx);
}
 8002320:	bf00      	nop
 8002322:	3724      	adds	r7, #36	@ 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 800232e:	4bdb      	ldr	r3, [pc, #876]	@ (800269c <end_game+0x374>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8002334:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002338:	f001 fa06 	bl	8003748 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 800233c:	201f      	movs	r0, #31
 800233e:	f7fe fcd3 	bl	8000ce8 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8002342:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	230a      	movs	r3, #10
 800234a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800234e:	215a      	movs	r1, #90	@ 0x5a
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fc9b 	bl	8000c8c <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8002356:	2300      	movs	r3, #0
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	230a      	movs	r3, #10
 800235c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002360:	2164      	movs	r1, #100	@ 0x64
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe fc92 	bl	8000c8c <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8002368:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800237e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002382:	21b4      	movs	r1, #180	@ 0xb4
 8002384:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002388:	f7fe fcce 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 800238c:	231f      	movs	r3, #31
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80023a0:	f240 22da 	movw	r2, #730	@ 0x2da
 80023a4:	21b4      	movs	r1, #180	@ 0xb4
 80023a6:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80023aa:	f7fe fcbd 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80023ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f240 238a 	movw	r3, #650	@ 0x28a
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80023c4:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80023c8:	21b4      	movs	r1, #180	@ 0xb4
 80023ca:	f240 208a 	movw	r0, #650	@ 0x28a
 80023ce:	f7fe fcab 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 80023d2:	231f      	movs	r3, #31
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	f240 2376 	movw	r3, #630	@ 0x276
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80023e6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80023ea:	21b4      	movs	r1, #180	@ 0xb4
 80023ec:	f240 2076 	movw	r0, #630	@ 0x276
 80023f0:	f7fe fc9a 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 80023f4:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2346      	movs	r3, #70	@ 0x46
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002408:	2214      	movs	r2, #20
 800240a:	21b4      	movs	r1, #180	@ 0xb4
 800240c:	2046      	movs	r0, #70	@ 0x46
 800240e:	f7fe fc8b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8002412:	231f      	movs	r3, #31
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	235a      	movs	r3, #90	@ 0x5a
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002424:	2228      	movs	r2, #40	@ 0x28
 8002426:	21b4      	movs	r1, #180	@ 0xb4
 8002428:	205a      	movs	r0, #90	@ 0x5a
 800242a:	f7fe fc7d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 800242e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2378      	movs	r3, #120	@ 0x78
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002442:	2246      	movs	r2, #70	@ 0x46
 8002444:	21b4      	movs	r1, #180	@ 0xb4
 8002446:	2078      	movs	r0, #120	@ 0x78
 8002448:	f7fe fc6e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 800244c:	231f      	movs	r3, #31
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	238c      	movs	r3, #140	@ 0x8c
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800245e:	225a      	movs	r2, #90	@ 0x5a
 8002460:	21b4      	movs	r1, #180	@ 0xb4
 8002462:	208c      	movs	r0, #140	@ 0x8c
 8002464:	f7fe fc60 	bl	8000d28 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8002468:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2378      	movs	r3, #120	@ 0x78
 8002470:	22c8      	movs	r2, #200	@ 0xc8
 8002472:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8002476:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800247a:	f7fe fc7d 	bl	8000d78 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 800247e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002482:	9302      	str	r3, [sp, #8]
 8002484:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	f240 237e 	movw	r3, #638	@ 0x27e
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002494:	f240 224e 	movw	r2, #590	@ 0x24e
 8002498:	21fa      	movs	r1, #250	@ 0xfa
 800249a:	f240 204e 	movw	r0, #590	@ 0x24e
 800249e:	f7fe fc43 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 80024a2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	23ae      	movs	r3, #174	@ 0xae
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80024b6:	22d4      	movs	r2, #212	@ 0xd4
 80024b8:	21fa      	movs	r1, #250	@ 0xfa
 80024ba:	20d4      	movs	r0, #212	@ 0xd4
 80024bc:	f7fe fc34 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 80024c0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2382      	movs	r3, #130	@ 0x82
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f240 13db 	movw	r3, #475	@ 0x1db
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	23c0      	movs	r3, #192	@ 0xc0
 80024d2:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80024d6:	21af      	movs	r1, #175	@ 0xaf
 80024d8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80024dc:	f7fe fc24 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 80024e0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	2382      	movs	r3, #130	@ 0x82
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f240 1345 	movw	r3, #325	@ 0x145
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	23c0      	movs	r3, #192	@ 0xc0
 80024f2:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80024f6:	21af      	movs	r1, #175	@ 0xaf
 80024f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80024fc:	f7fe fc14 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8002500:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8002516:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800251a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800251e:	f240 200a 	movw	r0, #522	@ 0x20a
 8002522:	f7fe fc01 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8002526:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800253c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002540:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002544:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002548:	f7fe fbee 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 800254c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	23be      	movs	r3, #190	@ 0xbe
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	23c0      	movs	r3, #192	@ 0xc0
 800255e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002562:	21fa      	movs	r1, #250	@ 0xfa
 8002564:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002568:	f7fe fbde 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 800256c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	23be      	movs	r3, #190	@ 0xbe
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	23dc      	movs	r3, #220	@ 0xdc
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	23c0      	movs	r3, #192	@ 0xc0
 800257c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002580:	21fa      	movs	r1, #250	@ 0xfa
 8002582:	20d4      	movs	r0, #212	@ 0xd4
 8002584:	f7fe fbd0 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8002588:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800259e:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80025a2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80025a6:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80025aa:	f7fe fbbd 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 80025ae:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80025c4:	22d4      	movs	r2, #212	@ 0xd4
 80025c6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80025ca:	20dc      	movs	r0, #220	@ 0xdc
 80025cc:	f7fe fbac 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 80025d0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	237c      	movs	r3, #124	@ 0x7c
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80025e4:	22e8      	movs	r2, #232	@ 0xe8
 80025e6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80025ea:	20ca      	movs	r0, #202	@ 0xca
 80025ec:	f7fe fb9c 	bl	8000d28 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 80025f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	230a      	movs	r3, #10
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2346      	movs	r3, #70	@ 0x46
 80025fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002600:	21cd      	movs	r1, #205	@ 0xcd
 8002602:	20fa      	movs	r0, #250	@ 0xfa
 8002604:	f7fe fbda 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8002608:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	230a      	movs	r3, #10
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2346      	movs	r3, #70	@ 0x46
 8002614:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002618:	f240 1127 	movw	r1, #295	@ 0x127
 800261c:	20fa      	movs	r0, #250	@ 0xfa
 800261e:	f7fe fbcd 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8002622:	2300      	movs	r3, #0
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2307      	movs	r3, #7
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2332      	movs	r3, #50	@ 0x32
 800262c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002630:	21d7      	movs	r1, #215	@ 0xd7
 8002632:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002636:	f7fe fbc1 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 800263a:	2300      	movs	r3, #0
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2307      	movs	r3, #7
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2332      	movs	r3, #50	@ 0x32
 8002644:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002648:	f240 1131 	movw	r1, #305	@ 0x131
 800264c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002650:	f7fe fbb4 	bl	8000dbc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8002654:	f7fe fbde 	bl	8000e14 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002658:	2100      	movs	r1, #0
 800265a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800265e:	f7fe fc3c 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8002662:	21d7      	movs	r1, #215	@ 0xd7
 8002664:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002668:	f7fe fbf9 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 800266c:	2002      	movs	r0, #2
 800266e:	f7fe fc91 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8002672:	210a      	movs	r1, #10
 8002674:	480a      	ldr	r0, [pc, #40]	@ (80026a0 <end_game+0x378>)
 8002676:	f7fe fcb7 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 800267a:	f240 1131 	movw	r1, #305	@ 0x131
 800267e:	f240 1063 	movw	r0, #355	@ 0x163
 8002682:	f7fe fbec 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8002686:	2104      	movs	r1, #4
 8002688:	4806      	ldr	r0, [pc, #24]	@ (80026a4 <end_game+0x37c>)
 800268a:	f7fe fcad 	bl	8000fe8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 800268e:	211f      	movs	r1, #31
 8002690:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002694:	f7fe fc21 	bl	8000eda <RA8875_text_color>
 8002698:	e006      	b.n	80026a8 <end_game+0x380>
 800269a:	bf00      	nop
 800269c:	240000a6 	.word	0x240000a6
 80026a0:	0800f8b0 	.word	0x0800f8b0
 80026a4:	0800f8bc 	.word	0x0800f8bc
	RA8875_text_cursor_position(CENTER_X-143, 20);
 80026a8:	2114      	movs	r1, #20
 80026aa:	f240 1001 	movw	r0, #257	@ 0x101
 80026ae:	f7fe fbd6 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80026b2:	2003      	movs	r0, #3
 80026b4:	f7fe fc6e 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 80026b8:	2104      	movs	r1, #4
 80026ba:	4849      	ldr	r0, [pc, #292]	@ (80027e0 <end_game+0x4b8>)
 80026bc:	f7fe fc94 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 80026c0:	2114      	movs	r1, #20
 80026c2:	f240 1095 	movw	r0, #405	@ 0x195
 80026c6:	f7fe fbca 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 80026ca:	2104      	movs	r1, #4
 80026cc:	4845      	ldr	r0, [pc, #276]	@ (80027e4 <end_game+0x4bc>)
 80026ce:	f7fe fc8b 	bl	8000fe8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80026d2:	211f      	movs	r1, #31
 80026d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026d8:	f7fe fbff 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80026dc:	2100      	movs	r1, #0
 80026de:	200a      	movs	r0, #10
 80026e0:	f7fe fbbd 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe fc55 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 80026ea:	2106      	movs	r1, #6
 80026ec:	483e      	ldr	r0, [pc, #248]	@ (80027e8 <end_game+0x4c0>)
 80026ee:	f7fe fc7b 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 80026f2:	2100      	movs	r1, #0
 80026f4:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80026f8:	f7fe fbb1 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 80026fc:	210b      	movs	r1, #11
 80026fe:	483b      	ldr	r0, [pc, #236]	@ (80027ec <end_game+0x4c4>)
 8002700:	f7fe fc72 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002704:	2137      	movs	r1, #55	@ 0x37
 8002706:	200a      	movs	r0, #10
 8002708:	f7fe fba9 	bl	8000e5e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 800270c:	4b38      	ldr	r3, [pc, #224]	@ (80027f0 <end_game+0x4c8>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4938      	ldr	r1, [pc, #224]	@ (80027f4 <end_game+0x4cc>)
 8002714:	4618      	mov	r0, r3
 8002716:	f00c fc77 	bl	800f008 <siprintf>
	RA8875_text_write(buffer, 3);
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2103      	movs	r1, #3
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fc62 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8002724:	2137      	movs	r1, #55	@ 0x37
 8002726:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 800272a:	f7fe fb98 	bl	8000e5e <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 800272e:	4b30      	ldr	r3, [pc, #192]	@ (80027f0 <end_game+0x4c8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <end_game+0x4d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	dd03      	ble.n	8002742 <end_game+0x41a>
 800273a:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <end_game+0x4c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2e      	ldr	r2, [pc, #184]	@ (80027f8 <end_game+0x4d0>)
 8002740:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <end_game+0x4d0>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	492a      	ldr	r1, [pc, #168]	@ (80027f4 <end_game+0x4cc>)
 800274a:	4618      	mov	r0, r3
 800274c:	f00c fc5c 	bl	800f008 <siprintf>
	RA8875_text_write(buffer, 3);
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2103      	movs	r1, #3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fc47 	bl	8000fe8 <RA8875_text_write>
	RA8875_graphic_mode();
 800275a:	f7fd ff09 	bl	8000570 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 800275e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2332      	movs	r3, #50	@ 0x32
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	23df      	movs	r3, #223	@ 0xdf
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2332      	movs	r3, #50	@ 0x32
 800276e:	22ee      	movs	r2, #238	@ 0xee
 8002770:	210a      	movs	r1, #10
 8002772:	20e7      	movs	r0, #231	@ 0xe7
 8002774:	f7fe fad8 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8002778:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2332      	movs	r3, #50	@ 0x32
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	23e6      	movs	r3, #230	@ 0xe6
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2332      	movs	r3, #50	@ 0x32
 8002788:	22f5      	movs	r2, #245	@ 0xf5
 800278a:	2155      	movs	r1, #85	@ 0x55
 800278c:	20ee      	movs	r0, #238	@ 0xee
 800278e:	f7fe facb 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8002792:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2332      	movs	r3, #50	@ 0x32
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f240 2337 	movw	r3, #567	@ 0x237
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2332      	movs	r3, #50	@ 0x32
 80027a4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80027a8:	210a      	movs	r1, #10
 80027aa:	f240 202f 	movw	r0, #559	@ 0x22f
 80027ae:	f7fe fabb 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80027b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80027b6:	9302      	str	r3, [sp, #8]
 80027b8:	2332      	movs	r3, #50	@ 0x32
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2332      	movs	r3, #50	@ 0x32
 80027c4:	f240 2221 	movw	r2, #545	@ 0x221
 80027c8:	2155      	movs	r1, #85	@ 0x55
 80027ca:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80027ce:	f7fe faab 	bl	8000d28 <RA8875_draw_fill_triangle>

	score = 0;
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <end_game+0x4c8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

	return;
 80027d8:	bf00      	nop
}
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	0800f900 	.word	0x0800f900
 80027e4:	0800f908 	.word	0x0800f908
 80027e8:	0800f910 	.word	0x0800f910
 80027ec:	0800f918 	.word	0x0800f918
 80027f0:	240000a8 	.word	0x240000a8
 80027f4:	0800f924 	.word	0x0800f924
 80027f8:	240000ac 	.word	0x240000ac

080027fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002804:	f000 ff0e 	bl	8003624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002808:	f000 f828 	bl	800285c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800280c:	f000 f9fa 	bl	8002c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002810:	f000 f9d0 	bl	8002bb4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002814:	f000 f8e8 	bl	80029e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002818:	f000 f93c 	bl	8002a94 <MX_SPI2_Init>
  MX_FATFS_Init();
 800281c:	f008 ff04 	bl	800b628 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002820:	f000 f990 	bl	8002b44 <MX_TIM6_Init>
  MX_I2S3_Init();
 8002824:	f000 f898 	bl	8002958 <MX_I2S3_Init>
  MX_RNG_Init();
 8002828:	f000 f8c8 	bl	80029bc <MX_RNG_Init>
//  title_screen();

//  game_matrix();
  	  FATFS fs;
  	  FRESULT fr;
  	  fr = f_mount(&fs, "", 1);
 800282c:	463b      	mov	r3, r7
 800282e:	2201      	movs	r2, #1
 8002830:	4909      	ldr	r1, [pc, #36]	@ (8002858 <main+0x5c>)
 8002832:	4618      	mov	r0, r3
 8002834:	f00b fdec 	bl	800e410 <f_mount>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  	  clues();
 800283e:	f7ff fd15 	bl	800226c <clues>
  	  fr = f_mount(NULL, "", 0);
 8002842:	2200      	movs	r2, #0
 8002844:	4904      	ldr	r1, [pc, #16]	@ (8002858 <main+0x5c>)
 8002846:	2000      	movs	r0, #0
 8002848:	f00b fde2 	bl	800e410 <f_mount>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

//  HAL_Delay(10000);
  while (1)
 8002852:	bf00      	nop
 8002854:	e7fd      	b.n	8002852 <main+0x56>
 8002856:	bf00      	nop
 8002858:	0800f950 	.word	0x0800f950

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b09c      	sub	sp, #112	@ 0x70
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002866:	224c      	movs	r2, #76	@ 0x4c
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f00c fbec 	bl	800f048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2220      	movs	r2, #32
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f00c fbe6 	bl	800f048 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800287c:	2002      	movs	r0, #2
 800287e:	f003 fa97 	bl	8005db0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <SystemClock_Config+0xf4>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <SystemClock_Config+0xf4>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <SystemClock_Config+0xf4>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <SystemClock_Config+0xf8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002954 <SystemClock_Config+0xf8>)
 80028a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <SystemClock_Config+0xf8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028b8:	bf00      	nop
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <SystemClock_Config+0xf8>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c6:	d1f8      	bne.n	80028ba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80028c8:	2322      	movs	r3, #34	@ 0x22
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d0:	2340      	movs	r3, #64	@ 0x40
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028d4:	2301      	movs	r3, #1
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d8:	2302      	movs	r3, #2
 80028da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028dc:	2300      	movs	r3, #0
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028e0:	2304      	movs	r3, #4
 80028e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80028e4:	230c      	movs	r3, #12
 80028e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80028e8:	2302      	movs	r3, #2
 80028ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 80028f0:	2303      	movs	r3, #3
 80028f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028f4:	230c      	movs	r3, #12
 80028f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fa8d 	bl	8005e24 <HAL_RCC_OscConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002910:	f000 fa6c 	bl	8002dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002914:	233f      	movs	r3, #63	@ 0x3f
 8002916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002918:	2303      	movs	r3, #3
 800291a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fecd 	bl	80066d8 <HAL_RCC_ClockConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002944:	f000 fa52 	bl	8002dec <Error_Handler>
  }
}
 8002948:	bf00      	nop
 800294a:	3770      	adds	r7, #112	@ 0x70
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58000400 	.word	0x58000400
 8002954:	58024800 	.word	0x58024800

08002958 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800295c:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 800295e:	4a16      	ldr	r2, [pc, #88]	@ (80029b8 <MX_I2S3_Init+0x60>)
 8002960:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8002962:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002964:	220a      	movs	r2, #10
 8002966:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002974:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800297a:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 800297c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002980:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8002988:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8002994:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 800299c:	2200      	movs	r2, #0
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80029a0:	4804      	ldr	r0, [pc, #16]	@ (80029b4 <MX_I2S3_Init+0x5c>)
 80029a2:	f003 f8e3 	bl	8005b6c <HAL_I2S_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 80029ac:	f000 fa1e 	bl	8002dec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	240000b0 	.word	0x240000b0
 80029b8:	40003c00 	.word	0x40003c00

080029bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <MX_RNG_Init+0x24>)
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <MX_RNG_Init+0x28>)
 80029c4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <MX_RNG_Init+0x24>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	@ (80029e0 <MX_RNG_Init+0x24>)
 80029ce:	f006 fef7 	bl	80097c0 <HAL_RNG_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80029d8:	f000 fa08 	bl	8002dec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	24000104 	.word	0x24000104
 80029e4:	48021800 	.word	0x48021800

080029e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 80029ee:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <MX_SPI1_Init+0xa8>)
 80029f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029f2:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 80029f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80029f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a00:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a02:	2207      	movs	r2, #7
 8002a04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a06:	4b21      	ldr	r3, [pc, #132]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a12:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a28:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a34:	4b15      	ldr	r3, [pc, #84]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <MX_SPI1_Init+0xa4>)
 8002a78:	f006 ff04 	bl	8009884 <HAL_SPI_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002a82:	f000 f9b3 	bl	8002dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000118 	.word	0x24000118
 8002a90:	40013000 	.word	0x40013000

08002a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a98:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002a9a:	4a29      	ldr	r2, [pc, #164]	@ (8002b40 <MX_SPI2_Init+0xac>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aac:	4b23      	ldr	r3, [pc, #140]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002aae:	2207      	movs	r2, #7
 8002ab0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ac4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002aee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002af6:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <MX_SPI2_Init+0xa8>)
 8002b28:	f006 feac 	bl	8009884 <HAL_SPI_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b32:	f000 f95b 	bl	8002dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	240001a0 	.word	0x240001a0
 8002b40:	40003800 	.word	0x40003800

08002b44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b54:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b56:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <MX_TIM6_Init+0x6c>)
 8002b58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b5c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002b60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002b68:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b72:	2280      	movs	r2, #128	@ 0x80
 8002b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b76:	480d      	ldr	r0, [pc, #52]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b78:	f008 fa45 	bl	800b006 <HAL_TIM_Base_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b82:	f000 f933 	bl	8002dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b86:	2320      	movs	r3, #32
 8002b88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	@ (8002bac <MX_TIM6_Init+0x68>)
 8002b94:	f008 fc9c 	bl	800b4d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002b9e:	f000 f925 	bl	8002dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	24000318 	.word	0x24000318
 8002bb0:	40001000 	.word	0x40001000

08002bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <MX_DMA_Init+0x4c>)
 8002bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c00 <MX_DMA_Init+0x4c>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <MX_DMA_Init+0x4c>)
 8002bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	200b      	movs	r0, #11
 8002bde:	f000 febe 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002be2:	200b      	movs	r0, #11
 8002be4:	f000 fed5 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2100      	movs	r1, #0
 8002bec:	200c      	movs	r0, #12
 8002bee:	f000 feb6 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bf2:	200c      	movs	r0, #12
 8002bf4:	f000 fecd 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	58024400 	.word	0x58024400

08002c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	@ 0x28
 8002c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c20:	4a6c      	ldr	r2, [pc, #432]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c3e:	4a65      	ldr	r2, [pc, #404]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c48:	4b62      	ldr	r3, [pc, #392]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c66:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c74:	4b57      	ldr	r3, [pc, #348]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c7a:	4a56      	ldr	r2, [pc, #344]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c92:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c98:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002c9a:	f043 0310 	orr.w	r3, r3, #16
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd4 <MX_GPIO_Init+0x1d0>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2110      	movs	r1, #16
 8002cb4:	4848      	ldr	r0, [pc, #288]	@ (8002dd8 <MX_GPIO_Init+0x1d4>)
 8002cb6:	f002 ff3f 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	4847      	ldr	r0, [pc, #284]	@ (8002ddc <MX_GPIO_Init+0x1d8>)
 8002cc0:	f002 ff3a 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cca:	4845      	ldr	r0, [pc, #276]	@ (8002de0 <MX_GPIO_Init+0x1dc>)
 8002ccc:	f002 ff34 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	21e0      	movs	r1, #224	@ 0xe0
 8002cd4:	4843      	ldr	r0, [pc, #268]	@ (8002de4 <MX_GPIO_Init+0x1e0>)
 8002cd6:	f002 ff2f 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ce0:	483f      	ldr	r0, [pc, #252]	@ (8002de0 <MX_GPIO_Init+0x1dc>)
 8002ce2:	f002 ff29 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2103      	movs	r1, #3
 8002cea:	483f      	ldr	r0, [pc, #252]	@ (8002de8 <MX_GPIO_Init+0x1e4>)
 8002cec:	f002 ff24 	bl	8005b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4834      	ldr	r0, [pc, #208]	@ (8002dd8 <MX_GPIO_Init+0x1d4>)
 8002d08:	f002 fd66 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482f      	ldr	r0, [pc, #188]	@ (8002ddc <MX_GPIO_Init+0x1d8>)
 8002d20:	f002 fd5a 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8002d24:	2320      	movs	r3, #32
 8002d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4828      	ldr	r0, [pc, #160]	@ (8002ddc <MX_GPIO_Init+0x1d8>)
 8002d3c:	f002 fd4c 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4821      	ldr	r0, [pc, #132]	@ (8002de0 <MX_GPIO_Init+0x1dc>)
 8002d5a:	f002 fd3d 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8002d5e:	231f      	movs	r3, #31
 8002d60:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	481c      	ldr	r0, [pc, #112]	@ (8002de4 <MX_GPIO_Init+0x1e0>)
 8002d72:	f002 fd31 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8002d76:	23e0      	movs	r3, #224	@ 0xe0
 8002d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4815      	ldr	r0, [pc, #84]	@ (8002de4 <MX_GPIO_Init+0x1e0>)
 8002d8e:	f002 fd23 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8002d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	4619      	mov	r1, r3
 8002daa:	480d      	ldr	r0, [pc, #52]	@ (8002de0 <MX_GPIO_Init+0x1dc>)
 8002dac:	f002 fd14 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8002db0:	2303      	movs	r3, #3
 8002db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db4:	2301      	movs	r3, #1
 8002db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4808      	ldr	r0, [pc, #32]	@ (8002de8 <MX_GPIO_Init+0x1e4>)
 8002dc8:	f002 fd06 	bl	80057d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	@ 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58020000 	.word	0x58020000
 8002ddc:	58020800 	.word	0x58020800
 8002de0:	58020400 	.word	0x58020400
 8002de4:	58020c00 	.word	0x58020c00
 8002de8:	58021000 	.word	0x58021000

08002dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df0:	b672      	cpsid	i
}
 8002df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <Error_Handler+0x8>

08002df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_MspInit+0x30>)
 8002e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e04:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <HAL_MspInit+0x30>)
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e0e:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <HAL_MspInit+0x30>)
 8002e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	58024400 	.word	0x58024400

08002e2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0bc      	sub	sp, #240	@ 0xf0
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e44:	f107 0318 	add.w	r3, r7, #24
 8002e48:	22c0      	movs	r2, #192	@ 0xc0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00c f8fb 	bl	800f048 <memset>
  if(hi2s->Instance==SPI3)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4b      	ldr	r2, [pc, #300]	@ (8002f84 <HAL_I2S_MspInit+0x158>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f040 808f 	bne.w	8002f7c <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002e5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6e:	f107 0318 	add.w	r3, r7, #24
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 ffa6 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8002e7e:	f7ff ffb5 	bl	8002dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e88:	4a3f      	ldr	r2, [pc, #252]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea6:	4a38      	ldr	r2, [pc, #224]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eb0:	4b35      	ldr	r3, [pc, #212]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	4b32      	ldr	r3, [pc, #200]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec4:	4a30      	ldr	r2, [pc, #192]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ece:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002edc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee2:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eec:	4b26      	ldr	r3, [pc, #152]	@ (8002f88 <HAL_I2S_MspInit+0x15c>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002efa:	2304      	movs	r3, #4
 8002efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002f12:	2307      	movs	r3, #7
 8002f14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	481b      	ldr	r0, [pc, #108]	@ (8002f8c <HAL_I2S_MspInit+0x160>)
 8002f20:	f002 fc5a 	bl	80057d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f3e:	2306      	movs	r3, #6
 8002f40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4811      	ldr	r0, [pc, #68]	@ (8002f90 <HAL_I2S_MspInit+0x164>)
 8002f4c:	f002 fc44 	bl	80057d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f74:	4619      	mov	r1, r3
 8002f76:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <HAL_I2S_MspInit+0x168>)
 8002f78:	f002 fc2e 	bl	80057d8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002f7c:	bf00      	nop
 8002f7e:	37f0      	adds	r7, #240	@ 0xf0
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40003c00 	.word	0x40003c00
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	58020400 	.word	0x58020400
 8002f90:	58020000 	.word	0x58020000
 8002f94:	58020800 	.word	0x58020800

08002f98 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0b4      	sub	sp, #208	@ 0xd0
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	22c0      	movs	r2, #192	@ 0xc0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f00c f84d 	bl	800f048 <memset>
  if(hrng->Instance==RNG)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <HAL_RNG_MspInit+0x6c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d121      	bne.n	8002ffc <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002fb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fef8 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002fda:	f7ff ff07 	bl	8002dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RNG_MspInit+0x70>)
 8002fe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002fe4:	4a08      	ldr	r2, [pc, #32]	@ (8003008 <HAL_RNG_MspInit+0x70>)
 8002fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fea:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002fee:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RNG_MspInit+0x70>)
 8002ff0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002ffc:	bf00      	nop
 8002ffe:	37d0      	adds	r7, #208	@ 0xd0
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	48021800 	.word	0x48021800
 8003008:	58024400 	.word	0x58024400

0800300c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0be      	sub	sp, #248	@ 0xf8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 0320 	add.w	r3, r7, #32
 8003028:	22c0      	movs	r2, #192	@ 0xc0
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f00c f80b 	bl	800f048 <memset>
  if(hspi->Instance==SPI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4aa2      	ldr	r2, [pc, #648]	@ (80032c0 <HAL_SPI_MspInit+0x2b4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d16a      	bne.n	8003112 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800303c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304e:	f107 0320 	add.w	r3, r7, #32
 8003052:	4618      	mov	r0, r3
 8003054:	f003 feb6 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800305e:	f7ff fec5 	bl	8002dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003062:	4b98      	ldr	r3, [pc, #608]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003068:	4a96      	ldr	r2, [pc, #600]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 800306a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800306e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003072:	4b94      	ldr	r3, [pc, #592]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b90      	ldr	r3, [pc, #576]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003086:	4a8f      	ldr	r2, [pc, #572]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003090:	4b8c      	ldr	r3, [pc, #560]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b89      	ldr	r3, [pc, #548]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a4:	4a87      	ldr	r2, [pc, #540]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030ae:	4b85      	ldr	r3, [pc, #532]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 80030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030bc:	23c0      	movs	r3, #192	@ 0xc0
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030d4:	2305      	movs	r3, #5
 80030d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80030de:	4619      	mov	r1, r3
 80030e0:	4879      	ldr	r0, [pc, #484]	@ (80032c8 <HAL_SPI_MspInit+0x2bc>)
 80030e2:	f002 fb79 	bl	80057d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030e6:	2308      	movs	r3, #8
 80030e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030fe:	2305      	movs	r3, #5
 8003100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003104:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003108:	4619      	mov	r1, r3
 800310a:	4870      	ldr	r0, [pc, #448]	@ (80032cc <HAL_SPI_MspInit+0x2c0>)
 800310c:	f002 fb64 	bl	80057d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003110:	e0d2      	b.n	80032b8 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6e      	ldr	r2, [pc, #440]	@ (80032d0 <HAL_SPI_MspInit+0x2c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	f040 80cd 	bne.w	80032b8 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800311e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fe45 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8003140:	f7ff fe54 	bl	8002dec <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003144:	4b5f      	ldr	r3, [pc, #380]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800314a:	4a5e      	ldr	r2, [pc, #376]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003150:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003154:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800315a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003162:	4b58      	ldr	r3, [pc, #352]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003168:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003172:	4b54      	ldr	r3, [pc, #336]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003180:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003186:	4a4f      	ldr	r2, [pc, #316]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003190:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <HAL_SPI_MspInit+0x2b8>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800319e:	2306      	movs	r3, #6
 80031a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031b6:	2305      	movs	r3, #5
 80031b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4844      	ldr	r0, [pc, #272]	@ (80032d4 <HAL_SPI_MspInit+0x2c8>)
 80031c4:	f002 fb08 	bl	80057d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031e2:	2305      	movs	r3, #5
 80031e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4837      	ldr	r0, [pc, #220]	@ (80032cc <HAL_SPI_MspInit+0x2c0>)
 80031f0:	f002 faf2 	bl	80057d8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80031f4:	4b38      	ldr	r3, [pc, #224]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 80031f6:	4a39      	ldr	r2, [pc, #228]	@ (80032dc <HAL_SPI_MspInit+0x2d0>)
 80031f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80031fa:	4b37      	ldr	r3, [pc, #220]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 80031fc:	2227      	movs	r2, #39	@ 0x27
 80031fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003200:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003206:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003208:	2200      	movs	r2, #0
 800320a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800320c:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 800320e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003212:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003214:	4b30      	ldr	r3, [pc, #192]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800321a:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322c:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 800322e:	2200      	movs	r2, #0
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003232:	4829      	ldr	r0, [pc, #164]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003234:	f000 fbc8 	bl	80039c8 <HAL_DMA_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_SPI_MspInit+0x236>
      Error_Handler();
 800323e:	f7ff fdd5 	bl	8002dec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a24      	ldr	r2, [pc, #144]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 8003246:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003248:	4a23      	ldr	r2, [pc, #140]	@ (80032d8 <HAL_SPI_MspInit+0x2cc>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003250:	4a24      	ldr	r2, [pc, #144]	@ (80032e4 <HAL_SPI_MspInit+0x2d8>)
 8003252:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003256:	2228      	movs	r2, #40	@ 0x28
 8003258:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325a:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 800325c:	2240      	movs	r2, #64	@ 0x40
 800325e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003260:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003266:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003268:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800326c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326e:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003270:	2200      	movs	r2, #0
 8003272:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800327a:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 800327c:	2200      	movs	r2, #0
 800327e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003280:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003286:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800328c:	4814      	ldr	r0, [pc, #80]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 800328e:	f000 fb9b 	bl	80039c8 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8003298:	f7ff fda8 	bl	8002dec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a10      	ldr	r2, [pc, #64]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 80032a0:	679a      	str	r2, [r3, #120]	@ 0x78
 80032a2:	4a0f      	ldr	r2, [pc, #60]	@ (80032e0 <HAL_SPI_MspInit+0x2d4>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	2024      	movs	r0, #36	@ 0x24
 80032ae:	f000 fb56 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80032b2:	2024      	movs	r0, #36	@ 0x24
 80032b4:	f000 fb6d 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 80032b8:	bf00      	nop
 80032ba:	37f8      	adds	r7, #248	@ 0xf8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40013000 	.word	0x40013000
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58020000 	.word	0x58020000
 80032cc:	58020400 	.word	0x58020400
 80032d0:	40003800 	.word	0x40003800
 80032d4:	58020800 	.word	0x58020800
 80032d8:	24000228 	.word	0x24000228
 80032dc:	40020010 	.word	0x40020010
 80032e0:	240002a0 	.word	0x240002a0
 80032e4:	40020028 	.word	0x40020028

080032e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003330 <HAL_TIM_Base_MspInit+0x48>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d116      	bne.n	8003328 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_TIM_Base_MspInit+0x4c>)
 80032fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003300:	4a0c      	ldr	r2, [pc, #48]	@ (8003334 <HAL_TIM_Base_MspInit+0x4c>)
 8003302:	f043 0310 	orr.w	r3, r3, #16
 8003306:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_TIM_Base_MspInit+0x4c>)
 800330c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003318:	2200      	movs	r2, #0
 800331a:	2101      	movs	r1, #1
 800331c:	2036      	movs	r0, #54	@ 0x36
 800331e:	f000 fb1e 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003322:	2036      	movs	r0, #54	@ 0x36
 8003324:	f000 fb35 	bl	8003992 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40001000 	.word	0x40001000
 8003334:	58024400 	.word	0x58024400

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <NMI_Handler+0x4>

08003340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <MemManage_Handler+0x4>

08003350 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <UsageFault_Handler+0x4>

08003360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800338e:	f000 f9bb 	bl	8003708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <DMA1_Stream0_IRQHandler+0x10>)
 800339e:	f001 f8b5 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	24000228 	.word	0x24000228

080033ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <DMA1_Stream1_IRQHandler+0x10>)
 80033b2:	f001 f8ab 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	240002a0 	.word	0x240002a0

080033c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <SPI2_IRQHandler+0x10>)
 80033c6:	f007 fb1b 	bl	800aa00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	240001a0 	.word	0x240001a0

080033d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033da:	481b      	ldr	r0, [pc, #108]	@ (8003448 <TIM6_DAC_IRQHandler+0x74>)
 80033dc:	f007 fe99 	bl	800b112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 80033e0:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <TIM6_DAC_IRQHandler+0x78>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b18      	ldr	r3, [pc, #96]	@ (800344c <TIM6_DAC_IRQHandler+0x78>)
 80033ea:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <TIM6_DAC_IRQHandler+0x78>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	4916      	ldr	r1, [pc, #88]	@ (8003450 <TIM6_DAC_IRQHandler+0x7c>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00b fe06 	bl	800f008 <siprintf>
  RA8875_text_mode();
 80033fc:	f7fd fd0a 	bl	8000e14 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8003400:	2132      	movs	r1, #50	@ 0x32
 8003402:	20c8      	movs	r0, #200	@ 0xc8
 8003404:	f7fd fd2b 	bl	8000e5e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8003408:	211f      	movs	r1, #31
 800340a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800340e:	f7fd fd64 	bl	8000eda <RA8875_text_color>
  RA8875_text_scale(1);
 8003412:	2001      	movs	r0, #1
 8003414:	f7fd fdbe 	bl	8000f94 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	2102      	movs	r1, #2
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fde3 	bl	8000fe8 <RA8875_text_write>
  RA8875_graphic_mode();
 8003422:	f7fd f8a5 	bl	8000570 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <TIM6_DAC_IRQHandler+0x78>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <TIM6_DAC_IRQHandler+0x78>)
 8003430:	220a      	movs	r2, #10
 8003432:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 8003434:	4804      	ldr	r0, [pc, #16]	@ (8003448 <TIM6_DAC_IRQHandler+0x74>)
 8003436:	f007 fe3d 	bl	800b0b4 <HAL_TIM_Base_Stop_IT>
	  end_game();
 800343a:	f7fe ff75 	bl	8002328 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	24000318 	.word	0x24000318
 800344c:	24000000 	.word	0x24000000
 8003450:	0800f954 	.word	0x0800f954

08003454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <_sbrk+0x5c>)
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <_sbrk+0x60>)
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <_sbrk+0x64>)
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <_sbrk+0x68>)
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <_sbrk+0x64>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	429a      	cmp	r2, r3
 8003482:	d207      	bcs.n	8003494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003484:	f00b fdf8 	bl	800f078 <__errno>
 8003488:	4603      	mov	r3, r0
 800348a:	220c      	movs	r2, #12
 800348c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	e009      	b.n	80034a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800349a:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <_sbrk+0x64>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a05      	ldr	r2, [pc, #20]	@ (80034b8 <_sbrk+0x64>)
 80034a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	24080000 	.word	0x24080000
 80034b4:	00000400 	.word	0x00000400
 80034b8:	24000364 	.word	0x24000364
 80034bc:	24000700 	.word	0x24000700

080034c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034c4:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <SystemInit+0xe4>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	4a36      	ldr	r2, [pc, #216]	@ (80035a4 <SystemInit+0xe4>)
 80034cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <SystemInit+0xe8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d807      	bhi.n	80034f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <SystemInit+0xe8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 030f 	bic.w	r3, r3, #15
 80034e8:	4a2f      	ldr	r2, [pc, #188]	@ (80035a8 <SystemInit+0xe8>)
 80034ea:	f043 0307 	orr.w	r3, r3, #7
 80034ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034f0:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <SystemInit+0xec>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2d      	ldr	r2, [pc, #180]	@ (80035ac <SystemInit+0xec>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034fc:	4b2b      	ldr	r3, [pc, #172]	@ (80035ac <SystemInit+0xec>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003502:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <SystemInit+0xec>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4929      	ldr	r1, [pc, #164]	@ (80035ac <SystemInit+0xec>)
 8003508:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <SystemInit+0xf0>)
 800350a:	4013      	ands	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800350e:	4b26      	ldr	r3, [pc, #152]	@ (80035a8 <SystemInit+0xe8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800351a:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <SystemInit+0xe8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <SystemInit+0xe8>)
 8003524:	f043 0307 	orr.w	r3, r3, #7
 8003528:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800352a:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <SystemInit+0xec>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003530:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <SystemInit+0xec>)
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003536:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <SystemInit+0xec>)
 8003538:	2200      	movs	r2, #0
 800353a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <SystemInit+0xec>)
 800353e:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <SystemInit+0xf4>)
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003542:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <SystemInit+0xec>)
 8003544:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <SystemInit+0xf8>)
 8003546:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003548:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <SystemInit+0xec>)
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <SystemInit+0xfc>)
 800354c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <SystemInit+0xec>)
 8003550:	2200      	movs	r2, #0
 8003552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003554:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <SystemInit+0xec>)
 8003556:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <SystemInit+0xfc>)
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800355a:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <SystemInit+0xec>)
 800355c:	2200      	movs	r2, #0
 800355e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <SystemInit+0xec>)
 8003562:	4a16      	ldr	r2, [pc, #88]	@ (80035bc <SystemInit+0xfc>)
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <SystemInit+0xec>)
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <SystemInit+0xec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <SystemInit+0xec>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <SystemInit+0xec>)
 800357a:	2200      	movs	r2, #0
 800357c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800357e:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <SystemInit+0x100>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <SystemInit+0x104>)
 8003584:	4013      	ands	r3, r2
 8003586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800358a:	d202      	bcs.n	8003592 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800358c:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <SystemInit+0x108>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003592:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <SystemInit+0x10c>)
 8003594:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003598:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00
 80035a8:	52002000 	.word	0x52002000
 80035ac:	58024400 	.word	0x58024400
 80035b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80035b4:	02020200 	.word	0x02020200
 80035b8:	01ff0000 	.word	0x01ff0000
 80035bc:	01010280 	.word	0x01010280
 80035c0:	5c001000 	.word	0x5c001000
 80035c4:	ffff0000 	.word	0xffff0000
 80035c8:	51008108 	.word	0x51008108
 80035cc:	52004000 	.word	0x52004000

080035d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035d4:	f7ff ff74 	bl	80034c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d8:	480c      	ldr	r0, [pc, #48]	@ (800360c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035da:	490d      	ldr	r1, [pc, #52]	@ (8003610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e0:	e002      	b.n	80035e8 <LoopCopyDataInit>

080035e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e6:	3304      	adds	r3, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ec:	d3f9      	bcc.n	80035e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035f0:	4c0a      	ldr	r4, [pc, #40]	@ (800361c <LoopFillZerobss+0x22>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f4:	e001      	b.n	80035fa <LoopFillZerobss>

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f8:	3204      	adds	r2, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035fe:	f00b fd41 	bl	800f084 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 8003602:	f7ff f8fb 	bl	80027fc <main>
  bx  lr
 8003606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003608:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800360c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003610:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003614:	0800fe54 	.word	0x0800fe54
  ldr r2, =_sbss
 8003618:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 800361c:	240006fc 	.word	0x240006fc

08003620 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003620:	e7fe      	b.n	8003620 <ADC3_IRQHandler>
	...

08003624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362a:	2003      	movs	r0, #3
 800362c:	f000 f98c 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003630:	f003 fa08 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <HAL_Init+0x68>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	4913      	ldr	r1, [pc, #76]	@ (8003690 <HAL_Init+0x6c>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800364e:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_Init+0x68>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <HAL_Init+0x6c>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	4a0b      	ldr	r2, [pc, #44]	@ (8003694 <HAL_Init+0x70>)
 8003666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003668:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <HAL_Init+0x74>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800366e:	200f      	movs	r0, #15
 8003670:	f000 f814 	bl	800369c <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e002      	b.n	8003684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800367e:	f7ff fbbb 	bl	8002df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	58024400 	.word	0x58024400
 8003690:	0800f9b8 	.word	0x0800f9b8
 8003694:	24000008 	.word	0x24000008
 8003698:	24000004 	.word	0x24000004

0800369c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_InitTick+0x60>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e021      	b.n	80036f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_InitTick+0x64>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_InitTick+0x60>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036be:	fbb3 f3f1 	udiv	r3, r3, r1
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f971 	bl	80039ae <HAL_SYSTICK_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00e      	b.n	80036f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d80a      	bhi.n	80036f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036dc:	2200      	movs	r2, #0
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f000 f93b 	bl	800395e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036e8:	4a06      	ldr	r2, [pc, #24]	@ (8003704 <HAL_InitTick+0x68>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	24000010 	.word	0x24000010
 8003700:	24000004 	.word	0x24000004
 8003704:	2400000c 	.word	0x2400000c

08003708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_IncTick+0x20>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b06      	ldr	r3, [pc, #24]	@ (800372c <HAL_IncTick+0x24>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4413      	add	r3, r2
 8003718:	4a04      	ldr	r2, [pc, #16]	@ (800372c <HAL_IncTick+0x24>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	24000010 	.word	0x24000010
 800372c:	24000368 	.word	0x24000368

08003730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return uwTick;
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_GetTick+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	24000368 	.word	0x24000368

08003748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff ffee 	bl	8003730 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d005      	beq.n	800376e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_Delay+0x44>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800376e:	bf00      	nop
 8003770:	f7ff ffde 	bl	8003730 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d8f7      	bhi.n	8003770 <HAL_Delay+0x28>
  {
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	24000010 	.word	0x24000010

08003790 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_GetREVID+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0c1b      	lsrs	r3, r3, #16
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	5c001000 	.word	0x5c001000

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <__NVIC_SetPriorityGrouping+0x40>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00
 80037ec:	05fa0000 	.word	0x05fa0000

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	@ (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	@ (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	@ (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff29 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff40 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff90 	bl	800389c <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5f 	bl	8003848 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff33 	bl	800380c <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa4 	bl	8003904 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff feae 	bl	8003730 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e316      	b.n	800400e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a66      	ldr	r2, [pc, #408]	@ (8003b80 <HAL_DMA_Init+0x1b8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04a      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a65      	ldr	r2, [pc, #404]	@ (8003b84 <HAL_DMA_Init+0x1bc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d045      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a63      	ldr	r2, [pc, #396]	@ (8003b88 <HAL_DMA_Init+0x1c0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a62      	ldr	r2, [pc, #392]	@ (8003b8c <HAL_DMA_Init+0x1c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03b      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a60      	ldr	r2, [pc, #384]	@ (8003b90 <HAL_DMA_Init+0x1c8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d036      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5f      	ldr	r2, [pc, #380]	@ (8003b94 <HAL_DMA_Init+0x1cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d031      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5d      	ldr	r2, [pc, #372]	@ (8003b98 <HAL_DMA_Init+0x1d0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02c      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b9c <HAL_DMA_Init+0x1d4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d027      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba0 <HAL_DMA_Init+0x1d8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a59      	ldr	r2, [pc, #356]	@ (8003ba4 <HAL_DMA_Init+0x1dc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a57      	ldr	r2, [pc, #348]	@ (8003ba8 <HAL_DMA_Init+0x1e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a56      	ldr	r2, [pc, #344]	@ (8003bac <HAL_DMA_Init+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a54      	ldr	r2, [pc, #336]	@ (8003bb0 <HAL_DMA_Init+0x1e8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a53      	ldr	r2, [pc, #332]	@ (8003bb4 <HAL_DMA_Init+0x1ec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a51      	ldr	r2, [pc, #324]	@ (8003bb8 <HAL_DMA_Init+0x1f0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a50      	ldr	r2, [pc, #320]	@ (8003bbc <HAL_DMA_Init+0x1f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_DMA_Init+0xbc>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_DMA_Init+0xbe>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 813b 	beq.w	8003d02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a37      	ldr	r2, [pc, #220]	@ (8003b80 <HAL_DMA_Init+0x1b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d04a      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a36      	ldr	r2, [pc, #216]	@ (8003b84 <HAL_DMA_Init+0x1bc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d045      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	@ (8003b88 <HAL_DMA_Init+0x1c0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d040      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a33      	ldr	r2, [pc, #204]	@ (8003b8c <HAL_DMA_Init+0x1c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03b      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a31      	ldr	r2, [pc, #196]	@ (8003b90 <HAL_DMA_Init+0x1c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_DMA_Init+0x1cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d031      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <HAL_DMA_Init+0x1d0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02c      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <HAL_DMA_Init+0x1d4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d027      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <HAL_DMA_Init+0x1d8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba4 <HAL_DMA_Init+0x1dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d01d      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_DMA_Init+0x1e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <HAL_DMA_Init+0x1e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a25      	ldr	r2, [pc, #148]	@ (8003bb0 <HAL_DMA_Init+0x1e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a24      	ldr	r2, [pc, #144]	@ (8003bb4 <HAL_DMA_Init+0x1ec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <HAL_DMA_Init+0x1f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_DMA_Init+0x1f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_DMA_Init+0x186>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e007      	b.n	8003b5e <HAL_DMA_Init+0x196>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b5e:	e02f      	b.n	8003bc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b60:	f7ff fde6 	bl	8003730 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d928      	bls.n	8003bc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e246      	b.n	800400e <HAL_DMA_Init+0x646>
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1c8      	bne.n	8003b60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4b83      	ldr	r3, [pc, #524]	@ (8003de8 <HAL_DMA_Init+0x420>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003be6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d107      	bne.n	8003c24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c24:	4b71      	ldr	r3, [pc, #452]	@ (8003dec <HAL_DMA_Init+0x424>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b71      	ldr	r3, [pc, #452]	@ (8003df0 <HAL_DMA_Init+0x428>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c30:	d328      	bcc.n	8003c84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b28      	cmp	r3, #40	@ 0x28
 8003c38:	d903      	bls.n	8003c42 <HAL_DMA_Init+0x27a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c40:	d917      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c48:	d903      	bls.n	8003c52 <HAL_DMA_Init+0x28a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b42      	cmp	r3, #66	@ 0x42
 8003c50:	d90f      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b46      	cmp	r3, #70	@ 0x46
 8003c58:	d903      	bls.n	8003c62 <HAL_DMA_Init+0x29a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b48      	cmp	r3, #72	@ 0x48
 8003c60:	d907      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c68:	d905      	bls.n	8003c76 <HAL_DMA_Init+0x2ae>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b52      	cmp	r3, #82	@ 0x52
 8003c70:	d801      	bhi.n	8003c76 <HAL_DMA_Init+0x2ae>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_Init+0x2b0>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d117      	bne.n	8003cde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 fbff 	bl	80054c4 <DMA_CheckFifoParam>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e197      	b.n	800400e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f001 fb3a 	bl	8005360 <DMA_CalcBaseAndBitshift>
 8003cec:	4603      	mov	r3, r0
 8003cee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	223f      	movs	r2, #63	@ 0x3f
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	e0cd      	b.n	8003e9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3b      	ldr	r2, [pc, #236]	@ (8003df4 <HAL_DMA_Init+0x42c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a39      	ldr	r2, [pc, #228]	@ (8003df8 <HAL_DMA_Init+0x430>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a38      	ldr	r2, [pc, #224]	@ (8003dfc <HAL_DMA_Init+0x434>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a36      	ldr	r2, [pc, #216]	@ (8003e00 <HAL_DMA_Init+0x438>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a35      	ldr	r2, [pc, #212]	@ (8003e04 <HAL_DMA_Init+0x43c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <HAL_DMA_Init+0x440>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <HAL_DMA_Init+0x444>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a30      	ldr	r2, [pc, #192]	@ (8003e10 <HAL_DMA_Init+0x448>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_Init+0x38e>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_Init+0x390>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8097 	beq.w	8003e8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	@ (8003df4 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d021      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	@ (8003df8 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01c      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	@ (8003dfc <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d017      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	@ (8003e00 <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d012      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e04 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00d      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d008      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <HAL_DMA_Init+0x448>)
 8003daa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_DMA_Init+0x44c>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d021      	beq.n	8003e18 <HAL_DMA_Init+0x450>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	d102      	bne.n	8003de2 <HAL_DMA_Init+0x41a>
 8003ddc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003de0:	e01b      	b.n	8003e1a <HAL_DMA_Init+0x452>
 8003de2:	2300      	movs	r3, #0
 8003de4:	e019      	b.n	8003e1a <HAL_DMA_Init+0x452>
 8003de6:	bf00      	nop
 8003de8:	fe10803f 	.word	0xfe10803f
 8003dec:	5c001000 	.word	0x5c001000
 8003df0:	ffff0000 	.word	0xffff0000
 8003df4:	58025408 	.word	0x58025408
 8003df8:	5802541c 	.word	0x5802541c
 8003dfc:	58025430 	.word	0x58025430
 8003e00:	58025444 	.word	0x58025444
 8003e04:	58025458 	.word	0x58025458
 8003e08:	5802546c 	.word	0x5802546c
 8003e0c:	58025480 	.word	0x58025480
 8003e10:	58025494 	.word	0x58025494
 8003e14:	fffe000f 	.word	0xfffe000f
 8003e18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004018 <HAL_DMA_Init+0x650>)
 8003e60:	4413      	add	r3, r2
 8003e62:	4a6e      	ldr	r2, [pc, #440]	@ (800401c <HAL_DMA_Init+0x654>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	009a      	lsls	r2, r3, #2
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f001 fa75 	bl	8005360 <DMA_CalcBaseAndBitshift>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e008      	b.n	8003e9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0b7      	b.n	800400e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8004020 <HAL_DMA_Init+0x658>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d072      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	@ (8004024 <HAL_DMA_Init+0x65c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d06d      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8004028 <HAL_DMA_Init+0x660>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d068      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800402c <HAL_DMA_Init+0x664>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d063      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a59      	ldr	r2, [pc, #356]	@ (8004030 <HAL_DMA_Init+0x668>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05e      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a57      	ldr	r2, [pc, #348]	@ (8004034 <HAL_DMA_Init+0x66c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d059      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a56      	ldr	r2, [pc, #344]	@ (8004038 <HAL_DMA_Init+0x670>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d054      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a54      	ldr	r2, [pc, #336]	@ (800403c <HAL_DMA_Init+0x674>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04f      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a53      	ldr	r2, [pc, #332]	@ (8004040 <HAL_DMA_Init+0x678>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a51      	ldr	r2, [pc, #324]	@ (8004044 <HAL_DMA_Init+0x67c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a50      	ldr	r2, [pc, #320]	@ (8004048 <HAL_DMA_Init+0x680>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	@ (800404c <HAL_DMA_Init+0x684>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4d      	ldr	r2, [pc, #308]	@ (8004050 <HAL_DMA_Init+0x688>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	@ (8004054 <HAL_DMA_Init+0x68c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004058 <HAL_DMA_Init+0x690>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a48      	ldr	r2, [pc, #288]	@ (800405c <HAL_DMA_Init+0x694>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a47      	ldr	r2, [pc, #284]	@ (8004060 <HAL_DMA_Init+0x698>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a45      	ldr	r2, [pc, #276]	@ (8004064 <HAL_DMA_Init+0x69c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a44      	ldr	r2, [pc, #272]	@ (8004068 <HAL_DMA_Init+0x6a0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a42      	ldr	r2, [pc, #264]	@ (800406c <HAL_DMA_Init+0x6a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	@ (8004070 <HAL_DMA_Init+0x6a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3f      	ldr	r2, [pc, #252]	@ (8004074 <HAL_DMA_Init+0x6ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004078 <HAL_DMA_Init+0x6b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_DMA_Init+0x6b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Init+0x5ca>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_DMA_Init+0x5cc>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f001 fb0f 	bl	80055bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d102      	bne.n	8003fac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <HAL_DMA_Init+0x624>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d80c      	bhi.n	8003fec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f001 fb8c 	bl	80056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e008      	b.n	8003ffe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	a7fdabf8 	.word	0xa7fdabf8
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494

08004080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e237      	b.n	8004502 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d004      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2280      	movs	r2, #128	@ 0x80
 80040a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e22c      	b.n	8004502 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a5c      	ldr	r2, [pc, #368]	@ (8004220 <HAL_DMA_Abort_IT+0x1a0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004224 <HAL_DMA_Abort_IT+0x1a4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a59      	ldr	r2, [pc, #356]	@ (8004228 <HAL_DMA_Abort_IT+0x1a8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_DMA_Abort_IT+0x1ac>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a56      	ldr	r2, [pc, #344]	@ (8004230 <HAL_DMA_Abort_IT+0x1b0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a55      	ldr	r2, [pc, #340]	@ (8004234 <HAL_DMA_Abort_IT+0x1b4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a53      	ldr	r2, [pc, #332]	@ (8004238 <HAL_DMA_Abort_IT+0x1b8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a52      	ldr	r2, [pc, #328]	@ (800423c <HAL_DMA_Abort_IT+0x1bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a50      	ldr	r2, [pc, #320]	@ (8004240 <HAL_DMA_Abort_IT+0x1c0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a4f      	ldr	r2, [pc, #316]	@ (8004244 <HAL_DMA_Abort_IT+0x1c4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4d      	ldr	r2, [pc, #308]	@ (8004248 <HAL_DMA_Abort_IT+0x1c8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4c      	ldr	r2, [pc, #304]	@ (800424c <HAL_DMA_Abort_IT+0x1cc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4a      	ldr	r2, [pc, #296]	@ (8004250 <HAL_DMA_Abort_IT+0x1d0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a49      	ldr	r2, [pc, #292]	@ (8004254 <HAL_DMA_Abort_IT+0x1d4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a47      	ldr	r2, [pc, #284]	@ (8004258 <HAL_DMA_Abort_IT+0x1d8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_Abort_IT+0xc8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a46      	ldr	r2, [pc, #280]	@ (800425c <HAL_DMA_Abort_IT+0x1dc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_DMA_Abort_IT+0xcc>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_DMA_Abort_IT+0xce>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8086 	beq.w	8004260 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2204      	movs	r2, #4
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2f      	ldr	r2, [pc, #188]	@ (8004220 <HAL_DMA_Abort_IT+0x1a0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d04a      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2e      	ldr	r2, [pc, #184]	@ (8004224 <HAL_DMA_Abort_IT+0x1a4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d045      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <HAL_DMA_Abort_IT+0x1a8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d040      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2b      	ldr	r2, [pc, #172]	@ (800422c <HAL_DMA_Abort_IT+0x1ac>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d03b      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a29      	ldr	r2, [pc, #164]	@ (8004230 <HAL_DMA_Abort_IT+0x1b0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d036      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a28      	ldr	r2, [pc, #160]	@ (8004234 <HAL_DMA_Abort_IT+0x1b4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d031      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a26      	ldr	r2, [pc, #152]	@ (8004238 <HAL_DMA_Abort_IT+0x1b8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d02c      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a25      	ldr	r2, [pc, #148]	@ (800423c <HAL_DMA_Abort_IT+0x1bc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d027      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a23      	ldr	r2, [pc, #140]	@ (8004240 <HAL_DMA_Abort_IT+0x1c0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_DMA_Abort_IT+0x1c4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01d      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a20      	ldr	r2, [pc, #128]	@ (8004248 <HAL_DMA_Abort_IT+0x1c8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <HAL_DMA_Abort_IT+0x1cc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <HAL_DMA_Abort_IT+0x1d0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <HAL_DMA_Abort_IT+0x1d4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <HAL_DMA_Abort_IT+0x1d8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_DMA_Abort_IT+0x17c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a19      	ldr	r2, [pc, #100]	@ (800425c <HAL_DMA_Abort_IT+0x1dc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d108      	bne.n	800420e <HAL_DMA_Abort_IT+0x18e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e178      	b.n	8004500 <HAL_DMA_Abort_IT+0x480>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e16f      	b.n	8004500 <HAL_DMA_Abort_IT+0x480>
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 020e 	bic.w	r2, r2, #14
 800426e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6c      	ldr	r2, [pc, #432]	@ (8004428 <HAL_DMA_Abort_IT+0x3a8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6b      	ldr	r2, [pc, #428]	@ (800442c <HAL_DMA_Abort_IT+0x3ac>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a69      	ldr	r2, [pc, #420]	@ (8004430 <HAL_DMA_Abort_IT+0x3b0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a68      	ldr	r2, [pc, #416]	@ (8004434 <HAL_DMA_Abort_IT+0x3b4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a66      	ldr	r2, [pc, #408]	@ (8004438 <HAL_DMA_Abort_IT+0x3b8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a65      	ldr	r2, [pc, #404]	@ (800443c <HAL_DMA_Abort_IT+0x3bc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a63      	ldr	r2, [pc, #396]	@ (8004440 <HAL_DMA_Abort_IT+0x3c0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a62      	ldr	r2, [pc, #392]	@ (8004444 <HAL_DMA_Abort_IT+0x3c4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a60      	ldr	r2, [pc, #384]	@ (8004448 <HAL_DMA_Abort_IT+0x3c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5f      	ldr	r2, [pc, #380]	@ (800444c <HAL_DMA_Abort_IT+0x3cc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004450 <HAL_DMA_Abort_IT+0x3d0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004454 <HAL_DMA_Abort_IT+0x3d4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004458 <HAL_DMA_Abort_IT+0x3d8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a59      	ldr	r2, [pc, #356]	@ (800445c <HAL_DMA_Abort_IT+0x3dc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a57      	ldr	r2, [pc, #348]	@ (8004460 <HAL_DMA_Abort_IT+0x3e0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_Abort_IT+0x290>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a56      	ldr	r2, [pc, #344]	@ (8004464 <HAL_DMA_Abort_IT+0x3e4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <HAL_DMA_Abort_IT+0x2a2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e007      	b.n	8004332 <HAL_DMA_Abort_IT+0x2b2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3c      	ldr	r2, [pc, #240]	@ (8004428 <HAL_DMA_Abort_IT+0x3a8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d072      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_DMA_Abort_IT+0x3ac>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d06d      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a39      	ldr	r2, [pc, #228]	@ (8004430 <HAL_DMA_Abort_IT+0x3b0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d068      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <HAL_DMA_Abort_IT+0x3b4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d063      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a36      	ldr	r2, [pc, #216]	@ (8004438 <HAL_DMA_Abort_IT+0x3b8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d05e      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a34      	ldr	r2, [pc, #208]	@ (800443c <HAL_DMA_Abort_IT+0x3bc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d059      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a33      	ldr	r2, [pc, #204]	@ (8004440 <HAL_DMA_Abort_IT+0x3c0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d054      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a31      	ldr	r2, [pc, #196]	@ (8004444 <HAL_DMA_Abort_IT+0x3c4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04f      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a30      	ldr	r2, [pc, #192]	@ (8004448 <HAL_DMA_Abort_IT+0x3c8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04a      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2e      	ldr	r2, [pc, #184]	@ (800444c <HAL_DMA_Abort_IT+0x3cc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d045      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2d      	ldr	r2, [pc, #180]	@ (8004450 <HAL_DMA_Abort_IT+0x3d0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <HAL_DMA_Abort_IT+0x3d4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d03b      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004458 <HAL_DMA_Abort_IT+0x3d8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d036      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a28      	ldr	r2, [pc, #160]	@ (800445c <HAL_DMA_Abort_IT+0x3dc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <HAL_DMA_Abort_IT+0x3e0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a25      	ldr	r2, [pc, #148]	@ (8004464 <HAL_DMA_Abort_IT+0x3e4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a24      	ldr	r2, [pc, #144]	@ (8004468 <HAL_DMA_Abort_IT+0x3e8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a22      	ldr	r2, [pc, #136]	@ (800446c <HAL_DMA_Abort_IT+0x3ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01d      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a21      	ldr	r2, [pc, #132]	@ (8004470 <HAL_DMA_Abort_IT+0x3f0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004474 <HAL_DMA_Abort_IT+0x3f4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <HAL_DMA_Abort_IT+0x3f8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1c      	ldr	r2, [pc, #112]	@ (800447c <HAL_DMA_Abort_IT+0x3fc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <HAL_DMA_Abort_IT+0x400>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_DMA_Abort_IT+0x3a2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a19      	ldr	r2, [pc, #100]	@ (8004484 <HAL_DMA_Abort_IT+0x404>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d132      	bne.n	8004488 <HAL_DMA_Abort_IT+0x408>
 8004422:	2301      	movs	r3, #1
 8004424:	e031      	b.n	800448a <HAL_DMA_Abort_IT+0x40a>
 8004426:	bf00      	nop
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	40020058 	.word	0x40020058
 8004438:	40020070 	.word	0x40020070
 800443c:	40020088 	.word	0x40020088
 8004440:	400200a0 	.word	0x400200a0
 8004444:	400200b8 	.word	0x400200b8
 8004448:	40020410 	.word	0x40020410
 800444c:	40020428 	.word	0x40020428
 8004450:	40020440 	.word	0x40020440
 8004454:	40020458 	.word	0x40020458
 8004458:	40020470 	.word	0x40020470
 800445c:	40020488 	.word	0x40020488
 8004460:	400204a0 	.word	0x400204a0
 8004464:	400204b8 	.word	0x400204b8
 8004468:	58025408 	.word	0x58025408
 800446c:	5802541c 	.word	0x5802541c
 8004470:	58025430 	.word	0x58025430
 8004474:	58025444 	.word	0x58025444
 8004478:	58025458 	.word	0x58025458
 800447c:	5802546c 	.word	0x5802546c
 8004480:	58025480 	.word	0x58025480
 8004484:	58025494 	.word	0x58025494
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d028      	beq.n	80044e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800449c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop

0800450c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	@ 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004518:	4b67      	ldr	r3, [pc, #412]	@ (80046b8 <HAL_DMA_IRQHandler+0x1ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a67      	ldr	r2, [pc, #412]	@ (80046bc <HAL_DMA_IRQHandler+0x1b0>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5f      	ldr	r2, [pc, #380]	@ (80046c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a5d      	ldr	r2, [pc, #372]	@ (80046c4 <HAL_DMA_IRQHandler+0x1b8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a5c      	ldr	r2, [pc, #368]	@ (80046c8 <HAL_DMA_IRQHandler+0x1bc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5a      	ldr	r2, [pc, #360]	@ (80046cc <HAL_DMA_IRQHandler+0x1c0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a59      	ldr	r2, [pc, #356]	@ (80046d0 <HAL_DMA_IRQHandler+0x1c4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a57      	ldr	r2, [pc, #348]	@ (80046d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a56      	ldr	r2, [pc, #344]	@ (80046d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a54      	ldr	r2, [pc, #336]	@ (80046dc <HAL_DMA_IRQHandler+0x1d0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a53      	ldr	r2, [pc, #332]	@ (80046e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a51      	ldr	r2, [pc, #324]	@ (80046e4 <HAL_DMA_IRQHandler+0x1d8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a50      	ldr	r2, [pc, #320]	@ (80046e8 <HAL_DMA_IRQHandler+0x1dc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4e      	ldr	r2, [pc, #312]	@ (80046ec <HAL_DMA_IRQHandler+0x1e0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4d      	ldr	r2, [pc, #308]	@ (80046f0 <HAL_DMA_IRQHandler+0x1e4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4b      	ldr	r2, [pc, #300]	@ (80046f4 <HAL_DMA_IRQHandler+0x1e8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <HAL_DMA_IRQHandler+0x1ec>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a48      	ldr	r2, [pc, #288]	@ (80046fc <HAL_DMA_IRQHandler+0x1f0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_DMA_IRQHandler+0xd6>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 842b 	beq.w	8004e40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2208      	movs	r2, #8
 80045f4:	409a      	lsls	r2, r3
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80a2 	beq.w	8004744 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2e      	ldr	r2, [pc, #184]	@ (80046c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d04a      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	@ (80046c4 <HAL_DMA_IRQHandler+0x1b8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d045      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <HAL_DMA_IRQHandler+0x1bc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d040      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <HAL_DMA_IRQHandler+0x1c0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d03b      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a28      	ldr	r2, [pc, #160]	@ (80046d0 <HAL_DMA_IRQHandler+0x1c4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d036      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a27      	ldr	r2, [pc, #156]	@ (80046d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d031      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a25      	ldr	r2, [pc, #148]	@ (80046d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02c      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a24      	ldr	r2, [pc, #144]	@ (80046dc <HAL_DMA_IRQHandler+0x1d0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d027      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a22      	ldr	r2, [pc, #136]	@ (80046e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d022      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	@ (80046e4 <HAL_DMA_IRQHandler+0x1d8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d01d      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <HAL_DMA_IRQHandler+0x1dc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_DMA_IRQHandler+0x1e0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1c      	ldr	r2, [pc, #112]	@ (80046f0 <HAL_DMA_IRQHandler+0x1e4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <HAL_DMA_IRQHandler+0x1e8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a19      	ldr	r2, [pc, #100]	@ (80046f8 <HAL_DMA_IRQHandler+0x1ec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a18      	ldr	r2, [pc, #96]	@ (80046fc <HAL_DMA_IRQHandler+0x1f0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d12f      	bne.n	8004700 <HAL_DMA_IRQHandler+0x1f4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e02e      	b.n	8004714 <HAL_DMA_IRQHandler+0x208>
 80046b6:	bf00      	nop
 80046b8:	24000004 	.word	0x24000004
 80046bc:	1b4e81b5 	.word	0x1b4e81b5
 80046c0:	40020010 	.word	0x40020010
 80046c4:	40020028 	.word	0x40020028
 80046c8:	40020040 	.word	0x40020040
 80046cc:	40020058 	.word	0x40020058
 80046d0:	40020070 	.word	0x40020070
 80046d4:	40020088 	.word	0x40020088
 80046d8:	400200a0 	.word	0x400200a0
 80046dc:	400200b8 	.word	0x400200b8
 80046e0:	40020410 	.word	0x40020410
 80046e4:	40020428 	.word	0x40020428
 80046e8:	40020440 	.word	0x40020440
 80046ec:	40020458 	.word	0x40020458
 80046f0:	40020470 	.word	0x40020470
 80046f4:	40020488 	.word	0x40020488
 80046f8:	400204a0 	.word	0x400204a0
 80046fc:	400204b8 	.word	0x400204b8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2208      	movs	r2, #8
 8004732:	409a      	lsls	r2, r3
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d06e      	beq.n	8004838 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a69      	ldr	r2, [pc, #420]	@ (8004904 <HAL_DMA_IRQHandler+0x3f8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d04a      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a67      	ldr	r2, [pc, #412]	@ (8004908 <HAL_DMA_IRQHandler+0x3fc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d045      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a66      	ldr	r2, [pc, #408]	@ (800490c <HAL_DMA_IRQHandler+0x400>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d040      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a64      	ldr	r2, [pc, #400]	@ (8004910 <HAL_DMA_IRQHandler+0x404>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d03b      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a63      	ldr	r2, [pc, #396]	@ (8004914 <HAL_DMA_IRQHandler+0x408>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d036      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a61      	ldr	r2, [pc, #388]	@ (8004918 <HAL_DMA_IRQHandler+0x40c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d031      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a60      	ldr	r2, [pc, #384]	@ (800491c <HAL_DMA_IRQHandler+0x410>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d02c      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004920 <HAL_DMA_IRQHandler+0x414>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d027      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004924 <HAL_DMA_IRQHandler+0x418>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5b      	ldr	r2, [pc, #364]	@ (8004928 <HAL_DMA_IRQHandler+0x41c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01d      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	@ (800492c <HAL_DMA_IRQHandler+0x420>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_DMA_IRQHandler+0x424>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a57      	ldr	r2, [pc, #348]	@ (8004934 <HAL_DMA_IRQHandler+0x428>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a55      	ldr	r2, [pc, #340]	@ (8004938 <HAL_DMA_IRQHandler+0x42c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a54      	ldr	r2, [pc, #336]	@ (800493c <HAL_DMA_IRQHandler+0x430>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a52      	ldr	r2, [pc, #328]	@ (8004940 <HAL_DMA_IRQHandler+0x434>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10a      	bne.n	8004810 <HAL_DMA_IRQHandler+0x304>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e003      	b.n	8004818 <HAL_DMA_IRQHandler+0x30c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2201      	movs	r2, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004830:	f043 0202 	orr.w	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2204      	movs	r2, #4
 8004842:	409a      	lsls	r2, r3
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 808f 	beq.w	800496c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <HAL_DMA_IRQHandler+0x3f8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_DMA_IRQHandler+0x3fc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a29      	ldr	r2, [pc, #164]	@ (800490c <HAL_DMA_IRQHandler+0x400>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <HAL_DMA_IRQHandler+0x404>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a26      	ldr	r2, [pc, #152]	@ (8004914 <HAL_DMA_IRQHandler+0x408>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <HAL_DMA_IRQHandler+0x40c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a23      	ldr	r2, [pc, #140]	@ (800491c <HAL_DMA_IRQHandler+0x410>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a21      	ldr	r2, [pc, #132]	@ (8004920 <HAL_DMA_IRQHandler+0x414>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <HAL_DMA_IRQHandler+0x418>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <HAL_DMA_IRQHandler+0x41c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	@ (800492c <HAL_DMA_IRQHandler+0x420>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <HAL_DMA_IRQHandler+0x424>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <HAL_DMA_IRQHandler+0x428>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <HAL_DMA_IRQHandler+0x42c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a17      	ldr	r2, [pc, #92]	@ (800493c <HAL_DMA_IRQHandler+0x430>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a15      	ldr	r2, [pc, #84]	@ (8004940 <HAL_DMA_IRQHandler+0x434>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d12a      	bne.n	8004944 <HAL_DMA_IRQHandler+0x438>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e023      	b.n	800494c <HAL_DMA_IRQHandler+0x440>
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2204      	movs	r2, #4
 800495a:	409a      	lsls	r2, r3
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2210      	movs	r2, #16
 8004976:	409a      	lsls	r2, r3
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a6 	beq.w	8004ace <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a85      	ldr	r2, [pc, #532]	@ (8004b9c <HAL_DMA_IRQHandler+0x690>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d04a      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a83      	ldr	r2, [pc, #524]	@ (8004ba0 <HAL_DMA_IRQHandler+0x694>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d045      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a82      	ldr	r2, [pc, #520]	@ (8004ba4 <HAL_DMA_IRQHandler+0x698>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d040      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a80      	ldr	r2, [pc, #512]	@ (8004ba8 <HAL_DMA_IRQHandler+0x69c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d03b      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a7f      	ldr	r2, [pc, #508]	@ (8004bac <HAL_DMA_IRQHandler+0x6a0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d036      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a7d      	ldr	r2, [pc, #500]	@ (8004bb0 <HAL_DMA_IRQHandler+0x6a4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d031      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb4 <HAL_DMA_IRQHandler+0x6a8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d02c      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a7a      	ldr	r2, [pc, #488]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6ac>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d027      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a79      	ldr	r2, [pc, #484]	@ (8004bbc <HAL_DMA_IRQHandler+0x6b0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d022      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a77      	ldr	r2, [pc, #476]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6b4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01d      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a76      	ldr	r2, [pc, #472]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6b8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d018      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a74      	ldr	r2, [pc, #464]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6bc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a73      	ldr	r2, [pc, #460]	@ (8004bcc <HAL_DMA_IRQHandler+0x6c0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a71      	ldr	r2, [pc, #452]	@ (8004bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a70      	ldr	r2, [pc, #448]	@ (8004bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d10a      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x52c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e009      	b.n	8004a4c <HAL_DMA_IRQHandler+0x540>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d03e      	beq.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2210      	movs	r2, #16
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d024      	beq.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e01f      	b.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
 8004a9e:	e016      	b.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0208 	bic.w	r2, r2, #8
 8004abc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8110 	beq.w	8004d04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b9c <HAL_DMA_IRQHandler+0x690>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d04a      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba0 <HAL_DMA_IRQHandler+0x694>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d045      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a29      	ldr	r2, [pc, #164]	@ (8004ba4 <HAL_DMA_IRQHandler+0x698>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d040      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a28      	ldr	r2, [pc, #160]	@ (8004ba8 <HAL_DMA_IRQHandler+0x69c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d03b      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a26      	ldr	r2, [pc, #152]	@ (8004bac <HAL_DMA_IRQHandler+0x6a0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d036      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a25      	ldr	r2, [pc, #148]	@ (8004bb0 <HAL_DMA_IRQHandler+0x6a4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d031      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a23      	ldr	r2, [pc, #140]	@ (8004bb4 <HAL_DMA_IRQHandler+0x6a8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02c      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a22      	ldr	r2, [pc, #136]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6ac>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d027      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a20      	ldr	r2, [pc, #128]	@ (8004bbc <HAL_DMA_IRQHandler+0x6b0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6b4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d01d      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6b8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6bc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	@ (8004bcc <HAL_DMA_IRQHandler+0x6c0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a19      	ldr	r2, [pc, #100]	@ (8004bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a17      	ldr	r2, [pc, #92]	@ (8004bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d12b      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x6d0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e02a      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x6e4>
 8004b9a:	bf00      	nop
 8004b9c:	40020010 	.word	0x40020010
 8004ba0:	40020028 	.word	0x40020028
 8004ba4:	40020040 	.word	0x40020040
 8004ba8:	40020058 	.word	0x40020058
 8004bac:	40020070 	.word	0x40020070
 8004bb0:	40020088 	.word	0x40020088
 8004bb4:	400200a0 	.word	0x400200a0
 8004bb8:	400200b8 	.word	0x400200b8
 8004bbc:	40020410 	.word	0x40020410
 8004bc0:	40020428 	.word	0x40020428
 8004bc4:	40020440 	.word	0x40020440
 8004bc8:	40020458 	.word	0x40020458
 8004bcc:	40020470 	.word	0x40020470
 8004bd0:	40020488 	.word	0x40020488
 8004bd4:	400204a0 	.word	0x400204a0
 8004bd8:	400204b8 	.word	0x400204b8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8087 	beq.w	8004d04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2220      	movs	r2, #32
 8004c00:	409a      	lsls	r2, r3
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d139      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0216 	bic.w	r2, r2, #22
 8004c20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_DMA_IRQHandler+0x736>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0208 	bic.w	r2, r2, #8
 8004c50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	223f      	movs	r2, #63	@ 0x3f
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 834a 	beq.w	8005310 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
          }
          return;
 8004c84:	e344      	b.n	8005310 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e027      	b.n	8004d04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e01e      	b.n	8004d04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0210 	bic.w	r2, r2, #16
 8004ce2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8306 	beq.w	800531a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8088 	beq.w	8004e2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7a      	ldr	r2, [pc, #488]	@ (8004f14 <HAL_DMA_IRQHandler+0xa08>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d04a      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a79      	ldr	r2, [pc, #484]	@ (8004f18 <HAL_DMA_IRQHandler+0xa0c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d045      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a77      	ldr	r2, [pc, #476]	@ (8004f1c <HAL_DMA_IRQHandler+0xa10>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d040      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a76      	ldr	r2, [pc, #472]	@ (8004f20 <HAL_DMA_IRQHandler+0xa14>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d03b      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a74      	ldr	r2, [pc, #464]	@ (8004f24 <HAL_DMA_IRQHandler+0xa18>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d036      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a73      	ldr	r2, [pc, #460]	@ (8004f28 <HAL_DMA_IRQHandler+0xa1c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d031      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a71      	ldr	r2, [pc, #452]	@ (8004f2c <HAL_DMA_IRQHandler+0xa20>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02c      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a70      	ldr	r2, [pc, #448]	@ (8004f30 <HAL_DMA_IRQHandler+0xa24>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d027      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a6e      	ldr	r2, [pc, #440]	@ (8004f34 <HAL_DMA_IRQHandler+0xa28>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6d      	ldr	r2, [pc, #436]	@ (8004f38 <HAL_DMA_IRQHandler+0xa2c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d01d      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8004f3c <HAL_DMA_IRQHandler+0xa30>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6a      	ldr	r2, [pc, #424]	@ (8004f40 <HAL_DMA_IRQHandler+0xa34>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a68      	ldr	r2, [pc, #416]	@ (8004f44 <HAL_DMA_IRQHandler+0xa38>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a67      	ldr	r2, [pc, #412]	@ (8004f48 <HAL_DMA_IRQHandler+0xa3c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a65      	ldr	r2, [pc, #404]	@ (8004f4c <HAL_DMA_IRQHandler+0xa40>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a64      	ldr	r2, [pc, #400]	@ (8004f50 <HAL_DMA_IRQHandler+0xa44>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <HAL_DMA_IRQHandler+0x8ca>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e007      	b.n	8004de6 <HAL_DMA_IRQHandler+0x8da>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d307      	bcc.n	8004e02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f2      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x8da>
 8004e00:	e000      	b.n	8004e04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2203      	movs	r2, #3
 8004e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e1a:	e003      	b.n	8004e24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8272 	beq.w	800531a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
 8004e3e:	e26c      	b.n	800531a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a43      	ldr	r2, [pc, #268]	@ (8004f54 <HAL_DMA_IRQHandler+0xa48>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d022      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a42      	ldr	r2, [pc, #264]	@ (8004f58 <HAL_DMA_IRQHandler+0xa4c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d01d      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a40      	ldr	r2, [pc, #256]	@ (8004f5c <HAL_DMA_IRQHandler+0xa50>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d018      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3f      	ldr	r2, [pc, #252]	@ (8004f60 <HAL_DMA_IRQHandler+0xa54>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f64 <HAL_DMA_IRQHandler+0xa58>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3c      	ldr	r2, [pc, #240]	@ (8004f68 <HAL_DMA_IRQHandler+0xa5c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3a      	ldr	r2, [pc, #232]	@ (8004f6c <HAL_DMA_IRQHandler+0xa60>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x984>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a39      	ldr	r2, [pc, #228]	@ (8004f70 <HAL_DMA_IRQHandler+0xa64>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <HAL_DMA_IRQHandler+0x988>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_DMA_IRQHandler+0x98a>
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 823f 	beq.w	800531a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2204      	movs	r2, #4
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80cd 	beq.w	8005054 <HAL_DMA_IRQHandler+0xb48>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80c7 	beq.w	8005054 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2204      	movs	r2, #4
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d049      	beq.n	8004f74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8210 	beq.w	8005314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efc:	e20a      	b.n	8005314 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8206 	beq.w	8005314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f10:	e200      	b.n	8005314 <HAL_DMA_IRQHandler+0xe08>
 8004f12:	bf00      	nop
 8004f14:	40020010 	.word	0x40020010
 8004f18:	40020028 	.word	0x40020028
 8004f1c:	40020040 	.word	0x40020040
 8004f20:	40020058 	.word	0x40020058
 8004f24:	40020070 	.word	0x40020070
 8004f28:	40020088 	.word	0x40020088
 8004f2c:	400200a0 	.word	0x400200a0
 8004f30:	400200b8 	.word	0x400200b8
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020428 	.word	0x40020428
 8004f3c:	40020440 	.word	0x40020440
 8004f40:	40020458 	.word	0x40020458
 8004f44:	40020470 	.word	0x40020470
 8004f48:	40020488 	.word	0x40020488
 8004f4c:	400204a0 	.word	0x400204a0
 8004f50:	400204b8 	.word	0x400204b8
 8004f54:	58025408 	.word	0x58025408
 8004f58:	5802541c 	.word	0x5802541c
 8004f5c:	58025430 	.word	0x58025430
 8004f60:	58025444 	.word	0x58025444
 8004f64:	58025458 	.word	0x58025458
 8004f68:	5802546c 	.word	0x5802546c
 8004f6c:	58025480 	.word	0x58025480
 8004f70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d160      	bne.n	8005040 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7f      	ldr	r2, [pc, #508]	@ (8005180 <HAL_DMA_IRQHandler+0xc74>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04a      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a7d      	ldr	r2, [pc, #500]	@ (8005184 <HAL_DMA_IRQHandler+0xc78>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d045      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a7c      	ldr	r2, [pc, #496]	@ (8005188 <HAL_DMA_IRQHandler+0xc7c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d040      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800518c <HAL_DMA_IRQHandler+0xc80>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d03b      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a79      	ldr	r2, [pc, #484]	@ (8005190 <HAL_DMA_IRQHandler+0xc84>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d036      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a77      	ldr	r2, [pc, #476]	@ (8005194 <HAL_DMA_IRQHandler+0xc88>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d031      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a76      	ldr	r2, [pc, #472]	@ (8005198 <HAL_DMA_IRQHandler+0xc8c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d02c      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a74      	ldr	r2, [pc, #464]	@ (800519c <HAL_DMA_IRQHandler+0xc90>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d027      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a73      	ldr	r2, [pc, #460]	@ (80051a0 <HAL_DMA_IRQHandler+0xc94>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a71      	ldr	r2, [pc, #452]	@ (80051a4 <HAL_DMA_IRQHandler+0xc98>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01d      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a70      	ldr	r2, [pc, #448]	@ (80051a8 <HAL_DMA_IRQHandler+0xc9c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80051ac <HAL_DMA_IRQHandler+0xca0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80051b0 <HAL_DMA_IRQHandler+0xca4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6b      	ldr	r2, [pc, #428]	@ (80051b4 <HAL_DMA_IRQHandler+0xca8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6a      	ldr	r2, [pc, #424]	@ (80051b8 <HAL_DMA_IRQHandler+0xcac>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a68      	ldr	r2, [pc, #416]	@ (80051bc <HAL_DMA_IRQHandler+0xcb0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <HAL_DMA_IRQHandler+0xb24>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0208 	bic.w	r2, r2, #8
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <HAL_DMA_IRQHandler+0xb34>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0204 	bic.w	r2, r2, #4
 800503e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8165 	beq.w	8005314 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005052:	e15f      	b.n	8005314 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2202      	movs	r2, #2
 800505e:	409a      	lsls	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80c5 	beq.w	80051f4 <HAL_DMA_IRQHandler+0xce8>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80bf 	beq.w	80051f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2202      	movs	r2, #2
 8005080:	409a      	lsls	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 813a 	beq.w	8005318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ac:	e134      	b.n	8005318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8130 	beq.w	8005318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c0:	e12a      	b.n	8005318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 8089 	bne.w	80051e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005180 <HAL_DMA_IRQHandler+0xc74>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d04a      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a29      	ldr	r2, [pc, #164]	@ (8005184 <HAL_DMA_IRQHandler+0xc78>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d045      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a28      	ldr	r2, [pc, #160]	@ (8005188 <HAL_DMA_IRQHandler+0xc7c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d040      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a26      	ldr	r2, [pc, #152]	@ (800518c <HAL_DMA_IRQHandler+0xc80>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d03b      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a25      	ldr	r2, [pc, #148]	@ (8005190 <HAL_DMA_IRQHandler+0xc84>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d036      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a23      	ldr	r2, [pc, #140]	@ (8005194 <HAL_DMA_IRQHandler+0xc88>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d031      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a22      	ldr	r2, [pc, #136]	@ (8005198 <HAL_DMA_IRQHandler+0xc8c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d02c      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a20      	ldr	r2, [pc, #128]	@ (800519c <HAL_DMA_IRQHandler+0xc90>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d027      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1f      	ldr	r2, [pc, #124]	@ (80051a0 <HAL_DMA_IRQHandler+0xc94>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d022      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <HAL_DMA_IRQHandler+0xc98>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01d      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <HAL_DMA_IRQHandler+0xc9c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d018      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1a      	ldr	r2, [pc, #104]	@ (80051ac <HAL_DMA_IRQHandler+0xca0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a19      	ldr	r2, [pc, #100]	@ (80051b0 <HAL_DMA_IRQHandler+0xca4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <HAL_DMA_IRQHandler+0xca8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <HAL_DMA_IRQHandler+0xcac>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_DMA_IRQHandler+0xc62>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <HAL_DMA_IRQHandler+0xcb0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d128      	bne.n	80051c0 <HAL_DMA_IRQHandler+0xcb4>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0214 	bic.w	r2, r2, #20
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e027      	b.n	80051d0 <HAL_DMA_IRQHandler+0xcc4>
 8005180:	40020010 	.word	0x40020010
 8005184:	40020028 	.word	0x40020028
 8005188:	40020040 	.word	0x40020040
 800518c:	40020058 	.word	0x40020058
 8005190:	40020070 	.word	0x40020070
 8005194:	40020088 	.word	0x40020088
 8005198:	400200a0 	.word	0x400200a0
 800519c:	400200b8 	.word	0x400200b8
 80051a0:	40020410 	.word	0x40020410
 80051a4:	40020428 	.word	0x40020428
 80051a8:	40020440 	.word	0x40020440
 80051ac:	40020458 	.word	0x40020458
 80051b0:	40020470 	.word	0x40020470
 80051b4:	40020488 	.word	0x40020488
 80051b8:	400204a0 	.word	0x400204a0
 80051bc:	400204b8 	.word	0x400204b8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 020a 	bic.w	r2, r2, #10
 80051ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8097 	beq.w	8005318 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f2:	e091      	b.n	8005318 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2208      	movs	r2, #8
 80051fe:	409a      	lsls	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8088 	beq.w	800531a <HAL_DMA_IRQHandler+0xe0e>
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8082 	beq.w	800531a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <HAL_DMA_IRQHandler+0xe14>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3f      	ldr	r2, [pc, #252]	@ (8005324 <HAL_DMA_IRQHandler+0xe18>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3e      	ldr	r2, [pc, #248]	@ (8005328 <HAL_DMA_IRQHandler+0xe1c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3c      	ldr	r2, [pc, #240]	@ (800532c <HAL_DMA_IRQHandler+0xe20>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3b      	ldr	r2, [pc, #236]	@ (8005330 <HAL_DMA_IRQHandler+0xe24>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a39      	ldr	r2, [pc, #228]	@ (8005334 <HAL_DMA_IRQHandler+0xe28>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a38      	ldr	r2, [pc, #224]	@ (8005338 <HAL_DMA_IRQHandler+0xe2c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a36      	ldr	r2, [pc, #216]	@ (800533c <HAL_DMA_IRQHandler+0xe30>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a35      	ldr	r2, [pc, #212]	@ (8005340 <HAL_DMA_IRQHandler+0xe34>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a33      	ldr	r2, [pc, #204]	@ (8005344 <HAL_DMA_IRQHandler+0xe38>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a32      	ldr	r2, [pc, #200]	@ (8005348 <HAL_DMA_IRQHandler+0xe3c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a30      	ldr	r2, [pc, #192]	@ (800534c <HAL_DMA_IRQHandler+0xe40>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2f      	ldr	r2, [pc, #188]	@ (8005350 <HAL_DMA_IRQHandler+0xe44>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2d      	ldr	r2, [pc, #180]	@ (8005354 <HAL_DMA_IRQHandler+0xe48>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005358 <HAL_DMA_IRQHandler+0xe4c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2a      	ldr	r2, [pc, #168]	@ (800535c <HAL_DMA_IRQHandler+0xe50>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <HAL_DMA_IRQHandler+0xdbc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 021c 	bic.w	r2, r2, #28
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e007      	b.n	80052d8 <HAL_DMA_IRQHandler+0xdcc>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020e 	bic.w	r2, r2, #14
 80052d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
 800530e:	e004      	b.n	800531a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005318:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800531a:	3728      	adds	r7, #40	@ 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8

08005360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a42      	ldr	r2, [pc, #264]	@ (8005478 <DMA_CalcBaseAndBitshift+0x118>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d04a      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a41      	ldr	r2, [pc, #260]	@ (800547c <DMA_CalcBaseAndBitshift+0x11c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d045      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a3f      	ldr	r2, [pc, #252]	@ (8005480 <DMA_CalcBaseAndBitshift+0x120>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d040      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3e      	ldr	r2, [pc, #248]	@ (8005484 <DMA_CalcBaseAndBitshift+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d03b      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a3c      	ldr	r2, [pc, #240]	@ (8005488 <DMA_CalcBaseAndBitshift+0x128>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d036      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3b      	ldr	r2, [pc, #236]	@ (800548c <DMA_CalcBaseAndBitshift+0x12c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d031      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a39      	ldr	r2, [pc, #228]	@ (8005490 <DMA_CalcBaseAndBitshift+0x130>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02c      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a38      	ldr	r2, [pc, #224]	@ (8005494 <DMA_CalcBaseAndBitshift+0x134>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d027      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a36      	ldr	r2, [pc, #216]	@ (8005498 <DMA_CalcBaseAndBitshift+0x138>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a35      	ldr	r2, [pc, #212]	@ (800549c <DMA_CalcBaseAndBitshift+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01d      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a33      	ldr	r2, [pc, #204]	@ (80054a0 <DMA_CalcBaseAndBitshift+0x140>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <DMA_CalcBaseAndBitshift+0x144>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a30      	ldr	r2, [pc, #192]	@ (80054a8 <DMA_CalcBaseAndBitshift+0x148>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	@ (80054ac <DMA_CalcBaseAndBitshift+0x14c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <DMA_CalcBaseAndBitshift+0x150>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <DMA_CalcBaseAndBitshift+0xa8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <DMA_CalcBaseAndBitshift+0x154>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <DMA_CalcBaseAndBitshift+0xac>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <DMA_CalcBaseAndBitshift+0xae>
 800540c:	2300      	movs	r3, #0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d024      	beq.n	800545c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3b10      	subs	r3, #16
 800541a:	4a27      	ldr	r2, [pc, #156]	@ (80054b8 <DMA_CalcBaseAndBitshift+0x158>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	4a24      	ldr	r2, [pc, #144]	@ (80054bc <DMA_CalcBaseAndBitshift+0x15c>)
 800542c:	5cd3      	ldrb	r3, [r2, r3]
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d908      	bls.n	800544c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005442:	4013      	ands	r3, r2
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	659a      	str	r2, [r3, #88]	@ 0x58
 800544a:	e00d      	b.n	8005468 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6593      	str	r3, [r2, #88]	@ 0x58
 800545a:	e005      	b.n	8005468 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40020010 	.word	0x40020010
 800547c:	40020028 	.word	0x40020028
 8005480:	40020040 	.word	0x40020040
 8005484:	40020058 	.word	0x40020058
 8005488:	40020070 	.word	0x40020070
 800548c:	40020088 	.word	0x40020088
 8005490:	400200a0 	.word	0x400200a0
 8005494:	400200b8 	.word	0x400200b8
 8005498:	40020410 	.word	0x40020410
 800549c:	40020428 	.word	0x40020428
 80054a0:	40020440 	.word	0x40020440
 80054a4:	40020458 	.word	0x40020458
 80054a8:	40020470 	.word	0x40020470
 80054ac:	40020488 	.word	0x40020488
 80054b0:	400204a0 	.word	0x400204a0
 80054b4:	400204b8 	.word	0x400204b8
 80054b8:	aaaaaaab 	.word	0xaaaaaaab
 80054bc:	0800f9c8 	.word	0x0800f9c8
 80054c0:	fffffc00 	.word	0xfffffc00

080054c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d120      	bne.n	800551a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d858      	bhi.n	8005592 <DMA_CheckFifoParam+0xce>
 80054e0:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <DMA_CheckFifoParam+0x24>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	0800550b 	.word	0x0800550b
 80054f0:	080054f9 	.word	0x080054f9
 80054f4:	08005593 	.word	0x08005593
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d048      	beq.n	8005596 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005508:	e045      	b.n	8005596 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005512:	d142      	bne.n	800559a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005518:	e03f      	b.n	800559a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005522:	d123      	bne.n	800556c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	2b03      	cmp	r3, #3
 800552a:	d838      	bhi.n	800559e <DMA_CheckFifoParam+0xda>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <DMA_CheckFifoParam+0x70>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005545 	.word	0x08005545
 8005538:	0800554b 	.word	0x0800554b
 800553c:	08005545 	.word	0x08005545
 8005540:	0800555d 	.word	0x0800555d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
        break;
 8005548:	e030      	b.n	80055ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d025      	beq.n	80055a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800555a:	e022      	b.n	80055a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005564:	d11f      	bne.n	80055a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800556a:	e01c      	b.n	80055a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	2b02      	cmp	r3, #2
 8005572:	d902      	bls.n	800557a <DMA_CheckFifoParam+0xb6>
 8005574:	2b03      	cmp	r3, #3
 8005576:	d003      	beq.n	8005580 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005578:	e018      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
        break;
 800557e:	e015      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
    break;
 8005590:	e00b      	b.n	80055aa <DMA_CheckFifoParam+0xe6>
        break;
 8005592:	bf00      	nop
 8005594:	e00a      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        break;
 8005596:	bf00      	nop
 8005598:	e008      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        break;
 800559a:	bf00      	nop
 800559c:	e006      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
        break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <DMA_CheckFifoParam+0xe8>
    break;
 80055aa:	bf00      	nop
    }
  }

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop

080055bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a38      	ldr	r2, [pc, #224]	@ (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a36      	ldr	r2, [pc, #216]	@ (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a33      	ldr	r2, [pc, #204]	@ (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a32      	ldr	r2, [pc, #200]	@ (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2f      	ldr	r2, [pc, #188]	@ (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2d      	ldr	r2, [pc, #180]	@ (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01a      	beq.n	800565a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3b08      	subs	r3, #8
 800562c:	4a28      	ldr	r2, [pc, #160]	@ (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a24      	ldr	r2, [pc, #144]	@ (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005648:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005658:	e024      	b.n	80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	3b10      	subs	r3, #16
 8005662:	4a1e      	ldr	r2, [pc, #120]	@ (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4a1c      	ldr	r2, [pc, #112]	@ (80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d806      	bhi.n	8005682 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a1b      	ldr	r2, [pc, #108]	@ (80056e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d902      	bls.n	8005682 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3308      	adds	r3, #8
 8005680:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4b18      	ldr	r3, [pc, #96]	@ (80056e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a16      	ldr	r2, [pc, #88]	@ (80056ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005694:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	58025408 	.word	0x58025408
 80056b4:	5802541c 	.word	0x5802541c
 80056b8:	58025430 	.word	0x58025430
 80056bc:	58025444 	.word	0x58025444
 80056c0:	58025458 	.word	0x58025458
 80056c4:	5802546c 	.word	0x5802546c
 80056c8:	58025480 	.word	0x58025480
 80056cc:	58025494 	.word	0x58025494
 80056d0:	cccccccd 	.word	0xcccccccd
 80056d4:	16009600 	.word	0x16009600
 80056d8:	58025880 	.word	0x58025880
 80056dc:	aaaaaaab 	.word	0xaaaaaaab
 80056e0:	400204b8 	.word	0x400204b8
 80056e4:	4002040f 	.word	0x4002040f
 80056e8:	10008200 	.word	0x10008200
 80056ec:	40020880 	.word	0x40020880

080056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d04a      	beq.n	800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d847      	bhi.n	800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a25      	ldr	r2, [pc, #148]	@ (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a24      	ldr	r2, [pc, #144]	@ (80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	@ (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1f      	ldr	r2, [pc, #124]	@ (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	@ (80057c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4b17      	ldr	r3, [pc, #92]	@ (80057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005778:	671a      	str	r2, [r3, #112]	@ 0x70
 800577a:	e009      	b.n	8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4b14      	ldr	r3, [pc, #80]	@ (80057d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a11      	ldr	r2, [pc, #68]	@ (80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800578e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b01      	subs	r3, #1
 8005794:	2201      	movs	r2, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	58025408 	.word	0x58025408
 80057ac:	5802541c 	.word	0x5802541c
 80057b0:	58025430 	.word	0x58025430
 80057b4:	58025444 	.word	0x58025444
 80057b8:	58025458 	.word	0x58025458
 80057bc:	5802546c 	.word	0x5802546c
 80057c0:	58025480 	.word	0x58025480
 80057c4:	58025494 	.word	0x58025494
 80057c8:	1600963f 	.word	0x1600963f
 80057cc:	58025940 	.word	0x58025940
 80057d0:	1000823f 	.word	0x1000823f
 80057d4:	40020940 	.word	0x40020940

080057d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	@ 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057e6:	4b89      	ldr	r3, [pc, #548]	@ (8005a0c <HAL_GPIO_Init+0x234>)
 80057e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ea:	e194      	b.n	8005b16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	2101      	movs	r1, #1
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8186 	beq.w	8005b10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d005      	beq.n	800581c <HAL_GPIO_Init+0x44>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d130      	bne.n	800587e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005852:	2201      	movs	r2, #1
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0201 	and.w	r2, r3, #1
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b03      	cmp	r3, #3
 8005888:	d017      	beq.n	80058ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2203      	movs	r2, #3
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d123      	bne.n	800590e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	08da      	lsrs	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3208      	adds	r2, #8
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	220f      	movs	r2, #15
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	08da      	lsrs	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3208      	adds	r2, #8
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2203      	movs	r2, #3
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0203 	and.w	r2, r3, #3
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80e0 	beq.w	8005b10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005950:	4b2f      	ldr	r3, [pc, #188]	@ (8005a10 <HAL_GPIO_Init+0x238>)
 8005952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005956:	4a2e      	ldr	r2, [pc, #184]	@ (8005a10 <HAL_GPIO_Init+0x238>)
 8005958:	f043 0302 	orr.w	r3, r3, #2
 800595c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005960:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <HAL_GPIO_Init+0x238>)
 8005962:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596e:	4a29      	ldr	r2, [pc, #164]	@ (8005a14 <HAL_GPIO_Init+0x23c>)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a20      	ldr	r2, [pc, #128]	@ (8005a18 <HAL_GPIO_Init+0x240>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d052      	beq.n	8005a40 <HAL_GPIO_Init+0x268>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a1c <HAL_GPIO_Init+0x244>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d031      	beq.n	8005a06 <HAL_GPIO_Init+0x22e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <HAL_GPIO_Init+0x248>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02b      	beq.n	8005a02 <HAL_GPIO_Init+0x22a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <HAL_GPIO_Init+0x24c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d025      	beq.n	80059fe <HAL_GPIO_Init+0x226>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <HAL_GPIO_Init+0x250>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01f      	beq.n	80059fa <HAL_GPIO_Init+0x222>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_GPIO_Init+0x254>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d019      	beq.n	80059f6 <HAL_GPIO_Init+0x21e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a30 <HAL_GPIO_Init+0x258>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_GPIO_Init+0x21a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <HAL_GPIO_Init+0x25c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00d      	beq.n	80059ee <HAL_GPIO_Init+0x216>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_GPIO_Init+0x260>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <HAL_GPIO_Init+0x212>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a17      	ldr	r2, [pc, #92]	@ (8005a3c <HAL_GPIO_Init+0x264>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d101      	bne.n	80059e6 <HAL_GPIO_Init+0x20e>
 80059e2:	2309      	movs	r3, #9
 80059e4:	e02d      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059e6:	230a      	movs	r3, #10
 80059e8:	e02b      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059ea:	2308      	movs	r3, #8
 80059ec:	e029      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059ee:	2307      	movs	r3, #7
 80059f0:	e027      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059f2:	2306      	movs	r3, #6
 80059f4:	e025      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059f6:	2305      	movs	r3, #5
 80059f8:	e023      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059fa:	2304      	movs	r3, #4
 80059fc:	e021      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 80059fe:	2303      	movs	r3, #3
 8005a00:	e01f      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e01d      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e01b      	b.n	8005a42 <HAL_GPIO_Init+0x26a>
 8005a0a:	bf00      	nop
 8005a0c:	58000080 	.word	0x58000080
 8005a10:	58024400 	.word	0x58024400
 8005a14:	58000400 	.word	0x58000400
 8005a18:	58020000 	.word	0x58020000
 8005a1c:	58020400 	.word	0x58020400
 8005a20:	58020800 	.word	0x58020800
 8005a24:	58020c00 	.word	0x58020c00
 8005a28:	58021000 	.word	0x58021000
 8005a2c:	58021400 	.word	0x58021400
 8005a30:	58021800 	.word	0x58021800
 8005a34:	58021c00 	.word	0x58021c00
 8005a38:	58022000 	.word	0x58022000
 8005a3c:	58022400 	.word	0x58022400
 8005a40:	2300      	movs	r3, #0
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	f002 0203 	and.w	r2, r2, #3
 8005a48:	0092      	lsls	r2, r2, #2
 8005a4a:	4093      	lsls	r3, r2
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a52:	4938      	ldr	r1, [pc, #224]	@ (8005b34 <HAL_GPIO_Init+0x35c>)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	3302      	adds	r3, #2
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	3301      	adds	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f47f ae63 	bne.w	80057ec <HAL_GPIO_Init+0x14>
  }
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	3724      	adds	r7, #36	@ 0x24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	58000400 	.word	0x58000400

08005b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
 8005b44:	4613      	mov	r3, r2
 8005b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b48:	787b      	ldrb	r3, [r7, #1]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b54:	e003      	b.n	8005b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b56:	887b      	ldrh	r3, [r7, #2]
 8005b58:	041a      	lsls	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	619a      	str	r2, [r3, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e10d      	b.n	8005d9a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fd f94a 	bl	8002e2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d008      	beq.n	8005be0 <HAL_I2S_Init+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b06      	cmp	r3, #6
 8005bd4:	d004      	beq.n	8005be0 <HAL_I2S_Init+0x74>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b0a      	cmp	r3, #10
 8005bdc:	f040 8087 	bne.w	8005cee <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d05a      	beq.n	8005c9e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e001      	b.n	8005bfa <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b30      	cmp	r3, #48	@ 0x30
 8005c00:	d003      	beq.n	8005c0a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005c06:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c08:	d102      	bne.n	8005c10 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e001      	b.n	8005c14 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005c14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	f002 fadc 	bl	80081d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c20:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c2a:	d113      	bne.n	8005c54 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	3305      	adds	r3, #5
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e014      	b.n	8005c7e <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005c54:	2220      	movs	r2, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	461a      	mov	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	3305      	adds	r3, #5
 8005c7c:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4a48      	ldr	r2, [pc, #288]	@ (8005da4 <HAL_I2S_Init+0x238>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	08db      	lsrs	r3, r3, #3
 8005c88:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e003      	b.n	8005ca6 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_I2S_Init+0x146>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d002      	beq.n	8005cb8 <HAL_I2S_Init+0x14c>
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2bff      	cmp	r3, #255	@ 0xff
 8005cb6:	d907      	bls.n	8005cc8 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbc:	f043 0210 	orr.w	r2, r3, #16
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e068      	b.n	8005d9a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <HAL_I2S_Init+0x23c>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	0411      	lsls	r1, r2, #16
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	0612      	lsls	r2, r2, #24
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	430b      	orrs	r3, r1
 8005cec:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8005dac <HAL_I2S_Init+0x240>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6851      	ldr	r1, [r2, #4]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6892      	ldr	r2, [r2, #8]
 8005d00:	4311      	orrs	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68d2      	ldr	r2, [r2, #12]
 8005d06:	4311      	orrs	r1, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6992      	ldr	r2, [r2, #24]
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6a12      	ldr	r2, [r2, #32]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d18:	4311      	orrs	r1, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6912      	ldr	r2, [r2, #16]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8005d34:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d44:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d007      	beq.n	8005d74 <HAL_I2S_Init+0x208>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d003      	beq.n	8005d74 <HAL_I2S_Init+0x208>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b0a      	cmp	r3, #10
 8005d72:	d10a      	bne.n	8005d8a <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	cccccccd 	.word	0xcccccccd
 8005da8:	fe00ffff 	.word	0xfe00ffff
 8005dac:	fdff9040 	.word	0xfdff9040

08005db0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db8:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00a      	beq.n	8005dda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dc4:	4b16      	ldr	r3, [pc, #88]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d001      	beq.n	8005dd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e01f      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e01d      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dda:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 0207 	bic.w	r2, r3, #7
 8005de2:	490f      	ldr	r1, [pc, #60]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dea:	f7fd fca1 	bl	8003730 <HAL_GetTick>
 8005dee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005df2:	f7fd fc9d 	bl	8003730 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e00:	d901      	bls.n	8005e06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e007      	b.n	8005e16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_PWREx_ConfigSupply+0x70>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e12:	d1ee      	bne.n	8005df2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	58024800 	.word	0x58024800

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f000 bc48 	b.w	80066c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8088 	beq.w	8005f56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	4b99      	ldr	r3, [pc, #612]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e50:	4b96      	ldr	r3, [pc, #600]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d007      	beq.n	8005e6c <HAL_RCC_OscConfig+0x48>
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	2b18      	cmp	r3, #24
 8005e60:	d111      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d10c      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d06d      	beq.n	8005f54 <HAL_RCC_OscConfig+0x130>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d169      	bne.n	8005f54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f000 bc21 	b.w	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x7a>
 8005e90:	4b86      	ldr	r3, [pc, #536]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a85      	ldr	r2, [pc, #532]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e02e      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x9c>
 8005ea6:	4b81      	ldr	r3, [pc, #516]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a80      	ldr	r2, [pc, #512]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e01d      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005eca:	4b78      	ldr	r3, [pc, #480]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b75      	ldr	r3, [pc, #468]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a74      	ldr	r2, [pc, #464]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ee4:	4b71      	ldr	r3, [pc, #452]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a70      	ldr	r2, [pc, #448]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b6e      	ldr	r3, [pc, #440]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fd fc14 	bl	8003730 <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fc10 	bl	8003730 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e3d4      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e014      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fd fc00 	bl	8003730 <HAL_GetTick>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fd fbfc 	bl	8003730 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	@ 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e3c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f46:	4b59      	ldr	r3, [pc, #356]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x110>
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80ca 	beq.w	80060f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f64:	4b51      	ldr	r3, [pc, #324]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_RCC_OscConfig+0x166>
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b18      	cmp	r3, #24
 8005f7e:	d156      	bne.n	800602e <HAL_RCC_OscConfig+0x20a>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d151      	bne.n	800602e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8a:	4b48      	ldr	r3, [pc, #288]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e392      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fa2:	4b42      	ldr	r3, [pc, #264]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f023 0219 	bic.w	r2, r3, #25
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	493f      	ldr	r1, [pc, #252]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fd fbbc 	bl	8003730 <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fbc:	f7fd fbb8 	bl	8003730 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e37c      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fce:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fda:	f7fd fbd9 	bl	8003790 <HAL_GetREVID>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d817      	bhi.n	8006018 <HAL_RCC_OscConfig+0x1f4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d108      	bne.n	8006002 <HAL_RCC_OscConfig+0x1de>
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006000:	e07a      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	4b2a      	ldr	r3, [pc, #168]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	031b      	lsls	r3, r3, #12
 8006010:	4926      	ldr	r1, [pc, #152]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006012:	4313      	orrs	r3, r2
 8006014:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006016:	e06f      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006018:	4b24      	ldr	r3, [pc, #144]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	4921      	ldr	r1, [pc, #132]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006028:	4313      	orrs	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800602c:	e064      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d047      	beq.n	80060c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006036:	4b1d      	ldr	r3, [pc, #116]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 0219 	bic.w	r2, r3, #25
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	491a      	ldr	r1, [pc, #104]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fd fb72 	bl	8003730 <HAL_GetTick>
 800604c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006050:	f7fd fb6e 	bl	8003730 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e332      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	f7fd fb8f 	bl	8003790 <HAL_GetREVID>
 8006072:	4603      	mov	r3, r0
 8006074:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006078:	4293      	cmp	r3, r2
 800607a:	d819      	bhi.n	80060b0 <HAL_RCC_OscConfig+0x28c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	d108      	bne.n	8006096 <HAL_RCC_OscConfig+0x272>
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800608c:	4a07      	ldr	r2, [pc, #28]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006092:	6053      	str	r3, [r2, #4]
 8006094:	e030      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
 8006096:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	4901      	ldr	r1, [pc, #4]	@ (80060ac <HAL_RCC_OscConfig+0x288>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
 80060aa:	e025      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
 80060ac:	58024400 	.word	0x58024400
 80060b0:	4b9a      	ldr	r3, [pc, #616]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	4997      	ldr	r1, [pc, #604]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	e018      	b.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c6:	4b95      	ldr	r3, [pc, #596]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a94      	ldr	r2, [pc, #592]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fd fb2d 	bl	8003730 <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fd fb29 	bl	8003730 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e2ed      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060ec:	4b8b      	ldr	r3, [pc, #556]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a9 	beq.w	8006258 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006106:	4b85      	ldr	r3, [pc, #532]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006110:	4b82      	ldr	r3, [pc, #520]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d007      	beq.n	800612c <HAL_RCC_OscConfig+0x308>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b18      	cmp	r3, #24
 8006120:	d13a      	bne.n	8006198 <HAL_RCC_OscConfig+0x374>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d135      	bne.n	8006198 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800612c:	4b7b      	ldr	r3, [pc, #492]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_OscConfig+0x320>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b80      	cmp	r3, #128	@ 0x80
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e2c1      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006144:	f7fd fb24 	bl	8003790 <HAL_GetREVID>
 8006148:	4603      	mov	r3, r0
 800614a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800614e:	4293      	cmp	r3, r2
 8006150:	d817      	bhi.n	8006182 <HAL_RCC_OscConfig+0x35e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d108      	bne.n	800616c <HAL_RCC_OscConfig+0x348>
 800615a:	4b70      	ldr	r3, [pc, #448]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006162:	4a6e      	ldr	r2, [pc, #440]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006168:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800616a:	e075      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800616c:	4b6b      	ldr	r3, [pc, #428]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	069b      	lsls	r3, r3, #26
 800617a:	4968      	ldr	r1, [pc, #416]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006180:	e06a      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006182:	4b66      	ldr	r3, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	4962      	ldr	r1, [pc, #392]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006196:	e05f      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d042      	beq.n	8006226 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061a0:	4b5e      	ldr	r3, [pc, #376]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5d      	ldr	r2, [pc, #372]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fd fac0 	bl	8003730 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061b4:	f7fd fabc 	bl	8003730 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e280      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061c6:	4b55      	ldr	r3, [pc, #340]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061d2:	f7fd fadd 	bl	8003790 <HAL_GetREVID>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061dc:	4293      	cmp	r3, r2
 80061de:	d817      	bhi.n	8006210 <HAL_RCC_OscConfig+0x3ec>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d108      	bne.n	80061fa <HAL_RCC_OscConfig+0x3d6>
 80061e8:	4b4c      	ldr	r3, [pc, #304]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061f0:	4a4a      	ldr	r2, [pc, #296]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061f6:	6053      	str	r3, [r2, #4]
 80061f8:	e02e      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
 80061fa:	4b48      	ldr	r3, [pc, #288]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	069b      	lsls	r3, r3, #26
 8006208:	4944      	ldr	r1, [pc, #272]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800620a:	4313      	orrs	r3, r2
 800620c:	604b      	str	r3, [r1, #4]
 800620e:	e023      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
 8006210:	4b42      	ldr	r3, [pc, #264]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	493f      	ldr	r1, [pc, #252]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006220:	4313      	orrs	r3, r2
 8006222:	60cb      	str	r3, [r1, #12]
 8006224:	e018      	b.n	8006258 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006226:	4b3d      	ldr	r3, [pc, #244]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3c      	ldr	r2, [pc, #240]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800622c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fd fa7d 	bl	8003730 <HAL_GetTick>
 8006236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800623a:	f7fd fa79 	bl	8003730 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e23d      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800624c:	4b33      	ldr	r3, [pc, #204]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d036      	beq.n	80062d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626c:	4b2b      	ldr	r3, [pc, #172]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800626e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006270:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fd fa5a 	bl	8003730 <HAL_GetTick>
 800627c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006280:	f7fd fa56 	bl	8003730 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e21a      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006292:	4b22      	ldr	r3, [pc, #136]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x45c>
 800629e:	e018      	b.n	80062d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a0:	4b1e      	ldr	r3, [pc, #120]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fd fa40 	bl	8003730 <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b4:	f7fd fa3c 	bl	8003730 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e200      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c6:	4b15      	ldr	r3, [pc, #84]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d039      	beq.n	8006352 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01c      	beq.n	8006320 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 80062ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062f2:	f7fd fa1d 	bl	8003730 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062fa:	f7fd fa19 	bl	8003730 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1dd      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_RCC_OscConfig+0x4f8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x4d6>
 8006318:	e01b      	b.n	8006352 <HAL_RCC_OscConfig+0x52e>
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006320:	4b9b      	ldr	r3, [pc, #620]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a9a      	ldr	r2, [pc, #616]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800632c:	f7fd fa00 	bl	8003730 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006334:	f7fd f9fc 	bl	8003730 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006346:	4b92      	ldr	r3, [pc, #584]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8081 	beq.w	8006462 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006360:	4b8c      	ldr	r3, [pc, #560]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a8b      	ldr	r2, [pc, #556]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800636c:	f7fd f9e0 	bl	8003730 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006374:	f7fd f9dc 	bl	8003730 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	@ 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1a0      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006386:	4b83      	ldr	r3, [pc, #524]	@ (8006594 <HAL_RCC_OscConfig+0x770>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d106      	bne.n	80063a8 <HAL_RCC_OscConfig+0x584>
 800639a:	4b7d      	ldr	r3, [pc, #500]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639e:	4a7c      	ldr	r2, [pc, #496]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a6:	e02d      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10c      	bne.n	80063ca <HAL_RCC_OscConfig+0x5a6>
 80063b0:	4b77      	ldr	r3, [pc, #476]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	4a76      	ldr	r2, [pc, #472]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80063bc:	4b74      	ldr	r3, [pc, #464]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c0:	4a73      	ldr	r2, [pc, #460]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	f023 0304 	bic.w	r3, r3, #4
 80063c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c8:	e01c      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0x5c8>
 80063d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063d8:	f043 0304 	orr.w	r3, r3, #4
 80063dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80063de:	4b6c      	ldr	r3, [pc, #432]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ea:	e00b      	b.n	8006404 <HAL_RCC_OscConfig+0x5e0>
 80063ec:	4b68      	ldr	r3, [pc, #416]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f0:	4a67      	ldr	r2, [pc, #412]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f8:	4b65      	ldr	r3, [pc, #404]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fc:	4a64      	ldr	r2, [pc, #400]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d015      	beq.n	8006438 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640c:	f7fd f990 	bl	8003730 <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006412:	e00a      	b.n	800642a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006414:	f7fd f98c 	bl	8003730 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e14e      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800642a:	4b59      	ldr	r3, [pc, #356]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0ee      	beq.n	8006414 <HAL_RCC_OscConfig+0x5f0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fd f97a 	bl	8003730 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643e:	e00a      	b.n	8006456 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fd f976 	bl	8003730 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e138      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006456:	4b4e      	ldr	r3, [pc, #312]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ee      	bne.n	8006440 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 812d 	beq.w	80066c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800646c:	4b48      	ldr	r3, [pc, #288]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006474:	2b18      	cmp	r3, #24
 8006476:	f000 80bd 	beq.w	80065f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	2b02      	cmp	r3, #2
 8006480:	f040 809e 	bne.w	80065c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006484:	4b42      	ldr	r3, [pc, #264]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a41      	ldr	r2, [pc, #260]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800648e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fd f94e 	bl	8003730 <HAL_GetTick>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006498:	f7fd f94a 	bl	8003730 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e10e      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064aa:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b6:	4b36      	ldr	r3, [pc, #216]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ba:	4b37      	ldr	r3, [pc, #220]	@ (8006598 <HAL_RCC_OscConfig+0x774>)
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	430a      	orrs	r2, r1
 80064ca:	4931      	ldr	r1, [pc, #196]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	3b01      	subs	r3, #1
 80064e0:	025b      	lsls	r3, r3, #9
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	3b01      	subs	r3, #1
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	061b      	lsls	r3, r3, #24
 80064fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006500:	4923      	ldr	r1, [pc, #140]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006506:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	4a21      	ldr	r2, [pc, #132]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006512:	4b1f      	ldr	r3, [pc, #124]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006516:	4b21      	ldr	r3, [pc, #132]	@ (800659c <HAL_RCC_OscConfig+0x778>)
 8006518:	4013      	ands	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800651e:	00d2      	lsls	r2, r2, #3
 8006520:	491b      	ldr	r1, [pc, #108]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006526:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652a:	f023 020c 	bic.w	r2, r3, #12
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	4917      	ldr	r1, [pc, #92]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006538:	4b15      	ldr	r3, [pc, #84]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	f023 0202 	bic.w	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006544:	4912      	ldr	r1, [pc, #72]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800654a:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	4a10      	ldr	r2, [pc, #64]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006566:	4a0a      	ldr	r2, [pc, #40]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800656c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4a07      	ldr	r2, [pc, #28]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <HAL_RCC_OscConfig+0x76c>)
 8006580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006586:	f7fd f8d3 	bl	8003730 <HAL_GetTick>
 800658a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658c:	e011      	b.n	80065b2 <HAL_RCC_OscConfig+0x78e>
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
 8006594:	58024800 	.word	0x58024800
 8006598:	fffffc0c 	.word	0xfffffc0c
 800659c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fd f8c6 	bl	8003730 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e08a      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065b2:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x77c>
 80065be:	e082      	b.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a42      	ldr	r2, [pc, #264]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fd f8b0 	bl	8003730 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fd f8ac 	bl	8003730 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e070      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e6:	4b3a      	ldr	r3, [pc, #232]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x7b0>
 80065f2:	e068      	b.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065f4:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065fa:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	2b01      	cmp	r3, #1
 8006606:	d031      	beq.n	800666c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f003 0203 	and.w	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d12a      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d122      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d11a      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0a5b      	lsrs	r3, r3, #9
 800663a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006642:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d111      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d108      	bne.n	800666c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0e1b      	lsrs	r3, r3, #24
 800665e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006666:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e02b      	b.n	80066c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 8006672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800667a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d01f      	beq.n	80066c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006686:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	4a11      	ldr	r2, [pc, #68]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006692:	f7fd f84d 	bl	8003730 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006698:	bf00      	nop
 800669a:	f7fd f849 	bl	8003730 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d0f9      	beq.n	800669a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCC_OscConfig+0x8b0>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066b2:	00d2      	lsls	r2, r2, #3
 80066b4:	4906      	ldr	r1, [pc, #24]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066ba:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <HAL_RCC_OscConfig+0x8ac>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3730      	adds	r7, #48	@ 0x30
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	58024400 	.word	0x58024400
 80066d4:	ffff0007 	.word	0xffff0007

080066d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e19c      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b87      	ldr	r3, [pc, #540]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4985      	ldr	r1, [pc, #532]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b83      	ldr	r3, [pc, #524]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e184      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	4b7b      	ldr	r3, [pc, #492]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006738:	4b78      	ldr	r3, [pc, #480]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4975      	ldr	r1, [pc, #468]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	4b70      	ldr	r3, [pc, #448]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006766:	4b6d      	ldr	r3, [pc, #436]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	496a      	ldr	r1, [pc, #424]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b64      	ldr	r3, [pc, #400]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006794:	4b61      	ldr	r3, [pc, #388]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	495e      	ldr	r1, [pc, #376]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	4b59      	ldr	r3, [pc, #356]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067be:	429a      	cmp	r2, r3
 80067c0:	d908      	bls.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067c2:	4b56      	ldr	r3, [pc, #344]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4953      	ldr	r1, [pc, #332]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b4d      	ldr	r3, [pc, #308]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d908      	bls.n	8006802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b4a      	ldr	r3, [pc, #296]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f023 020f 	bic.w	r2, r3, #15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4947      	ldr	r1, [pc, #284]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d055      	beq.n	80068ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680e:	4b43      	ldr	r3, [pc, #268]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4940      	ldr	r1, [pc, #256]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006828:	4b3c      	ldr	r3, [pc, #240]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0f6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006840:	4b36      	ldr	r3, [pc, #216]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ea      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006858:	4b30      	ldr	r3, [pc, #192]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0de      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006868:	4b2c      	ldr	r3, [pc, #176]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0d6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006878:	4b28      	ldr	r3, [pc, #160]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f023 0207 	bic.w	r2, r3, #7
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4925      	ldr	r1, [pc, #148]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688a:	f7fc ff51 	bl	8003730 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006892:	f7fc ff4d 	bl	8003730 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0be      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a8:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1eb      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d208      	bcs.n	80068e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b11      	ldr	r3, [pc, #68]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f023 020f 	bic.w	r2, r3, #15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	490e      	ldr	r1, [pc, #56]	@ (800691c <HAL_RCC_ClockConfig+0x244>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d214      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 020f 	bic.w	r2, r3, #15
 80068fe:	4906      	ldr	r1, [pc, #24]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e086      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
 8006918:	52002000 	.word	0x52002000
 800691c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	4b3f      	ldr	r3, [pc, #252]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800693c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	4939      	ldr	r1, [pc, #228]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800696a:	4b31      	ldr	r3, [pc, #196]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	492e      	ldr	r1, [pc, #184]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	4b28      	ldr	r3, [pc, #160]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006994:	429a      	cmp	r2, r3
 8006996:	d208      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006998:	4b25      	ldr	r3, [pc, #148]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4922      	ldr	r1, [pc, #136]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d208      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4917      	ldr	r1, [pc, #92]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d8:	f000 f834 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	4912      	ldr	r1, [pc, #72]	@ (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a38 <HAL_RCC_ClockConfig+0x360>)
 8006a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a10:	4a0a      	ldr	r2, [pc, #40]	@ (8006a3c <HAL_RCC_ClockConfig+0x364>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x368>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fc fe3e 	bl	800369c <HAL_InitTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	0800f9b8 	.word	0x0800f9b8
 8006a38:	24000008 	.word	0x24000008
 8006a3c:	24000004 	.word	0x24000004
 8006a40:	2400000c 	.word	0x2400000c

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	@ 0x24
 8006a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a4a:	4bb3      	ldr	r3, [pc, #716]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	f200 8155 	bhi.w	8006d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006d03 	.word	0x08006d03
 8006a68:	08006d03 	.word	0x08006d03
 8006a6c:	08006d03 	.word	0x08006d03
 8006a70:	08006d03 	.word	0x08006d03
 8006a74:	08006d03 	.word	0x08006d03
 8006a78:	08006d03 	.word	0x08006d03
 8006a7c:	08006d03 	.word	0x08006d03
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006d03 	.word	0x08006d03
 8006a88:	08006d03 	.word	0x08006d03
 8006a8c:	08006d03 	.word	0x08006d03
 8006a90:	08006d03 	.word	0x08006d03
 8006a94:	08006d03 	.word	0x08006d03
 8006a98:	08006d03 	.word	0x08006d03
 8006a9c:	08006d03 	.word	0x08006d03
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006d03 	.word	0x08006d03
 8006aa8:	08006d03 	.word	0x08006d03
 8006aac:	08006d03 	.word	0x08006d03
 8006ab0:	08006d03 	.word	0x08006d03
 8006ab4:	08006d03 	.word	0x08006d03
 8006ab8:	08006d03 	.word	0x08006d03
 8006abc:	08006d03 	.word	0x08006d03
 8006ac0:	08006af7 	.word	0x08006af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac4:	4b94      	ldr	r3, [pc, #592]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad0:	4b91      	ldr	r3, [pc, #580]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a90      	ldr	r2, [pc, #576]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ae2:	e111      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae6:	61bb      	str	r3, [r7, #24]
      break;
 8006ae8:	e10e      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006aea:	4b8d      	ldr	r3, [pc, #564]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006aec:	61bb      	str	r3, [r7, #24]
      break;
 8006aee:	e10b      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006af0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006af2:	61bb      	str	r3, [r7, #24]
      break;
 8006af4:	e108      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af6:	4b88      	ldr	r3, [pc, #544]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b00:	4b85      	ldr	r3, [pc, #532]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b0c:	4b82      	ldr	r3, [pc, #520]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b16:	4b80      	ldr	r3, [pc, #512]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80e1 	beq.w	8006cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f000 8083 	beq.w	8006c48 <HAL_RCC_GetSysClockFreq+0x204>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f200 80a1 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x114>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d056      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b56:	e099      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b58:	4b6f      	ldr	r3, [pc, #444]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b64:	4b6c      	ldr	r3, [pc, #432]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b62      	ldr	r3, [pc, #392]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bbe:	e087      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b51      	ldr	r3, [pc, #324]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c02:	e065      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b40      	ldr	r3, [pc, #256]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c46:	e043      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c8a:	e021      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cd0:	4b11      	ldr	r3, [pc, #68]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cda:	3301      	adds	r3, #1
 8006cdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf4:	ee17 3a90 	vmov	r3, s15
 8006cf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cfa:	e005      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
      break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d02:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d04:	61bb      	str	r3, [r7, #24]
      break;
 8006d06:	bf00      	nop
  }

  return sysclockfreq;
 8006d08:	69bb      	ldr	r3, [r7, #24]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	@ 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	003d0900 	.word	0x003d0900
 8006d24:	00f42400 	.word	0x00f42400
 8006d28:	46000000 	.word	0x46000000
 8006d2c:	4c742400 	.word	0x4c742400
 8006d30:	4a742400 	.word	0x4a742400
 8006d34:	4b742400 	.word	0x4b742400

08006d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d3e:	f7ff fe81 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490f      	ldr	r1, [pc, #60]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4a09      	ldr	r2, [pc, #36]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	4a07      	ldr	r2, [pc, #28]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d76:	4a07      	ldr	r2, [pc, #28]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d7c:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	0800f9b8 	.word	0x0800f9b8
 8006d90:	24000008 	.word	0x24000008
 8006d94:	24000004 	.word	0x24000004

08006d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d9c:	f7ff ffcc 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	0800f9b8 	.word	0x0800f9b8

08006dc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc8:	b0ca      	sub	sp, #296	@ 0x128
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006de8:	2500      	movs	r5, #0
 8006dea:	ea54 0305 	orrs.w	r3, r4, r5
 8006dee:	d049      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dfa:	d02f      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006dfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e00:	d828      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e06:	d01a      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e0c:	d822      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e16:	d007      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e18:	e01c      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1a:	4bb8      	ldr	r3, [pc, #736]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	4ab7      	ldr	r2, [pc, #732]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e26:	e01a      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f002 fb61 	bl	80094f8 <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e3c:	e00f      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e42:	3328      	adds	r3, #40	@ 0x28
 8006e44:	2102      	movs	r1, #2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 fc08 	bl	800965c <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e66:	4ba5      	ldr	r3, [pc, #660]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e74:	4aa1      	ldr	r2, [pc, #644]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e7a:	e003      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e90:	f04f 0900 	mov.w	r9, #0
 8006e94:	ea58 0309 	orrs.w	r3, r8, r9
 8006e98:	d047      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d82a      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ecf 	.word	0x08006ecf
 8006eb4:	08006ee5 	.word	0x08006ee5
 8006eb8:	08006f03 	.word	0x08006f03
 8006ebc:	08006f03 	.word	0x08006f03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	4a8d      	ldr	r2, [pc, #564]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e01a      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f002 fb0e 	bl	80094f8 <RCCEx_PLL2_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e00f      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	3328      	adds	r3, #40	@ 0x28
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f002 fbb5 	bl	800965c <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e004      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f00:	e000      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	f023 0107 	bic.w	r1, r3, #7
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1a:	4a78      	ldr	r2, [pc, #480]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006f36:	f04f 0b00 	mov.w	fp, #0
 8006f3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006f3e:	d04c      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4a:	d030      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f50:	d829      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f54:	d02d      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f58:	d825      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f5a:	2b80      	cmp	r3, #128	@ 0x80
 8006f5c:	d018      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006f5e:	2b80      	cmp	r3, #128	@ 0x80
 8006f60:	d821      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006f66:	2b40      	cmp	r3, #64	@ 0x40
 8006f68:	d007      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006f6a:	e01c      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b63      	ldr	r3, [pc, #396]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	4a62      	ldr	r2, [pc, #392]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f78:	e01c      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	3308      	adds	r3, #8
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 fab8 	bl	80094f8 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f8e:	e011      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	3328      	adds	r3, #40	@ 0x28
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 fb5f 	bl	800965c <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fc0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fca:	4a4c      	ldr	r2, [pc, #304]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fd0:	e003      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006fe6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006fea:	2300      	movs	r3, #0
 8006fec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006ff0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	d053      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007006:	d035      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800700c:	d82e      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800700e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007012:	d031      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007014:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007018:	d828      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800701a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800701e:	d01a      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007024:	d822      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800702a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800702e:	d007      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007030:	e01c      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007032:	4b32      	ldr	r3, [pc, #200]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a31      	ldr	r2, [pc, #196]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800703e:	e01c      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	3308      	adds	r3, #8
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f002 fa55 	bl	80094f8 <RCCEx_PLL2_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007054:	e011      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	3328      	adds	r3, #40	@ 0x28
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fafc 	bl	800965c <RCCEx_PLL3_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800706a:	e006      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007072:	e002      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10b      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007082:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007092:	4a1a      	ldr	r2, [pc, #104]	@ (80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007094:	430b      	orrs	r3, r1
 8007096:	6593      	str	r3, [r2, #88]	@ 0x58
 8007098:	e003      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80070b2:	2300      	movs	r3, #0
 80070b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80070bc:	460b      	mov	r3, r1
 80070be:	4313      	orrs	r3, r2
 80070c0:	d056      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070ce:	d038      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80070d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070d4:	d831      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070da:	d034      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80070dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070e0:	d82b      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e6:	d01d      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80070e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ec:	d825      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80070f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070f6:	d00a      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80070f8:	e01f      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4ba2      	ldr	r3, [pc, #648]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4aa1      	ldr	r2, [pc, #644]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800710c:	e01c      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	3308      	adds	r3, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f002 f9ee 	bl	80094f8 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007122:	e011      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	3328      	adds	r3, #40	@ 0x28
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f002 fa95 	bl	800965c <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007150:	4b8e      	ldr	r3, [pc, #568]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007154:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007160:	4a8a      	ldr	r2, [pc, #552]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007162:	430b      	orrs	r3, r1
 8007164:	6593      	str	r3, [r2, #88]	@ 0x58
 8007166:	e003      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800716c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800717c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007186:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d03a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007196:	2b30      	cmp	r3, #48	@ 0x30
 8007198:	d01f      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800719a:	2b30      	cmp	r3, #48	@ 0x30
 800719c:	d819      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d00c      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d815      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d019      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d111      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ae:	4b77      	ldr	r3, [pc, #476]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	4a76      	ldr	r2, [pc, #472]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071ba:	e011      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	3308      	adds	r3, #8
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 f997 	bl	80094f8 <RCCEx_PLL2_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80071d0:	e006      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80071de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071e8:	4b68      	ldr	r3, [pc, #416]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f6:	4a65      	ldr	r2, [pc, #404]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071fc:	e003      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007212:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800721c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d051      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800722c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007230:	d035      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007236:	d82e      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800723c:	d031      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800723e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007242:	d828      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007248:	d01a      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800724a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800724e:	d822      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007258:	d007      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800725a:	e01c      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4b4b      	ldr	r3, [pc, #300]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	4a4a      	ldr	r2, [pc, #296]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007268:	e01c      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	3308      	adds	r3, #8
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f002 f940 	bl	80094f8 <RCCEx_PLL2_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800727e:	e011      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	3328      	adds	r3, #40	@ 0x28
 8007286:	2100      	movs	r1, #0
 8007288:	4618      	mov	r0, r3
 800728a:	f002 f9e7 	bl	800965c <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007294:	e006      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80072a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072ac:	4b37      	ldr	r3, [pc, #220]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ba:	4a34      	ldr	r2, [pc, #208]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072bc:	430b      	orrs	r3, r1
 80072be:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c0:	e003      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072da:	2300      	movs	r3, #0
 80072dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80072e4:	460b      	mov	r3, r1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	d056      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f4:	d033      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80072f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072fa:	d82c      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80072fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007300:	d02f      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007302:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007306:	d826      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800730c:	d02b      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800730e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007312:	d820      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007318:	d012      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800731a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800731e:	d81a      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007328:	d115      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	3308      	adds	r3, #8
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f002 f8e0 	bl	80094f8 <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800733e:	e015      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	3328      	adds	r3, #40	@ 0x28
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f002 f987 	bl	800965c <RCCEx_PLL3_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007354:	e00a      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800735e:	bf00      	nop
 8007360:	e004      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007362:	bf00      	nop
 8007364:	e002      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800736a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007378:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007382:	4a02      	ldr	r2, [pc, #8]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007384:	430b      	orrs	r3, r1
 8007386:	6513      	str	r3, [r2, #80]	@ 0x50
 8007388:	e006      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073a8:	2300      	movs	r3, #0
 80073aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4313      	orrs	r3, r2
 80073b6:	d055      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073c4:	d033      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80073c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ca:	d82c      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d0:	d02f      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d826      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073dc:	d02b      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80073de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073e2:	d820      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e8:	d012      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80073ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ee:	d81a      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d022      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80073f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f8:	d115      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	3308      	adds	r3, #8
 8007400:	2101      	movs	r1, #1
 8007402:	4618      	mov	r0, r3
 8007404:	f002 f878 	bl	80094f8 <RCCEx_PLL2_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800740e:	e015      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007414:	3328      	adds	r3, #40	@ 0x28
 8007416:	2101      	movs	r1, #1
 8007418:	4618      	mov	r0, r3
 800741a:	f002 f91f 	bl	800965c <RCCEx_PLL3_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007424:	e00a      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800742c:	e006      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800742e:	bf00      	nop
 8007430:	e004      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007432:	bf00      	nop
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800743a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007444:	4ba3      	ldr	r3, [pc, #652]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007448:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007454:	4a9f      	ldr	r2, [pc, #636]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007456:	430b      	orrs	r3, r1
 8007458:	6593      	str	r3, [r2, #88]	@ 0x58
 800745a:	e003      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800747a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800747e:	460b      	mov	r3, r1
 8007480:	4313      	orrs	r3, r2
 8007482:	d037      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748e:	d00e      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007494:	d816      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d018      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749e:	d111      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a0:	4b8c      	ldr	r3, [pc, #560]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	4a8b      	ldr	r2, [pc, #556]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ac:	e00f      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	3308      	adds	r3, #8
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f002 f81e 	bl	80094f8 <RCCEx_PLL2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074c2:	e004      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ca:	e000      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80074cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074d6:	4b7f      	ldr	r3, [pc, #508]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	4a7b      	ldr	r2, [pc, #492]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e6:	430b      	orrs	r3, r1
 80074e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80074ea:	e003      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800750a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800750e:	460b      	mov	r3, r1
 8007510:	4313      	orrs	r3, r2
 8007512:	d039      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751a:	2b03      	cmp	r3, #3
 800751c:	d81c      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800751e:	a201      	add	r2, pc, #4	@ (adr r2, 8007524 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	08007561 	.word	0x08007561
 8007528:	08007535 	.word	0x08007535
 800752c:	08007543 	.word	0x08007543
 8007530:	08007561 	.word	0x08007561
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007534:	4b67      	ldr	r3, [pc, #412]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	4a66      	ldr	r2, [pc, #408]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800753a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007540:	e00f      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3308      	adds	r3, #8
 8007548:	2102      	movs	r1, #2
 800754a:	4618      	mov	r0, r3
 800754c:	f001 ffd4 	bl	80094f8 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007556:	e004      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800755e:	e000      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800756a:	4b5a      	ldr	r3, [pc, #360]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756e:	f023 0103 	bic.w	r1, r3, #3
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007578:	4a56      	ldr	r2, [pc, #344]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757a:	430b      	orrs	r3, r1
 800757c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007598:	2300      	movs	r3, #0
 800759a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800759e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80075a2:	460b      	mov	r3, r1
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f000 809f 	beq.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075aa:	4b4b      	ldr	r3, [pc, #300]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a4a      	ldr	r2, [pc, #296]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075b6:	f7fc f8bb 	bl	8003730 <HAL_GetTick>
 80075ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075be:	e00b      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c0:	f7fc f8b6 	bl	8003730 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b64      	cmp	r3, #100	@ 0x64
 80075ce:	d903      	bls.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d6:	e005      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d8:	4b3f      	ldr	r3, [pc, #252]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0ed      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80075e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d179      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075ec:	4b39      	ldr	r3, [pc, #228]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075f8:	4053      	eors	r3, r2
 80075fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d015      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007602:	4b34      	ldr	r3, [pc, #208]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800760e:	4b31      	ldr	r3, [pc, #196]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007612:	4a30      	ldr	r2, [pc, #192]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007618:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800761a:	4b2e      	ldr	r3, [pc, #184]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800761c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761e:	4a2d      	ldr	r2, [pc, #180]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007624:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007626:	4a2b      	ldr	r2, [pc, #172]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800762c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763a:	d118      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fc f878 	bl	8003730 <HAL_GetTick>
 8007640:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007644:	e00d      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007646:	f7fc f873 	bl	8003730 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007650:	1ad2      	subs	r2, r2, r3
 8007652:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007656:	429a      	cmp	r2, r3
 8007658:	d903      	bls.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007660:	e005      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007662:	4b1c      	ldr	r3, [pc, #112]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0eb      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007672:	2b00      	cmp	r3, #0
 8007674:	d129      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800767e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007686:	d10e      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007688:	4b12      	ldr	r3, [pc, #72]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007698:	091a      	lsrs	r2, r3, #4
 800769a:	4b10      	ldr	r3, [pc, #64]	@ (80076dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800769c:	4013      	ands	r3, r2
 800769e:	4a0d      	ldr	r2, [pc, #52]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6113      	str	r3, [r2, #16]
 80076a4:	e005      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	4a0a      	ldr	r2, [pc, #40]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076b0:	6113      	str	r3, [r2, #16]
 80076b2:	4b08      	ldr	r3, [pc, #32]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c2:	4a04      	ldr	r2, [pc, #16]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076c8:	e00e      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80076d2:	e009      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80076d4:	58024400 	.word	0x58024400
 80076d8:	58024800 	.word	0x58024800
 80076dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f002 0301 	and.w	r3, r2, #1
 80076f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	f000 8089 	beq.w	800781c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007710:	2b28      	cmp	r3, #40	@ 0x28
 8007712:	d86b      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	080077f5 	.word	0x080077f5
 8007720:	080077ed 	.word	0x080077ed
 8007724:	080077ed 	.word	0x080077ed
 8007728:	080077ed 	.word	0x080077ed
 800772c:	080077ed 	.word	0x080077ed
 8007730:	080077ed 	.word	0x080077ed
 8007734:	080077ed 	.word	0x080077ed
 8007738:	080077ed 	.word	0x080077ed
 800773c:	080077c1 	.word	0x080077c1
 8007740:	080077ed 	.word	0x080077ed
 8007744:	080077ed 	.word	0x080077ed
 8007748:	080077ed 	.word	0x080077ed
 800774c:	080077ed 	.word	0x080077ed
 8007750:	080077ed 	.word	0x080077ed
 8007754:	080077ed 	.word	0x080077ed
 8007758:	080077ed 	.word	0x080077ed
 800775c:	080077d7 	.word	0x080077d7
 8007760:	080077ed 	.word	0x080077ed
 8007764:	080077ed 	.word	0x080077ed
 8007768:	080077ed 	.word	0x080077ed
 800776c:	080077ed 	.word	0x080077ed
 8007770:	080077ed 	.word	0x080077ed
 8007774:	080077ed 	.word	0x080077ed
 8007778:	080077ed 	.word	0x080077ed
 800777c:	080077f5 	.word	0x080077f5
 8007780:	080077ed 	.word	0x080077ed
 8007784:	080077ed 	.word	0x080077ed
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080077ed 	.word	0x080077ed
 8007790:	080077ed 	.word	0x080077ed
 8007794:	080077ed 	.word	0x080077ed
 8007798:	080077ed 	.word	0x080077ed
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077ed 	.word	0x080077ed
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077ed 	.word	0x080077ed
 80077b4:	080077ed 	.word	0x080077ed
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	080077f5 	.word	0x080077f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	3308      	adds	r3, #8
 80077c6:	2101      	movs	r1, #1
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 fe95 	bl	80094f8 <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077d4:	e00f      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	3328      	adds	r3, #40	@ 0x28
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 ff3c 	bl	800965c <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077ea:	e004      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80077f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077fe:	4bbf      	ldr	r3, [pc, #764]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007802:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800780c:	4abb      	ldr	r2, [pc, #748]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800780e:	430b      	orrs	r3, r1
 8007810:	6553      	str	r3, [r2, #84]	@ 0x54
 8007812:	e003      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f002 0302 	and.w	r3, r2, #2
 8007828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800782c:	2300      	movs	r3, #0
 800782e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007832:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007836:	460b      	mov	r3, r1
 8007838:	4313      	orrs	r3, r2
 800783a:	d041      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007842:	2b05      	cmp	r3, #5
 8007844:	d824      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007846:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007899 	.word	0x08007899
 8007850:	08007865 	.word	0x08007865
 8007854:	0800787b 	.word	0x0800787b
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	3308      	adds	r3, #8
 800786a:	2101      	movs	r1, #1
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fe43 	bl	80094f8 <RCCEx_PLL2_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	3328      	adds	r3, #40	@ 0x28
 8007880:	2101      	movs	r1, #1
 8007882:	4618      	mov	r0, r3
 8007884:	f001 feea 	bl	800965c <RCCEx_PLL3_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800788e:	e004      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078a2:	4b96      	ldr	r3, [pc, #600]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a6:	f023 0107 	bic.w	r1, r3, #7
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b0:	4a92      	ldr	r2, [pc, #584]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f002 0304 	and.w	r3, r2, #4
 80078cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d044      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	d825      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80078ec:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007941 	.word	0x08007941
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007923 	.word	0x08007923
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	3308      	adds	r3, #8
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fdef 	bl	80094f8 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007920:	e00f      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	3328      	adds	r3, #40	@ 0x28
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fe96 	bl	800965c <RCCEx_PLL3_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007936:	e004      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800794a:	4b6c      	ldr	r3, [pc, #432]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794e:	f023 0107 	bic.w	r1, r3, #7
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800795a:	4a68      	ldr	r2, [pc, #416]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800795c:	430b      	orrs	r3, r1
 800795e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007960:	e003      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f002 0320 	and.w	r3, r2, #32
 8007976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007984:	460b      	mov	r3, r1
 8007986:	4313      	orrs	r3, r2
 8007988:	d055      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007996:	d033      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800799c:	d82c      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a2:	d02f      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a8:	d826      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079ae:	d02b      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80079b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079b4:	d820      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ba:	d012      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c0:	d81a      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d022      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80079c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ca:	d115      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	3308      	adds	r3, #8
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fd8f 	bl	80094f8 <RCCEx_PLL2_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e0:	e015      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	3328      	adds	r3, #40	@ 0x28
 80079e8:	2102      	movs	r1, #2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fe36 	bl	800965c <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079f6:	e00a      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079fe:	e006      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a16:	4b39      	ldr	r3, [pc, #228]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	4a35      	ldr	r2, [pc, #212]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a2c:	e003      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a46:	2300      	movs	r3, #0
 8007a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4313      	orrs	r3, r2
 8007a54:	d058      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a62:	d033      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007a64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a68:	d82c      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6e:	d02f      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a74:	d826      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a7a:	d02b      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a80:	d820      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a86:	d012      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a8c:	d81a      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d022      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a96:	d115      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fd29 	bl	80094f8 <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aac:	e015      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab2:	3328      	adds	r3, #40	@ 0x28
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 fdd0 	bl	800965c <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ac2:	e00a      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aca:	e006      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007acc:	bf00      	nop
 8007ace:	e004      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ad0:	bf00      	nop
 8007ad2:	e002      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10e      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ae2:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007af2:	4a02      	ldr	r2, [pc, #8]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007af4:	430b      	orrs	r3, r1
 8007af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b22:	460b      	mov	r3, r1
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d055      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b34:	d033      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007b36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b3a:	d82c      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b40:	d02f      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b46:	d826      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b4c:	d02b      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007b4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b52:	d820      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b58:	d012      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b5e:	d81a      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d022      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b68:	d115      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fcc0 	bl	80094f8 <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b7e:	e015      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	3328      	adds	r3, #40	@ 0x28
 8007b86:	2102      	movs	r1, #2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 fd67 	bl	800965c <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b94:	e00a      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b9c:	e006      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e004      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ba2:	bf00      	nop
 8007ba4:	e002      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bc4:	4a9d      	ldr	r2, [pc, #628]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f002 0308 	and.w	r3, r2, #8
 8007be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	d01e      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	3328      	adds	r3, #40	@ 0x28
 8007c08:	2102      	movs	r1, #2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fd26 	bl	800965c <RCCEx_PLL3_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c1c:	4b87      	ldr	r3, [pc, #540]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c2c:	4a83      	ldr	r2, [pc, #524]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f002 0310 	and.w	r3, r2, #16
 8007c3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d01e      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c5e:	d10c      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	3328      	adds	r3, #40	@ 0x28
 8007c66:	2102      	movs	r1, #2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fcf7 	bl	800965c <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c7a:	4b70      	ldr	r3, [pc, #448]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ca6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007caa:	460b      	mov	r3, r1
 8007cac:	4313      	orrs	r3, r2
 8007cae:	d03e      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbc:	d022      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc2:	d81b      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007cce:	e015      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fc0d 	bl	80094f8 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	3328      	adds	r3, #40	@ 0x28
 8007cec:	2102      	movs	r1, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fcb4 	bl	800965c <RCCEx_PLL3_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d1e:	4a47      	ldr	r2, [pc, #284]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d24:	e003      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007d44:	460b      	mov	r3, r1
 8007d46:	4313      	orrs	r3, r2
 8007d48:	d03b      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d56:	d01f      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007d58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d5c:	d818      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007d64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d68:	d007      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007d6a:	e011      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6c:	4b33      	ldr	r3, [pc, #204]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	4a32      	ldr	r2, [pc, #200]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d78:	e00f      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3328      	adds	r3, #40	@ 0x28
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fc6a 	bl	800965c <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007da2:	4b26      	ldr	r3, [pc, #152]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db2:	4a22      	ldr	r2, [pc, #136]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007db8:	e003      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dce:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007dd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	d034      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dec:	d007      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007dee:	e011      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	4a11      	ldr	r2, [pc, #68]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007dfc:	e00e      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	3308      	adds	r3, #8
 8007e04:	2102      	movs	r1, #2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 fb76 	bl	80094f8 <RCCEx_PLL2_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e32:	4a02      	ldr	r2, [pc, #8]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e34:	430b      	orrs	r3, r1
 8007e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007e3a:	bf00      	nop
 8007e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e56:	2300      	movs	r3, #0
 8007e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d00c      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	3328      	adds	r3, #40	@ 0x28
 8007e6a:	2102      	movs	r1, #2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 fbf5 	bl	800965c <RCCEx_PLL3_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e94:	460b      	mov	r3, r1
 8007e96:	4313      	orrs	r3, r2
 8007e98:	d038      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea6:	d018      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eac:	d811      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb2:	d014      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb8:	d80b      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d011      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec4:	4bc3      	ldr	r3, [pc, #780]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	4ac2      	ldr	r2, [pc, #776]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eec:	4bb9      	ldr	r3, [pc, #740]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007efc:	4ab5      	ldr	r2, [pc, #724]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f22:	460b      	mov	r3, r1
 8007f24:	4313      	orrs	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f28:	4baa      	ldr	r3, [pc, #680]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	4aa7      	ldr	r2, [pc, #668]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d00a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f58:	4b9e      	ldr	r3, [pc, #632]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007f68:	4a9a      	ldr	r2, [pc, #616]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f8a:	4b92      	ldr	r3, [pc, #584]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f98:	4a8e      	ldr	r2, [pc, #568]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fac:	2300      	movs	r3, #0
 8007fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fb0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fba:	4b86      	ldr	r3, [pc, #536]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	4a85      	ldr	r2, [pc, #532]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fc4:	6113      	str	r3, [r2, #16]
 8007fc6:	4b83      	ldr	r3, [pc, #524]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fc8:	6919      	ldr	r1, [r3, #16]
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007fd2:	4a80      	ldr	r2, [pc, #512]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ff4:	4b77      	ldr	r3, [pc, #476]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008002:	4a74      	ldr	r2, [pc, #464]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008004:	430b      	orrs	r3, r1
 8008006:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008014:	633b      	str	r3, [r7, #48]	@ 0x30
 8008016:	2300      	movs	r3, #0
 8008018:	637b      	str	r3, [r7, #52]	@ 0x34
 800801a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800801e:	460b      	mov	r3, r1
 8008020:	4313      	orrs	r3, r2
 8008022:	d00a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008024:	4b6b      	ldr	r3, [pc, #428]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008028:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008034:	4a67      	ldr	r2, [pc, #412]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008036:	430b      	orrs	r3, r1
 8008038:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	2100      	movs	r1, #0
 8008044:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800804c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d011      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3308      	adds	r3, #8
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fa4a 	bl	80094f8 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	2100      	movs	r1, #0
 8008084:	6239      	str	r1, [r7, #32]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
 800808c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	3308      	adds	r3, #8
 800809c:	2101      	movs	r1, #1
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fa2a 	bl	80094f8 <RCCEx_PLL2_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	2100      	movs	r1, #0
 80080c4:	61b9      	str	r1, [r7, #24]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d011      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3308      	adds	r3, #8
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fa0a 	bl	80094f8 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	2100      	movs	r1, #0
 8008104:	6139      	str	r1, [r7, #16]
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d011      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	3328      	adds	r3, #40	@ 0x28
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fa9c 	bl	800965c <RCCEx_PLL3_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	2100      	movs	r1, #0
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008150:	460b      	mov	r3, r1
 8008152:	4313      	orrs	r3, r2
 8008154:	d011      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	3328      	adds	r3, #40	@ 0x28
 800815c:	2101      	movs	r1, #1
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fa7c 	bl	800965c <RCCEx_PLL3_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800816a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	2100      	movs	r1, #0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008190:	460b      	mov	r3, r1
 8008192:	4313      	orrs	r3, r2
 8008194:	d011      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	3328      	adds	r3, #40	@ 0x28
 800819c:	2102      	movs	r1, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fa5c 	bl	800965c <RCCEx_PLL3_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80081ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80081ce:	46bd      	mov	sp, r7
 80081d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d4:	58024400 	.word	0x58024400

080081d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b090      	sub	sp, #64	@ 0x40
 80081dc:	af00      	add	r7, sp, #0
 80081de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80081ea:	430b      	orrs	r3, r1
 80081ec:	f040 8094 	bne.w	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081f0:	4b9e      	ldr	r3, [pc, #632]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	f200 8087 	bhi.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008245 	.word	0x08008245
 8008210:	0800826d 	.word	0x0800826d
 8008214:	08008309 	.word	0x08008309
 8008218:	08008295 	.word	0x08008295
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800821c:	4b93      	ldr	r3, [pc, #588]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008224:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008228:	d108      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800822a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f810 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008238:	f000 bd45 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008240:	f000 bd41 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008244:	4b89      	ldr	r3, [pc, #548]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800824c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008250:	d108      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008252:	f107 0318 	add.w	r3, r7, #24
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fd54 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008260:	f000 bd31 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008268:	f000 bd2d 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800826c:	4b7f      	ldr	r3, [pc, #508]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008278:	d108      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fe94 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	f000 bd1d 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008290:	f000 bd19 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008294:	4b75      	ldr	r3, [pc, #468]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800829e:	4b73      	ldr	r3, [pc, #460]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b0:	4b6e      	ldr	r3, [pc, #440]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	08db      	lsrs	r3, r3, #3
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	4a6d      	ldr	r2, [pc, #436]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082c2:	e01f      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082c4:	4b69      	ldr	r3, [pc, #420]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d0:	d106      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082d8:	d102      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082da:	4b66      	ldr	r3, [pc, #408]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082de:	e011      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082e0:	4b62      	ldr	r3, [pc, #392]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ec:	d106      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f4:	d102      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082f6:	4b60      	ldr	r3, [pc, #384]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fa:	e003      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008300:	f000 bce1 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008304:	f000 bcdf 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008308:	4b5c      	ldr	r3, [pc, #368]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830c:	f000 bcdb 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008314:	f000 bcd7 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008320:	430b      	orrs	r3, r1
 8008322:	f040 80ad 	bne.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008326:	4b51      	ldr	r3, [pc, #324]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008336:	d056      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800833e:	f200 8090 	bhi.w	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	2bc0      	cmp	r3, #192	@ 0xc0
 8008346:	f000 8088 	beq.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	2bc0      	cmp	r3, #192	@ 0xc0
 800834e:	f200 8088 	bhi.w	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	2b80      	cmp	r3, #128	@ 0x80
 8008356:	d032      	beq.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	2b80      	cmp	r3, #128	@ 0x80
 800835c:	f200 8081 	bhi.w	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	2b40      	cmp	r3, #64	@ 0x40
 800836a:	d014      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800836c:	e079      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800836e:	4b3f      	ldr	r3, [pc, #252]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800837a:	d108      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800837c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008380:	4618      	mov	r0, r3
 8008382:	f000 ff67 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838a:	f000 bc9c 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008392:	f000 bc98 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008396:	4b35      	ldr	r3, [pc, #212]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800839e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083a2:	d108      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a4:	f107 0318 	add.w	r3, r7, #24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fcab 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b2:	f000 bc88 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ba:	f000 bc84 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083be:	4b2b      	ldr	r3, [pc, #172]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ca:	d108      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083cc:	f107 030c 	add.w	r3, r7, #12
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fdeb 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083da:	f000 bc74 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e2:	f000 bc70 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083e6:	4b21      	ldr	r3, [pc, #132]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f0:	4b1e      	ldr	r3, [pc, #120]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d10c      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80083fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008402:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	4a18      	ldr	r2, [pc, #96]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008414:	e01f      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008416:	4b15      	ldr	r3, [pc, #84]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008422:	d106      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842a:	d102      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800842c:	4b11      	ldr	r3, [pc, #68]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008430:	e011      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008432:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008448:	4b0b      	ldr	r3, [pc, #44]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008452:	f000 bc38 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008456:	f000 bc36 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800845a:	4b08      	ldr	r3, [pc, #32]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845e:	f000 bc32 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008466:	f000 bc2e 	b.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	03d09000 	.word	0x03d09000
 8008474:	003d0900 	.word	0x003d0900
 8008478:	00f42400 	.word	0x00f42400
 800847c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008488:	430b      	orrs	r3, r1
 800848a:	f040 809c 	bne.w	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800848e:	4b9e      	ldr	r3, [pc, #632]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008492:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008496:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800849e:	d054      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084a6:	f200 808b 	bhi.w	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084b0:	f000 8083 	beq.w	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084ba:	f200 8081 	bhi.w	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c4:	d02f      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084cc:	d878      	bhi.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084da:	d012      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80084dc:	e070      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084de:	4b8a      	ldr	r3, [pc, #552]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ea:	d107      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 feaf 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fa:	e3e4      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008500:	e3e1      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008502:	4b81      	ldr	r3, [pc, #516]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800850a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800850e:	d107      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008510:	f107 0318 	add.w	r3, r7, #24
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fbf5 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851e:	e3d2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e3cf      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008526:	4b78      	ldr	r3, [pc, #480]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800852e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008532:	d107      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008534:	f107 030c 	add.w	r3, r7, #12
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fd37 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008542:	e3c0      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008548:	e3bd      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800854a:	4b6f      	ldr	r3, [pc, #444]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800854c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008554:	4b6c      	ldr	r3, [pc, #432]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b04      	cmp	r3, #4
 800855e:	d10c      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008566:	4b68      	ldr	r3, [pc, #416]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	08db      	lsrs	r3, r3, #3
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	4a66      	ldr	r2, [pc, #408]	@ (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008572:	fa22 f303 	lsr.w	r3, r2, r3
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008578:	e01e      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800857a:	4b63      	ldr	r3, [pc, #396]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008586:	d106      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800858e:	d102      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008590:	4b5f      	ldr	r3, [pc, #380]	@ (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008594:	e010      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008596:	4b5c      	ldr	r3, [pc, #368]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085a2:	d106      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085aa:	d102      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085ac:	4b59      	ldr	r3, [pc, #356]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085b6:	e386      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085b8:	e385      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ba:	4b57      	ldr	r3, [pc, #348]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085be:	e382      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c4:	e37f      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085ce:	430b      	orrs	r3, r1
 80085d0:	f040 80a7 	bne.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80085dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e4:	d055      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085ec:	f200 8096 	bhi.w	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085f6:	f000 8084 	beq.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008600:	f200 808c 	bhi.w	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800860a:	d030      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008612:	f200 8083 	bhi.w	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008622:	d012      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008624:	e07a      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008626:	4b38      	ldr	r3, [pc, #224]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800862e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fe0b 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008642:	e340      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008648:	e33d      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800864a:	4b2f      	ldr	r3, [pc, #188]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008656:	d107      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008658:	f107 0318 	add.w	r3, r7, #24
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fb51 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e32e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866c:	e32b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800866e:	4b26      	ldr	r3, [pc, #152]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800867a:	d107      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fc93 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868a:	e31c      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008690:	e319      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008692:	4b1d      	ldr	r3, [pc, #116]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800869c:	4b1a      	ldr	r3, [pc, #104]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d10c      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ae:	4b16      	ldr	r3, [pc, #88]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	08db      	lsrs	r3, r3, #3
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	4a14      	ldr	r2, [pc, #80]	@ (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086ba:	fa22 f303 	lsr.w	r3, r2, r3
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c0:	e01e      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086c2:	4b11      	ldr	r3, [pc, #68]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ce:	d106      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d6:	d102      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086dc:	e010      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086de:	4b0a      	ldr	r3, [pc, #40]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ea:	d106      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f2:	d102      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f8:	e002      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086fe:	e2e2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008700:	e2e1      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008702:	4b05      	ldr	r3, [pc, #20]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008706:	e2de      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	003d0900 	.word	0x003d0900
 8008714:	00f42400 	.word	0x00f42400
 8008718:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008720:	e2d1      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008726:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800872a:	430b      	orrs	r3, r1
 800872c:	f040 809c 	bne.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008730:	4b93      	ldr	r3, [pc, #588]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008734:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008738:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008740:	d054      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008748:	f200 808b 	bhi.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008752:	f000 8083 	beq.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008758:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800875c:	f200 8081 	bhi.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008766:	d02f      	beq.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800876e:	d878      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800877c:	d012      	beq.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800877e:	e070      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008780:	4b7f      	ldr	r3, [pc, #508]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008788:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800878c:	d107      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800878e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fd5e 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879c:	e293      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a2:	e290      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087a4:	4b76      	ldr	r3, [pc, #472]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b0:	d107      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b2:	f107 0318 	add.w	r3, r7, #24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 faa4 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c0:	e281      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c6:	e27e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087c8:	4b6d      	ldr	r3, [pc, #436]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087d4:	d107      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fbe6 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e4:	e26f      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ea:	e26c      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087ec:	4b64      	ldr	r3, [pc, #400]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087f6:	4b62      	ldr	r3, [pc, #392]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d10c      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008808:	4b5d      	ldr	r3, [pc, #372]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	08db      	lsrs	r3, r3, #3
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	4a5c      	ldr	r2, [pc, #368]	@ (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800881a:	e01e      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800881c:	4b58      	ldr	r3, [pc, #352]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008828:	d106      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800882a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008830:	d102      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008832:	4b55      	ldr	r3, [pc, #340]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008836:	e010      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008838:	4b51      	ldr	r3, [pc, #324]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800884c:	d102      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800884e:	4b4f      	ldr	r3, [pc, #316]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008852:	e002      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008858:	e235      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800885a:	e234      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800885c:	4b4c      	ldr	r3, [pc, #304]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008860:	e231      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e22e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008870:	430b      	orrs	r3, r1
 8008872:	f040 808f 	bne.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008876:	4b42      	ldr	r3, [pc, #264]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800887a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800887e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008886:	d06b      	beq.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800888e:	d874      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008896:	d056      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800889e:	d86c      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088a6:	d03b      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088ae:	d864      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088b6:	d021      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088be:	d85c      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088cc:	d004      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80088ce:	e054      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80088d0:	f7fe fa62 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 80088d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088d6:	e1f6      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088d8:	4b29      	ldr	r3, [pc, #164]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e4:	d107      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fa0a 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f4:	e1e7      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fa:	e1e4      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088fc:	4b20      	ldr	r3, [pc, #128]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008908:	d107      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800890a:	f107 030c 	add.w	r3, r7, #12
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fb4c 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008918:	e1d5      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891e:	e1d2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008920:	4b17      	ldr	r3, [pc, #92]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d109      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800892c:	4b14      	ldr	r3, [pc, #80]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	08db      	lsrs	r3, r3, #3
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	4a13      	ldr	r2, [pc, #76]	@ (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893e:	e1c2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e1bf      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008946:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800894e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008952:	d102      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008954:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008958:	e1b5      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895e:	e1b2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800896c:	d102      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800896e:	4b07      	ldr	r3, [pc, #28]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008972:	e1a8      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e1a5      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897e:	e1a2      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008980:	58024400 	.word	0x58024400
 8008984:	03d09000 	.word	0x03d09000
 8008988:	003d0900 	.word	0x003d0900
 800898c:	00f42400 	.word	0x00f42400
 8008990:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800899c:	430b      	orrs	r3, r1
 800899e:	d173      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80089a0:	4b9c      	ldr	r3, [pc, #624]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b0:	d02f      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b8:	d863      	bhi.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089c6:	d012      	beq.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089c8:	e05b      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ca:	4b92      	ldr	r3, [pc, #584]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d6:	d107      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d8:	f107 0318 	add.w	r3, r7, #24
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 f991 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e6:	e16e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ec:	e16b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ee:	4b89      	ldr	r3, [pc, #548]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fa:	d107      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089fc:	f107 030c 	add.w	r3, r7, #12
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fad3 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0a:	e15c      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e159      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a12:	4b80      	ldr	r3, [pc, #512]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d10c      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a2e:	4b79      	ldr	r3, [pc, #484]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	08db      	lsrs	r3, r3, #3
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	4a77      	ldr	r2, [pc, #476]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a40:	e01e      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a42:	4b74      	ldr	r3, [pc, #464]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4e:	d106      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a56:	d102      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a58:	4b70      	ldr	r3, [pc, #448]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5c:	e010      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a72:	d102      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a74:	4b6a      	ldr	r3, [pc, #424]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a78:	e002      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a7e:	e122      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a80:	e121      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a86:	e11e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008a90:	430b      	orrs	r3, r1
 8008a92:	d133      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a94:	4b5f      	ldr	r3, [pc, #380]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aaa:	d012      	beq.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008aac:	e023      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aae:	4b59      	ldr	r3, [pc, #356]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fbc7 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aca:	e0fc      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e0f9      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ad2:	4b50      	ldr	r3, [pc, #320]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ade:	d107      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae0:	f107 0318 	add.w	r3, r7, #24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 f90d 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e0ea      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e0e7      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afa:	e0e4      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b04:	430b      	orrs	r3, r1
 8008b06:	f040 808d 	bne.w	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b0a:	4b42      	ldr	r3, [pc, #264]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b1a:	d06b      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b22:	d874      	bhi.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b2a:	d056      	beq.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b32:	d86c      	bhi.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b3a:	d03b      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b42:	d864      	bhi.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b4a:	d021      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b52:	d85c      	bhi.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d004      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b60:	d004      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008b62:	e054      	b.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b64:	f000 f8b8 	bl	8008cd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b6a:	e0ac      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b6c:	4b29      	ldr	r3, [pc, #164]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b78:	d107      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b7a:	f107 0318 	add.w	r3, r7, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f8c0 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b88:	e09d      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8e:	e09a      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b90:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b9c:	d107      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fa02 	bl	8008fac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bac:	e08b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb2:	e088      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bb4:	4b17      	ldr	r3, [pc, #92]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d109      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc0:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a13      	ldr	r2, [pc, #76]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd2:	e078      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd8:	e075      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bda:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008be8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bec:	e06b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf2:	e068      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bf4:	4b07      	ldr	r3, [pc, #28]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c00:	d102      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c02:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e05e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e05b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c12:	e058      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c14:	58024400 	.word	0x58024400
 8008c18:	03d09000 	.word	0x03d09000
 8008c1c:	003d0900 	.word	0x003d0900
 8008c20:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c28:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	d148      	bne.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c40:	d02a      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c48:	d838      	bhi.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d004      	beq.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c56:	d00d      	beq.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008c58:	e030      	b.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c66:	d102      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008c68:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c6c:	e02b      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c72:	e028      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c74:	4b16      	ldr	r3, [pc, #88]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c80:	d107      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fae4 	bl	8009254 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e019      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e016      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c98:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca6:	f107 0318 	add.w	r3, r7, #24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f82a 	bl	8008d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb4:	e007      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cba:	e004      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc0:	e001      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3740      	adds	r7, #64	@ 0x40
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	00f42400 	.word	0x00f42400

08008cd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cdc:	f7fe f82c 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	4b06      	ldr	r3, [pc, #24]	@ (8008cfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	091b      	lsrs	r3, r3, #4
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	4904      	ldr	r1, [pc, #16]	@ (8008d00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cee:	5ccb      	ldrb	r3, [r1, r3]
 8008cf0:	f003 031f 	and.w	r3, r3, #31
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	0800f9b8 	.word	0x0800f9b8

08008d04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b089      	sub	sp, #36	@ 0x24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d16:	4b9f      	ldr	r3, [pc, #636]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1a:	0b1b      	lsrs	r3, r3, #12
 8008d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d22:	4b9c      	ldr	r3, [pc, #624]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d26:	091b      	lsrs	r3, r3, #4
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008d2e:	4b99      	ldr	r3, [pc, #612]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d32:	08db      	lsrs	r3, r3, #3
 8008d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8111 	beq.w	8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	f000 8083 	beq.w	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	f200 80a1 	bhi.w	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d056      	beq.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d6e:	e099      	b.n	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d70:	4b88      	ldr	r3, [pc, #544]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d02d      	beq.n	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d7c:	4b85      	ldr	r3, [pc, #532]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	08db      	lsrs	r3, r3, #3
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	4a84      	ldr	r2, [pc, #528]	@ (8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d88:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	ee07 3a90 	vmov	s15, r3
 8008d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b7b      	ldr	r3, [pc, #492]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dd6:	e087      	b.n	8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b6a      	ldr	r3, [pc, #424]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	e065      	b.n	8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b59      	ldr	r3, [pc, #356]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e5e:	e043      	b.n	8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e72:	4b48      	ldr	r3, [pc, #288]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea2:	e021      	b.n	8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb6:	4b37      	ldr	r3, [pc, #220]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	0a5b      	lsrs	r3, r3, #9
 8008eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f0e:	ee17 2a90 	vmov	r2, s15
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f16:	4b1f      	ldr	r3, [pc, #124]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1a:	0c1b      	lsrs	r3, r3, #16
 8008f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f3c:	ee17 2a90 	vmov	r2, s15
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f44:	4b13      	ldr	r3, [pc, #76]	@ (8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	0e1b      	lsrs	r3, r3, #24
 8008f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6a:	ee17 2a90 	vmov	r2, s15
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f72:	e008      	b.n	8008f86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	609a      	str	r2, [r3, #8]
}
 8008f86:	bf00      	nop
 8008f88:	3724      	adds	r7, #36	@ 0x24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	58024400 	.word	0x58024400
 8008f98:	03d09000 	.word	0x03d09000
 8008f9c:	46000000 	.word	0x46000000
 8008fa0:	4c742400 	.word	0x4c742400
 8008fa4:	4a742400 	.word	0x4a742400
 8008fa8:	4b742400 	.word	0x4b742400

08008fac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b089      	sub	sp, #36	@ 0x24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008fbe:	4b9f      	ldr	r3, [pc, #636]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	0d1b      	lsrs	r3, r3, #20
 8008fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fca:	4b9c      	ldr	r3, [pc, #624]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	0a1b      	lsrs	r3, r3, #8
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008fd6:	4b99      	ldr	r3, [pc, #612]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8111 	beq.w	800921c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	f000 8083 	beq.w	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b02      	cmp	r3, #2
 8009006:	f200 80a1 	bhi.w	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d056      	beq.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009016:	e099      	b.n	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009018:	4b88      	ldr	r3, [pc, #544]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02d      	beq.n	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009024:	4b85      	ldr	r3, [pc, #532]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	08db      	lsrs	r3, r3, #3
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	4a84      	ldr	r2, [pc, #528]	@ (8009240 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009030:	fa22 f303 	lsr.w	r3, r2, r3
 8009034:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b7b      	ldr	r3, [pc, #492]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800907e:	e087      	b.n	8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b6a      	ldr	r3, [pc, #424]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	e065      	b.n	8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b59      	ldr	r3, [pc, #356]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009106:	e043      	b.n	8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911a:	4b48      	ldr	r3, [pc, #288]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912a:	ed97 6a03 	vldr	s12, [r7, #12]
 800912e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914a:	e021      	b.n	8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915e:	4b37      	ldr	r3, [pc, #220]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800918e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009190:	4b2a      	ldr	r3, [pc, #168]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009194:	0a5b      	lsrs	r3, r3, #9
 8009196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b6:	ee17 2a90 	vmov	r2, s15
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80091be:	4b1f      	ldr	r3, [pc, #124]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e4:	ee17 2a90 	vmov	r2, s15
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80091ec:	4b13      	ldr	r3, [pc, #76]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f0:	0e1b      	lsrs	r3, r3, #24
 80091f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009206:	edd7 6a07 	vldr	s13, [r7, #28]
 800920a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800920e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009212:	ee17 2a90 	vmov	r2, s15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800921a:	e008      	b.n	800922e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	3724      	adds	r7, #36	@ 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	46000000 	.word	0x46000000
 8009248:	4c742400 	.word	0x4c742400
 800924c:	4a742400 	.word	0x4a742400
 8009250:	4b742400 	.word	0x4b742400

08009254 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009254:	b480      	push	{r7}
 8009256:	b089      	sub	sp, #36	@ 0x24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800925c:	4ba0      	ldr	r3, [pc, #640]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800925e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009266:	4b9e      	ldr	r3, [pc, #632]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009270:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009272:	4b9b      	ldr	r3, [pc, #620]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800927c:	4b98      	ldr	r3, [pc, #608]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800927e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	fb02 f303 	mul.w	r3, r2, r3
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8111 	beq.w	80094c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	f000 8083 	beq.w	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	f200 80a1 	bhi.w	80093f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d056      	beq.n	800936a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092bc:	e099      	b.n	80093f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092be:	4b88      	ldr	r3, [pc, #544]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d02d      	beq.n	8009326 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ca:	4b85      	ldr	r3, [pc, #532]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	08db      	lsrs	r3, r3, #3
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	4a83      	ldr	r2, [pc, #524]	@ (80094e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092d6:	fa22 f303 	lsr.w	r3, r2, r3
 80092da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f4:	4b7a      	ldr	r3, [pc, #488]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009304:	ed97 6a03 	vldr	s12, [r7, #12]
 8009308:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800930c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009314:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009320:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009324:	e087      	b.n	8009436 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80094ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009338:	4b69      	ldr	r3, [pc, #420]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009348:	ed97 6a03 	vldr	s12, [r7, #12]
 800934c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009358:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800935c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009364:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009368:	e065      	b.n	8009436 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009374:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937c:	4b58      	ldr	r3, [pc, #352]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009390:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ac:	e043      	b.n	8009436 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c0:	4b47      	ldr	r3, [pc, #284]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f0:	e021      	b.n	8009436 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80094ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009404:	4b36      	ldr	r3, [pc, #216]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940c:	ee07 3a90 	vmov	s15, r3
 8009410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009414:	ed97 6a03 	vldr	s12, [r7, #12]
 8009418:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800941c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009430:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009434:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009436:	4b2a      	ldr	r3, [pc, #168]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800943a:	0a5b      	lsrs	r3, r3, #9
 800943c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009448:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800944c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009450:	edd7 6a07 	vldr	s13, [r7, #28]
 8009454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800945c:	ee17 2a90 	vmov	r2, s15
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009464:	4b1e      	ldr	r3, [pc, #120]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800947e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948a:	ee17 2a90 	vmov	r2, s15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009492:	4b13      	ldr	r3, [pc, #76]	@ (80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	0e1b      	lsrs	r3, r3, #24
 8009498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b8:	ee17 2a90 	vmov	r2, s15
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094c0:	e008      	b.n	80094d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	609a      	str	r2, [r3, #8]
}
 80094d4:	bf00      	nop
 80094d6:	3724      	adds	r7, #36	@ 0x24
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	58024400 	.word	0x58024400
 80094e4:	03d09000 	.word	0x03d09000
 80094e8:	46000000 	.word	0x46000000
 80094ec:	4c742400 	.word	0x4c742400
 80094f0:	4a742400 	.word	0x4a742400
 80094f4:	4b742400 	.word	0x4b742400

080094f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009506:	4b53      	ldr	r3, [pc, #332]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d101      	bne.n	8009516 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e099      	b.n	800964a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009516:	4b4f      	ldr	r3, [pc, #316]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a4e      	ldr	r2, [pc, #312]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800951c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009522:	f7fa f905 	bl	8003730 <HAL_GetTick>
 8009526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009528:	e008      	b.n	800953c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800952a:	f7fa f901 	bl	8003730 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d901      	bls.n	800953c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e086      	b.n	800964a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800953c:	4b45      	ldr	r3, [pc, #276]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1f0      	bne.n	800952a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009548:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	031b      	lsls	r3, r3, #12
 8009556:	493f      	ldr	r1, [pc, #252]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	628b      	str	r3, [r1, #40]	@ 0x28
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	3b01      	subs	r3, #1
 8009562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	3b01      	subs	r3, #1
 800956c:	025b      	lsls	r3, r3, #9
 800956e:	b29b      	uxth	r3, r3
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	3b01      	subs	r3, #1
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	3b01      	subs	r3, #1
 8009586:	061b      	lsls	r3, r3, #24
 8009588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800958c:	4931      	ldr	r1, [pc, #196]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800958e:	4313      	orrs	r3, r2
 8009590:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009592:	4b30      	ldr	r3, [pc, #192]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	492d      	ldr	r1, [pc, #180]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	f023 0220 	bic.w	r2, r3, #32
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	4928      	ldr	r1, [pc, #160]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095b6:	4b27      	ldr	r3, [pc, #156]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	4a26      	ldr	r2, [pc, #152]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095bc:	f023 0310 	bic.w	r3, r3, #16
 80095c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095c2:	4b24      	ldr	r3, [pc, #144]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095c6:	4b24      	ldr	r3, [pc, #144]	@ (8009658 <RCCEx_PLL2_Config+0x160>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	69d2      	ldr	r2, [r2, #28]
 80095ce:	00d2      	lsls	r2, r2, #3
 80095d0:	4920      	ldr	r1, [pc, #128]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095da:	4a1e      	ldr	r2, [pc, #120]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	f043 0310 	orr.w	r3, r3, #16
 80095e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	4a19      	ldr	r2, [pc, #100]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095f4:	e00f      	b.n	8009616 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d106      	bne.n	800960a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095fc:	4b15      	ldr	r3, [pc, #84]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009600:	4a14      	ldr	r2, [pc, #80]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009608:	e005      	b.n	8009616 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800960a:	4b12      	ldr	r3, [pc, #72]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	4a11      	ldr	r2, [pc, #68]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009616:	4b0f      	ldr	r3, [pc, #60]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a0e      	ldr	r2, [pc, #56]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800961c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009622:	f7fa f885 	bl	8003730 <HAL_GetTick>
 8009626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009628:	e008      	b.n	800963c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800962a:	f7fa f881 	bl	8003730 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d901      	bls.n	800963c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e006      	b.n	800964a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800963c:	4b05      	ldr	r3, [pc, #20]	@ (8009654 <RCCEx_PLL2_Config+0x15c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0f0      	beq.n	800962a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	58024400 	.word	0x58024400
 8009658:	ffff0007 	.word	0xffff0007

0800965c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800966a:	4b53      	ldr	r3, [pc, #332]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800966c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d101      	bne.n	800967a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e099      	b.n	80097ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800967a:	4b4f      	ldr	r3, [pc, #316]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a4e      	ldr	r2, [pc, #312]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009686:	f7fa f853 	bl	8003730 <HAL_GetTick>
 800968a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800968c:	e008      	b.n	80096a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800968e:	f7fa f84f 	bl	8003730 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e086      	b.n	80097ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096a0:	4b45      	ldr	r3, [pc, #276]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f0      	bne.n	800968e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096ac:	4b42      	ldr	r3, [pc, #264]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	051b      	lsls	r3, r3, #20
 80096ba:	493f      	ldr	r1, [pc, #252]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	628b      	str	r3, [r1, #40]	@ 0x28
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	025b      	lsls	r3, r3, #9
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	3b01      	subs	r3, #1
 80096dc:	041b      	lsls	r3, r3, #16
 80096de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	061b      	lsls	r3, r3, #24
 80096ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096f0:	4931      	ldr	r1, [pc, #196]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096f6:	4b30      	ldr	r3, [pc, #192]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	492d      	ldr	r1, [pc, #180]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009704:	4313      	orrs	r3, r2
 8009706:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009708:	4b2b      	ldr	r3, [pc, #172]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800970a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	4928      	ldr	r1, [pc, #160]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009716:	4313      	orrs	r3, r2
 8009718:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800971a:	4b27      	ldr	r3, [pc, #156]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	4a26      	ldr	r2, [pc, #152]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009726:	4b24      	ldr	r3, [pc, #144]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800972a:	4b24      	ldr	r3, [pc, #144]	@ (80097bc <RCCEx_PLL3_Config+0x160>)
 800972c:	4013      	ands	r3, r2
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	69d2      	ldr	r2, [r2, #28]
 8009732:	00d2      	lsls	r2, r2, #3
 8009734:	4920      	ldr	r1, [pc, #128]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009736:	4313      	orrs	r3, r2
 8009738:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800973a:	4b1f      	ldr	r3, [pc, #124]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	4a1e      	ldr	r2, [pc, #120]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009744:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800974c:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009750:	4a19      	ldr	r2, [pc, #100]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009752:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009758:	e00f      	b.n	800977a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d106      	bne.n	800976e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009760:	4b15      	ldr	r3, [pc, #84]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009764:	4a14      	ldr	r2, [pc, #80]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800976a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800976c:	e005      	b.n	800977a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800976e:	4b12      	ldr	r3, [pc, #72]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	4a11      	ldr	r2, [pc, #68]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009778:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800977a:	4b0f      	ldr	r3, [pc, #60]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a0e      	ldr	r2, [pc, #56]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 8009780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009786:	f7f9 ffd3 	bl	8003730 <HAL_GetTick>
 800978a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800978c:	e008      	b.n	80097a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800978e:	f7f9 ffcf 	bl	8003730 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b02      	cmp	r3, #2
 800979a:	d901      	bls.n	80097a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e006      	b.n	80097ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097a0:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <RCCEx_PLL3_Config+0x15c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f0      	beq.n	800978e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
 80097bc:	ffff0007 	.word	0xffff0007

080097c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e054      	b.n	800987c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7a5b      	ldrb	r3, [r3, #9]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d105      	bne.n	80097e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7f9 fbd8 	bl	8002f98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f023 0120 	bic.w	r1, r3, #32
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0204 	orr.w	r2, r2, #4
 8009812:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d104      	bne.n	800982c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e027      	b.n	800987c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800982c:	f7f9 ff80 	bl	8003730 <HAL_GetTick>
 8009830:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009832:	e015      	b.n	8009860 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009834:	f7f9 ff7c 	bl	8003730 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d90e      	bls.n	8009860 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b04      	cmp	r3, #4
 800984e:	d107      	bne.n	8009860 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2204      	movs	r2, #4
 8009854:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e00d      	b.n	800987c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b04      	cmp	r3, #4
 800986c:	d0e2      	beq.n	8009834 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e10f      	b.n	8009ab6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a87      	ldr	r2, [pc, #540]	@ (8009ac0 <HAL_SPI_Init+0x23c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d00f      	beq.n	80098c6 <HAL_SPI_Init+0x42>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a86      	ldr	r2, [pc, #536]	@ (8009ac4 <HAL_SPI_Init+0x240>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00a      	beq.n	80098c6 <HAL_SPI_Init+0x42>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a84      	ldr	r2, [pc, #528]	@ (8009ac8 <HAL_SPI_Init+0x244>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d005      	beq.n	80098c6 <HAL_SPI_Init+0x42>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	2b0f      	cmp	r3, #15
 80098c0:	d901      	bls.n	80098c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e0f7      	b.n	8009ab6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fb82 	bl	800afd0 <SPI_GetPacketSize>
 80098cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a7b      	ldr	r2, [pc, #492]	@ (8009ac0 <HAL_SPI_Init+0x23c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00c      	beq.n	80098f2 <HAL_SPI_Init+0x6e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a79      	ldr	r2, [pc, #484]	@ (8009ac4 <HAL_SPI_Init+0x240>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <HAL_SPI_Init+0x6e>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a78      	ldr	r2, [pc, #480]	@ (8009ac8 <HAL_SPI_Init+0x244>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d002      	beq.n	80098f2 <HAL_SPI_Init+0x6e>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d811      	bhi.n	8009916 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098f6:	4a72      	ldr	r2, [pc, #456]	@ (8009ac0 <HAL_SPI_Init+0x23c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d009      	beq.n	8009910 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a70      	ldr	r2, [pc, #448]	@ (8009ac4 <HAL_SPI_Init+0x240>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d004      	beq.n	8009910 <HAL_SPI_Init+0x8c>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a6f      	ldr	r2, [pc, #444]	@ (8009ac8 <HAL_SPI_Init+0x244>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d104      	bne.n	800991a <HAL_SPI_Init+0x96>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b10      	cmp	r3, #16
 8009914:	d901      	bls.n	800991a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e0cd      	b.n	8009ab6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7f9 fb6c 	bl	800300c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0201 	bic.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009956:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009960:	d119      	bne.n	8009996 <HAL_SPI_Init+0x112>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800996a:	d103      	bne.n	8009974 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10c      	bne.n	8009996 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009984:	d107      	bne.n	8009996 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009994:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00f      	beq.n	80099c2 <HAL_SPI_Init+0x13e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b06      	cmp	r3, #6
 80099a8:	d90b      	bls.n	80099c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e007      	b.n	80099d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69da      	ldr	r2, [r3, #28]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099da:	431a      	orrs	r2, r3
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e4:	ea42 0103 	orr.w	r1, r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a32:	ea42 0103 	orr.w	r1, r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d113      	bne.n	8009a72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	40013000 	.word	0x40013000
 8009ac4:	40003800 	.word	0x40003800
 8009ac8:	40003c00 	.word	0x40003c00

08009acc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3320      	adds	r3, #32
 8009ae2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ae4:	f7f9 fe24 	bl	8003730 <HAL_GetTick>
 8009ae8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d001      	beq.n	8009afa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009af6:	2302      	movs	r3, #2
 8009af8:	e1d1      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <HAL_SPI_Transmit+0x3a>
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e1c9      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_SPI_Transmit+0x4c>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e1c2      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2203      	movs	r2, #3
 8009b24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	88fa      	ldrh	r2, [r7, #6]
 8009b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	88fa      	ldrh	r2, [r7, #6]
 8009b42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009b70:	d108      	bne.n	8009b84 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e009      	b.n	8009b98 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b96:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	4b96      	ldr	r3, [pc, #600]	@ (8009df8 <HAL_SPI_Transmit+0x32c>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	88f9      	ldrh	r1, [r7, #6]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	6812      	ldr	r2, [r2, #0]
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bc4:	d107      	bne.n	8009bd6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b0f      	cmp	r3, #15
 8009bdc:	d947      	bls.n	8009c6e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bde:	e03f      	b.n	8009c60 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d114      	bne.n	8009c18 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c16:	e023      	b.n	8009c60 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c18:	f7f9 fd8a 	bl	8003730 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d803      	bhi.n	8009c30 <HAL_SPI_Transmit+0x164>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d102      	bne.n	8009c36 <HAL_SPI_Transmit+0x16a>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d114      	bne.n	8009c60 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f001 f8fc 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e11e      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1b9      	bne.n	8009be0 <HAL_SPI_Transmit+0x114>
 8009c6c:	e0f1      	b.n	8009e52 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	2b07      	cmp	r3, #7
 8009c74:	f240 80e6 	bls.w	8009e44 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c78:	e05d      	b.n	8009d36 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d132      	bne.n	8009cee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d918      	bls.n	8009cc6 <HAL_SPI_Transmit+0x1fa>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d014      	beq.n	8009cc6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b02      	subs	r3, #2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009cc4:	e037      	b.n	8009d36 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cca:	881a      	ldrh	r2, [r3, #0]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cd4:	1c9a      	adds	r2, r3, #2
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009cec:	e023      	b.n	8009d36 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cee:	f7f9 fd1f 	bl	8003730 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d803      	bhi.n	8009d06 <HAL_SPI_Transmit+0x23a>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d102      	bne.n	8009d0c <HAL_SPI_Transmit+0x240>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d114      	bne.n	8009d36 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f001 f891 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e0b3      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d19b      	bne.n	8009c7a <HAL_SPI_Transmit+0x1ae>
 8009d42:	e086      	b.n	8009e52 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d154      	bne.n	8009dfc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d918      	bls.n	8009d90 <HAL_SPI_Transmit+0x2c4>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d62:	2b40      	cmp	r3, #64	@ 0x40
 8009d64:	d914      	bls.n	8009d90 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b04      	subs	r3, #4
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d8e:	e059      	b.n	8009e44 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d917      	bls.n	8009dcc <HAL_SPI_Transmit+0x300>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d013      	beq.n	8009dcc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009da8:	881a      	ldrh	r2, [r3, #0]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db2:	1c9a      	adds	r2, r3, #2
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	3b02      	subs	r3, #2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009dca:	e03b      	b.n	8009e44 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3320      	adds	r3, #32
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009df6:	e025      	b.n	8009e44 <HAL_SPI_Transmit+0x378>
 8009df8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dfc:	f7f9 fc98 	bl	8003730 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d803      	bhi.n	8009e14 <HAL_SPI_Transmit+0x348>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d102      	bne.n	8009e1a <HAL_SPI_Transmit+0x34e>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d114      	bne.n	8009e44 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f001 f80a 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e02c      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f47f af79 	bne.w	8009d44 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2108      	movs	r1, #8
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f001 f889 	bl	800af74 <SPI_WaitOnFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e6e:	f043 0220 	orr.w	r2, r3, #32
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 ffdb 	bl	800ae34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e000      	b.n	8009e9e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop

08009ea8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3330      	adds	r3, #48	@ 0x30
 8009eca:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ecc:	f7f9 fc30 	bl	8003730 <HAL_GetTick>
 8009ed0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d001      	beq.n	8009ee2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e250      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <HAL_SPI_Receive+0x46>
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e248      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d101      	bne.n	8009f00 <HAL_SPI_Receive+0x58>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e241      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	88fa      	ldrh	r2, [r7, #6]
 8009f22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	88fa      	ldrh	r2, [r7, #6]
 8009f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009f58:	d108      	bne.n	8009f6c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e009      	b.n	8009f80 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009f7e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	4b95      	ldr	r3, [pc, #596]	@ (800a1dc <HAL_SPI_Receive+0x334>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	88f9      	ldrh	r1, [r7, #6]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	430b      	orrs	r3, r1
 8009f92:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fac:	d107      	bne.n	8009fbe <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fbc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	2b0f      	cmp	r3, #15
 8009fc4:	d96c      	bls.n	800a0a0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009fc6:	e064      	b.n	800a092 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d114      	bne.n	800a008 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fe6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009fe8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fee:	1d1a      	adds	r2, r3, #4
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a006:	e044      	b.n	800a092 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8bfa      	ldrh	r2, [r7, #30]
 800a012:	429a      	cmp	r2, r3
 800a014:	d919      	bls.n	800a04a <HAL_SPI_Receive+0x1a2>
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d014      	beq.n	800a04a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a028:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a02a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a030:	1d1a      	adds	r2, r3, #4
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a048:	e023      	b.n	800a092 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a04a:	f7f9 fb71 	bl	8003730 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d803      	bhi.n	800a062 <HAL_SPI_Receive+0x1ba>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a060:	d102      	bne.n	800a068 <HAL_SPI_Receive+0x1c0>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d114      	bne.n	800a092 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fee3 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e178      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d194      	bne.n	8009fc8 <HAL_SPI_Receive+0x120>
 800a09e:	e15e      	b.n	800a35e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	f240 8153 	bls.w	800a350 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a0aa:	e08f      	b.n	800a1cc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d114      	bne.n	800a0ec <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	8812      	ldrh	r2, [r2, #0]
 800a0ca:	b292      	uxth	r2, r2
 800a0cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d2:	1c9a      	adds	r2, r3, #2
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0ea:	e06f      	b.n	800a1cc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8bfa      	ldrh	r2, [r7, #30]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d924      	bls.n	800a144 <HAL_SPI_Receive+0x29c>
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d01f      	beq.n	800a144 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	8812      	ldrh	r2, [r2, #0]
 800a10c:	b292      	uxth	r2, r2
 800a10e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a114:	1c9a      	adds	r2, r3, #2
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	8812      	ldrh	r2, [r2, #0]
 800a122:	b292      	uxth	r2, r2
 800a124:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a12a:	1c9a      	adds	r2, r3, #2
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a136:	b29b      	uxth	r3, r3
 800a138:	3b02      	subs	r3, #2
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a142:	e043      	b.n	800a1cc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d119      	bne.n	800a184 <HAL_SPI_Receive+0x2dc>
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d014      	beq.n	800a184 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	8812      	ldrh	r2, [r2, #0]
 800a162:	b292      	uxth	r2, r2
 800a164:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a16a:	1c9a      	adds	r2, r3, #2
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a176:	b29b      	uxth	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a182:	e023      	b.n	800a1cc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a184:	f7f9 fad4 	bl	8003730 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d803      	bhi.n	800a19c <HAL_SPI_Receive+0x2f4>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d102      	bne.n	800a1a2 <HAL_SPI_Receive+0x2fa>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d114      	bne.n	800a1cc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fe46 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e0db      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f47f af69 	bne.w	800a0ac <HAL_SPI_Receive+0x204>
 800a1da:	e0c0      	b.n	800a35e <HAL_SPI_Receive+0x4b6>
 800a1dc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d117      	bne.n	800a226 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a224:	e094      	b.n	800a350 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	8bfa      	ldrh	r2, [r7, #30]
 800a230:	429a      	cmp	r2, r3
 800a232:	d946      	bls.n	800a2c2 <HAL_SPI_Receive+0x41a>
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d041      	beq.n	800a2c2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a24a:	7812      	ldrb	r2, [r2, #0]
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a282:	7812      	ldrb	r2, [r2, #0]
 800a284:	b2d2      	uxtb	r2, r2
 800a286:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	b2d2      	uxtb	r2, r2
 800a2a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2c0:	e046      	b.n	800a350 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d81c      	bhi.n	800a308 <HAL_SPI_Receive+0x460>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d017      	beq.n	800a308 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e4:	7812      	ldrb	r2, [r2, #0]
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a306:	e023      	b.n	800a350 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a308:	f7f9 fa12 	bl	8003730 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	429a      	cmp	r2, r3
 800a316:	d803      	bhi.n	800a320 <HAL_SPI_Receive+0x478>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d102      	bne.n	800a326 <HAL_SPI_Receive+0x47e>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d114      	bne.n	800a350 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fd84 	bl	800ae34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a332:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e019      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a356:	b29b      	uxth	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f47f af41 	bne.w	800a1e0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 fd68 	bl	800ae34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a382:	2300      	movs	r3, #0
  }
}
 800a384:	4618      	mov	r0, r3
 800a386:	3720      	adds	r7, #32
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	@ 0x38
 800a390:	af02      	add	r7, sp, #8
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3320      	adds	r3, #32
 800a3a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3330      	adds	r3, #48	@ 0x30
 800a3a8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3b6:	f7f9 f9bb 	bl	8003730 <HAL_GetTick>
 800a3ba:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a3bc:	887b      	ldrh	r3, [r7, #2]
 800a3be:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a3c0:	887b      	ldrh	r3, [r7, #2]
 800a3c2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d001      	beq.n	800a3d4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e310      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d005      	beq.n	800a3e6 <HAL_SPI_TransmitReceive+0x5a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_SPI_TransmitReceive+0x5a>
 800a3e0:	887b      	ldrh	r3, [r7, #2]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e305      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_SPI_TransmitReceive+0x6c>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e2fe      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2205      	movs	r2, #5
 800a404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	887a      	ldrh	r2, [r7, #2]
 800a41a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	887a      	ldrh	r2, [r7, #2]
 800a422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	887a      	ldrh	r2, [r7, #2]
 800a438:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a456:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a70      	ldr	r2, [pc, #448]	@ (800a620 <HAL_SPI_TransmitReceive+0x294>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d009      	beq.n	800a476 <HAL_SPI_TransmitReceive+0xea>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a6f      	ldr	r2, [pc, #444]	@ (800a624 <HAL_SPI_TransmitReceive+0x298>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d004      	beq.n	800a476 <HAL_SPI_TransmitReceive+0xea>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a6d      	ldr	r2, [pc, #436]	@ (800a628 <HAL_SPI_TransmitReceive+0x29c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d102      	bne.n	800a47c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a476:	2310      	movs	r3, #16
 800a478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a47a:	e001      	b.n	800a480 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a47c:	2308      	movs	r3, #8
 800a47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	4b69      	ldr	r3, [pc, #420]	@ (800a62c <HAL_SPI_TransmitReceive+0x2a0>)
 800a488:	4013      	ands	r3, r2
 800a48a:	8879      	ldrh	r1, [r7, #2]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	430b      	orrs	r3, r1
 800a492:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0201 	orr.w	r2, r2, #1
 800a4a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4ac:	d107      	bne.n	800a4be <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	f240 80a2 	bls.w	800a60c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ca:	089b      	lsrs	r3, r3, #2
 800a4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a4ce:	e094      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d120      	bne.n	800a520 <HAL_SPI_TransmitReceive+0x194>
 800a4de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01d      	beq.n	800a520 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a4e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a4e6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d217      	bcs.n	800a520 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a51e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a528:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d065      	beq.n	800a5fa <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d118      	bne.n	800a56e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a544:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a546:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54c:	1d1a      	adds	r2, r3, #4
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a56a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a56c:	e045      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a56e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a570:	8bfb      	ldrh	r3, [r7, #30]
 800a572:	429a      	cmp	r2, r3
 800a574:	d21d      	bcs.n	800a5b2 <HAL_SPI_TransmitReceive+0x226>
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d018      	beq.n	800a5b2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a588:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a58a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a590:	1d1a      	adds	r2, r3, #4
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a5b0:	e023      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5b2:	f7f9 f8bd 	bl	8003730 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d803      	bhi.n	800a5ca <HAL_SPI_TransmitReceive+0x23e>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d102      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x244>
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d114      	bne.n	800a5fa <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fc2f 	bl	800ae34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e1fd      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f af67 	bne.w	800a4d0 <HAL_SPI_TransmitReceive+0x144>
 800a602:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af63 	bne.w	800a4d0 <HAL_SPI_TransmitReceive+0x144>
 800a60a:	e1ce      	b.n	800a9aa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2b07      	cmp	r3, #7
 800a612:	f240 81c2 	bls.w	800a99a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a61c:	e0c9      	b.n	800a7b2 <HAL_SPI_TransmitReceive+0x426>
 800a61e:	bf00      	nop
 800a620:	40013000 	.word	0x40013000
 800a624:	40003800 	.word	0x40003800
 800a628:	40003c00 	.word	0x40003c00
 800a62c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d11f      	bne.n	800a67e <HAL_SPI_TransmitReceive+0x2f2>
 800a63e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01c      	beq.n	800a67e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a644:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a646:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d216      	bcs.n	800a67e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a654:	881a      	ldrh	r2, [r3, #0]
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a65e:	1c9a      	adds	r2, r3, #2
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	3b01      	subs	r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a67c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a686:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8092 	beq.w	800a7b2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d118      	bne.n	800a6ce <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6a0:	6a3a      	ldr	r2, [r7, #32]
 800a6a2:	8812      	ldrh	r2, [r2, #0]
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ac:	1c9a      	adds	r2, r3, #2
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a6cc:	e071      	b.n	800a7b2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a6ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a6d0:	8bfb      	ldrh	r3, [r7, #30]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d228      	bcs.n	800a728 <HAL_SPI_TransmitReceive+0x39c>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d023      	beq.n	800a728 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6e4:	6a3a      	ldr	r2, [r7, #32]
 800a6e6:	8812      	ldrh	r2, [r2, #0]
 800a6e8:	b292      	uxth	r2, r2
 800a6ea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f0:	1c9a      	adds	r2, r3, #2
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6fa:	6a3a      	ldr	r2, [r7, #32]
 800a6fc:	8812      	ldrh	r2, [r2, #0]
 800a6fe:	b292      	uxth	r2, r2
 800a700:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a706:	1c9a      	adds	r2, r3, #2
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a712:	b29b      	uxth	r3, r3
 800a714:	3b02      	subs	r3, #2
 800a716:	b29a      	uxth	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a724:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a726:	e044      	b.n	800a7b2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a728:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d11d      	bne.n	800a76a <HAL_SPI_TransmitReceive+0x3de>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d018      	beq.n	800a76a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a73c:	6a3a      	ldr	r2, [r7, #32]
 800a73e:	8812      	ldrh	r2, [r2, #0]
 800a740:	b292      	uxth	r2, r2
 800a742:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a748:	1c9a      	adds	r2, r3, #2
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a766:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a768:	e023      	b.n	800a7b2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76a:	f7f8 ffe1 	bl	8003730 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a776:	429a      	cmp	r2, r3
 800a778:	d803      	bhi.n	800a782 <HAL_SPI_TransmitReceive+0x3f6>
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d102      	bne.n	800a788 <HAL_SPI_TransmitReceive+0x3fc>
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	2b00      	cmp	r3, #0
 800a786:	d114      	bne.n	800a7b2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fb53 	bl	800ae34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a794:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e121      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a7b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f47f af3b 	bne.w	800a630 <HAL_SPI_TransmitReceive+0x2a4>
 800a7ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f af37 	bne.w	800a630 <HAL_SPI_TransmitReceive+0x2a4>
 800a7c2:	e0f2      	b.n	800a9aa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d121      	bne.n	800a816 <HAL_SPI_TransmitReceive+0x48a>
 800a7d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01e      	beq.n	800a816 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a7d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a7da:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7de:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d218      	bcs.n	800a816 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3320      	adds	r3, #32
 800a7ee:	7812      	ldrb	r2, [r2, #0]
 800a7f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a814:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a81e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80ba 	beq.w	800a99a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b01      	cmp	r3, #1
 800a832:	d11b      	bne.n	800a86c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a868:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a86a:	e096      	b.n	800a99a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a86c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a86e:	8bfb      	ldrh	r3, [r7, #30]
 800a870:	429a      	cmp	r2, r3
 800a872:	d24a      	bcs.n	800a90a <HAL_SPI_TransmitReceive+0x57e>
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d045      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	b2d2      	uxtb	r2, r2
 800a88e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8a6:	7812      	ldrb	r2, [r2, #0]
 800a8a8:	b2d2      	uxtb	r2, r2
 800a8aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c2:	7812      	ldrb	r2, [r2, #0]
 800a8c4:	b2d2      	uxtb	r2, r2
 800a8c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8de:	7812      	ldrb	r2, [r2, #0]
 800a8e0:	b2d2      	uxtb	r2, r2
 800a8e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b04      	subs	r3, #4
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a906:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a908:	e047      	b.n	800a99a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a90a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d820      	bhi.n	800a952 <HAL_SPI_TransmitReceive+0x5c6>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d01b      	beq.n	800a952 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a926:	7812      	ldrb	r2, [r2, #0]
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a94e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a950:	e023      	b.n	800a99a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a952:	f7f8 feed 	bl	8003730 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a95e:	429a      	cmp	r2, r3
 800a960:	d803      	bhi.n	800a96a <HAL_SPI_TransmitReceive+0x5de>
 800a962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a968:	d102      	bne.n	800a970 <HAL_SPI_TransmitReceive+0x5e4>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d114      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 fa5f 	bl	800ae34 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a97c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e02d      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a99a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f47f af11 	bne.w	800a7c4 <HAL_SPI_TransmitReceive+0x438>
 800a9a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f47f af0d 	bne.w	800a7c4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2108      	movs	r1, #8
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fadd 	bl	800af74 <SPI_WaitOnFlagUntilTimeout>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9c6:	f043 0220 	orr.w	r2, r3, #32
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fa2f 	bl	800ae34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e000      	b.n	800a9f6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
  }
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3730      	adds	r7, #48	@ 0x30
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop

0800aa00 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	@ 0x28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800aa18:	6a3a      	ldr	r2, [r7, #32]
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa32:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3330      	adds	r3, #48	@ 0x30
 800aa3a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d010      	beq.n	800aa68 <HAL_SPI_IRQHandler+0x68>
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	f003 0308 	and.w	r3, r3, #8
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa5e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f9c3 	bl	800adec <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800aa66:	e192      	b.n	800ad8e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d113      	bne.n	800aa9a <HAL_SPI_IRQHandler+0x9a>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10e      	bne.n	800aa9a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
    handled = 1UL;
 800aa96:	2301      	movs	r3, #1
 800aa98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10f      	bne.n	800aac4 <HAL_SPI_IRQHandler+0xc4>
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
    handled = 1UL;
 800aac0:	2301      	movs	r3, #1
 800aac2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10f      	bne.n	800aaee <HAL_SPI_IRQHandler+0xee>
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d105      	bne.n	800aaee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
    handled = 1UL;
 800aaea:	2301      	movs	r3, #1
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f040 8147 	bne.w	800ad84 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 808b 	beq.w	800ac18 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f042 0208 	orr.w	r2, r2, #8
 800ab10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	699a      	ldr	r2, [r3, #24]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f042 0210 	orr.w	r2, r2, #16
 800ab20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	699a      	ldr	r2, [r3, #24]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab30:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	691a      	ldr	r2, [r3, #16]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0208 	bic.w	r2, r2, #8
 800ab40:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d13d      	bne.n	800abcc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ab50:	e036      	b.n	800abc0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	2b0f      	cmp	r3, #15
 800ab58:	d90b      	bls.n	800ab72 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab64:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	665a      	str	r2, [r3, #100]	@ 0x64
 800ab70:	e01d      	b.n	800abae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	d90b      	bls.n	800ab92 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	8812      	ldrh	r2, [r2, #0]
 800ab82:	b292      	uxth	r2, r2
 800ab84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab8a:	1c9a      	adds	r2, r3, #2
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	665a      	str	r2, [r3, #100]	@ 0x64
 800ab90:	e00d      	b.n	800abae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9e:	7812      	ldrb	r2, [r2, #0]
 800aba0:	b2d2      	uxtb	r2, r2
 800aba2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3b01      	subs	r3, #1
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1c2      	bne.n	800ab52 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f931 	bl	800ae34 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8f7 	bl	800add8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800abea:	e0d0      	b.n	800ad8e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800abec:	7cfb      	ldrb	r3, [r7, #19]
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d103      	bne.n	800abfa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f8e6 	bl	800adc4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800abf8:	e0c6      	b.n	800ad88 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800abfa:	7cfb      	ldrb	r3, [r7, #19]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d103      	bne.n	800ac08 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f8d5 	bl	800adb0 <HAL_SPI_RxCpltCallback>
    return;
 800ac06:	e0bf      	b.n	800ad88 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ac08:	7cfb      	ldrb	r3, [r7, #19]
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	f040 80bc 	bne.w	800ad88 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f8c3 	bl	800ad9c <HAL_SPI_TxCpltCallback>
    return;
 800ac16:	e0b7      	b.n	800ad88 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80b5 	beq.w	800ad8e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00f      	beq.n	800ac4e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac34:	f043 0204 	orr.w	r2, r3, #4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699a      	ldr	r2, [r3, #24]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00f      	beq.n	800ac78 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac5e:	f043 0201 	orr.w	r2, r3, #1
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac76:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac88:	f043 0208 	orr.w	r2, r3, #8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aca0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00f      	beq.n	800accc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f042 0220 	orr.w	r2, r2, #32
 800acca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d05a      	beq.n	800ad8c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f022 0201 	bic.w	r2, r2, #1
 800ace4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6919      	ldr	r1, [r3, #16]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	4b28      	ldr	r3, [pc, #160]	@ (800ad94 <HAL_SPI_IRQHandler+0x394>)
 800acf2:	400b      	ands	r3, r1
 800acf4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800acfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad00:	d138      	bne.n	800ad74 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ad10:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d013      	beq.n	800ad42 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ad98 <HAL_SPI_IRQHandler+0x398>)
 800ad20:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7f9 f9aa 	bl	8004080 <HAL_DMA_Abort_IT>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d007      	beq.n	800ad42 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d020      	beq.n	800ad8c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad4e:	4a12      	ldr	r2, [pc, #72]	@ (800ad98 <HAL_SPI_IRQHandler+0x398>)
 800ad50:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f9 f992 	bl	8004080 <HAL_DMA_Abort_IT>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d014      	beq.n	800ad8c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ad72:	e00b      	b.n	800ad8c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f82b 	bl	800add8 <HAL_SPI_ErrorCallback>
    return;
 800ad82:	e003      	b.n	800ad8c <HAL_SPI_IRQHandler+0x38c>
    return;
 800ad84:	bf00      	nop
 800ad86:	e002      	b.n	800ad8e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ad88:	bf00      	nop
 800ad8a:	e000      	b.n	800ad8e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ad8c:	bf00      	nop
  }
}
 800ad8e:	3728      	adds	r7, #40	@ 0x28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	fffffc94 	.word	0xfffffc94
 800ad98:	0800ae01 	.word	0x0800ae01

0800ad9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff ffd6 	bl	800add8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae2c:	bf00      	nop
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0208 	orr.w	r2, r2, #8
 800ae52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	699a      	ldr	r2, [r3, #24]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0210 	orr.w	r2, r2, #16
 800ae62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0201 	bic.w	r2, r2, #1
 800ae72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6919      	ldr	r1, [r3, #16]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4b3c      	ldr	r3, [pc, #240]	@ (800af70 <SPI_CloseTransfer+0x13c>)
 800ae80:	400b      	ands	r3, r1
 800ae82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ae92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b04      	cmp	r3, #4
 800ae9e:	d014      	beq.n	800aeca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00f      	beq.n	800aeca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f042 0220 	orr.w	r2, r2, #32
 800aec8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	d014      	beq.n	800af00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00f      	beq.n	800af00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee6:	f043 0204 	orr.w	r2, r3, #4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699a      	ldr	r2, [r3, #24]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aefe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00f      	beq.n	800af2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af10:	f043 0201 	orr.w	r2, r3, #1
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00f      	beq.n	800af54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af3a:	f043 0208 	orr.w	r2, r3, #8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800af64:	bf00      	nop
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	fffffc90 	.word	0xfffffc90

0800af74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	603b      	str	r3, [r7, #0]
 800af80:	4613      	mov	r3, r2
 800af82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800af84:	e010      	b.n	800afa8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af86:	f7f8 fbd3 	bl	8003730 <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d803      	bhi.n	800af9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d102      	bne.n	800afa4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e00f      	b.n	800afc8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695a      	ldr	r2, [r3, #20]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	4013      	ands	r3, r2
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	bf0c      	ite	eq
 800afb8:	2301      	moveq	r3, #1
 800afba:	2300      	movne	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	461a      	mov	r2, r3
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d0df      	beq.n	800af86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afdc:	095b      	lsrs	r3, r3, #5
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	3307      	adds	r3, #7
 800afee:	08db      	lsrs	r3, r3, #3
 800aff0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	fb02 f303 	mul.w	r3, r2, r3
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e049      	b.n	800b0ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d106      	bne.n	800b032 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7f8 f95b 	bl	80032e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2202      	movs	r2, #2
 800b036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f000 f99d 	bl	800b384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0201 	bic.w	r2, r2, #1
 800b0ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6a1a      	ldr	r2, [r3, #32]
 800b0d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10f      	bne.n	800b0fc <HAL_TIM_Base_Stop_IT+0x48>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a1a      	ldr	r2, [r3, #32]
 800b0e2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d107      	bne.n	800b0fc <HAL_TIM_Base_Stop_IT+0x48>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0201 	bic.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d020      	beq.n	800b176 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d01b      	beq.n	800b176 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f06f 0202 	mvn.w	r2, #2
 800b146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f003 0303 	and.w	r3, r3, #3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f8f3 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b162:	e005      	b.n	800b170 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f8e5 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f8f6 	bl	800b35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d020      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d01b      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f06f 0204 	mvn.w	r2, #4
 800b192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f8cd 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b1ae:	e005      	b.n	800b1bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f8bf 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f8d0 	bl	800b35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d020      	beq.n	800b20e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01b      	beq.n	800b20e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f06f 0208 	mvn.w	r2, #8
 800b1de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2204      	movs	r2, #4
 800b1e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d003      	beq.n	800b1fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f8a7 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b1fa:	e005      	b.n	800b208 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f899 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f8aa 	bl	800b35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d020      	beq.n	800b25a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f003 0310 	and.w	r3, r3, #16
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d01b      	beq.n	800b25a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f06f 0210 	mvn.w	r2, #16
 800b22a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2208      	movs	r2, #8
 800b230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f881 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b246:	e005      	b.n	800b254 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f873 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f884 	bl	800b35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00c      	beq.n	800b27e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d007      	beq.n	800b27e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f06f 0201 	mvn.w	r2, #1
 800b276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f851 	bl	800b320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00c      	beq.n	800b2ac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9aa 	bl	800b600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00c      	beq.n	800b2d0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9a2 	bl	800b614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00c      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f83e 	bl	800b370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00c      	beq.n	800b318 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b00      	cmp	r3, #0
 800b306:	d007      	beq.n	800b318 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f06f 0220 	mvn.w	r2, #32
 800b310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f96a 	bl	800b5ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a46      	ldr	r2, [pc, #280]	@ (800b4b0 <TIM_Base_SetConfig+0x12c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d013      	beq.n	800b3c4 <TIM_Base_SetConfig+0x40>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a2:	d00f      	beq.n	800b3c4 <TIM_Base_SetConfig+0x40>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a43      	ldr	r2, [pc, #268]	@ (800b4b4 <TIM_Base_SetConfig+0x130>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00b      	beq.n	800b3c4 <TIM_Base_SetConfig+0x40>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a42      	ldr	r2, [pc, #264]	@ (800b4b8 <TIM_Base_SetConfig+0x134>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d007      	beq.n	800b3c4 <TIM_Base_SetConfig+0x40>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a41      	ldr	r2, [pc, #260]	@ (800b4bc <TIM_Base_SetConfig+0x138>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d003      	beq.n	800b3c4 <TIM_Base_SetConfig+0x40>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a40      	ldr	r2, [pc, #256]	@ (800b4c0 <TIM_Base_SetConfig+0x13c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d108      	bne.n	800b3d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a35      	ldr	r2, [pc, #212]	@ (800b4b0 <TIM_Base_SetConfig+0x12c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d01f      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3e4:	d01b      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a32      	ldr	r2, [pc, #200]	@ (800b4b4 <TIM_Base_SetConfig+0x130>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d017      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a31      	ldr	r2, [pc, #196]	@ (800b4b8 <TIM_Base_SetConfig+0x134>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d013      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a30      	ldr	r2, [pc, #192]	@ (800b4bc <TIM_Base_SetConfig+0x138>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d00f      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a2f      	ldr	r2, [pc, #188]	@ (800b4c0 <TIM_Base_SetConfig+0x13c>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00b      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a2e      	ldr	r2, [pc, #184]	@ (800b4c4 <TIM_Base_SetConfig+0x140>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d007      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a2d      	ldr	r2, [pc, #180]	@ (800b4c8 <TIM_Base_SetConfig+0x144>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d003      	beq.n	800b41e <TIM_Base_SetConfig+0x9a>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a2c      	ldr	r2, [pc, #176]	@ (800b4cc <TIM_Base_SetConfig+0x148>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d108      	bne.n	800b430 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a16      	ldr	r2, [pc, #88]	@ (800b4b0 <TIM_Base_SetConfig+0x12c>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d00f      	beq.n	800b47c <TIM_Base_SetConfig+0xf8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a18      	ldr	r2, [pc, #96]	@ (800b4c0 <TIM_Base_SetConfig+0x13c>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d00b      	beq.n	800b47c <TIM_Base_SetConfig+0xf8>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a17      	ldr	r2, [pc, #92]	@ (800b4c4 <TIM_Base_SetConfig+0x140>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d007      	beq.n	800b47c <TIM_Base_SetConfig+0xf8>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a16      	ldr	r2, [pc, #88]	@ (800b4c8 <TIM_Base_SetConfig+0x144>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <TIM_Base_SetConfig+0xf8>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a15      	ldr	r2, [pc, #84]	@ (800b4cc <TIM_Base_SetConfig+0x148>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d103      	bne.n	800b484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b01      	cmp	r3, #1
 800b494:	d105      	bne.n	800b4a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	f023 0201 	bic.w	r2, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	611a      	str	r2, [r3, #16]
  }
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40000400 	.word	0x40000400
 800b4b8:	40000800 	.word	0x40000800
 800b4bc:	40000c00 	.word	0x40000c00
 800b4c0:	40010400 	.word	0x40010400
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40014400 	.word	0x40014400
 800b4cc:	40014800 	.word	0x40014800

0800b4d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e06d      	b.n	800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a30      	ldr	r2, [pc, #192]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d004      	beq.n	800b51c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a2f      	ldr	r2, [pc, #188]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d108      	bne.n	800b52e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b522:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a20      	ldr	r2, [pc, #128]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d022      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b55a:	d01d      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d018      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a1c      	ldr	r2, [pc, #112]	@ (800b5dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d013      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d00e      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a15      	ldr	r2, [pc, #84]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d009      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a16      	ldr	r2, [pc, #88]	@ (800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d004      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a15      	ldr	r2, [pc, #84]	@ (800b5e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d10c      	bne.n	800b5b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b59e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	40010000 	.word	0x40010000
 800b5d4:	40010400 	.word	0x40010400
 800b5d8:	40000400 	.word	0x40000400
 800b5dc:	40000800 	.word	0x40000800
 800b5e0:	40000c00 	.word	0x40000c00
 800b5e4:	40001800 	.word	0x40001800
 800b5e8:	40014000 	.word	0x40014000

0800b5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b62c:	4904      	ldr	r1, [pc, #16]	@ (800b640 <MX_FATFS_Init+0x18>)
 800b62e:	4805      	ldr	r0, [pc, #20]	@ (800b644 <MX_FATFS_Init+0x1c>)
 800b630:	f003 fb22 	bl	800ec78 <FATFS_LinkDriver>
 800b634:	4603      	mov	r3, r0
 800b636:	461a      	mov	r2, r3
 800b638:	4b03      	ldr	r3, [pc, #12]	@ (800b648 <MX_FATFS_Init+0x20>)
 800b63a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	24000370 	.word	0x24000370
 800b644:	24000014 	.word	0x24000014
 800b648:	2400036c 	.word	0x2400036c

0800b64c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b650:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b652:	4618      	mov	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 f9fd 	bl	800ba68 <USER_SPI_initialize>
 800b66e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	4618      	mov	r0, r3
 800b686:	f000 facf 	bl	800bc28 <USER_SPI_status>
 800b68a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b6a4:	7bf8      	ldrb	r0, [r7, #15]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	f000 fad2 	bl	800bc54 <USER_SPI_read>
 800b6b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b6ca:	7bf8      	ldrb	r0, [r7, #15]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	f000 fb25 	bl	800bd20 <USER_SPI_write>
 800b6d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	603a      	str	r2, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b6f0:	79b9      	ldrb	r1, [r7, #6]
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fb8e 	bl	800be18 <USER_SPI_ioctl>
 800b6fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 0201 	bic.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	071a      	lsls	r2, r3, #28
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0201 	orr.w	r2, r2, #1
 800b744:	601a      	str	r2, [r3, #0]
}
 800b746:	bf00      	nop
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
	...

0800b754 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b75c:	f7f7 ffe8 	bl	8003730 <HAL_GetTick>
 800b760:	4603      	mov	r3, r0
 800b762:	4a04      	ldr	r2, [pc, #16]	@ (800b774 <SPI_Timer_On+0x20>)
 800b764:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b766:	4a04      	ldr	r2, [pc, #16]	@ (800b778 <SPI_Timer_On+0x24>)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6013      	str	r3, [r2, #0]
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	24000378 	.word	0x24000378
 800b778:	2400037c 	.word	0x2400037c

0800b77c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b780:	f7f7 ffd6 	bl	8003730 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	4b06      	ldr	r3, [pc, #24]	@ (800b7a0 <SPI_Timer_Status+0x24>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <SPI_Timer_Status+0x28>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	429a      	cmp	r2, r3
 800b792:	bf34      	ite	cc
 800b794:	2301      	movcc	r3, #1
 800b796:	2300      	movcs	r3, #0
 800b798:	b2db      	uxtb	r3, r3
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	24000378 	.word	0x24000378
 800b7a4:	2400037c 	.word	0x2400037c

0800b7a8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, HAL_MAX_DELAY);
 800b7b2:	f107 020f 	add.w	r2, r7, #15
 800b7b6:	1df9      	adds	r1, r7, #7
 800b7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4803      	ldr	r0, [pc, #12]	@ (800b7d0 <xchg_spi+0x28>)
 800b7c2:	f7fe fde3 	bl	800a38c <HAL_SPI_TransmitReceive>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	240001a0 	.word	0x240001a0

0800b7d4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e00a      	b.n	800b7fa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	18d4      	adds	r4, r2, r3
 800b7ea:	20ff      	movs	r0, #255	@ 0xff
 800b7ec:	f7ff ffdc 	bl	800b7a8 <xchg_spi>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d3f0      	bcc.n	800b7e4 <rcvr_spi_multi+0x10>
	}
}
 800b802:	bf00      	nop
 800b804:	bf00      	nop
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd90      	pop	{r4, r7, pc}

0800b80c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	f04f 33ff 	mov.w	r3, #4294967295
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	4803      	ldr	r0, [pc, #12]	@ (800b830 <xmit_spi_multi+0x24>)
 800b822:	f7fe f953 	bl	8009acc <HAL_SPI_Transmit>

//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}

}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	240001a0 	.word	0x240001a0

0800b834 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b83c:	f7f7 ff78 	bl	8003730 <HAL_GetTick>
 800b840:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b846:	20ff      	movs	r0, #255	@ 0xff
 800b848:	f7ff ffae 	bl	800b7a8 <xchg_spi>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	2bff      	cmp	r3, #255	@ 0xff
 800b854:	d007      	beq.n	800b866 <wait_ready+0x32>
 800b856:	f7f7 ff6b 	bl	8003730 <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	429a      	cmp	r2, r3
 800b864:	d8ef      	bhi.n	800b846 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	2bff      	cmp	r3, #255	@ 0xff
 800b86a:	bf0c      	ite	eq
 800b86c:	2301      	moveq	r3, #1
 800b86e:	2300      	movne	r3, #0
 800b870:	b2db      	uxtb	r3, r3
}
 800b872:	4618      	mov	r0, r3
 800b874:	3718      	adds	r7, #24
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b880:	2201      	movs	r2, #1
 800b882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b886:	4804      	ldr	r0, [pc, #16]	@ (800b898 <despiselect+0x1c>)
 800b888:	f7fa f956 	bl	8005b38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b88c:	20ff      	movs	r0, #255	@ 0xff
 800b88e:	f7ff ff8b 	bl	800b7a8 <xchg_spi>

}
 800b892:	bf00      	nop
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	58020400 	.word	0x58020400

0800b89c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b8a6:	480a      	ldr	r0, [pc, #40]	@ (800b8d0 <spiselect+0x34>)
 800b8a8:	f7fa f946 	bl	8005b38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b8ac:	20ff      	movs	r0, #255	@ 0xff
 800b8ae:	f7ff ff7b 	bl	800b7a8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b8b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b8b6:	f7ff ffbd 	bl	800b834 <wait_ready>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <spiselect+0x28>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e002      	b.n	800b8ca <spiselect+0x2e>

	despiselect();
 800b8c4:	f7ff ffda 	bl	800b87c <despiselect>
	return 0;	/* Timeout */
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	58020400 	.word	0x58020400

0800b8d4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b8de:	20c8      	movs	r0, #200	@ 0xc8
 800b8e0:	f7ff ff38 	bl	800b754 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b8e4:	20ff      	movs	r0, #255	@ 0xff
 800b8e6:	f7ff ff5f 	bl	800b7a8 <xchg_spi>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	2bff      	cmp	r3, #255	@ 0xff
 800b8f2:	d104      	bne.n	800b8fe <rcvr_datablock+0x2a>
 800b8f4:	f7ff ff42 	bl	800b77c <SPI_Timer_Status>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1f2      	bne.n	800b8e4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2bfe      	cmp	r3, #254	@ 0xfe
 800b902:	d001      	beq.n	800b908 <rcvr_datablock+0x34>
 800b904:	2300      	movs	r3, #0
 800b906:	e00a      	b.n	800b91e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff62 	bl	800b7d4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b910:	20ff      	movs	r0, #255	@ 0xff
 800b912:	f7ff ff49 	bl	800b7a8 <xchg_spi>
 800b916:	20ff      	movs	r0, #255	@ 0xff
 800b918:	f7ff ff46 	bl	800b7a8 <xchg_spi>

	return 1;						/* Function succeeded */
 800b91c:	2301      	movs	r3, #1
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	460b      	mov	r3, r1
 800b930:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b932:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b936:	f7ff ff7d 	bl	800b834 <wait_ready>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <xmit_datablock+0x1e>
 800b940:	2300      	movs	r3, #0
 800b942:	e01e      	b.n	800b982 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ff2e 	bl	800b7a8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	2bfd      	cmp	r3, #253	@ 0xfd
 800b950:	d016      	beq.n	800b980 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff ff58 	bl	800b80c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b95c:	20ff      	movs	r0, #255	@ 0xff
 800b95e:	f7ff ff23 	bl	800b7a8 <xchg_spi>
 800b962:	20ff      	movs	r0, #255	@ 0xff
 800b964:	f7ff ff20 	bl	800b7a8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b968:	20ff      	movs	r0, #255	@ 0xff
 800b96a:	f7ff ff1d 	bl	800b7a8 <xchg_spi>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b972:	7bfb      	ldrb	r3, [r7, #15]
 800b974:	f003 031f 	and.w	r3, r3, #31
 800b978:	2b05      	cmp	r3, #5
 800b97a:	d001      	beq.n	800b980 <xmit_datablock+0x5a>
 800b97c:	2300      	movs	r3, #0
 800b97e:	e000      	b.n	800b982 <xmit_datablock+0x5c>
	}
	return 1;
 800b980:	2301      	movs	r3, #1
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	4603      	mov	r3, r0
 800b992:	6039      	str	r1, [r7, #0]
 800b994:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da0e      	bge.n	800b9bc <send_cmd+0x32>
		cmd &= 0x7F;
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	2037      	movs	r0, #55	@ 0x37
 800b9aa:	f7ff ffee 	bl	800b98a <send_cmd>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d901      	bls.n	800b9bc <send_cmd+0x32>
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	e051      	b.n	800ba60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b0c      	cmp	r3, #12
 800b9c0:	d008      	beq.n	800b9d4 <send_cmd+0x4a>
		despiselect();
 800b9c2:	f7ff ff5b 	bl	800b87c <despiselect>
		if (!spiselect()) return 0xFF;
 800b9c6:	f7ff ff69 	bl	800b89c <spiselect>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <send_cmd+0x4a>
 800b9d0:	23ff      	movs	r3, #255	@ 0xff
 800b9d2:	e045      	b.n	800ba60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fee3 	bl	800b7a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	0e1b      	lsrs	r3, r3, #24
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff fedd 	bl	800b7a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	0c1b      	lsrs	r3, r3, #16
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fed7 	bl	800b7a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fed1 	bl	800b7a8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff fecc 	bl	800b7a8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ba10:	2301      	movs	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <send_cmd+0x94>
 800ba1a:	2395      	movs	r3, #149	@ 0x95
 800ba1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d101      	bne.n	800ba28 <send_cmd+0x9e>
 800ba24:	2387      	movs	r3, #135	@ 0x87
 800ba26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff febc 	bl	800b7a8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b0c      	cmp	r3, #12
 800ba34:	d102      	bne.n	800ba3c <send_cmd+0xb2>
 800ba36:	20ff      	movs	r0, #255	@ 0xff
 800ba38:	f7ff feb6 	bl	800b7a8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ba3c:	230a      	movs	r3, #10
 800ba3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ba40:	20ff      	movs	r0, #255	@ 0xff
 800ba42:	f7ff feb1 	bl	800b7a8 <xchg_spi>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ba4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	da05      	bge.n	800ba5e <send_cmd+0xd4>
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f0      	bne.n	800ba40 <send_cmd+0xb6>

	return res;							/* Return received response */
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <USER_SPI_initialize+0x14>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e0cb      	b.n	800bc14 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ba7c:	4b67      	ldr	r3, [pc, #412]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 0302 	and.w	r3, r3, #2
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <USER_SPI_initialize+0x2a>
 800ba8a:	4b64      	ldr	r3, [pc, #400]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	e0c0      	b.n	800bc14 <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800ba92:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800ba96:	4862      	ldr	r0, [pc, #392]	@ (800bc20 <USER_SPI_initialize+0x1b8>)
 800ba98:	f7ff fe35 	bl	800b706 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ba9c:	230a      	movs	r3, #10
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e005      	b.n	800baae <USER_SPI_initialize+0x46>
 800baa2:	20ff      	movs	r0, #255	@ 0xff
 800baa4:	f7ff fe80 	bl	800b7a8 <xchg_spi>
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	3b01      	subs	r3, #1
 800baac:	73fb      	strb	r3, [r7, #15]
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1f6      	bne.n	800baa2 <USER_SPI_initialize+0x3a>

	ty = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bab8:	2100      	movs	r1, #0
 800baba:	2000      	movs	r0, #0
 800babc:	f7ff ff65 	bl	800b98a <send_cmd>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	f040 808b 	bne.w	800bbde <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bacc:	f7ff fe42 	bl	800b754 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bad0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bad4:	2008      	movs	r0, #8
 800bad6:	f7ff ff58 	bl	800b98a <send_cmd>
 800bada:	4603      	mov	r3, r0
 800badc:	2b01      	cmp	r3, #1
 800bade:	d151      	bne.n	800bb84 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
 800bae4:	e00d      	b.n	800bb02 <USER_SPI_initialize+0x9a>
 800bae6:	7bfc      	ldrb	r4, [r7, #15]
 800bae8:	20ff      	movs	r0, #255	@ 0xff
 800baea:	f7ff fe5d 	bl	800b7a8 <xchg_spi>
 800baee:	4603      	mov	r3, r0
 800baf0:	461a      	mov	r2, r3
 800baf2:	f104 0310 	add.w	r3, r4, #16
 800baf6:	443b      	add	r3, r7
 800baf8:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	3301      	adds	r3, #1
 800bb00:	73fb      	strb	r3, [r7, #15]
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d9ee      	bls.n	800bae6 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bb08:	7abb      	ldrb	r3, [r7, #10]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d167      	bne.n	800bbde <USER_SPI_initialize+0x176>
 800bb0e:	7afb      	ldrb	r3, [r7, #11]
 800bb10:	2baa      	cmp	r3, #170	@ 0xaa
 800bb12:	d164      	bne.n	800bbde <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bb14:	bf00      	nop
 800bb16:	f7ff fe31 	bl	800b77c <SPI_Timer_Status>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <USER_SPI_initialize+0xc8>
 800bb20:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bb24:	20a9      	movs	r0, #169	@ 0xa9
 800bb26:	f7ff ff30 	bl	800b98a <send_cmd>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f2      	bne.n	800bb16 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bb30:	f7ff fe24 	bl	800b77c <SPI_Timer_Status>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d051      	beq.n	800bbde <USER_SPI_initialize+0x176>
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	203a      	movs	r0, #58	@ 0x3a
 800bb3e:	f7ff ff24 	bl	800b98a <send_cmd>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d14a      	bne.n	800bbde <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
 800bb4c:	e00d      	b.n	800bb6a <USER_SPI_initialize+0x102>
 800bb4e:	7bfc      	ldrb	r4, [r7, #15]
 800bb50:	20ff      	movs	r0, #255	@ 0xff
 800bb52:	f7ff fe29 	bl	800b7a8 <xchg_spi>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f104 0310 	add.w	r3, r4, #16
 800bb5e:	443b      	add	r3, r7
 800bb60:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	3301      	adds	r3, #1
 800bb68:	73fb      	strb	r3, [r7, #15]
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d9ee      	bls.n	800bb4e <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800bb70:	7a3b      	ldrb	r3, [r7, #8]
 800bb72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <USER_SPI_initialize+0x116>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	e000      	b.n	800bb80 <USER_SPI_initialize+0x118>
 800bb7e:	2304      	movs	r3, #4
 800bb80:	737b      	strb	r3, [r7, #13]
 800bb82:	e02c      	b.n	800bbde <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800bb84:	2100      	movs	r1, #0
 800bb86:	20a9      	movs	r0, #169	@ 0xa9
 800bb88:	f7ff feff 	bl	800b98a <send_cmd>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d804      	bhi.n	800bb9c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800bb92:	2302      	movs	r3, #2
 800bb94:	737b      	strb	r3, [r7, #13]
 800bb96:	23a9      	movs	r3, #169	@ 0xa9
 800bb98:	73bb      	strb	r3, [r7, #14]
 800bb9a:	e003      	b.n	800bba4 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	737b      	strb	r3, [r7, #13]
 800bba0:	2301      	movs	r3, #1
 800bba2:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800bba4:	bf00      	nop
 800bba6:	f7ff fde9 	bl	800b77c <SPI_Timer_Status>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d007      	beq.n	800bbc0 <USER_SPI_initialize+0x158>
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fee8 	bl	800b98a <send_cmd>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1f2      	bne.n	800bba6 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800bbc0:	f7ff fddc 	bl	800b77c <SPI_Timer_Status>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <USER_SPI_initialize+0x172>
 800bbca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bbce:	2010      	movs	r0, #16
 800bbd0:	f7ff fedb 	bl	800b98a <send_cmd>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <USER_SPI_initialize+0x176>
				ty = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800bbde:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <USER_SPI_initialize+0x1bc>)
 800bbe0:	7b7b      	ldrb	r3, [r7, #13]
 800bbe2:	7013      	strb	r3, [r2, #0]
	despiselect();
 800bbe4:	f7ff fe4a 	bl	800b87c <despiselect>

	if (ty) {			/* OK */
 800bbe8:	7b7b      	ldrb	r3, [r7, #13]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800bbee:	2100      	movs	r1, #0
 800bbf0:	480b      	ldr	r0, [pc, #44]	@ (800bc20 <USER_SPI_initialize+0x1b8>)
 800bbf2:	f7ff fd88 	bl	800b706 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800bbf6:	4b09      	ldr	r3, [pc, #36]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800bc04:	701a      	strb	r2, [r3, #0]
 800bc06:	e002      	b.n	800bc0e <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800bc08:	4b04      	ldr	r3, [pc, #16]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800bc0e:	4b03      	ldr	r3, [pc, #12]	@ (800bc1c <USER_SPI_initialize+0x1b4>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	b2db      	uxtb	r3, r3
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd90      	pop	{r4, r7, pc}
 800bc1c:	24000028 	.word	0x24000028
 800bc20:	240001a0 	.word	0x240001a0
 800bc24:	24000374 	.word	0x24000374

0800bc28 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <USER_SPI_status+0x14>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e002      	b.n	800bc42 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800bc3c:	4b04      	ldr	r3, [pc, #16]	@ (800bc50 <USER_SPI_status+0x28>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	b2db      	uxtb	r3, r3
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	24000028 	.word	0x24000028

0800bc54 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d102      	bne.n	800bc70 <USER_SPI_read+0x1c>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <USER_SPI_read+0x20>
 800bc70:	2304      	movs	r3, #4
 800bc72:	e04d      	b.n	800bd10 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bc74:	4b28      	ldr	r3, [pc, #160]	@ (800bd18 <USER_SPI_read+0xc4>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <USER_SPI_read+0x32>
 800bc82:	2303      	movs	r3, #3
 800bc84:	e044      	b.n	800bd10 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800bc86:	4b25      	ldr	r3, [pc, #148]	@ (800bd1c <USER_SPI_read+0xc8>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <USER_SPI_read+0x44>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	025b      	lsls	r3, r3, #9
 800bc96:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d111      	bne.n	800bcc2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	2011      	movs	r0, #17
 800bca2:	f7ff fe72 	bl	800b98a <send_cmd>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d129      	bne.n	800bd00 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800bcac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	f7ff fe0f 	bl	800b8d4 <rcvr_datablock>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d021      	beq.n	800bd00 <USER_SPI_read+0xac>
			count = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	e01e      	b.n	800bd00 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	2012      	movs	r0, #18
 800bcc6:	f7ff fe60 	bl	800b98a <send_cmd>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d117      	bne.n	800bd00 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800bcd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcd4:	68b8      	ldr	r0, [r7, #8]
 800bcd6:	f7ff fdfd 	bl	800b8d4 <rcvr_datablock>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <USER_SPI_read+0xa2>
				buff += 512;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bce6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	603b      	str	r3, [r7, #0]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1ed      	bne.n	800bcd0 <USER_SPI_read+0x7c>
 800bcf4:	e000      	b.n	800bcf8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bcf6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	200c      	movs	r0, #12
 800bcfc:	f7ff fe45 	bl	800b98a <send_cmd>
		}
	}
	despiselect();
 800bd00:	f7ff fdbc 	bl	800b87c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bf14      	ite	ne
 800bd0a:	2301      	movne	r3, #1
 800bd0c:	2300      	moveq	r3, #0
 800bd0e:	b2db      	uxtb	r3, r3
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	24000028 	.word	0x24000028
 800bd1c:	24000374 	.word	0x24000374

0800bd20 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <USER_SPI_write+0x1c>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <USER_SPI_write+0x20>
 800bd3c:	2304      	movs	r3, #4
 800bd3e:	e063      	b.n	800be08 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bd40:	4b33      	ldr	r3, [pc, #204]	@ (800be10 <USER_SPI_write+0xf0>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <USER_SPI_write+0x32>
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e05a      	b.n	800be08 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bd52:	4b2f      	ldr	r3, [pc, #188]	@ (800be10 <USER_SPI_write+0xf0>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <USER_SPI_write+0x44>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e051      	b.n	800be08 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800bd64:	4b2b      	ldr	r3, [pc, #172]	@ (800be14 <USER_SPI_write+0xf4>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 0308 	and.w	r3, r3, #8
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d102      	bne.n	800bd76 <USER_SPI_write+0x56>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	025b      	lsls	r3, r3, #9
 800bd74:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d110      	bne.n	800bd9e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	2018      	movs	r0, #24
 800bd80:	f7ff fe03 	bl	800b98a <send_cmd>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d136      	bne.n	800bdf8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800bd8a:	21fe      	movs	r1, #254	@ 0xfe
 800bd8c:	68b8      	ldr	r0, [r7, #8]
 800bd8e:	f7ff fdca 	bl	800b926 <xmit_datablock>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d02f      	beq.n	800bdf8 <USER_SPI_write+0xd8>
			count = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	e02c      	b.n	800bdf8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800bd9e:	4b1d      	ldr	r3, [pc, #116]	@ (800be14 <USER_SPI_write+0xf4>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 0306 	and.w	r3, r3, #6
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <USER_SPI_write+0x92>
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	2097      	movs	r0, #151	@ 0x97
 800bdae:	f7ff fdec 	bl	800b98a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	2019      	movs	r0, #25
 800bdb6:	f7ff fde8 	bl	800b98a <send_cmd>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11b      	bne.n	800bdf8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800bdc0:	21fc      	movs	r1, #252	@ 0xfc
 800bdc2:	68b8      	ldr	r0, [r7, #8]
 800bdc4:	f7ff fdaf 	bl	800b926 <xmit_datablock>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <USER_SPI_write+0xc4>
				buff += 512;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bdd4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1ee      	bne.n	800bdc0 <USER_SPI_write+0xa0>
 800bde2:	e000      	b.n	800bde6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800bde4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800bde6:	21fd      	movs	r1, #253	@ 0xfd
 800bde8:	2000      	movs	r0, #0
 800bdea:	f7ff fd9c 	bl	800b926 <xmit_datablock>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <USER_SPI_write+0xd8>
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800bdf8:	f7ff fd40 	bl	800b87c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bf14      	ite	ne
 800be02:	2301      	movne	r3, #1
 800be04:	2300      	moveq	r3, #0
 800be06:	b2db      	uxtb	r3, r3
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	24000028 	.word	0x24000028
 800be14:	24000374 	.word	0x24000374

0800be18 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08c      	sub	sp, #48	@ 0x30
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	603a      	str	r2, [r7, #0]
 800be22:	71fb      	strb	r3, [r7, #7]
 800be24:	460b      	mov	r3, r1
 800be26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <USER_SPI_ioctl+0x1a>
 800be2e:	2304      	movs	r3, #4
 800be30:	e15a      	b.n	800c0e8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800be32:	4baf      	ldr	r3, [pc, #700]	@ (800c0f0 <USER_SPI_ioctl+0x2d8>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <USER_SPI_ioctl+0x2c>
 800be40:	2303      	movs	r3, #3
 800be42:	e151      	b.n	800c0e8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800be4a:	79bb      	ldrb	r3, [r7, #6]
 800be4c:	2b04      	cmp	r3, #4
 800be4e:	f200 8136 	bhi.w	800c0be <USER_SPI_ioctl+0x2a6>
 800be52:	a201      	add	r2, pc, #4	@ (adr r2, 800be58 <USER_SPI_ioctl+0x40>)
 800be54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be58:	0800be6d 	.word	0x0800be6d
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800c0bf 	.word	0x0800c0bf
 800be64:	0800bf2d 	.word	0x0800bf2d
 800be68:	0800c023 	.word	0x0800c023
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800be6c:	f7ff fd16 	bl	800b89c <spiselect>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 8127 	beq.w	800c0c6 <USER_SPI_ioctl+0x2ae>
 800be78:	2300      	movs	r3, #0
 800be7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800be7e:	e122      	b.n	800c0c6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800be80:	2100      	movs	r1, #0
 800be82:	2009      	movs	r0, #9
 800be84:	f7ff fd81 	bl	800b98a <send_cmd>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 811d 	bne.w	800c0ca <USER_SPI_ioctl+0x2b2>
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	2110      	movs	r1, #16
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff fd1c 	bl	800b8d4 <rcvr_datablock>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 8113 	beq.w	800c0ca <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bea4:	7b3b      	ldrb	r3, [r7, #12]
 800bea6:	099b      	lsrs	r3, r3, #6
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d111      	bne.n	800bed2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800beae:	7d7b      	ldrb	r3, [r7, #21]
 800beb0:	461a      	mov	r2, r3
 800beb2:	7d3b      	ldrb	r3, [r7, #20]
 800beb4:	021b      	lsls	r3, r3, #8
 800beb6:	4413      	add	r3, r2
 800beb8:	461a      	mov	r2, r3
 800beba:	7cfb      	ldrb	r3, [r7, #19]
 800bebc:	041b      	lsls	r3, r3, #16
 800bebe:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800bec2:	4413      	add	r3, r2
 800bec4:	3301      	adds	r3, #1
 800bec6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	029a      	lsls	r2, r3, #10
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	e028      	b.n	800bf24 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bed2:	7c7b      	ldrb	r3, [r7, #17]
 800bed4:	f003 030f 	and.w	r3, r3, #15
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	7dbb      	ldrb	r3, [r7, #22]
 800bedc:	09db      	lsrs	r3, r3, #7
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	4413      	add	r3, r2
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	7d7b      	ldrb	r3, [r7, #21]
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	f003 0306 	and.w	r3, r3, #6
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	4413      	add	r3, r2
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	3302      	adds	r3, #2
 800bef6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800befa:	7d3b      	ldrb	r3, [r7, #20]
 800befc:	099b      	lsrs	r3, r3, #6
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	7cfb      	ldrb	r3, [r7, #19]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	441a      	add	r2, r3
 800bf08:	7cbb      	ldrb	r3, [r7, #18]
 800bf0a:	029b      	lsls	r3, r3, #10
 800bf0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bf10:	4413      	add	r3, r2
 800bf12:	3301      	adds	r3, #1
 800bf14:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bf16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf1a:	3b09      	subs	r3, #9
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	409a      	lsls	r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bf2a:	e0ce      	b.n	800c0ca <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bf2c:	4b71      	ldr	r3, [pc, #452]	@ (800c0f4 <USER_SPI_ioctl+0x2dc>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d031      	beq.n	800bf9c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bf38:	2100      	movs	r1, #0
 800bf3a:	208d      	movs	r0, #141	@ 0x8d
 800bf3c:	f7ff fd25 	bl	800b98a <send_cmd>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 80c3 	bne.w	800c0ce <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bf48:	20ff      	movs	r0, #255	@ 0xff
 800bf4a:	f7ff fc2d 	bl	800b7a8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bf4e:	f107 030c 	add.w	r3, r7, #12
 800bf52:	2110      	movs	r1, #16
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fcbd 	bl	800b8d4 <rcvr_datablock>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 80b6 	beq.w	800c0ce <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bf62:	2330      	movs	r3, #48	@ 0x30
 800bf64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bf68:	e007      	b.n	800bf7a <USER_SPI_ioctl+0x162>
 800bf6a:	20ff      	movs	r0, #255	@ 0xff
 800bf6c:	f7ff fc1c 	bl	800b7a8 <xchg_spi>
 800bf70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf74:	3b01      	subs	r3, #1
 800bf76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bf7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1f3      	bne.n	800bf6a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bf82:	7dbb      	ldrb	r3, [r7, #22]
 800bf84:	091b      	lsrs	r3, r3, #4
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	461a      	mov	r2, r3
 800bf8a:	2310      	movs	r3, #16
 800bf8c:	fa03 f202 	lsl.w	r2, r3, r2
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bf9a:	e098      	b.n	800c0ce <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	2009      	movs	r0, #9
 800bfa0:	f7ff fcf3 	bl	800b98a <send_cmd>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 8091 	bne.w	800c0ce <USER_SPI_ioctl+0x2b6>
 800bfac:	f107 030c 	add.w	r3, r7, #12
 800bfb0:	2110      	movs	r1, #16
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fc8e 	bl	800b8d4 <rcvr_datablock>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8087 	beq.w	800c0ce <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800bfc0:	4b4c      	ldr	r3, [pc, #304]	@ (800c0f4 <USER_SPI_ioctl+0x2dc>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	f003 0302 	and.w	r3, r3, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d012      	beq.n	800bff2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800bfcc:	7dbb      	ldrb	r3, [r7, #22]
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800bfd4:	7dfa      	ldrb	r2, [r7, #23]
 800bfd6:	09d2      	lsrs	r2, r2, #7
 800bfd8:	b2d2      	uxtb	r2, r2
 800bfda:	4413      	add	r3, r2
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	7e7b      	ldrb	r3, [r7, #25]
 800bfe0:	099b      	lsrs	r3, r3, #6
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfea:	461a      	mov	r2, r3
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	601a      	str	r2, [r3, #0]
 800bff0:	e013      	b.n	800c01a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800bff2:	7dbb      	ldrb	r3, [r7, #22]
 800bff4:	109b      	asrs	r3, r3, #2
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	f003 031f 	and.w	r3, r3, #31
 800bffc:	3301      	adds	r3, #1
 800bffe:	7dfa      	ldrb	r2, [r7, #23]
 800c000:	00d2      	lsls	r2, r2, #3
 800c002:	f002 0218 	and.w	r2, r2, #24
 800c006:	7df9      	ldrb	r1, [r7, #23]
 800c008:	0949      	lsrs	r1, r1, #5
 800c00a:	b2c9      	uxtb	r1, r1
 800c00c:	440a      	add	r2, r1
 800c00e:	3201      	adds	r2, #1
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	461a      	mov	r2, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c020:	e055      	b.n	800c0ce <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c022:	4b34      	ldr	r3, [pc, #208]	@ (800c0f4 <USER_SPI_ioctl+0x2dc>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f003 0306 	and.w	r3, r3, #6
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d051      	beq.n	800c0d2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c02e:	f107 020c 	add.w	r2, r7, #12
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	210b      	movs	r1, #11
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff feee 	bl	800be18 <USER_SPI_ioctl>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d149      	bne.n	800c0d6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c042:	7b3b      	ldrb	r3, [r7, #12]
 800c044:	099b      	lsrs	r3, r3, #6
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d104      	bne.n	800c056 <USER_SPI_ioctl+0x23e>
 800c04c:	7dbb      	ldrb	r3, [r7, #22]
 800c04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c052:	2b00      	cmp	r3, #0
 800c054:	d041      	beq.n	800c0da <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	623b      	str	r3, [r7, #32]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c066:	4b23      	ldr	r3, [pc, #140]	@ (800c0f4 <USER_SPI_ioctl+0x2dc>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 0308 	and.w	r3, r3, #8
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d105      	bne.n	800c07e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c074:	025b      	lsls	r3, r3, #9
 800c076:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07a:	025b      	lsls	r3, r3, #9
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c080:	2020      	movs	r0, #32
 800c082:	f7ff fc82 	bl	800b98a <send_cmd>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d128      	bne.n	800c0de <USER_SPI_ioctl+0x2c6>
 800c08c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c08e:	2021      	movs	r0, #33	@ 0x21
 800c090:	f7ff fc7b 	bl	800b98a <send_cmd>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d121      	bne.n	800c0de <USER_SPI_ioctl+0x2c6>
 800c09a:	2100      	movs	r1, #0
 800c09c:	2026      	movs	r0, #38	@ 0x26
 800c09e:	f7ff fc74 	bl	800b98a <send_cmd>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d11a      	bne.n	800c0de <USER_SPI_ioctl+0x2c6>
 800c0a8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c0ac:	f7ff fbc2 	bl	800b834 <wait_ready>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d013      	beq.n	800c0de <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c0bc:	e00f      	b.n	800c0de <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c0be:	2304      	movs	r3, #4
 800c0c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c0c4:	e00c      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		break;
 800c0c6:	bf00      	nop
 800c0c8:	e00a      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		break;
 800c0ca:	bf00      	nop
 800c0cc:	e008      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		break;
 800c0ce:	bf00      	nop
 800c0d0:	e006      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c0d2:	bf00      	nop
 800c0d4:	e004      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c0d6:	bf00      	nop
 800c0d8:	e002      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c0da:	bf00      	nop
 800c0dc:	e000      	b.n	800c0e0 <USER_SPI_ioctl+0x2c8>
		break;
 800c0de:	bf00      	nop
	}

	despiselect();
 800c0e0:	f7ff fbcc 	bl	800b87c <despiselect>

	return res;
 800c0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3730      	adds	r7, #48	@ 0x30
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	24000028 	.word	0x24000028
 800c0f4:	24000374 	.word	0x24000374

0800c0f8 <read_vec>:
#endif



float * read_vec(unsigned short index, char * word){
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	4602      	mov	r2, r0
 800c102:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800c106:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800c10a:	6019      	str	r1, [r3, #0]
 800c10c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800c110:	f2a3 2362 	subw	r3, r3, #610	@ 0x262
 800c114:	801a      	strh	r2, [r3, #0]
	FRESULT fr;
	FIL file;
	UINT bytes;

	//JOSEPH CHANGED THIS TO MALLOC SO HE CAN FREE AND FORGET IT LATER
	float * arr_float = malloc(sizeof(*arr_float) * 508);
 800c116:	f44f 60fe 	mov.w	r0, #2032	@ 0x7f0
 800c11a:	f002 fe83 	bl	800ee24 <malloc>
 800c11e:	4603      	mov	r3, r0
 800c120:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260

	spiselect();
 800c124:	f7ff fbba 	bl	800b89c <spiselect>
	snprintf(name, 24,  "Win/v/vector%05d.bin", index);
 800c128:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800c12c:	f2a3 2362 	subw	r3, r3, #610	@ 0x262
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 800c136:	4a26      	ldr	r2, [pc, #152]	@ (800c1d0 <read_vec+0xd8>)
 800c138:	2118      	movs	r1, #24
 800c13a:	f002 ff31 	bl	800efa0 <sniprintf>

	fr =  f_open(&file, name, FA_READ);
 800c13e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800c142:	f107 0310 	add.w	r3, r7, #16
 800c146:	2201      	movs	r2, #1
 800c148:	4618      	mov	r0, r3
 800c14a:	f002 f9a7 	bl	800e49c <f_open>
 800c14e:	4603      	mov	r3, r0
 800c150:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	fr = f_read(&file, arr_float, 501*4, &bytes);
 800c154:	f107 030c 	add.w	r3, r7, #12
 800c158:	f107 0010 	add.w	r0, r7, #16
 800c15c:	f240 72d4 	movw	r2, #2004	@ 0x7d4
 800c160:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800c164:	f002 fb54 	bl	800e810 <f_read>
 800c168:	4603      	mov	r3, r0
 800c16a:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	 uint8_t *bytePointer = (uint8_t *)arr_float;
 800c16e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800c172:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

	// Example: Extracting bytes 0 to 4 into a char array
	for (size_t i = 0; i < 25; i++) {
 800c176:	2300      	movs	r3, #0
 800c178:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800c17c:	e013      	b.n	800c1a6 <read_vec+0xae>
		word[i] = (char)bytePointer[i];
 800c17e:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800c182:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c186:	441a      	add	r2, r3
 800c188:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800c18c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800c190:	6819      	ldr	r1, [r3, #0]
 800c192:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c196:	440b      	add	r3, r1
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < 25; i++) {
 800c19c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800c1a6:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c1aa:	2b18      	cmp	r3, #24
 800c1ac:	d9e7      	bls.n	800c17e <read_vec+0x86>
	}


	fr = f_close(&file);
 800c1ae:	f107 0310 	add.w	r3, r7, #16
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 fce9 	bl	800eb8a <f_close>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	despiselect();
 800c1be:	f7ff fb5d 	bl	800b87c <despiselect>

	return arr_float;
 800c1c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	0800f958 	.word	0x0800f958

0800c1d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	4a08      	ldr	r2, [pc, #32]	@ (800c204 <disk_status+0x30>)
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	79fa      	ldrb	r2, [r7, #7]
 800c1ec:	4905      	ldr	r1, [pc, #20]	@ (800c204 <disk_status+0x30>)
 800c1ee:	440a      	add	r2, r1
 800c1f0:	7a12      	ldrb	r2, [r2, #8]
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	4798      	blx	r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	240005a8 	.word	0x240005a8

0800c208 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	4a0e      	ldr	r2, [pc, #56]	@ (800c254 <disk_initialize+0x4c>)
 800c21a:	5cd3      	ldrb	r3, [r2, r3]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d114      	bne.n	800c24a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	4a0c      	ldr	r2, [pc, #48]	@ (800c254 <disk_initialize+0x4c>)
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	79fa      	ldrb	r2, [r7, #7]
 800c22e:	4909      	ldr	r1, [pc, #36]	@ (800c254 <disk_initialize+0x4c>)
 800c230:	440a      	add	r2, r1
 800c232:	7a12      	ldrb	r2, [r2, #8]
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	4603      	mov	r3, r0
 800c23a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d103      	bne.n	800c24a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c242:	79fb      	ldrb	r3, [r7, #7]
 800c244:	4a03      	ldr	r2, [pc, #12]	@ (800c254 <disk_initialize+0x4c>)
 800c246:	2101      	movs	r1, #1
 800c248:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	240005a8 	.word	0x240005a8

0800c258 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60b9      	str	r1, [r7, #8]
 800c260:	607a      	str	r2, [r7, #4]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4a0a      	ldr	r2, [pc, #40]	@ (800c294 <disk_read+0x3c>)
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	689c      	ldr	r4, [r3, #8]
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	4a07      	ldr	r2, [pc, #28]	@ (800c294 <disk_read+0x3c>)
 800c278:	4413      	add	r3, r2
 800c27a:	7a18      	ldrb	r0, [r3, #8]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	47a0      	blx	r4
 800c284:	4603      	mov	r3, r0
 800c286:	75fb      	strb	r3, [r7, #23]
  return res;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	371c      	adds	r7, #28
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd90      	pop	{r4, r7, pc}
 800c292:	bf00      	nop
 800c294:	240005a8 	.word	0x240005a8

0800c298 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c298:	b590      	push	{r4, r7, lr}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d4 <disk_write+0x3c>)
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	4413      	add	r3, r2
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68dc      	ldr	r4, [r3, #12]
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	4a07      	ldr	r2, [pc, #28]	@ (800c2d4 <disk_write+0x3c>)
 800c2b8:	4413      	add	r3, r2
 800c2ba:	7a18      	ldrb	r0, [r3, #8]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	68b9      	ldr	r1, [r7, #8]
 800c2c2:	47a0      	blx	r4
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd90      	pop	{r4, r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	240005a8 	.word	0x240005a8

0800c2d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	603a      	str	r2, [r7, #0]
 800c2e2:	71fb      	strb	r3, [r7, #7]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	4a09      	ldr	r2, [pc, #36]	@ (800c310 <disk_ioctl+0x38>)
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	79fa      	ldrb	r2, [r7, #7]
 800c2f6:	4906      	ldr	r1, [pc, #24]	@ (800c310 <disk_ioctl+0x38>)
 800c2f8:	440a      	add	r2, r1
 800c2fa:	7a10      	ldrb	r0, [r2, #8]
 800c2fc:	79b9      	ldrb	r1, [r7, #6]
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4798      	blx	r3
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
  return res;
 800c306:	7bfb      	ldrb	r3, [r7, #15]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	240005a8 	.word	0x240005a8

0800c314 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	3301      	adds	r3, #1
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	021b      	lsls	r3, r3, #8
 800c328:	b21a      	sxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b21b      	sxth	r3, r3
 800c330:	4313      	orrs	r3, r2
 800c332:	b21b      	sxth	r3, r3
 800c334:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c336:	89fb      	ldrh	r3, [r7, #14]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3303      	adds	r3, #3
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	021b      	lsls	r3, r3, #8
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	3202      	adds	r2, #2
 800c35c:	7812      	ldrb	r2, [r2, #0]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	021b      	lsls	r3, r3, #8
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	3201      	adds	r2, #1
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	021b      	lsls	r3, r3, #8
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c37c:	68fb      	ldr	r3, [r7, #12]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	460b      	mov	r3, r1
 800c394:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	887a      	ldrh	r2, [r7, #2]
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	887b      	ldrh	r3, [r7, #2]
 800c3a4:	0a1b      	lsrs	r3, r3, #8
 800c3a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	607a      	str	r2, [r7, #4]
 800c3ae:	887a      	ldrh	r2, [r7, #2]
 800c3b0:	b2d2      	uxtb	r2, r2
 800c3b2:	701a      	strb	r2, [r3, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	0a1b      	lsrs	r3, r3, #8
 800c3da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	0a1b      	lsrs	r3, r3, #8
 800c3ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	b2d2      	uxtb	r2, r2
 800c3f8:	701a      	strb	r2, [r3, #0]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	0a1b      	lsrs	r3, r3, #8
 800c3fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	b2d2      	uxtb	r2, r2
 800c40a:	701a      	strb	r2, [r3, #0]
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00d      	beq.n	800c44e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	1c53      	adds	r3, r2, #1
 800c436:	613b      	str	r3, [r7, #16]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	1c59      	adds	r1, r3, #1
 800c43c:	6179      	str	r1, [r7, #20]
 800c43e:	7812      	ldrb	r2, [r2, #0]
 800c440:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3b01      	subs	r3, #1
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1f1      	bne.n	800c432 <mem_cpy+0x1a>
	}
}
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c45a:	b480      	push	{r7}
 800c45c:	b087      	sub	sp, #28
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	617a      	str	r2, [r7, #20]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	b2d2      	uxtb	r2, r2
 800c474:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3b01      	subs	r3, #1
 800c47a:	607b      	str	r3, [r7, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f3      	bne.n	800c46a <mem_set+0x10>
}
 800c482:	bf00      	nop
 800c484:	bf00      	nop
 800c486:	371c      	adds	r7, #28
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c490:	b480      	push	{r7}
 800c492:	b089      	sub	sp, #36	@ 0x24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	61fb      	str	r3, [r7, #28]
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	61fa      	str	r2, [r7, #28]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	61ba      	str	r2, [r7, #24]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	1acb      	subs	r3, r1, r3
 800c4bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	607b      	str	r3, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <mem_cmp+0x40>
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0eb      	beq.n	800c4a8 <mem_cmp+0x18>

	return r;
 800c4d0:	697b      	ldr	r3, [r7, #20]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3724      	adds	r7, #36	@ 0x24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4e8:	e002      	b.n	800c4f0 <chk_chr+0x12>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	607b      	str	r3, [r7, #4]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <chk_chr+0x26>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	4293      	cmp	r3, r2
 800c502:	d1f2      	bne.n	800c4ea <chk_chr+0xc>
	return *str;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	781b      	ldrb	r3, [r3, #0]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c51e:	2300      	movs	r3, #0
 800c520:	60bb      	str	r3, [r7, #8]
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e029      	b.n	800c57c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c528:	4a27      	ldr	r2, [pc, #156]	@ (800c5c8 <chk_lock+0xb4>)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	011b      	lsls	r3, r3, #4
 800c52e:	4413      	add	r3, r2
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d01d      	beq.n	800c572 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c536:	4a24      	ldr	r2, [pc, #144]	@ (800c5c8 <chk_lock+0xb4>)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	011b      	lsls	r3, r3, #4
 800c53c:	4413      	add	r3, r2
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d116      	bne.n	800c576 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c548:	4a1f      	ldr	r2, [pc, #124]	@ (800c5c8 <chk_lock+0xb4>)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	011b      	lsls	r3, r3, #4
 800c54e:	4413      	add	r3, r2
 800c550:	3304      	adds	r3, #4
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c558:	429a      	cmp	r2, r3
 800c55a:	d10c      	bne.n	800c576 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c55c:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <chk_lock+0xb4>)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	011b      	lsls	r3, r3, #4
 800c562:	4413      	add	r3, r2
 800c564:	3308      	adds	r3, #8
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d102      	bne.n	800c576 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c570:	e007      	b.n	800c582 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c572:	2301      	movs	r3, #1
 800c574:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	3301      	adds	r3, #1
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d9d2      	bls.n	800c528 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d109      	bne.n	800c59c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <chk_lock+0x80>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d101      	bne.n	800c598 <chk_lock+0x84>
 800c594:	2300      	movs	r3, #0
 800c596:	e010      	b.n	800c5ba <chk_lock+0xa6>
 800c598:	2312      	movs	r3, #18
 800c59a:	e00e      	b.n	800c5ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d108      	bne.n	800c5b4 <chk_lock+0xa0>
 800c5a2:	4a09      	ldr	r2, [pc, #36]	@ (800c5c8 <chk_lock+0xb4>)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	4413      	add	r3, r2
 800c5aa:	330c      	adds	r3, #12
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5b2:	d101      	bne.n	800c5b8 <chk_lock+0xa4>
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	e000      	b.n	800c5ba <chk_lock+0xa6>
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	24000388 	.word	0x24000388

0800c5cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	607b      	str	r3, [r7, #4]
 800c5d6:	e002      	b.n	800c5de <enq_lock+0x12>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	607b      	str	r3, [r7, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d806      	bhi.n	800c5f2 <enq_lock+0x26>
 800c5e4:	4a09      	ldr	r2, [pc, #36]	@ (800c60c <enq_lock+0x40>)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	011b      	lsls	r3, r3, #4
 800c5ea:	4413      	add	r3, r2
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f2      	bne.n	800c5d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	24000388 	.word	0x24000388

0800c610 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	e01f      	b.n	800c660 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c620:	4a41      	ldr	r2, [pc, #260]	@ (800c728 <inc_lock+0x118>)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	4413      	add	r3, r2
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d113      	bne.n	800c65a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c632:	4a3d      	ldr	r2, [pc, #244]	@ (800c728 <inc_lock+0x118>)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	4413      	add	r3, r2
 800c63a:	3304      	adds	r3, #4
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c642:	429a      	cmp	r2, r3
 800c644:	d109      	bne.n	800c65a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c646:	4a38      	ldr	r2, [pc, #224]	@ (800c728 <inc_lock+0x118>)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	3308      	adds	r3, #8
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c656:	429a      	cmp	r2, r3
 800c658:	d006      	beq.n	800c668 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3301      	adds	r3, #1
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d9dc      	bls.n	800c620 <inc_lock+0x10>
 800c666:	e000      	b.n	800c66a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c668:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d132      	bne.n	800c6d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c670:	2300      	movs	r3, #0
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	e002      	b.n	800c67c <inc_lock+0x6c>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	3301      	adds	r3, #1
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d806      	bhi.n	800c690 <inc_lock+0x80>
 800c682:	4a29      	ldr	r2, [pc, #164]	@ (800c728 <inc_lock+0x118>)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	011b      	lsls	r3, r3, #4
 800c688:	4413      	add	r3, r2
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1f2      	bne.n	800c676 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d101      	bne.n	800c69a <inc_lock+0x8a>
 800c696:	2300      	movs	r3, #0
 800c698:	e040      	b.n	800c71c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	4922      	ldr	r1, [pc, #136]	@ (800c728 <inc_lock+0x118>)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	011b      	lsls	r3, r3, #4
 800c6a4:	440b      	add	r3, r1
 800c6a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	491e      	ldr	r1, [pc, #120]	@ (800c728 <inc_lock+0x118>)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	011b      	lsls	r3, r3, #4
 800c6b2:	440b      	add	r3, r1
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	695a      	ldr	r2, [r3, #20]
 800c6bc:	491a      	ldr	r1, [pc, #104]	@ (800c728 <inc_lock+0x118>)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	440b      	add	r3, r1
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c6c8:	4a17      	ldr	r2, [pc, #92]	@ (800c728 <inc_lock+0x118>)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	4413      	add	r3, r2
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d009      	beq.n	800c6f0 <inc_lock+0xe0>
 800c6dc:	4a12      	ldr	r2, [pc, #72]	@ (800c728 <inc_lock+0x118>)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	011b      	lsls	r3, r3, #4
 800c6e2:	4413      	add	r3, r2
 800c6e4:	330c      	adds	r3, #12
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <inc_lock+0xe0>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e015      	b.n	800c71c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d108      	bne.n	800c708 <inc_lock+0xf8>
 800c6f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c728 <inc_lock+0x118>)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	011b      	lsls	r3, r3, #4
 800c6fc:	4413      	add	r3, r2
 800c6fe:	330c      	adds	r3, #12
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	b29a      	uxth	r2, r3
 800c706:	e001      	b.n	800c70c <inc_lock+0xfc>
 800c708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c70c:	4906      	ldr	r1, [pc, #24]	@ (800c728 <inc_lock+0x118>)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	011b      	lsls	r3, r3, #4
 800c712:	440b      	add	r3, r1
 800c714:	330c      	adds	r3, #12
 800c716:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3301      	adds	r3, #1
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	24000388 	.word	0x24000388

0800c72c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3b01      	subs	r3, #1
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d825      	bhi.n	800c78c <dec_lock+0x60>
		n = Files[i].ctr;
 800c740:	4a17      	ldr	r2, [pc, #92]	@ (800c7a0 <dec_lock+0x74>)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	011b      	lsls	r3, r3, #4
 800c746:	4413      	add	r3, r2
 800c748:	330c      	adds	r3, #12
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c74e:	89fb      	ldrh	r3, [r7, #14]
 800c750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c754:	d101      	bne.n	800c75a <dec_lock+0x2e>
 800c756:	2300      	movs	r3, #0
 800c758:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c75a:	89fb      	ldrh	r3, [r7, #14]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <dec_lock+0x3a>
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	3b01      	subs	r3, #1
 800c764:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c766:	4a0e      	ldr	r2, [pc, #56]	@ (800c7a0 <dec_lock+0x74>)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	011b      	lsls	r3, r3, #4
 800c76c:	4413      	add	r3, r2
 800c76e:	330c      	adds	r3, #12
 800c770:	89fa      	ldrh	r2, [r7, #14]
 800c772:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c774:	89fb      	ldrh	r3, [r7, #14]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d105      	bne.n	800c786 <dec_lock+0x5a>
 800c77a:	4a09      	ldr	r2, [pc, #36]	@ (800c7a0 <dec_lock+0x74>)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	011b      	lsls	r3, r3, #4
 800c780:	4413      	add	r3, r2
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c786:	2300      	movs	r3, #0
 800c788:	737b      	strb	r3, [r7, #13]
 800c78a:	e001      	b.n	800c790 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c78c:	2302      	movs	r3, #2
 800c78e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c790:	7b7b      	ldrb	r3, [r7, #13]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	24000388 	.word	0x24000388

0800c7a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e010      	b.n	800c7d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7b2:	4a0d      	ldr	r2, [pc, #52]	@ (800c7e8 <clear_lock+0x44>)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	011b      	lsls	r3, r3, #4
 800c7b8:	4413      	add	r3, r2
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d105      	bne.n	800c7ce <clear_lock+0x2a>
 800c7c2:	4a09      	ldr	r2, [pc, #36]	@ (800c7e8 <clear_lock+0x44>)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	4413      	add	r3, r2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d9eb      	bls.n	800c7b2 <clear_lock+0xe>
	}
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	24000388 	.word	0x24000388

0800c7ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	78db      	ldrb	r3, [r3, #3]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d034      	beq.n	800c86a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c804:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7858      	ldrb	r0, [r3, #1]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c810:	2301      	movs	r3, #1
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	f7ff fd40 	bl	800c298 <disk_write>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c81e:	2301      	movs	r3, #1
 800c820:	73fb      	strb	r3, [r7, #15]
 800c822:	e022      	b.n	800c86a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	429a      	cmp	r2, r3
 800c838:	d217      	bcs.n	800c86a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	789b      	ldrb	r3, [r3, #2]
 800c83e:	613b      	str	r3, [r7, #16]
 800c840:	e010      	b.n	800c864 <sync_window+0x78>
					wsect += fs->fsize;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	4413      	add	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	7858      	ldrb	r0, [r3, #1]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c856:	2301      	movs	r3, #1
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	f7ff fd1d 	bl	800c298 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	3b01      	subs	r3, #1
 800c862:	613b      	str	r3, [r7, #16]
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d8eb      	bhi.n	800c842 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d01b      	beq.n	800c8c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff ffad 	bl	800c7ec <sync_window>
 800c892:	4603      	mov	r3, r0
 800c894:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d113      	bne.n	800c8c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	7858      	ldrb	r0, [r3, #1]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	f7ff fcd5 	bl	800c258 <disk_read>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d004      	beq.n	800c8be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
	...

0800c8d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ff87 	bl	800c7ec <sync_window>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d158      	bne.n	800c99a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	d148      	bne.n	800c982 <sync_fs+0xb2>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	791b      	ldrb	r3, [r3, #4]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d144      	bne.n	800c982 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3334      	adds	r3, #52	@ 0x34
 800c8fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c900:	2100      	movs	r1, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fda9 	bl	800c45a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3334      	adds	r3, #52	@ 0x34
 800c90c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c910:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff fd38 	bl	800c38a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3334      	adds	r3, #52	@ 0x34
 800c91e:	4921      	ldr	r1, [pc, #132]	@ (800c9a4 <sync_fs+0xd4>)
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff fd4d 	bl	800c3c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3334      	adds	r3, #52	@ 0x34
 800c92a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c92e:	491e      	ldr	r1, [pc, #120]	@ (800c9a8 <sync_fs+0xd8>)
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fd45 	bl	800c3c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3334      	adds	r3, #52	@ 0x34
 800c93a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	4619      	mov	r1, r3
 800c944:	4610      	mov	r0, r2
 800c946:	f7ff fd3b 	bl	800c3c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3334      	adds	r3, #52	@ 0x34
 800c94e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7ff fd31 	bl	800c3c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7858      	ldrb	r0, [r3, #1]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c976:	2301      	movs	r3, #1
 800c978:	f7ff fc8e 	bl	800c298 <disk_write>
			fs->fsi_flag = 0;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	785b      	ldrb	r3, [r3, #1]
 800c986:	2200      	movs	r2, #0
 800c988:	2100      	movs	r1, #0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff fca4 	bl	800c2d8 <disk_ioctl>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <sync_fs+0xca>
 800c996:	2301      	movs	r3, #1
 800c998:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	41615252 	.word	0x41615252
 800c9a8:	61417272 	.word	0x61417272

0800c9ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	3b02      	subs	r3, #2
 800c9ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	3b02      	subs	r3, #2
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d301      	bcc.n	800c9cc <clust2sect+0x20>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e008      	b.n	800c9de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	895b      	ldrh	r3, [r3, #10]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	fb03 f202 	mul.w	r2, r3, r2
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9dc:	4413      	add	r3, r2
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b086      	sub	sp, #24
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d904      	bls.n	800ca0a <get_fat+0x20>
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d302      	bcc.n	800ca10 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	e08e      	b.n	800cb2e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca10:	f04f 33ff 	mov.w	r3, #4294967295
 800ca14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d061      	beq.n	800cae2 <get_fat+0xf8>
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	dc7b      	bgt.n	800cb1a <get_fat+0x130>
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d002      	beq.n	800ca2c <get_fat+0x42>
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d041      	beq.n	800caae <get_fat+0xc4>
 800ca2a:	e076      	b.n	800cb1a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	085b      	lsrs	r3, r3, #1
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	0a5b      	lsrs	r3, r3, #9
 800ca42:	4413      	add	r3, r2
 800ca44:	4619      	mov	r1, r3
 800ca46:	6938      	ldr	r0, [r7, #16]
 800ca48:	f7ff ff14 	bl	800c874 <move_window>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d166      	bne.n	800cb20 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	60fa      	str	r2, [r7, #12]
 800ca58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	0a5b      	lsrs	r3, r3, #9
 800ca6e:	4413      	add	r3, r2
 800ca70:	4619      	mov	r1, r3
 800ca72:	6938      	ldr	r0, [r7, #16]
 800ca74:	f7ff fefe 	bl	800c874 <move_window>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d152      	bne.n	800cb24 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	4413      	add	r3, r2
 800ca88:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <get_fat+0xba>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	091b      	lsrs	r3, r3, #4
 800caa2:	e002      	b.n	800caaa <get_fat+0xc0>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800caaa:	617b      	str	r3, [r7, #20]
			break;
 800caac:	e03f      	b.n	800cb2e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	0a1b      	lsrs	r3, r3, #8
 800cab6:	4413      	add	r3, r2
 800cab8:	4619      	mov	r1, r3
 800caba:	6938      	ldr	r0, [r7, #16]
 800cabc:	f7ff feda 	bl	800c874 <move_window>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d130      	bne.n	800cb28 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cad4:	4413      	add	r3, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7ff fc1c 	bl	800c314 <ld_word>
 800cadc:	4603      	mov	r3, r0
 800cade:	617b      	str	r3, [r7, #20]
			break;
 800cae0:	e025      	b.n	800cb2e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	09db      	lsrs	r3, r3, #7
 800caea:	4413      	add	r3, r2
 800caec:	4619      	mov	r1, r3
 800caee:	6938      	ldr	r0, [r7, #16]
 800caf0:	f7ff fec0 	bl	800c874 <move_window>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d118      	bne.n	800cb2c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cb08:	4413      	add	r3, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff fc1a 	bl	800c344 <ld_dword>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cb16:	617b      	str	r3, [r7, #20]
			break;
 800cb18:	e009      	b.n	800cb2e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	617b      	str	r3, [r7, #20]
 800cb1e:	e006      	b.n	800cb2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb20:	bf00      	nop
 800cb22:	e004      	b.n	800cb2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb24:	bf00      	nop
 800cb26:	e002      	b.n	800cb2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb28:	bf00      	nop
 800cb2a:	e000      	b.n	800cb2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb2c:	bf00      	nop
		}
	}

	return val;
 800cb2e:	697b      	ldr	r3, [r7, #20]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b089      	sub	sp, #36	@ 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb44:	2302      	movs	r3, #2
 800cb46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	f240 80d9 	bls.w	800cd02 <put_fat+0x1ca>
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	f080 80d3 	bcs.w	800cd02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	f000 8096 	beq.w	800cc92 <put_fat+0x15a>
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	f300 80cb 	bgt.w	800cd02 <put_fat+0x1ca>
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d002      	beq.n	800cb76 <put_fat+0x3e>
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d06e      	beq.n	800cc52 <put_fat+0x11a>
 800cb74:	e0c5      	b.n	800cd02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	61bb      	str	r3, [r7, #24]
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	085b      	lsrs	r3, r3, #1
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	4413      	add	r3, r2
 800cb82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	0a5b      	lsrs	r3, r3, #9
 800cb8c:	4413      	add	r3, r2
 800cb8e:	4619      	mov	r1, r3
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff fe6f 	bl	800c874 <move_window>
 800cb96:	4603      	mov	r3, r0
 800cb98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb9a:	7ffb      	ldrb	r3, [r7, #31]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 80a9 	bne.w	800ccf4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	1c59      	adds	r1, r3, #1
 800cbac:	61b9      	str	r1, [r7, #24]
 800cbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb2:	4413      	add	r3, r2
 800cbb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00d      	beq.n	800cbdc <put_fat+0xa4>
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	b25b      	sxtb	r3, r3
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	b25a      	sxtb	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	b25b      	sxtb	r3, r3
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	b25b      	sxtb	r3, r3
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	e001      	b.n	800cbe0 <put_fat+0xa8>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	0a5b      	lsrs	r3, r3, #9
 800cbf2:	4413      	add	r3, r2
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f7ff fe3c 	bl	800c874 <move_window>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc00:	7ffb      	ldrb	r3, [r7, #31]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d178      	bne.n	800ccf8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc12:	4413      	add	r3, r2
 800cc14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <put_fat+0xf0>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	091b      	lsrs	r3, r3, #4
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	e00e      	b.n	800cc46 <put_fat+0x10e>
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	f023 030f 	bic.w	r3, r3, #15
 800cc32:	b25a      	sxtb	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	0a1b      	lsrs	r3, r3, #8
 800cc38:	b25b      	sxtb	r3, r3
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	b25b      	sxtb	r3, r3
 800cc40:	4313      	orrs	r3, r2
 800cc42:	b25b      	sxtb	r3, r3
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	70da      	strb	r2, [r3, #3]
			break;
 800cc50:	e057      	b.n	800cd02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	0a1b      	lsrs	r3, r3, #8
 800cc5a:	4413      	add	r3, r2
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff fe08 	bl	800c874 <move_window>
 800cc64:	4603      	mov	r3, r0
 800cc66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc68:	7ffb      	ldrb	r3, [r7, #31]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d146      	bne.n	800ccfc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	005b      	lsls	r3, r3, #1
 800cc78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cc7c:	4413      	add	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	b292      	uxth	r2, r2
 800cc82:	4611      	mov	r1, r2
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff fb80 	bl	800c38a <st_word>
			fs->wflag = 1;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	70da      	strb	r2, [r3, #3]
			break;
 800cc90:	e037      	b.n	800cd02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	09db      	lsrs	r3, r3, #7
 800cc9a:	4413      	add	r3, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7ff fde8 	bl	800c874 <move_window>
 800cca4:	4603      	mov	r3, r0
 800cca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cca8:	7ffb      	ldrb	r3, [r7, #31]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d128      	bne.n	800cd00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ccc2:	4413      	add	r3, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff fb3d 	bl	800c344 <ld_dword>
 800ccca:	4603      	mov	r3, r0
 800cccc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ccd0:	4323      	orrs	r3, r4
 800ccd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cce2:	4413      	add	r3, r2
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fb6a 	bl	800c3c0 <st_dword>
			fs->wflag = 1;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	70da      	strb	r2, [r3, #3]
			break;
 800ccf2:	e006      	b.n	800cd02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ccf4:	bf00      	nop
 800ccf6:	e004      	b.n	800cd02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ccf8:	bf00      	nop
 800ccfa:	e002      	b.n	800cd02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ccfc:	bf00      	nop
 800ccfe:	e000      	b.n	800cd02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cd00:	bf00      	nop
		}
	}
	return res;
 800cd02:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3724      	adds	r7, #36	@ 0x24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd90      	pop	{r4, r7, pc}

0800cd0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d904      	bls.n	800cd32 <remove_chain+0x26>
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d301      	bcc.n	800cd36 <remove_chain+0x2a>
 800cd32:	2302      	movs	r3, #2
 800cd34:	e04b      	b.n	800cdce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00c      	beq.n	800cd56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	69b8      	ldr	r0, [r7, #24]
 800cd44:	f7ff fef8 	bl	800cb38 <put_fat>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd4c:	7ffb      	ldrb	r3, [r7, #31]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <remove_chain+0x4a>
 800cd52:	7ffb      	ldrb	r3, [r7, #31]
 800cd54:	e03b      	b.n	800cdce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd56:	68b9      	ldr	r1, [r7, #8]
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f7ff fe46 	bl	800c9ea <get_fat>
 800cd5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d031      	beq.n	800cdca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d101      	bne.n	800cd70 <remove_chain+0x64>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e02e      	b.n	800cdce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d101      	bne.n	800cd7c <remove_chain+0x70>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e028      	b.n	800cdce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	68b9      	ldr	r1, [r7, #8]
 800cd80:	69b8      	ldr	r0, [r7, #24]
 800cd82:	f7ff fed9 	bl	800cb38 <put_fat>
 800cd86:	4603      	mov	r3, r0
 800cd88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd8a:	7ffb      	ldrb	r3, [r7, #31]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <remove_chain+0x88>
 800cd90:	7ffb      	ldrb	r3, [r7, #31]
 800cd92:	e01c      	b.n	800cdce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	695a      	ldr	r2, [r3, #20]
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	3b02      	subs	r3, #2
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d20b      	bcs.n	800cdba <remove_chain+0xae>
			fs->free_clst++;
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	791b      	ldrb	r3, [r3, #4]
 800cdb0:	f043 0301 	orr.w	r3, r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d3c6      	bcc.n	800cd56 <remove_chain+0x4a>
 800cdc8:	e000      	b.n	800cdcc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cdca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b088      	sub	sp, #32
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10d      	bne.n	800ce08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <create_chain+0x2c>
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	699b      	ldr	r3, [r3, #24]
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d31b      	bcc.n	800ce3a <create_chain+0x64>
 800ce02:	2301      	movs	r3, #1
 800ce04:	61bb      	str	r3, [r7, #24]
 800ce06:	e018      	b.n	800ce3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fded 	bl	800c9ea <get_fat>
 800ce10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d801      	bhi.n	800ce1c <create_chain+0x46>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e070      	b.n	800cefe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce22:	d101      	bne.n	800ce28 <create_chain+0x52>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	e06a      	b.n	800cefe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d201      	bcs.n	800ce36 <create_chain+0x60>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	e063      	b.n	800cefe <create_chain+0x128>
		scl = clst;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	3301      	adds	r3, #1
 800ce42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	69fa      	ldr	r2, [r7, #28]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d307      	bcc.n	800ce5e <create_chain+0x88>
				ncl = 2;
 800ce4e:	2302      	movs	r3, #2
 800ce50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d901      	bls.n	800ce5e <create_chain+0x88>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e04f      	b.n	800cefe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce5e:	69f9      	ldr	r1, [r7, #28]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fdc2 	bl	800c9ea <get_fat>
 800ce66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00e      	beq.n	800ce8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d003      	beq.n	800ce7c <create_chain+0xa6>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7a:	d101      	bne.n	800ce80 <create_chain+0xaa>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	e03e      	b.n	800cefe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce80:	69fa      	ldr	r2, [r7, #28]
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d1da      	bne.n	800ce3e <create_chain+0x68>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	e038      	b.n	800cefe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce92:	69f9      	ldr	r1, [r7, #28]
 800ce94:	6938      	ldr	r0, [r7, #16]
 800ce96:	f7ff fe4f 	bl	800cb38 <put_fat>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d109      	bne.n	800ceb8 <create_chain+0xe2>
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6938      	ldr	r0, [r7, #16]
 800ceb0:	f7ff fe42 	bl	800cb38 <put_fat>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ceb8:	7dfb      	ldrb	r3, [r7, #23]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d116      	bne.n	800ceec <create_chain+0x116>
		fs->last_clst = ncl;
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	695a      	ldr	r2, [r3, #20]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	3b02      	subs	r3, #2
 800cece:	429a      	cmp	r2, r3
 800ced0:	d804      	bhi.n	800cedc <create_chain+0x106>
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	1e5a      	subs	r2, r3, #1
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	791b      	ldrb	r3, [r3, #4]
 800cee0:	f043 0301 	orr.w	r3, r3, #1
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	711a      	strb	r2, [r3, #4]
 800ceea:	e007      	b.n	800cefc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d102      	bne.n	800cef8 <create_chain+0x122>
 800cef2:	f04f 33ff 	mov.w	r3, #4294967295
 800cef6:	e000      	b.n	800cefa <create_chain+0x124>
 800cef8:	2301      	movs	r3, #1
 800cefa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cefc:	69fb      	ldr	r3, [r7, #28]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3720      	adds	r7, #32
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b087      	sub	sp, #28
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	0a5b      	lsrs	r3, r3, #9
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	8952      	ldrh	r2, [r2, #10]
 800cf26:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	613a      	str	r2, [r7, #16]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <clmt_clust+0x3a>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e010      	b.n	800cf62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d307      	bcc.n	800cf58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	3304      	adds	r3, #4
 800cf54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf56:	e7e9      	b.n	800cf2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cf58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	4413      	add	r3, r2
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b086      	sub	sp, #24
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf84:	d204      	bcs.n	800cf90 <dir_sdi+0x22>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	f003 031f 	and.w	r3, r3, #31
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf90:	2302      	movs	r3, #2
 800cf92:	e063      	b.n	800d05c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <dir_sdi+0x46>
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d902      	bls.n	800cfb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10c      	bne.n	800cfd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	095b      	lsrs	r3, r3, #5
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	8912      	ldrh	r2, [r2, #8]
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d301      	bcc.n	800cfca <dir_sdi+0x5c>
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	e048      	b.n	800d05c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	61da      	str	r2, [r3, #28]
 800cfd2:	e029      	b.n	800d028 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	895b      	ldrh	r3, [r3, #10]
 800cfd8:	025b      	lsls	r3, r3, #9
 800cfda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfdc:	e019      	b.n	800d012 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6979      	ldr	r1, [r7, #20]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff fd01 	bl	800c9ea <get_fat>
 800cfe8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff0:	d101      	bne.n	800cff6 <dir_sdi+0x88>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e032      	b.n	800d05c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d904      	bls.n	800d006 <dir_sdi+0x98>
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	429a      	cmp	r2, r3
 800d004:	d301      	bcc.n	800d00a <dir_sdi+0x9c>
 800d006:	2302      	movs	r3, #2
 800d008:	e028      	b.n	800d05c <dir_sdi+0xee>
			ofs -= csz;
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	429a      	cmp	r2, r3
 800d018:	d2e1      	bcs.n	800cfde <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d01a:	6979      	ldr	r1, [r7, #20]
 800d01c:	6938      	ldr	r0, [r7, #16]
 800d01e:	f7ff fcc5 	bl	800c9ac <clust2sect>
 800d022:	4602      	mov	r2, r0
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <dir_sdi+0xcc>
 800d036:	2302      	movs	r3, #2
 800d038:	e010      	b.n	800d05c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69da      	ldr	r2, [r3, #28]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	0a5b      	lsrs	r3, r3, #9
 800d042:	441a      	add	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d054:	441a      	add	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	3320      	adds	r3, #32
 800d07a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <dir_next+0x28>
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d08a:	d301      	bcc.n	800d090 <dir_next+0x2c>
 800d08c:	2304      	movs	r3, #4
 800d08e:	e0aa      	b.n	800d1e6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d096:	2b00      	cmp	r3, #0
 800d098:	f040 8098 	bne.w	800d1cc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	095b      	lsrs	r3, r3, #5
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	8912      	ldrh	r2, [r2, #8]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	f0c0 8088 	bcc.w	800d1cc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	61da      	str	r2, [r3, #28]
 800d0c2:	2304      	movs	r3, #4
 800d0c4:	e08f      	b.n	800d1e6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	0a5b      	lsrs	r3, r3, #9
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	8952      	ldrh	r2, [r2, #10]
 800d0ce:	3a01      	subs	r2, #1
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d17a      	bne.n	800d1cc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f7ff fc83 	bl	800c9ea <get_fat>
 800d0e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d801      	bhi.n	800d0f0 <dir_next+0x8c>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e07a      	b.n	800d1e6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f6:	d101      	bne.n	800d0fc <dir_next+0x98>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e074      	b.n	800d1e6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	429a      	cmp	r2, r3
 800d104:	d358      	bcc.n	800d1b8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d104      	bne.n	800d116 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	61da      	str	r2, [r3, #28]
 800d112:	2304      	movs	r3, #4
 800d114:	e067      	b.n	800d1e6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f7ff fe59 	bl	800cdd6 <create_chain>
 800d124:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <dir_next+0xcc>
 800d12c:	2307      	movs	r3, #7
 800d12e:	e05a      	b.n	800d1e6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d101      	bne.n	800d13a <dir_next+0xd6>
 800d136:	2302      	movs	r3, #2
 800d138:	e055      	b.n	800d1e6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d101      	bne.n	800d146 <dir_next+0xe2>
 800d142:	2301      	movs	r3, #1
 800d144:	e04f      	b.n	800d1e6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f7ff fb50 	bl	800c7ec <sync_window>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <dir_next+0xf2>
 800d152:	2301      	movs	r3, #1
 800d154:	e047      	b.n	800d1e6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	3334      	adds	r3, #52	@ 0x34
 800d15a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d15e:	2100      	movs	r1, #0
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff f97a 	bl	800c45a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d166:	2300      	movs	r3, #0
 800d168:	613b      	str	r3, [r7, #16]
 800d16a:	6979      	ldr	r1, [r7, #20]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f7ff fc1d 	bl	800c9ac <clust2sect>
 800d172:	4602      	mov	r2, r0
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	631a      	str	r2, [r3, #48]	@ 0x30
 800d178:	e012      	b.n	800d1a0 <dir_next+0x13c>
						fs->wflag = 1;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2201      	movs	r2, #1
 800d17e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff fb33 	bl	800c7ec <sync_window>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <dir_next+0x12c>
 800d18c:	2301      	movs	r3, #1
 800d18e:	e02a      	b.n	800d1e6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	3301      	adds	r3, #1
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	895b      	ldrh	r3, [r3, #10]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d3e6      	bcc.n	800d17a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	1ad2      	subs	r2, r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d1be:	6979      	ldr	r1, [r7, #20]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff fbf3 	bl	800c9ac <clust2sect>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1de:	441a      	add	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d1fe:	2100      	movs	r1, #0
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff feb4 	bl	800cf6e <dir_sdi>
 800d206:	4603      	mov	r3, r0
 800d208:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d20a:	7dfb      	ldrb	r3, [r7, #23]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d12b      	bne.n	800d268 <dir_alloc+0x7a>
		n = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	4619      	mov	r1, r3
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff fb2a 	bl	800c874 <move_window>
 800d220:	4603      	mov	r3, r0
 800d222:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d11d      	bne.n	800d266 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2be5      	cmp	r3, #229	@ 0xe5
 800d232:	d004      	beq.n	800d23e <dir_alloc+0x50>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a1b      	ldr	r3, [r3, #32]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d107      	bne.n	800d24e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	3301      	adds	r3, #1
 800d242:	613b      	str	r3, [r7, #16]
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d102      	bne.n	800d252 <dir_alloc+0x64>
 800d24c:	e00c      	b.n	800d268 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d24e:	2300      	movs	r3, #0
 800d250:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d252:	2101      	movs	r1, #1
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff ff05 	bl	800d064 <dir_next>
 800d25a:	4603      	mov	r3, r0
 800d25c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d0d7      	beq.n	800d214 <dir_alloc+0x26>
 800d264:	e000      	b.n	800d268 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d266:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d101      	bne.n	800d272 <dir_alloc+0x84>
 800d26e:	2307      	movs	r3, #7
 800d270:	75fb      	strb	r3, [r7, #23]
	return res;
 800d272:	7dfb      	ldrb	r3, [r7, #23]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	331a      	adds	r3, #26
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7ff f842 	bl	800c314 <ld_word>
 800d290:	4603      	mov	r3, r0
 800d292:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d109      	bne.n	800d2b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	3314      	adds	r3, #20
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff f837 	bl	800c314 <ld_word>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	60f8      	str	r0, [r7, #12]
 800d2c2:	60b9      	str	r1, [r7, #8]
 800d2c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	331a      	adds	r3, #26
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	b292      	uxth	r2, r2
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff f85a 	bl	800c38a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d109      	bne.n	800d2f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f103 0214 	add.w	r2, r3, #20
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	0c1b      	lsrs	r3, r3, #16
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	f7ff f84c 	bl	800c38a <st_word>
	}
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	331a      	adds	r3, #26
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff f802 	bl	800c314 <ld_word>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d001      	beq.n	800d31a <cmp_lfn+0x1e>
 800d316:	2300      	movs	r3, #0
 800d318:	e059      	b.n	800d3ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d322:	1e5a      	subs	r2, r3, #1
 800d324:	4613      	mov	r3, r2
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d330:	2301      	movs	r3, #1
 800d332:	81fb      	strh	r3, [r7, #14]
 800d334:	2300      	movs	r3, #0
 800d336:	613b      	str	r3, [r7, #16]
 800d338:	e033      	b.n	800d3a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d33a:	4a27      	ldr	r2, [pc, #156]	@ (800d3d8 <cmp_lfn+0xdc>)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	4413      	add	r3, r2
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	461a      	mov	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	4413      	add	r3, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe ffe3 	bl	800c314 <ld_word>
 800d34e:	4603      	mov	r3, r0
 800d350:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d352:	89fb      	ldrh	r3, [r7, #14]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01a      	beq.n	800d38e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d35c:	d812      	bhi.n	800d384 <cmp_lfn+0x88>
 800d35e:	89bb      	ldrh	r3, [r7, #12]
 800d360:	4618      	mov	r0, r3
 800d362:	f001 fcd5 	bl	800ed10 <ff_wtoupper>
 800d366:	4603      	mov	r3, r0
 800d368:	461c      	mov	r4, r3
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	1c5a      	adds	r2, r3, #1
 800d36e:	617a      	str	r2, [r7, #20]
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	4413      	add	r3, r2
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 fcc9 	bl	800ed10 <ff_wtoupper>
 800d37e:	4603      	mov	r3, r0
 800d380:	429c      	cmp	r4, r3
 800d382:	d001      	beq.n	800d388 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d384:	2300      	movs	r3, #0
 800d386:	e022      	b.n	800d3ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800d388:	89bb      	ldrh	r3, [r7, #12]
 800d38a:	81fb      	strh	r3, [r7, #14]
 800d38c:	e006      	b.n	800d39c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d38e:	89bb      	ldrh	r3, [r7, #12]
 800d390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d394:	4293      	cmp	r3, r2
 800d396:	d001      	beq.n	800d39c <cmp_lfn+0xa0>
 800d398:	2300      	movs	r3, #0
 800d39a:	e018      	b.n	800d3ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	613b      	str	r3, [r7, #16]
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b0c      	cmp	r3, #12
 800d3a6:	d9c8      	bls.n	800d33a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00b      	beq.n	800d3cc <cmp_lfn+0xd0>
 800d3b4:	89fb      	ldrh	r3, [r7, #14]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d008      	beq.n	800d3cc <cmp_lfn+0xd0>
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <cmp_lfn+0xd0>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e000      	b.n	800d3ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d3cc:	2301      	movs	r3, #1
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	371c      	adds	r7, #28
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd90      	pop	{r4, r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	0800fa50 	.word	0x0800fa50

0800d3dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	71fb      	strb	r3, [r7, #7]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	330d      	adds	r3, #13
 800d3f6:	79ba      	ldrb	r2, [r7, #6]
 800d3f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	330b      	adds	r3, #11
 800d3fe:	220f      	movs	r2, #15
 800d400:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	330c      	adds	r3, #12
 800d406:	2200      	movs	r2, #0
 800d408:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	331a      	adds	r3, #26
 800d40e:	2100      	movs	r1, #0
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe ffba 	bl	800c38a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d416:	79fb      	ldrb	r3, [r7, #7]
 800d418:	1e5a      	subs	r2, r3, #1
 800d41a:	4613      	mov	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	82fb      	strh	r3, [r7, #22]
 800d42a:	2300      	movs	r3, #0
 800d42c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d42e:	8afb      	ldrh	r3, [r7, #22]
 800d430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d434:	4293      	cmp	r3, r2
 800d436:	d007      	beq.n	800d448 <put_lfn+0x6c>
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	61fa      	str	r2, [r7, #28]
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	4413      	add	r3, r2
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d448:	4a17      	ldr	r2, [pc, #92]	@ (800d4a8 <put_lfn+0xcc>)
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	4413      	add	r3, r2
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	4413      	add	r3, r2
 800d456:	8afa      	ldrh	r2, [r7, #22]
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe ff95 	bl	800c38a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d460:	8afb      	ldrh	r3, [r7, #22]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d102      	bne.n	800d46c <put_lfn+0x90>
 800d466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d46a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	3301      	adds	r3, #1
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b0c      	cmp	r3, #12
 800d476:	d9da      	bls.n	800d42e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d478:	8afb      	ldrh	r3, [r7, #22]
 800d47a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d47e:	4293      	cmp	r3, r2
 800d480:	d006      	beq.n	800d490 <put_lfn+0xb4>
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	4413      	add	r3, r2
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d103      	bne.n	800d498 <put_lfn+0xbc>
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d496:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	79fa      	ldrb	r2, [r7, #7]
 800d49c:	701a      	strb	r2, [r3, #0]
}
 800d49e:	bf00      	nop
 800d4a0:	3720      	adds	r7, #32
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	0800fa50 	.word	0x0800fa50

0800d4ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08c      	sub	sp, #48	@ 0x30
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d4ba:	220b      	movs	r2, #11
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f7fe ffaa 	bl	800c418 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b05      	cmp	r3, #5
 800d4c8:	d929      	bls.n	800d51e <gen_numname+0x72>
		sr = seq;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d4ce:	e020      	b.n	800d512 <gen_numname+0x66>
			wc = *lfn++;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	1c9a      	adds	r2, r3, #2
 800d4d4:	607a      	str	r2, [r7, #4]
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d4da:	2300      	movs	r3, #0
 800d4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4de:	e015      	b.n	800d50c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	005a      	lsls	r2, r3, #1
 800d4e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	4413      	add	r3, r2
 800d4ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d4ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4f0:	085b      	lsrs	r3, r3, #1
 800d4f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <gen_numname+0x5a>
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	4b30      	ldr	r3, [pc, #192]	@ (800d5c4 <gen_numname+0x118>)
 800d502:	4053      	eors	r3, r2
 800d504:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d508:	3301      	adds	r3, #1
 800d50a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	2b0f      	cmp	r3, #15
 800d510:	d9e6      	bls.n	800d4e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1da      	bne.n	800d4d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d51e:	2307      	movs	r3, #7
 800d520:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	b2db      	uxtb	r3, r3
 800d526:	f003 030f 	and.w	r3, r3, #15
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	3330      	adds	r3, #48	@ 0x30
 800d52e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d536:	2b39      	cmp	r3, #57	@ 0x39
 800d538:	d904      	bls.n	800d544 <gen_numname+0x98>
 800d53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d53e:	3307      	adds	r3, #7
 800d540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	1e5a      	subs	r2, r3, #1
 800d548:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d54a:	3330      	adds	r3, #48	@ 0x30
 800d54c:	443b      	add	r3, r7
 800d54e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d552:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	091b      	lsrs	r3, r3, #4
 800d55a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1df      	bne.n	800d522 <gen_numname+0x76>
	ns[i] = '~';
 800d562:	f107 0214 	add.w	r2, r7, #20
 800d566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d568:	4413      	add	r3, r2
 800d56a:	227e      	movs	r2, #126	@ 0x7e
 800d56c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d56e:	2300      	movs	r3, #0
 800d570:	627b      	str	r3, [r7, #36]	@ 0x24
 800d572:	e002      	b.n	800d57a <gen_numname+0xce>
 800d574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d576:	3301      	adds	r3, #1
 800d578:	627b      	str	r3, [r7, #36]	@ 0x24
 800d57a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57e:	429a      	cmp	r2, r3
 800d580:	d205      	bcs.n	800d58e <gen_numname+0xe2>
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	4413      	add	r3, r2
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b20      	cmp	r3, #32
 800d58c:	d1f2      	bne.n	800d574 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	2b07      	cmp	r3, #7
 800d592:	d807      	bhi.n	800d5a4 <gen_numname+0xf8>
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d59a:	3330      	adds	r3, #48	@ 0x30
 800d59c:	443b      	add	r3, r7
 800d59e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d5a2:	e000      	b.n	800d5a6 <gen_numname+0xfa>
 800d5a4:	2120      	movs	r1, #32
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	460a      	mov	r2, r1
 800d5b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	2b07      	cmp	r3, #7
 800d5b8:	d9e9      	bls.n	800d58e <gen_numname+0xe2>
}
 800d5ba:	bf00      	nop
 800d5bc:	bf00      	nop
 800d5be:	3730      	adds	r7, #48	@ 0x30
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	00011021 	.word	0x00011021

0800d5c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d5d4:	230b      	movs	r3, #11
 800d5d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	0852      	lsrs	r2, r2, #1
 800d5de:	01db      	lsls	r3, r3, #7
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	1c59      	adds	r1, r3, #1
 800d5e8:	6079      	str	r1, [r7, #4]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	60bb      	str	r3, [r7, #8]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1ed      	bne.n	800d5d8 <sum_sfn+0x10>
	return sum;
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3714      	adds	r7, #20
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d618:	2100      	movs	r1, #0
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7ff fca7 	bl	800cf6e <dir_sdi>
 800d620:	4603      	mov	r3, r0
 800d622:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <dir_find+0x24>
 800d62a:	7dfb      	ldrb	r3, [r7, #23]
 800d62c:	e0a9      	b.n	800d782 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d62e:	23ff      	movs	r3, #255	@ 0xff
 800d630:	753b      	strb	r3, [r7, #20]
 800d632:	7d3b      	ldrb	r3, [r7, #20]
 800d634:	757b      	strb	r3, [r7, #21]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f04f 32ff 	mov.w	r2, #4294967295
 800d63c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	4619      	mov	r1, r3
 800d644:	6938      	ldr	r0, [r7, #16]
 800d646:	f7ff f915 	bl	800c874 <move_window>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	2b00      	cmp	r3, #0
 800d652:	f040 8090 	bne.w	800d776 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d65e:	7dbb      	ldrb	r3, [r7, #22]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <dir_find+0x60>
 800d664:	2304      	movs	r3, #4
 800d666:	75fb      	strb	r3, [r7, #23]
 800d668:	e08a      	b.n	800d780 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	330b      	adds	r3, #11
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d676:	73fb      	strb	r3, [r7, #15]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7bfa      	ldrb	r2, [r7, #15]
 800d67c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d67e:	7dbb      	ldrb	r3, [r7, #22]
 800d680:	2be5      	cmp	r3, #229	@ 0xe5
 800d682:	d007      	beq.n	800d694 <dir_find+0x8a>
 800d684:	7bfb      	ldrb	r3, [r7, #15]
 800d686:	f003 0308 	and.w	r3, r3, #8
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d009      	beq.n	800d6a2 <dir_find+0x98>
 800d68e:	7bfb      	ldrb	r3, [r7, #15]
 800d690:	2b0f      	cmp	r3, #15
 800d692:	d006      	beq.n	800d6a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d694:	23ff      	movs	r3, #255	@ 0xff
 800d696:	757b      	strb	r3, [r7, #21]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f04f 32ff 	mov.w	r2, #4294967295
 800d69e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6a0:	e05e      	b.n	800d760 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b0f      	cmp	r3, #15
 800d6a6:	d136      	bne.n	800d716 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d154      	bne.n	800d760 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d6b6:	7dbb      	ldrb	r3, [r7, #22]
 800d6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00d      	beq.n	800d6dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	7b5b      	ldrb	r3, [r3, #13]
 800d6c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d6c8:	7dbb      	ldrb	r3, [r7, #22]
 800d6ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6ce:	75bb      	strb	r3, [r7, #22]
 800d6d0:	7dbb      	ldrb	r3, [r7, #22]
 800d6d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	695a      	ldr	r2, [r3, #20]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6dc:	7dba      	ldrb	r2, [r7, #22]
 800d6de:	7d7b      	ldrb	r3, [r7, #21]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d115      	bne.n	800d710 <dir_find+0x106>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	330d      	adds	r3, #13
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	7d3a      	ldrb	r2, [r7, #20]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d10e      	bne.n	800d710 <dir_find+0x106>
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f7ff fdfd 	bl	800d2fc <cmp_lfn>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <dir_find+0x106>
 800d708:	7d7b      	ldrb	r3, [r7, #21]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	e000      	b.n	800d712 <dir_find+0x108>
 800d710:	23ff      	movs	r3, #255	@ 0xff
 800d712:	757b      	strb	r3, [r7, #21]
 800d714:	e024      	b.n	800d760 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d716:	7d7b      	ldrb	r3, [r7, #21]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d109      	bne.n	800d730 <dir_find+0x126>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a1b      	ldr	r3, [r3, #32]
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff ff51 	bl	800d5c8 <sum_sfn>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	7d3b      	ldrb	r3, [r7, #20]
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d024      	beq.n	800d77a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10a      	bne.n	800d754 <dir_find+0x14a>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a18      	ldr	r0, [r3, #32]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	3324      	adds	r3, #36	@ 0x24
 800d746:	220b      	movs	r2, #11
 800d748:	4619      	mov	r1, r3
 800d74a:	f7fe fea1 	bl	800c490 <mem_cmp>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d014      	beq.n	800d77e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d754:	23ff      	movs	r3, #255	@ 0xff
 800d756:	757b      	strb	r3, [r7, #21]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f04f 32ff 	mov.w	r2, #4294967295
 800d75e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d760:	2100      	movs	r1, #0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff fc7e 	bl	800d064 <dir_next>
 800d768:	4603      	mov	r3, r0
 800d76a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f43f af65 	beq.w	800d63e <dir_find+0x34>
 800d774:	e004      	b.n	800d780 <dir_find+0x176>
		if (res != FR_OK) break;
 800d776:	bf00      	nop
 800d778:	e002      	b.n	800d780 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d77a:	bf00      	nop
 800d77c:	e000      	b.n	800d780 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d77e:	bf00      	nop

	return res;
 800d780:	7dfb      	ldrb	r3, [r7, #23]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	@ 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d7a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <dir_register+0x20>
 800d7a8:	2306      	movs	r3, #6
 800d7aa:	e0e0      	b.n	800d96e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b0:	e002      	b.n	800d7b8 <dir_register+0x2c>
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	4413      	add	r3, r2
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1f4      	bne.n	800d7b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d7ce:	f107 030c 	add.w	r3, r7, #12
 800d7d2:	220c      	movs	r2, #12
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fe fe1f 	bl	800c418 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d032      	beq.n	800d84a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2240      	movs	r2, #64	@ 0x40
 800d7e8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7f0:	e016      	b.n	800d820 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	68da      	ldr	r2, [r3, #12]
 800d7fc:	f107 010c 	add.w	r1, r7, #12
 800d800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d802:	f7ff fe53 	bl	800d4ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7ff feff 	bl	800d60a <dir_find>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81c:	3301      	adds	r3, #1
 800d81e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	2b63      	cmp	r3, #99	@ 0x63
 800d824:	d9e5      	bls.n	800d7f2 <dir_register+0x66>
 800d826:	e000      	b.n	800d82a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d828:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82c:	2b64      	cmp	r3, #100	@ 0x64
 800d82e:	d101      	bne.n	800d834 <dir_register+0xa8>
 800d830:	2307      	movs	r3, #7
 800d832:	e09c      	b.n	800d96e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d834:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d838:	2b04      	cmp	r3, #4
 800d83a:	d002      	beq.n	800d842 <dir_register+0xb6>
 800d83c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d840:	e095      	b.n	800d96e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d842:	7dfa      	ldrb	r2, [r7, #23]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d84a:	7dfb      	ldrb	r3, [r7, #23]
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d007      	beq.n	800d864 <dir_register+0xd8>
 800d854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d856:	330c      	adds	r3, #12
 800d858:	4a47      	ldr	r2, [pc, #284]	@ (800d978 <dir_register+0x1ec>)
 800d85a:	fba2 2303 	umull	r2, r3, r2, r3
 800d85e:	089b      	lsrs	r3, r3, #2
 800d860:	3301      	adds	r3, #1
 800d862:	e000      	b.n	800d866 <dir_register+0xda>
 800d864:	2301      	movs	r3, #1
 800d866:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d868:	6a39      	ldr	r1, [r7, #32]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fcbf 	bl	800d1ee <dir_alloc>
 800d870:	4603      	mov	r3, r0
 800d872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d148      	bne.n	800d910 <dir_register+0x184>
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	3b01      	subs	r3, #1
 800d882:	623b      	str	r3, [r7, #32]
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d042      	beq.n	800d910 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	695a      	ldr	r2, [r3, #20]
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	015b      	lsls	r3, r3, #5
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff fb69 	bl	800cf6e <dir_sdi>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d8a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d132      	bne.n	800d910 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3324      	adds	r3, #36	@ 0x24
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fe8a 	bl	800d5c8 <sum_sfn>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	69db      	ldr	r3, [r3, #28]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	69f8      	ldr	r0, [r7, #28]
 800d8c0:	f7fe ffd8 	bl	800c874 <move_window>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d11d      	bne.n	800d90e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	68d8      	ldr	r0, [r3, #12]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a19      	ldr	r1, [r3, #32]
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	7efb      	ldrb	r3, [r7, #27]
 800d8e0:	f7ff fd7c 	bl	800d3dc <put_lfn>
				fs->wflag = 1;
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff fbb9 	bl	800d064 <dir_next>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d8f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d107      	bne.n	800d910 <dir_register+0x184>
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	3b01      	subs	r3, #1
 800d904:	623b      	str	r3, [r7, #32]
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1d5      	bne.n	800d8b8 <dir_register+0x12c>
 800d90c:	e000      	b.n	800d910 <dir_register+0x184>
				if (res != FR_OK) break;
 800d90e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d914:	2b00      	cmp	r3, #0
 800d916:	d128      	bne.n	800d96a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	69db      	ldr	r3, [r3, #28]
 800d91c:	4619      	mov	r1, r3
 800d91e:	69f8      	ldr	r0, [r7, #28]
 800d920:	f7fe ffa8 	bl	800c874 <move_window>
 800d924:	4603      	mov	r3, r0
 800d926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d92a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d11b      	bne.n	800d96a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	2220      	movs	r2, #32
 800d938:	2100      	movs	r1, #0
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fd8d 	bl	800c45a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a18      	ldr	r0, [r3, #32]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3324      	adds	r3, #36	@ 0x24
 800d948:	220b      	movs	r2, #11
 800d94a:	4619      	mov	r1, r3
 800d94c:	f7fe fd64 	bl	800c418 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a1b      	ldr	r3, [r3, #32]
 800d95a:	330c      	adds	r3, #12
 800d95c:	f002 0218 	and.w	r2, r2, #24
 800d960:	b2d2      	uxtb	r2, r2
 800d962:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	2201      	movs	r2, #1
 800d968:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d96a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3730      	adds	r7, #48	@ 0x30
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	4ec4ec4f 	.word	0x4ec4ec4f

0800d97c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08a      	sub	sp, #40	@ 0x28
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	60fb      	str	r3, [r7, #12]
 800d994:	2300      	movs	r3, #0
 800d996:	617b      	str	r3, [r7, #20]
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	61ba      	str	r2, [r7, #24]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d9aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9ac:	2b1f      	cmp	r3, #31
 800d9ae:	d940      	bls.n	800da32 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d9b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9b4:	d006      	beq.n	800d9c4 <create_name+0x48>
 800d9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9ba:	d110      	bne.n	800d9de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d9bc:	e002      	b.n	800d9c4 <create_name+0x48>
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	61bb      	str	r3, [r7, #24]
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9ce:	d0f6      	beq.n	800d9be <create_name+0x42>
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9da:	d0f0      	beq.n	800d9be <create_name+0x42>
			break;
 800d9dc:	e02a      	b.n	800da34 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2bfe      	cmp	r3, #254	@ 0xfe
 800d9e2:	d901      	bls.n	800d9e8 <create_name+0x6c>
 800d9e4:	2306      	movs	r3, #6
 800d9e6:	e17d      	b.n	800dce4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d9e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d9ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f001 f950 	bl	800ec98 <ff_convert>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d9fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d101      	bne.n	800da06 <create_name+0x8a>
 800da02:	2306      	movs	r3, #6
 800da04:	e16e      	b.n	800dce4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da08:	2b7f      	cmp	r3, #127	@ 0x7f
 800da0a:	d809      	bhi.n	800da20 <create_name+0xa4>
 800da0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da0e:	4619      	mov	r1, r3
 800da10:	488d      	ldr	r0, [pc, #564]	@ (800dc48 <create_name+0x2cc>)
 800da12:	f7fe fd64 	bl	800c4de <chk_chr>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <create_name+0xa4>
 800da1c:	2306      	movs	r3, #6
 800da1e:	e161      	b.n	800dce4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	617a      	str	r2, [r7, #20]
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4413      	add	r3, r2
 800da2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da2e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da30:	e7b4      	b.n	800d99c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da32:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	441a      	add	r2, r3
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da40:	2b1f      	cmp	r3, #31
 800da42:	d801      	bhi.n	800da48 <create_name+0xcc>
 800da44:	2304      	movs	r3, #4
 800da46:	e000      	b.n	800da4a <create_name+0xce>
 800da48:	2300      	movs	r3, #0
 800da4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da4e:	e011      	b.n	800da74 <create_name+0xf8>
		w = lfn[di - 1];
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800da56:	4413      	add	r3, r2
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4413      	add	r3, r2
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800da62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da64:	2b20      	cmp	r3, #32
 800da66:	d002      	beq.n	800da6e <create_name+0xf2>
 800da68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800da6c:	d106      	bne.n	800da7c <create_name+0x100>
		di--;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	3b01      	subs	r3, #1
 800da72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1ea      	bne.n	800da50 <create_name+0xd4>
 800da7a:	e000      	b.n	800da7e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800da7c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	4413      	add	r3, r2
 800da86:	2200      	movs	r2, #0
 800da88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d101      	bne.n	800da94 <create_name+0x118>
 800da90:	2306      	movs	r3, #6
 800da92:	e127      	b.n	800dce4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	3324      	adds	r3, #36	@ 0x24
 800da98:	220b      	movs	r2, #11
 800da9a:	2120      	movs	r1, #32
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fcdc 	bl	800c45a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800daa2:	2300      	movs	r3, #0
 800daa4:	61bb      	str	r3, [r7, #24]
 800daa6:	e002      	b.n	800daae <create_name+0x132>
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	3301      	adds	r3, #1
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4413      	add	r3, r2
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	2b20      	cmp	r3, #32
 800daba:	d0f5      	beq.n	800daa8 <create_name+0x12c>
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dac8:	d0ee      	beq.n	800daa8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d009      	beq.n	800dae4 <create_name+0x168>
 800dad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dad4:	f043 0303 	orr.w	r3, r3, #3
 800dad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dadc:	e002      	b.n	800dae4 <create_name+0x168>
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	617b      	str	r3, [r7, #20]
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <create_name+0x182>
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800daf0:	4413      	add	r3, r2
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	4413      	add	r3, r2
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dafc:	d1ef      	bne.n	800dade <create_name+0x162>

	i = b = 0; ni = 8;
 800dafe:	2300      	movs	r3, #0
 800db00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800db04:	2300      	movs	r3, #0
 800db06:	623b      	str	r3, [r7, #32]
 800db08:	2308      	movs	r3, #8
 800db0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	61ba      	str	r2, [r7, #24]
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4413      	add	r3, r2
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8090 	beq.w	800dc44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db26:	2b20      	cmp	r3, #32
 800db28:	d006      	beq.n	800db38 <create_name+0x1bc>
 800db2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800db2e:	d10a      	bne.n	800db46 <create_name+0x1ca>
 800db30:	69ba      	ldr	r2, [r7, #24]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	429a      	cmp	r2, r3
 800db36:	d006      	beq.n	800db46 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800db38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db3c:	f043 0303 	orr.w	r3, r3, #3
 800db40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db44:	e07d      	b.n	800dc42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800db46:	6a3a      	ldr	r2, [r7, #32]
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d203      	bcs.n	800db56 <create_name+0x1da>
 800db4e:	69ba      	ldr	r2, [r7, #24]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	429a      	cmp	r2, r3
 800db54:	d123      	bne.n	800db9e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	2b0b      	cmp	r3, #11
 800db5a:	d106      	bne.n	800db6a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800db5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db60:	f043 0303 	orr.w	r3, r3, #3
 800db64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db68:	e075      	b.n	800dc56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800db6a:	69ba      	ldr	r2, [r7, #24]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d005      	beq.n	800db7e <create_name+0x202>
 800db72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db76:	f043 0303 	orr.w	r3, r3, #3
 800db7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800db7e:	69ba      	ldr	r2, [r7, #24]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	429a      	cmp	r2, r3
 800db84:	d866      	bhi.n	800dc54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	61bb      	str	r3, [r7, #24]
 800db8a:	2308      	movs	r3, #8
 800db8c:	623b      	str	r3, [r7, #32]
 800db8e:	230b      	movs	r3, #11
 800db90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800db92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800db9c:	e051      	b.n	800dc42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800db9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dba0:	2b7f      	cmp	r3, #127	@ 0x7f
 800dba2:	d914      	bls.n	800dbce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dba6:	2100      	movs	r1, #0
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f001 f875 	bl	800ec98 <ff_convert>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dbb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d004      	beq.n	800dbc2 <create_name+0x246>
 800dbb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbba:	3b80      	subs	r3, #128	@ 0x80
 800dbbc:	4a23      	ldr	r2, [pc, #140]	@ (800dc4c <create_name+0x2d0>)
 800dbbe:	5cd3      	ldrb	r3, [r2, r3]
 800dbc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dbc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbc6:	f043 0302 	orr.w	r3, r3, #2
 800dbca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dbce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d007      	beq.n	800dbe4 <create_name+0x268>
 800dbd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	481d      	ldr	r0, [pc, #116]	@ (800dc50 <create_name+0x2d4>)
 800dbda:	f7fe fc80 	bl	800c4de <chk_chr>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d008      	beq.n	800dbf6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dbe4:	235f      	movs	r3, #95	@ 0x5f
 800dbe6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbec:	f043 0303 	orr.w	r3, r3, #3
 800dbf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dbf4:	e01b      	b.n	800dc2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dbf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbf8:	2b40      	cmp	r3, #64	@ 0x40
 800dbfa:	d909      	bls.n	800dc10 <create_name+0x294>
 800dbfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbfe:	2b5a      	cmp	r3, #90	@ 0x5a
 800dc00:	d806      	bhi.n	800dc10 <create_name+0x294>
					b |= 2;
 800dc02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc0e:	e00e      	b.n	800dc2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc12:	2b60      	cmp	r3, #96	@ 0x60
 800dc14:	d90b      	bls.n	800dc2e <create_name+0x2b2>
 800dc16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc18:	2b7a      	cmp	r3, #122	@ 0x7a
 800dc1a:	d808      	bhi.n	800dc2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc20:	f043 0301 	orr.w	r3, r3, #1
 800dc24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc2a:	3b20      	subs	r3, #32
 800dc2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	623a      	str	r2, [r7, #32]
 800dc34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc36:	b2d1      	uxtb	r1, r2
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	460a      	mov	r2, r1
 800dc3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dc42:	e763      	b.n	800db0c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dc44:	bf00      	nop
 800dc46:	e006      	b.n	800dc56 <create_name+0x2da>
 800dc48:	0800f970 	.word	0x0800f970
 800dc4c:	0800f9d0 	.word	0x0800f9d0
 800dc50:	0800f97c 	.word	0x0800f97c
			if (si > di) break;			/* No extension */
 800dc54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc5c:	2be5      	cmp	r3, #229	@ 0xe5
 800dc5e:	d103      	bne.n	800dc68 <create_name+0x2ec>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2205      	movs	r2, #5
 800dc64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b08      	cmp	r3, #8
 800dc6c:	d104      	bne.n	800dc78 <create_name+0x2fc>
 800dc6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dc78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc7c:	f003 030c 	and.w	r3, r3, #12
 800dc80:	2b0c      	cmp	r3, #12
 800dc82:	d005      	beq.n	800dc90 <create_name+0x314>
 800dc84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc88:	f003 0303 	and.w	r3, r3, #3
 800dc8c:	2b03      	cmp	r3, #3
 800dc8e:	d105      	bne.n	800dc9c <create_name+0x320>
 800dc90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dca0:	f003 0302 	and.w	r3, r3, #2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d117      	bne.n	800dcd8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dca8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcac:	f003 0303 	and.w	r3, r3, #3
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d105      	bne.n	800dcc0 <create_name+0x344>
 800dcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcb8:	f043 0310 	orr.w	r3, r3, #16
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dcc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcc4:	f003 030c 	and.w	r3, r3, #12
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d105      	bne.n	800dcd8 <create_name+0x35c>
 800dccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcd0:	f043 0308 	orr.w	r3, r3, #8
 800dcd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dcde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800dce2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3728      	adds	r7, #40	@ 0x28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd00:	e002      	b.n	800dd08 <follow_path+0x1c>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	3301      	adds	r3, #1
 800dd06:	603b      	str	r3, [r7, #0]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd0e:	d0f8      	beq.n	800dd02 <follow_path+0x16>
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd16:	d0f4      	beq.n	800dd02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b1f      	cmp	r3, #31
 800dd24:	d80a      	bhi.n	800dd3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2280      	movs	r2, #128	@ 0x80
 800dd2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff f91c 	bl	800cf6e <dir_sdi>
 800dd36:	4603      	mov	r3, r0
 800dd38:	75fb      	strb	r3, [r7, #23]
 800dd3a:	e043      	b.n	800ddc4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd3c:	463b      	mov	r3, r7
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff fe1b 	bl	800d97c <create_name>
 800dd46:	4603      	mov	r3, r0
 800dd48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d134      	bne.n	800ddba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff fc5a 	bl	800d60a <dir_find>
 800dd56:	4603      	mov	r3, r0
 800dd58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dd60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00a      	beq.n	800dd7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	2b04      	cmp	r3, #4
 800dd6c:	d127      	bne.n	800ddbe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d122      	bne.n	800ddbe <follow_path+0xd2>
 800dd78:	2305      	movs	r3, #5
 800dd7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dd7c:	e01f      	b.n	800ddbe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd7e:	7afb      	ldrb	r3, [r7, #11]
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d11c      	bne.n	800ddc2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	799b      	ldrb	r3, [r3, #6]
 800dd8c:	f003 0310 	and.w	r3, r3, #16
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd94:	2305      	movs	r3, #5
 800dd96:	75fb      	strb	r3, [r7, #23]
 800dd98:	e014      	b.n	800ddc4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dda8:	4413      	add	r3, r2
 800ddaa:	4619      	mov	r1, r3
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff fa65 	bl	800d27c <ld_clust>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddb8:	e7c0      	b.n	800dd3c <follow_path+0x50>
			if (res != FR_OK) break;
 800ddba:	bf00      	nop
 800ddbc:	e002      	b.n	800ddc4 <follow_path+0xd8>
				break;
 800ddbe:	bf00      	nop
 800ddc0:	e000      	b.n	800ddc4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddc2:	bf00      	nop
			}
		}
	}

	return res;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b087      	sub	sp, #28
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ddd6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d031      	beq.n	800de48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e002      	b.n	800ddf2 <get_ldnumber+0x24>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b1f      	cmp	r3, #31
 800ddf8:	d903      	bls.n	800de02 <get_ldnumber+0x34>
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b3a      	cmp	r3, #58	@ 0x3a
 800de00:	d1f4      	bne.n	800ddec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	2b3a      	cmp	r3, #58	@ 0x3a
 800de08:	d11c      	bne.n	800de44 <get_ldnumber+0x76>
			tp = *path;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	60fa      	str	r2, [r7, #12]
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	3b30      	subs	r3, #48	@ 0x30
 800de1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b09      	cmp	r3, #9
 800de20:	d80e      	bhi.n	800de40 <get_ldnumber+0x72>
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	429a      	cmp	r2, r3
 800de28:	d10a      	bne.n	800de40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d107      	bne.n	800de40 <get_ldnumber+0x72>
					vol = (int)i;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	3301      	adds	r3, #1
 800de38:	617b      	str	r3, [r7, #20]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	697a      	ldr	r2, [r7, #20]
 800de3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	e002      	b.n	800de4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de44:	2300      	movs	r3, #0
 800de46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de48:	693b      	ldr	r3, [r7, #16]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	371c      	adds	r7, #28
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
	...

0800de58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	70da      	strb	r2, [r3, #3]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f04f 32ff 	mov.w	r2, #4294967295
 800de6e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7fe fcfe 	bl	800c874 <move_window>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <check_fs+0x2a>
 800de7e:	2304      	movs	r3, #4
 800de80:	e038      	b.n	800def4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3334      	adds	r3, #52	@ 0x34
 800de86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fa42 	bl	800c314 <ld_word>
 800de90:	4603      	mov	r3, r0
 800de92:	461a      	mov	r2, r3
 800de94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800de98:	429a      	cmp	r2, r3
 800de9a:	d001      	beq.n	800dea0 <check_fs+0x48>
 800de9c:	2303      	movs	r3, #3
 800de9e:	e029      	b.n	800def4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dea6:	2be9      	cmp	r3, #233	@ 0xe9
 800dea8:	d009      	beq.n	800debe <check_fs+0x66>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800deb0:	2beb      	cmp	r3, #235	@ 0xeb
 800deb2:	d11e      	bne.n	800def2 <check_fs+0x9a>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800deba:	2b90      	cmp	r3, #144	@ 0x90
 800debc:	d119      	bne.n	800def2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3334      	adds	r3, #52	@ 0x34
 800dec2:	3336      	adds	r3, #54	@ 0x36
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fe fa3d 	bl	800c344 <ld_dword>
 800deca:	4603      	mov	r3, r0
 800decc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ded0:	4a0a      	ldr	r2, [pc, #40]	@ (800defc <check_fs+0xa4>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d101      	bne.n	800deda <check_fs+0x82>
 800ded6:	2300      	movs	r3, #0
 800ded8:	e00c      	b.n	800def4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3334      	adds	r3, #52	@ 0x34
 800dede:	3352      	adds	r3, #82	@ 0x52
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fe fa2f 	bl	800c344 <ld_dword>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4a05      	ldr	r2, [pc, #20]	@ (800df00 <check_fs+0xa8>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d101      	bne.n	800def2 <check_fs+0x9a>
 800deee:	2300      	movs	r3, #0
 800def0:	e000      	b.n	800def4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800def2:	2302      	movs	r3, #2
}
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	00544146 	.word	0x00544146
 800df00:	33544146 	.word	0x33544146

0800df04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b096      	sub	sp, #88	@ 0x58
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	4613      	mov	r3, r2
 800df10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f7ff ff58 	bl	800ddce <get_ldnumber>
 800df1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df22:	2b00      	cmp	r3, #0
 800df24:	da01      	bge.n	800df2a <find_volume+0x26>
 800df26:	230b      	movs	r3, #11
 800df28:	e230      	b.n	800e38c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df2a:	4aa1      	ldr	r2, [pc, #644]	@ (800e1b0 <find_volume+0x2ac>)
 800df2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <find_volume+0x3a>
 800df3a:	230c      	movs	r3, #12
 800df3c:	e226      	b.n	800e38c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	f023 0301 	bic.w	r3, r3, #1
 800df4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d01a      	beq.n	800df8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	785b      	ldrb	r3, [r3, #1]
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe f93b 	bl	800c1d4 <disk_status>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800df64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10c      	bne.n	800df8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df70:	79fb      	ldrb	r3, [r7, #7]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d007      	beq.n	800df86 <find_volume+0x82>
 800df76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800df7a:	f003 0304 	and.w	r3, r3, #4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800df82:	230a      	movs	r3, #10
 800df84:	e202      	b.n	800e38c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800df86:	2300      	movs	r3, #0
 800df88:	e200      	b.n	800e38c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8c:	2200      	movs	r2, #0
 800df8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df92:	b2da      	uxtb	r2, r3
 800df94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9a:	785b      	ldrb	r3, [r3, #1]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe f933 	bl	800c208 <disk_initialize>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dfa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e1e9      	b.n	800e38c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <find_volume+0xca>
 800dfbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfc2:	f003 0304 	and.w	r3, r3, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dfca:	230a      	movs	r3, #10
 800dfcc:	e1de      	b.n	800e38c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dfd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dfd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfd6:	f7ff ff3f 	bl	800de58 <check_fs>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dfe0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	d149      	bne.n	800e07c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfe8:	2300      	movs	r3, #0
 800dfea:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfec:	e01e      	b.n	800e02c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dff6:	011b      	lsls	r3, r3, #4
 800dff8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dffc:	4413      	add	r3, r2
 800dffe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e002:	3304      	adds	r3, #4
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d006      	beq.n	800e018 <find_volume+0x114>
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	3308      	adds	r3, #8
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fe f998 	bl	800c344 <ld_dword>
 800e014:	4602      	mov	r2, r0
 800e016:	e000      	b.n	800e01a <find_volume+0x116>
 800e018:	2200      	movs	r2, #0
 800e01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	3358      	adds	r3, #88	@ 0x58
 800e020:	443b      	add	r3, r7
 800e022:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e028:	3301      	adds	r3, #1
 800e02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e02c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d9dd      	bls.n	800dfee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e032:	2300      	movs	r3, #0
 800e034:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <find_volume+0x13e>
 800e03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e03e:	3b01      	subs	r3, #1
 800e040:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	3358      	adds	r3, #88	@ 0x58
 800e048:	443b      	add	r3, r7
 800e04a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e04e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <find_volume+0x15e>
 800e056:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e058:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e05a:	f7ff fefd 	bl	800de58 <check_fs>
 800e05e:	4603      	mov	r3, r0
 800e060:	e000      	b.n	800e064 <find_volume+0x160>
 800e062:	2303      	movs	r3, #3
 800e064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e068:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d905      	bls.n	800e07c <find_volume+0x178>
 800e070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e072:	3301      	adds	r3, #1
 800e074:	643b      	str	r3, [r7, #64]	@ 0x40
 800e076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e078:	2b03      	cmp	r3, #3
 800e07a:	d9e2      	bls.n	800e042 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e07c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e080:	2b04      	cmp	r3, #4
 800e082:	d101      	bne.n	800e088 <find_volume+0x184>
 800e084:	2301      	movs	r3, #1
 800e086:	e181      	b.n	800e38c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d901      	bls.n	800e094 <find_volume+0x190>
 800e090:	230d      	movs	r3, #13
 800e092:	e17b      	b.n	800e38c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e096:	3334      	adds	r3, #52	@ 0x34
 800e098:	330b      	adds	r3, #11
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fe f93a 	bl	800c314 <ld_word>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0a6:	d001      	beq.n	800e0ac <find_volume+0x1a8>
 800e0a8:	230d      	movs	r3, #13
 800e0aa:	e16f      	b.n	800e38c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ae:	3334      	adds	r3, #52	@ 0x34
 800e0b0:	3316      	adds	r3, #22
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe f92e 	bl	800c314 <ld_word>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <find_volume+0x1cc>
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c4:	3334      	adds	r3, #52	@ 0x34
 800e0c6:	3324      	adds	r3, #36	@ 0x24
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe f93b 	bl	800c344 <ld_dword>
 800e0ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0d4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e2:	789b      	ldrb	r3, [r3, #2]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d005      	beq.n	800e0f4 <find_volume+0x1f0>
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ea:	789b      	ldrb	r3, [r3, #2]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d001      	beq.n	800e0f4 <find_volume+0x1f0>
 800e0f0:	230d      	movs	r3, #13
 800e0f2:	e14b      	b.n	800e38c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f6:	789b      	ldrb	r3, [r3, #2]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0fc:	fb02 f303 	mul.w	r3, r2, r3
 800e100:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e108:	461a      	mov	r2, r3
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e110:	895b      	ldrh	r3, [r3, #10]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d008      	beq.n	800e128 <find_volume+0x224>
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	895b      	ldrh	r3, [r3, #10]
 800e11a:	461a      	mov	r2, r3
 800e11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11e:	895b      	ldrh	r3, [r3, #10]
 800e120:	3b01      	subs	r3, #1
 800e122:	4013      	ands	r3, r2
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <find_volume+0x228>
 800e128:	230d      	movs	r3, #13
 800e12a:	e12f      	b.n	800e38c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	3334      	adds	r3, #52	@ 0x34
 800e130:	3311      	adds	r3, #17
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe f8ee 	bl	800c314 <ld_word>
 800e138:	4603      	mov	r3, r0
 800e13a:	461a      	mov	r2, r3
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e142:	891b      	ldrh	r3, [r3, #8]
 800e144:	f003 030f 	and.w	r3, r3, #15
 800e148:	b29b      	uxth	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <find_volume+0x24e>
 800e14e:	230d      	movs	r3, #13
 800e150:	e11c      	b.n	800e38c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e154:	3334      	adds	r3, #52	@ 0x34
 800e156:	3313      	adds	r3, #19
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe f8db 	bl	800c314 <ld_word>
 800e15e:	4603      	mov	r3, r0
 800e160:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e164:	2b00      	cmp	r3, #0
 800e166:	d106      	bne.n	800e176 <find_volume+0x272>
 800e168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16a:	3334      	adds	r3, #52	@ 0x34
 800e16c:	3320      	adds	r3, #32
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe f8e8 	bl	800c344 <ld_dword>
 800e174:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e178:	3334      	adds	r3, #52	@ 0x34
 800e17a:	330e      	adds	r3, #14
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe f8c9 	bl	800c314 <ld_word>
 800e182:	4603      	mov	r3, r0
 800e184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e186:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <find_volume+0x28c>
 800e18c:	230d      	movs	r3, #13
 800e18e:	e0fd      	b.n	800e38c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e190:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e194:	4413      	add	r3, r2
 800e196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e198:	8912      	ldrh	r2, [r2, #8]
 800e19a:	0912      	lsrs	r2, r2, #4
 800e19c:	b292      	uxth	r2, r2
 800e19e:	4413      	add	r3, r2
 800e1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d204      	bcs.n	800e1b4 <find_volume+0x2b0>
 800e1aa:	230d      	movs	r3, #13
 800e1ac:	e0ee      	b.n	800e38c <find_volume+0x488>
 800e1ae:	bf00      	nop
 800e1b0:	24000380 	.word	0x24000380
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1bc:	8952      	ldrh	r2, [r2, #10]
 800e1be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <find_volume+0x2ca>
 800e1ca:	230d      	movs	r3, #13
 800e1cc:	e0de      	b.n	800e38c <find_volume+0x488>
		fmt = FS_FAT32;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d802      	bhi.n	800e1e4 <find_volume+0x2e0>
 800e1de:	2302      	movs	r3, #2
 800e1e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d802      	bhi.n	800e1f4 <find_volume+0x2f0>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f6:	1c9a      	adds	r2, r3, #2
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e200:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e202:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e206:	441a      	add	r2, r3
 800e208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e20c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	441a      	add	r2, r3
 800e212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e214:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d11e      	bne.n	800e25c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e220:	3334      	adds	r3, #52	@ 0x34
 800e222:	332a      	adds	r3, #42	@ 0x2a
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe f875 	bl	800c314 <ld_word>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <find_volume+0x330>
 800e230:	230d      	movs	r3, #13
 800e232:	e0ab      	b.n	800e38c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e236:	891b      	ldrh	r3, [r3, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <find_volume+0x33c>
 800e23c:	230d      	movs	r3, #13
 800e23e:	e0a5      	b.n	800e38c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	3334      	adds	r3, #52	@ 0x34
 800e244:	332c      	adds	r3, #44	@ 0x2c
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe f87c 	bl	800c344 <ld_dword>
 800e24c:	4602      	mov	r2, r0
 800e24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e250:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	647b      	str	r3, [r7, #68]	@ 0x44
 800e25a:	e01f      	b.n	800e29c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25e:	891b      	ldrh	r3, [r3, #8]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <find_volume+0x364>
 800e264:	230d      	movs	r3, #13
 800e266:	e091      	b.n	800e38c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e26c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e26e:	441a      	add	r2, r3
 800e270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e272:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d103      	bne.n	800e284 <find_volume+0x380>
 800e27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	e00a      	b.n	800e29a <find_volume+0x396>
 800e284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e286:	699a      	ldr	r2, [r3, #24]
 800e288:	4613      	mov	r3, r2
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	4413      	add	r3, r2
 800e28e:	085a      	lsrs	r2, r3, #1
 800e290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e29a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	69da      	ldr	r2, [r3, #28]
 800e2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e2a6:	0a5b      	lsrs	r3, r3, #9
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d201      	bcs.n	800e2b0 <find_volume+0x3ac>
 800e2ac:	230d      	movs	r3, #13
 800e2ae:	e06d      	b.n	800e38c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b6:	615a      	str	r2, [r3, #20]
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ba:	695a      	ldr	r2, [r3, #20]
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c2:	2280      	movs	r2, #128	@ 0x80
 800e2c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e2c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	d149      	bne.n	800e362 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d0:	3334      	adds	r3, #52	@ 0x34
 800e2d2:	3330      	adds	r3, #48	@ 0x30
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe f81d 	bl	800c314 <ld_word>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d140      	bne.n	800e362 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2e8:	f7fe fac4 	bl	800c874 <move_window>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d137      	bne.n	800e362 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	3334      	adds	r3, #52	@ 0x34
 800e2fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe f807 	bl	800c314 <ld_word>
 800e306:	4603      	mov	r3, r0
 800e308:	461a      	mov	r2, r3
 800e30a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e30e:	429a      	cmp	r2, r3
 800e310:	d127      	bne.n	800e362 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e314:	3334      	adds	r3, #52	@ 0x34
 800e316:	4618      	mov	r0, r3
 800e318:	f7fe f814 	bl	800c344 <ld_dword>
 800e31c:	4603      	mov	r3, r0
 800e31e:	4a1d      	ldr	r2, [pc, #116]	@ (800e394 <find_volume+0x490>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d11e      	bne.n	800e362 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	3334      	adds	r3, #52	@ 0x34
 800e328:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe f809 	bl	800c344 <ld_dword>
 800e332:	4603      	mov	r3, r0
 800e334:	4a18      	ldr	r2, [pc, #96]	@ (800e398 <find_volume+0x494>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d113      	bne.n	800e362 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33c:	3334      	adds	r3, #52	@ 0x34
 800e33e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e342:	4618      	mov	r0, r3
 800e344:	f7fd fffe 	bl	800c344 <ld_dword>
 800e348:	4602      	mov	r2, r0
 800e34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e350:	3334      	adds	r3, #52	@ 0x34
 800e352:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd fff4 	bl	800c344 <ld_dword>
 800e35c:	4602      	mov	r2, r0
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e364:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e368:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e36a:	4b0c      	ldr	r3, [pc, #48]	@ (800e39c <find_volume+0x498>)
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	b29a      	uxth	r2, r3
 800e372:	4b0a      	ldr	r3, [pc, #40]	@ (800e39c <find_volume+0x498>)
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	4b09      	ldr	r3, [pc, #36]	@ (800e39c <find_volume+0x498>)
 800e378:	881a      	ldrh	r2, [r3, #0]
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e380:	4a07      	ldr	r2, [pc, #28]	@ (800e3a0 <find_volume+0x49c>)
 800e382:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e384:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e386:	f7fe fa0d 	bl	800c7a4 <clear_lock>
#endif
	return FR_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3758      	adds	r7, #88	@ 0x58
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	41615252 	.word	0x41615252
 800e398:	61417272 	.word	0x61417272
 800e39c:	24000384 	.word	0x24000384
 800e3a0:	240003a8 	.word	0x240003a8

0800e3a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e3ae:	2309      	movs	r3, #9
 800e3b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d01c      	beq.n	800e3f2 <validate+0x4e>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d018      	beq.n	800e3f2 <validate+0x4e>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d013      	beq.n	800e3f2 <validate+0x4e>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	889a      	ldrh	r2, [r3, #4]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	88db      	ldrh	r3, [r3, #6]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d10c      	bne.n	800e3f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	785b      	ldrb	r3, [r3, #1]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fd fef8 	bl	800c1d4 <disk_status>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d101      	bne.n	800e3f2 <validate+0x4e>
			res = FR_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <validate+0x5a>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	e000      	b.n	800e400 <validate+0x5c>
 800e3fe:	2300      	movs	r3, #0
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	6013      	str	r3, [r2, #0]
	return res;
 800e404:	7bfb      	ldrb	r3, [r7, #15]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b088      	sub	sp, #32
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	4613      	mov	r3, r2
 800e41c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e422:	f107 0310 	add.w	r3, r7, #16
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff fcd1 	bl	800ddce <get_ldnumber>
 800e42c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	2b00      	cmp	r3, #0
 800e432:	da01      	bge.n	800e438 <f_mount+0x28>
 800e434:	230b      	movs	r3, #11
 800e436:	e02b      	b.n	800e490 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e438:	4a17      	ldr	r2, [pc, #92]	@ (800e498 <f_mount+0x88>)
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e440:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e448:	69b8      	ldr	r0, [r7, #24]
 800e44a:	f7fe f9ab 	bl	800c7a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	2200      	movs	r2, #0
 800e452:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	490d      	ldr	r1, [pc, #52]	@ (800e498 <f_mount+0x88>)
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <f_mount+0x66>
 800e470:	79fb      	ldrb	r3, [r7, #7]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d001      	beq.n	800e47a <f_mount+0x6a>
 800e476:	2300      	movs	r3, #0
 800e478:	e00a      	b.n	800e490 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e47a:	f107 010c 	add.w	r1, r7, #12
 800e47e:	f107 0308 	add.w	r3, r7, #8
 800e482:	2200      	movs	r2, #0
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff fd3d 	bl	800df04 <find_volume>
 800e48a:	4603      	mov	r3, r0
 800e48c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3720      	adds	r7, #32
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	24000380 	.word	0x24000380

0800e49c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b09a      	sub	sp, #104	@ 0x68
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <f_open+0x18>
 800e4b0:	2309      	movs	r3, #9
 800e4b2:	e1a9      	b.n	800e808 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e4bc:	79fa      	ldrb	r2, [r7, #7]
 800e4be:	f107 0114 	add.w	r1, r7, #20
 800e4c2:	f107 0308 	add.w	r3, r7, #8
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fd1c 	bl	800df04 <find_volume>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e4d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f040 818d 	bne.w	800e7f6 <f_open+0x35a>
		dj.obj.fs = fs;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	f107 0318 	add.w	r3, r7, #24
 800e4e6:	4611      	mov	r1, r2
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff fbff 	bl	800dcec <follow_path>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e4f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d118      	bne.n	800e52e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e4fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e500:	b25b      	sxtb	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	da03      	bge.n	800e50e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e506:	2306      	movs	r3, #6
 800e508:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e50c:	e00f      	b.n	800e52e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e50e:	79fb      	ldrb	r3, [r7, #7]
 800e510:	2b01      	cmp	r3, #1
 800e512:	bf8c      	ite	hi
 800e514:	2301      	movhi	r3, #1
 800e516:	2300      	movls	r3, #0
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	f107 0318 	add.w	r3, r7, #24
 800e520:	4611      	mov	r1, r2
 800e522:	4618      	mov	r0, r3
 800e524:	f7fd fff6 	bl	800c514 <chk_lock>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	f003 031c 	and.w	r3, r3, #28
 800e534:	2b00      	cmp	r3, #0
 800e536:	d07f      	beq.n	800e638 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e538:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d017      	beq.n	800e570 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e540:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e544:	2b04      	cmp	r3, #4
 800e546:	d10e      	bne.n	800e566 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e548:	f7fe f840 	bl	800c5cc <enq_lock>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d006      	beq.n	800e560 <f_open+0xc4>
 800e552:	f107 0318 	add.w	r3, r7, #24
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff f918 	bl	800d78c <dir_register>
 800e55c:	4603      	mov	r3, r0
 800e55e:	e000      	b.n	800e562 <f_open+0xc6>
 800e560:	2312      	movs	r3, #18
 800e562:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	f043 0308 	orr.w	r3, r3, #8
 800e56c:	71fb      	strb	r3, [r7, #7]
 800e56e:	e010      	b.n	800e592 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e570:	7fbb      	ldrb	r3, [r7, #30]
 800e572:	f003 0311 	and.w	r3, r3, #17
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <f_open+0xe6>
					res = FR_DENIED;
 800e57a:	2307      	movs	r3, #7
 800e57c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e580:	e007      	b.n	800e592 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	f003 0304 	and.w	r3, r3, #4
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <f_open+0xf6>
 800e58c:	2308      	movs	r3, #8
 800e58e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e592:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e596:	2b00      	cmp	r3, #0
 800e598:	d168      	bne.n	800e66c <f_open+0x1d0>
 800e59a:	79fb      	ldrb	r3, [r7, #7]
 800e59c:	f003 0308 	and.w	r3, r3, #8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d063      	beq.n	800e66c <f_open+0x1d0>
				dw = GET_FATTIME();
 800e5a4:	f7fd f852 	bl	800b64c <get_fattime>
 800e5a8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ac:	330e      	adds	r3, #14
 800e5ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fd ff05 	bl	800c3c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b8:	3316      	adds	r3, #22
 800e5ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fd feff 	bl	800c3c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c4:	330b      	adds	r3, #11
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fe53 	bl	800d27c <ld_clust>
 800e5d6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e5dc:	2200      	movs	r2, #0
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe fe6b 	bl	800d2ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e6:	331c      	adds	r3, #28
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fd fee8 	bl	800c3c0 <st_dword>
					fs->wflag = 1;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d037      	beq.n	800e66c <f_open+0x1d0>
						dw = fs->winsect;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e600:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e602:	f107 0318 	add.w	r3, r7, #24
 800e606:	2200      	movs	r2, #0
 800e608:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fb7e 	bl	800cd0c <remove_chain>
 800e610:	4603      	mov	r3, r0
 800e612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e616:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d126      	bne.n	800e66c <f_open+0x1d0>
							res = move_window(fs, dw);
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe f926 	bl	800c874 <move_window>
 800e628:	4603      	mov	r3, r0
 800e62a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e632:	3a01      	subs	r2, #1
 800e634:	611a      	str	r2, [r3, #16]
 800e636:	e019      	b.n	800e66c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d115      	bne.n	800e66c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e640:	7fbb      	ldrb	r3, [r7, #30]
 800e642:	f003 0310 	and.w	r3, r3, #16
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e64a:	2304      	movs	r3, #4
 800e64c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e650:	e00c      	b.n	800e66c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e652:	79fb      	ldrb	r3, [r7, #7]
 800e654:	f003 0302 	and.w	r3, r3, #2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d007      	beq.n	800e66c <f_open+0x1d0>
 800e65c:	7fbb      	ldrb	r3, [r7, #30]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <f_open+0x1d0>
						res = FR_DENIED;
 800e666:	2307      	movs	r3, #7
 800e668:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e66c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e670:	2b00      	cmp	r3, #0
 800e672:	d126      	bne.n	800e6c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	f003 0308 	and.w	r3, r3, #8
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e67e:	79fb      	ldrb	r3, [r7, #7]
 800e680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e684:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e68e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	2b01      	cmp	r3, #1
 800e698:	bf8c      	ite	hi
 800e69a:	2301      	movhi	r3, #1
 800e69c:	2300      	movls	r3, #0
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f107 0318 	add.w	r3, r7, #24
 800e6a6:	4611      	mov	r1, r2
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fd ffb1 	bl	800c610 <inc_lock>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d102      	bne.n	800e6c2 <f_open+0x226>
 800e6bc:	2302      	movs	r3, #2
 800e6be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e6c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f040 8095 	bne.w	800e7f6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fdd2 	bl	800d27c <ld_clust>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e0:	331c      	adds	r3, #28
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fd fe2e 	bl	800c344 <ld_dword>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e6f4:	697a      	ldr	r2, [r7, #20]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	88da      	ldrh	r2, [r3, #6]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	79fa      	ldrb	r2, [r7, #7]
 800e706:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3330      	adds	r3, #48	@ 0x30
 800e71e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e722:	2100      	movs	r1, #0
 800e724:	4618      	mov	r0, r3
 800e726:	f7fd fe98 	bl	800c45a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	f003 0320 	and.w	r3, r3, #32
 800e730:	2b00      	cmp	r3, #0
 800e732:	d060      	beq.n	800e7f6 <f_open+0x35a>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d05c      	beq.n	800e7f6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68da      	ldr	r2, [r3, #12]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	895b      	ldrh	r3, [r3, #10]
 800e748:	025b      	lsls	r3, r3, #9
 800e74a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e758:	e016      	b.n	800e788 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe f943 	bl	800c9ea <get_fat>
 800e764:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d802      	bhi.n	800e772 <f_open+0x2d6>
 800e76c:	2302      	movs	r3, #2
 800e76e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e778:	d102      	bne.n	800e780 <f_open+0x2e4>
 800e77a:	2301      	movs	r3, #1
 800e77c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e780:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e788:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d103      	bne.n	800e798 <f_open+0x2fc>
 800e790:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e794:	429a      	cmp	r2, r3
 800e796:	d8e0      	bhi.n	800e75a <f_open+0x2be>
				}
				fp->clust = clst;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e79c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e79e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d127      	bne.n	800e7f6 <f_open+0x35a>
 800e7a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d022      	beq.n	800e7f6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fe f8f9 	bl	800c9ac <clust2sect>
 800e7ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e7bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d103      	bne.n	800e7ca <f_open+0x32e>
						res = FR_INT_ERR;
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e7c8:	e015      	b.n	800e7f6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e7ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7cc:	0a5a      	lsrs	r2, r3, #9
 800e7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7d0:	441a      	add	r2, r3
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	7858      	ldrb	r0, [r3, #1]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6a1a      	ldr	r2, [r3, #32]
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f7fd fd37 	bl	800c258 <disk_read>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <f_open+0x35a>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e7f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d002      	beq.n	800e804 <f_open+0x368>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e804:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3768      	adds	r7, #104	@ 0x68
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08e      	sub	sp, #56	@ 0x38
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f107 0214 	add.w	r2, r7, #20
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7ff fdb7 	bl	800e3a4 <validate>
 800e836:	4603      	mov	r3, r0
 800e838:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e83c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e840:	2b00      	cmp	r3, #0
 800e842:	d107      	bne.n	800e854 <f_read+0x44>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	7d5b      	ldrb	r3, [r3, #21]
 800e848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e84c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <f_read+0x4a>
 800e854:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e858:	e115      	b.n	800ea86 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	7d1b      	ldrb	r3, [r3, #20]
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <f_read+0x5a>
 800e866:	2307      	movs	r3, #7
 800e868:	e10d      	b.n	800ea86 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	68da      	ldr	r2, [r3, #12]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	f240 80fe 	bls.w	800ea7c <f_read+0x26c>
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e884:	e0fa      	b.n	800ea7c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f040 80c6 	bne.w	800ea20 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	0a5b      	lsrs	r3, r3, #9
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	8952      	ldrh	r2, [r2, #10]
 800e89e:	3a01      	subs	r2, #1
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d12f      	bne.n	800e90a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d103      	bne.n	800e8ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8b8:	e013      	b.n	800e8e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d007      	beq.n	800e8d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7fe fb1c 	bl	800cf06 <clmt_clust>
 800e8ce:	6338      	str	r0, [r7, #48]	@ 0x30
 800e8d0:	e007      	b.n	800e8e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fe f885 	bl	800c9ea <get_fat>
 800e8e0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d804      	bhi.n	800e8f2 <f_read+0xe2>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	755a      	strb	r2, [r3, #21]
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e0c9      	b.n	800ea86 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f8:	d104      	bne.n	800e904 <f_read+0xf4>
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	755a      	strb	r2, [r3, #21]
 800e900:	2301      	movs	r3, #1
 800e902:	e0c0      	b.n	800ea86 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e908:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	f7fe f84a 	bl	800c9ac <clust2sect>
 800e918:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d104      	bne.n	800e92a <f_read+0x11a>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2202      	movs	r2, #2
 800e924:	755a      	strb	r2, [r3, #21]
 800e926:	2302      	movs	r3, #2
 800e928:	e0ad      	b.n	800ea86 <f_read+0x276>
			sect += csect;
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	4413      	add	r3, r2
 800e930:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	0a5b      	lsrs	r3, r3, #9
 800e936:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d039      	beq.n	800e9b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e93e:	69fa      	ldr	r2, [r7, #28]
 800e940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e942:	4413      	add	r3, r2
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	8952      	ldrh	r2, [r2, #10]
 800e948:	4293      	cmp	r3, r2
 800e94a:	d905      	bls.n	800e958 <f_read+0x148>
					cc = fs->csize - csect;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	895b      	ldrh	r3, [r3, #10]
 800e950:	461a      	mov	r2, r3
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	7858      	ldrb	r0, [r3, #1]
 800e95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e962:	f7fd fc79 	bl	800c258 <disk_read>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <f_read+0x166>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2201      	movs	r2, #1
 800e970:	755a      	strb	r2, [r3, #21]
 800e972:	2301      	movs	r3, #1
 800e974:	e087      	b.n	800ea86 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	7d1b      	ldrb	r3, [r3, #20]
 800e97a:	b25b      	sxtb	r3, r3
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	da14      	bge.n	800e9aa <f_read+0x19a>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6a1a      	ldr	r2, [r3, #32]
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d90d      	bls.n	800e9aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6a1a      	ldr	r2, [r3, #32]
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	025b      	lsls	r3, r3, #9
 800e998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e99a:	18d0      	adds	r0, r2, r3
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3330      	adds	r3, #48	@ 0x30
 800e9a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f7fd fd37 	bl	800c418 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	025b      	lsls	r3, r3, #9
 800e9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e9b0:	e050      	b.n	800ea54 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	69ba      	ldr	r2, [r7, #24]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d02e      	beq.n	800ea1a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	7d1b      	ldrb	r3, [r3, #20]
 800e9c0:	b25b      	sxtb	r3, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	da18      	bge.n	800e9f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	7858      	ldrb	r0, [r3, #1]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6a1a      	ldr	r2, [r3, #32]
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	f7fd fc5f 	bl	800c298 <disk_write>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d004      	beq.n	800e9ea <f_read+0x1da>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	755a      	strb	r2, [r3, #21]
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e04d      	b.n	800ea86 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	7d1b      	ldrb	r3, [r3, #20]
 800e9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	7858      	ldrb	r0, [r3, #1]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea02:	2301      	movs	r3, #1
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	f7fd fc27 	bl	800c258 <disk_read>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d004      	beq.n	800ea1a <f_read+0x20a>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2201      	movs	r2, #1
 800ea14:	755a      	strb	r2, [r3, #21]
 800ea16:	2301      	movs	r3, #1
 800ea18:	e035      	b.n	800ea86 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea28:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ea2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d901      	bls.n	800ea3a <f_read+0x22a>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea48:	4413      	add	r3, r2
 800ea4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea50:	f7fd fce2 	bl	800c418 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ea54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea58:	4413      	add	r3, r2
 800ea5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	699a      	ldr	r2, [r3, #24]
 800ea60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea62:	441a      	add	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	619a      	str	r2, [r3, #24]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6e:	441a      	add	r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f47f af01 	bne.w	800e886 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3738      	adds	r7, #56	@ 0x38
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b086      	sub	sp, #24
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f107 0208 	add.w	r2, r7, #8
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff fc80 	bl	800e3a4 <validate>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d168      	bne.n	800eb80 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7d1b      	ldrb	r3, [r3, #20]
 800eab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d062      	beq.n	800eb80 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	b25b      	sxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	da15      	bge.n	800eaf0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	7858      	ldrb	r0, [r3, #1]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a1a      	ldr	r2, [r3, #32]
 800ead2:	2301      	movs	r3, #1
 800ead4:	f7fd fbe0 	bl	800c298 <disk_write>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <f_sync+0x54>
 800eade:	2301      	movs	r3, #1
 800eae0:	e04f      	b.n	800eb82 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	7d1b      	ldrb	r3, [r3, #20]
 800eae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaea:	b2da      	uxtb	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eaf0:	f7fc fdac 	bl	800b64c <get_fattime>
 800eaf4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eafc:	4619      	mov	r1, r3
 800eafe:	4610      	mov	r0, r2
 800eb00:	f7fd feb8 	bl	800c874 <move_window>
 800eb04:	4603      	mov	r3, r0
 800eb06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d138      	bne.n	800eb80 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	330b      	adds	r3, #11
 800eb18:	781a      	ldrb	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	330b      	adds	r3, #11
 800eb1e:	f042 0220 	orr.w	r2, r2, #32
 800eb22:	b2d2      	uxtb	r2, r2
 800eb24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6818      	ldr	r0, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68f9      	ldr	r1, [r7, #12]
 800eb32:	f7fe fbc2 	bl	800d2ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f103 021c 	add.w	r2, r3, #28
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	4619      	mov	r1, r3
 800eb42:	4610      	mov	r0, r2
 800eb44:	f7fd fc3c 	bl	800c3c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3316      	adds	r3, #22
 800eb4c:	6939      	ldr	r1, [r7, #16]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fd fc36 	bl	800c3c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	3312      	adds	r3, #18
 800eb58:	2100      	movs	r1, #0
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fd fc15 	bl	800c38a <st_word>
					fs->wflag = 1;
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2201      	movs	r2, #1
 800eb64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd feb1 	bl	800c8d0 <sync_fs>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7d1b      	ldrb	r3, [r3, #20]
 800eb76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3718      	adds	r7, #24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff ff7b 	bl	800ea8e <f_sync>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d118      	bne.n	800ebd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f107 0208 	add.w	r2, r7, #8
 800eba8:	4611      	mov	r1, r2
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff fbfa 	bl	800e3a4 <validate>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ebb4:	7bfb      	ldrb	r3, [r7, #15]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d10c      	bne.n	800ebd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fd fdb4 	bl	800c72c <dec_lock>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ebc8:	7bfb      	ldrb	r3, [r7, #15]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d102      	bne.n	800ebd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	4613      	mov	r3, r2
 800ebec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ebf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ebf8:	7a5b      	ldrb	r3, [r3, #9]
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d131      	bne.n	800ec64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec00:	4b1c      	ldr	r3, [pc, #112]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec02:	7a5b      	ldrb	r3, [r3, #9]
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	461a      	mov	r2, r3
 800ec08:	4b1a      	ldr	r3, [pc, #104]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec0e:	4b19      	ldr	r3, [pc, #100]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec10:	7a5b      	ldrb	r3, [r3, #9]
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	4a17      	ldr	r2, [pc, #92]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec1e:	4b15      	ldr	r3, [pc, #84]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec20:	7a5b      	ldrb	r3, [r3, #9]
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	461a      	mov	r2, r3
 800ec26:	4b13      	ldr	r3, [pc, #76]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec28:	4413      	add	r3, r2
 800ec2a:	79fa      	ldrb	r2, [r7, #7]
 800ec2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec2e:	4b11      	ldr	r3, [pc, #68]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec30:	7a5b      	ldrb	r3, [r3, #9]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	1c5a      	adds	r2, r3, #1
 800ec36:	b2d1      	uxtb	r1, r2
 800ec38:	4a0e      	ldr	r2, [pc, #56]	@ (800ec74 <FATFS_LinkDriverEx+0x94>)
 800ec3a:	7251      	strb	r1, [r2, #9]
 800ec3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec3e:	7dbb      	ldrb	r3, [r7, #22]
 800ec40:	3330      	adds	r3, #48	@ 0x30
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	223a      	movs	r2, #58	@ 0x3a
 800ec4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	3302      	adds	r3, #2
 800ec54:	222f      	movs	r2, #47	@ 0x2f
 800ec56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	3303      	adds	r3, #3
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	240005a8 	.word	0x240005a8

0800ec78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec82:	2200      	movs	r2, #0
 800ec84:	6839      	ldr	r1, [r7, #0]
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f7ff ffaa 	bl	800ebe0 <FATFS_LinkDriverEx>
 800ec8c:	4603      	mov	r3, r0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	4603      	mov	r3, r0
 800eca0:	6039      	str	r1, [r7, #0]
 800eca2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eca4:	88fb      	ldrh	r3, [r7, #6]
 800eca6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eca8:	d802      	bhi.n	800ecb0 <ff_convert+0x18>
		c = chr;
 800ecaa:	88fb      	ldrh	r3, [r7, #6]
 800ecac:	81fb      	strh	r3, [r7, #14]
 800ecae:	e025      	b.n	800ecfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00b      	beq.n	800ecce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ecb6:	88fb      	ldrh	r3, [r7, #6]
 800ecb8:	2bff      	cmp	r3, #255	@ 0xff
 800ecba:	d805      	bhi.n	800ecc8 <ff_convert+0x30>
 800ecbc:	88fb      	ldrh	r3, [r7, #6]
 800ecbe:	3b80      	subs	r3, #128	@ 0x80
 800ecc0:	4a12      	ldr	r2, [pc, #72]	@ (800ed0c <ff_convert+0x74>)
 800ecc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecc6:	e000      	b.n	800ecca <ff_convert+0x32>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	81fb      	strh	r3, [r7, #14]
 800eccc:	e016      	b.n	800ecfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ecce:	2300      	movs	r3, #0
 800ecd0:	81fb      	strh	r3, [r7, #14]
 800ecd2:	e009      	b.n	800ece8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ecd4:	89fb      	ldrh	r3, [r7, #14]
 800ecd6:	4a0d      	ldr	r2, [pc, #52]	@ (800ed0c <ff_convert+0x74>)
 800ecd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecdc:	88fa      	ldrh	r2, [r7, #6]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d006      	beq.n	800ecf0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ece2:	89fb      	ldrh	r3, [r7, #14]
 800ece4:	3301      	adds	r3, #1
 800ece6:	81fb      	strh	r3, [r7, #14]
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecec:	d9f2      	bls.n	800ecd4 <ff_convert+0x3c>
 800ecee:	e000      	b.n	800ecf2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ecf0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	3380      	adds	r3, #128	@ 0x80
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ecfc:	89fb      	ldrh	r3, [r7, #14]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3714      	adds	r7, #20
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	0800fa60 	.word	0x0800fa60

0800ed10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b087      	sub	sp, #28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed1a:	88fb      	ldrh	r3, [r7, #6]
 800ed1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed20:	d201      	bcs.n	800ed26 <ff_wtoupper+0x16>
 800ed22:	4b3e      	ldr	r3, [pc, #248]	@ (800ee1c <ff_wtoupper+0x10c>)
 800ed24:	e000      	b.n	800ed28 <ff_wtoupper+0x18>
 800ed26:	4b3e      	ldr	r3, [pc, #248]	@ (800ee20 <ff_wtoupper+0x110>)
 800ed28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	1c9a      	adds	r2, r3, #2
 800ed2e:	617a      	str	r2, [r7, #20]
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ed34:	8a7b      	ldrh	r3, [r7, #18]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d068      	beq.n	800ee0c <ff_wtoupper+0xfc>
 800ed3a:	88fa      	ldrh	r2, [r7, #6]
 800ed3c:	8a7b      	ldrh	r3, [r7, #18]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d364      	bcc.n	800ee0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	1c9a      	adds	r2, r3, #2
 800ed46:	617a      	str	r2, [r7, #20]
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	823b      	strh	r3, [r7, #16]
 800ed4c:	8a3b      	ldrh	r3, [r7, #16]
 800ed4e:	0a1b      	lsrs	r3, r3, #8
 800ed50:	81fb      	strh	r3, [r7, #14]
 800ed52:	8a3b      	ldrh	r3, [r7, #16]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ed58:	88fa      	ldrh	r2, [r7, #6]
 800ed5a:	8a79      	ldrh	r1, [r7, #18]
 800ed5c:	8a3b      	ldrh	r3, [r7, #16]
 800ed5e:	440b      	add	r3, r1
 800ed60:	429a      	cmp	r2, r3
 800ed62:	da49      	bge.n	800edf8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ed64:	89fb      	ldrh	r3, [r7, #14]
 800ed66:	2b08      	cmp	r3, #8
 800ed68:	d84f      	bhi.n	800ee0a <ff_wtoupper+0xfa>
 800ed6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed70 <ff_wtoupper+0x60>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed95 	.word	0x0800ed95
 800ed74:	0800eda7 	.word	0x0800eda7
 800ed78:	0800edbd 	.word	0x0800edbd
 800ed7c:	0800edc5 	.word	0x0800edc5
 800ed80:	0800edcd 	.word	0x0800edcd
 800ed84:	0800edd5 	.word	0x0800edd5
 800ed88:	0800eddd 	.word	0x0800eddd
 800ed8c:	0800ede5 	.word	0x0800ede5
 800ed90:	0800eded 	.word	0x0800eded
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ed94:	88fa      	ldrh	r2, [r7, #6]
 800ed96:	8a7b      	ldrh	r3, [r7, #18]
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	4413      	add	r3, r2
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	80fb      	strh	r3, [r7, #6]
 800eda4:	e027      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eda6:	88fa      	ldrh	r2, [r7, #6]
 800eda8:	8a7b      	ldrh	r3, [r7, #18]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	b29b      	uxth	r3, r3
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	88fa      	ldrh	r2, [r7, #6]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	80fb      	strh	r3, [r7, #6]
 800edba:	e01c      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800edbc:	88fb      	ldrh	r3, [r7, #6]
 800edbe:	3b10      	subs	r3, #16
 800edc0:	80fb      	strh	r3, [r7, #6]
 800edc2:	e018      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800edc4:	88fb      	ldrh	r3, [r7, #6]
 800edc6:	3b20      	subs	r3, #32
 800edc8:	80fb      	strh	r3, [r7, #6]
 800edca:	e014      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800edcc:	88fb      	ldrh	r3, [r7, #6]
 800edce:	3b30      	subs	r3, #48	@ 0x30
 800edd0:	80fb      	strh	r3, [r7, #6]
 800edd2:	e010      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800edd4:	88fb      	ldrh	r3, [r7, #6]
 800edd6:	3b1a      	subs	r3, #26
 800edd8:	80fb      	strh	r3, [r7, #6]
 800edda:	e00c      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eddc:	88fb      	ldrh	r3, [r7, #6]
 800edde:	3308      	adds	r3, #8
 800ede0:	80fb      	strh	r3, [r7, #6]
 800ede2:	e008      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ede4:	88fb      	ldrh	r3, [r7, #6]
 800ede6:	3b50      	subs	r3, #80	@ 0x50
 800ede8:	80fb      	strh	r3, [r7, #6]
 800edea:	e004      	b.n	800edf6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800edec:	88fb      	ldrh	r3, [r7, #6]
 800edee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800edf2:	80fb      	strh	r3, [r7, #6]
 800edf4:	bf00      	nop
			}
			break;
 800edf6:	e008      	b.n	800ee0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800edf8:	89fb      	ldrh	r3, [r7, #14]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d195      	bne.n	800ed2a <ff_wtoupper+0x1a>
 800edfe:	8a3b      	ldrh	r3, [r7, #16]
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	4413      	add	r3, r2
 800ee06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee08:	e78f      	b.n	800ed2a <ff_wtoupper+0x1a>
			break;
 800ee0a:	bf00      	nop
	}

	return chr;
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	371c      	adds	r7, #28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	0800fb60 	.word	0x0800fb60
 800ee20:	0800fd54 	.word	0x0800fd54

0800ee24 <malloc>:
 800ee24:	4b02      	ldr	r3, [pc, #8]	@ (800ee30 <malloc+0xc>)
 800ee26:	4601      	mov	r1, r0
 800ee28:	6818      	ldr	r0, [r3, #0]
 800ee2a:	f000 b82d 	b.w	800ee88 <_malloc_r>
 800ee2e:	bf00      	nop
 800ee30:	2400002c 	.word	0x2400002c

0800ee34 <free>:
 800ee34:	4b02      	ldr	r3, [pc, #8]	@ (800ee40 <free+0xc>)
 800ee36:	4601      	mov	r1, r0
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	f000 b957 	b.w	800f0ec <_free_r>
 800ee3e:	bf00      	nop
 800ee40:	2400002c 	.word	0x2400002c

0800ee44 <sbrk_aligned>:
 800ee44:	b570      	push	{r4, r5, r6, lr}
 800ee46:	4e0f      	ldr	r6, [pc, #60]	@ (800ee84 <sbrk_aligned+0x40>)
 800ee48:	460c      	mov	r4, r1
 800ee4a:	6831      	ldr	r1, [r6, #0]
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	b911      	cbnz	r1, 800ee56 <sbrk_aligned+0x12>
 800ee50:	f000 f902 	bl	800f058 <_sbrk_r>
 800ee54:	6030      	str	r0, [r6, #0]
 800ee56:	4621      	mov	r1, r4
 800ee58:	4628      	mov	r0, r5
 800ee5a:	f000 f8fd 	bl	800f058 <_sbrk_r>
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	d103      	bne.n	800ee6a <sbrk_aligned+0x26>
 800ee62:	f04f 34ff 	mov.w	r4, #4294967295
 800ee66:	4620      	mov	r0, r4
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	1cc4      	adds	r4, r0, #3
 800ee6c:	f024 0403 	bic.w	r4, r4, #3
 800ee70:	42a0      	cmp	r0, r4
 800ee72:	d0f8      	beq.n	800ee66 <sbrk_aligned+0x22>
 800ee74:	1a21      	subs	r1, r4, r0
 800ee76:	4628      	mov	r0, r5
 800ee78:	f000 f8ee 	bl	800f058 <_sbrk_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	d1f2      	bne.n	800ee66 <sbrk_aligned+0x22>
 800ee80:	e7ef      	b.n	800ee62 <sbrk_aligned+0x1e>
 800ee82:	bf00      	nop
 800ee84:	240005b4 	.word	0x240005b4

0800ee88 <_malloc_r>:
 800ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee8c:	1ccd      	adds	r5, r1, #3
 800ee8e:	f025 0503 	bic.w	r5, r5, #3
 800ee92:	3508      	adds	r5, #8
 800ee94:	2d0c      	cmp	r5, #12
 800ee96:	bf38      	it	cc
 800ee98:	250c      	movcc	r5, #12
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	4606      	mov	r6, r0
 800ee9e:	db01      	blt.n	800eea4 <_malloc_r+0x1c>
 800eea0:	42a9      	cmp	r1, r5
 800eea2:	d904      	bls.n	800eeae <_malloc_r+0x26>
 800eea4:	230c      	movs	r3, #12
 800eea6:	6033      	str	r3, [r6, #0]
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef84 <_malloc_r+0xfc>
 800eeb2:	f000 f869 	bl	800ef88 <__malloc_lock>
 800eeb6:	f8d8 3000 	ldr.w	r3, [r8]
 800eeba:	461c      	mov	r4, r3
 800eebc:	bb44      	cbnz	r4, 800ef10 <_malloc_r+0x88>
 800eebe:	4629      	mov	r1, r5
 800eec0:	4630      	mov	r0, r6
 800eec2:	f7ff ffbf 	bl	800ee44 <sbrk_aligned>
 800eec6:	1c43      	adds	r3, r0, #1
 800eec8:	4604      	mov	r4, r0
 800eeca:	d158      	bne.n	800ef7e <_malloc_r+0xf6>
 800eecc:	f8d8 4000 	ldr.w	r4, [r8]
 800eed0:	4627      	mov	r7, r4
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	d143      	bne.n	800ef5e <_malloc_r+0xd6>
 800eed6:	2c00      	cmp	r4, #0
 800eed8:	d04b      	beq.n	800ef72 <_malloc_r+0xea>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4639      	mov	r1, r7
 800eede:	4630      	mov	r0, r6
 800eee0:	eb04 0903 	add.w	r9, r4, r3
 800eee4:	f000 f8b8 	bl	800f058 <_sbrk_r>
 800eee8:	4581      	cmp	r9, r0
 800eeea:	d142      	bne.n	800ef72 <_malloc_r+0xea>
 800eeec:	6821      	ldr	r1, [r4, #0]
 800eeee:	1a6d      	subs	r5, r5, r1
 800eef0:	4629      	mov	r1, r5
 800eef2:	4630      	mov	r0, r6
 800eef4:	f7ff ffa6 	bl	800ee44 <sbrk_aligned>
 800eef8:	3001      	adds	r0, #1
 800eefa:	d03a      	beq.n	800ef72 <_malloc_r+0xea>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	442b      	add	r3, r5
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	f8d8 3000 	ldr.w	r3, [r8]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	bb62      	cbnz	r2, 800ef64 <_malloc_r+0xdc>
 800ef0a:	f8c8 7000 	str.w	r7, [r8]
 800ef0e:	e00f      	b.n	800ef30 <_malloc_r+0xa8>
 800ef10:	6822      	ldr	r2, [r4, #0]
 800ef12:	1b52      	subs	r2, r2, r5
 800ef14:	d420      	bmi.n	800ef58 <_malloc_r+0xd0>
 800ef16:	2a0b      	cmp	r2, #11
 800ef18:	d917      	bls.n	800ef4a <_malloc_r+0xc2>
 800ef1a:	1961      	adds	r1, r4, r5
 800ef1c:	42a3      	cmp	r3, r4
 800ef1e:	6025      	str	r5, [r4, #0]
 800ef20:	bf18      	it	ne
 800ef22:	6059      	strne	r1, [r3, #4]
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	bf08      	it	eq
 800ef28:	f8c8 1000 	streq.w	r1, [r8]
 800ef2c:	5162      	str	r2, [r4, r5]
 800ef2e:	604b      	str	r3, [r1, #4]
 800ef30:	4630      	mov	r0, r6
 800ef32:	f000 f82f 	bl	800ef94 <__malloc_unlock>
 800ef36:	f104 000b 	add.w	r0, r4, #11
 800ef3a:	1d23      	adds	r3, r4, #4
 800ef3c:	f020 0007 	bic.w	r0, r0, #7
 800ef40:	1ac2      	subs	r2, r0, r3
 800ef42:	bf1c      	itt	ne
 800ef44:	1a1b      	subne	r3, r3, r0
 800ef46:	50a3      	strne	r3, [r4, r2]
 800ef48:	e7af      	b.n	800eeaa <_malloc_r+0x22>
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	42a3      	cmp	r3, r4
 800ef4e:	bf0c      	ite	eq
 800ef50:	f8c8 2000 	streq.w	r2, [r8]
 800ef54:	605a      	strne	r2, [r3, #4]
 800ef56:	e7eb      	b.n	800ef30 <_malloc_r+0xa8>
 800ef58:	4623      	mov	r3, r4
 800ef5a:	6864      	ldr	r4, [r4, #4]
 800ef5c:	e7ae      	b.n	800eebc <_malloc_r+0x34>
 800ef5e:	463c      	mov	r4, r7
 800ef60:	687f      	ldr	r7, [r7, #4]
 800ef62:	e7b6      	b.n	800eed2 <_malloc_r+0x4a>
 800ef64:	461a      	mov	r2, r3
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	42a3      	cmp	r3, r4
 800ef6a:	d1fb      	bne.n	800ef64 <_malloc_r+0xdc>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	6053      	str	r3, [r2, #4]
 800ef70:	e7de      	b.n	800ef30 <_malloc_r+0xa8>
 800ef72:	230c      	movs	r3, #12
 800ef74:	6033      	str	r3, [r6, #0]
 800ef76:	4630      	mov	r0, r6
 800ef78:	f000 f80c 	bl	800ef94 <__malloc_unlock>
 800ef7c:	e794      	b.n	800eea8 <_malloc_r+0x20>
 800ef7e:	6005      	str	r5, [r0, #0]
 800ef80:	e7d6      	b.n	800ef30 <_malloc_r+0xa8>
 800ef82:	bf00      	nop
 800ef84:	240005b8 	.word	0x240005b8

0800ef88 <__malloc_lock>:
 800ef88:	4801      	ldr	r0, [pc, #4]	@ (800ef90 <__malloc_lock+0x8>)
 800ef8a:	f000 b89f 	b.w	800f0cc <__retarget_lock_acquire_recursive>
 800ef8e:	bf00      	nop
 800ef90:	240006f8 	.word	0x240006f8

0800ef94 <__malloc_unlock>:
 800ef94:	4801      	ldr	r0, [pc, #4]	@ (800ef9c <__malloc_unlock+0x8>)
 800ef96:	f000 b89a 	b.w	800f0ce <__retarget_lock_release_recursive>
 800ef9a:	bf00      	nop
 800ef9c:	240006f8 	.word	0x240006f8

0800efa0 <sniprintf>:
 800efa0:	b40c      	push	{r2, r3}
 800efa2:	b530      	push	{r4, r5, lr}
 800efa4:	4b17      	ldr	r3, [pc, #92]	@ (800f004 <sniprintf+0x64>)
 800efa6:	1e0c      	subs	r4, r1, #0
 800efa8:	681d      	ldr	r5, [r3, #0]
 800efaa:	b09d      	sub	sp, #116	@ 0x74
 800efac:	da08      	bge.n	800efc0 <sniprintf+0x20>
 800efae:	238b      	movs	r3, #139	@ 0x8b
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	f04f 30ff 	mov.w	r0, #4294967295
 800efb6:	b01d      	add	sp, #116	@ 0x74
 800efb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efbc:	b002      	add	sp, #8
 800efbe:	4770      	bx	lr
 800efc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800efc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800efc8:	bf14      	ite	ne
 800efca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800efce:	4623      	moveq	r3, r4
 800efd0:	9304      	str	r3, [sp, #16]
 800efd2:	9307      	str	r3, [sp, #28]
 800efd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efd8:	9002      	str	r0, [sp, #8]
 800efda:	9006      	str	r0, [sp, #24]
 800efdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efe0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800efe2:	ab21      	add	r3, sp, #132	@ 0x84
 800efe4:	a902      	add	r1, sp, #8
 800efe6:	4628      	mov	r0, r5
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	f000 f925 	bl	800f238 <_svfiprintf_r>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	bfbc      	itt	lt
 800eff2:	238b      	movlt	r3, #139	@ 0x8b
 800eff4:	602b      	strlt	r3, [r5, #0]
 800eff6:	2c00      	cmp	r4, #0
 800eff8:	d0dd      	beq.n	800efb6 <sniprintf+0x16>
 800effa:	9b02      	ldr	r3, [sp, #8]
 800effc:	2200      	movs	r2, #0
 800effe:	701a      	strb	r2, [r3, #0]
 800f000:	e7d9      	b.n	800efb6 <sniprintf+0x16>
 800f002:	bf00      	nop
 800f004:	2400002c 	.word	0x2400002c

0800f008 <siprintf>:
 800f008:	b40e      	push	{r1, r2, r3}
 800f00a:	b500      	push	{lr}
 800f00c:	b09c      	sub	sp, #112	@ 0x70
 800f00e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f010:	9002      	str	r0, [sp, #8]
 800f012:	9006      	str	r0, [sp, #24]
 800f014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f018:	4809      	ldr	r0, [pc, #36]	@ (800f040 <siprintf+0x38>)
 800f01a:	9107      	str	r1, [sp, #28]
 800f01c:	9104      	str	r1, [sp, #16]
 800f01e:	4909      	ldr	r1, [pc, #36]	@ (800f044 <siprintf+0x3c>)
 800f020:	f853 2b04 	ldr.w	r2, [r3], #4
 800f024:	9105      	str	r1, [sp, #20]
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	a902      	add	r1, sp, #8
 800f02c:	f000 f904 	bl	800f238 <_svfiprintf_r>
 800f030:	9b02      	ldr	r3, [sp, #8]
 800f032:	2200      	movs	r2, #0
 800f034:	701a      	strb	r2, [r3, #0]
 800f036:	b01c      	add	sp, #112	@ 0x70
 800f038:	f85d eb04 	ldr.w	lr, [sp], #4
 800f03c:	b003      	add	sp, #12
 800f03e:	4770      	bx	lr
 800f040:	2400002c 	.word	0x2400002c
 800f044:	ffff0208 	.word	0xffff0208

0800f048 <memset>:
 800f048:	4402      	add	r2, r0
 800f04a:	4603      	mov	r3, r0
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d100      	bne.n	800f052 <memset+0xa>
 800f050:	4770      	bx	lr
 800f052:	f803 1b01 	strb.w	r1, [r3], #1
 800f056:	e7f9      	b.n	800f04c <memset+0x4>

0800f058 <_sbrk_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4d06      	ldr	r5, [pc, #24]	@ (800f074 <_sbrk_r+0x1c>)
 800f05c:	2300      	movs	r3, #0
 800f05e:	4604      	mov	r4, r0
 800f060:	4608      	mov	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f4 f9f6 	bl	8003454 <_sbrk>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_sbrk_r+0x1a>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_sbrk_r+0x1a>
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	240006f4 	.word	0x240006f4

0800f078 <__errno>:
 800f078:	4b01      	ldr	r3, [pc, #4]	@ (800f080 <__errno+0x8>)
 800f07a:	6818      	ldr	r0, [r3, #0]
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	2400002c 	.word	0x2400002c

0800f084 <__libc_init_array>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	4d0d      	ldr	r5, [pc, #52]	@ (800f0bc <__libc_init_array+0x38>)
 800f088:	4c0d      	ldr	r4, [pc, #52]	@ (800f0c0 <__libc_init_array+0x3c>)
 800f08a:	1b64      	subs	r4, r4, r5
 800f08c:	10a4      	asrs	r4, r4, #2
 800f08e:	2600      	movs	r6, #0
 800f090:	42a6      	cmp	r6, r4
 800f092:	d109      	bne.n	800f0a8 <__libc_init_array+0x24>
 800f094:	4d0b      	ldr	r5, [pc, #44]	@ (800f0c4 <__libc_init_array+0x40>)
 800f096:	4c0c      	ldr	r4, [pc, #48]	@ (800f0c8 <__libc_init_array+0x44>)
 800f098:	f000 fbce 	bl	800f838 <_init>
 800f09c:	1b64      	subs	r4, r4, r5
 800f09e:	10a4      	asrs	r4, r4, #2
 800f0a0:	2600      	movs	r6, #0
 800f0a2:	42a6      	cmp	r6, r4
 800f0a4:	d105      	bne.n	800f0b2 <__libc_init_array+0x2e>
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ac:	4798      	blx	r3
 800f0ae:	3601      	adds	r6, #1
 800f0b0:	e7ee      	b.n	800f090 <__libc_init_array+0xc>
 800f0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0b6:	4798      	blx	r3
 800f0b8:	3601      	adds	r6, #1
 800f0ba:	e7f2      	b.n	800f0a2 <__libc_init_array+0x1e>
 800f0bc:	0800fe4c 	.word	0x0800fe4c
 800f0c0:	0800fe4c 	.word	0x0800fe4c
 800f0c4:	0800fe4c 	.word	0x0800fe4c
 800f0c8:	0800fe50 	.word	0x0800fe50

0800f0cc <__retarget_lock_acquire_recursive>:
 800f0cc:	4770      	bx	lr

0800f0ce <__retarget_lock_release_recursive>:
 800f0ce:	4770      	bx	lr

0800f0d0 <memcpy>:
 800f0d0:	440a      	add	r2, r1
 800f0d2:	4291      	cmp	r1, r2
 800f0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0d8:	d100      	bne.n	800f0dc <memcpy+0xc>
 800f0da:	4770      	bx	lr
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0e6:	4291      	cmp	r1, r2
 800f0e8:	d1f9      	bne.n	800f0de <memcpy+0xe>
 800f0ea:	bd10      	pop	{r4, pc}

0800f0ec <_free_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	2900      	cmp	r1, #0
 800f0f2:	d041      	beq.n	800f178 <_free_r+0x8c>
 800f0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0f8:	1f0c      	subs	r4, r1, #4
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	bfb8      	it	lt
 800f0fe:	18e4      	addlt	r4, r4, r3
 800f100:	f7ff ff42 	bl	800ef88 <__malloc_lock>
 800f104:	4a1d      	ldr	r2, [pc, #116]	@ (800f17c <_free_r+0x90>)
 800f106:	6813      	ldr	r3, [r2, #0]
 800f108:	b933      	cbnz	r3, 800f118 <_free_r+0x2c>
 800f10a:	6063      	str	r3, [r4, #4]
 800f10c:	6014      	str	r4, [r2, #0]
 800f10e:	4628      	mov	r0, r5
 800f110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f114:	f7ff bf3e 	b.w	800ef94 <__malloc_unlock>
 800f118:	42a3      	cmp	r3, r4
 800f11a:	d908      	bls.n	800f12e <_free_r+0x42>
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	1821      	adds	r1, r4, r0
 800f120:	428b      	cmp	r3, r1
 800f122:	bf01      	itttt	eq
 800f124:	6819      	ldreq	r1, [r3, #0]
 800f126:	685b      	ldreq	r3, [r3, #4]
 800f128:	1809      	addeq	r1, r1, r0
 800f12a:	6021      	streq	r1, [r4, #0]
 800f12c:	e7ed      	b.n	800f10a <_free_r+0x1e>
 800f12e:	461a      	mov	r2, r3
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	b10b      	cbz	r3, 800f138 <_free_r+0x4c>
 800f134:	42a3      	cmp	r3, r4
 800f136:	d9fa      	bls.n	800f12e <_free_r+0x42>
 800f138:	6811      	ldr	r1, [r2, #0]
 800f13a:	1850      	adds	r0, r2, r1
 800f13c:	42a0      	cmp	r0, r4
 800f13e:	d10b      	bne.n	800f158 <_free_r+0x6c>
 800f140:	6820      	ldr	r0, [r4, #0]
 800f142:	4401      	add	r1, r0
 800f144:	1850      	adds	r0, r2, r1
 800f146:	4283      	cmp	r3, r0
 800f148:	6011      	str	r1, [r2, #0]
 800f14a:	d1e0      	bne.n	800f10e <_free_r+0x22>
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	6053      	str	r3, [r2, #4]
 800f152:	4408      	add	r0, r1
 800f154:	6010      	str	r0, [r2, #0]
 800f156:	e7da      	b.n	800f10e <_free_r+0x22>
 800f158:	d902      	bls.n	800f160 <_free_r+0x74>
 800f15a:	230c      	movs	r3, #12
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	e7d6      	b.n	800f10e <_free_r+0x22>
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	1821      	adds	r1, r4, r0
 800f164:	428b      	cmp	r3, r1
 800f166:	bf04      	itt	eq
 800f168:	6819      	ldreq	r1, [r3, #0]
 800f16a:	685b      	ldreq	r3, [r3, #4]
 800f16c:	6063      	str	r3, [r4, #4]
 800f16e:	bf04      	itt	eq
 800f170:	1809      	addeq	r1, r1, r0
 800f172:	6021      	streq	r1, [r4, #0]
 800f174:	6054      	str	r4, [r2, #4]
 800f176:	e7ca      	b.n	800f10e <_free_r+0x22>
 800f178:	bd38      	pop	{r3, r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	240005b8 	.word	0x240005b8

0800f180 <__ssputs_r>:
 800f180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	688e      	ldr	r6, [r1, #8]
 800f186:	461f      	mov	r7, r3
 800f188:	42be      	cmp	r6, r7
 800f18a:	680b      	ldr	r3, [r1, #0]
 800f18c:	4682      	mov	sl, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	4690      	mov	r8, r2
 800f192:	d82d      	bhi.n	800f1f0 <__ssputs_r+0x70>
 800f194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f19c:	d026      	beq.n	800f1ec <__ssputs_r+0x6c>
 800f19e:	6965      	ldr	r5, [r4, #20]
 800f1a0:	6909      	ldr	r1, [r1, #16]
 800f1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1a6:	eba3 0901 	sub.w	r9, r3, r1
 800f1aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1ae:	1c7b      	adds	r3, r7, #1
 800f1b0:	444b      	add	r3, r9
 800f1b2:	106d      	asrs	r5, r5, #1
 800f1b4:	429d      	cmp	r5, r3
 800f1b6:	bf38      	it	cc
 800f1b8:	461d      	movcc	r5, r3
 800f1ba:	0553      	lsls	r3, r2, #21
 800f1bc:	d527      	bpl.n	800f20e <__ssputs_r+0x8e>
 800f1be:	4629      	mov	r1, r5
 800f1c0:	f7ff fe62 	bl	800ee88 <_malloc_r>
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	b360      	cbz	r0, 800f222 <__ssputs_r+0xa2>
 800f1c8:	6921      	ldr	r1, [r4, #16]
 800f1ca:	464a      	mov	r2, r9
 800f1cc:	f7ff ff80 	bl	800f0d0 <memcpy>
 800f1d0:	89a3      	ldrh	r3, [r4, #12]
 800f1d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1da:	81a3      	strh	r3, [r4, #12]
 800f1dc:	6126      	str	r6, [r4, #16]
 800f1de:	6165      	str	r5, [r4, #20]
 800f1e0:	444e      	add	r6, r9
 800f1e2:	eba5 0509 	sub.w	r5, r5, r9
 800f1e6:	6026      	str	r6, [r4, #0]
 800f1e8:	60a5      	str	r5, [r4, #8]
 800f1ea:	463e      	mov	r6, r7
 800f1ec:	42be      	cmp	r6, r7
 800f1ee:	d900      	bls.n	800f1f2 <__ssputs_r+0x72>
 800f1f0:	463e      	mov	r6, r7
 800f1f2:	6820      	ldr	r0, [r4, #0]
 800f1f4:	4632      	mov	r2, r6
 800f1f6:	4641      	mov	r1, r8
 800f1f8:	f000 faa8 	bl	800f74c <memmove>
 800f1fc:	68a3      	ldr	r3, [r4, #8]
 800f1fe:	1b9b      	subs	r3, r3, r6
 800f200:	60a3      	str	r3, [r4, #8]
 800f202:	6823      	ldr	r3, [r4, #0]
 800f204:	4433      	add	r3, r6
 800f206:	6023      	str	r3, [r4, #0]
 800f208:	2000      	movs	r0, #0
 800f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20e:	462a      	mov	r2, r5
 800f210:	f000 fab6 	bl	800f780 <_realloc_r>
 800f214:	4606      	mov	r6, r0
 800f216:	2800      	cmp	r0, #0
 800f218:	d1e0      	bne.n	800f1dc <__ssputs_r+0x5c>
 800f21a:	6921      	ldr	r1, [r4, #16]
 800f21c:	4650      	mov	r0, sl
 800f21e:	f7ff ff65 	bl	800f0ec <_free_r>
 800f222:	230c      	movs	r3, #12
 800f224:	f8ca 3000 	str.w	r3, [sl]
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f22e:	81a3      	strh	r3, [r4, #12]
 800f230:	f04f 30ff 	mov.w	r0, #4294967295
 800f234:	e7e9      	b.n	800f20a <__ssputs_r+0x8a>
	...

0800f238 <_svfiprintf_r>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	4698      	mov	r8, r3
 800f23e:	898b      	ldrh	r3, [r1, #12]
 800f240:	061b      	lsls	r3, r3, #24
 800f242:	b09d      	sub	sp, #116	@ 0x74
 800f244:	4607      	mov	r7, r0
 800f246:	460d      	mov	r5, r1
 800f248:	4614      	mov	r4, r2
 800f24a:	d510      	bpl.n	800f26e <_svfiprintf_r+0x36>
 800f24c:	690b      	ldr	r3, [r1, #16]
 800f24e:	b973      	cbnz	r3, 800f26e <_svfiprintf_r+0x36>
 800f250:	2140      	movs	r1, #64	@ 0x40
 800f252:	f7ff fe19 	bl	800ee88 <_malloc_r>
 800f256:	6028      	str	r0, [r5, #0]
 800f258:	6128      	str	r0, [r5, #16]
 800f25a:	b930      	cbnz	r0, 800f26a <_svfiprintf_r+0x32>
 800f25c:	230c      	movs	r3, #12
 800f25e:	603b      	str	r3, [r7, #0]
 800f260:	f04f 30ff 	mov.w	r0, #4294967295
 800f264:	b01d      	add	sp, #116	@ 0x74
 800f266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26a:	2340      	movs	r3, #64	@ 0x40
 800f26c:	616b      	str	r3, [r5, #20]
 800f26e:	2300      	movs	r3, #0
 800f270:	9309      	str	r3, [sp, #36]	@ 0x24
 800f272:	2320      	movs	r3, #32
 800f274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f278:	f8cd 800c 	str.w	r8, [sp, #12]
 800f27c:	2330      	movs	r3, #48	@ 0x30
 800f27e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f41c <_svfiprintf_r+0x1e4>
 800f282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f286:	f04f 0901 	mov.w	r9, #1
 800f28a:	4623      	mov	r3, r4
 800f28c:	469a      	mov	sl, r3
 800f28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f292:	b10a      	cbz	r2, 800f298 <_svfiprintf_r+0x60>
 800f294:	2a25      	cmp	r2, #37	@ 0x25
 800f296:	d1f9      	bne.n	800f28c <_svfiprintf_r+0x54>
 800f298:	ebba 0b04 	subs.w	fp, sl, r4
 800f29c:	d00b      	beq.n	800f2b6 <_svfiprintf_r+0x7e>
 800f29e:	465b      	mov	r3, fp
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f7ff ff6b 	bl	800f180 <__ssputs_r>
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	f000 80a7 	beq.w	800f3fe <_svfiprintf_r+0x1c6>
 800f2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2b2:	445a      	add	r2, fp
 800f2b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f000 809f 	beq.w	800f3fe <_svfiprintf_r+0x1c6>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2ca:	f10a 0a01 	add.w	sl, sl, #1
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	9307      	str	r3, [sp, #28]
 800f2d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2d8:	4654      	mov	r4, sl
 800f2da:	2205      	movs	r2, #5
 800f2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e0:	484e      	ldr	r0, [pc, #312]	@ (800f41c <_svfiprintf_r+0x1e4>)
 800f2e2:	f7f1 f805 	bl	80002f0 <memchr>
 800f2e6:	9a04      	ldr	r2, [sp, #16]
 800f2e8:	b9d8      	cbnz	r0, 800f322 <_svfiprintf_r+0xea>
 800f2ea:	06d0      	lsls	r0, r2, #27
 800f2ec:	bf44      	itt	mi
 800f2ee:	2320      	movmi	r3, #32
 800f2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2f4:	0711      	lsls	r1, r2, #28
 800f2f6:	bf44      	itt	mi
 800f2f8:	232b      	movmi	r3, #43	@ 0x2b
 800f2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f302:	2b2a      	cmp	r3, #42	@ 0x2a
 800f304:	d015      	beq.n	800f332 <_svfiprintf_r+0xfa>
 800f306:	9a07      	ldr	r2, [sp, #28]
 800f308:	4654      	mov	r4, sl
 800f30a:	2000      	movs	r0, #0
 800f30c:	f04f 0c0a 	mov.w	ip, #10
 800f310:	4621      	mov	r1, r4
 800f312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f316:	3b30      	subs	r3, #48	@ 0x30
 800f318:	2b09      	cmp	r3, #9
 800f31a:	d94b      	bls.n	800f3b4 <_svfiprintf_r+0x17c>
 800f31c:	b1b0      	cbz	r0, 800f34c <_svfiprintf_r+0x114>
 800f31e:	9207      	str	r2, [sp, #28]
 800f320:	e014      	b.n	800f34c <_svfiprintf_r+0x114>
 800f322:	eba0 0308 	sub.w	r3, r0, r8
 800f326:	fa09 f303 	lsl.w	r3, r9, r3
 800f32a:	4313      	orrs	r3, r2
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	46a2      	mov	sl, r4
 800f330:	e7d2      	b.n	800f2d8 <_svfiprintf_r+0xa0>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	1d19      	adds	r1, r3, #4
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	9103      	str	r1, [sp, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	bfbb      	ittet	lt
 800f33e:	425b      	neglt	r3, r3
 800f340:	f042 0202 	orrlt.w	r2, r2, #2
 800f344:	9307      	strge	r3, [sp, #28]
 800f346:	9307      	strlt	r3, [sp, #28]
 800f348:	bfb8      	it	lt
 800f34a:	9204      	strlt	r2, [sp, #16]
 800f34c:	7823      	ldrb	r3, [r4, #0]
 800f34e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f350:	d10a      	bne.n	800f368 <_svfiprintf_r+0x130>
 800f352:	7863      	ldrb	r3, [r4, #1]
 800f354:	2b2a      	cmp	r3, #42	@ 0x2a
 800f356:	d132      	bne.n	800f3be <_svfiprintf_r+0x186>
 800f358:	9b03      	ldr	r3, [sp, #12]
 800f35a:	1d1a      	adds	r2, r3, #4
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	9203      	str	r2, [sp, #12]
 800f360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f364:	3402      	adds	r4, #2
 800f366:	9305      	str	r3, [sp, #20]
 800f368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f42c <_svfiprintf_r+0x1f4>
 800f36c:	7821      	ldrb	r1, [r4, #0]
 800f36e:	2203      	movs	r2, #3
 800f370:	4650      	mov	r0, sl
 800f372:	f7f0 ffbd 	bl	80002f0 <memchr>
 800f376:	b138      	cbz	r0, 800f388 <_svfiprintf_r+0x150>
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	eba0 000a 	sub.w	r0, r0, sl
 800f37e:	2240      	movs	r2, #64	@ 0x40
 800f380:	4082      	lsls	r2, r0
 800f382:	4313      	orrs	r3, r2
 800f384:	3401      	adds	r4, #1
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f38c:	4824      	ldr	r0, [pc, #144]	@ (800f420 <_svfiprintf_r+0x1e8>)
 800f38e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f392:	2206      	movs	r2, #6
 800f394:	f7f0 ffac 	bl	80002f0 <memchr>
 800f398:	2800      	cmp	r0, #0
 800f39a:	d036      	beq.n	800f40a <_svfiprintf_r+0x1d2>
 800f39c:	4b21      	ldr	r3, [pc, #132]	@ (800f424 <_svfiprintf_r+0x1ec>)
 800f39e:	bb1b      	cbnz	r3, 800f3e8 <_svfiprintf_r+0x1b0>
 800f3a0:	9b03      	ldr	r3, [sp, #12]
 800f3a2:	3307      	adds	r3, #7
 800f3a4:	f023 0307 	bic.w	r3, r3, #7
 800f3a8:	3308      	adds	r3, #8
 800f3aa:	9303      	str	r3, [sp, #12]
 800f3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ae:	4433      	add	r3, r6
 800f3b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3b2:	e76a      	b.n	800f28a <_svfiprintf_r+0x52>
 800f3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	2001      	movs	r0, #1
 800f3bc:	e7a8      	b.n	800f310 <_svfiprintf_r+0xd8>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	3401      	adds	r4, #1
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f04f 0c0a 	mov.w	ip, #10
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3d0:	3a30      	subs	r2, #48	@ 0x30
 800f3d2:	2a09      	cmp	r2, #9
 800f3d4:	d903      	bls.n	800f3de <_svfiprintf_r+0x1a6>
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d0c6      	beq.n	800f368 <_svfiprintf_r+0x130>
 800f3da:	9105      	str	r1, [sp, #20]
 800f3dc:	e7c4      	b.n	800f368 <_svfiprintf_r+0x130>
 800f3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e7f0      	b.n	800f3ca <_svfiprintf_r+0x192>
 800f3e8:	ab03      	add	r3, sp, #12
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	462a      	mov	r2, r5
 800f3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f428 <_svfiprintf_r+0x1f0>)
 800f3f0:	a904      	add	r1, sp, #16
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	f3af 8000 	nop.w
 800f3f8:	1c42      	adds	r2, r0, #1
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	d1d6      	bne.n	800f3ac <_svfiprintf_r+0x174>
 800f3fe:	89ab      	ldrh	r3, [r5, #12]
 800f400:	065b      	lsls	r3, r3, #25
 800f402:	f53f af2d 	bmi.w	800f260 <_svfiprintf_r+0x28>
 800f406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f408:	e72c      	b.n	800f264 <_svfiprintf_r+0x2c>
 800f40a:	ab03      	add	r3, sp, #12
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	462a      	mov	r2, r5
 800f410:	4b05      	ldr	r3, [pc, #20]	@ (800f428 <_svfiprintf_r+0x1f0>)
 800f412:	a904      	add	r1, sp, #16
 800f414:	4638      	mov	r0, r7
 800f416:	f000 f879 	bl	800f50c <_printf_i>
 800f41a:	e7ed      	b.n	800f3f8 <_svfiprintf_r+0x1c0>
 800f41c:	0800fe10 	.word	0x0800fe10
 800f420:	0800fe1a 	.word	0x0800fe1a
 800f424:	00000000 	.word	0x00000000
 800f428:	0800f181 	.word	0x0800f181
 800f42c:	0800fe16 	.word	0x0800fe16

0800f430 <_printf_common>:
 800f430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f434:	4616      	mov	r6, r2
 800f436:	4698      	mov	r8, r3
 800f438:	688a      	ldr	r2, [r1, #8]
 800f43a:	690b      	ldr	r3, [r1, #16]
 800f43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f440:	4293      	cmp	r3, r2
 800f442:	bfb8      	it	lt
 800f444:	4613      	movlt	r3, r2
 800f446:	6033      	str	r3, [r6, #0]
 800f448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f44c:	4607      	mov	r7, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	b10a      	cbz	r2, 800f456 <_printf_common+0x26>
 800f452:	3301      	adds	r3, #1
 800f454:	6033      	str	r3, [r6, #0]
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	0699      	lsls	r1, r3, #26
 800f45a:	bf42      	ittt	mi
 800f45c:	6833      	ldrmi	r3, [r6, #0]
 800f45e:	3302      	addmi	r3, #2
 800f460:	6033      	strmi	r3, [r6, #0]
 800f462:	6825      	ldr	r5, [r4, #0]
 800f464:	f015 0506 	ands.w	r5, r5, #6
 800f468:	d106      	bne.n	800f478 <_printf_common+0x48>
 800f46a:	f104 0a19 	add.w	sl, r4, #25
 800f46e:	68e3      	ldr	r3, [r4, #12]
 800f470:	6832      	ldr	r2, [r6, #0]
 800f472:	1a9b      	subs	r3, r3, r2
 800f474:	42ab      	cmp	r3, r5
 800f476:	dc26      	bgt.n	800f4c6 <_printf_common+0x96>
 800f478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f47c:	6822      	ldr	r2, [r4, #0]
 800f47e:	3b00      	subs	r3, #0
 800f480:	bf18      	it	ne
 800f482:	2301      	movne	r3, #1
 800f484:	0692      	lsls	r2, r2, #26
 800f486:	d42b      	bmi.n	800f4e0 <_printf_common+0xb0>
 800f488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f48c:	4641      	mov	r1, r8
 800f48e:	4638      	mov	r0, r7
 800f490:	47c8      	blx	r9
 800f492:	3001      	adds	r0, #1
 800f494:	d01e      	beq.n	800f4d4 <_printf_common+0xa4>
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	6922      	ldr	r2, [r4, #16]
 800f49a:	f003 0306 	and.w	r3, r3, #6
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	bf02      	ittt	eq
 800f4a2:	68e5      	ldreq	r5, [r4, #12]
 800f4a4:	6833      	ldreq	r3, [r6, #0]
 800f4a6:	1aed      	subeq	r5, r5, r3
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	bf0c      	ite	eq
 800f4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4b0:	2500      	movne	r5, #0
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	bfc4      	itt	gt
 800f4b6:	1a9b      	subgt	r3, r3, r2
 800f4b8:	18ed      	addgt	r5, r5, r3
 800f4ba:	2600      	movs	r6, #0
 800f4bc:	341a      	adds	r4, #26
 800f4be:	42b5      	cmp	r5, r6
 800f4c0:	d11a      	bne.n	800f4f8 <_printf_common+0xc8>
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	e008      	b.n	800f4d8 <_printf_common+0xa8>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	4652      	mov	r2, sl
 800f4ca:	4641      	mov	r1, r8
 800f4cc:	4638      	mov	r0, r7
 800f4ce:	47c8      	blx	r9
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d103      	bne.n	800f4dc <_printf_common+0xac>
 800f4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4dc:	3501      	adds	r5, #1
 800f4de:	e7c6      	b.n	800f46e <_printf_common+0x3e>
 800f4e0:	18e1      	adds	r1, r4, r3
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	2030      	movs	r0, #48	@ 0x30
 800f4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4ea:	4422      	add	r2, r4
 800f4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4f4:	3302      	adds	r3, #2
 800f4f6:	e7c7      	b.n	800f488 <_printf_common+0x58>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	4622      	mov	r2, r4
 800f4fc:	4641      	mov	r1, r8
 800f4fe:	4638      	mov	r0, r7
 800f500:	47c8      	blx	r9
 800f502:	3001      	adds	r0, #1
 800f504:	d0e6      	beq.n	800f4d4 <_printf_common+0xa4>
 800f506:	3601      	adds	r6, #1
 800f508:	e7d9      	b.n	800f4be <_printf_common+0x8e>
	...

0800f50c <_printf_i>:
 800f50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f510:	7e0f      	ldrb	r7, [r1, #24]
 800f512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f514:	2f78      	cmp	r7, #120	@ 0x78
 800f516:	4691      	mov	r9, r2
 800f518:	4680      	mov	r8, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	469a      	mov	sl, r3
 800f51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f522:	d807      	bhi.n	800f534 <_printf_i+0x28>
 800f524:	2f62      	cmp	r7, #98	@ 0x62
 800f526:	d80a      	bhi.n	800f53e <_printf_i+0x32>
 800f528:	2f00      	cmp	r7, #0
 800f52a:	f000 80d2 	beq.w	800f6d2 <_printf_i+0x1c6>
 800f52e:	2f58      	cmp	r7, #88	@ 0x58
 800f530:	f000 80b9 	beq.w	800f6a6 <_printf_i+0x19a>
 800f534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f53c:	e03a      	b.n	800f5b4 <_printf_i+0xa8>
 800f53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f542:	2b15      	cmp	r3, #21
 800f544:	d8f6      	bhi.n	800f534 <_printf_i+0x28>
 800f546:	a101      	add	r1, pc, #4	@ (adr r1, 800f54c <_printf_i+0x40>)
 800f548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f54c:	0800f5a5 	.word	0x0800f5a5
 800f550:	0800f5b9 	.word	0x0800f5b9
 800f554:	0800f535 	.word	0x0800f535
 800f558:	0800f535 	.word	0x0800f535
 800f55c:	0800f535 	.word	0x0800f535
 800f560:	0800f535 	.word	0x0800f535
 800f564:	0800f5b9 	.word	0x0800f5b9
 800f568:	0800f535 	.word	0x0800f535
 800f56c:	0800f535 	.word	0x0800f535
 800f570:	0800f535 	.word	0x0800f535
 800f574:	0800f535 	.word	0x0800f535
 800f578:	0800f6b9 	.word	0x0800f6b9
 800f57c:	0800f5e3 	.word	0x0800f5e3
 800f580:	0800f673 	.word	0x0800f673
 800f584:	0800f535 	.word	0x0800f535
 800f588:	0800f535 	.word	0x0800f535
 800f58c:	0800f6db 	.word	0x0800f6db
 800f590:	0800f535 	.word	0x0800f535
 800f594:	0800f5e3 	.word	0x0800f5e3
 800f598:	0800f535 	.word	0x0800f535
 800f59c:	0800f535 	.word	0x0800f535
 800f5a0:	0800f67b 	.word	0x0800f67b
 800f5a4:	6833      	ldr	r3, [r6, #0]
 800f5a6:	1d1a      	adds	r2, r3, #4
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	6032      	str	r2, [r6, #0]
 800f5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e09d      	b.n	800f6f4 <_printf_i+0x1e8>
 800f5b8:	6833      	ldr	r3, [r6, #0]
 800f5ba:	6820      	ldr	r0, [r4, #0]
 800f5bc:	1d19      	adds	r1, r3, #4
 800f5be:	6031      	str	r1, [r6, #0]
 800f5c0:	0606      	lsls	r6, r0, #24
 800f5c2:	d501      	bpl.n	800f5c8 <_printf_i+0xbc>
 800f5c4:	681d      	ldr	r5, [r3, #0]
 800f5c6:	e003      	b.n	800f5d0 <_printf_i+0xc4>
 800f5c8:	0645      	lsls	r5, r0, #25
 800f5ca:	d5fb      	bpl.n	800f5c4 <_printf_i+0xb8>
 800f5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	da03      	bge.n	800f5dc <_printf_i+0xd0>
 800f5d4:	232d      	movs	r3, #45	@ 0x2d
 800f5d6:	426d      	negs	r5, r5
 800f5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5dc:	4859      	ldr	r0, [pc, #356]	@ (800f744 <_printf_i+0x238>)
 800f5de:	230a      	movs	r3, #10
 800f5e0:	e011      	b.n	800f606 <_printf_i+0xfa>
 800f5e2:	6821      	ldr	r1, [r4, #0]
 800f5e4:	6833      	ldr	r3, [r6, #0]
 800f5e6:	0608      	lsls	r0, r1, #24
 800f5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5ec:	d402      	bmi.n	800f5f4 <_printf_i+0xe8>
 800f5ee:	0649      	lsls	r1, r1, #25
 800f5f0:	bf48      	it	mi
 800f5f2:	b2ad      	uxthmi	r5, r5
 800f5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5f6:	4853      	ldr	r0, [pc, #332]	@ (800f744 <_printf_i+0x238>)
 800f5f8:	6033      	str	r3, [r6, #0]
 800f5fa:	bf14      	ite	ne
 800f5fc:	230a      	movne	r3, #10
 800f5fe:	2308      	moveq	r3, #8
 800f600:	2100      	movs	r1, #0
 800f602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f606:	6866      	ldr	r6, [r4, #4]
 800f608:	60a6      	str	r6, [r4, #8]
 800f60a:	2e00      	cmp	r6, #0
 800f60c:	bfa2      	ittt	ge
 800f60e:	6821      	ldrge	r1, [r4, #0]
 800f610:	f021 0104 	bicge.w	r1, r1, #4
 800f614:	6021      	strge	r1, [r4, #0]
 800f616:	b90d      	cbnz	r5, 800f61c <_printf_i+0x110>
 800f618:	2e00      	cmp	r6, #0
 800f61a:	d04b      	beq.n	800f6b4 <_printf_i+0x1a8>
 800f61c:	4616      	mov	r6, r2
 800f61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f622:	fb03 5711 	mls	r7, r3, r1, r5
 800f626:	5dc7      	ldrb	r7, [r0, r7]
 800f628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f62c:	462f      	mov	r7, r5
 800f62e:	42bb      	cmp	r3, r7
 800f630:	460d      	mov	r5, r1
 800f632:	d9f4      	bls.n	800f61e <_printf_i+0x112>
 800f634:	2b08      	cmp	r3, #8
 800f636:	d10b      	bne.n	800f650 <_printf_i+0x144>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	07df      	lsls	r7, r3, #31
 800f63c:	d508      	bpl.n	800f650 <_printf_i+0x144>
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6861      	ldr	r1, [r4, #4]
 800f642:	4299      	cmp	r1, r3
 800f644:	bfde      	ittt	le
 800f646:	2330      	movle	r3, #48	@ 0x30
 800f648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f650:	1b92      	subs	r2, r2, r6
 800f652:	6122      	str	r2, [r4, #16]
 800f654:	f8cd a000 	str.w	sl, [sp]
 800f658:	464b      	mov	r3, r9
 800f65a:	aa03      	add	r2, sp, #12
 800f65c:	4621      	mov	r1, r4
 800f65e:	4640      	mov	r0, r8
 800f660:	f7ff fee6 	bl	800f430 <_printf_common>
 800f664:	3001      	adds	r0, #1
 800f666:	d14a      	bne.n	800f6fe <_printf_i+0x1f2>
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	b004      	add	sp, #16
 800f66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	f043 0320 	orr.w	r3, r3, #32
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	4833      	ldr	r0, [pc, #204]	@ (800f748 <_printf_i+0x23c>)
 800f67c:	2778      	movs	r7, #120	@ 0x78
 800f67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	6831      	ldr	r1, [r6, #0]
 800f686:	061f      	lsls	r7, r3, #24
 800f688:	f851 5b04 	ldr.w	r5, [r1], #4
 800f68c:	d402      	bmi.n	800f694 <_printf_i+0x188>
 800f68e:	065f      	lsls	r7, r3, #25
 800f690:	bf48      	it	mi
 800f692:	b2ad      	uxthmi	r5, r5
 800f694:	6031      	str	r1, [r6, #0]
 800f696:	07d9      	lsls	r1, r3, #31
 800f698:	bf44      	itt	mi
 800f69a:	f043 0320 	orrmi.w	r3, r3, #32
 800f69e:	6023      	strmi	r3, [r4, #0]
 800f6a0:	b11d      	cbz	r5, 800f6aa <_printf_i+0x19e>
 800f6a2:	2310      	movs	r3, #16
 800f6a4:	e7ac      	b.n	800f600 <_printf_i+0xf4>
 800f6a6:	4827      	ldr	r0, [pc, #156]	@ (800f744 <_printf_i+0x238>)
 800f6a8:	e7e9      	b.n	800f67e <_printf_i+0x172>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	f023 0320 	bic.w	r3, r3, #32
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	e7f6      	b.n	800f6a2 <_printf_i+0x196>
 800f6b4:	4616      	mov	r6, r2
 800f6b6:	e7bd      	b.n	800f634 <_printf_i+0x128>
 800f6b8:	6833      	ldr	r3, [r6, #0]
 800f6ba:	6825      	ldr	r5, [r4, #0]
 800f6bc:	6961      	ldr	r1, [r4, #20]
 800f6be:	1d18      	adds	r0, r3, #4
 800f6c0:	6030      	str	r0, [r6, #0]
 800f6c2:	062e      	lsls	r6, r5, #24
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	d501      	bpl.n	800f6cc <_printf_i+0x1c0>
 800f6c8:	6019      	str	r1, [r3, #0]
 800f6ca:	e002      	b.n	800f6d2 <_printf_i+0x1c6>
 800f6cc:	0668      	lsls	r0, r5, #25
 800f6ce:	d5fb      	bpl.n	800f6c8 <_printf_i+0x1bc>
 800f6d0:	8019      	strh	r1, [r3, #0]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6123      	str	r3, [r4, #16]
 800f6d6:	4616      	mov	r6, r2
 800f6d8:	e7bc      	b.n	800f654 <_printf_i+0x148>
 800f6da:	6833      	ldr	r3, [r6, #0]
 800f6dc:	1d1a      	adds	r2, r3, #4
 800f6de:	6032      	str	r2, [r6, #0]
 800f6e0:	681e      	ldr	r6, [r3, #0]
 800f6e2:	6862      	ldr	r2, [r4, #4]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f7f0 fe02 	bl	80002f0 <memchr>
 800f6ec:	b108      	cbz	r0, 800f6f2 <_printf_i+0x1e6>
 800f6ee:	1b80      	subs	r0, r0, r6
 800f6f0:	6060      	str	r0, [r4, #4]
 800f6f2:	6863      	ldr	r3, [r4, #4]
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6fc:	e7aa      	b.n	800f654 <_printf_i+0x148>
 800f6fe:	6923      	ldr	r3, [r4, #16]
 800f700:	4632      	mov	r2, r6
 800f702:	4649      	mov	r1, r9
 800f704:	4640      	mov	r0, r8
 800f706:	47d0      	blx	sl
 800f708:	3001      	adds	r0, #1
 800f70a:	d0ad      	beq.n	800f668 <_printf_i+0x15c>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	079b      	lsls	r3, r3, #30
 800f710:	d413      	bmi.n	800f73a <_printf_i+0x22e>
 800f712:	68e0      	ldr	r0, [r4, #12]
 800f714:	9b03      	ldr	r3, [sp, #12]
 800f716:	4298      	cmp	r0, r3
 800f718:	bfb8      	it	lt
 800f71a:	4618      	movlt	r0, r3
 800f71c:	e7a6      	b.n	800f66c <_printf_i+0x160>
 800f71e:	2301      	movs	r3, #1
 800f720:	4632      	mov	r2, r6
 800f722:	4649      	mov	r1, r9
 800f724:	4640      	mov	r0, r8
 800f726:	47d0      	blx	sl
 800f728:	3001      	adds	r0, #1
 800f72a:	d09d      	beq.n	800f668 <_printf_i+0x15c>
 800f72c:	3501      	adds	r5, #1
 800f72e:	68e3      	ldr	r3, [r4, #12]
 800f730:	9903      	ldr	r1, [sp, #12]
 800f732:	1a5b      	subs	r3, r3, r1
 800f734:	42ab      	cmp	r3, r5
 800f736:	dcf2      	bgt.n	800f71e <_printf_i+0x212>
 800f738:	e7eb      	b.n	800f712 <_printf_i+0x206>
 800f73a:	2500      	movs	r5, #0
 800f73c:	f104 0619 	add.w	r6, r4, #25
 800f740:	e7f5      	b.n	800f72e <_printf_i+0x222>
 800f742:	bf00      	nop
 800f744:	0800fe21 	.word	0x0800fe21
 800f748:	0800fe32 	.word	0x0800fe32

0800f74c <memmove>:
 800f74c:	4288      	cmp	r0, r1
 800f74e:	b510      	push	{r4, lr}
 800f750:	eb01 0402 	add.w	r4, r1, r2
 800f754:	d902      	bls.n	800f75c <memmove+0x10>
 800f756:	4284      	cmp	r4, r0
 800f758:	4623      	mov	r3, r4
 800f75a:	d807      	bhi.n	800f76c <memmove+0x20>
 800f75c:	1e43      	subs	r3, r0, #1
 800f75e:	42a1      	cmp	r1, r4
 800f760:	d008      	beq.n	800f774 <memmove+0x28>
 800f762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f76a:	e7f8      	b.n	800f75e <memmove+0x12>
 800f76c:	4402      	add	r2, r0
 800f76e:	4601      	mov	r1, r0
 800f770:	428a      	cmp	r2, r1
 800f772:	d100      	bne.n	800f776 <memmove+0x2a>
 800f774:	bd10      	pop	{r4, pc}
 800f776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f77e:	e7f7      	b.n	800f770 <memmove+0x24>

0800f780 <_realloc_r>:
 800f780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f784:	4680      	mov	r8, r0
 800f786:	4615      	mov	r5, r2
 800f788:	460c      	mov	r4, r1
 800f78a:	b921      	cbnz	r1, 800f796 <_realloc_r+0x16>
 800f78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f790:	4611      	mov	r1, r2
 800f792:	f7ff bb79 	b.w	800ee88 <_malloc_r>
 800f796:	b92a      	cbnz	r2, 800f7a4 <_realloc_r+0x24>
 800f798:	f7ff fca8 	bl	800f0ec <_free_r>
 800f79c:	2400      	movs	r4, #0
 800f79e:	4620      	mov	r0, r4
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	f000 f81a 	bl	800f7dc <_malloc_usable_size_r>
 800f7a8:	4285      	cmp	r5, r0
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	d802      	bhi.n	800f7b4 <_realloc_r+0x34>
 800f7ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f7b2:	d8f4      	bhi.n	800f79e <_realloc_r+0x1e>
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	f7ff fb66 	bl	800ee88 <_malloc_r>
 800f7bc:	4607      	mov	r7, r0
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d0ec      	beq.n	800f79c <_realloc_r+0x1c>
 800f7c2:	42b5      	cmp	r5, r6
 800f7c4:	462a      	mov	r2, r5
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	bf28      	it	cs
 800f7ca:	4632      	movcs	r2, r6
 800f7cc:	f7ff fc80 	bl	800f0d0 <memcpy>
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	f7ff fc8a 	bl	800f0ec <_free_r>
 800f7d8:	463c      	mov	r4, r7
 800f7da:	e7e0      	b.n	800f79e <_realloc_r+0x1e>

0800f7dc <_malloc_usable_size_r>:
 800f7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7e0:	1f18      	subs	r0, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bfbc      	itt	lt
 800f7e6:	580b      	ldrlt	r3, [r1, r0]
 800f7e8:	18c0      	addlt	r0, r0, r3
 800f7ea:	4770      	bx	lr
 800f7ec:	0000      	movs	r0, r0
	...

0800f7f0 <sqrt>:
 800f7f0:	b508      	push	{r3, lr}
 800f7f2:	ed2d 8b04 	vpush	{d8-d9}
 800f7f6:	eeb0 8b40 	vmov.f64	d8, d0
 800f7fa:	f000 f819 	bl	800f830 <__ieee754_sqrt>
 800f7fe:	eeb4 8b48 	vcmp.f64	d8, d8
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	d60c      	bvs.n	800f822 <sqrt+0x32>
 800f808:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800f828 <sqrt+0x38>
 800f80c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f814:	d505      	bpl.n	800f822 <sqrt+0x32>
 800f816:	f7ff fc2f 	bl	800f078 <__errno>
 800f81a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800f81e:	2321      	movs	r3, #33	@ 0x21
 800f820:	6003      	str	r3, [r0, #0]
 800f822:	ecbd 8b04 	vpop	{d8-d9}
 800f826:	bd08      	pop	{r3, pc}
	...

0800f830 <__ieee754_sqrt>:
 800f830:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f834:	4770      	bx	lr
	...

0800f838 <_init>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	bf00      	nop
 800f83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83e:	bc08      	pop	{r3}
 800f840:	469e      	mov	lr, r3
 800f842:	4770      	bx	lr

0800f844 <_fini>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	bf00      	nop
 800f848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84a:	bc08      	pop	{r3}
 800f84c:	469e      	mov	lr, r3
 800f84e:	4770      	bx	lr
